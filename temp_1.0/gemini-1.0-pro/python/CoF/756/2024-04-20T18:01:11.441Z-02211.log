---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `mare.in` and write to `mare.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau $n$ numere naturale $x_1, x_2, \dots, x_n$. Cu secvențe de numere din șirul $x_1, x_2, \dots, x_n$ se pot forma numere mari scriind numerele secvenței unul după altul fără spații între ele.

# Cerință

Dintre toate numerele mari formate ca mai sus, se cere să se determine cel mai mare dintre ele care este palindrom.

# Date de intrare

Fișierul de intrare `mare.in` conține pe prima linie numărul n, iar pe linia a doua numerele naturale $x_1, x_2, \dots, x_n$ cu un spațiu între ele.

# Date de ieșire

Fișierul de ieșire `mare.out` va conține pe prima linie numărul mare din cerință.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $x_1, x_2, \dots, x_n$ sunt numere naturale cu maximum 9 cifre.
* Prin secvență de numere într-un șir de numere, înțelegem unul sau mai multe numere aflate unul imediat după altul în șir.
* Prin număr palindrom înțelegem un număr care, citit de la stânga la dreapta sau de la dreapta la stânga, ne dă același număr.
* Toate testele folosite la evaluare conțin cel puțin un număr mare.

---

Example:
`mare.in`
```
9
80 1 23 2 1 401 10 4 900
```

`mare.out`
```
401104
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def is_palindrome(num):
    # Convert the number to string
    str_num = str(num)
    # Reverse the string
    reversed_str_num = str_num[::-1]
    # Check if the string is equal to the reversed string
    return str_num == reversed_str_num


def find_largest_palindrome(nums):
    # Create an empty string to store the largest palindrome
    largest_palindrome = ""
    # Iterate over all the possible starting indices of the palindrome
    for i in range(len(nums)):
        # Create an empty string to store the current palindrome
        current_palindrome = ""
        # Iterate over all the possible ending indices of the palindrome
        for j in range(i, len(nums)):
            # Append the current number to the current palindrome
            current_palindrome += str(nums[j])
            # Check if the current palindrome is a palindrome
            if is_palindrome(int(current_palindrome)):
                # If the current palindrome is a palindrome and it is larger than the largest palindrome, update the largest palindrome
                if len(current_palindrome) > len(largest_palindrome):
                    largest_palindrome = current_palindrome
    # Return the largest palindrome
    return largest_palindrome


# Read the input from the file
with open("mare.in", "r") as f:
    n = int(f.readline())  # Read the number of elements in the list
    nums = list(map(int, f.readline().split()))  # Read the list of elements

# Find the largest palindrome
largest_palindrome = find_largest_palindrome(nums)

# Write the output to the file
with open("mare.out", "w") as f:
    f.write(largest_palindrome)
```
