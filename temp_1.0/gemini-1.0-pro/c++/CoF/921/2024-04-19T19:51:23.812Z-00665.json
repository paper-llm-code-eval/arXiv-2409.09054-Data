{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 1
    }
  },
  "programmingLang": "c++",
  "temperature": 1,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_1.0/gemini-1.0-pro/c++/CoF/921/2024-04-19T19:51:23.812Z-00665.log",
  "attemptStart": 1713556283.812,
  "attemptEnd": 1713556378.276,
  "attemptDuration": 94.46399998664856,
  "code": "#include <fstream>\n#include <bitset>\n#include <algorithm>\nusing namespace std;\n\nifstream f(\"forta.in\");\nofstream g(\"forta.out\");\n\ntypedef long long ll;\n\nconst int maxn = 1e5 + 10;\nconst int maxb = maxn * 31;\nbitset<maxb> d, pref;\nint force[maxn], nr[maxn];\nll v[maxn];\n\nint main() {\n  int n, c;\n  f >> c >> n;\n  for(int i = 1; i <= n; ++i) {\n    f >> v[i];\n    ll x = 1;\n    force[i] = 1;\n    while(x <= v[i]) {\n      if(v[i] % x == 0) {\n        nr[i]++;\n        d[31 * (i - 1) + nr[i]] = true;\n      }\n      x <<= 1;\n    }\n  }\n  pref[0] = d[0];\n  for(int i = 1; i <= 31 * n; ++i) {\n    pref[i] = pref[i - 1] | d[i];\n  }\n  int maxf = 0, num = 0;\n  for(int i = 1; i <= n; ++i) {\n    if(nr[i] > maxf) {\n      maxf = nr[i];\n      num = i;\n    }\n  }\n  int p = 0;\n  for(int i = 1; i <= 31 * n; ++i) {\n    if(pref[i] & d[i])\n      p++;\n  }\n  if(c == 1)\n    g << v[num];\n  else {\n    int rez = 1;\n    for(int i = 1; i <= n; ++i) {\n      int j = i;\n      while(j < n && nr[i] == nr[j + 1]) {\n        j++;\n        rez = max(rez, j - i + 1);\n      }\n    }\n    g << rez;\n  }\n  return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4151,
  "metadata": {
    "id": 921,
    "examples": [
      {
        "in": "1\n6\n17 243 10 32 25 13",
        "out": "32",
        "explainer": ""
      },
      {
        "in": "2\n8\n121 10 14 25 49 9 25 15",
        "out": "5",
        "explainer": ""
      }
    ],
    "body": "Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \\{1,2,5,10\\}$.\n\nScrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:\n\n1. determină cel mai mic număr din șir care are forța maximă;\n2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.\n\n# Date de intrare\n\n\nFișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.\n\n\n# Date de ieșire\n\n\nFișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.\n\n\n# Restricții și precizări\n\n* $1 \\leq n \\leq 100 \\ 000$;\n* $1 \\leq$ numerele din șir $\\leq 2 \\cdot 10^9$;\n* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.\n* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.\n* Pentru teste valorând $30$ de puncte $1 \\leq n \\leq 10 \\ 000$",
    "header": {
      "problem_id": 921,
      "problem_name": "forta",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "forta.in",
      "output_filename": "forta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 VI: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "forta.in",
      "output": "forta.out"
    },
    "consoleInteraction": false
  }
}