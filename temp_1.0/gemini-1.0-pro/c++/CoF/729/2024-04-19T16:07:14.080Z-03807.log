---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <algorithm>
#define fi first
#define se second

int nn, x[101], p[32001];
std::ofstream fo("siruri.out");

std::vector< std::pair<int, int> > v;

bool comp(std::pair<int, int> a, std::pair<int, int> b) {
    if(a.fi < b.fi) return true;
    return false;
}

int main() {
    std::ifstream fi("siruri.in");
    std::vector<int> sol(101);
    fi >> nn;
    for(int i = 1; i <= nn; ++i) {
        fi >> x[i];
        v.push_back(std::make_pair(x[i], i));
    }
    std::sort(v.begin(), v.end());
    int c = 1;
    for(auto& val : v) sol[val.se] = c++;
    for(int i = 1; i <= nn; ++i) fo << sol[i] << ' ';
    fo << '\n';
    fo.close();
    return 0;
}
```
