---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <cmath>
using namespace std;

long long Pow(long long a, long long b)
{
    long long v = 1;
    for (long long i = 1; i <= b; ++i)
        v *= a;
    return v;
}

long long get_kth(long long n, long long k)
{
    long long p = 0;
    for (long long i = 2; i * i <= n; ++i)
    {
        if (n % i == 0)
        {
            if (++p == k)
                return i;
            while (n % i == 0)
                n /= i;
        }
    }
    if (n != 1)
        ++p;
    if (p == k)
        return n;
    return -1;
}

int main()
{
    ifstream in("cufar.in");
    ofstream out("cufar.out");
    long long p, n, nr, k, ans = 0;
    in >> p >> n;
    if (p == 1)
    {
        in >> nr >> k;
        out << get_kth(nr, k) << '\n';
    }
    else
    {
        for (long long i = 1; i <= n; ++i)
        {
            in >> nr >> k;
            ans += get_kth(nr, k);
        }
        long long tmp = ans;
        vector<long long> digits;
        while (tmp)
        {
            digits.push_back(tmp % 10);
            tmp /= 10;
        }
        for (long long i = digits.size() - 1; i >= 0; --i)
            out << digits[i];
        out << '\n';
    }
    return 0;
}
```
