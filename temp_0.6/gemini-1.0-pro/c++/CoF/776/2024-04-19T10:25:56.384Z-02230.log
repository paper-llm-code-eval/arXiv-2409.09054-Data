---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>

using namespace std;

const int MAX_N = 50;
const int MAX_M = 50;
const int MAX_T = 2300000;

char grid[MAX_N][MAX_M];
char new_grid[MAX_N][MAX_M];

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    int n, m, t;
    fin >> n >> m >> t;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            fin >> grid[i][j];
        }
    }

    while (t--) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int r = 0, a = 0;
                // check top
                if (i > 0) {
                    if (grid[i - 1][j] == 'r') r++;
                    else a++;
                }
                // check bottom
                if (i < n - 1) {
                    if (grid[i + 1][j] == 'r') r++;
                    else a++;
                }
                // check left
                if (j > 0) {
                    if (grid[i][j - 1] == 'r') r++;
                    else a++;
                }
                // check right
                if (j < m - 1) {
                    if (grid[i][j + 1] == 'r') r++;
                    else a++;
                }
                // check top left
                if (i > 0 && j > 0) {
                    if (grid[i - 1][j - 1] == 'r') r++;
                    else a++;
                }
                // check top right
                if (i > 0 && j < m - 1) {
                    if (grid[i - 1][j + 1] == 'r') r++;
                    else a++;
                }
                // check bottom left
                if (i < n - 1 && j > 0) {
                    if (grid[i + 1][j - 1] == 'r') r++;
                    else a++;
                }
                // check bottom right
                if (i < n - 1 && j < m - 1) {
                    if (grid[i + 1][j + 1] == 'r') r++;
                    else a++;
                }

                if (r > a) new_grid[i][j] = 'r';
                else if (a > r) new_grid[i][j] = 'a';
                else new_grid[i][j] = grid[i][j];
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                grid[i][j] = new_grid[i][j];
            }
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            fout << grid[i][j];
        }
        fout << endl;
    }

    return 0;
}
```
