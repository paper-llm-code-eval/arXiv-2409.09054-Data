---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pasiunea Mirunei este să coloreze. Vacanţa trecută şi-a petrecut-o la bunica ei la ţară şi pentru că se cam plictisea s-a gândit să vopsească gardul de la casa bunicii.

Gardul este compus din $N$ scânduri dispuse una lângă alta. Miruna a găsit în garajul bunicii $5$ cutii de vopsea de culori diferite: **albă**, **albastră**, **roşie**, **verde** şi **galbenă**. Când a vopsit gardul, Miruna a respectat următoarele reguli:
-	Dacă o scândură era vopsită cu **alb**, următoarea scândură o vopsea obligatoriu cu **albastru**
-	Dacă o scândură era vopsită cu **albastru**, atunci următoarea scândură o vopsea cu **alb** sau **roşu**
-	Dacă o scândură era vopsită cu **roşu**, atunci următoarea scândură o vopsea cu **albastru** sau **verde**
-	Dacă o scândură era vopsită cu **verde**, atunci următoarea scândură o vopsea cu **roșu** sau **galben**
-	Dacă o scândură era vopsită cu **galben**, atunci următoarea scândură o vopsea obligatoriu cu **verde**

După ce a și-a terminat treaba Miruna își admira “opera de artă” și se întreba în câte moduri diferite ar fi putut să vopsească gardul bunicii. 

# Cerinţă

Ajutați-o pe Miruna să găsească răspunsul la întrebarea sa.

# Date de intrare


Fişierul `culori.in` conţine pe prima sa linie un singur număr natural $N$.


# Date de ieșire


Fişierul de ieşire `culori.out` va conţine pe prima sa linie un singur număr întreg reprezentând numărul de moduri diferite în care Miruna ar fi putut să vopsească gardul bunicii.


# Restricții și precizări

* $1 \leq N \leq 5 \ 000$;
* Pentru $25\%$ dintre teste $N \leq 45$.

---

Example:
`culori.in`
```
4
```

`culori.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
using namespace std;

const int MOD = 1000000007;

int main() {
    ifstream in("culori.in");
    ofstream out("culori.out");

    int n;
    in >> n;

    long long dp[5][n + 1];
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j <= n; j++) {
            dp[i][j] = 0;
        }
    }

    dp[0][1] = 1;
    dp[1][1] = 1;
    dp[2][1] = 1;
    dp[3][1] = 1;
    dp[4][1] = 1;

    for (int i = 2; i <= n; i++) {
        dp[0][i] = dp[1][i - 1];
        dp[1][i] = (dp[0][i - 1] + dp[2][i - 1]) % MOD;
        dp[2][i] = (dp[1][i - 1] + dp[3][i - 1]) % MOD;
        dp[3][i] = (dp[2][i - 1] + dp[4][i - 1]) % MOD;
        dp[4][i] = dp[3][i - 1];
    }

    long long ans = 0;
    for (int i = 0; i < 5; i++) {
        ans = (ans + dp[i][n]) % MOD;
    }

    out << ans << endl;

    return 0;
}
```
