---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#define _CRT_NO_SECURE_WARNINGS
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

using namespace std;

ifstream in("comp.in");
ofstream out("comp.out");

const int MAX_N = 1000;

int n, numar_comp_cu_semn_mai_mic;
string expresii[MAX_N + 1];

int main()
{
    in >> n;
    for (int i = 1; i <= n; ++i)
    {
        in >> expresii[i];
    }

    numar_comp_cu_semn_mai_mic = 0;
    for (int i = 1; i <= n; ++i)
    {
        int poz_semn_comp = expresii[i].find('>');
        if (poz_semn_comp == -1)
        {
            poz_semn_comp = expresii[i].find('<');
            ++numar_comp_cu_semn_mai_mic;
        }
        int poz_semn_plus = expresii[i].find('+');

        vector<int> valori_exprimare1;
        if (poz_semn_plus == -1)
        {
            istringstream iss(expresii[i].substr(0, poz_semn_comp));
            int valoare;
            while (iss >> valoare)
            {
                valori_exprimare1.push_back(valoare);
            }
        }
        else
        {
            istringstream iss1(expresii[i].substr(0, poz_semn_plus));
            istringstream iss2(expresii[i].substr(poz_semn_plus + 1, poz_semn_comp - poz_semn_plus - 1));
            int valoare;
            while (iss1 >> valoare)
            {
                valori_exprimare1.push_back(valoare);
            }
            while (iss2 >> valoare)
            {
                valori_exprimare1.push_back(valoare);
            }
        }

        vector<int> valori_exprimare2;
        if (poz_semn_plus == -1)
        {
            istringstream iss(expresii[i].substr(poz_semn_comp + 1));
            int valoare;
            while (iss >> valoare)
            {
                valori_exprimare2.push_back(valoare);
            }
        }
        else
        {
            istringstream iss1(expresii[i].substr(poz_semn_comp + 1, poz_semn_plus - poz_semn_comp - 1));
            istringstream iss2(expresii[i].substr(poz_semn_plus + 1));
            int valoare;
            while (iss1 >> valoare)
            {
                valori_exprimare2.push_back(valoare);
            }
            while (iss2 >> valoare)
            {
                valori_exprimare2.push_back(valoare);
            }
        }

        int numar_mii_exprimare1 = 0;
        int numar_sute_exprimare1 = 0;
        int numar_zeci_exprimare1 = 0;
        int numar_unitati_exprimare1 = 0;
        for (int j = 0; j < valori_exprimare1.size(); ++j)
        {
            if (valori_exprimare1[j] >= 1000)
            {
                numar_mii_exprimare1 += valori_exprimare1[j] / 1000;
                valori_exprimare1[j] %= 1000;
            }
            if (valori_exprimare1[j] >= 100)
            {
                numar_sute_exprimare1 += valori_exprimare1[j] / 100;
                valori_exprimare1[j] %= 100;
            }
            if (valori_exprimare1[j] >= 10)
            {
                numar_zeci_exprimare1 += valori_exprimare1[j] / 10;
                valori_exprimare1[j] %= 10;
            }
            if (valori_exprimare1[j] >= 1)
            {
                numar_unitati_exprimare1 += valori_exprimare1[j];
            }
        }

        int numar_mii_exprimare2 = 0;
        int numar_sute_exprimare2 = 0;
        int numar_zeci_exprimare2 = 0;
        int numar_unitati_exprimare2 = 0;
        for (int j = 0; j < valori_exprimare2.size(); ++j)
        {
            if (valori_exprimare2[j] >= 1000)
            {
                numar_mii_exprimare2 += valori_exprimare2[j] / 1000;
                valori_exprimare2[j] %= 1000;
            }
            if (valori_exprimare2[j] >= 100)
            {
                numar_sute_exprimare2 += valori_exprimare2[j] / 100;
                valori_exprimare2[j] %= 100;
            }
            if (valori_exprimare2[j] >= 10)
            {
                numar_zeci_exprimare2 += valori_exprimare2[j] / 10;
                valori_exprimare2[j] %= 10;
            }
            if (valori_exprimare2[j] >= 1)
            {
                numar_unitati_exprimare2 += valori_exprimare2[j];
            }
        }

        out << (numar_mii_exprimare1 > numar_mii_exprimare2 ||
            numar_mii_exprimare1 == numar_mii_exprimare2 &&
            numar_sute_exprimare1 > numar_sute_exprimare2 ||
            numar_mii_exprimare1 == numar_mii_exprimare2 &&
            numar_sute_exprimare1 == numar_sute_exprimare2 &&
            numar_zeci_exprimare1 > numar_zeci_exprimare2 ||
            numar_mii_exprimare1 == numar_mii_exprimare2 &&
            numar_sute_exprimare1 == numar_sute_exprimare2 &&
            numar_zeci_exprimare1 == numar_zeci_exprimare2 &&
            numar_unitati_exprimare1 > numar_unitati_exprimare2) << '\n';
    }
    out << numar_comp_cu_semn_mai_mic << '\n';

    return 0;
}
```
