{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0.6
    }
  },
  "programmingLang": "python",
  "temperature": 0.6,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.6/gemini-1.0-pro/python/CoF/699/2024-04-20T09:32:34.180Z-01100.log",
  "attemptStart": 1713605554.18,
  "attemptEnd": 1713605568.916,
  "attemptDuration": 14.735999822616577,
  "code": "def read_input():\n    with open('poarta.in', 'r') as f:\n        p = int(f.readline())\n        teams = []\n        for _ in range(p):\n            x1, y1, x2, y2 = map(int, f.readline().split())\n            teams.append(((x1, y1), (x2, y2)))\n    return p, teams\n\n\ndef write_output(result):\n    with open('poarta.out', 'w') as f:\n        f.write(str(result))\n\n\ndef manhattan_distance(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return abs(x1 - x2) + abs(y1 - y2)\n\n\ndef solve(p, teams):\n    # Create a graph where each node is a team's position and the edges are the distances between them\n    graph = {}\n    for team in teams:\n        graph[team[0]] = {}\n        for other_team in teams:\n            if team[0] != other_team[0]:\n                graph[team[0]][other_team[0]] = manhattan_distance(team[0], other_team[0])\n\n    # Find the minimum number of moves using a breadth-first search\n    visited = set()\n    queue = [(0, teams[0][0])]\n    while queue:\n        moves, position = queue.pop(0)\n        if position not in visited:\n            visited.add(position)\n            if position == teams[0][1]:\n                return moves\n            for next_position in graph[position]:\n                queue.append((moves + graph[position][next_position], next_position))\n\n\nif __name__ == '__main__':\n    p, teams = read_input()\n    result = solve(p, teams)\n    write_output(result)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1160,
  "metadata": {
    "id": 699,
    "examples": [
      {
        "in": "3\n1 2 3 4\n6 5 3 9\n3 4 1 2",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.\n\n# Cerință\n\nDându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.\n\n# Date de intrare\nFișierul de intrare `poarta.in` are următorul format:\n- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.\n- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).\n\n# Date de ieşire\nPe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.\n\n# Restricții și precizări\n- $1 < p < 5\\ 000$\n- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.\n- **Atenție la cazurile când poziția inițială este identică cu cea finală!**\n- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.\n- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.",
    "header": {
      "problem_id": 699,
      "problem_name": "poarta",
      "tags": "[Graphs, Grid]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "poarta.in",
      "output_filename": "poarta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "poarta.in",
      "output": "poarta.out"
    },
    "consoleInteraction": false
  }
}