{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0
    }
  },
  "programmingLang": "c++",
  "temperature": 0,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.0/gemini-1.0-pro/c++/CoF/767/2024-04-18T15:22:19.645Z-01204.log",
  "attemptStart": 1713453739.645,
  "attemptEnd": 1713453752.719,
  "attemptDuration": 13.074000120162964,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 1000;\nconst int MAXC = 5;\n\nint n, maxc;\nint x[MAXN + 1], y[MAXN + 1], c[MAXN + 1];\nvector<int> v[MAXN + 1];\nint dp[MAXN + 1][MAXN + 1][MAXC + 1];\n\nint main() {\n    ifstream in(\"dreptc.in\");\n    ofstream out(\"dreptc.out\");\n\n    in >> n >> maxc;\n    for (int i = 1; i <= n; i++) {\n        in >> x[i] >> y[i] >> c[i];\n        v[x[i]].push_back(i);\n    }\n\n    int ans = 0;\n    for (int i = 1; i <= MAXN; i++) {\n        sort(v[i].begin(), v[i].end(), [](int a, int b) { return y[a] < y[b]; });\n        for (int j = 0; j < v[i].size(); j++) {\n            for (int k = 0; k <= maxc; k++) {\n                dp[i][j][k] = 1;\n                if (j > 0) {\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k]);\n                }\n                if (k > 0) {\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j][k - 1]);\n                }\n                if (j > 0 && k > 0 && c[v[i][j]] == c[v[i][j - 1]]) {\n                    dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k - 1] + 1);\n                }\n                ans = max(ans, dp[i][j][k]);\n            }\n        }\n    }\n\n    out << ans << '\\n';\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1188,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}