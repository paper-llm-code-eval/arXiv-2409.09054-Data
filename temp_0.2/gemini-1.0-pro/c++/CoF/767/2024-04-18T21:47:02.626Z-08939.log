---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAXN = 1000;
const int MAXC = 5;

int n, maxc;
int x[MAXN + 1], y[MAXN + 1], c[MAXN + 1];
vector<int> v[MAXN + 1];
int dp[MAXN + 1][MAXN + 1][MAXC + 1];

int main() {
    ifstream in("dreptc.in");
    ofstream out("dreptc.out");

    in >> n >> maxc;
    for (int i = 1; i <= n; i++) {
        in >> x[i] >> y[i] >> c[i];
        v[x[i]].push_back(i);
    }

    int ans = 0;
    for (int i = 0; i <= 1000; i++) {
        sort(v[i].begin(), v[i].end(), [](int a, int b) { return y[a] < y[b]; });
        for (int j = 0; j < v[i].size(); j++) {
            for (int k = 0; k <= maxc; k++) {
                dp[i][j][k] = 1;
                if (j > 0) {
                    dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k]);
                }
                if (k > 0) {
                    dp[i][j][k] = max(dp[i][j][k], dp[i][j][k - 1]);
                }
                if (j > 0 && k > 0 && c[v[i][j]] == c[v[i][j - 1]]) {
                    dp[i][j][k] = max(dp[i][j][k], dp[i][j - 1][k - 1] + 1);
                }
                ans = max(ans, dp[i][j][k]);
            }
        }
    }

    out << ans << '\n';
    return 0;
}
```
