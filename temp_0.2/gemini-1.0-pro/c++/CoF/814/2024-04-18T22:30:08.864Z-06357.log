---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <string>
#include <iostream>
#include <algorithm>

using namespace std;

int main() {
  ifstream in("comp.in");
  ofstream out("comp.out");
  int n;
  in >> n;
  vector<string> comp(n);
  for (int i = 0; i < n; i++) {
    in >> comp[i];
  }
  int cnt = 0;
  for (int i = 0; i < n; i++) {
    if (comp[i].find('<') != string::npos) {
      cnt++;
    }
  }
  out << cnt << endl;
  for (int i = 0; i < n; i++) {
    int a = 0, b = 0;
    int j = 0;
    while (j < comp[i].size() && comp[i][j] != '<' && comp[i][j] != '>') {
      if (comp[i][j] == 'm') {
        a += 1000;
      } else if (comp[i][j] == 's') {
        a += 100;
      } else if (comp[i][j] == 'z') {
        a += 10;
      } else if (comp[i][j] == 'u') {
        a += 1;
      }
      j++;
    }
    j++;
    while (j < comp[i].size()) {
      if (comp[i][j] == 'm') {
        b += 1000;
      } else if (comp[i][j] == 's') {
        b += 100;
      } else if (comp[i][j] == 'z') {
        b += 10;
      } else if (comp[i][j] == 'u') {
        b += 1;
      }
      j++;
    }
    if (comp[i].find('<') != string::npos) {
      out << (a < b) << endl;
    } else {
      out << (a > b) << endl;
    }
  }
  return 0;
}
```
