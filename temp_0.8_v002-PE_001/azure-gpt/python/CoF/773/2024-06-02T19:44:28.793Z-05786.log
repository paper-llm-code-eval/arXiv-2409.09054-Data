---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to convert time to total seconds
def time_to_seconds(hours, minutes, seconds):
    return hours * 3600 + minutes * 60 + seconds

# Function to convert back from total seconds to hours, minutes, seconds
def seconds_to_time(total_seconds):
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    return (hours, minutes, seconds)

# Read data from file
with open('schi.in', 'r') as file:
    start_time = list(map(int, file.readline().split()))
    n = int(file.readline().strip())
    competitors = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Calculate race times in seconds
race_times = competitors[:, 0] * 60 + competitors[:, 1]

# Calculate start time in seconds
start_time_seconds = time_to_seconds(start_time[0], start_time[1], start_time[2])

# Calculate finish times in seconds
finish_times = start_time_seconds + race_times

# Find the earliest and latest finish time
earliest_finish = seconds_to_time(np.min(finish_times))
latest_finish = seconds_to_time(np.max(finish_times))

# Write output to file
with open('schi.out', 'w') as file:
    file.write(f"{earliest_finish[0]} {earliest_finish[1]} {earliest_finish[2]}\n")
    file.write(f"{latest_finish[0]} {latest_finish[1]} {latest_finish[2]}\n")
```

This solution makes use of numpy to efficiently handle the array of competitors' times and perform vectorized operations. The final solution reads from the file `schi.in` and writes to the file `schi.out` as required. It treats time as seconds to perform the necessary calculations and then converts back to hours, minutes, and seconds before writing the output.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found, which means that `numpy` is not installed in the environment where the code is being executed, or the environment does not support numpy due to memory constraints.

Given the memory limit of ~8MB, it's likely that including the `numpy` library would exceed this limit due to its size. Therefore, we need to implement a solution that does not rely on `numpy` or any other external libraries that aren't part of the standard Python library.

Let's rewrite the solution without using `numpy`:

```python
# Function to convert time to total seconds
def time_to_seconds(hours, minutes, seconds):
    return hours * 3600 + minutes * 60 + seconds

# Function to convert back from total seconds to hours, minutes, seconds
def seconds_to_time(total_seconds):
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    return (hours, minutes, seconds)

# Read data from file
with open('schi.in', 'r') as file:
    start_time = list(map(int, file.readline().split()))
    n = int(file.readline().strip())
    competitors = [list(map(int, file.readline().split())) for _ in range(n)]

# Calculate race times in seconds
race_times = [m * 60 + s for m, s in competitors]

# Calculate start time in seconds
start_time_seconds = time_to_seconds(start_time[0], start_time[1], start_time[2])

# Calculate finish times in seconds
finish_times = [start_time_seconds + rt for rt in race_times]

# Find the earliest and latest finish time
earliest_finish = seconds_to_time(min(finish_times))
latest_finish = seconds_to_time(max(finish_times))

# Write output to file
with open('schi.out', 'w') as file:
    file.write(f"{earliest_finish[0]} {earliest_finish[1]} {earliest_finish[2]}\n")
    file.write(f"{latest_finish[0]} {latest_finish[1]} {latest_finish[2]}\n")
```

This solution only uses the standard Python library, which should be well within the memory limit and should not cause any ModuleNotFoundError. It achieves the same result as the previous one without numpy.
