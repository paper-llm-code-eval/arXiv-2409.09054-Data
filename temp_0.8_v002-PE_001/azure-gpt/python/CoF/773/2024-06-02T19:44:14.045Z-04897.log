---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        start_time = list(map(int, file.readline().split()))
        n = int(file.readline().strip())
        times = [list(map(int, file.readline().split())) for _ in range(n)]
    return start_time, np.array(times)

def add_times(start_time, times):
    total_seconds = times[:, 0] * 60 + times[:, 1]
    finish_seconds = start_time[2] + total_seconds
    finish_minutes = start_time[1] + finish_seconds // 60
    finish_hours = start_time[0] + finish_minutes // 60

    finish_times = np.vstack([
        finish_hours % 24, 
        finish_minutes % 60, 
        finish_seconds % 60]
    ).T
    return finish_times

def write_output(filename, first_finisher, last_finisher):
    with open(filename, 'w') as file:
        file.write(f"{first_finisher[0]} {first_finisher[1]} {first_finisher[2]}\n")
        file.write(f"{last_finisher[0]} {last_finisher[1]} {last_finisher[2]}\n")
        
def main():
    start_time, times = read_input('schi.in')
    finish_times = add_times(start_time, times)
    
    first_finisher = np.min(finish_times, axis=0)
    last_finisher = np.max(finish_times, axis=0)
    
    write_output('schi.out', first_finisher, last_finisher)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to convert input times to seconds
def time_to_seconds(start_time, times):
    start_seconds = start_time[0] * 3600 + start_time[1] * 60 + start_time[2]
    race_seconds = times[:, 0] * 60 + times[:, 1]
    return start_seconds, race_seconds

# Function to convert seconds back to hours, minutes, seconds
def seconds_to_time(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds

# Read input from 'schi.in'
def read_input():
    with open('schi.in', 'r') as file:
        start_time = np.array([int(x) for x in file.readline().split()], dtype=np.int32)
        n = int(file.readline())
        times = np.array([[int(x) for x in file.readline().split()] for _ in range(n)], dtype=np.int32)
    return start_time, times

# Write output to 'schi.out'
def write_output(first_finisher, last_finisher):
    with open('schi.out', 'w') as file:
        file.write("{} {} {}\n".format(*first_finisher))
        file.write("{} {} {}\n".format(*last_finisher))

def main():
    start_time, times = read_input()
    start_seconds, race_seconds = time_to_seconds(start_time, times)
    
    # Calculate the finish times in seconds
    finish_seconds = start_seconds + race_seconds
    
    # Determine the first and last finisher times in seconds
    first_finisher_seconds = np.min(finish_seconds)
    last_finisher_seconds = np.max(finish_seconds)
    
    # Convert seconds back to time format
    first_finisher = seconds_to_time(first_finisher_seconds)
    last_finisher = seconds_to_time(last_finisher_seconds)
    
    write_output(first_finisher, last_finisher)

if __name__ == "__main__":
    main()
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_finish_time(start_time, times):
    # Convert start time to total seconds
    start_seconds = start_time[0] * 3600 + start_time[1] * 60 + start_time[2]
    # Convert race times to total seconds
    race_seconds = times[:, 0] * 60 + times[:, 1]
    # Calculate finish times in seconds
    finish_seconds = start_seconds + race_seconds
    return finish_seconds

def seconds_to_hms(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds

# Main function to read input, process data, and write output
def main():
    # Read input
    with open('schi.in', 'r') as file:
        start_time = np.array(file.readline().split(), dtype=int)
        n = int(file.readline())
        times = np.array([file.readline().split() for _ in range(n)], dtype=int)

    # Calculate finish times in seconds
    finish_times = calculate_finish_time(start_time, times)

    # Find first and last finisher
    first_finisher_seconds = np.min(finish_times)
    last_finisher_seconds = np.max(finish_times)

    # Convert finish times from seconds to hours, minutes, seconds
    first_finisher_hms = seconds_to_hms(first_finisher_seconds)
    last_finisher_hms = seconds_to_hms(last_finisher_seconds)

    # Write output
    with open('schi.out', 'w') as file:
        file.write(f"{first_finisher_hms[0] % 24} {first_finisher_hms[1]} {first_finisher_hms[2]}\n")
        file.write(f"{last_finisher_hms[0] % 24} {last_finisher_hms[1]} {last_finisher_hms[2]}\n")

# Invoke the main function
if __name__ == "__main__":
    main()
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(file_path):
    with open(file_path, 'r') as file:
        start_time = list(map(int, file.readline().split()))
        n = int(file.readline())
        times = np.array([list(map(int, file.readline().split())) for _ in range(n)])
    return start_time, times

def time_to_seconds(hours, minutes, seconds):
    return hours * 3600 + minutes * 60 + seconds

def seconds_to_time(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds

def main():
    start_time, times = read_input('schi.in')
    
    start_seconds = time_to_seconds(start_time[0], start_time[1], start_time[2])
    competitors_seconds = times[:, 0] * 60 + times[:, 1]  # Convert competitors times to seconds
    finish_seconds = start_seconds + competitors_seconds
    
    first_finisher = seconds_to_time(np.min(finish_seconds))
    last_finisher = seconds_to_time(np.max(finish_seconds))

    with open('schi.out', 'w') as file:
        file.write(f"{first_finisher[0] % 24} {first_finisher[1]} {first_finisher[2]}\n")
        file.write(f"{last_finisher[0] % 24} {last_finisher[1]} {last_finisher[2]}\n")

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import the numpy library for efficient array manipulation
import numpy as np

# Read the start time and competitor times from the input file
def read_input(filename):
    with open(filename, 'r') as file:
        start_h, start_m, start_s = map(int, file.readline().split())
        n = int(file.readline())
        competitors_times = [list(map(int, file.readline().split())) for _ in range(n)]
    return (start_h, start_m, start_s), np.array(competitors_times)

# Convert time to total seconds for easier calculations
def time_to_seconds(hours, minutes, seconds):
    return hours * 3600 + minutes * 60 + seconds

# Convert total seconds back to (hours, minutes, seconds)
def seconds_to_time(sec):
    hours = (sec // 3600) % 24
    sec %= 3600
    minutes = sec // 60
    sec %= 60
    return hours, minutes, sec

# Write the first and last competitor finish times to the output file
def write_output(filename, first_finisher, last_finisher):
    with open(filename, 'w') as file:
        file.write(f"{first_finisher[0]} {first_finisher[1]} {first_finisher[2]}\n")
        file.write(f"{last_finisher[0]} {last_finisher[1]} {last_finisher[2]}")

# The main function that orchestrates the reading, processing, and writing
def main():
    # Read input from the file
    (start_h, start_m, start_s), competitors_times = read_input('schi.in')
    
    # Convert start time to seconds
    start_in_seconds = time_to_seconds(start_h, start_m, start_s)
    
    # Calculate finish times in seconds for each competitor
    finish_times_seconds = start_in_seconds + (competitors_times[:, 0] * 60 + competitors_times[:, 1])
    
    # Find the first and last finish times
    first_finisher_seconds = np.min(finish_times_seconds)
    last_finisher_seconds = np.max(finish_times_seconds)
    
    # Convert finish times back to hours, minutes, and seconds
    first_finisher_hms = seconds_to_time(first_finisher_seconds)
    last_finisher_hms = seconds_to_time(last_finisher_seconds)
    
    # Write output to the file
    write_output('schi.out', first_finisher_hms, last_finisher_hms)

# Execute the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Calculate finish times given the start time and competitors' times
def calculate_finish_times(start_time, competitors_times):
    start_seconds = (start_time[0] * 3600 + start_time[1] * 60 + start_time[2])
    finish_seconds = start_seconds + (competitors_times[:, 0] * 60 + competitors_times[:, 1])
    return finish_seconds

# Convert seconds to hours, minutes, and seconds
def seconds_to_hms(seconds):
    hours = (seconds // 3600) % 24
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds

# Read input data from file
def read_input(filename):
    with open(filename, 'r') as file:
        start_time = np.array(file.readline().split(), dtype=int)
        n = int(file.readline())
        competitors_times = np.array([file.readline().split() for _ in range(n)], dtype=int)
    return start_time, competitors_times

# Write output data to file
def write_output(filename, first_finisher, last_finisher):
    with open(filename, 'w') as file:
        file.write("{} {} {}\n".format(*first_finisher))
        file.write("{} {} {}\n".format(*last_finisher))

# Main function to process the ski competition times
def main():
    # Read the start time and competitors' times from the input file
    start_time, competitors_times = read_input('schi.in')

    # Calculate the finish times for all competitors
    finish_seconds = calculate_finish_times(start_time, competitors_times)

    # Find the first and last finisher times
    first_finisher_seconds = np.min(finish_seconds)
    last_finisher_seconds = np.max(finish_seconds)

    # Convert the finish times from seconds back to hours, minutes, and seconds
    first_finisher_hms = seconds_to_hms(first_finisher_seconds)
    last_finisher_hms = seconds_to_hms(last_finisher_seconds)

    # Write the results to the output file
    write_output('schi.out', first_finisher_hms, last_finisher_hms)

# Execute the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import the numpy library for efficient numerical operations
import numpy as np

# Function to read the start time and competitors' times from file
def read_input(filename):
    with open(filename, 'r') as file:
        start_time = [int(x) for x in file.readline().split()]
        n = int(file.readline())
        competitors_times = np.array(
            [[int(x) for x in file.readline().split()] for _ in range(n)],
            dtype=int
        )
    return start_time, competitors_times

# Function to write the results to the output file
def write_output(filename, first_finisher, last_finisher):
    with open(filename, 'w') as file:
        file.write("{} {} {}\n".format(*first_finisher))
        file.write("{} {} {}\n".format(*last_finisher))

# Function to calculate finish times based on start time and competitors' times
def calculate_finish_times(start_time, competitors_times):
    finish_times = []
    start_total_seconds = start_time[0] * 3600 + start_time[1] * 60 + start_time[2]
    
    for comp_time in competitors_times:
        total_time = start_total_seconds + comp_time[0] * 60 + comp_time[1]
        finish_times.append(total_time)
    
    return np.array(finish_times)

# Function to convert finish times from seconds to hours, minutes, and seconds
def convert_seconds_to_hms(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return hours, minutes, seconds

def main():
    # Read input data from file
    start_time, competitors_times = read_input('schi.in')

    # Calculate the finish times for all competitors
    finish_times_in_seconds = calculate_finish_times(start_time, competitors_times)
    
    # Find the earliest and latest finish times
    first_finisher_seconds = np.min(finish_times_in_seconds)
    last_finisher_seconds = np.max(finish_times_in_seconds)

    # Convert the finish times from seconds back to the specific time format
    first_finisher_hms = convert_seconds_to_hms(first_finisher_seconds)
    last_finisher_hms = convert_seconds_to_hms(last_finisher_seconds)

    # Write the results to the output file
    write_output('schi.out', first_finisher_hms, last_finisher_hms)

# Execute the main function
if __name__ == '__main__':
    main()
```
```
