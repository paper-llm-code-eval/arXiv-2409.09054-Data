---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# schi.py

import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        start_time = [int(x) for x in file.readline().split()]
        n = int(file.readline().strip())
        competitors = np.array([list(map(int, file.readline().split())) for _ in range(n)])
    return start_time, competitors

def write_output(filename, first_competitor, last_competitor):
    with open(filename, 'w') as file:
        file.write('{} {} {}\n'.format(*first_competitor))
        file.write('{} {} {}\n'.format(*last_competitor))

def calculate_finish_times(start_time, competitors):
    start_seconds = start_time[0] * 3600 + start_time[1] * 60 + start_time[2]
    finish_seconds = competitors[:, 0] * 60 + competitors[:, 1] + start_seconds
    return finish_seconds

def convert_to_time(seconds):
    hour = (seconds // 3600) % 24
    minute = (seconds % 3600) // 60
    second = seconds % 60
    return [hour, minute, second]

def main():
    start_time, competitors = read_input('schi.in')
    finish_times = calculate_finish_times(start_time, competitors)
    
    first_competitor_time = convert_to_time(np.min(finish_times))
    last_competitor_time = convert_to_time(np.max(finish_times))
    
    write_output('schi.out', first_competitor_time, last_competitor_time)

if __name__ == '__main__':
    main()
```

This script reads from `schi.in`, processes the competitors' times, and writes the finish times of the first and the last competitor to `schi.out`. It is optimized for both time and memory usage within the constraints of the given problem.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error is caused by the fact that the `numpy` module is not found, which means that it is not installed in the environment where the program is running. Since the constraints of this problem require us to be memory efficient and also because we cannot assume the availability of any third-party libraries like `numpy`, I will refactor the solution to remove any dependencies on `numpy`. Instead, I will use standard Python data structures and functions to accomplish the task.

Here's the modified solution:

```python
# schi.py

def read_input(filename):
    with open(filename, 'r') as file:
        start_time = [int(x) for x in file.readline().split()]
        n = int(file.readline().strip())
        competitors = [[int(x) for x in file.readline().split()] for _ in range(n)]
    return start_time, competitors

def write_output(filename, first_competitor, last_competitor):
    with open(filename, 'w') as file:
        file.write('{} {} {}\n'.format(*first_competitor))
        file.write('{} {} {}\n'.format(*last_competitor))

def calculate_finish_times(start_time, competitors):
    start_seconds = start_time[0] * 3600 + start_time[1] * 60 + start_time[2]
    finish_times = [start_seconds + comp[0] * 60 + comp[1] for comp in competitors]
    return finish_times

def convert_to_time(seconds):
    hour = (seconds // 3600) % 24
    minute = (seconds % 3600) // 60
    second = seconds % 60
    return [hour, minute, second]

def main():
    start_time, competitors = read_input('schi.in')
    finish_times = calculate_finish_times(start_time, competitors)
    
    first_competitor_time = convert_to_time(min(finish_times))
    last_competitor_time = convert_to_time(max(finish_times))
    
    write_output('schi.out', first_competitor_time, last_competitor_time)

if __name__ == '__main__':
    main()
```

This solution should work without needing `numpy` or any other third-party library. It reads the input file, calculates the finish times for each competitor, finds the first and last competitor's finish times, converts them back to hours, minutes, and seconds, and writes the output to the `schi.out` file.
