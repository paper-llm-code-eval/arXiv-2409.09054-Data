---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Utility function to add time
def add_time(start_time, duration):
    total_seconds = start_time[2] + duration[1]
    total_minutes = start_time[1] + duration[0] + total_seconds // 60
    total_hours = start_time[0] + total_minutes // 60
    return total_hours % 24, total_minutes % 60, total_seconds % 60

# Read the input data
with open('schi.in', 'r') as file:
    start_time = np.array(list(map(int, file.readline().split())), dtype=np.int32)
    n = int(file.readline())
    competitors = np.array([list(map(int, file.readline().split())) for _ in range(n)], dtype=np.int32)

# Calculate finish times for all competitors
finish_times = np.array([add_time(start_time, competitors[i]) for i in range(n)], dtype=np.int32)

# Find the fastest and slowest times
first_finish_time = finish_times[np.argmin(competitors.sum(axis=1))]
last_finish_time = finish_times[np.argmax(competitors.sum(axis=1))]

# Write the output data
with open('schi.out', 'w') as file:
    file.write('{} {} {}\n'.format(*first_finish_time))
    file.write('{} {} {}'.format(*last_finish_time))
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to add time in hours, minutes, and seconds
def add_time(h, m, s, add_m, add_s):
    s += add_s
    m += add_m + s // 60
    s = s % 60
    h = (h + m // 60) % 24
    m = m % 60
    return h, m, s

# Read from input file
with open('schi.in', 'r') as file_in:
    start_h, start_m, start_s = map(int, file_in.readline().split())
    n = int(file_in.readline().strip())
    competitors = np.zeros((n, 2), dtype=int)
    for i in range(n):
        competitors[i] = list(map(int, file_in.readline().split()))

# Calculate finish times
finish_times = np.zeros((n, 3), dtype=int)
for i in range(n):
    finish_times[i] = add_time(start_h, start_m, start_s, competitors[i, 0], competitors[i, 1])

# Find the earliest and latest finish times
first_finish_time = finish_times[np.argmin(competitors.sum(axis=1))]
last_finish_time = finish_times[np.argmax(competitors.sum(axis=1))]

# Write to output file
with open('schi.out', 'w') as file_out:
    file_out.write("{} {} {}\n".format(*first_finish_time))
    file_out.write("{} {} {}".format(*last_finish_time))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the Python environment where the code is executed does not have the `numpy` library installed. Given the memory constraint and the fact that we are working with a small dataset (n < 100), we can avoid using `numpy` and use built-in Python functions which are more than sufficient for this task. Here is the revised solution without using `numpy`:

```python
# Function to add time in hours, minutes, and seconds
def add_time(h, m, s, add_m, add_s):
    s += add_s
    m += add_m + s // 60
    s = s % 60
    h = (h + m // 60) % 24
    m = m % 60
    return h, m, s

# Read from input file
with open('schi.in', 'r') as file_in:
    start_h, start_m, start_s = map(int, file_in.readline().split())
    n = int(file_in.readline().strip())
    competitors = [tuple(map(int, file_in.readline().split())) for _ in range(n)]

# Calculate finish times
finish_times = [add_time(start_h, start_m, start_s, m, s) for m, s in competitors]

# Find the earliest and latest finish times
first_finish_time = min(finish_times, key=lambda x: (x[0], x[1], x[2]))
last_finish_time = max(finish_times, key=lambda x: (x[0], x[1], x[2]))

# Write to output file
with open('schi.out', 'w') as file_out:
    file_out.write("{} {} {}\n".format(*first_finish_time))
    file_out.write("{} {} {}".format(*last_finish_time))
```

This code snippet should work correctly given the memory and module restrictions, while still performing the task efficiently.
