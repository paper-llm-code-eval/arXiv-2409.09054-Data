---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to compute the sum of all KxK sub-matrices.
def compute_submatrix_sums(matrix, K):
    N, M = matrix.shape
    submatrix_sums = np.zeros((N - K + 1, M - K + 1), dtype=np.int64)
    # Compute the initial KxK sum at the top-left corner
    submatrix_sums[0, 0] = matrix[:K, :K].sum()
    # Compute the first row of KxK sums
    for j in range(1, M - K + 1):
        submatrix_sums[0, j] = submatrix_sums[0, j - 1] - matrix[:K, j - 1].sum() + matrix[:K, j + K - 1].sum()
    # Compute the rest of the KxK sums
    for i in range(1, N - K + 1):
        for j in range(M - K + 1):
            submatrix_sums[i, j] = submatrix_sums[i - 1, j] - matrix[i - 1, j:j + K].sum() + matrix[i + K - 1, j:j + K].sum()
    return submatrix_sums

# Function to find the maximum sum and corresponding coordinates for any submatrix with sides at most K
def find_max_submatrix_at_most_k(matrix, K):
    N, M = matrix.shape
    max_sum = -np.inf
    max_coords = ()
    # Iterate through all possible submatrix sizes
    for k in range(1, K + 1):
        submatrix_sums = compute_submatrix_sums(matrix, k)
        sub_N, sub_M = submatrix_sums.shape
        local_max = submatrix_sums.max()
        if local_max > max_sum:
            max_sum = local_max
            arg_max = np.argwhere(submatrix_sums == local_max)[0]
            max_coords = (arg_max[0] + 1, arg_max[1] + 1, arg_max[0] + k, arg_max[1] + k)
    return max_sum, max_coords

# Function to find the maximum sum and corresponding coordinates for a submatrix with sides exactly K
def find_max_submatrix_exact_k(matrix, K):
    submatrix_sums = compute_submatrix_sums(matrix, K)
    max_sum = submatrix_sums.max()
    arg_max = np.argwhere(submatrix_sums == max_sum)[0]
    max_coords = (arg_max[0] + 1, arg_max[1] + 1, arg_max[0] + K, arg_max[1] + K)
    return max_sum, max_coords

# Read data from 'cetate.in'
with open('cetate.in', 'r') as file:
    c = int(file.readline().strip())
    N, M, K = map(int, file.readline().strip().split())
    matrix = np.zeros((N, M), dtype=np.int64)
    for i in range(N):
        matrix[i, :] = np.array(file.readline().strip().split(), dtype=np.int64)

# Process the data and write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    if c == 1:
        result = find_max_submatrix_exact_k(matrix, K)
    else:
        result = find_max_submatrix_at_most_k(matrix, K)
    
    file.write(f"{result[0]}\n{' '.join(map(str, result[1]))}\n")
```
```
---------- user ----------


Expected program to write result to `cetate.out` and read from `cetate.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to compute the sum of all KxK sub-matrices.
def compute_submatrix_sums(matrix, K):
    N, M = matrix.shape
    submatrix_sums = np.zeros((N - K + 1, M - K + 1), dtype=np.int64)
    # Compute the initial KxK sum at the top-left corner
    submatrix_sums[0, 0] = matrix[:K, :K].sum()
    # Compute the first row of KxK sums
    for j in range(1, M - K + 1):
        submatrix_sums[0, j] = submatrix_sums[0, j - 1] - matrix[:K, j - 1].sum() + matrix[:K, j + K - 1].sum()
    # Compute the rest of the KxK sums
    for i in range(1, N - K + 1):
        for j in range(M - K + 1):
            submatrix_sums[i, j] = submatrix_sums[i - 1, j] - matrix[i - 1, j:j + K].sum() + matrix[i + K - 1, j:j + K].sum()
    return submatrix_sums

# Function to find the maximum sum and corresponding coordinates for any submatrix with sides at most K
def find_max_submatrix_at_most_k(matrix, K):
    N, M = matrix.shape
    max_sum = -np.inf
    max_coords = ()
    # Iterate through all possible submatrix sizes
    for k in range(1, K + 1):
        submatrix_sums = compute_submatrix_sums(matrix, k)
        sub_N, sub_M = submatrix_sums.shape
        local_max = submatrix_sums.max()
        if local_max > max_sum:
            max_sum = local_max
            arg_max = np.argwhere(submatrix_sums == local_max)[0]
            max_coords = (arg_max[0] + 1, arg_max[1] + 1, arg_max[0] + k, arg_max[1] + k)
    return max_sum, max_coords

# Function to find the maximum sum and corresponding coordinates for a submatrix with sides exactly K
def find_max_submatrix_exact_k(matrix, K):
    submatrix_sums = compute_submatrix_sums(matrix, K)
    max_sum = submatrix_sums.max()
    arg_max = np.argwhere(submatrix_sums == max_sum)[0]
    max_coords = (arg_max[0] + 1, arg_max[1] + 1, arg_max[0] + K, arg_max[1] + K)
    return max_sum, max_coords

# Read data from 'cetate.in'
with open('cetate.in', 'r') as file:
    c = int(file.readline().strip())
    N, M, K = map(int, file.readline().strip().split())
    matrix = np.zeros((N, M), dtype=np.int64)
    for i in range(N):
        matrix[i, :] = np.array(file.readline().strip().split(), dtype=np.int64)

# Process the data
if c == 1:
    result = find_max_submatrix_exact_k(matrix, K)
else:
    result = find_max_submatrix_at_most_k(matrix, K)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result[0]}\n{' '.join(map(str, result[1]))}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the execution environment does not have the `numpy` library installed, which is critical for this solution. The challenge requires an efficient solution optimizing both time and memory, and without access to `numpy`, we will have to use standard Python data structures and algorithms. Here is an updated solution without using `numpy`:

```python
# Function to compute the sum of all KxK sub-matrices.
def compute_submatrix_sums(matrix, N, M, K):
    submatrix_sums = [[0 for _ in range(M - K + 1)] for _ in range(N - K + 1)]
    # Compute the initial KxK sum at the top-left corner
    submatrix_sums[0][0] = sum(sum(matrix[i][:K]) for i in range(K))
    # Compute the first row of KxK sums
    for j in range(1, M - K + 1):
        submatrix_sums[0][j] = submatrix_sums[0][j - 1] - sum(matrix[i][j - 1] for i in range(K)) + sum(matrix[i][j + K - 1] for i in range(K))
    # Compute the rest of the KxK sums
    for i in range(1, N - K + 1):
        for j in range(M - K + 1):
            submatrix_sums[i][j] = submatrix_sums[i - 1][j] - sum(matrix[i - 1][j:j + K]) + sum(matrix[i + K - 1][j:j + K])
    return submatrix_sums

# Function to find the maximum sum and corresponding coordinates for any submatrix with sides at most K
def find_max_submatrix_at_most_k(matrix, N, M, K):
    max_sum = float('-inf')
    max_coords = ()
    # Iterate through all possible submatrix sizes
    for k in range(1, K + 1):
        submatrix_sums = compute_submatrix_sums(matrix, N, M, k)
        for i in range(N - k + 1):
            for j in range(M - k + 1):
                if submatrix_sums[i][j] > max_sum:
                    max_sum = submatrix_sums[i][j]
                    max_coords = (i + 1, j + 1, i + k, j + k)
    return max_sum, max_coords

# Function to find the maximum sum and corresponding coordinates for a submatrix with sides exactly K
def find_max_submatrix_exact_k(matrix, N, M, K):
    submatrix_sums = compute_submatrix_sums(matrix, N, M, K)
    max_sum = float('-inf')
    max_coords = ()
    for i in range(N - K + 1):
        for j in range(M - K + 1):
            if submatrix_sums[i][j] > max_sum:
                max_sum = submatrix_sums[i][j]
                max_coords = (i + 1, j + 1, i + K, j + K)
    return max_sum, max_coords

# Read data from 'cetate.in'
with open('cetate.in', 'r') as file:
    c = int(file.readline().strip())
    N, M, K = map(int, file.readline().strip().split())
    matrix = [list(map(int, file.readline().strip().split())) for _ in range(N)]

# Process the data
if c == 1:
    result = find_max_submatrix_exact_k(matrix, N, M, K)
else:
    result = find_max_submatrix_at_most_k(matrix, N, M, K)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result[0]}\n{' '.join(map(str, result[1]))}\n")
```
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The given output indicates that the program is not correctly finding the submatrix with the maximal sum when the sides are at most `K`. It appears to be considering only square submatrices (as in the first task) instead of rectangles with sides at most `K`.

This requires an adjustment to the algorithm to correctly compute sums of all submatrices with sides at most `K` within the given bounds.

Below is the corrected code:

```python
# Function to compute the prefix sum matrix
def compute_prefix_sum(matrix):
    N = len(matrix)
    M = len(matrix[0])
    prefix_sum = [[0]*(M+1) for _ in range(N+1)]
    for i in range(1, N+1):
        for j in range(1, M+1):
            prefix_sum[i][j] = matrix[i-1][j-1] + prefix_sum[i-1][j] + prefix_sum[i][j-1] - prefix_sum[i-1][j-1]
    return prefix_sum

# Function to find the maximum sum and corresponding coordinates for any submatrix with sides at most K
def find_max_submatrix_at_most_k(prefix_sum, N, M, K):
    max_sum = float('-inf')
    max_coords = ()
    for i in range(1, N+1):
        for j in range(1, M+1):
            for k_i in range(i, min(i+K, N+1)):
                for k_j in range(j, min(j+K, M+1)):
                    curr_sum = prefix_sum[k_i][k_j] - prefix_sum[i-1][k_j] - prefix_sum[k_i][j-1] + prefix_sum[i-1][j-1]
                    if curr_sum > max_sum:
                        max_sum = curr_sum
                        max_coords = (i, j, k_i, k_j)
    return max_sum, max_coords

# Function to find the maximum sum and corresponding coordinates for a submatrix with sides exactly K
def find_max_submatrix_exact_k(prefix_sum, N, M, K):
    max_sum = float('-inf')
    max_coords = ()
    for i in range(1, N-K+2):
        for j in range(1, M-K+2):
            curr_sum = prefix_sum[i+K-1][j+K-1] - prefix_sum[i-1][j+K-1] - prefix_sum[i+K-1][j-1] + prefix_sum[i-1][j-1]
            if curr_sum > max_sum:
                max_sum = curr_sum
                max_coords = (i, j, i+K-1, j+K-1)
    return max_sum, max_coords

# Read data from 'cetate.in'
with open('cetate.in', 'r') as file:
    c = int(file.readline().strip())
    N, M, K = map(int, file.readline().strip().split())
    matrix = [list(map(int, file.readline().strip().split())) for _ in range(N)]

# Compute the prefix sum matrix
prefix_sum = compute_prefix_sum(matrix)

# Process the data
if c == 1:
    result = find_max_submatrix_exact_k(prefix_sum, N, M, K)
else:
    result = find_max_submatrix_at_most_k(prefix_sum, N, M, K)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result[0]}\n{' '.join(map(str, result[1]))}\n")
```

This solution first computes the prefix sum matrix to allow for efficient querying of the sum of any submatrix. Then, for the case where submatrix sides are at most `K`, it considers all possible submatrices and finds the one with the maximal sum. For the case where sides are exactly `K`, it only considers square submatrices of size `KxK`. This should resolve the issue and now the program should produce the correct result.
