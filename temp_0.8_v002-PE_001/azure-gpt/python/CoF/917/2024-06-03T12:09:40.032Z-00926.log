---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def compute_prefix_sum(matrix):
    # Compute the prefix sum matrix which will help in calculating the sum of
    # any submatrix in constant time.
    n, m = matrix.shape
    prefix_sum = np.zeros((n+1, m+1), dtype=np.int64)
    np.add.accumulate(matrix, axis=0, out=prefix_sum[1:, 1:])
    np.add.accumulate(prefix_sum[1:], axis=1, out=prefix_sum[1:])
    return prefix_sum

def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    # Calculate the sum of a submatrix using the prefix sum matrix in O(1) time.
    return prefix_sum[i2, j2] - prefix_sum[i1-1, j2] - prefix_sum[i2, j1-1] + prefix_sum[i1-1, j1-1]

def max_submatrix_sum(matrix, k):
    # Find the maximum sum of a submatrix of size KxK.
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = None
    max_config = None
    for i in range(1, n-k+2):
        for j in range(1, m-k+2):
            cur_sum = submatrix_sum(prefix_sum, i, j, i+k-1, j+k-1)
            if max_sum is None or cur_sum > max_sum:
                max_sum = cur_sum
                max_config = (i, j, i+k-1, j+k-1)
    return max_sum, max_config

def max_submatrix_sum_any_size(matrix, k):
    # Find the maximum sum of a submatrix of size up to KxK.
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = None
    max_config = None
    for i in range(1, n+1):
        for j in range(1, m+1):
            for size in range(1, k+1):
                if i+size-1 > n or j+size-1 > m:
                    continue
                cur_sum = submatrix_sum(prefix_sum, i, j, i+size-1, j+size-1)
                if max_sum is None or cur_sum > max_sum:
                    max_sum = cur_sum
                    max_config = (i, j, i+size-1, j+size-1)
    return max_sum, max_config

# Read from cetate.in
with open('cetate.in', 'r') as file:
    task, n, m, k = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Solve the problem based on the task
if task == 1:
    max_sum, config = max_submatrix_sum(matrix, k)
else:
    max_sum, config = max_submatrix_sum_any_size(matrix, k)

# Write to cetate.out
with open('cetate.out', 'w') as file:
    file.write(f"{max_sum}\n{' '.join(map(str, config))}\n")
```
```
---------- user ----------


Expected program to write result to `cetate.out` and read from `cetate.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def compute_prefix_sum(matrix):
    # Compute the prefix sum matrix which will help in calculating the sum of
    # any submatrix in constant time.
    n, m = matrix.shape
    prefix_sum = np.zeros((n+1, m+1), dtype=np.int64)
    np.add.accumulate(matrix, axis=0, out=prefix_sum[1:, 1:])
    np.add.accumulate(prefix_sum[1:], axis=1, out=prefix_sum[1:])
    return prefix_sum

def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    # Calculate the sum of a submatrix using the prefix sum matrix in O(1) time.
    return prefix_sum[i2, j2] - prefix_sum[i1-1, j2] - prefix_sum[i2, j1-1] + prefix_sum[i1-1, j1-1]

def max_submatrix_sum(matrix, k):
    # Find the maximum sum of a submatrix of size KxK.
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = -np.inf
    max_config = None
    for i in range(1, n-k+2):
        for j in range(1, m-k+2):
            cur_sum = submatrix_sum(prefix_sum, i, j, i+k-1, j+k-1)
            if cur_sum > max_sum:
                max_sum = cur_sum
                max_config = (i, j, i+k-1, j+k-1)
    return max_sum, max_config

def max_submatrix_sum_any_size(matrix, k):
    # Find the maximum sum of a submatrix of size up to KxK.
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = -np.inf
    max_config = None
    for size in range(1, k+1):
        for i in range(1, n-size+2):
            for j in range(1, m-size+2):
                cur_sum = submatrix_sum(prefix_sum, i, j, i+size-1, j+size-1)
                if cur_sum > max_sum:
                    max_sum = cur_sum
                    max_config = (i, j, i+size-1, j+size-1)
    return max_sum, max_config

# Read from cetate.in
with open('cetate.in', 'r') as file:
    task = int(file.readline().strip())
    n, m, k = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Solve the problem based on the task
if task == 1:
    max_sum, config = max_submatrix_sum(matrix, k)
else:
    max_sum, config = max_submatrix_sum_any_size(matrix, k)

# Write to cetate.out
with open('cetate.out', 'w') as file:
    file.write(f"{max_sum}\n{' '.join(map(str, config))}\n")
```
```
---------- user ----------


Expected program to write result to `cetate.out` and read from `cetate.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to compute prefix sum of the matrix
def compute_prefix_sum(matrix):
    n, m = matrix.shape
    prefix_sum = np.zeros((n + 1, m + 1), dtype=np.int64)
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sum[i][j] = matrix[i - 1][j - 1]
            if i > 1:
                prefix_sum[i][j] += prefix_sum[i - 1][j]
            if j > 1:
                prefix_sum[i][j] += prefix_sum[i][j - 1]
            if i > 1 and j > 1:
                prefix_sum[i][j] -= prefix_sum[i - 1][j - 1]
    return prefix_sum

# Function to calculate the sum of a submatrix in O(1) time
def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    return prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]

# Function to find the maximum sum of a KxK submatrix
def max_k_submatrix_sum(matrix, k):
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = None
    max_config = None
    for i in range(1, n - k + 2):
        for j in range(1, m - k + 2):
            cur_sum = submatrix_sum(prefix_sum, i, j, i + k - 1, j + k - 1)
            if max_sum is None or cur_sum > max_sum:
                max_sum = cur_sum
                max_config = (i, j, i + k - 1, j + k - 1)
    return max_sum, max_config

# Function to find the maximum sum of a submatrix with size up to KxK
def max_any_submatrix_sum(matrix, k):
    n, m = matrix.shape
    prefix_sum = compute_prefix_sum(matrix)
    max_sum = None
    max_config = None
    for size in range(1, k + 1):
        for i in range(1, n - size + 2):
            for j in range(1, m - size + 2):
                cur_sum = submatrix_sum(prefix_sum, i, j, i + size - 1, j + size - 1)
                if max_sum is None or cur_sum > max_sum:
                    max_sum = cur_sum
                    max_config = (i, j, i + size - 1, j + size - 1)
    return max_sum, max_config

# Read input from 'cetate.in'
with open('cetate.in', 'r') as file:
    task = int(file.readline().strip())
    n, m, k = map(int, file.readline().strip().split())
    matrix = np.array([list(map(int, file.readline().strip().split())) for _ in range(n)], dtype=np.int64)

# Solve the problem based on the task
if task == 1:
    result_max_sum, result_config = max_k_submatrix_sum(matrix, k)
else:
    result_max_sum, result_config = max_any_submatrix_sum(matrix, k)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result_max_sum}\n{' '.join(map(str, result_config))}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I understand the issue. Since `numpy` can't be used due to the module not being found and possibly because of the memory constraints, I'll rewrite the solution without using `numpy` or any third-party libraries. I'll use only Python's built-in features to solve the problem, which should avoid the `ModuleNotFoundError` and adhere to the memory limitations.

Here's the updated code:

```python
# Function to compute prefix sum of the matrix
def compute_prefix_sum(matrix, n, m):
    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sum[i][j] = matrix[i - 1][j - 1] + \
                               prefix_sum[i - 1][j] + \
                               prefix_sum[i][j - 1] - \
                               prefix_sum[i - 1][j - 1]
    return prefix_sum

# Function to calculate the sum of a submatrix in O(1) time
def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    return prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]

# Function to find the maximum sum of a KxK submatrix
def max_k_submatrix_sum(matrix, n, m, k):
    prefix_sum = compute_prefix_sum(matrix, n, m)
    max_sum = None
    max_config = None
    for i in range(1, n - k + 2):
        for j in range(1, m - k + 2):
            cur_sum = submatrix_sum(prefix_sum, i, j, i + k - 1, j + k - 1)
            if max_sum is None or cur_sum > max_sum:
                max_sum = cur_sum
                max_config = (i, j, i + k - 1, j + k - 1)
    return max_sum, max_config

# Function to find the maximum sum of a submatrix with size up to KxK
def max_any_submatrix_sum(matrix, n, m, k):
    prefix_sum = compute_prefix_sum(matrix, n, m)
    max_sum = None
    max_config = None
    for size in range(1, k + 1):
        for i in range(1, n - size + 2):
            for j in range(1, m - size + 2):
                cur_sum = submatrix_sum(prefix_sum, i, j, i + size - 1, j + size - 1)
                if max_sum is None or cur_sum > max_sum:
                    max_sum = cur_sum
                    max_config = (i, j, i + size - 1, j + size - 1)
    return max_sum, max_config

# Read input from 'cetate.in'
with open('cetate.in', 'r') as file:
    task = int(file.readline().strip())
    n, m, k = map(int, file.readline().strip().split())
    matrix = [list(map(int, file.readline().strip().split())) for _ in range(n)]

# Solve the problem based on the task
if task == 1:
    result_max_sum, result_config = max_k_submatrix_sum(matrix, n, m, k)
else:
    result_max_sum, result_config = max_any_submatrix_sum(matrix, n, m, k)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result_max_sum}\n{' '.join(map(str, result_config))}\n")
```
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the code and the output, I can see that there is a mistake in the `max_any_submatrix_sum` function. When searching for the maximum sum submatrix of size up to KxK, the function was constraining each submatrix to be a square (same number of rows and columns), but according to the problem statement, the submatrix can be rectangular as well. We must consider all possible submatrices up to K rows and K columns, not just squares.

I will correct the code to consider all possible rectangles with a width and height of at most K.

Here's the updated solution:

```python
# Function to compute prefix sum of the matrix
def compute_prefix_sum(matrix, n, m):
    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sum[i][j] = matrix[i - 1][j - 1] + \
                               prefix_sum[i - 1][j] + \
                               prefix_sum[i][j - 1] - \
                               prefix_sum[i - 1][j - 1]
    return prefix_sum

# Function to calculate the sum of a submatrix in O(1) time
def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    return prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]

# Function to find the maximum sum of a submatrix with size up to KxK
def max_any_submatrix_sum(matrix, n, m, k):
    prefix_sum = compute_prefix_sum(matrix, n, m)
    max_sum = float('-inf')
    max_config = None
    for height in range(1, k + 1):
        for width in range(1, k + 1):
            for i in range(1, n - height + 2):
                for j in range(1, m - width + 2):
                    cur_sum = submatrix_sum(prefix_sum, i, j, i + height - 1, j + width - 1)
                    if cur_sum > max_sum:
                        max_sum = cur_sum
                        max_config = (i, j, i + height - 1, j + width - 1)
    return max_sum, max_config

# Read input from 'cetate.in'
with open('cetate.in', 'r') as file:
    task = int(file.readline().strip())
    n, m, k = map(int, file.readline().strip().split())
    matrix = [list(map(int, file.readline().strip().split())) for _ in range(n)]

# Solve the problem based on the task
result_max_sum, result_config = max_any_submatrix_sum(matrix, n, m, k) if task == 2 else max_k_submatrix_sum(matrix, n, m, k)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result_max_sum}\n{' '.join(map(str, result_config))}\n")
```

With this correction, the code now considers all rectangular submatrices with at most K rows and at most K columns, which aligns with the problem requirements. This change should produce the correct output for the given input.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 38, in <module>
    result_max_sum, result_config = max_any_submatrix_sum(matrix, n, m, k) if task == 2 else max_k_submatrix_sum(matrix, n, m, k)
                                                                                             ^^^^^^^^^^^^^^^^^^^
NameError: name 'max_k_submatrix_sum' is not defined. Did you mean: 'max_any_submatrix_sum'?

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that I missed defining the `max_k_submatrix_sum` function used to find the maximum sum of a KxK submatrix. I will now provide the implementation for that function and make sure to include it in the code.

Here is the complete corrected solution with both `max_k_submatrix_sum` and `max_any_submatrix_sum` functions defined:

```python
# Function to compute prefix sum of the matrix
def compute_prefix_sum(matrix, n, m):
    prefix_sum = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sum[i][j] = matrix[i - 1][j - 1] + \
                               prefix_sum[i - 1][j] + \
                               prefix_sum[i][j - 1] - \
                               prefix_sum[i - 1][j - 1]
    return prefix_sum

# Function to calculate the sum of a submatrix in O(1) time
def submatrix_sum(prefix_sum, i1, j1, i2, j2):
    return prefix_sum[i2][j2] - prefix_sum[i1 - 1][j2] - prefix_sum[i2][j1 - 1] + prefix_sum[i1 - 1][j1 - 1]

# Function to find the maximum sum of a KxK submatrix
def max_k_submatrix_sum(matrix, n, m, k):
    prefix_sum = compute_prefix_sum(matrix, n, m)
    max_sum = float('-inf')
    max_config = None
    for i in range(1, n - k + 2):
        for j in range(1, m - k + 2):
            cur_sum = submatrix_sum(prefix_sum, i, j, i + k - 1, j + k - 1)
            if cur_sum > max_sum:
                max_sum = cur_sum
                max_config = (i, j, i + k - 1, j + k - 1)
    return max_sum, max_config

# Function to find the maximum sum of a submatrix with size up to KxK
def max_any_submatrix_sum(matrix, n, m, k):
    prefix_sum = compute_prefix_sum(matrix, n, m)
    max_sum = float('-inf')
    max_config = None
    for height in range(1, k + 1):
        for width in range(1, k + 1):
            for i in range(1, n - height + 2):
                for j in range(1, m - width + 2):
                    cur_sum = submatrix_sum(prefix_sum, i, j, i + height - 1, j + width - 1)
                    if cur_sum > max_sum:
                        max_sum = cur_sum
                        max_config = (i, j, i + height - 1, j + width - 1)
    return max_sum, max_config

# Read input from 'cetate.in'
with open('cetate.in', 'r') as file:
    task = int(file.readline().strip())
    n, m, k = map(int, file.readline().strip().split())
    matrix = [list(map(int, file.readline().strip().split())) for _ in range(n)]

# Solve the problem based on the task
if task == 1:
    result_max_sum, result_config = max_k_submatrix_sum(matrix, n, m, k)
else:
    result_max_sum, result_config = max_any_submatrix_sum(matrix, n, m, k)

# Write output to 'cetate.out'
with open('cetate.out', 'w') as file:
    file.write(f"{result_max_sum}\n{' '.join(map(str, result_config))}\n")
```

With this fix, the code now includes both the required functions and should work correctly for both tasks. The error causing exit code 1 should be resolved.
