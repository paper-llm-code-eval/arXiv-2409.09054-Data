---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def check_parentheses(seq):
    stack = []
    for par in seq:
        if par == 0 or par == 2:  # Open parentheses
            stack.append(par)
        elif par == 1:  # Close round parenthesis
            if not stack or stack[-1] != 0:
                return False
            stack.pop()
        elif par == 3:  # Close square parenthesis
            if not stack or stack[-1] != 2:
                return False
            stack.pop()
    return not stack

def process_input_output(input_file, output_file):
    with open(input_file, 'r') as f_in:
        n = int(f_in.readline().strip())  # Number of sequences
        results = []
        for _ in range(n):
            line = f_in.readline().strip().split()
            L, seq = int(line[0]), np.array(line[1:], dtype=int)
            results.append(check_parentheses(seq))

    with open(output_file, 'w') as f_out:
        for result in results:
            f_out.write('Da\n' if result else 'Nu\n')

process_input_output('paranteze.in', 'paranteze.out')
```

Please note that because the maximum memory usage is limited to ~8MB, and considering that a 32-bit integer in numpy uses 4 bytes, we would only be able to store approximately 2 million integers in an array. Since the maximum number of parentheses `L` per sequence is 500 and there are at most 10 sequences, this should not exceed the memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that numpy is not available in the environment where the script is being executed. Since we cannot use numpy or other external libraries that are not part of the Python Standard Library due to the environment limitations, we must adapt the solution to use only the built-in features of Python.

We can still solve the problem efficiently without numpy by using lists which are a part of the Python Standard Library. I will rewrite the solution accordingly:

```python
def check_parentheses(seq):
    stack = []
    for par in seq:
        if par == 0 or par == 2:  # Open parentheses
            stack.append(par)
        elif par == 1:  # Close round parenthesis
            if not stack or stack[-1] != 0:
                return False
            stack.pop()
        elif par == 3:  # Close square parenthesis
            if not stack or stack[-1] != 2:
                return False
            stack.pop()
    return not stack

def process_input_output(input_file, output_file):
    with open(input_file, 'r') as f_in:
        n = int(f_in.readline().strip())  # Number of sequences
        results = []
        for _ in range(n):
            line = f_in.readline().strip().split()
            L, seq = int(line[0]), [int(x) for x in line[1:]]
            results.append(check_parentheses(seq))

    with open(output_file, 'w') as f_out:
        for result in results:
            f_out.write('Da\n' if result else 'Nu\n')

process_input_output('paranteze.in', 'paranteze.out')
```

Now the code does not rely on external libraries, and it should work correctly within the given environment constraints.
