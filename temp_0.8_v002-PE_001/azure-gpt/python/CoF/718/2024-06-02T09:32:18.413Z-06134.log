---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def check_parentheses(seq):
    stack = []
    for code in seq:
        if code in (0, 2):
            stack.append(code)
        else:
            if not stack:  # Stack is empty but closing parenthesis found
                return 0
            last_open = stack.pop()
            if code == 1 and last_open != 0:  # Mismatched round parenthesis
                return 0
            if code == 3 and last_open != 2:  # Mismatched square parenthesis
                return 0
    return 1 if not stack else 0  # Stack should be empty if parentheses are matched

# Read data
with open('paranteze.in', 'r') as file:
    n = int(next(file).strip())  # Read number of sequences
    sequences = [list(map(int, line.strip().split()))[1:] for line in file]

# Check each sequence and write results
with open('paranteze.out', 'w') as file:
    for seq in sequences:
        result = 'Da' if check_parentheses(seq) else 'Nu'
        file.write(result + '\n')
```
This solution reads from the file `paranteze.in` and writes the results to the file `paranteze.out` as required. It reads the number of sequences on the first line, then reads each sequence of parentheses codes. For each sequence, it uses a stack to keep track of the open parentheses and checks for correct matching. The results are written to `paranteze.out` without using `input()` or `print()`. The solution is designed to be efficient in both time and memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the program exited with code 1 because the `numpy` module is not installed or not found in the current environment. However, since `numpy` is not actually used in the provided script, there's no need to import it, and we can safely remove the import statement.

Let's rewrite the entire solution without the `numpy` import:

```python
def check_parentheses(seq):
    stack = []
    for code in seq:
        if code in (0, 2):
            stack.append(code)
        else:
            if not stack:  # Stack is empty but closing parenthesis found
                return 0
            last_open = stack.pop()
            if code == 1 and last_open != 0:  # Mismatched round parenthesis
                return 0
            if code == 3 and last_open != 2:  # Mismatched square parenthesis
                return 0
    return 1 if not stack else 0  # Stack should be empty if parentheses are matched

# Read data
with open('paranteze.in', 'r') as file:
    n = int(next(file).strip())  # Read number of sequences
    sequences = [list(map(int, line.strip().split()))[1:] for line in file]

# Check each sequence and write results
with open('paranteze.out', 'w') as file:
    for seq in sequences:
        result = 'Da' if check_parentheses(seq) else 'Nu'
        file.write(result + '\n')
```

The corrected program no longer attempts to import `numpy` and should function as intended, processing the input file `paranteze.in` and writing the output to `paranteze.out`. The solution is still optimized for both time and memory usage, and it should not exceed the given memory limit of ~8MB.
