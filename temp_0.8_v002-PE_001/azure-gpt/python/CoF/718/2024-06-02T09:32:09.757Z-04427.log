---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def check_brackets(sequence):
    stack = []
    for code in sequence:
        if code == 0 or code == 2:
            # Open bracket, push to stack
            stack.append(code)
        else:
            # Close bracket, pop from stack and check
            if not stack:
                return False
            open_bracket = stack.pop()
            if open_bracket == 0 and code != 1:
                return False
            if open_bracket == 2 and code != 3:
                return False
    return not stack  # If stack is empty, brackets are valid

# Read from file
with open('paranteze.in', 'r') as infile:
    n = int(infile.readline().strip())  # Read number of test cases
    results = np.zeros(n, dtype=np.bool_)  # Create results array, initialized to False
    for i in range(n):
        line = list(map(int, infile.readline().strip().split()))
        L, sequence = line[0], line[1:]
        results[i] = check_brackets(sequence)

# Write to file
with open('paranteze.out', 'w') as outfile:
    for result in results:
        outfile.write('Da\n' if result else 'Nu\n')
```

The solution reads the input from `paranteze.in` and writes the output to `paranteze.out`, adhering to the problem's constraints. It utilizes a stack-based approach to track the opening and closing of brackets. Numpy is used to store the results efficiently. No unnecessary memory is used, and the code should work well within the 8MB limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the environment where the code is being executed. Since we are optimizing for memory and must adhere to a strict memory limit, we can actually avoid using `numpy`. Instead, we can use regular Python lists which are memory-efficient enough for this problem and fulfill the requirements.

Here's the solution without using `numpy`:

```python
def check_brackets(sequence):
    stack = []
    for code in sequence:
        if code == 0 or code == 2:
            # Open bracket, push to stack
            stack.append(code)
        else:
            # Close bracket, pop from stack and check
            if not stack:
                return False
            open_bracket = stack.pop()
            if open_bracket == 0 and code != 1:
                return False
            if open_bracket == 2 and code != 3:
                return False
    return not stack  # If stack is empty, brackets are valid

# Read from file
with open('paranteze.in', 'r') as infile:
    n = int(infile.readline().strip())  # Read number of test cases
    results = []  # Create results list
    for i in range(n):
        line = list(map(int, infile.readline().strip().split()))
        L, sequence = line[0], line[1:]
        results.append(check_brackets(sequence))

# Write to file
with open('paranteze.out', 'w') as outfile:
    for result in results:
        outfile.write('Da\n' if result else 'Nu\n')
```

This code should work as expected without relying on external libraries like `numpy`. It reads from the input file `paranteze.in` and writes the output to `paranteze.out`. It uses a simple stack-based approach to validate the bracket sequences and writes 'Da' for valid sequences and 'Nu' for invalid ones to the output file.
