---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `cartele.in` and write to `cartele.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.
\
Un angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.
~[0.png|align=center|width=45em]

# Cerinţă
Scrieţi un program care determină care dintre cartele permite accesul în sediul firmei.

# Date de intrare
Fişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.

# Date de ieşire
În fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.

# Restricţii şi precizări
- $1 < N, C \leq 50$

---

Example:
`cartele.in`
```
3 2
0 1 0
0 0 1
1 0 0
1 0 0
0 0 1
0 1 0
0 0 1
0 0 1
0 1 0
```

`cartele.out`
```
1
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Load data
with open('cartele.in', 'r') as fin:
    N, C = map(int, fin.readline().split())
    pattern = np.array([list(map(int, fin.readline().split())) for _ in range(N)])
    cards = np.array([[list(map(int, fin.readline().split())) for _ in range(N)] for _ in range(C)])

# Function to check if a card allows access
def allows_access(card, pattern):
    # Check if card matches pattern considering all possible orientations
    for _ in range(4):
        if np.array_equal(card, pattern) or np.array_equal(card[::-1, ::-1], pattern):
            return True
        card = np.rot90(card)  # Rotate the card by 90 degrees
    return False

# Check each card
results = [1 if allows_access(card, pattern) else 0 for card in cards]

# Output results
with open('cartele.out', 'w') as fout:
    for result in results:
        fout.write(f"{result}\n")
```

This script reads the pattern and cards from `cartele.in`, checks each card for access, and writes the output to `cartele.out`. It uses NumPy arrays for efficient manipulation and comparison of the patterns. The `allows_access` function rotates the card four times (90 degrees each time), checking if it matches the pattern in any orientation. If a match is found, it returns `True`, allowing access; otherwise, it returns `False`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the current environment. Since the code is required to use efficient libraries, but it seems that `numpy` can't be used due to the environment limitations, I will write the solution without using `numpy`. Instead, I will use Python's built-in data structures to achieve the required efficiency.

Below is the rewritten solution without `numpy`:

```python
# Function to rotate a matrix (2D list) 90 degrees clockwise
def rotate(matrix):
    return list(zip(*matrix[::-1]))

# Function to compare two matrices
def compare_matrices(matrix1, matrix2):
    return all(matrix1[i][j] == matrix2[i][j] for i in range(len(matrix1)) for j in range(len(matrix1[0])))

# Function to check if a card allows access
def allows_access(card, pattern):
    # Check the card against the pattern in all possible orientations
    for _ in range(4):
        if compare_matrices(card, pattern) or compare_matrices(card[::-1], pattern):
            return True
        card = rotate(card)  # Rotate the card by 90 degrees
    return False

# Load data
with open('cartele.in', 'r') as fin:
    N, C = map(int, fin.readline().split())
    pattern = [list(map(int, fin.readline().split())) for _ in range(N)]
    cards = [[list(map(int, fin.readline().split())) for _ in range(N)] for _ in range(C)]

# Check each card
results = [1 if allows_access(card, pattern) else 0 for card in cards]

# Output results
with open('cartele.out', 'w') as fout:
    for result in results:
        fout.write(f"{result}\n")
```

This solution implements the rotation and comparison of 2D lists without relying on external libraries. It maintains the required efficiency by avoiding unnecessary copies of the data and by iterating over the elements in a memory-efficient way. The `allows_access` function checks for a match by rotating the card and comparing it to the pattern in each orientation, as well as its flipped version. If a match is found in any orientation, it returns `True`. The results are then written to `cartele.out`.
