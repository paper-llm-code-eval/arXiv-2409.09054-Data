---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Lizuca are $n$ flori ornamentale de înălțimi $h_1, h_2, \dots, h_n$, exprimate în centimetri. Pentru a uda plantele, Lizuca stabilește următorul program: în prima zi va alege o plantă pe care o va uda, în a doua zi va alege două plante pe care le va uda, în ziua a treia va alege trei plante pe care le va uda și așa mai departe. Dacă o plantă este udată într-o anumită zi, atunci crește $1$ centimetru până la sfârșitul acelei zile, iar dacă nu este udată, rămâne la înălțimea pe care o avea la sfârșitul zilei precedente.

# Cerință

Scrieți un program care determină:
1. un număr natural $S$, exprimat în centimetri, reprezentând suma înălțimilor finale ale tuturor plantelor, dacă Lizuca le-ar uda după procedeul descris, timp de n zile;
2. un număr natural $K$, reprezentând numărul maxim de zile în care Lizuca poate uda florile după procedeul descris anterior, astfel ca la sfârșitul celei de a $K$-a zi, nici o plantă ornamentală să nu atingă înălțimea $H$.

# Date de intrare

Prima linie a fișierului `flori.in` conține două numere naturale $n$ și $H$, separate printr-un spațiu, având semnificația din enunț.
Linia a doua conține $n$ numere naturale: $h_1, h_2, \dots, h_n$ separate prin câte un singur spațiu, reprezentând înălțimile inițiale ale plantelor.

# Date de ieșire

Fișierul `flori.out` va conține pe prima linie un număr natural $S$ având semnificația descrisă în cerința $1$. A doua linie va conține un număr natural $K$, având semnificația descrisă în cerința $2$.

# Restricții și precizări

* $1 \leq N, H \leq 100$;
* $1 \leq h_1, h_2, \dots, h_n < H$;
* O plantă poate fi udată o singură dată pe zi.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $30\%$ din punctajul total pentru fiecare test.
* Pentru rezolvarea corectă a cerinței $2$ se acordă $70\%$ din punctajul total pentru fiecare test.

---

Example:
`flori.in`
```
3 4
2 1 1
```

`flori.out`
```
10
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read data from flori.in
with open('flori.in', 'r') as fin:
    n, H = map(int, fin.readline().split())
    h = np.array(fin.readline().split(), dtype=int)

# Calculate S and K
# S is the sum of final heights after n days
# K is the maximum number of days such that no plant reaches height H

# Calculate S by simulating the watering process
for day in range(1, n + 1):
    h[np.argpartition(h, day-1)[:day]] += 1  # Water the smallest day plants
S = np.sum(h)

# Calculate K by finding the day before any plant would reach height H if watered
K = 0
remaining_days = np.sort(H - h - 1)  # Days remaining for each plant to reach H if watered every day
for day in range(n):
    if remaining_days[day] < day + 1:  # If the plant would reach H before the current day
        break
    K += 1

# Write S and K to flori.out
with open('flori.out', 'w') as fout:
    fout.write(f"{S}\n{K}\n")
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from flori.in
with open('flori.in', 'r') as fin:
    n, H = map(int, fin.readline().split())
    heights = np.fromstring(fin.readline(), dtype=int, sep=' ')

# Calculate S (the sum of final heights after n days)
daily_growth = np.minimum(np.arange(1, n + 1), n - np.arange(0, n))  # Growth for each day
S = heights.sum() + daily_growth.sum()

# Calculate K (the maximum number of days such that no plant reaches height H)
sorted_heights = np.sort(heights)
K = 0
for day in range(1, n+1):
    if np.any(sorted_heights[:day] + day >= H):  # If any of the smallest day plants reach H
        break
    K += 1

# Write S and K to flori.out
with open('flori.out', 'w') as fout:
    fout.write(f"{S}\n{K}\n")
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from flori.in
with open('flori.in', 'r') as fin:
    n, H = map(int, fin.readline().split())
    heights = np.array(list(map(int, fin.readline().split())), dtype=np.int32)

# Calculate S by simulating the watering process for n days
daily_increment = np.arange(1, n + 1)  # The number of plants to water each day
watered_heights = heights.copy()
watered_heights += daily_increment.clip(max=watered_heights.size)
S = watered_heights.sum()

# Calculate K by finding the maximum number of days such that no plant reaches height H
sorted_heights = np.sort(heights)
K = 0
for day in range(1, n + 1):
    # Check if any of the smallest plants watered today would reach or exceed height H
    if (sorted_heights[:day] + day >= H).any():
        break
    K = day

# Write S and K to flori.out
with open('flori.out', 'w') as fout:
    fout.write(f"{S}\n{K}\n")
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Initialize the sum of final heights (S) and the maximum number of days (K)
S = 0
K = 0

# Read the input data from 'flori.in'
with open('flori.in', 'r') as file:
    n, H = map(int, file.readline().split())
    heights = np.array(file.readline().split(), dtype=int)

# Calculate the sum of final heights (S) after n days
for i in range(1, n + 1):
    S += sum(np.sort(heights)[:i])
    heights[np.argpartition(heights, i - 1)[:i]] += 1

# Calculate the maximum number of days (K) such that no plant reaches height H
for i in range(1, n + 1):
    if (np.sort(heights)[:i] + 1).max() >= H:
        break
    K += 1

# Write the output data to 'flori.out'
with open('flori.out', 'w') as file:
    file.write(f"{S}\n{K}\n")
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read data from flori.in
    with open('flori.in', 'r') as fin:
        n, H = map(int, fin.readline().split())
        heights = np.array(fin.readline().split(), dtype=int)

    # Initialize S and K
    S = 0
    K = 0

    # Calculate S (the sum of final heights after n days)
    for day in range(1, n + 1):
        heights_to_water = np.argpartition(heights, day)[:day]
        heights[heights_to_water] += 1
        S += heights.sum()

    # Calculate K (the maximum number of days such that no plant reaches height H)
    for day in range(1, n + 1):
        if np.any((heights + np.minimum(np.arange(n) + 1, day)) >= H):
            break
        K = day

    # Write S and K to flori.out
    with open('flori.out', 'w') as fout:
        fout.write(f"{S}\n{K}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_S_and_K(heights, n, H):
    # Calculate S by simulating the watering process
    S = heights.sum()
    for day in range(1, n + 1):
        indices_to_water = np.argpartition(heights, day)[:day]
        heights[indices_to_water] += 1
        S += heights.sum()

    # Calculate K by finding the day before any plant would reach height H if watered
    K = 0
    heights_sorted = np.sort(heights)
    for day in range(1, n + 1):
        if (heights_sorted[:day] + 1).max() >= H:
            break
        K = day
        heights_sorted[:day] += 1
    
    return S, K

# Read data from flori.in
with open('flori.in', 'r') as fin:
    n, H = map(int, fin.readline().split())
    heights = np.array(fin.readline().split(), dtype=int)

# Calculate S and K
S, K = calculate_S_and_K(heights, n, H)

# Write S and K to flori.out
with open('flori.out', 'w') as fout:
    fout.write(f"{S}\n{K}\n")
```
```
---------- user ----------


Expected program to write result to `flori.out` and read from `flori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'flori.in'
with open('flori.in', 'r') as file_in:
    n, H = map(int, file_in.readline().split())
    heights = np.array(file_in.readline().split(), dtype=int)

# Initialize sum S and day counter K
S = heights.sum()
K = 0

# Calculate S
for day in range(1, n + 1):
    # Water the shortest day plants
    shortest_plants_indices = np.argpartition(heights, day)[:day]
    heights[shortest_plants_indices] += 1
    S += heights.sum()

# Reset heights for calculation of K
heights -= np.arange(1, n + 1)

# Calculate K
for day in range(n):
    # Water the shortest day plants
    shortest_plants_indices = np.argpartition(heights, day)[:day]
    # Check if any of these plants will reach or exceed height H
    if np.any(heights[shortest_plants_indices] + day + 1 >= H):
        break
    K += 1

# Write results to 'flori.out'
with open('flori.out', 'w') as file_out:
    file_out.write(f"{S}\n{K}\n")
```
```
