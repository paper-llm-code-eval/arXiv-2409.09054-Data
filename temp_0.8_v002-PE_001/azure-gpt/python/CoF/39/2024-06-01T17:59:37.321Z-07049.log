---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def main():
    with open('suma.in', 'r') as fin:
        n = int(fin.readline().strip())
        costs = np.fromstring(fin.readline(), dtype=int, sep=' ')

    # Calculate the number of levels m in the pyramid
    m = int(np.sqrt(2*n + 0.25) - 0.5)

    # Initialize the dynamic programming table for keeping the minimum costs
    dp_table = np.full((m+1, m+1), np.inf)
    dp_table[0, 0] = costs[0]

    # Initialize the path table to reconstruct the path later
    path_table = np.zeros((m+1, m+1), dtype=int)

    # Fill the dynamic programming table
    idx = 1
    for level in range(1, m+1):
        for row in range(level):
            for col in range(level):
                current_cost = costs[idx]
                idx += 1
                # Consider moves from the north-west, north, and north-east
                nw = dp_table[row-1, col-1] if row > 0 and col > 0 else np.inf
                north = dp_table[row-1, col] if row > 0 else np.inf
                ne = dp_table[row-1, col+1] if row > 0 and col < level-1 else np.inf
                min_cost = current_cost + min(nw, north, ne)
                if min_cost < dp_table[row, col]:
                    dp_table[row, col] = min_cost
                    # Store the path by encoding the previous cell direction
                    if min_cost == current_cost + nw: path_table[row, col] = 1
                    elif min_cost == current_cost + north: path_table[row, col] = 2
                    elif min_cost == current_cost + ne: path_table[row, col] = 3

    # Find the minimum cost and its column index at the last level
    last_row_costs = dp_table[m-1, :m]
    min_cost = np.min(last_row_costs)
    min_col_idx = np.argmin(last_row_costs)

    # Reconstruct the path from the path table
    path = [0]*m
    row, col = m-1, min_col_idx
    path_idx = n-1
    while row >= 0:
        path[row] = path_idx
        if path_table[row, col] == 1:
            row, col = row-1, col-1
        elif path_table[row, col] == 2:
            row -= 1
        elif path_table[row, col] == 3:
            row, col = row-1, col+1
        path_idx -= row

    # Write the results to the output file
    with open('suma.out', 'w') as fout:
        fout.write(f"{m} {int(min_cost)}\n")
        fout.write(' '.join(map(lambda x: str(x+1), path)) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the updated Python solution, incorporating the necessary fixes and utilizing `numpy` for efficiency. It reads from `suma.in` and writes to `suma.out` without using `input()` or `print()`:

```markdown
```python
import numpy as np

def main():
    with open('suma.in', 'r') as fin:
        n = int(fin.readline().strip())
        costs = np.fromstring(fin.readline(), dtype=int, sep=' ')
    
    m = int(np.sqrt(2 * n + 0.25) - 0.5)  # Calculate the height m of the pyramid
    level_start = 1
    min_cost_path = [1]  # The top chamber is always included

    # Initialize an array to hold minimum costs and the corresponding room indices
    dp = np.zeros((m+1, m+1), dtype=int)
    dp[1, 1] = costs[0]

    for level in range(2, m+1):
        level_size = level**2
        level_costs = costs[level_start:level_start + level_size].reshape((level, level))
        new_dp = np.full((m+1, m+1), np.inf, dtype=int)
        
        for row in range(1, level+1):
            for col in range(1, level+1):
                # Determine the minimum cost to enter this chamber from the level above
                above_costs = [
                    dp[row-1, col],    # North
                    dp[row, col-1],    # West
                    dp[row-1, col-1],  # North-West
                    dp[row, col]       # Stay
                ]
                new_dp[row, col] = level_costs[row-1, col-1] + min(above_costs)
        
        # Prepare for the next level
        dp = new_dp.copy()
        level_start += level_size
    
    # Find the endpoint with the minimum cost on the last level
    min_cost = np.min(dp[m, 1:m+1])
    min_cost_index = np.argmin(dp[m, 1:m+1]) + 1  # Adjust index since dp is 1-indexed

    # Reconstruct the path from bottom to top
    col = min_cost_index
    for level in range(m, 1, -1):
        room_number = level**2 - (level - col)**2
        min_cost_path.append(level_start - room_number)
        level_start -= level**2

        # Move to the column that had the minimum cost
        col = np.argmin([
            dp[level-1, col],    # North
            dp[level, col-1],    # West
            dp[level-1, col-1],  # North-West
            dp[level, col]       # Stay
        ]) + 1  # Adjust index since dp is 1-indexed

    # Write the results to the output file
    with open('suma.out', 'w') as fout:
        fout.write(f"{m} {min_cost}\n")
        fout.write(' '.join(map(str, reversed(min_cost_path))))

if __name__ == "__main__":
    main()
```
```
This solution reads from `suma.in`, calculates the minimum cost and path through the pyramid, and writes the result to `suma.out`, while ensuring that it stays within the ~8MB memory limit. It uses NumPy arrays for efficient manipulation of data and minimizes the memory footprint by not storing unnecessary intermediate data.
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
