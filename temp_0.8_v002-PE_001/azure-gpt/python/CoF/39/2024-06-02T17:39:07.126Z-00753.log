---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    level = 0
    while n > 0:
        level += 1
        n -= level ** 2
    return level

# Read from suma.in
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = list(map(int, fin.readline().split()))

# Determining the number of levels in the pyramid
m = calculate_levels(n)

# Initialize the numpy array with inf values
dp = np.full((m+1, m+1), np.inf)
path = np.zeros((m+1, m+1), dtype=int)

# Set the cost of the first room
dp[1][1] = costs[0]

# Calculate the minimum path costs for each level
for level in range(2, m+1):
    base_idx = sum(i*i for i in range(1, level))
    for room in range(1, level+1):
        idx = base_idx + room - 1
        cost = costs[idx] if idx < n else 0
        for prev_room in range(1, level):
            # Define all possible previous positions
            possible_prev_positions = [
                (level-1, prev_room-1),
                (level-1, prev_room),
                (level-1, prev_room+1)
            ]
            for prev_level, prev_room in possible_prev_positions:
                # We only consider valid previous rooms
                if 1 <= prev_room <= prev_level:
                    new_cost = dp[prev_level, prev_room] + cost
                    if new_cost < dp[level, room]:
                        dp[level, room] = new_cost
                        path[level, room] = prev_room

# Build the path
final_path = [0] * m
final_path[-1] = int(np.argmin(dp[m, 1:]))

# Minimum total cost
min_cost = int(dp[m, final_path[-1]])

# Trace back the path
for i in range(m-1, 0, -1):
    final_path[i-1] = path[i+1, final_path[i]]

# Convert path to absolute room numbers
room_number = 1
for i in range(1, m):
    room_number += i*i
    final_path[i] += room_number

# Write to suma.out
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {min_cost}\n")
    fout.write(' '.join(map(str, final_path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    level = 0
    while n > 0:
        level += 1
        n -= level ** 2
    return level

# Read from suma.in
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = np.array(fin.readline().split(), dtype=int)

# Determining the number of levels in the pyramid
m = calculate_levels(n)

# Initialize the numpy array with inf values
dp = np.full((m+1, m+1), np.inf, dtype=int)
path = np.zeros((m+1, m+1), dtype=int)

# Set the cost of the first room
dp[1][1] = costs[0]

# Calculate the minimum path costs for each level
for level in range(2, m+1):
    base_idx = sum(i*i for i in range(1, level))
    for room in range(1, level+1):
        idx = base_idx + room - 1
        cost = costs[idx] if idx < n else 0
        for prev_room in range(max(1, room-1), min(level, room+1)):
            prev_cost = dp[level-1][prev_room]
            new_cost = prev_cost + cost
            if new_cost < dp[level][room]:
                dp[level][room] = new_cost
                path[level][room] = prev_room

# Find the minimum cost at the last level and its room
min_cost = dp[m].min()
last_room = dp[m].argmin()

# Trace back the path
final_path = [0] * m
final_path[m-1] = last_room
for i in range(m, 1, -1):
    final_path[i-2] = path[i][final_path[i-1]]

# Convert path indices to absolute room numbers
room_number = 1
for i in range(1, m):
    room_number += i*i
    final_path[i] += room_number

# Write to suma.out
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {min_cost}\n")
    fout.write(' '.join(map(lambda x: str(x+1), final_path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    level = 0
    while n > 0:
        level += 1
        n -= level ** 2
    return level

# Function to compute the path in the pyramid
def compute_path(n, costs):
    m = calculate_levels(n)
    
    # Initialize a numpy array for dynamic programming
    dp = np.full((m+1, m+1), np.inf)
    dp[1, 1] = costs[0]
    
    # Backtracking array to reconstruct the path
    backtrack = np.zeros((m+1, m+1), dtype=int)
    
    # Calculate the minimum cumulative cost for each room
    num = 1
    for level in range(2, m+1):
        for room in range(1, level+1):
            num += 1
            for prev_room in range(room-1, room+2):
                if 1 <= prev_room <= level-1:
                    new_cost = dp[level-1, prev_room] + costs[num-1]
                    if new_cost < dp[level, room]:
                        dp[level, room] = new_cost
                        backtrack[level, room] = prev_room
    
    # Determine the minimum cost and path
    min_cost = np.min(dp[m, 1:m+1])
    path = [np.argmin(dp[m, 1:m+1]) + (m-1)**2]
    
    for level in range(m, 1, -1):
        next_room = backtrack[level, path[-1] - (level-1)**2 + 1]
        path.append(next_room + (level-2)**2)
    
    # Reverse the path to start from the top of the pyramid
    path.reverse()
    
    return m, min_cost, path

# Read from suma.in
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.array(file.readline().strip().split(), dtype=int)

# Compute the number of levels, minimum cost, and path
m, min_cost, path = compute_path(n, costs)

# Write to suma.out
with open('suma.out', 'w') as file:
    file.write(f"{m} {min_cost}\n")
    file.write(' '.join(map(lambda x: str(x+1), path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    level = 0
    while n > 0:
        level += 1
        n -= level ** 2
    return level

# Read from suma.in
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = np.array(fin.readline().split(), dtype=int)

# Determining the number of levels in the pyramid
m = calculate_levels(n)

# Initialize the numpy array with inf values
dp = np.full((m, m), np.inf, dtype=int)
prev = np.zeros((m, m), dtype=int)

# Set the cost of the first room
dp[0][0] = costs[0]

# Calculate the minimum path costs for each level
index = 1
for level in range(1, m):
    for room in range(level + 1):
        # Define all possible previous positions
        for move in range(-1, 2):
            prev_room = room + move
            if 0 <= prev_room <= level-1:
                # Calculate the cost if moving to this room from the previous level
                if dp[level][room] > dp[level-1][prev_room] + costs[index]:
                    dp[level][room] = dp[level-1][prev_room] + costs[index]
                    prev[level][room] = prev_room
        index += 1

# Reconstruct the path
room = np.argmin(dp[m-1])
path = [0] * m
for level in range(m-1, 0, -1):
    path[level] = room + sum(i for i in range(level+1))
    room = prev[level][room]

path[0] = 0  # The top room is always 0 (room 1 in 1-index)

# Convert to 1-indexed room numbers
path = [x+1 for x in path]

# Write to suma.out
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {dp[m-1][np.argmin(dp[m-1])]}\n")
    fout.write(' '.join(map(str, path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to determine the number of levels (m) given the total number of rooms (n)
def calculate_levels(n):
    level = int(np.floor(np.sqrt(2 * n)))
    while level * (level + 1) // 2 > n:
        level -= 1
    return level

# Read from suma.in
with open('suma.in', 'r') as file:
    n = int(file.readline())
    costs = list(map(int, file.readline().split()))

# Calculate number of levels
m = calculate_levels(n)

# Initialize matrix for dynamic programming
dp = np.full((m + 1, m + 1), np.inf)
dp[1, 1] = costs[0]  # The cost for the first room

# Initialize matrix to store the path
path_matrix = np.zeros((m + 1, m + 1), dtype=int)

# Calculate the DP values
index = 1
for level in range(2, m + 1):
    for row in range(1, level + 1):
        for col in [0, 1]:
            prev_room = row + col - 1
            if 1 <= prev_room <= level - 1:
                if dp[level, row] > dp[level - 1, prev_room] + costs[index]:
                    dp[level, row] = dp[level - 1, prev_room] + costs[index]
                    path_matrix[level, row] = prev_room
        index += 1

# Backtrack to find the path
path = [0] * m
min_last_row = np.argmin(dp[m, 1:]) + 1
path[-1] = min_last_row
for level in range(m, 1, -1):
    path[level - 2] = path_matrix[level, path[level - 1]]
    path[level - 1] += sum(range(level))

# Convert path to 1-indexed
path = [x + 1 for x in path]

# Write the result to suma.out
with open('suma.out', 'w') as file:
    file.write(f"{m} {int(dp[m, min_last_row])}\n")
    file.write(' '.join(map(str, path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_m(n):
    # A function to calculate the number of levels (m)
    # based on the total number of rooms (n)
    m = 0
    while n > m*(m+1)//2:
        m += 1
    return m

def compute_path(n, costs):
    m = calculate_m(n)
    dp = np.full((m+1, m+1), np.inf)  # Initialize DP array with infinity
    dp[1][1] = costs[0]               # Cost of the top room
    path = np.zeros((m+1, m+1), dtype=int)  # To store the path

    room_number = 1  # Room numbers start at 1
    # Fill the DP array
    for i in range(2, m+1):
        for j in range(1, i+1):
            room_number += 1
            # Get cost for the current room
            room_cost = costs[room_number - 1] if room_number <= n else 0
            # Calculate the minimum cost to enter this room
            for k in range(j-1, j+2):  # For each possible previous room
                if 1 <= k <= i-1:
                    if dp[i][j] > dp[i-1][k] + room_cost:
                        dp[i][j] = dp[i-1][k] + room_cost
                        path[i][j] = k

    # Backtrack to find the path
    min_cost = int(min(dp[m][1:]))
    min_index = np.argmin(dp[m][1:]) + 1
    min_path = [0] * m
    min_path[m-1] = min_index
    for i in range(m, 1, -1):
        min_path[i-2] = path[i][min_path[i-1]]
    
    # Convert path to absolute room numbers
    room_number = 0
    for i in range(1, m):
        room_number += i*i
        min_path[i] += room_number

    return m, min_cost, min_path

# Read from suma.in
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = list(map(int, fin.readline().split()))

# Compute the path
m, min_cost, min_path = compute_path(n, costs)

# Write to suma.out
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {min_cost}\n")
    fout.write(' '.join(map(str, min_path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    level = 1
    while n > level * (level + 1) // 2:
        level += 1
    return level

# Read from suma.in
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = np.array(fin.readline().split(), dtype=np.int32)

# Determining the number of levels in the pyramid
m = calculate_levels(n)

# Initialize the numpy array with inf values, shape is m + 1 due to 1-indexed rooms
dp = np.full((m + 1, m + 1), np.inf)
# The path array to store the previous step leading to the current position
prev = np.zeros((m + 1, m + 1), dtype=int)

# Set the cost of the first room, which is always 0
dp[1, 1] = costs[0]

# Calculate the minimum path costs for each level
room = 1  # Start from the first room
for level in range(2, m + 1):
    for room_in_level in range(1, level + 1):
        room += 1
        # Calculate dp value for the current room
        # Check the room just above and the two rooms diagonally above (left and right)
        for prev_room_in_level in range(room_in_level - 1, room_in_level + 2):
            if 1 <= prev_room_in_level <= level - 1:
                new_cost = dp[level - 1, prev_room_in_level] + costs[room - 1]
                if new_cost < dp[level, room_in_level]:
                    dp[level, room_in_level] = new_cost
                    prev[level, room_in_level] = prev_room_in_level

# Backtrack to find the path
min_cost_index = np.argmin(dp[m, 1:]) + 1
min_cost = dp[m, min_cost_index]
path = [0] * m
current_room_in_level = min_cost_index
for level in range(m, 0, -1):
    path[level - 1] = room
    room -= level
    current_room_in_level = prev[level, current_room_in_level]

# Write the result to suma.out
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {int(min_cost)}\n")
    path_str = ' '.join(str(room) for room in path)
    fout.write(path_str + '\n')
```
```
