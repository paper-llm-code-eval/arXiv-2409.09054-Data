---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Calculate the number of levels (m)
m = int(np.sqrt(2 * n))
levels = np.full((m, m), np.inf)
levels[0, 0] = costs[0]

# Fill the levels matrix with the costs
idx = 1
for level in range(1, m):
    for i in range(level + 1):
        for j in range(level + 1):
            levels[i, j] = costs[idx]
            idx += 1

# Minimum path costs
min_path_costs = np.full((m, m), np.inf)
min_path_costs[0, 0] = levels[0, 0]

# Compute the minimum path for each cell
for level in range(1, m):
    for i in range(level + 1):
        for j in range(level + 1):
            options = []
            if i > 0:
                options.append(min_path_costs[i - 1, j])
            if j > 0:
                options.append(min_path_costs[i, j - 1])
            if i > 0 and j > 0:
                options.append(min_path_costs[i - 1, j - 1])
            min_path_costs[i, j] = levels[i, j] + min(options)

# Reconstruct the path by backtracking from the last level
min_cost = min_path_costs[-1].min()
path = [n]
i = j = m - 1
while i > 0 or j > 0:
    current = min_path_costs[i, j] - levels[i, j]
    if i > 0 and min_path_costs[i - 1, j] == current:
        path.append(n - (m - i) * (m - i) + j)
        i -= 1
    elif j > 0 and min_path_costs[i, j - 1] == current:
        path.append(n - (m - i) * (m - i) + j - 1)
        j -= 1
    elif i > 0 and j > 0 and min_path_costs[i - 1, j - 1] == current:
        path.append(n - (m - i) * (m - i) + j - i)
        i -= 1
        j -= 1

# Reverse the path to start from the top of the pyramid
path = path[::-1]
path[0] = 1

# Write the output data
with open('suma.out', 'w') as file:
    file.write(f"{m} {min_cost}\n")
    file.write(' '.join(map(str, path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the room number at a certain position in the pyramid
def room_number(level, row, col):
    return int(level * (level - 1) / 2 + row * level + col + 1)

# Function to reconstruct the path from the minimum cost matrix
def reconstruct_path(min_cost_matrix, level, row, col):
    path = [room_number(level, row, col)]
    while level > 0:
        neighbors = [(row - 1, col), (row, col - 1), (row - 1, col - 1)]
        prev_room = min((r, c) for r, c in neighbors if r >= 0 and c >= 0)
        path.append(room_number(level - 1, *prev_room))
        row, col = prev_room
        level -= 1
    return path[::-1]

# Read the input data
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Determine the number of levels (m)
m = 1
while m * (m + 1) // 2 <= n:
    m += 1
m -= 1

# Initialize minimum cost matrix with infinite cost
min_cost_matrix = np.full((m, m), np.inf)
min_cost_matrix[0, 0] = costs[0]

# Dynamic programming to find minimum path cost
for level in range(1, m):
    for row in range(level + 1):
        for col in range(level + 1):
            current_room = room_number(level, row, col) - 1
            possible_entries = []
            if row > 0:
                possible_entries.append(min_cost_matrix[row - 1, col])
            if col > 0:
                possible_entries.append(min_cost_matrix[row, col - 1])
            if row > 0 and col > 0:
                possible_entries.append(min_cost_matrix[row - 1, col - 1])
            min_cost_matrix[row, col] = costs[current_room] + min(possible_entries, default=0)

# Find the minimum cost and its path
min_cost = min(min_cost_matrix[-1])
min_end_room = np.argmin(min_cost_matrix[-1])
path = reconstruct_path(min_cost_matrix, m - 1, m - 1, min_end_room)

# Write the output data
with open('suma.out', 'w') as file:
    file.write(f"{m} {min_cost}\n")
    file.write(' '.join(map(str, path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Calculate the number of levels in the pyramid
def calculate_levels(n):
    m = 0
    total_rooms = 0
    while total_rooms < n:
        m += 1
        total_rooms = m * (m + 1) // 2
    return m

# Read the input data from 'suma.in'
with open('suma.in', 'r') as f:
    n = int(f.readline())
    costs = np.array(f.readline().split(), dtype=int)

# Initialize the dp array with infinity and set the cost of the first room
m = calculate_levels(n)
dp = np.full((m, m), np.inf)
dp[0, 0] = costs[0]

# Calculate the base index for each level
base_index = np.array([sum(range(i + 1)) for i in range(1, m + 1)])

# Fill the dp array with the minimum cost paths
for level in range(1, m):
    for row in range(level + 1):
        for col in range(level + 1):
            room_idx = base_index[level - 1] + row * level + col
            if room_idx < n:
                cost = costs[room_idx]
                above = dp[row - 1, col] if row > 0 else np.inf
                left = dp[row, col - 1] if col > 0 else np.inf
                diag = dp[row - 1, col - 1] if row > 0 and col > 0 else np.inf
                dp[row, col] = cost + min(above, left, diag)

# Find the minimum path
min_cost = np.min(dp[-1])
min_index = np.argmin(dp[-1])
path = [min_index + base_index[-1]]
for level in range(m - 2, -1, -1):
    row, col = divmod(path[-1] - base_index[level], level + 1)
    room_idx = base_index[level] + row * (level + 1) + col
    path.append(room_idx)

# Write the output data to 'suma.out'
with open('suma.out', 'w') as f:
    f.write(f"{m} {min_cost}\n")
    f.write(' '.join(map(str, [i + 1 for i in reversed(path)])) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Calculate the number of levels 'm' based on the number of rooms 'n'
def calculate_levels(n):
    m = 0
    while (m * (m + 1)) // 2 < n:
        m += 1
    return m

# Read the input data from 'suma.in'
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = list(map(int, file.readline().strip().split()))

# Initialize the dp array to store the minimum costs and the paths
m = calculate_levels(n)
dp = np.full((m, m), np.inf, dtype=int)
paths = np.zeros((m, m), dtype=object)

# Set the starting point
dp[0][0] = costs[0]
paths[0][0] = [1]

# Calculate the minimal path sums and store the paths
for level in range(1, m):
    for room in range(level + 1):
        for direction in range(level + 1):
            index = level * (level - 1) // 2 + room * level + direction
            if index >= n:
                continue
            # Take the value from the above room
            if room > 0:
                new_cost = dp[level - 1][room - 1] + costs[index]
                if new_cost < dp[level][direction]:
                    dp[level][direction] = new_cost
                    paths[level][direction] = paths[level - 1][room - 1] + [index + 1]
            # Take the value from the left room
            if direction > 0:
                new_cost = dp[level][direction - 1] + costs[index]
                if new_cost < dp[level][direction]:
                    dp[level][direction] = new_cost
                    paths[level][direction] = paths[level][direction - 1] + [index + 1]
            # Take the value from the diagonal room
            if room > 0 and direction > 0:
                new_cost = dp[level - 1][room - 1] + costs[index]
                if new_cost < dp[level][direction]:
                    dp[level][direction] = new_cost
                    paths[level][direction] = paths[level - 1][room - 1] + [index + 1]

# Find the path with the minimal sum
min_sum = np.min(dp[-1])
min_path_index = np.argmin(dp[-1])
min_path = paths[-1][min_path_index]

# Write the output data to 'suma.out'
with open('suma.out', 'w') as file:
    file.write(f"{m} {min_sum}\n")
    file.write(' '.join(map(str, min_path)) + '\n')
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to read the input file and return the number of rooms and costs array
def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        costs = np.fromfile(file, dtype=int, sep=' ', count=n)
    return n, costs

# Function to write the output to the file
def write_output(filename, m, min_cost, path):
    with open(filename, 'w') as file:
        file.write(f"{m} {min_cost}\n")
        file.write(' '.join(map(str, path)) + '\n')

# Function to calculate the number of levels in the pyramid
def calculate_levels(n):
    m = 1
    while m * (m + 1) // 2 < n:
        m += 1
    return m

# Function to find the minimum cost path
def find_min_cost_path(n, costs):
    m = calculate_levels(n)
    min_costs = np.full((m, m), np.inf)
    min_costs[0, 0] = costs[0]
    room_index = 1
    for level in range(1, m):
        for row in range(level + 1):
            for col in range(level + 1):
                if room_index < n:
                    cost = costs[room_index]
                    min_costs[row, col] = cost
                    if row > 0:
                        min_costs[row, col] += min(min_costs[row - 1, col], min_costs[row, col])
                    if col > 0:
                        min_costs[row, col] += min(min_costs[row, col - 1], min_costs[row, col])
                    if row > 0 and col > 0:
                        min_costs[row, col] += min(min_costs[row - 1, col - 1], min_costs[row, col])
                    room_index += 1

    # Reconstruct the path
    path = [n]
    min_cost = min_costs[m - 1, m - 1]
    row, col = m - 1, m - 1
    while row > 0 or col > 0:
        path.append(min_costs[row, col] - costs[min_costs[row, col]])
        if row > 0 and col > 0 and min_costs[row, col] == min_costs[row - 1, col - 1] + costs[min_costs[row, col]]:
            row, col = row - 1, col - 1
        elif row > 0 and min_costs[row, col] == min_costs[row - 1, col] + costs[min_costs[row, col]]:
            row -= 1
        elif col > 0 and min_costs[row, col] == min_costs[row, col - 1] + costs[min_costs[row, col]]:
            col -= 1

    path.append(1)
    path.reverse()
    return m, min_cost, path

# Main logic
n, costs = read_input('suma.in')
m, min_cost, path = find_min_cost_path(n, costs)
write_output('suma.out', m, min_cost, path)
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Determine the number of levels in the pyramid
def get_levels(n):
    m = int((np.sqrt(1 + 8 * n) - 1) / 2)
    return m

# Read data from file
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.array(file.readline().split(), dtype=int)

# Calculate the number of levels m
m = get_levels(n)

# Initialize the minimum cost matrix
min_cost_matrix = np.zeros((m, m), dtype=int)

# Populate the cost for the top of the pyramid
min_cost_matrix[0, 0] = costs[0]

# Calculate the cumulative cost for each room
idx = 1
for i in range(1, m):
    for j in range(i + 1):
        min_cost_matrix[i, j] = costs[idx]
        if j > 0:
            min_cost_matrix[i, j] += min(min_cost_matrix[i - 1, j - 1], min_cost_matrix[i, j - 1])
        else:
            min_cost_matrix[i, j] += min_cost_matrix[i - 1, j]
        idx += 1

# Backtrack to find the path with the minimum cost
path = []
row, col = m - 1, np.argmin(min_cost_matrix[m - 1])
path.append((m - 1) * (m - 1) // 2 + col + 1)
for i in range(m - 1, 0, -1):
    if col > 0 and min_cost_matrix[i - 1, col - 1] <= min_cost_matrix[i, col - 1]:
        col -= 1
    path.append((i - 1) * (i - 1) // 2 + col + 1)
path.reverse()

# Write the result to the output file
with open('suma.out', 'w') as file:
    file.write(f'{m} {min_cost_matrix[m - 1, np.argmin(min_cost_matrix[m - 1])]}')
    file.write('\n')
    file.write(' '.join(map(str, path)))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Helper function to compute the number of levels in the pyramid
def number_of_levels(n):
    m = int(np.sqrt(2 * n))
    if m * (m + 1) // 2 > n:
        m -= 1
    return m

# Read input from the file
with open('suma.in', 'r') as fin:
    n = int(fin.readline().strip())
    costs = list(map(int, fin.readline().strip().split()))

# Initialize dynamic programming table
m = number_of_levels(n)
dp = np.zeros((m, m), dtype=int)
path_indices = {(0, 0): [1]}

# Fill in the dynamic programming table and path indices
for level in range(1, m):
    for row in range(level + 1):
        for col in range(level + 1):
            room_number = ((level * (level - 1)) // 2) + row * level + col
            if room_number < n:
                candidates = []
                if row > 0:  # North-East
                    candidates.append((dp[row-1][col] + costs[room_number], path_indices[(row-1, col)]))
                if col > 0:  # North-West
                    candidates.append((dp[row][col-1] + costs[room_number], path_indices[(row, col-1)]))
                if row > 0 and col > 0:  # North
                    candidates.append((dp[row-1][col-1] + costs[room_number], path_indices[(row-1, col-1)]))
                if not candidates:
                    dp[row][col] = costs[room_number]
                    path_indices[(row, col)] = [1, room_number + 1]
                else:
                    min_cost, min_path = min(candidates, key=lambda x: (x[0], x[1]))
                    dp[row][col] = min_cost
                    path_indices[(row, col)] = min_path + [room_number + 1]

# Determine the minimum cost and path from the last level
last_level_costs = dp[-1][:m]
min_cost = min(last_level_costs)
min_col = np.argmin(last_level_costs)
min_path = path_indices[(m-1, min_col)]

# Write output to the file
with open('suma.out', 'w') as fout:
    fout.write(f"{m} {min_cost}\n" + ' '.join(map(str, min_path)))
```
