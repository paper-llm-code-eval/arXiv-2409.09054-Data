---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Efficient way to find the number of levels in the pyramid
def find_levels(n):
    m = int(np.floor(np.sqrt(2 * n)))
    while m * (m + 1) // 2 > n:
        m -= 1
    return m

# Read from suma.in
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.array(list(map(int, file.readline().split())), dtype=np.int32)

# Initialize variables
m = find_levels(n)
dp = np.zeros((m, m), dtype=np.int32)
dp[0, 0] = costs[0]

# Fill the dynamic programming table
for level in range(1, m):
    for room in range(level + 1):
        index = level * (level + 1) // 2 + room
        cost = costs[index]
        if room == 0:
            dp[level, room] = dp[level - 1, room] + cost
        elif room == level:
            dp[level, room] = dp[level - 1, room - 1] + cost
        else:
            dp[level, room] = min(dp[level - 1, room - 1], dp[level - 1, room]) + cost

# Find minimum cost and path
min_cost = dp[m - 1, 0]
min_path_index = 0
for room in range(1, m):
    if dp[m - 1, room] < min_cost:
        min_cost = dp[m - 1, room]
        min_path_index = room

# Reconstruct the path
path = np.zeros(m, dtype=np.int32)
path[m - 1] = (m * (m - 1) // 2) + min_path_index
for level in range(m - 2, -1, -1):
    last_room = path[level + 1] - (level + 1) * (level + 2) // 2
    if last_room == 0 or dp[level, last_room - 1] > dp[level, last_room]:
        path[level] = level * (level + 1) // 2 + last_room
    else:
        path[level] = level * (level + 1) // 2 + last_room - 1

# Write to suma.out
with open('suma.out', 'w') as file:
    file.write(f"{m} {min_cost}\n")
    file.write(' '.join(map(str, path + 1)))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient way to find the number of levels in the pyramid
def find_levels(n):
    m = int(np.floor(np.sqrt(2 * n)))
    while m * (m + 1) // 2 > n:
        m -= 1
    return m

def main():
    # Read from suma.in
    with open('suma.in', 'r') as file:
        n = int(file.readline().strip())
        costs = np.array(list(map(int, file.readline().split())), dtype=np.int32)
    
    # Initialize variables
    m = find_levels(n)
    dp = np.full((m, m), np.inf, dtype=np.int32)
    path_matrix = np.zeros((m, m), dtype=np.int32)
    dp[0, 0] = costs[0]
    
    # Fill the dynamic programming table and path matrix
    for level in range(1, m):
        for room in range(level + 1):
            index = level * (level + 1) // 2 + room
            cost = costs[index]
            if room > 0:
                if dp[level - 1, room - 1] + cost < dp[level, room]:
                    dp[level, room] = dp[level - 1, room - 1] + cost
                    path_matrix[level, room] = room - 1
            if room < level and dp[level - 1, room] + cost < dp[level, room]:
                dp[level, room] = dp[level - 1, room] + cost
                path_matrix[level, room] = room
    
    # Find minimum cost and path
    min_cost_index = np.argmin(dp[m - 1])
    min_cost = dp[m - 1, min_cost_index]

    # Reconstruct the path
    path = np.zeros(m, dtype=np.int32)
    path[m - 1] = min_cost_index
    for i in range(m - 2, -1, -1):
        path[i] = path_matrix[i + 1, path[i + 1]]
    
    # Convert room indexes to actual room numbers
    room_numbers = np.zeros(m, dtype=np.int32)
    for i in range(m):
        room_numbers[i] = (i * (i + 1) // 2) + path[i] + 1
    
    # Write to suma.out
    with open('suma.out', 'w') as file:
        file.write(f"{m} {min_cost}\n")
        file.write(' '.join(map(str, room_numbers)))

# Call the main function
if __name__ == "__main__":
    main()
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    return int(np.floor((np.sqrt(1 + 8 * n) - 1) / 2))

# Function to reconstruct the path of minimum cost
def reconstruct_path(dp, costs, m):
    path = [1]
    prev = 0
    for level in range(1, m):
        choices = [dp[level - 1, max(prev - 1, 0)], dp[level - 1, prev]]
        if prev + 1 < level:
            choices.append(dp[level - 1, prev + 1])
        next_room = prev + np.argmin(choices)
        path.append((level * (level + 1)) // 2 + next_room + 1)
        prev = next_room
    return path

# Main function
def main():
    with open('suma.in', 'r') as file:
        n = int(file.readline().strip())
        costs = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    
    m = calculate_levels(n)
    dp = np.full((m, m), np.inf)
    dp[0, 0] = costs[0]

    for level in range(1, m):
        for room in range(level + 1):
            idx = (level * (level + 1)) // 2 + room
            dp[level, room] = costs[idx]
            if room == 0:
                dp[level, room] += dp[level - 1, room]
            else:
                dp[level, room] += min(
                    dp[level - 1, room - 1],
                    dp[level - 1, room] if room < level else np.inf,
                    dp[level - 1, room + 1] if room + 1 < level else np.inf
                )
    
    # Get the minimum cost from the last level
    min_cost = np.min(dp[m - 1, :m])
    path = reconstruct_path(dp, costs, m)
    
    with open('suma.out', 'w') as file:
        file.write(f"{m} {int(min_cost)}\n")
        file.write(' '.join(map(str, path)))

if __name__ == "__main__":
    main()
```
Please ensure that the `numpy` library is installed in the environment where this code will be run. Additionally, please note that file handling and array indexing have been implemented according to the Python (0-based) standard, as opposed to the 1-based indexing described in the problem statement. The code converts between these two conventions where necessary.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the execution environment. Since the use of `numpy` is not possible and we need to optimize for both time and memory usage, we will need to implement the solution without relying on third-party libraries.

Here is the updated solution without using `numpy`:

```python
# Function to calculate the number of levels in the pyramid given the total number of rooms
def calculate_levels(n):
    m = 0
    while m * (m + 1) // 2 < n:
        m += 1
    return m - 1 if m * (m + 1) // 2 > n else m

# Function to reconstruct the path of minimum cost
def reconstruct_path(dp, m):
    path = []
    min_cost = min(dp[-1])
    room = dp[-1].index(min_cost)
    for level in range(m - 1, -1, -1):
        path.append(level * (level + 1) // 2 + room + 1)
        if room > 0 and dp[level - 1][room - 1] + (level * (level + 1) // 2 + room) == dp[level][room]:
            room -= 1
    path.reverse()
    return path

# Main function
def main():
    with open('suma.in', 'r') as file:
        n = int(file.readline().strip())
        costs = list(map(int, file.readline().split()))
    
    m = calculate_levels(n)
    dp = [[float('inf')] * m for _ in range(m)]
    dp[0][0] = costs[0]

    for level in range(1, m):
        for room in range(level + 1):
            idx = (level * (level + 1)) // 2 + room
            dp[level][room] = costs[idx]
            dp[level][room] += min(dp[level - 1][max(room - 1, 0)],
                                   dp[level - 1][room] if room < level else float('inf'))
    
    min_cost = min(dp[m - 1])
    path = reconstruct_path(dp, m)
    
    with open('suma.out', 'w') as file:
        file.write(f"{m} {min_cost}\n")
        file.write(' '.join(map(str, path)))

if __name__ == "__main__":
    main()
```

This solution does not use `numpy` and instead relies on built-in Python functions and lists to perform the necessary calculations. Please ensure that this code is run in a Python environment where no third-party libraries are expected to be used.
---------- user ----------


Program result did not match expected result.
Input data:
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```
Expected output:
```
3 13
1 3 8
```
Found output:
```
4 18
2 3 5 8
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
