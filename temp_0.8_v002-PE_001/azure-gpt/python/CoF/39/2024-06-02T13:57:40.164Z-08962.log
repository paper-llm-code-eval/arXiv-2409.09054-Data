---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np


def solve_pyramid_problem():
    with open('suma.in', 'r') as file:
        n = int(file.readline().strip())
        costs = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

    # Determine the number of levels in the pyramid
    m = int(np.sqrt(2 * n + 0.25) - 0.5)

    # Initialize the DP array
    dp = np.full((m + 1, m + 1), np.inf)
    dp[1, 1] = costs[0]

    # Backtracking path reconstruction
    path = np.zeros(m, dtype=int)

    # Dynamic programming to calculate minimum path sum
    idx = 1
    for level in range(2, m + 1):
        for row in range(1, level + 1):
            for col in range(1, level + 1):
                # Considering the sub-problem structure and the possible movements
                dp[level, col] = min(dp[level, col], dp[level - 1, col] + costs[idx],
                                     dp[level - 1, col - 1] + costs[idx] if col > 1 else np.inf,
                                     dp[level, col - 1] + costs[idx] if col > 1 else np.inf)
                idx += 1

    # Find the minimum sum at the last level
    min_cost = np.min(dp[m, 1:])
    min_col = np.argmin(dp[m, 1:]) + 1

    # Backtrack to find the path
    path[m - 1] = m * (m - 1) + min_col
    for level in range(m, 1, -1):
        col = min_col
        # Find the previous column in the path
        if col > 1 and dp[level - 1, col - 1] + costs[path[level - 1] - 1] == dp[level, col]:
            col -= 1
        elif dp[level - 1, col] + costs[path[level - 1] - 1] == dp[level, col]:
            pass
        elif col < m and dp[level - 1, col + 1] + costs[path[level - 1] - 1] == dp[level, col]:
            col += 1
        path[level - 2] = (level - 1) * (level - 2) + col
        min_col = col

    # Write output to file
    with open('suma.out', 'w') as file:
        file.write(f"{m} {int(min_cost)}\n")
        file.write(' '.join(map(str, path)))


solve_pyramid_problem()
```
This code snippet reads the input from 'suma.in', calculates the minimum cost and the path to achieve this cost, and writes the output to 'suma.out'. It uses the numpy library for optimized numerical operations, and dynamic programming with memoization to avoid redundant calculations. Note that the backtracking part of the code requires careful implementation to comply with the problem's constraints.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code indicates that the NumPy library is not installed in the environment where the program is being executed. Since we have a strict memory limit and we are required to optimize for both time and memory, I will write a solution that does not rely on NumPy or any other third-party library, using only standard Python features to minimize memory usage.

Here's the complete solution without NumPy:

```python
def solve_pyramid_problem():
    # Read input data
    with open('suma.in', 'r') as file:
        n = int(file.readline().strip())
        costs = list(map(int, file.readline().split()))

    # Determine the number of levels in the pyramid
    m = int(((8 * n + 1) ** 0.5 - 1) / 2)

    # Initialize the DP array
    dp = [0] * (n + 1)
    dp[1] = costs[0]

    # Backtracking path reconstruction
    path = [1]

    # Dynamic programming to calculate minimum path sum
    idx = 2  # Start from the second level
    for level in range(2, m + 1):
        prev_dp = dp.copy()
        for i in range(level * (level - 1) // 2 + 1, level * (level + 1) // 2 + 1):
            dp[i] = costs[i - 1] + min(
                prev_dp[i - level],  # South-East
                prev_dp[i - level + 1] if i - level + 1 < idx else float('inf'),  # South
                dp[i - 1] if i - 1 >= level * (level - 1) // 2 + 1 else float('inf')  # East
            )
            idx += 1

    # Find the minimum sum at the last level and the index where the minimum is found
    min_sum = min(dp[-m:])
    min_index = n - m + dp[-m:].index(min_sum) + 1

    # Backtrack to find the path
    for level in range(m, 1, -1):
        path.append(min_index)
        if min_index - level >= level * (level - 1) // 2 + 1 and dp[min_index - level] == \
                dp[min_index] - costs[min_index - 1]:
            min_index = min_index - level
        elif min_index - level + 1 >= level * (level - 1) // 2 + 1 and dp[min_index - level + 1] == \
                dp[min_index] - costs[min_index - 1]:
            min_index = min_index - level + 1

    # Reverse the path to be from top to bottom
    path.reverse()

    # Write output to file
    with open('suma.out', 'w') as file:
        file.write(f"{m} {min_sum}\n")
        file.write(' '.join(map(str, path)))


solve_pyramid_problem()
```

This code reads input from 'suma.in', computes the number of levels, uses dynamic programming to find the minimum cost path, and writes the result to 'suma.out'. It relies entirely on built-in Python functions and data structures, avoiding third-party libraries to keep memory usage within the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```
Expected output:
```
3 13
1 3 8
```
Found output:
```
4 0
11 11 11 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
