---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `suma.in` and write to `suma.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[suma1.png]
\
Constructorii angajaţi de faraonul Keops au terminat construirea piramidei în trepte mult visată. Măreaţa piramidă are $n$ camere identice de formă cubică, numerotate de la $1$ la $n$, dispuse pe $m$ niveluri astfel:
- camera din vârful piramidei formează nivelul $1$ şi are numărul $1$;
- nivelul $2$ al piramidei este format din următoarele $4$ camere care în secţiune cu un plan paralel cu baza au aspectul unei matrice cu $2$ linii şi $2$ coloane; camerele de pe nivelul $2$ sunt numerotate de la $2$ la $5$ în ordinea crescătoare a liniilor matricei, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei;
...
- nivelul $m$ al piramidei este format din $m \times m$ camere şi au, în secţiune cu un plan paralel cu baza, aspectul unei matrice cu $m$ linii şi $m$ coloane; camerele de pe nivelul $m$ sunt numerotate în continuarea celor de pe nivelurile $1, 2, ..., m - 1$, în ordinea crescătoare a liniilor matricei de secţiune, iar pe aceeaşi linie în ordinea crescătoare a coloanelor matricei. De exemplu, piramida din desenul de mai sus are $n = 30, m = 4$ iar camerele sunt numerotate şi dispuse pe niveluri astfel:
\
 ~[suma2.png]
\
Nivelurile de camere sunt poziţionate astfel încât camerele de pe prima linie şi prima coloană a fiecărui nivel să se suprapună. Pentru exemplul dat, camerele $1, 2, 6$ şi $15$ sunt situate una sub alta, în această ordine.

Accesul în oricare din camerele piramidei, situate pe diferite niveluri, se realizează prin drumuri construite astfel:
* intrarea în piramidă se face doar prin camera din vârful ei, cea cu numărul $1$;
* din camera cu numărul $k$ de pe un drum se poate intra într-una din cele patru camere situate pe nivelul imediat următor al piramidei şi anume: camera situată sub cea cu numărul $k$ sau una din cele trei camere vecine acesteia în secţiune (în direcţiile Est, Sud-Est, Sud, considerând secţiunile poziţionate ca în imaginile de mai sus). De exemplu, din camera cu numărul $10$ se poate intra într-una din camerele cu numerele: $20, 21, 24$ sau $25$.

Faraonul priveşte cu mândrie şi tristeţe la frumoasa piramidă. Banii din visterie s-au împuţinat iar camerele piramidei trebuie finisate şi decorate. Scribul său favorit a refăcut toate calculele, a eliminat obiectele inutile şi a stabilit pentru fiecare cameră $k$ un cost $c_k$ aferent finisării şi decorării ei ($1 ≤ k ≤ n$). 

Însă, suma totală necesară fiind încă mare, faraonul i-a cerut scribului să aleagă un drum, dintre cele construite, care să treacă prin toate nivelurile piramidei astfel încât suma s a tuturor costurilor aferente finisării şi decorării camerelor de pe acest drum să fie minimă. Deocamdată, doar aceste camere vor fi aranjate...  

# Cerinţă
Scrieţi un program care să determine numărul $m$ de niveluri ale piramidei, suma minimă $s$ a tuturor costurilor aferente finisării şi decorării camerelor de pe un drum ce trece prin toate nivelurile piramidei, construit în modul descris în enunţ, precum şi un astfel de drum pentru care se obţine suma minimă, putând fi ales de scrib.

# Date de intrare
Fişierul de intrare `suma.in` conţine pe prima linie numărul natural nenul $n$ reprezentând numărul de camere din piramidă. A doua linie conţine $n$ numere naturale nenule $c_1, c_2,…, c_n$, separate prin câte un spaţiu, reprezentând costurile aferente finisării şi decorării camerelor, în ordinea numerotării lor.

# Date de ieşire
Fişierul de ieşire `suma.out` va conţine pe prima linie două numere naturale $m$ şi $s$, separate printr-un singur spaţiu, cu semnificaţia din enunţ. Cea de-a doua linie va conţine, separate prin câte un spaţiu, în ordinea parcurgerii lor, numerele camerelor de pe un drum ce trece prin toate nivelurile piramidei, drum pentru care se obţine suma minimă $s$. 

# Restricţii şi precizări
* $1 ≤ n ≤ 63\ 365$
* Pentru fiecare valoare $n$ citită se poate construi în modul descris în enunţ o piramidă în trepte cu $n$ camere 
* $1 ≤ c_1, c_2, ..., c_n < 100 $
* Dacă există mai multe drumuri ce trec prin toate nivelurile piramidei şi pentru care se obţine suma minimă $s$, atunci drumul ales va fi cel mai mic drum din punct de vedere lexicografic.
* Drumul $a_1, a_2, a_3, …, a_m$ este mai mic, din punct de vedere lexicografic, ca drumul $b_1, b_2, b_3, …, b_m$ dacă există un indice $j$ ($1 ≤ j ≤ m$) astfel încât $a_1=b_1, a_2=b_2 ,….,a_{j-1}=b_{j-1}$ şi $a_j < b_j$.
* Se acordă:
* $10%$ din punctaj pentru determinarea corectă a numărului $m$ de niveluri ale piramidei 
* $30%$ din punctaj pentru determinarea corectă a sumei minime $s$ 
* $60%$ din punctaj pentru determinarea corectă a drumului cerut.

---

Example:
`suma.in`
```
14
7 8 4 5 5 8 4 2 7 7 8 3 1 6
```

`suma.out`
```
3 13
1 3 8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read input data
with open('suma.in', 'r') as f:
    n = int(f.readline().strip())
    costs = list(map(int, f.readline().strip().split()))

# Determine the number of levels m of the pyramid
m = int(np.ceil((-1 + np.sqrt(1 + 8 * n)) / 2))

# Initialize cost matrix with maximum cost values
max_cost = 100
dp = np.full((m, m), max_cost * n, dtype=int)
dp[0][0] = costs[0]  # Set the cost of the top room

# Paths reconstruction matrix
paths = np.full((m, m), -1, dtype=int)

# Dynamic programming to calculate the minimum cost
for level in range(1, m):
    for room in range(level + 1):
        base_room_number = (level * (level - 1)) // 2 + room
        cost = costs[base_room_number]
        for dr, dc in [(0, -1), (-1, -1), (-1, 0), (-1, 1)]:
            prev_room_row = level - 1 + dr
            prev_room_col = room + dc
            if 0 <= prev_room_row < m and 0 <= prev_room_col < m:
                new_cost = dp[prev_room_row][prev_room_col] + cost
                if new_cost < dp[level][room]:
                    dp[level][room] = new_cost
                    paths[level][room] = prev_room_col

# Find the minimum cost and path
min_cost = np.min(dp[-1])
min_cost_room_index = np.argmin(dp[-1])
path = []
current_room = min_cost_room_index
for level in range(m - 1, -1, -1):
    room_number = (level * (level + 1)) // 2 + current_room
    path.append(room_number + 1)
    current_room = paths[level][current_room]

# Output the result
with open('suma.out', 'w') as f:
    f.write(f"{m} {min_cost}\n")
    f.write(' '.join(map(str, path[::-1])))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the minimum cost path through the pyramid
def find_min_cost_path(costs, n):
    # Determine the number of levels m of the pyramid
    m = int(np.ceil((-1 + np.sqrt(1 + 8 * n)) / 2))

    # Initialize cost matrix with maximum cost values
    max_cost = 100
    dp = np.full((m, m), max_cost * n, dtype=int)
    dp[0][0] = costs[0]  # Set the cost of the top room

    # Paths reconstruction matrix
    paths = np.full((m, m), -1, dtype=int)

    # Dynamic programming to calculate the minimum cost
    for level in range(1, m):
        for room in range(level + 1):
            room_idx = (level * (level - 1)) // 2 + room
            cost = costs[room_idx]
            for dr, dc in [(-1, 0), (-1, -1), (0, -1), (1, -1)]:
                prev_room_row = level - 1 + dr
                prev_room_col = room + dc
                if 0 <= prev_room_row < level and 0 <= prev_room_col <= prev_room_row:
                    new_cost = dp[prev_room_row][prev_room_col] + cost
                    if new_cost < dp[level][room]:
                        dp[level][room] = new_cost
                        paths[level][room] = prev_room_col

    # Find the minimum cost and path
    min_cost = min(dp[-1])
    min_cost_room_col = np.argmin(dp[-1])
    path = []
    for level in range(m - 1, -1, -1):
        path.append((level * (level + 1)) // 2 + min_cost_room_col)
        min_cost_room_col = paths[level][min_cost_room_col]

    # Convert room indices to room numbers and reverse the path
    path = [p + 1 for p in path[::-1]]

    return m, min_cost, path

# Read input data
with open('suma.in', 'r') as file_in:
    n = int(file_in.readline().strip())
    costs = list(map(int, file_in.readline().strip().split()))

# Find the minimum cost path
m, min_cost, path = find_min_cost_path(costs, n)

# Write the output data
with open('suma.out', 'w') as file_out:
    file_out.write(f"{m} {min_cost}\n")
    file_out.write(' '.join(map(str, path)))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    with open('suma.in', 'r') as file:
        n = int(file.readline())
        costs = np.array(file.readline().split(), dtype=int)

    # Find number of levels based on the number of chambers
    m = int((np.sqrt(1 + 8 * n) - 1) / 2)

    # Initialize arrays to store the minimum cost and path
    min_cost = np.full((m, m), np.inf)
    path = np.zeros((m, m), dtype=int)

    # Base case for the top of the pyramid
    min_cost[0, 0] = costs[0]

    # Calculate the minimum cost for each chamber and store the path
    for level in range(1, m):
        for room in range(level + 1):
            base = level * (level - 1) // 2 
            prev_base = (level - 1) * (level - 2) // 2
            for prev_room in range(level):
                # Current chamber index
                chamber_index = base + room
                # Previous chamber indices
                prev_chamber_indices = [
                    prev_base + prev_room - (1 if prev_room > 0 else 0),
                    prev_base + prev_room,
                    prev_base + prev_room + (1 if prev_room < level - 1 else 0)
                ]
                for prev_chamber_index in prev_chamber_indices:
                    if prev_chamber_index < n and chamber_index < n:
                        cost = min_cost[level - 1, prev_room] + costs[chamber_index]
                        if cost < min_cost[level, room]:
                            min_cost[level, room] = cost
                            path[level, room] = prev_chamber_index

    # Reconstruct the path starting from the last level
    result_path = [n]
    current_index = np.argmin(min_cost[-1])
    for level in range(m - 1, 0, -1):
        result_path.append(path[level, current_index] + 1)
        current_index = path[level, current_index] - (level - 1) * (level - 2) // 2

    result_path.append(1)
    result_path.reverse()

    # Write results to the output file
    with open('suma.out', 'w') as file:
        file.write(f"{m} {int(min_cost[-1, current_index])}\n")
        file.write(' '.join(map(str, result_path)))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to find the minimum cost and the corresponding path
def find_min_cost_and_path(costs):
    # Calculate the number of levels in the pyramid
    num_levels = int(np.sqrt(1 + 8 * len(costs)) / 2 - 0.5)
    # Initialize dynamic programming table for costs and path reconstruction
    dp_costs = np.full((num_levels, num_levels), np.inf)
    dp_paths = np.full((num_levels, num_levels), 0, dtype=int)
    dp_costs[0, 0] = costs[0]
    for i in range(1, num_levels):
        for j in range(i + 1):
            cost = costs[i * (i + 1) // 2 + j]
            # Check all possible previous positions
            for dj in [-1, 0]:
                pj = j + dj
                if 0 <= pj <= i - 1:
                    if dp_costs[i - 1, pj] + cost < dp_costs[i, j]:
                        dp_costs[i, j] = dp_costs[i - 1, pj] + cost
                        dp_paths[i, j] = pj

    min_cost = np.min(dp_costs[-1])
    current_index = np.argmin(dp_costs[-1])
    path = []
    for i in range(num_levels - 1, -1, -1):
        path.append(i * (i + 1) // 2 + current_index + 1)
        current_index = dp_paths[i, current_index]

    return num_levels, int(min_cost), path[::-1]

# Read input
with open('suma.in', 'r') as f:
    n = int(f.readline().strip())
    costs_list = list(map(int, f.readline().strip().split()))
    costs = np.array(costs_list, dtype=np.int32)

# Process data
m, min_cost, path = find_min_cost_and_path(costs)

# Write output
with open('suma.out', 'w') as f:
    f.write(f"{m} {min_cost}\n")
    f.write(' '.join(map(str, path)))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the levels based on the total chambers
def calculate_levels(n):
    return int((-1 + np.sqrt(1 + 8 * n)) // 2)

# Function to calculate the minimum cost and path
def calculate_minimum_cost_and_path(costs, levels):
    dp = np.full((levels + 1, levels + 1), np.inf)
    dp[1, 1] = costs[0]
    path = np.zeros((levels + 1, levels + 1), dtype=int)

    for level in range(2, levels + 1):
        for room in range(1, level + 1):
            chamber_index = level * (level - 1) // 2 + room - 1
            above = dp[level - 1, room] if room <= level - 1 else np.inf
            left_above = dp[level - 1, room - 1] if room > 1 else np.inf
            dp[level, room] = costs[chamber_index] + min(above, left_above)
            path[level, room] = room if above < left_above else room - 1

    # Find the minimum cost in the last level
    min_cost = min(dp[levels, 1:levels + 1])
    min_path = [np.argmin(dp[levels, 1:levels + 1])]

    # Reconstruct the path
    for level in range(levels, 1, -1):
        min_path.insert(0, path[level, min_path[0]])
    min_path = [x + (level * (level - 1) // 2) for level, x in enumerate(min_path)]

    return min_cost, min_path

# Read the input file
with open('suma.in') as file:
    n = int(file.readline())
    costs = np.array(file.readline().split(), dtype=int)

# Calculate number of levels and the minimum cost path
levels = calculate_levels(n)
min_cost, min_path = calculate_minimum_cost_and_path(costs, levels)

# Write the output file
with open('suma.out', 'w') as file:
    file.write(f"{levels} {min_cost}\n")
    file.write(' '.join(map(str, min_path)))
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read input data from file
    with open('suma.in', 'r') as file:
        n = int(file.readline())
        costs = np.array(file.readline().split(), dtype=int)

    # Calculate the number of levels (m) of the pyramid
    m = int(np.sqrt(2 * n + 0.25) - 0.5)

    # Initialize dynamic programming array for finding minimum cost
    dp = np.zeros((m + 1) * (m + 2) // 2, dtype=int)
    path = np.zeros((m + 1) * (m + 2) // 2, dtype=int)
    dp[0] = costs[0]

    # Fill the dynamic programming array with the minimum costs
    for level in range(1, m):
        for room in range(1, level + 2):
            index = level * (level + 1) // 2 + room - 1
            # Cost of the room directly above
            dp[index] = dp[index - level] + costs[index]
            path[index] = index - level
            if room > 1:
                # Compare with the cost of the room above to the left
                cost_left = dp[index - level - 1] + costs[index]
                if cost_left < dp[index]:
                    dp[index] = cost_left
                    path[index] = index - level - 1

    # Find the room with the minimum cost at the last level
    min_cost = float('inf')
    min_index = -1
    for room in range(1, m + 2):
        index = m * (m + 1) // 2 + room - 1
        if dp[index] < min_cost:
            min_cost = dp[index]
            min_index = index

    # Reconstruct the path
    min_path = []
    while min_index != 0:
        min_path.append(min_index + 1)
        min_index = path[min_index]
    min_path.append(1)
    min_path.reverse()

    # Write output data to file
    with open('suma.out', 'w') as file:
        file.write("{} {}\n".format(m, min_cost))
        file.write(" ".join(map(str, min_path)))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `suma.out` and read from `suma.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_m(n):
    # The number of levels 'm' can be derived from the formula for the sum of the first 'm' squares
    m = int(np.sqrt(8 * n + 1) / 2 - 0.5)
    return m

def min_path_cost(costs, n):
    m = calculate_m(n)
    # Initialize the dynamic programming tables
    dp = np.zeros((m + 1, m + 1), dtype=int)
    trace = np.zeros((m + 1, m + 1), dtype=int)

    # Fill in the base case (the top of the pyramid)
    dp[1,1] = costs[0]
    
    # Calculate the minimum cost path
    for i in range(2, m + 1):
        for j in range(1, i + 1):
            min_cost = dp[i-1, j] + costs[i*(i-1)//2 + j - 1]
            trace[i, j] = j
            
            if j > 1 and dp[i-1, j-1] + costs[i*(i-1)//2 + j - 1] < min_cost:
                min_cost = dp[i-1, j-1] + costs[i*(i-1)//2 + j - 1]
                trace[i, j] = j - 1
            
            dp[i, j] = min_cost

    # Retrieve the path
    path = [0] * m
    path[m-1] = np.argmin(dp[m, 1:])
    s = dp[m, path[m-1]]

    for i in range(m, 1, -1):
        path[i-2] = trace[i, path[i-1]]
        path[i-1] += i*(i-1)//2

    path[0] = 1
    path = [p for p in path]
    
    return m, s, path

# Read input data
with open('suma.in', 'r') as file:
    n = int(file.readline().strip())
    costs = np.array(file.readline().strip().split(), dtype=int)

# Solve the problem
m, s, path = min_path_cost(costs, n)

# Write output data
with open('suma.out', 'w') as file:
    file.write('{} {}\n'.format(m, s))
    file.write(' '.join(str(room) for room in path))
```
