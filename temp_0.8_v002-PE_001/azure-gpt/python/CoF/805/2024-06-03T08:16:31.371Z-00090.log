---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `vase.in` and write to `vase.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[0.jpg|align=right|width=12em]

Specialiştii chimişti au reuşit crearea în laborator a unei game diversificate de substanţe lichide nemiscibile (care nu se amestecă între ele), de aceeaşi densitate şi de culori diferite.

Acest rezultat a fost utilizat de către specialiştii fizicieni pentru studiul principiului vaselor comunicante. Conform acestui principiu „*într-un sistem de vase comunicante nivelul lichidului este acelaşi, indiferent de forma vaselor*”.

\
Experimentele fizicienilor se desfăşoară astfel:

Într-un sistem cu **două** vase comunicante, gradat identic pe fiecare ramură cu $0$, $1$, $2$, $3$, $\dots$, fizicienii introduc un număr de $n$ lichide, pe ramura din stânga sau pe ramura din dreapta. Volumele introduse din fiecare lichid, notate cu $V_i$ ($1 \leq i \leq n$), sunt **numere naturale nenule pare** astfel încât, la echilibru, orice lichid se va aşeza între două gradaţii de aceeaşi parte a unei ramuri sau pe cele două ramuri ale sistemului de vase comunicante. Lichidele sunt identificate prin intermediul culorii acestora, culori numerotate cu $1$, $2$, $3$, $\dots$, $n$. Introducerea lichidelor în sistemul cu două vase comunicante se face în ordinea crescătoare a numerelor culorilor, începând cu lichidul de culoare $1$.

~[1.png|align=right|width=15em]

\
Scopul experimentului este de a determina gradaţia maximă la care se ridică lichidele în sistemul cu două vase comunicante, precum şi între ce gradaţii se găseşte un lichid de culoare $x$, dintre cele introduse.

De exemplu, dacă în sistemul cu două vase comunicante se introduc $n=3$ lichide în ordinea: $V_1=4$ lichid de culoare $1$ introdus prin ramura din dreapta (operaţie codificată `4 D`), $V_2=4$ lichid de culoare $2$ introdus prin ramura din stânga (operaţie codificată `4 S`) şi $V_3=2$ lichid de culoare $3$ introdus prin ramura din stânga (operaţie codificată `2 S`) atunci gradaţia maximă la care se ridică nivelul lichidelor în sistemul cu două vase comunicante este $5$, iar lichidul de culoare $x=2$ se găseşte între gradaţiile: $3$ pe ramura din stânga (`3 S`) şi $1$ pe ramura din dreapta (`1 D`), conform figurii alăturate.

# Cerinţă
Să se scrie un program care cunoscând numărul $n$ de lichide introduse în sistemul cu două vase comunicante, volumul $V_i$ şi ramura prin care se face introducerea lichidului de culoare $i$ ($1 \leq i \leq n$), precum şi culoarea $x$, să calculeze gradaţia maximă la care se ridică lichidele în acest sistem la echilibru şi între ce gradaţii se găseşte lichidul de culoare $x$.

# Date de intrare
Prima linie a fişierului de intrare `vase.in` conţine un singur număr natural nenul $n$, cu semnificaţia de mai sus. Fiecare linie, din următoarele $n$, conţine câte două valori separate printr-un spaţiu: un număr natural nenul par şi o literă mare, `S` sau `D`, reprezentând volumul introdus din lichidul de culoare $i$, respectiv ramura (`S` pentru ramura din stânga şi `D` pentru ramura din dreapta) prin care se face introducerea acestuia. Linia $n+2$ a fişierului de intrare conţine un singur număr nenul $x$ ce reprezintă culoarea lichidului căutat.

# Date de ieşire
Fişierul de ieşire `vase.out` va conţine pe prima linie un număr natural nenul ce reprezintă gradaţia maximă la care se ridică lichidele în sistemul de vase comunicante la echilibru. Următoarele două linii vor conţine fiecare câte două valori separate printr-un spaţiu: un număr natural şi o literă mare (`S` sau `D`), reprezentând gradaţia şi ramura între care se aşează lichidul căutat.

# Restricţii şi precizări
- $1 \leq x \leq n \leq 100\ 000$
- $2 \leq V_i \leq 100\ 000$ pentru $1 \leq i \leq n$
- Sistemul de vase este gradat în aceleaşi unităţi de măsură în care sunt exprimate volumele de lichid.
- Dacă lichidul căutat, de culoare $x$, se aşează pe aceeaşi ramură se va afişa întâi gradaţia superioară şi apoi cea inferioară.
- Dacă lichidul căutat, de culoare $x$, se aşează pe ramuri diferite se va afişa întâi gradaţia de pe ramura din stânga şi apoi cea de pe ramura din dreapta.
- Dacă una dintre gradaţiile între care se situează lichidul căutat, de culoare $x$, este $0$ atunci se consideră că aceasta gradaţie se găseşte pe aceeaşi ramură cu cealaltă gradaţie.
- Pentru rezolvarea primei cerinţe se acordă $20\%$ din punctaj, iar pentru a doua cerinţă $80\%$ din punctaj.

---

Example:
`vase.in`
```
3
4 D
4 S
2 S
2
```

`vase.out`
```
5
3 S
1 D
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the data from the file
with open('vase.in', 'r') as fin:
    n = int(fin.readline().strip())
    volumes = np.zeros((n, 2), dtype=np.int32)
    for i in range(n):
        volume, side = fin.readline().strip().split()
        volumes[i] = (int(volume), 0 if side == 'S' else 1)
    x = int(fin.readline().strip())

# Initialize left and right heights
left_height, right_height = 0, 0
# Keep track of the color's position in left and right branches
color_positions = np.zeros((n, 2), dtype=np.int32)

# Process the volumes and calculate the positions
for i, (volume, side) in enumerate(volumes):
    if side == 0:  # Left side
        color_positions[i, 0] = left_height + volume if right_height >= left_height else right_height
        color_positions[i, 1] = left_height
        left_height += volume
    else:  # Right side
        color_positions[i, 0] = right_height
        color_positions[i, 1] = right_height + volume if left_height >= right_height else left_height
        right_height += volume

# Calculate max height
max_height = max(left_height, right_height)

# Get the position of the requested color x
color_position = color_positions[x - 1]

# Write the results to the file
with open('vase.out', 'w') as fout:
    fout.write(f"{max_height}\n")
    if color_position[0] < color_position[1]:  # If the color is on different branches
        fout.write(f"{color_position[0]} S\n{color_position[1]} D\n")
    else:  # If the color is on the same branch
        fout.write(f"{color_position[1]} S\n{color_position[0]} D\n" if volumes[x - 1, 1] == 0 else f"{color_position[0]} D\n{color_position[1]} S\n")
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the file
with open('vase.in', 'r') as fin:
    n = int(fin.readline().strip())
    actions = [fin.readline().strip().split() for _ in range(n)]
    x = int(fin.readline().strip())

# Prepare variables to track the heights of liquids in both sides
left_height, right_height = 0, 0
# Array to keep positions of each color
color_positions = np.zeros((n, 4), dtype=np.int32)

# Process each liquid
for i, (vol, side) in enumerate(actions):
    vol = int(vol)
    side = 0 if side == 'S' else 1  # Convert side to 0 for left, 1 for right
    if side == 0:
        # If liquid is poured into the left side
        color_positions[i, :2] = [left_height, left_height + vol]
        left_height += vol
    else:
        # If liquid is poured into the right side
        color_positions[i, 2:] = [right_height, right_height + vol]
        right_height += vol

    # Balance the heights if needed
    if left_height < right_height:
        left_height = right_height
    elif right_height < left_height:
        right_height = left_height

# The maximum height is the maximum of both heights after all liquids have been poured
max_height = max(left_height, right_height)

# Find the color x position
x_position = color_positions[x - 1]

# Prepare the output data
output_lines = [str(max_height)]
if x_position[0] == x_position[2]:
    # If the color is on the same level on both sides
    output_lines.append(f"{x_position[0]} S")
    output_lines.append(f"{x_position[2]} D")
else:
    # If the color is laid out on a single side
    if x_position[0] != 0:
        output_lines.append(f"{x_position[0]} S")
        output_lines.append(f"{x_position[1]} S")
    else:
        output_lines.append(f"{x_position[2]} D")
        output_lines.append(f"{x_position[3]} D")

# Write the results to the file
with open('vase.out', 'w') as fout:
    fout.write('\n'.join(output_lines))
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the data from the file
    with open('vase.in', 'r') as fin:
        n = int(fin.readline().strip())
        liquids = [fin.readline().strip().split() for _ in range(n)]
        x = int(fin.readline().strip())

    # Initialize the heights for both sides of the vase
    left_height = right_height = 0
    # Arrays to hold the start and end heights of each liquid
    left_liquid_heights = np.zeros((n, 2), dtype=int)
    right_liquid_heights = np.zeros((n, 2), dtype=int)

    # Process each liquid
    for i, (vol, side) in enumerate(liquids):
        vol = int(vol)
        if side == 'S':
            # Pour the liquid on the left side
            left_liquid_heights[i] = [left_height, left_height + vol]
            left_height += vol
        else:
            # Pour the liquid on the right side
            right_liquid_heights[i] = [right_height, right_height + vol]
            right_height += vol
        # Balance the heights
        if left_height < right_height:
            left_height = right_height
        elif right_height < left_height:
            right_height = left_height

    # The requested liquid's positions
    requested_liquid_left = left_liquid_heights[x - 1]
    requested_liquid_right = right_liquid_heights[x - 1]

    # Max height is the maximum of both heights
    max_height = max(left_height, right_height)

    # Write the results to the file
    with open('vase.out', 'w') as fout:
        fout.write(f"{max_height}\n")
        if requested_liquid_left[1] > 0:
            fout.write(f"{requested_liquid_left[0]} S\n{requested_liquid_left[1]} S\n")
        else:
            fout.write(f"{requested_liquid_right[0]} D\n{requested_liquid_right[1]} D\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution using numpy and memory optimization

import numpy as np

# Load input
with open('vase.in', 'r') as file:
    n = int(file.readline())
    operations = [file.readline().split() for _ in range(n)]
    x_color = int(file.readline())

# Initialize branches
left_branch = right_branch = 0
positions = np.zeros((n, 2), dtype=np.int32)

# Loop through operations and fill branches accordingly
for index, (volume_str, branch) in enumerate(operations):
    volume = int(volume_str)
    if branch == 'S':
        positions[index] = [left_branch, left_branch + volume // 2, right_branch, right_branch + volume // 2]
        left_branch += volume // 2
        right_branch += volume // 2
    else:
        positions[index] = [right_branch, right_branch + volume // 2, left_branch, left_branch + volume // 2]
        right_branch += volume // 2
        left_branch += volume // 2

    # Balance branches if needed
    if left_branch < right_branch:
        left_branch = right_branch
    elif right_branch < left_branch:
        right_branch = left_branch

# Get the max height and the position of the x_color
max_height = max(left_branch, right_branch)
x_position = positions[x_color - 1]

# Open output file and write results
with open('vase.out', 'w') as file:
    file.write(f"{max_height}\n")
    
    # Check if color is split between branches
    if x_position[0] == x_position[2]:
        file.write(f"{x_position[0]} S\n{x_position[2]} D\n")
    else:
        # Determine if the color is in the left or right branch
        branch_letter = 'S' if x_position[0] < x_position[2] else 'D'
        lower_position = min(x_position[0], x_position[2])
        higher_position = max(x_position[1], x_position[3])
        file.write(f"{lower_position} {branch_letter}\n{higher_position} {branch_letter}\n")
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to process the vase experiment and write output
def process_vase_experiment():
    with open('vase.in', 'r') as fin:
        n = int(fin.readline().strip())
        operations = [fin.readline().split() for _ in range(n)]
        x = int(fin.readline().strip())

    # Initialize the liquid heights for both sides
    left_height = 0
    right_height = 0
    
    # Initialize numpy arrays for storing heights
    heights = np.zeros((n, 2), dtype=int)
    
    # Process each operation
    for i, (volume_str, side) in enumerate(operations):
        volume = int(volume_str)
        if side == 'S':
            # Add volume to the left side
            heights[i] = [left_height, left_height + volume]
            left_height += volume
        else:
            # Add volume to the right side
            heights[i] = [right_height, right_height + volume]
            right_height += volume
        
        # Balance the heights
        max_height = max(left_height, right_height)
        left_height = right_height = max_height
    
    # Retrieve the positions for the color x
    x_position = heights[x-1]
    left_side = 'S' if x_position[0] == left_height else 'D'
    right_side = 'D' if x_position[1] == right_height else 'S'
    
    with open('vase.out', 'w') as fout:
        fout.write(f"{max_height}\n")
        # If the liquid spans both vases, we record the lower height first
        if left_side != right_side:
            fout.write(f"{min(x_position)} S\n{max(x_position)} D\n")
        else:
            # Otherwise, record the position in the side where the liquid was poured
            fout.write(f"{x_position[0]} {left_side}\n{x_position[1]} {right_side}\n")

# Call the function to process the experiment
process_vase_experiment()
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy for efficient array handling
import numpy as np

# Reading from the input file
with open('vase.in', 'r') as file:
    n = int(file.readline().strip())  # Number of liquids
    # Read volumes and branches for each liquid
    liquids = [file.readline().strip().split() for _ in range(n)]
    x = int(file.readline().strip())  # The color x to find

# Prepare arrays for left and right branch heights
left_branch_heights = np.zeros(n, dtype=int)
right_branch_heights = np.zeros(n, dtype=int)
max_height = 0  # Variable to keep track of the maximum height reached

# Process each liquid
for i, (volume, branch) in enumerate(liquids):
    volume = int(volume)
    if branch == 'S':  # If the liquid is poured on the left branch
        left_branch_heights[i] = max_height + volume
        right_branch_heights[i] = max_height
    else:  # If the liquid is poured on the right branch
        right_branch_heights[i] = max_height + volume
        left_branch_heights[i] = max_height
    # Update the maximum height
    max_height += volume // 2

# Find the positions for the liquid with color x
x_left_position = left_branch_heights[x - 1]
x_right_position = right_branch_heights[x - 1]

# Determine the output: max height and positions of color x
output = [str(max_height)]
if x_left_position == x_right_position:  # Liquid x is at the same level in both branches
    output.append(f"{x_left_position - volume // 2} S")
    output.append(f"{x_right_position - volume // 2} D")
else:  # Liquid x is only in one branch
    if x_left_position > x_right_position:  # Liquid x is in the left branch
        output.append(f"{x_left_position - volume // 2} S")
        output.append(f"{x_left_position} S")
    else:  # Liquid x is in the right branch
        output.append(f"{x_right_position - volume // 2} D")
        output.append(f"{x_right_position} D")

# Writing to the output file
with open('vase.out', 'w') as file:
    file.write('\n'.join(output))
```
```
---------- user ----------


Expected program to write result to `vase.out` and read from `vase.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy for efficient array handling
import numpy as np

# Define constants for branch identification
LEFT, RIGHT = 0, 1

# Define structure for liquid volume and branch
dtype = [('volume', int), ('branch', int)]

# Reading from the input file
with open('vase.in', 'r') as file:
    n = int(file.readline().strip())  # Number of liquids
    liquids_info = [file.readline().strip().split() for _ in range(n)]
    x = int(file.readline().strip())  # The color x to find

# Create structured array to hold volume and branch info
liquids = np.array([(int(volume), LEFT if branch == 'S' else RIGHT) for volume, branch in liquids_info], dtype=dtype)

# Initialize counters for both branches
left_counter = right_counter = 0

# Process the liquids and record the gradations
gradations = np.zeros((n, 2), dtype=int)  # Store gradations for each color
for i, (volume, branch) in enumerate(liquids):
    if branch == LEFT:
        gradations[i] = [left_counter, left_counter + volume]
        left_counter += volume
    else:
        gradations[i] = [right_counter, right_counter + volume]
        right_counter += volume

# Balance the counters to reflect the connected vessels principle
max_level = max(left_counter, right_counter)

# Find the gradations for the requested color
requested_gradations = gradations[x - 1]

# Prepare the output information
output_lines = [
    str(max_level),
    f"{requested_gradations[0]} {'S' if liquids[x - 1]['branch'] == LEFT else 'D'}",
    f"{requested_gradations[1]} {'S' if liquids[x - 1]['branch'] == LEFT else 'D'}"
]

# Write output to the file
with open('vase.out', 'w') as fout:
    fout.write('\n'.join(output_lines))
```
```
