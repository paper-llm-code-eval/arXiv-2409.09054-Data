---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from heapq import heappop, heappush

# Read from file
with open('rover.in', 'r') as file:
    lines = file.readlines()

# Parse input
V = int(lines[0].strip())
N = int(lines[1].split()[0])

# Initialize
rover_map = np.zeros((N, N), dtype=int)
for i in range(N):
    rover_map[i] = np.array(lines[i + 2].strip().split(), dtype=int)

# Write to file
with open('rover.out', 'w') as file:
    if V == 1:
        G = int(lines[1].split()[1])

        def dijkstra(grid, weight):
            n = len(grid)
            dangerous_zones = np.full((n, n), np.inf)
            dangerous_zones[0, 0] = 0
            pq = [(0, 0, 0)]  # cost, x, y
            directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
            while pq:
                cost, x, y = heappop(pq)
                if x == y == n - 1:
                    return cost
                for dx, dy in directions:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx < n and 0 <= ny < n:
                        new_cost = cost + (grid[nx, ny] < weight)
                        if new_cost < dangerous_zones[nx, ny]:
                            dangerous_zones[nx, ny] = new_cost
                            heappush(pq, (new_cost, nx, ny))
            return dangerous_zones[n - 1, n - 1]

        file.write(str(dijkstra(rover_map, G)) + '\n')

    elif V == 2:
        def find_max_weight(grid):
            n = len(grid)
            low, high = 1, 10000
            while low < high:
                mid = (low + high + 1) // 2
                if dijkstra(grid, mid) == 0:
                    low = mid
                else:
                    high = mid - 1
            return low
        
        file.write(str(find_max_weight(rover_map)) + '\n')
```
```
---------- user ----------


Expected program to write result to `rover.out` and read from `rover.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    V = int(lines[0].strip())
    if V == 1:
        N, G = map(int, lines[1].strip().split())
    else:
        N = int(lines[1].strip())
        G = None
    terrain = np.array([list(map(int, line.strip().split())) for line in lines[2:N+2]], dtype=int)
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(f"{result}\n")

def dijkstra(grid, weight):
    N = grid.shape[0]
    visited = np.zeros((N, N), dtype=bool)
    danger = np.full((N, N), np.inf)
    danger[0, 0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x, y]:
            continue
        visited[x, y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N:
                new_danger_crossed = danger_crossed + (grid[newX, newY] < weight)
                if not visited[newX, newY] and new_danger_crossed < danger[newX, newY]:
                    danger[newX, newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return np.inf

def find_max_weight(grid):
    def is_path_free_of_danger(weight):
        return dijkstra(grid, weight) == 0

    min_weight, max_weight = 1, grid.min()
    while min_weight < max_weight:
        mid_weight = (min_weight + max_weight + 1) // 2
        if is_path_free_of_danger(mid_weight):
            min_weight = mid_weight
        else:
            max_weight = mid_weight - 1
    return min_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G)
    else:  # V == 2
        result = find_max_weight(terrain)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```
This solution reads the input from `rover.in` and writes the output to `rover.out` as required. It uses NumPy for efficient array manipulation and a Dijkstra-based algorithm for pathfinding. For task 1, it calculates the minimum dangerous zones crossed, and for task 2, it finds the maximum weight the rover can have without crossing any dangerous zones. The memory usage is kept low by using in-place operations and ensuring not to create large temporary arrays.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the environment does not have the `numpy` module, I will rewrite the solution to not use `numpy` or any other third-party modules and rely solely on Python's standard library.

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    V = int(lines[0].strip())
    if V == 1:
        N, G = map(int, lines[1].strip().split())
    else:
        N = int(lines[1].strip())
        G = None
    terrain = [list(map(int, line.strip().split())) for line in lines[2:N+2]]
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(grid, weight, N):
    visited = [[False] * N for _ in range(N)]
    danger = [[float('inf')] * N for _ in range(N)]
    danger[0][0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N:
                new_danger_crossed = danger_crossed + (grid[newX][newY] < weight)
                if not visited[newX][newY] and new_danger_crossed < danger[newX][newY]:
                    danger[newX][newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return float('inf')

def find_max_weight(grid, N):
    def is_path_free_of_danger(weight):
        return dijkstra(grid, weight, N) == 0

    min_weight, max_weight = 1, min(min(row) for row in grid)
    while min_weight < max_weight:
        mid_weight = (min_weight + max_weight + 1) // 2
        if is_path_free_of_danger(mid_weight):
            min_weight = mid_weight
        else:
            max_weight = mid_weight - 1
    return min_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G, N)
    else:  # V == 2
        result = find_max_weight(terrain, N)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```

In this solution, we have avoided using `numpy`. We have used a list of lists to represent the grid and the standard library's `heapq` module for the priority queue functionality. The rest of the logic remains the same, using the Dijkstra algorithm for task 1 and binary search combined with Dijkstra for task 2. The solution reads from `rover.in` and writes to `rover.out` as per the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```
Expected output:
```
2
```
Found output:
```
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy in the results for task 2 suggests that our binary search for finding the maximum weight is not correctly implemented. The boundary condition for the binary search loop is incorrect; it should continue while `min_weight <= max_weight` instead of `min_weight < max_weight` because if the range is reduced to a single element, we still need to check that element.

Let's fix that issue in the `find_max_weight` function:

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    V = int(lines[0].strip())
    if V == 1:
        N, G = map(int, lines[1].strip().split())
    else:
        N = int(lines[1].strip())
        G = None
    terrain = [list(map(int, line.strip().split())) for line in lines[2:N+2]]
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(grid, weight, N):
    visited = [[False] * N for _ in range(N)]
    danger = [[float('inf')] * N for _ in range(N)]
    danger[0][0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N:
                new_danger_crossed = danger_crossed + (grid[newX][newY] < weight)
                if not visited[newX][newY] and new_danger_crossed < danger[newX][newY]:
                    danger[newX][newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return float('inf')

def find_max_weight(grid, N):
    def is_path_free_of_danger(weight):
        return dijkstra(grid, weight, N) == 0

    min_weight, max_weight = 1, min(min(row) for row in grid)
    while min_weight <= max_weight:
        mid_weight = (min_weight + max_weight) // 2
        if is_path_free_of_danger(mid_weight):
            min_weight = mid_weight + 1
        else:
            max_weight = mid_weight - 1
    return max_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G, N)
    else:  # V == 2
        result = find_max_weight(terrain, N)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```

The `find_max_weight` function now correctly performs the binary search to find the maximum weight the rover can have without crossing any dangerous zones. The `write_output` function writes the result to `rover.out`. This should produce the correct output specified in the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```
Expected output:
```
2
```
Found output:
```
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The bug seems to be in the `find_max_weight` function. The issue is with the initialization of `max_weight` which is set to the minimum value of all the terrain cells. However, the correct approach should be to start with the maximum value found in the grid because we are searching for the heaviest weight that can cross without danger. Moreover, the grid maximum should be determined by considering all elements in the grid, not by taking the minimum of the row minimums.

Let's correct this and rewrite the solution:

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    V = int(lines[0].strip())
    N = int(lines[1].strip())
    G = None
    if V == 1:
        _, G = map(int, lines[1].strip().split())
    terrain = [list(map(int, line.strip().split())) for line in lines[2:2+N]]
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(grid, weight, N):
    visited = [[False] * N for _ in range(N)]
    danger = [[float('inf')] * N for _ in range(N)]
    danger[0][0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N and not visited[newX][newY]:
                new_danger_crossed = danger_crossed + (grid[newX][newY] < weight)
                if new_danger_crossed < danger[newX][newY]:
                    danger[newX][newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return float('inf')

def find_max_weight(grid, N):
    min_weight, max_weight = 1, max(max(row) for row in grid)
    while min_weight <= max_weight:
        mid_weight = (min_weight + max_weight) // 2
        if dijkstra(grid, mid_weight, N) == 0:  # Path is free of danger at this weight
            min_weight = mid_weight + 1
        else:
            max_weight = mid_weight - 1
    return max_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G, N)
    elif V == 2:
        result = find_max_weight(terrain, N)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```

The `find_max_weight` function now starts with the correct range for the binary search, using the maximum value in the terrain grid as the initial upper bound. The `dijkstra` function checks for a path free of dangerous zones given a specific weight. This should produce the correct output and find the maximum weight the rover can have to cross without entering any dangerous zones.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 60, in <module>
    rover_mission('rover.in', 'rover.out')
  File "/app/app.py", line 52, in rover_mission
    V, N, G, terrain = read_input(input_file)
                       ^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 7, in read_input
    N = int(lines[1].strip())
        ^^^^^^^^^^^^^^^^^^^^^
ValueError: invalid literal for int() with base 10: '5 5'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

There is a logical error in the `read_input` function. The issue is that when `V` is `1`, there are two numbers on the second line (`N` and `G`), but the current code is trying to parse it as if there is only one number when `V` is `2`. We need to parse `N` and `G` correctly based on the value of `V`.

Let's fix the `read_input` function by adjusting the parsing logic for `N` and `G` based on `V`:

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        V = int(next(file).strip())
        if V == 1:
            N, G = map(int, next(file).strip().split())
        else:  # V == 2
            N = int(next(file).strip())
            G = None
    terrain = [list(map(int, line.strip().split())) for line in file]
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(grid, weight, N):
    visited = [[False] * N for _ in range(N)]
    danger = [[float('inf')] * N for _ in range(N)]
    danger[0][0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N and not visited[newX][newY]:
                new_danger_crossed = danger_crossed + (grid[newX][newY] < weight)
                if new_danger_crossed < danger[newX][newY]:
                    danger[newX][newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return float('inf')

def find_max_weight(grid, N):
    min_weight, max_weight = 1, max(max(row) for row in grid)
    while min_weight <= max_weight:
        mid_weight = (min_weight + max_weight) // 2
        if dijkstra(grid, mid_weight, N) == 0:  # Path is free of danger at this weight
            min_weight = mid_weight + 1
        else:
            max_weight = mid_weight - 1
    return max_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G, N)
    elif V == 2:
        result = find_max_weight(terrain, N)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```
This code ensures that it reads `N` and `G` appropriately depending on the task `V`. If `V` is `1`, both `N` and `G` are read from the second line of the input file. If `V` is `2`, only `N` is read, and `G` is set to `None`. It then reads the terrain grid and proceeds with the computation logic as before.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 60, in <module>
    rover_mission('rover.in', 'rover.out')
  File "/app/app.py", line 52, in rover_mission
    V, N, G, terrain = read_input(input_file)
                       ^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 11, in read_input
    terrain = [list(map(int, line.strip().split())) for line in file]
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error occurs because the file is closed before the terrain data is read. This is happening due to the incorrect use of the `with` statement, which automatically closes the file before the terrain parsing is done. We need to make sure that the entire reading of the file is within the context of the `with` block.

Let's fix it by ensuring that the entire input reading process occurs within the context manager:

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        V = int(file.readline().strip())
        if V == 1:
            N, G = map(int, file.readline().strip().split())
        else:  # V == 2
            N = int(file.readline().strip())
            G = None
        terrain = [list(map(int, line.strip().split())) for line in file.readlines()]
    return V, N, G, terrain

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(grid, weight, N):
    visited = [[False] * N for _ in range(N)]
    danger = [[float('inf')] * N for _ in range(N)]
    danger[0][0] = 0
    queue = [(0, 0, 0)]  # (danger zones crossed, x, y)

    while queue:
        danger_crossed, x, y = heappop(queue)
        if (x, y) == (N - 1, N - 1):
            return danger_crossed
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            newX, newY = x + dx, y + dy
            if 0 <= newX < N and 0 <= newY < N and not visited[newX][newY]:
                new_danger_crossed = danger_crossed + (grid[newX][newY] < weight)
                if new_danger_crossed < danger[newX][newY]:
                    danger[newX][newY] = new_danger_crossed
                    heappush(queue, (new_danger_crossed, newX, newY))
    return float('inf')

def find_max_weight(grid, N):
    min_weight, max_weight = 1, max(max(row) for row in grid)
    while min_weight <= max_weight:
        mid_weight = (min_weight + max_weight) // 2
        if dijkstra(grid, mid_weight, N) == 0:  # Path is free of danger at this weight
            min_weight = mid_weight + 1
        else:
            max_weight = mid_weight - 1
    return max_weight

def rover_mission(input_file, output_file):
    V, N, G, terrain = read_input(input_file)
    if V == 1:
        result = dijkstra(terrain, G, N)
    elif V == 2:
        result = find_max_weight(terrain, N)
    write_output(output_file, result)

# Call the main function with the appropriate file names.
rover_mission('rover.in', 'rover.out')
```

Now the terrain parsing is done within the context of the `with` block, and this should fix the `ValueError: I/O operation on closed file.` error. This code should now correctly read the input file, calculate the result based on the task, and write the output to the specified output file.
