{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/888/2024-06-03T10:26:59.875Z-03002.log",
  "attemptStart": 1717410419.875,
  "attemptEnd": 1717410538.086,
  "attemptDuration": 118.21099996566772,
  "code": "from heapq import heappop, heappush\nfrom collections import deque\n\n# Define the directions in which the rover can move: North, East, South, West\ndirections = [(-1, 0), (0, 1), (1, 0), (0, -1)]\n\n# Read the input data from rover.in\nwith open('rover.in') as f:\n    V = int(f.readline().strip())\n    if V == 1:\n        N, G = map(int, f.readline().strip().split())\n    elif V == 2:\n        N = int(f.readline().strip())\n    A = [list(map(int, f.readline().strip().split())) for _ in range(N)]\n\n# BFS to find the path with minimum dangerous zones\ndef find_min_danger_zones(N, G, A):\n    visited = [[False]*N for _ in range(N)]\n    queue = [(0, 0, 0)]  # (danger_zones, row, col)\n\n    while queue:\n        danger_zones, row, col = heappop(queue)\n        if (row, col) == (N-1, N-1):\n            return danger_zones\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n\n        for d_row, d_col in directions:\n            next_row, next_col = row + d_row, col + d_col\n            if 0 <= next_row < N and 0 <= next_col < N and not visited[next_row][next_col]:\n                next_danger = danger_zones + (A[next_row][next_col] < G)\n                heappush(queue, (next_danger, next_row, next_col))\n\n    return danger_zones\n\n# Binary search combined with BFS to find the maximum weight the rover can have without encountering any dangerous zones\ndef find_max_safe_weight(N, A):\n    # Check if a path exists that supports the given weight\n    def can_support_weight(weight):\n        queue = deque([(0, 0)])\n        visited = [[False]*N for _ in range(N)]\n        visited[0][0] = True\n        while queue:\n            row, col = queue.popleft()\n            if (row, col) == (N-1, N-1):\n                return True\n            for d_row, d_col in directions:\n                next_row, next_col = row + d_row, col + d_col\n                if 0 <= next_row < N and 0 <= next_col < N:\n                    if not visited[next_row][next_col] and A[next_row][next_col] >= weight:\n                        visited[next_row][next_col] = True\n                        queue.append((next_row, next_col))\n        return False\n\n    # Perform binary search to find the maximum weight\n    low, high = 1, max(max(row) for row in A)\n    while low < high:\n        mid = (low + high + 1) // 2\n        if can_support_weight(mid):\n            low = mid\n        else:\n            high = mid - 1\n    return low\n\n# Write the result to rover.out\nwith open('rover.out', 'w') as f:\n    if V == 1:\n        result = find_min_danger_zones(N, G, A)\n        f.write(f\"{result}\\n\")\n    elif V == 2:\n        result = find_max_safe_weight(N, A)\n        f.write(f\"{result}\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5036,
  "metadata": {
    "id": 888,
    "examples": [
      {
        "in": "1\n5 5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "2",
        "explainer": ""
      }
    ],
    "body": "NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.\n\n# Cerințe\n\n1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.\n2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.\n\n# Date de intrare\n\n\nPe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.\nPe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. \n\n# Date de ieșire\n\n\nFișierul de ieșire este `rover.out`.\n\nDacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.\n\nDacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.\n\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 500$\n* $1 \\leq G \\leq 5 \\ 000$\n* $1 \\leq A_{ij} \\leq 10 \\ 000$\n* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.\n* Roverul nu va trece de mai multe ori prin aceeași zonă.\n\n\n| $V$ | Punctaj |\n| - | ------- |\n| $1$ | 45      |\n| $2$ | 45      |",
    "header": {
      "problem_id": 888,
      "problem_name": "Rover",
      "tags": "[Binary Search, Deque, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.35,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "rover.in",
      "output_filename": "rover.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 X: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "rover.in",
      "output": "rover.out"
    },
    "consoleInteraction": false
  }
}