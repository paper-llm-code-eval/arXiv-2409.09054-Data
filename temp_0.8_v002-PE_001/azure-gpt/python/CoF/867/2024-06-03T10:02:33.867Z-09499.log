---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `palindrom.in` and write to `palindrom.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.

Similar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.

Mai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.

# Cerință

Scrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:

1. câte dintre cele $n$ numere sunt palindrom;
2. câte dintre cele $n$ numere sunt aproape palindrom;
3. palindromurile asociate pentru cele $n$ numere citite.

# Date de intrare

Fișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `palindrom.out`:

* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;
* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;
* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.

---

Example:
`palindrom.in`
```
1
7
1221 500 53635 505 7 4004 1410
```

`palindrom.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_almost_palindrome(num):
    num_str = str(num)
    diff_count = sum(1 for i in range(len(num_str)//2) if num_str[i] != num_str[-(i + 1)])
    return diff_count == 1

def next_palindrome(num):
    num_str = str(num)
    length = len(num_str)
    half = num_str[:length//2]
    if length % 2 == 0:
        palindrome = half + half[::-1]
    else:
        palindrome = half + num_str[length//2] + half[::-1]
    palindrome = int(palindrome)
    if palindrome > num:
        return palindrome
    if length % 2 == 0:
        half = str(int(half) + 1)
        return next_palindrome(int(half + '0' * (length//2)))
    else:
        half_plus_one = str(int(half + num_str[length//2]) + 1)
        return next_palindrome(int(half_plus_one + '0' * (length//2)))

def process_file():
    with open('palindrom.in', 'r') as fin:
        C = int(fin.readline().strip())
        n = int(fin.readline().strip())
        numbers = np.fromstring(fin.readline().strip(), dtype=int, sep=' ')
    
    if C == 1:
        result = sum(1 for num in numbers if is_palindrome(num))
    elif C == 2:
        result = sum(1 for num in numbers if not is_palindrome(num) and is_almost_palindrome(num))
    elif C == 3:
        result = [next_palindrome(num) for num in numbers]

    with open('palindrom.out', 'w') as fout:
        if C == 3:
            fout.write(' '.join(map(str, result)))
        else:
            fout.write(str(result))

process_file()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_almost_palindrome(num):
    num_str = str(num)
    diff_count = sum(1 for i in range(len(num_str)//2) if num_str[i] != num_str[-(i + 1)])
    return diff_count == 1

def next_palindrome(num):
    num_str = str(num)
    length = len(num_str)
    mid = (length - 1) // 2
    if is_palindrome(num_str):
        mid_num = int(num_str[mid]) + 1
        num_str = num_str[:mid] + str(mid_num) + num_str[mid+1:]
        num = int(num_str)
    # Make the first half of the string a palindrome with the second half
    first_half = num_str[:length//2]
    new_num_str = first_half + first_half[::-1]
    new_num = int(new_num_str)
    # If the new palindrome is not greater, increment the middle digit(s)
    if new_num <= num:
        if length % 2 == 0:
            first_half = str(int(first_half) + 1)
        else:
            first_half = str(int(first_half + num_str[mid]) + 1)[:mid+1]
        new_num_str = first_half + first_half[:mid][::-1]
        new_num = int(new_num_str)
    return new_num

def process_file():
    with open('palindrom.in', 'r') as fin:
        C = int(fin.readline().strip())
        n = int(fin.readline().strip())
        numbers = np.fromstring(fin.readline().strip(), dtype=np.int32, sep=' ')
    
    palindromes_count = np.sum(np.vectorize(is_palindrome)(numbers))
    almost_palindromes_count = np.sum(np.vectorize(is_almost_palindrome)(numbers) & ~np.vectorize(is_palindrome)(numbers))
    next_palindromes = np.vectorize(next_palindrome)(numbers)

    with open('palindrom.out', 'w') as fout:
        if C == 1:
            fout.write(f"{palindromes_count}\n")
        elif C == 2:
            fout.write(f"{almost_palindromes_count}\n")
        elif C == 3:
            fout.write(' '.join(map(str, next_palindromes)) + '\n')

process_file()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def is_palindrome(num_str):
    return num_str == num_str[::-1]

def is_almost_palindrome(num_str):
    diff_count = 0
    length = len(num_str)
    for i in range(length // 2):
        if num_str[i] != num_str[-(i + 1)]:
            diff_count += 1
            if diff_count > 1:
                return False
    return diff_count == 1

def next_palindrome(num_str):
    length = len(num_str)
    middle = length // 2
    left_half = num_str[:middle]
    middle_digit = num_str[middle] if length % 2 else ''
    right_half = left_half[::-1]
    candidate = int(left_half + middle_digit + right_half)
    if candidate > int(num_str):
        return str(candidate)
    if length % 2:
        if middle_digit != '9':
            return left_half + str(int(middle_digit)+1) + right_half
        else:
            left_half = str(int(left_half) + 1)
            return next_palindrome(left_half + '0' + left_half[::-1])
    else:
        left_half = str(int(left_half) + 1)
        return next_palindrome(left_half + left_half[::-1])

def process_file():
    with open('palindrom.in', 'r') as fin:
        C = int(fin.readline().strip())
        n = int(fin.readline().strip())
        numbers = np.fromstring(fin.readline().strip(), dtype=np.int64, sep=' ')
    
    results = []
    if C == 1:
        results.append(str(np.sum(np.vectorize(lambda x: is_palindrome(str(x)))(numbers))))
    elif C == 2:
        results.append(str(np.sum(np.vectorize(lambda x: not is_palindrome(str(x)) and is_almost_palindrome(str(x)))(numbers))))
    elif C == 3:
        results.extend(map(lambda x: next_palindrome(str(x)), numbers))

    with open('palindrom.out', 'w') as fout:
        fout.write(' '.join(results) + '\n')

process_file()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def is_palindrome(number):
    s = str(number)
    return s == s[::-1]

def is_almost_palindrome(number):
    s = str(number)
    mismatches = 0
    for i in range(len(s) // 2):
        if s[i] != s[-(i + 1)]:
            mismatches += 1
            if mismatches > 1:
                return False
    return mismatches == 1

def find_next_palindrome(number):
    s = str(number)
    length = len(s)
    if length == 1:
        return str(int(s) + 1)
    midpoint = length // 2
    left = s[:midpoint]
    middle = s[midpoint] if length % 2 else ''
    right = s[midpoint + length%2:]
    if right < left[::-1] or (middle and right <= left[::-1]):
        return left + middle + left[::-1]
    if length % 2:
        if middle != '9':
            return left + str(int(middle) + 1) + left[::-1]
        else:
            return find_next_palindrome(str(int(left + '0' + left[::-1]) + 1))
    else:
        inc_left = str(int(left) + 1)
        return inc_left + inc_left[::-1]

def process_input(C, numbers):
    if C == 1:
        palindromes = sum(is_palindrome(num) for num in numbers)
        return str(palindromes)
    elif C == 2:
        almost_palindromes = sum(is_almost_palindrome(num) for num in numbers)
        return str(almost_palindromes)
    elif C == 3:
        return ' '.join(find_next_palindrome(num) for num in numbers)

def process_file():
    with open('palindrom.in', 'r') as fin:
        C = int(next(fin).strip())
        n = int(next(fin).strip())
        numbers = np.fromstring(next(fin).strip(), dtype=np.int64, sep=' ')

    result = process_input(C, numbers)

    with open('palindrom.out', 'w') as fout:
        fout.write(result + '\n')

process_file()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_almost_palindrome(num):
    num_str = str(num)
    differences = 0
    length = len(num_str)
    for i in range(length // 2):
        if num_str[i] != num_str[-(i + 1)]:
            differences += 1
            if differences > 1:
                return False
    return differences == 1

def next_palindrome(num):
    num_str = str(num)
    length = len(num_str)
    half = num_str[:length//2]
    odd_mid = num_str[length//2] if length % 2 else ''
    if odd_mid:
        new_num = int(half + odd_mid + half[::-1])
        if new_num > num:
            return new_num
        if odd_mid != '9':
            return int(half + str(int(odd_mid)+1) + half[::-1])
        else:
            return next_palindrome(int(half + '0' + half[::-1]))
    else:
        new_num = int(half + half[::-1])
        if new_num > num:
            return new_num
        half = str(int(half) + 1).zfill(length//2)
        return int(half + half[::-1])

def process_palindrom():
    with open('palindrom.in', 'r') as file:
        C = int(file.readline().strip())
        n = int(file.readline().strip())
        numbers = list(map(int, file.readline().strip().split()))

    if C == 1:
        result = sum(is_palindrome(number) for number in numbers)
    elif C == 2:
        result = sum(is_almost_palindrome(number) for number in numbers)
    elif C == 3:
        result = [next_palindrome(number) for number in numbers]

    with open('palindrom.out', 'w') as file:
        if C == 3:
            file.write(' '.join(map(str, result)))
        else:
            file.write(str(result))

process_palindrom()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_almost_palindrome(num):
    num_str = str(num)
    mismatch = 0
    for i in range(len(num_str)//2):
        if num_str[i] != num_str[-1-i]:
            mismatch += 1
        if mismatch > 1:
            return False
    return mismatch == 1

def make_palindrome(num_str, left, increment_mid):
    length = len(num_str)
    middle = length // 2
    if increment_mid:
        new_mid = str(int(num_str[middle]) + 1) if length % 2 != 0 else ''
        if new_mid == '10':
            return make_palindrome(num_str, left + '0', True)
        return left + new_mid + left[::-1]
    return left + num_str[middle] * (length % 2) + left[::-1]

def next_palindrome(num):
    num_str = str(num)
    length = len(num_str)
    left_half = num_str[:(length + 1)//2]
    next_palin = make_palindrome(num_str, left_half, False)
    if int(next_palin) > num:
        return next_palin
    return make_palindrome(num_str, left_half, True)

def process_palindrom():
    with open('palindrom.in', 'r') as file:
        C = int(file.readline().strip())
        n = int(file.readline().strip())
        numbers = list(map(int, file.readline().strip().split()))

    count_palindrome = 0
    count_almost_palindrome = 0
    next_palindromes = []
    
    for number in numbers:
        if C == 1 and is_palindrome(number):
            count_palindrome += 1
        elif C == 2 and not is_palindrome(number) and is_almost_palindrome(number):
            count_almost_palindrome += 1
        elif C == 3:
            next_palindromes.append(next_palindrome(number))

    with open('palindrom.out', 'w') as file:
        if C == 1:
            file.write(f"{count_palindrome}\n")
        elif C == 2:
            file.write(f"{count_almost_palindrome}\n")
        elif C == 3:
            file.write(' '.join(next_palindromes) + '\n')

process_palindrom()
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_palindrome(number):
    return str(number) == str(number)[::-1]

def is_almost_palindrome(number):
    s = str(number)
    diffs = 0
    for i in range(len(s)//2):
        if s[i] != s[-(i+1)]:
            diffs += 1
            if diffs > 1:
                return False
    return diffs == 1

def next_palindrome(number):
    s = str(number)
    length = len(s)
    if is_palindrome(s):
        number += 1
        s = str(number)
        length = len(s)
    if length == 1:
        return number
    mid = length // 2
    inc = int(s[:mid + length % 2]) + 1
    inc_str = str(inc).zfill(mid + length % 2)
    next_pal = inc_str + inc_str[mid-1::-1] if length % 2 else inc_str + inc_str[::-1]
    return int(next_pal)

def process():
    with open('palindrom.in', 'r') as file_in:
        C = int(file_in.readline().strip())
        _ = int(file_in.readline().strip())
        numbers = list(map(int, file_in.readline().split()))

    result = []
    if C == 1:
        result.append(str(sum(is_palindrome(num) for num in numbers)))
    elif C == 2:
        result.append(str(sum(is_almost_palindrome(num) for num in numbers)))
    elif C == 3:
        result.extend(str(next_palindrome(num)) for num in numbers)

    with open('palindrom.out', 'w') as file_out:
        file_out.write(' '.join(result) + '\n')

process()
```
```
