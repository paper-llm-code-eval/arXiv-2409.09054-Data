---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cufere.in` and write to `cufere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[cufar.png|align=right|width=25%]

Alex, eroina din *Minecraft*, este foarte curajoasă și harnică. De-a lungul timpului, ea a depozitat în $n$ cufere tot felul de obiecte fragile (de exemplu ouă) sau dure (de exemplu pietre).

Un cufăr este o cutie de lemn cu $27$ de compartimente dispuse pe $3$ rânduri, câte $9$ pe fiecare rând. Într-un compartiment poate fi depozitat un grup de unul sau mai multe obiecte **identice**: maximum $16$ obiecte fragile sau maximum $64$ de obiecte dure. Pot fi mai multe compartimente care să conțină același tip de obiecte, iar unele compartimente pot fi goale.

Alex a etichetat atât compartimentele, cât și obiectele, cu numere construite după următoarea regulă:
* un obiect are drept etichetă un număr natural cuprins între $10$ și $99$, inclusiv, astfel: un număr prim, dacă este fragil, sau un număr compus, dacă este dur;
* toate obiectele identice primesc aceeași etichetă;
* un compartiment are drept etichetă un număr natural format din două valori alipite: numărul obiectelor din grupul depozitat în el, urmat de eticheta comună a acestora (de exemplu dacă eticheta compartimentului este $1994$, înseamnă că în el este depozitat un grup de $19$ obiecte, fiecare având eticheta $94$);
* compartimentele goale sunt etichetate cu $0$.

Alex vrea să **rearanjeze** obiectele din cufere, astfel încât:
* să fie valorificat spațiul, adică să fie ocupate cât mai puține cufere și, în cadrul unui cufăr, cât mai puține compartimente;
* să fie ocupate compartimentele din cuferele disponibile la rând, începând cu primul cufăr, și, în cadrul unui cufăr, începând cu primul rând și, în cadrul unui rând, de la stânga la dreapta. Cu alte cuvinte, se umple mai întâi cufărul $1$, începând cu rândul $1$, și pe fiecare rând de la stânga la dreapta, apoi cufărul al doilea, în aceeași manieră, și așa mai departe;
* obiectele sunt preluate în ordinea crescătoare a etichetelor și din totalul obiectelor identice se formează mai întâi grupuri cu număr maxim de obiecte, și doar ultimul grup poate fi, eventual, incomplet;
* fiecare din aceste grupuri se depozitează, pe măsura formării, în câte un compartiment al cufărului curențiar dacă acesta se umple, se trece la cufărul următor.

După rearanjarea obiectelor, compartimentele sunt etichetate din nou, după aceeași regulă.

# Cerință

Dându-se cele $n$ cufere, care conțin obiectele în ordinea inițială, Alex vă roagă să realizați un program care să determine:
1. pentru fiecare etichetă distinctă de obiect întâlnit în cele $n$ cufere, numărul total al obiectelor cu acea etichetă;
2. noile etichete ale compartimentelor care compun cele $n$ cufere, după rearanjarea obiectelor.

# Date de intrare

Fișierul de intrare `cufere.in` conține pe prima linie numărul $c$ reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural nenul $n$, cu semnificația din enunț, iar pe fiecare din următoarele $3n$ linii, câte $9$ numere, reprezentând etichetele inițiale ale compartimentelor aflate pe câte un rând al unui cufăr, în ordinea în care ele se află în cufere, de la primul cufăr, până la ultimul, în cadrul fiecărui cufăr de la primul rând până la al treilea, iar în cadrul fiecărui rând de la stânga la dreapta. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire

Fișierul `cufere.out` va conține fie răspunsul pentru cerința $1$ (dacă $c = 1$), fie răspunsul pentru cerința $2$ (dacă $c = 2$). 
\
Pentru cerința $1$, pentru fiecare etichetă distinctă, în ordine strict crescătoare, se va afișa o pereche formată din eticheta respectivă și numărul obiectelor cu această etichetă. Fiecare pereche de numere va fi afișată pe câte o linie.
\
Pentru cerința $2$, etichetele compartimentelor vor fi afișate corespunzător plasării lor în cufere, câte $9$ pe fiecare linie a fișierului, de la primul cufăr până la ultimul, în cadrul fiecărui cufăr de la primul rând până la al treilea, iar în cadrul fiecărui rând de la stânga la dreapta.
\
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Restricții și precizări
* $c \in \{1,2\}$;
* $1 \leq n \leq 10 \ 000$;
* Eticheta unui obiect este cuprinsă intre $10$ și $99$, inclusiv.
* În cazul cerinței $2$, se vor afișa etichetele pentru toate compartimentele, chiar dacă ele sunt goale sau provin din cufere complet goale.
* Pentru $40$ de puncte, $c = 1$;
* Pentru $60$ de puncte, $c = 2$.

---

Example:
`cufere.in`
```
1
2
1488 1573 1437 4465 1099 1073 0 499 765
537 1173 4288 1273 2299 1555 1241 655 841
1141 237 5621 199 921 621 3465 1315 4155
1099 341 4765 6155 355 1099 6088 3988 255
4955 155 1329 1932 3099 114 3020 855 5555
1173 1388 673 2533 1488 1473 4033 2099 2065
```

`cufere.out`
```
14 1
15 13
20 30
21 71
29 13
32 19
33 65
37 21
41 34
55 241
65 152
73 79
88 182
99 107
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def load_data(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    request, n = int(lines[0].strip()), int(lines[1].strip())
    data = np.array([list(map(int, line.split())) for line in lines[2:]], dtype=np.int32)
    return request, n, data

def save_data(filename, data):
    with open(filename, 'w') as file:
        for row in data:
            file.write(' '.join(map(str, row)) + '\n')

def count_objects(data):
    unique, counts = np.unique(data[data > 0], return_counts=True)
    object_counts = dict(zip(unique, counts))
    sorted_counts = sorted(object_counts.items())
    return np.array(sorted_counts, dtype=np.int32)

def rearrange_objects(n, data):
    etichete = data.flatten()
    sorted_etichete = np.sort(etichete[etichete > 0])
    etichete.fill(0)
    index = 0
    for et in sorted_etichete:
        count = 1
        et_label = et % 100
        if et_label in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]:
            max_count = 16
        else:
            max_count = 64
        while count <= max_count and index < etichete.size and et == sorted_etichete[index]:
            index += 1
            count += 1
        etichete[index-1] = (count-1) * 100 + et_label
    etichete = etichete.reshape((n * 3, 9))
    return etichete

request, n, data = load_data('cufere.in')

if request == 1:
    result = count_objects(data)
else:
    result = rearrange_objects(n, data)

save_data('cufere.out', result)
```

This Python code uses NumPy to efficiently handle large amounts of data. It works as follows:

1. `load_data()` reads the data from the input file `cufere.in` and returns the request type, the number of chests (n), and the data as a NumPy array.

2. `save_data()` writes the result to the output file `cufere.out`.

3. `count_objects()` creates a unique array of non-zero values from the input data, counts the occurrences of each unique value, and returns a sorted array of these counts.

4. `rearrange_objects()` takes the number of chests and the initial data, flattens the data, sorts non-zero etichete (tags), and refills the array considering the maximum count for fragile and hard objects, respectively. It then reshapes the array back into the format of the original chest data.

5. Based on the request type, the code either counts the objects or rearranges them, and then saves the result to the output file.

Please note that this code prioritizes memory efficiency and processing large data sets by leveraging NumPy's optimized operations, especially important given the memory limitations specified in the challenge.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the execution environment does not have the `numpy` module installed, which is why the `ModuleNotFoundError` was raised. However, the constraints of the problem specify that we need to optimize for both time and memory usage, and utilizing numpy would be ideal for this.

Given the error message, I'll write a solution without using `numpy` or any other external libraries. This will ensure that the code can run in environments where only the Python Standard Library is available.

Here's the updated solution:

```python
def load_data(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    request = int(lines[0].strip())
    data = [[int(num) for num in line.split()] for line in lines[2:]]
    return request, data

def save_data(filename, result):
    with open(filename, 'w') as file:
        for row in result:
            file.write(' '.join(str(num) for num in row) + '\n')

def count_objects(data):
    counts = {}
    for row in data:
        for value in row:
            if value > 0:  # Skip empty compartments
                key = value % 100
                counts[key] = counts.get(key, 0) + value // 100
    sorted_counts = sorted(counts.items())
    return [[k, v] for k, v in sorted_counts]

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def rearrange_objects(data):
    object_counts = {}
    for row in data:
        for value in row:
            if value > 0:
                key = value % 100
                object_counts[key] = object_counts.get(key, 0) + value // 100

    new_data = []
    for _ in range(len(data)):
        new_data.append([0] * 9)

    index = 0
    for label in sorted(object_counts.keys()):
        count = object_counts[label]
        compartment_size = 16 if is_prime(label) else 64

        while count > 0:
            current_count = min(compartment_size, count)
            new_data[index // 9][index % 9] = current_count * 100 + label
            index += 1
            count -= current_count

    return new_data

request, data = load_data('cufere.in')

if request == 1:
    result = count_objects(data)
else:
    result = rearrange_objects(data)

save_data('cufere.out', result)
```

This code performs similar operations to the previous one, but it only uses the Python Standard Library. It reads and writes data from files, counts objects, and rearranges them using Python's built-in functions and data structures. The rearrangement logic has been adjusted to work without NumPy, using nested lists instead of arrays. The `is_prime` function checks whether a number is prime, which is necessary to handle fragile objects differently from hard objects.
