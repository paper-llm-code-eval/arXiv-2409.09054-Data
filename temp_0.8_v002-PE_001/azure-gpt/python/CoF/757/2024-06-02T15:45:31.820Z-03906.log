---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `sudest.in` and write to `sudest.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fermierul Ion deţine un teren de formă pătrată, împărţit în $N \times N$ pătrate de latură unitate, pe care cultivă cartofi. Pentru recoltarea cartofilor fermierul foloseşte un robot special proiectat în acest scop. Robotul porneşte din pătratul din stânga sus, de coordonate $(1,1)$ şi trebuie să ajungă în pătratul din dreapta jos, de coordonate $(N,N)$. Traseul robotului este programat prin memorarea unor comenzi pe o cartelă magnetică. Fiecare comandă specifică direcţia de deplasare (sud sau est) şi  numărul de pătrate pe care le parcurge în direcţia respectivă. Robotul strânge recolta doar din pătratele în care se opreşte între două comenzi.

Din păcate, cartela pe care se află programul s-a deteriorat şi unitatea de citire a robotului nu mai poate distinge direcţia de deplasare, ci numai numărul de paşi pe care trebuie să-i facă robotul la fiecare comandă. Fermierul Ion trebuie să introducă manual, pentru fiecare comandă, direcţia de deplasare.

# Cerință

Scrieţi un program care să determine cantitatea maximă de cartofi pe care o poate culege robotul, în ipoteza în care Ion specifică manual, pentru fiecare comandă, direcţia urmată de robot. Se va determina şi traseul pe care se obţine la recolta maximă.

# Date de intrare

Fişierul de intrare `sudest.in` are următoarea structură:
* Pe linia $1$ se află  numărul natural $N$, reprezentând dimensiunea parcelei de teren.
* Pe următoarele $N$ linii se află câte $N$ numere naturale, separate prin spaţii, reprezentând cantitatea de cartofi din fiecare pătrat unitate.
* Pe linia $N+2$ se află un număr natural $K$ reprezentând numărul de comenzi aflate pe cartela magnetică.
* Pe linia $N+3$ se află $K$ numerele naturale $C_1,\dots,C_K$, separate prin spaţii, reprezentând numărul de paşi pe care trebuie să-i efectueze robotul la fiecare comandă.

# Date de ieșire

Fişierul de ieșire `sudest.out` va conţine pe prima linie cantitatea maximă de cartofi recoltată de robot. Pe următoarele $K+1$ linii vor fi scrise, în ordine, coordonatele pătratelor unitate ce constituie traseul pentru care se obţine cantitate maximă de cartofi, câte un pătrat unitate pe o linie. Coordonatele scrise pe aceeaşi linie vor fi separate printr-un spaţiu. Primul pătrat de pe traseu va avea coordonatele `1 1`, iar ultimul va avea coordonatele `N N`. Dacă sunt mai multe trasee pe care se obţine o cantitate maximă de cartofi recoltată se va afişa unul dintre acestea.

# Restricții și precizări

* $5 \leq N \leq 100$;
* $2 \leq K \leq 2 \cdot N - 2$;
* $1 \leq C_1, \dots, C_k \leq 10$;
* Cantitatea de cartofi dintr-un pătrat de teren este număr natural între $0$ şi $100$;
* Pentru fiecare set de date de intrare se garantează că există cel puţin un traseu;
* Se consideră că robotul strânge recolta şi din pătratul de plecare $(1,1)$ şi din cel de sosire $(N,N)$;
* Pentru determinarea corectă a cantităţii maxime recoltate se acordă $50\%$ din punctajul alocat testului respectiv; pentru cantitate maximă recoltată şi traseu corect se acordă $100\%$.

---

Example:
`sudest.in`
```
6
1 2 1 0 4 1
1 3 3 5 1 1
2 2 1 2 1 10
4 5 3 9 2 6
1 1 3 2 0 1
10 2 4 6 5 10
5
2 2 1 4 1
```

`sudest.out`
```
29
1 1
3 1
5 1
6 1
6 5
6 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        N = int(file.readline())
        field = np.array([list(map(int, file.readline().split())) for _ in range(N)])
        K = int(file.readline())
        moves = list(map(int, file.readline().split()))
    return N, field, K, moves

def write_output(filename, max_potatoes, path):
    with open(filename, 'w') as file:
        file.write(str(max_potatoes) + '\n')
        for coordinates in path:
            file.write(f"{coordinates[0]} {coordinates[1]}\n")

def max_potatoes_path(N, field, K, moves):
    move_combinations = [(0, 1), (1, 0)]  # east, south directions
    dp = np.zeros((N, N), dtype=int)
    dp[0][0] = field[0][0]
    move_trace = np.full((N, N, K + 1, 2), -1)
    
    for k in range(1, K + 1):
        for i in range(N):
            for j in range(N):
                for move_dir in move_combinations:
                    prev_i = i - moves[k - 1] * move_dir[0]
                    prev_j = j - moves[k - 1] * move_dir[1]
                    if 0 <= prev_i < N and 0 <= prev_j < N:
                        new_potatoes = dp[prev_i][prev_j] + field[i][j]
                        if new_potatoes > dp[i][j]:
                            dp[i][j] = new_potatoes
                            move_trace[i][j][k] = (prev_i + 1, prev_j + 1)  # store previous coordinates
    
    # Backtrack for the path
    max_potatoes = dp[N - 1][N - 1]
    path = [(N, N)]
    current_k = K
    while current_k > 0:
        path.append(move_trace[N - 1][N - 1][current_k])
        prev_coordinates = move_trace[N - 1][N - 1][current_k]
        N = prev_coordinates[0]
        N = prev_coordinates[1]
        current_k -= 1
    
    path.reverse()
    return max_potatoes, path

# Main execution
N, field, K, moves = read_input('sudest.in')
max_potatoes, path = max_potatoes_path(N, field, K, moves)
write_output('sudest.out', max_potatoes, path)
```

This python code provides an efficient solution for the given problem. It uses dynamic programming to find the path that the robot can take to collect the maximum number of potatoes. The `dp` array stores the maximum amount of potatoes that can be collected at each cell, given the number of moves up to that point. The `move_trace` array is used to backtrack the path taken to reach the maximum amount. The final path and the maximum amount of potatoes collected are written to the `sudest.out` file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code and standard error indicate that the `numpy` module is not installed or available in the environment where the code is being run. To resolve this issue, we need to rewrite the solution without using `numpy` or any other third-party libraries that are not part of the Python standard library.

Here is the rewritten solution using only built-in Python data structures:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        N = int(file.readline())
        field = [list(map(int, file.readline().split())) for _ in range(N)]
        K = int(file.readline())
        moves = list(map(int, file.readline().split()))
    return N, field, K, moves

def write_output(filename, max_potatoes, path):
    with open(filename, 'w') as file:
        file.write(str(max_potatoes) + '\n')
        for coordinates in path:
            file.write(f"{coordinates[0]} {coordinates[1]}\n")

def max_potatoes_path(N, field, K, moves):
    dp = [[0 for _ in range(N)] for _ in range(N)]
    dp[0][0] = field[0][0]
    move_trace = [[[-1, -1] for _ in range(K + 1)] for _ in range(N * N)]
    
    for k in range(1, K + 1):
        for i in range(N):
            for j in range(N):
                for move_dir in [(0, 1), (1, 0)]:  # east, south directions
                    prev_i = i - moves[k - 1] * move_dir[0]
                    prev_j = j - moves[k - 1] * move_dir[1]
                    if 0 <= prev_i < N and 0 <= prev_j < N:
                        new_potatoes = dp[prev_i][prev_j] + field[i][j]
                        if new_potatoes > dp[i][j]:
                            dp[i][j] = new_potatoes
                            move_trace[i * N + j][k] = [prev_i + 1, prev_j + 1]
    
    # Backtrack for the path
    max_potatoes = dp[N - 1][N - 1]
    path = [[N, N]]
    current_k = K
    i, j = N - 1, N - 1
    while current_k > 0:
        i, j = move_trace[i * N + j][current_k]
        path.append([i, j])
        current_k -= 1
    
    path.reverse()
    return max_potatoes, path

# Main execution
N, field, K, moves = read_input('sudest.in')
max_potatoes, path = max_potatoes_path(N, field, K, moves)
write_output('sudest.out', max_potatoes, path)
```

This version of the code removes the dependency on `numpy` and instead uses lists of lists (also known as a 2D list) to implement the dynamic programming table `dp` and the path tracing table `move_trace`. This should allow the program to run in environments where `numpy` is not available, while still ensuring efficient use of memory and performance within the constraints provided.
---------- user ----------


Program result did not match expected result.
Input data:
```
6
1 2 1 0 4 1
1 3 3 5 1 1
2 2 1 2 1 10
4 5 3 9 2 6
1 1 3 2 0 1
10 2 4 6 5 10
5
2 2 1 4 1
```
Expected output:
```
29
1 1
3 1
5 1
6 1
6 5
6 6
```
Found output:
```
48
3 6
-1 -1
4 6
-1 -1
-1 -1
6 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
