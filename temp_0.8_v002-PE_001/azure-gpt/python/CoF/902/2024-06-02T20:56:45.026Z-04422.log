---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cel mai nou proiect imobiliar din capitală este compus din $N$ blocuri-turn, construite unul lângă altul, de-a lungul unui bulevard central și numerotate de la $1$ la $N$. Pentru fiecare turn se cunoaște numărul etajelor din care este compus acesta și se mai știe că nu există două turnuri cu același număr de etaje. Ultimele norme urbanistice definesc **coeficientul de frumusețe** al turnului cu numărul $T$, ca fiind numărul turnurilor din secvența de turnuri care începe cu turnul $S$, se termină cu turnul $D$ și are următoarele proprietăți:
* $1 \leq S \leq T \leq D \leq N$
* numărul etajelor fiecărui turn din secvență, cu excepţia turnului $T$, este mai mic decât numărul de etaje ale turnului $T$
* Dacă $S ≠ 1$ atunci turnul $S-1$ este cel mai apropiat turn din stânga turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$
* Dacă $D ≠ N$ atunci turnul $D+1$ este cel mai apropiat turn din dreapta turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$

**Coeficientul de frumusețe al întregului ansamblu de turnuri** este suma coeficienților de frumusețe avuţi de turnurile componente. Dezvoltatorul proiectului dorește să renunțe la unul dintre turnuri și să construiască în locul acestuia un restaurant subteran, acesta considerându-se un turn cu **zero** etaje. Dezvoltatorul dorește să calculeze coeficientul de frumusețe al ansamblului de turnuri, pentru fiecare posibilă amplasare a restaurantului.

# Cerință

Cunoscând numărul $N$ de turnuri și numărul etajelor fiecăruia, determinați coeficientul de frumusețe al ansamblului de turnuri pentru toate cele $N$ posibilități de amplasare ale restaurantului, pe pozițiile $1$, $2$, ..., $N$.

# Date de intrare


Datele de intrare se citesc din fişierul `turnuri.in`, care are următoarea structură:

* pe prima linie se află numărul natural $N$, reprezentând numărul de turnuri
* pe a doua linie se află $N$ valori naturale nenule, separate prin câte un spațiu, reprezentând numărul etajelor turnurilor

# Date de ieșire


Datele de ieşire se vor scrie în fişierul `turnuri.out`, pe linii separate, astfel: pe linia $i$ ($1 \leq i \leq N$) se găsește un număr natural reprezentând coeficientul de frumusețe al ansamblului dacă restaurantul s-ar construi în locul turnului $i$.


# Restricții și precizări

* $1 \leq N \leq 100 \ 000$
* Numărul de etaje ale unui turn este un număr natural între $1$ și $1 \ 000 \ 000 \ 000$
* Se acordă $10$ puncte din oficiu.

| Subtask | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 30      | $N \leq 100$ |
| 2 | 30      | $N \leq 2 \ 000$      |
| 3 | 30      | Fără restricții suplimentare.      |

---

Example:
`turnuri.in`
```
7
10 3 1 7 8 6 5
```

`turnuri.out`
```
19
22
22
22
21
22
22
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Reading from 'turnuri.in'
with open('turnuri.in', 'r') as file:
    N = int(file.readline().strip())
    towers = np.array(list(map(int, file.readline().split())), dtype=np.int32)

# Prepare the output array.
beauty = np.zeros(N, dtype=np.int64)

# Prepare stacks for keeping track of the nearest greater tower to the left and right.
left_indices_stack = []
right_indices_stack = [0] * N
left_beauty_stack = [0] * N

# Calculate the nearest greater tower to the right for each tower.
for i in range(N - 1, -1, -1):
    while left_indices_stack and towers[left_indices_stack[-1]] < towers[i]:
        left_indices_stack.pop()
    right_indices_stack[i] = left_indices_stack[-1] if left_indices_stack else N
    left_indices_stack.append(i)

# Calculate the beauty coefficient for each tower and the total beauty.
total_beauty = 0
for i in range(N):
    left_bound = left_beauty_stack[i - 1] if i > 0 else -1
    right_bound = right_indices_stack[i]
    beauty[i] = (i - left_bound) * (right_bound - i)
    total_beauty += beauty[i]

# Calculate and write the beauty coefficients to 'turnuri.out' after removing each tower.
with open('turnuri.out', 'w') as file:
    for i in range(N):
        left_bound = left_beauty_stack[i - 1] if i > 0 else -1
        right_bound = right_indices_stack[i]
        removed_beauty = (i - left_bound) * (right_bound - i)
        # Update the right bounds for the next towers which were blocked by the current tower.
        for j in range(i + 1, right_bound):
            if right_indices_stack[j] == i:
                right_indices_stack[j] = right_bound
        current_total_beauty = total_beauty - removed_beauty + (right_bound - left_bound - 1)
        file.write(f'{current_total_beauty}\n')
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def compute_beauty_coefficients(N, towers):
    # Initialize arrays to store the next greater element indices for each tower.
    next_greater_left = np.zeros(N, dtype=np.int32) - 1
    next_greater_right = np.zeros(N, dtype=np.int32) - 1

    # Compute the indices of the next greater elements to the left of each tower.
    stack = []
    for i in range(N):
        while stack and towers[stack[-1]] < towers[i]:
            stack.pop()
        if stack:
            next_greater_left[i] = stack[-1]
        stack.append(i)

    # Compute the indices of the next greater elements to the right of each tower.
    stack.clear()
    for i in range(N - 1, -1, -1):
        while stack and towers[stack[-1]] < towers[i]:
            stack.pop()
        if stack:
            next_greater_right[i] = stack[-1]
        stack.append(i)

    # Calculate the initial beauty coefficients for the towers.
    beauty = np.zeros(N, dtype=np.int64)
    for i in range(N):
        left = next_greater_left[i] + 1
        right = next_greater_right[i] - 1 if next_greater_right[i] != -1 else N - 1
        beauty[i] = (i - left + 1) * (right - i + 1)

    # Write the results to 'turnuri.out' after simulating the removal of each tower.
    with open('turnuri.out', 'w') as out_file:
        total_beauty = np.sum(beauty)
        for i in range(N):
            # Calculate the beauty without the ith tower.
            left = next_greater_left[i] + 1
            right = next_greater_right[i] - 1 if next_greater_right[i] != -1 else N - 1
            current_beauty = total_beauty - beauty[i]
            if next_greater_left[i] != -1:
                # Add the beauty gained by towers to the left of the removed tower.
                current_beauty += (i - left + 1) * (right - next_greater_left[i])
            if next_greater_right[i] != -1:
                # Add the beauty gained by towers to the right of the removed tower.
                current_beauty += (next_greater_right[i] - i) * (next_greater_right[i] - left)
            out_file.write(f'{current_beauty}\n')

# Read from 'turnuri.in'.
with open('turnuri.in', 'r') as in_file:
    N = int(in_file.readline().strip())
    towers = np.array(in_file.readline().split(), dtype=np.int32)

compute_beauty_coefficients(N, towers)
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
