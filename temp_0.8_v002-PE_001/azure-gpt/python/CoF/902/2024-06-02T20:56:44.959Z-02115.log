---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cel mai nou proiect imobiliar din capitală este compus din $N$ blocuri-turn, construite unul lângă altul, de-a lungul unui bulevard central și numerotate de la $1$ la $N$. Pentru fiecare turn se cunoaște numărul etajelor din care este compus acesta și se mai știe că nu există două turnuri cu același număr de etaje. Ultimele norme urbanistice definesc **coeficientul de frumusețe** al turnului cu numărul $T$, ca fiind numărul turnurilor din secvența de turnuri care începe cu turnul $S$, se termină cu turnul $D$ și are următoarele proprietăți:
* $1 \leq S \leq T \leq D \leq N$
* numărul etajelor fiecărui turn din secvență, cu excepţia turnului $T$, este mai mic decât numărul de etaje ale turnului $T$
* Dacă $S ≠ 1$ atunci turnul $S-1$ este cel mai apropiat turn din stânga turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$
* Dacă $D ≠ N$ atunci turnul $D+1$ este cel mai apropiat turn din dreapta turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$

**Coeficientul de frumusețe al întregului ansamblu de turnuri** este suma coeficienților de frumusețe avuţi de turnurile componente. Dezvoltatorul proiectului dorește să renunțe la unul dintre turnuri și să construiască în locul acestuia un restaurant subteran, acesta considerându-se un turn cu **zero** etaje. Dezvoltatorul dorește să calculeze coeficientul de frumusețe al ansamblului de turnuri, pentru fiecare posibilă amplasare a restaurantului.

# Cerință

Cunoscând numărul $N$ de turnuri și numărul etajelor fiecăruia, determinați coeficientul de frumusețe al ansamblului de turnuri pentru toate cele $N$ posibilități de amplasare ale restaurantului, pe pozițiile $1$, $2$, ..., $N$.

# Date de intrare


Datele de intrare se citesc din fişierul `turnuri.in`, care are următoarea structură:

* pe prima linie se află numărul natural $N$, reprezentând numărul de turnuri
* pe a doua linie se află $N$ valori naturale nenule, separate prin câte un spațiu, reprezentând numărul etajelor turnurilor

# Date de ieșire


Datele de ieşire se vor scrie în fişierul `turnuri.out`, pe linii separate, astfel: pe linia $i$ ($1 \leq i \leq N$) se găsește un număr natural reprezentând coeficientul de frumusețe al ansamblului dacă restaurantul s-ar construi în locul turnului $i$.


# Restricții și precizări

* $1 \leq N \leq 100 \ 000$
* Numărul de etaje ale unui turn este un număr natural între $1$ și $1 \ 000 \ 000 \ 000$
* Se acordă $10$ puncte din oficiu.

| Subtask | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 30      | $N \leq 100$ |
| 2 | 30      | $N \leq 2 \ 000$      |
| 3 | 30      | Fără restricții suplimentare.      |

---

Example:
`turnuri.in`
```
7
10 3 1 7 8 6 5
```

`turnuri.out`
```
19
22
22
22
21
22
22
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def calculate_beauty_coefficients(heights, N):
    left_boundaries = np.zeros(N, dtype=int)
    right_boundaries = np.zeros(N, dtype=int)
    beauty_coefficients = np.zeros(N, dtype=int)

    stack = []

    # Find the left boundary for each tower
    for i in range(N):
        while stack and heights[stack[-1]] <= heights[i]:
            stack.pop()
        left_boundaries[i] = stack[-1] if stack else -1
        stack.append(i)

    stack.clear()

    # Find the right boundary for each tower
    for i in range(N-1, -1, -1):
        while stack and heights[stack[-1]] <= heights[i]:
            stack.pop()
        right_boundaries[i] = stack[-1] if stack else N
        stack.append(i)

    # Calculate the beauty coefficient for each tower
    for i in range(N):
        beauty_coefficients[i] = (i - left_boundaries[i]) * (right_boundaries[i] - i)

    # Calculate the total beauty before any removal
    total_beauty = np.sum(beauty_coefficients)
    
    # Calculate the beauty coefficients after removing each tower
    for i in range(N):
        left = left_boundaries[i]
        right = right_boundaries[i]
        left_part = (i - left) if left != -1 else 0
        right_part = (right - i) if right != N else 0
        removed_beauty = beauty_coefficients[i] + (left_part * right_part if left != -1 else 0)
        yield total_beauty - removed_beauty

# Read input
with open('turnuri.in', 'r') as file:
    N = int(file.readline().strip())
    heights = np.array(list(map(int, file.readline().split())), dtype=int)

# Calculate and write output
with open('turnuri.out', 'w') as file:
    for beauty_coefficient in calculate_beauty_coefficients(heights, N):
        file.write(str(beauty_coefficient) + '\n')
```

This solution uses NumPy arrays to efficiently handle large input sizes and minimize memory usage. It uses a stack-based approach to find left and right boundaries for each tower, which will be used to calculate beauty coefficients. The total beauty is calculated before any removals, and then the beauty coefficients for each possible removal are written to `turnuri.out`.

Note that when running this solution in an environment with the given memory constraints, it's essential to ensure that NumPy is using memory efficiently. The data type of NumPy arrays is explicitly set to `int` to avoid using unnecessary memory for larger data types.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
