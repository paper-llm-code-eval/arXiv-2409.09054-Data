---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cel mai nou proiect imobiliar din capitală este compus din $N$ blocuri-turn, construite unul lângă altul, de-a lungul unui bulevard central și numerotate de la $1$ la $N$. Pentru fiecare turn se cunoaște numărul etajelor din care este compus acesta și se mai știe că nu există două turnuri cu același număr de etaje. Ultimele norme urbanistice definesc **coeficientul de frumusețe** al turnului cu numărul $T$, ca fiind numărul turnurilor din secvența de turnuri care începe cu turnul $S$, se termină cu turnul $D$ și are următoarele proprietăți:
* $1 \leq S \leq T \leq D \leq N$
* numărul etajelor fiecărui turn din secvență, cu excepţia turnului $T$, este mai mic decât numărul de etaje ale turnului $T$
* Dacă $S ≠ 1$ atunci turnul $S-1$ este cel mai apropiat turn din stânga turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$
* Dacă $D ≠ N$ atunci turnul $D+1$ este cel mai apropiat turn din dreapta turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$

**Coeficientul de frumusețe al întregului ansamblu de turnuri** este suma coeficienților de frumusețe avuţi de turnurile componente. Dezvoltatorul proiectului dorește să renunțe la unul dintre turnuri și să construiască în locul acestuia un restaurant subteran, acesta considerându-se un turn cu **zero** etaje. Dezvoltatorul dorește să calculeze coeficientul de frumusețe al ansamblului de turnuri, pentru fiecare posibilă amplasare a restaurantului.

# Cerință

Cunoscând numărul $N$ de turnuri și numărul etajelor fiecăruia, determinați coeficientul de frumusețe al ansamblului de turnuri pentru toate cele $N$ posibilități de amplasare ale restaurantului, pe pozițiile $1$, $2$, ..., $N$.

# Date de intrare


Datele de intrare se citesc din fişierul `turnuri.in`, care are următoarea structură:

* pe prima linie se află numărul natural $N$, reprezentând numărul de turnuri
* pe a doua linie se află $N$ valori naturale nenule, separate prin câte un spațiu, reprezentând numărul etajelor turnurilor

# Date de ieșire


Datele de ieşire se vor scrie în fişierul `turnuri.out`, pe linii separate, astfel: pe linia $i$ ($1 \leq i \leq N$) se găsește un număr natural reprezentând coeficientul de frumusețe al ansamblului dacă restaurantul s-ar construi în locul turnului $i$.


# Restricții și precizări

* $1 \leq N \leq 100 \ 000$
* Numărul de etaje ale unui turn este un număr natural între $1$ și $1 \ 000 \ 000 \ 000$
* Se acordă $10$ puncte din oficiu.

| Subtask | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 30      | $N \leq 100$ |
| 2 | 30      | $N \leq 2 \ 000$      |
| 3 | 30      | Fără restricții suplimentare.      |

---

Example:
`turnuri.in`
```
7
10 3 1 7 8 6 5
```

`turnuri.out`
```
19
22
22
22
21
22
22
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# turnuri.py
import numpy as np

# Read data from file
with open('turnuri.in') as f:
    N = int(f.readline().strip())
    towers = np.array(f.readline().strip().split(), dtype=np.int64)

# Initialize the result array
beauties = np.zeros(N, dtype=np.int64)

# Helper function to calculate the beauty for each tower
def calc_beauty(towers, index):
    # Calculate beauty for index by finding the next higher tower on each side
    count = 1
    left = index - 1
    right = index + 1
    while left >= 0 and towers[left] < towers[index]:
        count += 1
        left -= 1
    while right < N and towers[right] < towers[index]:
        count += 1
        right += 1
    return count

# Calculate the beauty for each tower
for i in range(N):
    beauties[i] = calc_beauty(towers, i)

# Calculate the total beauty of the complex
total_beauty = np.sum(beauties)

# Compute the beauty with the restaurant at each position
with open('turnuri.out', 'w') as f:
    for i in range(N):
        # Calculate the new beauty for towers that change when the restaurant is placed at i
        new_beauty = total_beauty - beauties[i]
        left = i - 1
        while left >= 0 and towers[left] < towers[i]:
            new_beauty -= 1
            if (left > 0 and towers[left - 1] > towers[left]) or (left == 0):
                new_beauty += calc_beauty(towers, left)
                break
            left -= 1
        right = i + 1
        while right < N and towers[right] < towers[i]:
            new_beauty -= 1
            if (right < N - 1 and towers[right + 1] > towers[right]) or (right == N - 1):
                new_beauty += calc_beauty(towers, right)
                break
            right += 1
        # Write the new beauty to the output file
        f.write(f'{new_beauty}\n')
```
This script should be run within a Python environment where `numpy` has been installed and where the files `turnuri.in` and `turnuri.out` are accessible. The solution reads the tower heights from `turnuri.in`, calculates the beauty coefficients for the entire complex, and writes the results to `turnuri.out`, considering the placement of the restaurant at each position. It has been optimized to only recalculate the necessary parts when the restaurant replaces a tower.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1 and the provided stderr indicate that the `numpy` module is not available in the execution environment. Since using `numpy` was part of the original request, I will rewrite the solution without numpy to fit within the 8MB memory constraint, using native Python lists and other standard library utilities.

Here's the rewritten solution without the `numpy` module:

```python
# Read data from file
with open('turnuri.in') as f:
    N = int(f.readline().strip())
    towers = list(map(int, f.readline().strip().split()))

# Initialize the result array
beauties = [0] * N

# Helper function to calculate the beauty for each tower
def calc_beauty(towers, index):
    # Calculate beauty for index by finding the next higher tower on each side
    count = 1
    left = index - 1
    right = index + 1
    while left >= 0 and towers[left] < towers[index]:
        count += 1
        left -= 1
    while right < N and towers[right] < towers[index]:
        count += 1
        right += 1
    return count

# Calculate the beauty for each tower
for i in range(N):
    beauties[i] = calc_beauty(towers, i)

# Calculate the total beauty of the complex
total_beauty = sum(beauties)

# Compute the beauty with the restaurant at each position
with open('turnuri.out', 'w') as f:
    for i in range(N):
        # Calculate the new beauty for towers that change when the restaurant is placed at i
        new_beauty = total_beauty - beauties[i]
        left = i - 1
        while left >= 0 and towers[left] < towers[i]:
            new_beauty -= 1
            if (left > 0 and towers[left - 1] > towers[left]) or (left == 0):
                new_beauty += calc_beauty(towers, left)
                break
            left -= 1
        right = i + 1
        while right < N and towers[right] < towers[i]:
            new_beauty -= 1
            if (right < N - 1 and towers[right + 1] > towers[right]) or (right == N - 1):
                new_beauty += calc_beauty(towers, right)
                break
            right += 1
        # Write the new beauty to the output file
        f.write(f'{new_beauty}\n')
```

This code uses standard Python lists instead of numpy arrays and the `map` function to convert the string of numbers to a list of integers. The code should now run in an environment without the `numpy` library, adhering to the memory limit constraint while still providing an efficient solution to the given problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
7
10 3 1 7 8 6 5
```
Expected output:
```
19
22
22
22
21
22
22
```
Found output:
```
14
20
21
19
14
20
21
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
