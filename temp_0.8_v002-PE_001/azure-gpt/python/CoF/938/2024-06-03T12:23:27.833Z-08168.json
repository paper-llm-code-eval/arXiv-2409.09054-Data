{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/938/2024-06-03T12:23:27.833Z-08168.log",
  "attemptStart": 1717417407.833,
  "attemptEnd": 1717417459.262,
  "attemptDuration": 51.42900013923645,
  "code": "from collections import deque\n\n# Function to read the data from the input file\ndef read_maze(filename):\n    with open(filename, 'r') as file:\n        N, M = map(int, file.readline().split())\n        maze = [list(map(int, list(file.readline().strip()))) for _ in range(N)]\n    return maze, N, M\n\n# Helper function to check if a position is within the maze bounds.\ndef in_bounds(i, j, N, M):\n    return 0 <= i < N and 0 <= j < M\n\n# Helper function to perform BFS and find the shortest path length.\ndef bfs(maze, N, M):\n    dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = [[False] * M for _ in range(N)]\n    queue = deque([(0, 0, 1)])  # (i, j, distance)\n    visited[0][0] = True\n\n    while queue:\n        i, j, dist = queue.popleft()\n        if (i, j) == (N - 1, M - 1):\n            return dist\n        for di, dj in dirs:\n            ni, nj = i + di, j + dj\n            if in_bounds(ni, nj, N, M) and not visited[ni][nj] and maze[ni][nj] == 0:\n                visited[ni][nj] = True\n                queue.append((ni, nj, dist + 1))\n    return -1  # This should not happen given the problem's constraints.\n\n# Main function to run the program\ndef main():\n    maze, N, M = read_maze('labirint.in')\n    d_0 = bfs(maze, N, M)  # Find the shortest path in the original maze.\n\n    with open('labirint.out', 'w') as file:\n        for i in range(N):\n            for j in range(M):\n                if maze[i][j] == 1:\n                    maze[i][j] = 0  # Temporarily change the wall to a passage.\n                    d_ij = bfs(maze, N, M)  # Find the shortest path with this change.\n                    maze[i][j] = 1  # Change it back to a wall.\n                    file.write('1' if d_ij < d_0 else '0')\n                else:\n                    file.write('0')\n            file.write('\\n')\n\nif __name__ == \"__main__\":\n    main()\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2596,
  "metadata": {
    "id": 938,
    "examples": [
      {
        "in": "5 6\n010001\n000101\n011001\n010010\n001000",
        "out": "010000\n000100\n001001\n010010\n001000",
        "explainer": ""
      }
    ],
    "body": "Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.\n\nNotăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.\n\n\n# Cerință\n\n\nPentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.\n\n\n# Date de intrare\n\n\nPe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.\n\n\n# Date de ieșire\n\n\nîn fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.\n\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 1 \\ 000$;\n* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.\n* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.\n\n\n| # | Punctaj | Restricții          |\n| - | ------- | ------------------- |\n| 1 | 10      | $1 \\leq N, M \\leq 50$, $d_0 = N + M - 1$ |\n| 2 | 30      | $1 \\leq N, M \\leq 50$      |\n| 3 | 60      | Fără restricții suplimentare.      |",
    "header": {
      "problem_id": 938,
      "problem_name": "Labirint",
      "tags": "[Grid, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "labirint.in",
      "output_filename": "labirint.out",
      "multiple_solutions": false,
      "original_source": "OJI 2021 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "labirint.in",
      "output": "labirint.out"
    },
    "consoleInteraction": false
  }
}