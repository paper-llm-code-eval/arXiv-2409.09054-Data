---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cartonase.in` and write to `cartonase.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel are $N$ cartonașe. Fiecare cartonaș are înscrise două numere (un număr, $s$, în partea stângă, și celălalt număr, $d$, în partea dreaptă). El a așezat cartonașele într-un șir, lipite unul de celălalt, astfel încât numărul din partea dreaptă a primului cartonaș este lipit de numărul din partea stângă a celui de-al doilea cartonaș, numărul din partea dreaptă a celui de al doilea cartonaș este lipit de numărul din partea stângă a celui de-al treilea cartonaș etc. Spunem că două cartonașe alăturate "se potrivesc" dacă numărul din dreapta al primului cartonaș este egal cu numărul din stânga al celui de al doilea cartonaș. Ionel observă că sunt perechi de cartonașe alăturate care "se potrivesc" și chiar secvențe de mai multe cartonașe alăturate, în care primul "se potrivește" cu al doilea, al doilea "se potrivește" cu al treilea, etc.

# Cerință
Scrieţi un program care să citească numărul $N$ de cartonașe, numerele înscrise pe fiecare cartonaș și determină:
1) Numărul de perechi de cartonașe care "se potrivesc".
2) Numărul de cartonașe din cea mai lungă secvență în care fiecare două cartonașe alăturate "se potrivesc".
3) Numărul de secvențe cu număr maxim de cartonașe care "se potrivesc".

# Date de intrare
Fişierul de intrare `cartonase.in` conţine doar numere naturale nenule:
- pe prima linie se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie a fișierului se găsește numărul natural $N$, cu semnificația din enunț.
- pe fiecare dintre următoarele $N$ linii se află, în acestă ordine, câte două numere naturale $s$ şi $d$, separate printr-un spațiu, cu semnificația din enunț pentru un cartonaș. Perechile de numere sunt date în ordinea în care cartonașele corespunzătoare lor apar în șirul lui Ionel.

# Date de ieșire
Fişierul de ieşire `cartonase.out` va conţine pe prima linie un număr natural reprezentând răspunsul la cerința specificată.

# Restricții și precizări
- $1 \leq N \leq 500$
- $1 \leq s \leq 10\ 000$
- $1 \leq d \leq 10\ 000$
- Pentru rezolvarea fiecărei cerințe se obțin câte 30 de puncte.

---

Example:
`cartonase.in`
```
1
5
2 10
10 5
10 2
2 10
37 5
```

`cartonase.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# load data from file
with open('cartonase.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())
    cartonase = np.zeros((N, 2), dtype=np.int32)
    for i in range(N):
        cartonase[i] = list(map(int, file.readline().split()))

# Solution for each task
if C == 1:
    # Count the number of matching pairs.
    matching_pairs = np.sum(cartonase[:-1, 1] == cartonase[1:, 0])
    result = matching_pairs

elif C == 2:
    # Find the length of the longest matching sequence.
    lengths = np.zeros(N, dtype=np.int32)
    lengths[0] = 1
    for i in range(1, N):
        if cartonase[i - 1, 1] == cartonase[i, 0]:
            lengths[i] = lengths[i - 1] + 1
        else:
            lengths[i] = 1
    longest_sequence = np.max(lengths)
    result = longest_sequence

elif C == 3:
    # Count the number of sequences with maximal matching length.
    lengths = np.zeros(N, dtype=np.int32)
    lengths[0] = 1
    for i in range(1, N):
        if cartonase[i - 1, 1] == cartonase[i, 0]:
            lengths[i] = lengths[i - 1] + 1
        else:
            lengths[i] = 1
    longest_sequence = np.max(lengths)
    max_sequence_count = np.sum(lengths == longest_sequence)
    result = max_sequence_count

# Save result to file
with open('cartonase.out', 'w') as file:
    file.write(str(result) + '\n')
```
Please note that this code assumes that the `cartonase.in` file is correctly formatted and exists in the current working directory. Upon execution, it will create or overwrite the `cartonase.out` file with the result according to the task specified (1, 2, or 3) in the input file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the `numpy` library is not available in the environment where the code is being executed, which leads to the `ModuleNotFoundError`. Since we need to optimize for both time and memory usage, and there's a constraint on using external libraries like `numpy`, we will have to implement the solution using only built-in Python data structures and functionalities.

Here is the complete solution that does not use `numpy` or any other external libraries, and adheres to the given memory constraints:

```python
# Read data from file
with open('cartonase.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())
    cartonase = [tuple(map(int, file.readline().split())) for _ in range(N)]

# Initialize variables for each task
matching_pairs = 0
longest_sequence = 0
current_sequence = 1
max_sequence_count = 0

# Solve each task
if C == 1:
    # Count the number of matching pairs.
    for i in range(1, N):
        if cartonase[i - 1][1] == cartonase[i][0]:
            matching_pairs += 1
    result = matching_pairs

elif C == 2:
    # Find the length of the longest matching sequence.
    for i in range(1, N):
        if cartonase[i - 1][1] == cartonase[i][0]:
            current_sequence += 1
        else:
            longest_sequence = max(longest_sequence, current_sequence)
            current_sequence = 1
    longest_sequence = max(longest_sequence, current_sequence)  # Check last sequence
    result = longest_sequence

elif C == 3:
    # Count the number of sequences with maximal matching length.
    for i in range(1, N):
        if cartonase[i - 1][1] == cartonase[i][0]:
            current_sequence += 1
        else:
            if current_sequence == longest_sequence:
                max_sequence_count += 1
            if current_sequence > longest_sequence:
                longest_sequence = current_sequence
                max_sequence_count = 1
            current_sequence = 1
    if current_sequence == longest_sequence:  # Check last sequence
        max_sequence_count += 1
    result = max_sequence_count

# Write result to file
with open('cartonase.out', 'w') as file:
    file.write(str(result) + '\n')
```

This code reads from the file `cartonase.in`, processes the data based on the specified task, and writes the result to the file `cartonase.out`. It uses list comprehension to read in the cards and simple Python loops to calculate the result for each task. No external libraries are required for this solution.
