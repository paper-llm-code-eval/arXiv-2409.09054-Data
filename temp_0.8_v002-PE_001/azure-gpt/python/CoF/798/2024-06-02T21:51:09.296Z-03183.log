---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `submit.in` and write to `submit.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică se antrenează pe un site de probleme cu evaluare online. Când el trimite pe site soluţia la o problemă, aceasta este evaluată pe un anumit număr de teste. Punctajul obţinut la problema respectivă va fi egal cu suma punctajelor obţinute la fiecare test. Punctajele asociate testelor pot fi diferite. În plus, dacă problema a fost complet rezolvată (a obţinut punctaj maxim la toate testele), Vasilică primeşte şi un bonus. 

Vasilică poate trimite soluţia la o problemă de mai multe ori. Când trimite soluţia prima dată, punctajul se calculează în modul prezentat anterior. Când trimite soluţia a doua oară, Vasilică va fi penalizat cu două puncte (adică din punctajul total obţinut la problemă se scad două puncte). Când trimite soluţia a treia oară penalizarea este de $4$ puncte, a patra oară de $6$ puncte ş.a.m.d. Observaţi că la fiecare nouă încercare penalizarea creşte cu două puncte.

# Cerință

Date fiind rezultatele obţinute pe teste de Vasilică la fiecare soluţie trimisă, să se determine punctajul maxim pe care el l-a obţinut la problema respectivă.

# Date de intrare

Fișierul de intrare `submit.in` conține pe prima linie numărul natural $N$ reprezentând numărul de teste pe care este evaluată soluţia. 

Pe cea de a doua linie se află $N$ numere naturale separate prin spaţii $P_1, P_2, \dots, P_N$, reprezentând în ordine punctajul acordat pentru fiecare dintre cele $N$ teste. 

Pe cea de a treia linie se află numărul natural $B$ reprezentând bonusul (numărul de puncte acordate în cazul în care pentru toate testele soluţia obţine punctaj pe toate testele). 

Pe a patra linie este scris un număr natural $M$ reprezentând numărul de soluţii trimise de Vasilică la problemă. 

Urmează $M$ linii, fiecare linie conţinând rezultatele obţinute pe teste la cele $M$ soluţii trimise de Vasilică, în ordinea trimiterii lor. Pe cea de a $i$-a linie dintre cele $M$ sunt scrise $N$ valori din mulţimea $\{0, 1\}$, separate prin spaţii; a $j$-a valoare este $0$ dacă testul $j$ nu a fost rezolvat corect, respectiv $1$ dacă testul $j$ a fost corect rezolvat (obţinând punctajul maxim alocat pe test).

# Date de ieșire

Fișierul de ieșire `submit.out` va conţine o singură linie pe care va fi scris punctajul maxim obţinut de Vasilică la problema respectivă.

# Restricții și precizări

* $1 \leq N, M \leq 100$;
* $0 \leq P_i, B \leq 100$;

---

Example:
`submit.in`
```
4
10 5 5 20
13
3
0 0 0 0
1 1 1 1
0 1 0 1
```

`submit.out`
```
51
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_data(file_name):
    with open(file_name, 'r') as f:
        N = int(f.readline().strip())
        P = np.array(f.readline().strip().split(), dtype=int)
        B = int(f.readline().strip())
        M = int(f.readline().strip())
        submissions = np.array([list(map(int, f.readline().strip().split())) for _ in range(M)], dtype=int)
    return N, P, B, M, submissions

def calculate_max_score(N, P, B, M, submissions):
    max_score = 0
    for i, submission in enumerate(submissions):
        score = np.sum(submission * P)
        bonus = B if np.all(submission == 1) else 0
        penalty = 2 * i
        total_score = score + bonus - penalty
        max_score = max(max_score, total_score)
    return max_score

def write_data(file_name, max_score):
    with open(file_name, 'w') as f:
        f.write(str(max_score))

# Read the problem data
N, P, B, M, submissions = read_data('submit.in')

# Calculate the max score
max_score = calculate_max_score(N, P, B, M, submissions)

# Write the result to the file
write_data('submit.out', max_score)
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_max_score(submissions, test_scores, bonus, penalty_increment):
    max_score = 0
    penalty = 0
    for submission in submissions:
        score = np.dot(submission, test_scores)
        if np.all(submission == 1):
            score += bonus
        max_score = max(max_score, score - penalty)
        penalty += penalty_increment
    return max_score

# Read the problem data from 'submit.in'
with open('submit.in', 'r') as f:
    N = int(f.readline().strip())
    test_scores = np.fromstring(f.readline().strip(), dtype=int, sep=' ')
    bonus = int(f.readline().strip())
    M = int(f.readline().strip())
    submissions = np.array([f.readline().strip().split() for _ in range(M)], dtype=int)

# Calculate the max score
max_score = calculate_max_score(submissions, test_scores, bonus, 2)

# Write the result to the file 'submit.out'
with open('submit.out', 'w') as f:
    f.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the problem data from 'submit.in'
with open('submit.in', 'r') as file_in:
    N = int(file_in.readline().strip())
    points_per_test = np.array(file_in.readline().strip().split(), dtype=int)
    bonus = int(file_in.readline().strip())
    M = int(file_in.readline().strip())
    submissions = np.array([list(map(int, file_in.readline().strip().split())) for _ in range(M)], dtype=int)

# Calculate the max score
max_score = 0
for i, submission in enumerate(submissions):
    score = np.dot(submission, points_per_test)
    if np.all(submission):
        score += bonus
    score -= 2 * i
    max_score = max(max_score, score)

# Write the result to the file 'submit.out'
with open('submit.out', 'w') as file_out:
    file_out.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy library for efficient array operations
import numpy as np

# Open 'submit.in' for reading input data
with open('submit.in', 'r') as file_in:
    # Read the number of tests
    N = int(file_in.readline())
    # Read the points per test as a numpy array
    points = np.array(file_in.readline().split(), dtype=np.int32)
    # Read the bonus points
    bonus = int(file_in.readline())
    # Read the number of submissions
    M = int(file_in.readline())
    # Initialize the maximum score to 0
    max_score = 0
    # Read each submission and calculate the score
    for attempt in range(M):
        # Read the submission results as a numpy array of boolean values (1 or 0)
        submission_results = np.array(file_in.readline().split(), dtype=np.int32)
        # Calculate the score based on correct submissions and the respective points
        score = np.sum(submission_results * points)
        # Check if the submission solved all tests and add bonus if so
        if np.all(submission_results == 1):
            score += bonus
        # Subtract the penalty from the score based on the number of attempts
        score -= attempt * 2
        # Update the maximum score if the current score is higher
        max_score = max(max_score, score)

# Open 'submit.out' for writing the output data
with open('submit.out', 'w') as file_out:
    # Write the maximum score to the output file
    file_out.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to evaluate the maximum score
def evaluate_max_score(scores, bonus, attempts, results):
    max_score = 0
    penalty = 0
    for index in range(attempts):
        # Calculate score for the current attempt
        current_score = np.dot(results[index], scores)
        # Check if all tests passed to add bonus
        if np.all(results[index] == 1):
            current_score += bonus
        # Apply penalty for the current attempt
        current_score -= penalty
        # Update the max score if current score is greater
        max_score = max(max_score, current_score)
        # Increase penalty for next attempt
        penalty += 2
    return max_score

# Read input data from 'submit.in'
with open('submit.in', 'r') as fin:
    N = int(fin.readline().strip())
    scores = np.array(fin.readline().strip().split(), dtype=int)
    bonus = int(fin.readline().strip())
    attempts = int(fin.readline().strip())
    results = np.array([list(map(int, fin.readline().strip().split())) for _ in range(attempts)])

# Calculate the maximum score
max_score = evaluate_max_score(scores, bonus, attempts, results)

# Write the maximum score to 'submit.out'
with open('submit.out', 'w') as fout:
    fout.write(f"{max_score}\n")
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'submit.in'
with open('submit.in', 'r') as file:
    N = int(file.readline())
    test_scores = np.array(file.readline().split(), dtype=int)
    bonus = int(file.readline())
    M = int(file.readline())
    submissions = np.array([file.readline().split() for _ in range(M)], dtype=int)

# Calculate the max score
max_score = 0
for i, submission in enumerate(submissions):
    score = np.dot(submission, test_scores)
    if all(submission):
        score += bonus
    score -= 2 * i
    max_score = max(max_score, score)

# Write the max score to 'submit.out'
with open('submit.out', 'w') as file:
    file.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
