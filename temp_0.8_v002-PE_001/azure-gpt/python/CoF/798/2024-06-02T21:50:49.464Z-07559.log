---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `submit.in` and write to `submit.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică se antrenează pe un site de probleme cu evaluare online. Când el trimite pe site soluţia la o problemă, aceasta este evaluată pe un anumit număr de teste. Punctajul obţinut la problema respectivă va fi egal cu suma punctajelor obţinute la fiecare test. Punctajele asociate testelor pot fi diferite. În plus, dacă problema a fost complet rezolvată (a obţinut punctaj maxim la toate testele), Vasilică primeşte şi un bonus. 

Vasilică poate trimite soluţia la o problemă de mai multe ori. Când trimite soluţia prima dată, punctajul se calculează în modul prezentat anterior. Când trimite soluţia a doua oară, Vasilică va fi penalizat cu două puncte (adică din punctajul total obţinut la problemă se scad două puncte). Când trimite soluţia a treia oară penalizarea este de $4$ puncte, a patra oară de $6$ puncte ş.a.m.d. Observaţi că la fiecare nouă încercare penalizarea creşte cu două puncte.

# Cerință

Date fiind rezultatele obţinute pe teste de Vasilică la fiecare soluţie trimisă, să se determine punctajul maxim pe care el l-a obţinut la problema respectivă.

# Date de intrare

Fișierul de intrare `submit.in` conține pe prima linie numărul natural $N$ reprezentând numărul de teste pe care este evaluată soluţia. 

Pe cea de a doua linie se află $N$ numere naturale separate prin spaţii $P_1, P_2, \dots, P_N$, reprezentând în ordine punctajul acordat pentru fiecare dintre cele $N$ teste. 

Pe cea de a treia linie se află numărul natural $B$ reprezentând bonusul (numărul de puncte acordate în cazul în care pentru toate testele soluţia obţine punctaj pe toate testele). 

Pe a patra linie este scris un număr natural $M$ reprezentând numărul de soluţii trimise de Vasilică la problemă. 

Urmează $M$ linii, fiecare linie conţinând rezultatele obţinute pe teste la cele $M$ soluţii trimise de Vasilică, în ordinea trimiterii lor. Pe cea de a $i$-a linie dintre cele $M$ sunt scrise $N$ valori din mulţimea $\{0, 1\}$, separate prin spaţii; a $j$-a valoare este $0$ dacă testul $j$ nu a fost rezolvat corect, respectiv $1$ dacă testul $j$ a fost corect rezolvat (obţinând punctajul maxim alocat pe test).

# Date de ieșire

Fișierul de ieșire `submit.out` va conţine o singură linie pe care va fi scris punctajul maxim obţinut de Vasilică la problema respectivă.

# Restricții și precizări

* $1 \leq N, M \leq 100$;
* $0 \leq P_i, B \leq 100$;

---

Example:
`submit.in`
```
4
10 5 5 20
13
3
0 0 0 0
1 1 1 1
0 1 0 1
```

`submit.out`
```
51
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the data from the input file
with open('submit.in', 'r') as fin:
    N = int(fin.readline().strip())
    P = np.array(fin.readline().strip().split(), dtype=int)
    B = int(fin.readline().strip())
    M = int(fin.readline().strip())
    submissions = np.loadtxt([fin.readline().strip() for _ in range(M)], dtype=int)

# Calculate the scores for each submission
scores = np.dot(submissions, P)

# Check for full scores and add bonus points
full_scores = np.all(submissions == 1, axis=1)
scores[full_scores] += B

# Apply penalties for multiple submissions
penalties = np.arange(0, 2 * M, 2)
final_scores = scores - penalties

# Find the maximum score and write to the output file
max_score = np.max(final_scores)
with open('submit.out', 'w') as fout:
    fout.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the data from the input file
    with open('submit.in', 'r') as fin:
        N = int(fin.readline().strip())
        P = np.array(fin.readline().strip().split(), dtype=np.int32)
        B = int(fin.readline().strip())
        M = int(fin.readline().strip())
        submissions = np.zeros((M, N), dtype=np.int32)
        for i in range(M):
            submissions[i] = np.array(fin.readline().strip().split(), dtype=np.int32)

    # Calculate the scores for each submission
    scores = np.dot(submissions, P)

    # Check for full scores and add bonus points
    full_scores = np.all(submissions == 1, axis=1)
    scores[full_scores] += B

    # Apply penalties for multiple submissions
    penalties = np.arange(0, 2 * M, 2, dtype=np.int32)
    final_scores = scores - penalties

    # Find the maximum score
    max_score = np.max(final_scores)

    # Write the maximum score to the output file
    with open('submit.out', 'w') as fout:
        fout.write(str(max_score))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the input file
with open('submit.in', 'r') as file:
    N = int(file.readline())
    points = list(map(int, file.readline().split()))
    bonus = int(file.readline())
    M = int(file.readline())

    max_score = 0
    for i in range(M):
        submission = list(map(int, file.readline().split()))
        score = sum(p if s == 1 else 0 for p, s in zip(points, submission))
        if all(submission):
            score += bonus
        score -= 2 * i
        max_score = max(max_score, score)

# Write the result to the output file
with open('submit.out', 'w') as file:
    file.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the input file
with open('submit.in', 'r') as file:
    N = int(file.readline())
    points = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    bonus = int(file.readline())
    M = int(file.readline())

    max_score = 0
    penalty = 0
    for _ in range(M):
        submission = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
        # Calculate the score for the current submission
        score = np.dot(submission, points)
        # Add bonus if all tests are passed
        if submission.sum() == N:
            score += bonus
        # Apply penalty for multiple submissions
        score -= penalty
        # Update the maximum score
        max_score = max(max_score, score)
        # Increase penalty for the next submission
        penalty += 2

# Write the result to the output file
with open('submit.out', 'w') as file:
    file.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_max_score(N, points, bonus, M, submissions):
    scores = np.dot(submissions, points)
    full_scores = np.all(submissions == 1, axis=1)
    scores[full_scores] += bonus
    penalties = np.arange(0, 2 * M, 2)
    final_scores = scores - penalties
    return np.max(final_scores)

def read_input(filepath):
    with open(filepath, 'r') as file:
        N = int(file.readline())
        points = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
        bonus = int(file.readline())
        M = int(file.readline())
        submissions = np.array([list(map(int, file.readline().strip().split())) for _ in range(M)])
    return N, points, bonus, M, submissions

def write_output(filepath, max_score):
    with open(filepath, 'w') as file:
        file.write(str(max_score))

# Main execution
N, points, bonus, M, submissions = read_input('submit.in')
max_score = calculate_max_score(N, points, bonus, M, submissions)
write_output('submit.out', max_score)
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Open and read the input file
with open('submit.in', 'r') as file_in:
    N = int(file_in.readline())
    P = np.fromstring(file_in.readline(), dtype=int, sep=' ')
    B = int(file_in.readline())
    M = int(file_in.readline())
    
    # Initialize the maximum score and penalty
    max_score, penalty = 0, 0
    
    # Read each submission
    for index in range(M):
        submission = np.fromstring(file_in.readline(), dtype=int, sep=' ')
        
        # Compute the score for the current submission
        score = np.sum(submission * P)
        
        # Add bonus if all tests are passed
        if np.all(submission):
            score += B
        
        # Subtract the penalty and update the maximum score
        max_score = max(max_score, score - penalty)
        
        # Increase the penalty for the next submission
        penalty += 2 * (index + 1)

# Open and write to the output file
with open('submit.out', 'w') as file_out:
    file_out.write(f"{max_score}\n")
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Open and read the input file
with open('submit.in', 'r') as file_in:
    N = int(file_in.readline())
    points = np.fromstring(file_in.readline(), dtype=int, sep=' ')
    bonus = int(file_in.readline())
    M = int(file_in.readline())
    submissions = np.array([file_in.readline().split() for _ in range(M)], dtype=int)

# Initialize array to hold the score for each submission
scores = np.zeros(M, dtype=int)

# Calculate the scores for each submission
for i in range(M):
    # Score for the current submission
    score = np.dot(submissions[i], points)
    # If all tests are passed, add the bonus
    if np.all(submissions[i] == 1):
        score += bonus
    # Subtract the penalty for multiple submissions except for the first one
    if i > 0:
        score -= 2 * i
    scores[i] = score

# The maximum score among all submissions
max_score = np.max(scores)

# Write the max score to the output file
with open('submit.out', 'w') as file_out:
    file_out.write(str(max_score))
```
```
