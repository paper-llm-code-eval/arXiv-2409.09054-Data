---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `lacusta.in` and write to `lacusta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o matrice dreptunghiulară cu $m$ linii şi $n$ coloane, cu valori naturale. Traversăm matricea pornind de la colţul stânga-sus la colţul dreapta-jos. O traversare constă din mai multe deplasări. La fiecare deplasare se execută un salt pe orizontală şi un pas pe verticală. Un salt înseamnă că putem trece de la o celulă la oricare alta aflată pe aceeaşi linie, iar un pas înseamnă că putem trece de la o celulă la celula aflată imediat sub ea. Excepţie face ultima deplasare (cea în care ne aflăm pe ultima linie), când vom face doar un salt pentru a ajunge în colţul dreapta-jos, dar nu vom mai face şi pasul corespunzător. Astfel traversarea va consta din vizitarea a $2 \cdot m$ celule. 

# Cerinţă

Scrieţi un program care să determine suma minimă care se poate obţine pentru o astfel de traversare.

# Date de intrare


Fişierul de intrare `lacusta.in` conţine pe prima linie două numere naturale separate printr-un spaţiu $m \ n$, reprezentând numărul de linii şi respectiv numărul de coloane ale matricei. Pe următoarele $m$ linii este descrisă matricea, câte $n$ numere pe fiecare linie, separate prin câte un spaţiu.

# Date de ieșire


Fişierul de ieşire `lacusta.out` va conţine o singură linie pe care va fi scrisă suma minimă găsită.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* Valorile elementelor matricei sunt numere întregi din intervalul $[1, 255]$

---

Example:
`lacusta.in`
```
4 5
3 4 5 7 9
6 6 3 4 4
6 3 3 9 6
6 5 3 8 2
```

`lacusta.out`
```
28
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def min_sum_traversal(matrix, m, n):
    # Initialize cost matrix with high values
    cost = np.full((m, n), np.inf)
    # The cost of the first cell is its own value
    cost[0, 0] = matrix[0, 0]

    # Populate the cost matrix
    for i in range(1, m):
        for j in range(n):
            for k in range(n):
                if j != k:
                    cost[i, j] = min(cost[i, j], cost[i-1, k] + matrix[i][j] + matrix[i-1][k])
    
    # Final cost is the minimum cost to reach the bottom right corner from any of the
    # cells in the second-to-last row (excluding the last cell of that row)
    min_final_cost = np.min(cost[-2, :-1] + matrix[-1, -1])

    return min_final_cost

# Read input from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)])

# Calculate the minimum sum for the traversal
min_sum = min_sum_traversal(matrix, m, n)

# Write output to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(str(min_sum))
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input data from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.int32)

# Initialize the cost matrix
cost = np.zeros((m, n), dtype=np.int32)
cost[0] = np.inf
cost[1:] = np.inf

# Set the cost of the first cell and the cell right below it
cost[0, 0], cost[1, 0] = grid[0, 0], grid[0, 0] + grid[1, 0]

# Populate the cost matrix
for i in range(2, m):
    for j in range(n):
        for k in range(n):
            if j != k:
                cost[i, j] = min(cost[i, j], cost[i-1, k] + grid[i, j] + grid[i-1, k])

# Compute the final cost
final_costs = cost[-2, :] + grid[-1]
final_costs[-1] = np.inf  # Ignore the last element of the last row
min_cost = np.min(final_costs)

# Write the result to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(str(min_cost))
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = np.loadtxt(file, dtype=np.int32)

# Initialize dynamic programming table with infinity
dp = np.full((m, n), np.inf, dtype=np.int32)
# Starting point only has one option
dp[0, 0] = grid[0, 0]

# Compute the least cost path
for i in range(1, m):
    for j in range(n):
        for k in range(n):
            if k != j:  # We cannot move vertically down from the same column
                dp[i, j] = min(dp[i, j], dp[i - 1, k] + grid[i, j])

# Minimize over the second to last row to jump to the last cell in the last row
min_cost = min(dp[m - 2, j] + grid[m - 1, n - 1] for j in range(n - 1))

# Write to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(f"{min_cost}\n")
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def compute_min_path_cost(matrix):
    m, n = matrix.shape
    # Initialize the cost matrix with infinity
    cost = np.full((m, n), np.inf)
    # Start at the first cell
    cost[0, 0] = matrix[0, 0]
    
    # Populate the cost matrix with the minimum sum paths
    for i in range(1, m):
        for j in range(n):
            min_cost = np.inf
            # Find the minimum cost to reach cell [i, j]
            for k in range(n):
                if k != j:
                    min_cost = min(min_cost, cost[i - 1, k] + matrix[i - 1, k])
            cost[i, j] = min_cost + matrix[i, j]
            
    # Calculate the final minimum sum by comparing paths to the bottom-right cell
    # Exclude the direct vertical step from the cell right above it
    min_final_cost = np.min(cost[-2, :-1]) + matrix[-1, -1]

    return min_final_cost

# Read input data
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)])

# Compute the minimum path cost
min_cost = compute_min_path_cost(matrix)

# Write the output data
with open('lacusta.out', 'w') as file:
    file.write(str(min_cost))
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.int64)

# Initialize cost array
cost = np.full((m, n), np.inf, dtype=np.int64)
cost[0, 0] = grid[0, 0]

# Fill the cost array
for i in range(1, m):
    for j in range(n):
        # Find the minimum cost for reaching the next cell
        if i < m - 1:  # Check for the second last row
            options = [cost[i - 1, k] + grid[i, j] + grid[i - 1, k] for k in range(n) if k != j]
            cost[i, j] = min(options)
        else:  # For the last row, we need to consider the cost of only the last column
            cost[i, j] = cost[i - 1, j] + grid[i, j]

# No need to consider the last element as we cannot move to the bottom from the bottom
cost[-1, -1] = cost[-2, -1] + grid[-1, -1]

# Write to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(f"{cost[-1, -1]}\n")
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Define the function to calculate the minimum sum for the traversal
def calculate_minimum_cost(matrix, m, n):
    # Create a 2D array to store the minimum cost to reach each cell
    cost = np.zeros((m, n), dtype=int)
    cost[0, 0] = matrix[0, 0]

    # Fill the first column of the cost matrix
    for i in range(1, m):
        cost[i, 0] = cost[i-1, 0] + matrix[i, 0]

    # Calculate the minimum cost for the internal cells
    for i in range(1, m):
        for j in range(1, n):
            # Set a high initial cost for the comparison
            min_cost = float('inf')
            for k in range(n):
                # Ensure not jumping back to the same vertical position
                if k != j:
                    min_cost = min(min_cost, cost[i-1, k])
            cost[i, j] = min_cost + matrix[i, j]

    # Find the minimum cost for the last jump (excluding the last cell itself)
    min_final_jump = min(cost[m-2, j] for j in range(n-1)) + matrix[m-1, n-1]

    return min_final_jump

# Read input from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=int)

# Calculate the minimum sum for the traversal
min_sum = calculate_minimum_cost(matrix, m, n)

# Write output to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(str(min_sum) + '\n')
```
```
---------- user ----------


Expected program to write result to `lacusta.out` and read from `lacusta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def find_min_path_cost(matrix, m, n):
    # Create a cost matrix and initialize with infinity
    cost = np.full((m, n), np.inf, dtype=np.int32)
    # Set the first cell's cost to its value as this is the starting point
    cost[0, 0] = matrix[0, 0]
    
    # Populate the cost matrix by considering the cost of every step
    for i in range(1, m):
        for j in range(n):
            # Consider the cost from all possible previous steps
            for k in range(n):
                if j != k:  # Ensure we make a horizontal move
                    cost[i, j] = min(cost[i, j], cost[i - 1, k] + matrix[i, j] + matrix[i - 1, k])
    
    # The final step should be from the second-to-last row to the last cell
    # So we take the minimum cost from the second-to-last row (excluding the last column)
    final_costs = cost[-2, :-1] + matrix[-1, -1]
    min_final_cost = np.min(final_costs)

    return min_final_cost

# Read data from 'lacusta.in'
with open('lacusta.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)])

# Compute the minimum path cost
min_cost = find_min_path_cost(matrix, m, n)

# Write to 'lacusta.out'
with open('lacusta.out', 'w') as file:
    file.write(str(min_cost) + '\n')
```
```
