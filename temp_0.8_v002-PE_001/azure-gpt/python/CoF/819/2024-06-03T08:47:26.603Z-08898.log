---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `alice.in` and write to `alice.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o zi frumoasă de vară, Alice se juca în parc. Deodată, văzu un iepure cu ceas, numit Iepurele Alb, sărind grăbit în scorbura unui copac. Curioasă, Alice îl urmări şi sări şi ea în scorbură. Spre mirarea ei, ajunse într-o sală mare cu $N$ uşi încuiate. Pe fiecare uşă era scris câte un număr natural. Într-o clipă, lângă ea apăru Iepurele Alb şi-i spuse că doar uşile cu numere magice pot fi deschise dacă are cheile potrivite. Pentru a o ajuta, Iepurele Alb i-a explicat că un număr magic este un număr natural care poate fi redus la o cifră prin complementarea cifrelor acestuia faţă de cifra sa maximă din scrierea zecimală, apoi prin complementarea cifrelor numărului obţinut faţă de cifra sa maximă şi aşa mai departe până când se obţine o cifră. Evident, nu toate numerele naturale sunt numere magice. De exemplu, uşa cu numărul $1234$ poate fi deschisă cu cheia inscripţionată cu cifra $1$ deoarece $1234$ este un număr magic ce poate fi redus la cifra $1$ prin complementări repetate ($1234 \rightarrow 3210 \rightarrow 123 \rightarrow 210 \rightarrow 12 \rightarrow 10 \rightarrow 1$), iar uşa cu numărul $1204$ nu poate fi deschisă deoarece $1204$ nu este un număr magic (indiferent de câte ori s-ar repeta complementarea nu poate fi redus la o cifră: $1204 \rightarrow 3240 \rightarrow 1204 \rightarrow 3240 \rightarrow 1204 \rightarrow ...$ ).

Înainte să dispară, Iepurele Alb îi dădu o cheie aurie inscripţionată cu cifra $K$ şi o avertiză că poate deschide cu această cheie doar uşile cu numere magice ce pot fi reduse la cifra $K$.

# Cerință

Scrieţi un program care să citească numerele naturale $N$, $K$ şi cele $N$ numere naturale scrise pe cele $N$ uşi, şi care să determine:

* cel mai mare număr par dintre numerele scrise pe cele $N$ uşi;
* numărul uşilor care pot fi deschise cu cheia aurie inscripţionată cu cifra $K$.

# Date de intrare


Pe prima linie a fișierului de intrare `alice.in` se găsesc numerele $N$ şi $K$ și pe cea de-a doua linie $N$ numere naturale reprezentând numerele scrise pe cele $N$ uşi.


# Date de ieșire

Programul va afișa in fișierul de ieșire `alice.out`, în această ordine:

* pe prima linie, un număr natural reprezentând cel mai mare număr par dintre numerele scrise pe cele $N$ uşi;
* pe cea de-a doua linie, un număr natural reprezentând numărul uşilor care pot fi deschise cu cheia aurie inscripţionată cu cifra $K$.


# Restricții și precizări

* $7 \leq N \leq 10 \ 000$;
* $0 \leq K \leq 9$;
* complementarea cifrelor unui număr natural faţă de cifra sa maximă din scrierea zecimală constă în înlocuirea fiecărei cifre $c$ din număr cu diferenţa dintre cifra maximă şi cifra $c$; de exemplu, cifra maximă a numărului $1234$ este $4$ iar prin complementare se înlocuieşte cifra $1$ cu $3$, cifra $2$ cu $2$, cifra $3$ cu $1$ şi cifra $4$ cu $0$ rezultând numărul $3210$;
* pe fiecare uşă este scris un singur număr natural;
* există cel puţin o uşă pe care este scris un număr par;
* numărul scris pe oricare uşă (din cele $N$) este mai mare sau egal cu 10 şi mai mic sau egal cu $32800$;
* pentru rezolvarea corectă a cerinţei a) se acordă 20% din punctaj, iar pentru rezolvarea corectă a ambelor cerinţe se acordă 100% din punctaj.

---

Example:
`alice.in`
```
7 1
1204 1234 13 195 23 10 888
```

`alice.out`
```
1234
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def complement(num):
    digits = [int(d) for d in str(num)]
    max_digit = max(digits)
    return int(''.join(str(max_digit - d) for d in digits))

def is_magic(num, target):
    seen = set()
    while True:
        if num in seen:
            return False
        if num == target:
            return True
        seen.add(num)
        num = complement(num)

def process_data(N, K, numbers):
    max_even = -1
    magic_count = 0

    for num in numbers:
        if num % 2 == 0 and num > max_even:
            max_even = num
        if is_magic(num, K):
            magic_count += 1

    return max_even, magic_count

def read_and_write_file():
    with open('alice.in', 'r') as fin:
        N, K = map(int, fin.readline().split())
        numbers = np.fromstring(fin.readline(), dtype=int, sep=' ')

    max_even, magic_count = process_data(N, K, numbers)

    with open('alice.out', 'w') as fout:
        fout.write(str(max_even) + '\n')
        fout.write(str(magic_count) + '\n')

read_and_write_file()
```

This code snippet should provide a solution that is efficient in both time and memory. The use of the numpy library ensures that the array of numbers is stored and processed in an efficient way, adhering to the memory constraint. The algorithm checks each number only once, and it uses a set to keep track of already seen numbers to avoid infinite loops, thus optimizing the execution time. The algorithm proceeds to read from 'alice.in' and writes the results to 'alice.out', respecting the problem's input/output requirements.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed or is not available in the current environment. Since the memory limit is quite stringent (~8MB) and we have restrictions on the use of third-party libraries, we can proceed without using `numpy` and implement the solution with standard Python libraries only.

Here's the rewritten solution without `numpy`:

```python
def complement(num):
    str_num = str(num)
    max_digit = max(str_num)
    return int(''.join(str(int(max_digit) - int(d)) for d in str_num))

def is_magic(num, target):
    seen = set()
    while True:
        if num in seen:
            return False
        if num < 10:
            return num == target
        seen.add(num)
        num = complement(num)

def process_data(N, K, numbers):
    max_even = -1
    magic_count = 0

    for num in numbers:
        if num % 2 == 0 and num > max_even:
            max_even = num
        if is_magic(num, K):
            magic_count += 1

    return max_even, magic_count

def read_and_write_file():
    with open('alice.in', 'r') as fin:
        N, K = map(int, fin.readline().split())
        numbers = list(map(int, fin.readline().split()))

    max_even, magic_count = process_data(N, K, numbers)

    with open('alice.out', 'w') as fout:
        fout.write(str(max_even) + '\n')
        fout.write(str(magic_count) + '\n')

read_and_write_file()
```

This code does not depend on external libraries like `numpy` and should work within the memory constraints while reading from `alice.in` and writing to `alice.out` as required.
