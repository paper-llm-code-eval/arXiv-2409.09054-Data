---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to calculate the 'grade' of a word
def word_grade(word):
    return np.sum(np.frombuffer(word.encode('utf-8'), dtype=np.uint8) - 96)

# Read input from 'grad.in'
with open('grad.in', 'r') as file:
    n = int(file.readline().strip())
    text = file.readline().strip().encode('utf-8')

# Split the words and calculate the number of words
words = np.split(np.frombuffer(text, dtype=np.uint8), np.where(np.frombuffer(text, dtype=np.uint8) == 32)[0]+1)
words = [word for word in words if word.size > 0]  # Remove any empty "words" resulted from split
num_words = len(words)

# Calculate the 'grade' for each word and count the number of unique grades
grades = np.array([word_grade(word) for word in words])
unique_grades = np.unique(grades).size

# Write output to 'grad.out'
with open('grad.out', 'w') as file:
    file.write(f"{num_words}\n{unique_grades}\n")
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Read input from 'grad.in'
with open('grad.in', 'r') as file:
    n = int(file.readline().strip())
    text = file.readline().strip().encode('utf-8')

# Calculate the 'grade' of a word
def word_grade(word):
    return np.sum(word - 96)

# Split the words
words = np.split(np.frombuffer(text, dtype=np.uint8), np.where(np.frombuffer(text, dtype=np.uint8) == 32)[0]+1)
words = [word for word in words if word.size > 0]  # Filter out empty arrays resulting from consecutive spaces

# Calculate the number of words
num_words = len(words)

# Calculate the 'grade' for each word
grades = np.array([word_grade(word) for word in words])

# Count the number of unique grades
unique_grades = np.unique(grades).size

# Write output to 'grad.out'
with open('grad.out', 'w') as file:
    file.write("{}\n{}\n".format(num_words, unique_grades))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I apologize for the confusion. Since the environment does not support `numpy`, I will provide an alternative solution using standard Python libraries which are memory efficient.

Here is the revised solution:

```python
# Function to calculate the 'grade' of a word
def word_grade(word):
    return sum(ord(char) - ord('a') + 1 for char in word)

# Initialize a dictionary to count the frequency of each grade
grades = {}

# Read input from 'grad.in'
with open('grad.in', 'r') as file:
    n = int(file.readline().strip())
    text = file.readline().strip()

# Split the words and count the grades
words = text.split()
num_words = len(words)

for word in words:
    grade = word_grade(word)
    grades[grade] = grades.get(grade, 0) + 1

# Count the number of unique grades
unique_grades = len(grades)

# Write output to 'grad.out'
with open('grad.out', 'w') as file:
    file.write(f"{num_words}\n{unique_grades}\n")
```
