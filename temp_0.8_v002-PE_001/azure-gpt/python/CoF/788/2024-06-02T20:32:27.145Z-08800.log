---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def calculate_word_grade(word):
    return np.sum(np.frombuffer(word.encode('utf-8'), dtype=np.uint8) - 96)

def process_text(text):
    words = text.split()
    grades = np.array(list(map(calculate_word_grade, words)))
    unique_grades = np.unique(grades)
    return len(words), len(unique_grades)

def main():
    with open('grad.in', 'r') as infile:
        n = int(infile.readline().strip())
        text = infile.readline().strip()

    num_words, num_groups = process_text(text)

    with open('grad.out', 'w') as outfile:
        outfile.write(f'{num_words}\n{num_groups}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    with open('grad.in', 'r') as infile:
        n = int(infile.readline().strip())
        text = infile.readline().strip()

    # Convert text to numeric array where 'a' corresponds to 1, 'b' to 2, etc.
    text_array = np.frombuffer(text.encode('utf-8'), dtype=np.uint8) - ord('a') + 1

    # Replace spaces (which are now -32) with zeros to separate words
    text_array[text_array < 0] = 0

    # Find the boundaries of words (non-zero to zero transitions)
    word_boundaries = np.where(np.diff((text_array == 0).astype(int)) == 1)[0]

    # Number of words is one more than the number of boundaries
    num_words = len(word_boundaries) + 1

    # Calculate grades for each word
    word_grades = np.add.reduceat(text_array, np.append([0], word_boundaries + 1))
    word_grades = word_grades[word_grades != 0]  # Remove zero grades corresponding to spaces

    # Calculate unique grades
    num_groups = len(np.unique(word_grades))

    with open('grad.out', 'w') as outfile:
        outfile.write(f'{num_words}\n{num_groups}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_word_grade(word):
    return np.sum(np.frombuffer(word.encode('utf-8'), dtype=np.uint8) - 96)

def process_text(text):
    words = text.split()
    grades = np.array([calculate_word_grade(word) for word in words])
    unique_grades = np.unique(grades)
    return len(words), len(unique_grades)

def main():
    with open('grad.in', 'r') as infile:
        _ = int(infile.readline().strip())  # Read and ignore the number of characters
        text = infile.readline().strip()

    num_words, num_groups = process_text(text)

    with open('grad.out', 'w') as outfile:
        outfile.write(f'{num_words}\n{num_groups}\n')

if __name__ == '__main__':
    main()
```
```

---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the grade of a single word
def word_grade(word):
    return np.sum(np.fromiter((ord(char) - 96 for char in word), dtype=np.int))

# Main function to process the file input and output
def main():
    with open('grad.in', 'r') as file:
        n = int(file.readline().strip())
        text = file.readline().strip()

    # Split the text into words and convert them into grades
    words = text.split()
    grades = np.array([word_grade(word) for word in words])

    # Calculate the number of unique grades to determine the number of groups
    unique_grades = np.unique(grades)
    num_groups = len(unique_grades)
    num_words = len(words)

    with open('grad.out', 'w') as file:
        file.write(f'{num_words}\n{num_groups}\n')

# Ensure the main function is called when the script is executed
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from 'grad.in'
with open('grad.in', 'r') as infile:
    n = int(infile.readline().strip())
    text = infile.readline().strip()

# Calculate word grades
word_grades = np.array([sum(ord(char) - ord('a') + 1 for char in word) for word in text.split()])
num_words = len(word_grades)
num_unique_grades = len(np.unique(word_grades))

# Write to 'grad.out'
with open('grad.out', 'w') as outfile:
    outfile.write(f'{num_words}\n{num_unique_grades}\n')
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import the numpy library
import numpy as np

# Define a function to calculate the grade of a word
def calculate_grade(word):
    # Use numpy for efficient computation of the grade
    return np.sum(np.fromiter((ord(char) - 96 for char in word), dtype=np.int32))

# Open the input and output files
with open('grad.in', 'r') as fin, open('grad.out', 'w') as fout:
    # Read the number of characters (not used) and the text itself
    _ = fin.readline()
    text = fin.readline().strip()

    # Split the text into words and calculate their grades
    words = text.split()
    grades = np.array([calculate_grade(word) for word in words])

    # Count the unique grades to find the number of groups
    unique_grades = len(np.unique(grades))

    # Write the number of words and the number of groups to the output file
    fout.write(f"{len(words)}\n{unique_grades}\n")
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the grade of a word
def calculate_grade(word):
    # Convert characters to their corresponding alphabet position and sum them
    return sum(ord(char) - ord('a') + 1 for char in word)

# Function to read input, process data, and write output
def main():
    # Read from 'grad.in'
    with open('grad.in', 'r') as infile:
        infile.readline()  # Skip the first line with the number of characters
        text = infile.readline().strip()

    # Split text into words and calculate their grades
    words = text.split()
    grades = np.array([calculate_grade(word) for word in words])

    # Get the number of unique grades
    unique_grades = np.unique(grades)

    # Write results to 'grad.out'
    with open('grad.out', 'w') as outfile:
        outfile.write(f'{len(words)}\n{len(unique_grades)}\n')

# Call the main function
if __name__ == '__main__':
    main()
```
```
