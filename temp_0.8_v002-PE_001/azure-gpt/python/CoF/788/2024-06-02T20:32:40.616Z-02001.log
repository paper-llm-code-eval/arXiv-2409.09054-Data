---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to calculate the grade of a word
def word_grade(word):
    return sum(ord(char) - 96 for char in word)

# Read the data
with open('grad.in', 'r') as file:
    n = int(file.readline())
    text = file.readline().strip()

# Process the text
words = text.split()
word_grades = np.array([word_grade(word) for word in words])

# Count the number of words
num_words = len(words)

# Count the number of unique groups
grade_groups, counts = np.unique(word_grades, return_counts=True)
num_groups = len(grade_groups)

# Write the output
with open('grad.out', 'w') as file:
    file.write(f"{num_words}\n{num_groups}\n")
```
```
---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to calculate the grade of a word
def word_grade(word):
    return sum(ord(char) - ord('a') + 1 for char in word)

# Read the data from `grad.in`
with open('grad.in', 'r') as file:
    n = int(file.readline())
    text = file.readline().strip()

# Process the text
words = text.split()
word_grades = np.array([word_grade(word) for word in words])

# Count the number of words
num_words = len(words)

# Count the number of unique grade groups
unique_grades = np.unique(word_grades)
num_groups = len(unique_grades)

# Write the output to `grad.out`
with open('grad.out', 'w') as file:
    file.write(f"{num_words}\n{num_groups}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the `numpy` module is not available and the memory constraint is strict, I'll rewrite the solution without using `numpy` or any other third-party library.

```python
# Function to calculate the grade of a word
def word_grade(word):
    return sum(ord(char) - ord('a') + 1 for char in word)

# Read the data from `grad.in`
with open('grad.in', 'r') as file:
    n = int(file.readline())
    text = file.readline().strip()

# Process the text
words = text.split()
word_grades = [word_grade(word) for word in words]

# Count the number of words
num_words = len(words)

# Count the number of unique grade groups using a set to store unique grades
unique_grades = set(word_grades)
num_groups = len(unique_grades)

# Write the output to `grad.out`
with open('grad.out', 'w') as file:
    file.write(f"{num_words}\n{num_groups}\n")
```
