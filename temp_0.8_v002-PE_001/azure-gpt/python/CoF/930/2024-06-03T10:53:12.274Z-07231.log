---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `concurs.in` and write to `concurs.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În orașul $X$ va avea loc o nouă ediție a concursului $Y$, la care participă trei echipe având numerele de concurs $1$, $2$ și $3$. Echipele pot avea număr diferit de concurenți. 

Ordinea în care participanții intră în concurs este una oarecare. Fiecare concurent are de susținut $9$ probe. La fiecare probă, un concurent obține un punctaj exprimat printr-un număr natural, cuprins între $0$ și $10$, inclusiv.

La scurt timp după ce un concurent a susținut toate cele $9$ probe, se afișează performanța concurentului sub forma a două numere naturale, astfel:

* primul număr poate fi $1$, $2$ sau $3$ și reprezintă echipa din care face parte concurentul;
* al doilea număr este obținut prin concatenarea (alipirea) numerelor ce reprezintă punctajele **nenule** obținute de concurent la cele $9$ probe. Dacă un concurent are punctaj $0$ la toate probele atunci al doilea număr este $0$.

Punctajul total al unui concurent se obține adunând punctajele obținute de acesta la cele $9$ probe. Punctajul unei echipe se obține adunând punctajele totale obtinute de membrii acesteia. De exemplu, afișajul $2\ 14102172$ semnifică faptul că acest concurent face parte din echipa $2$ și are punctajele nenule $1$, $4$, $10$, $2$, $1$, $7$ și $2$, la $7$ dintre cele 9 probe susținute. La celelalte două probe a avut punctajul $0$. Punctajul său total este $27$, contribuția sa la punctajul echipei $2$ fiind de $27$ de puncte.

Este declarată campioană echipa cu punctajul cel mai mare. Dacă mai multe echipe au obținut cel mai mare punctaj, atunci toate aceste echipe sunt declarate campioane. Totuși, dacă toate echipele au totalizat $0$ puncte, atunci nicio echipă nu este declarată campioană.

# Cerință

Cunoscând numărul $N$ de concurenți, echipele din care fac parte precum și punctajele obținute de fiecare dintre ei, să se determine:

1. punctajul maxim obținut de un concurent și numărul de concurenți care au obținut acest punctaj;
2. numărul sau numerele de concurs ale echipelor declarate campioane, în ordine crescătoare, și punctajul obținut de acestea. Dacă toate echipele au punctajul final $0$, se va afișa textul `FARA CAMPION`.

# Date de intrare

Fișierul de intrare `concurs.in` conține pe prima linie un număr $C$ (care poate fi $1$ sau $2$), indicând cerința de rezolvat. 
Pe a doua linie se găsește un număr natural $N$ reprezentând numărul de concurenți, iar pe fiecare dintre următoarele $N$ linii se găsesc câte două numere naturale, separate printr-un spațiu, reprezentând echipa și punctajele fiecăruia dintre cei $N$ concurenți, în ordinea intrării în concurs.

# Date de ieșire

1. Dacă $C = 1$, fișierul de ieșire `concurs.out` va conține pe o singură linie două numere naturale, separate printr-un spațiu, reprezentând punctajul maxim obținut de un concurent și numărul de concurenți care au obținut acest punctaj.
2. Dacă $C = 2$, fișierul de ieșire va conține pe o singură linie textul `FARA CAMPION` dacă toate echipele au la final punctajul $0$. În caz contrar linia va conține două, trei sau patru numere naturale separate prin câte un spațiu, reprezentând numărul sau numerele de concurs ale echipelor declarate campioane, în ordine crescătoare, și apoi punctajul obținut de acestea.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* Pentru teste în valoare de $35$ de puncte avem $C = 1$.
* Pentru teste în valoare de $65$ de puncte avem $C = 2$.

---

Example:
`concurs.in`
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```

`concurs.out`
```
31 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block for the solution

import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        competitors = [list(map(int, file.readline().split())) for _ in range(n)]
    return c, competitors

def write_output(filename, content):
    with open(filename, 'w') as file:
        if isinstance(content, str):
            file.write(content)
        else:
            file.write(' '.join(map(str, content)))

def process_competitors(competitors):
    individual_scores = np.zeros(len(competitors), dtype=int)
    team_scores = np.zeros(4, dtype=int)  # including index 0 for convenience
    for i, (team, scores) in enumerate(competitors):
        score = 0
        for s in str(scores):
            score += int(s)
        individual_scores[i] = score
        team_scores[team] += score
    return individual_scores, team_scores

def find_champions_and_max_score(c, competitors):
    individual_scores, team_scores = process_competitors(competitors)
    if c == 1:
        max_score = np.max(individual_scores)
        count = np.sum(individual_scores == max_score)
        return [max_score, count]
    elif c == 2:
        max_team_score = np.max(team_scores)
        if max_team_score == 0:
            return "FARA CAMPION"
        champions = np.nonzero(team_scores == max_team_score)[0]
        return list(champions[1:]) + [max_team_score]  # Exclude index 0

def main():
    c, competitors = read_input('concurs.in')
    result = find_champions_and_max_score(c, competitors)
    write_output('concurs.out', result)

if __name__ == "__main__":
    main()
```

This solution reads the input data from `concurs.in`, processes it to find the required results for either subtask 1 or subtask 2, and writes the result to `concurs.out`. The solution uses numpy to efficiently handle the array operations while keeping the memory usage low, as numpy arrays are more memory-efficient than Python lists for large amounts of numerical data.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed in the environment where the program is being executed. Since the memory limit is quite tight and we need to optimize for both time and memory, and considering the fact that we cannot use external libraries like `numpy`, we must fall back to using Python's built-in data structures and functionality to create an efficient solution.

Here is the revised solution without using `numpy`:

```python
# markdown code block for the solution

def process_competitors(competitors):
    individual_scores = []
    team_scores = [0, 0, 0, 0]  # team_scores[0] is not used
    for team, scores_str in competitors:
        score = sum(int(digit) for digit in scores_str if digit != '0')
        individual_scores.append(score)
        team_scores[team] += score
    return individual_scores, team_scores

def find_champions_and_max_score(c, competitors):
    individual_scores, team_scores = process_competitors(competitors)
    if c == 1:
        max_score = max(individual_scores)
        count = individual_scores.count(max_score)
        return [max_score, count]
    elif c == 2:
        max_team_score = max(team_scores[1:])
        if max_team_score == 0:
            return "FARA CAMPION"
        champions = [i for i, score in enumerate(team_scores[1:], start=1) if score == max_team_score]
        return champions + [max_team_score]

def main():
    with open('concurs.in', 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        competitors = [file.readline().split() for _ in range(n)]
    
    result = find_champions_and_max_score(c, competitors)
    
    with open('concurs.out', 'w') as file:
        if isinstance(result, str):
            file.write(result)
        else:
            file.write(' '.join(map(str, result)))

if __name__ == "__main__":
    main()
```

This solution solely relies on Python's built-in functionalities, which should be available in any standard Python environment. It reads the input from the `concurs.in` file, processes it accordingly, and writes the output to the `concurs.out` file. The processing functions are adjusted to work without `numpy`, using list comprehensions and built-in functions like `max` and `sum` to calculate the necessary scores.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 40, in <module>
    main()
  File "/app/app.py", line 31, in main
    result = find_champions_and_max_score(c, competitors)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 13, in find_champions_and_max_score
    individual_scores, team_scores = process_competitors(competitors)
                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 9, in process_competitors
    team_scores[team] += score
    ~~~~~~~~~~~^^^^^^
TypeError: list indices must be integers or slices, not str

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error is due to the fact that we are using a string (since every input from a file is read as a string) as an index to the `team_scores` list, which requires an integer index. We need to convert the team number and scores from strings to integers before processing them.

Here is the corrected solution:

```python
# markdown code block for the solution

def process_competitors(competitors):
    individual_scores = []
    team_scores = [0, 0, 0, 0]  # team_scores[0] is not used
    for team_str, scores_str in competitors:
        team = int(team_str)
        score = sum(int(digit) for digit in scores_str if digit != '0')
        individual_scores.append(score)
        team_scores[team] += score
    return individual_scores, team_scores

def find_champions_and_max_score(c, competitors):
    individual_scores, team_scores = process_competitors(competitors)
    if c == 1:
        max_score = max(individual_scores)
        count = individual_scores.count(max_score)
        return [max_score, count]
    elif c == 2:
        max_team_score = max(team_scores[1:])
        if max_team_score == 0:
            return "FARA CAMPION"
        champions = [i for i, score in enumerate(team_scores[1:], start=1) if score == max_team_score]
        return champions + [max_team_score]

def main():
    with open('concurs.in', 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        competitors = [file.readline().split() for _ in range(n)]
    
    result = find_champions_and_max_score(c, competitors)
    
    with open('concurs.out', 'w') as file:
        if isinstance(result, str):
            file.write(result)
        else:
            file.write(' '.join(map(str, result)))

if __name__ == "__main__":
    main()
```

Now, when reading the competitors' data, the team number is converted to an integer before being used as an index in the `team_scores` list. The same is done with the individual scores for each competitor, where digits are converted to integers before summing. This should solve the `TypeError` and allow the program to execute correctly.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```
Expected output:
```
31 4
```
Found output:
```
28 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue in the previous solution is that it calculates each competitor's score by converting their scores from a string to individual digits and summing those up, without accounting for scores that are two-digit numbers (like 10). We need to update the `process_competitors` function to correctly handle the digit '0' as part of a two-digit score '10' instead of treating all '0's as zero scores.

Here is the corrected solution:

```python
# markdown code block for the solution

def process_competitors(competitors):
    individual_scores = []
    team_scores = [0, 0, 0, 0]  # team_scores[0] is not used
    for team_str, scores_str in competitors:
        team = int(team_str)
        # Replace '10' with a single character that does not conflict with '0' to '9'
        scores_str = scores_str.replace('10', 'a') 
        score = sum(10 if digit == 'a' else int(digit) for digit in scores_str if digit != '0')
        individual_scores.append(score)
        team_scores[team] += score
    return individual_scores, team_scores

def find_champions_and_max_score(c, competitors):
    individual_scores, team_scores = process_competitors(competitors)
    if c == 1:
        max_score = max(individual_scores)
        count = individual_scores.count(max_score)
        return [max_score, count]
    elif c == 2:
        max_team_score = max(team_scores[1:])
        if max_team_score == 0:
            return "FARA CAMPION"
        champions = [i for i, score in enumerate(team_scores[1:], start=1) if score == max_team_score]
        return champions + [max_team_score]

def main():
    with open('concurs.in', 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        competitors = [file.readline().split() for _ in range(n)]
    
    result = find_champions_and_max_score(c, competitors)
    
    with open('concurs.out', 'w') as file:
        if isinstance(result, str):
            file.write(result)
        else:
            file.write(' '.join(map(str, result)))

if __name__ == "__main__":
    main()
```

This approach first replaces '10' with a placeholder character 'a', then computes the score by converting the placeholder back to 10 or each digit to an integer, ensuring that '10' is counted as one score of 10 points, not two scores of 1 and 0 points. It also skips '0' during the summing process. The rest of the solution remains unchanged. This should provide the correct results.
