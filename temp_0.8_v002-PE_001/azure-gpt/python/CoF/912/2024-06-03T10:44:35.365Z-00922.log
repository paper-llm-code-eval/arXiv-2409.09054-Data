---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cate3cifre.in` and write to `cate3cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel, pasionat de numere, știe că orice număr natural se scrie într-o bază de numerație $b$ ca o succesiune de simboluri care au asociate valori de la $0$ la $b - 1$. De exemplu numărul $7$, scris în baza $10$, se scrie în baza $2$ ca $111 \ (2)$, iar numărul $26732$, scris în baza $10$, se scrie în baza $37$ ca o succesiune de $3$ simboluri, primele două având asociată valoarea $19$, iar ultimul având asociată valoarea $18$. El a descoperit că există numere care au proprietatea că se scriu, în **exact două** baze diferite, prin exact trei simboluri identice. De exemplu, numărul $931 \ (10)$ se scrie în baza $11$ ca $777 \ (11)$, iar în baza $30$ se scrie $111 \ (30)$.

# Cerință

Fiind dat un număr natural $N$, să se determine cel mai mare număr natural mai mic sau egal cu $N$, care are proprietatea că se scrie în exact două baze diferite prin exact $3$ simboluri identice.
1. Să se scrie numărul determinat
2. Să se scrie cele două baze determinate și valorile simbolurilor respective.

# Date de intrare

Fişierul de intrare `cate3cifre.in` conţine pe prima linie cerința ($1$ sau $2$). Pe linia a doua a fișierului de intrare se află numărul natural $N$.

# Date de ieșire

Fişierul de ieşire `cate3cifre.out` va conține pe prima linie, dacă cerința este $1$, numărul determinat. Dacă cerința este $2$, prima și cea de a doua linie a fișierului de ieșire au aceeași structură: pe fiecare linie se vor scrie, separate printr-un spațiu, două numere naturale $b \ c$, reprezentând baza și valoarea simbolului cerut din baza respectivă. Cele două baze se vor afișa în ordine crescătoare.

# Restricții și precizări

* $0 < N \leq 1 \ 000 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se acordă $60$ de puncte. Pentru cerința $2$, se acordă $30$ de puncte.
* Pentru $50$ de puncte $N \leq 10 \ 000$;
* Se dau $10$ puncte din oficiu (teste corespunzatoare acestor puncte vor coincide cu primul exemplu)
* Numărul $xyz \ (b)$ scris în baza $b$ cu simbolurile $x, y, z$ se scrie în baza $10$ ca o valoare calculată astfel: $x \cdot b^2 + y \cdot b + z$ (unde simbolurile $x, y, z$ se înlocuiesc cu valorile asociate)
* Pentru fiecare test există soluție.

---

Example:
`cate3cifre.in`
```
1
1000
```

`cate3cifre.out`
```
931
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:````markdown
```python
import numpy as np

# Function to find the largest number <= N which can be written in exactly two bases
# with three identical symbols
def find_largest_number(N):
    for num in range(N, 0, -1):  # Start from N and go down to 1
        bases = []
        for base in range(2, num):  # Check for all possible bases
            if num // (base ** 2) < 1:
                break  # If quotient is less than 1, the base is too high to continue
            if num // (base ** 2) > 9:
                continue  # If quotient is greater than 9, we cannot have 3 identical symbols
            if num == ((num // (base ** 2)) * (base ** 2) + (num // base % base) * base + num % base):
                if num // (base ** 2) == num // base % base == num % base:
                    bases.append(base)
            if len(bases) == 2:  # We found the two bases
                return (num, bases)
    return None  # If no such number exists

# Function to write the output to the output file
def write_output(file_name, content, task):
    with open(file_name, 'w') as file:
        if task == 1:
            file.write(str(content) + '\n')
        elif task == 2:
            for base, symbol in sorted(content):
                file.write(f"{base} {symbol}\n")

# Read from input file
with open('cate3cifre.in', 'r') as file:
    task = int(file.readline().strip())
    N = int(file.readline().strip())

# Process based on the task
if task == 1:
    result = find_largest_number(N)
    write_output('cate3cifre.out', result[0], task)
elif task == 2:
    result = find_largest_number(N)
    symbol = result[0] // (result[1][0] ** 2)
    write_output('cate3cifre.out', [(result[1][0], symbol), (result[1][1], symbol)], task)
```
````

Note: This code has been written with the memory limit in mind. It does not use any additional memory-heavy data structures or libraries beyond the basic requirements of the problem. It also follows the constraints provided in the description, iterating over each possible number and testing each possible base until finding the solution.
---------- user ----------


Expected program to write result to `cate3cifre.out` and read from `cate3cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
