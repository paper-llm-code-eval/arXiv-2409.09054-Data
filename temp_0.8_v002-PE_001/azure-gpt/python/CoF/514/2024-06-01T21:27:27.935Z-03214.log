---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Please note that this code is intended to be run as a standalone script and will not work in an interactive interpreter.
# You would need to save this as a Python file and run it in an environment with the appropriate memory constraints.

import numpy as np
from sympy import prevprime, nextprime

# Function to calculate the cost of a single number
def cost(a):
    lower_prime = prevprime(a + 1)
    upper_prime = nextprime(a - 1)
    return min(abs(a - lower_prime), abs(upper_prime - a))

# Function to calculate the cost of all elements in an array
def calculate_costs(arr):
    costs = np.vectorize(cost)(arr)
    return costs

# Function to read input numbers from file
def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        C = int(lines[0])
        n = int(lines[1])
        elements = np.array(list(map(int, lines[2].split())), dtype=np.int32)
        if C == 2:
            q = int(lines[3])
            operations = [list(map(int, line.split())) for line in lines[4:4+q]]
            return C, n, elements, q, operations
        else:
            return C, n, elements, None, None

# Function to write output to file
def write_output(filename, results):
    with open(filename, 'w') as file:
        for result in results:
            file.write(f"{result}\n")

# Function to process the input and perform the operations
def process_operations(C, n, elements, q, operations):
    if C == 1:
        return [np.sum(calculate_costs(elements))]
    elif C == 2:
        results = []
        costs_arr = calculate_costs(elements)
        for i, x, p in operations:
            elements[i-1] = x  # Replace element at i with x
            costs_arr[i-1] = cost(x)  # Update the cost of the new element
            # Calculate the minimum total cost of p elements
            min_cost_sum = np.sum(np.partition(costs_arr, p-1)[:p])
            results.append(min_cost_sum)
        return results

# Read input, process it and write output
def main():
    input_filename = 'primprim.in'
    output_filename = 'primprim.out'
    
    C, n, elements, q, operations = read_input(input_filename)
    results = process_operations(C, n, elements, q, operations)
    write_output(output_filename, results)

if __name__ == "__main__":
    main()
```

This code reads from `primprim.in`, performs the necessary operations, and writes the results to `primprim.out` as requested. Please note that the `sympy` library is used here to find the nearest prime numbers, which may not be the most memory-efficient method. However, for numbers up to $10^6$, `sympy`'s prime generation is relatively efficient and shouldn't exceed the 8MB memory constraint for the number of primes that need to be checked. If memory usage is a concern, a custom prime sieve could be implemented instead.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 4, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
