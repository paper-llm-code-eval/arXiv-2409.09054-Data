---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def gcd(x, y):
    while y:
        x, y = y, x % y
    return x

# Read input
with open('numar.in', 'r') as file:
    ni, nz = map(int, file.readline().split())
    integer_part = int(''.join(file.readline().split()))
    decimal_part = int(''.join(file.readline().split()))

# Calculate a and b
a = integer_part * (10 ** nz) + decimal_part
b = 10 ** nz

# Simplify fraction
g = gcd(a, b)
a //= g
b //= g

# Write output
with open('numar.out', 'w') as file:
    file.write('{}\n{}\n{}\n{}'.format(len(str(a)), a, len(str(b)), b))
```
```
---------- user ----------


Expected program to write result to `numar.out` and read from `numar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Efficient GCD function using Euclid's algorithm
def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x

# Read input from file
with open('numar.in', 'r') as file:
    ni, nz = map(int, file.readline().split())
    integer_part = int(''.join(file.readline().split()))
    decimal_part = int(''.join(file.readline().split()))

# Calculate a and b
a = integer_part * (10 ** nz) + decimal_part
b = 10 ** nz

# Simplify fraction by dividing both a and b by their GCD
g = gcd(a, b)
a //= g
b //= g

# Write output to file
with open('numar.out', 'w') as file:
    file.write(f"{len(str(a))}\n{a}\n{len(str(b))}\n{b}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found. Since the use of `numpy` is not necessary for this problem, we can remove the import statement and rewrite the solution without using `numpy`.

Here is the revised solution:

```python
# Efficient GCD function using Euclid's algorithm
def gcd(x, y):
    while y != 0:
        x, y = y, x % y
    return x

# Read input from file
with open('numar.in', 'r') as file:
    ni, nz = map(int, file.readline().split())
    integer_part = int(''.join(file.readline().split()))
    decimal_part = int(''.join(file.readline().split()))

# Calculate a and b
a = integer_part * (10 ** nz) + decimal_part
b = 10 ** nz

# Simplify fraction by dividing both a and b by their GCD
g = gcd(a, b)
a //= g
b //= g

# Write output to file
with open('numar.out', 'w') as file:
    file.write(f"{len(str(a))}\n{a}\n{len(str(b))}\n{b}\n")
```
