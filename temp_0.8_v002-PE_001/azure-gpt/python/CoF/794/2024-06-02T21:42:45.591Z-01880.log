---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the Python solution to the provided challenge. I have used `numpy` for efficient mathematical calculations and handling large numbers. This code reads from `numar.in` and writes the results to `numar.out`.

Please note that to test this solution, you should have a file named `numar.in` in the same directory as your script with the specified content, and the script will create (or overwrite if it already exists) a file named `numar.out` in the same directory. The `numpy` library must be installed in your Python environment.

```python
import numpy as np

# Read input data from numar.in
with open('numar.in', 'r') as file:
    ni, nz = map(int, file.readline().split())
    integer_part = int(''.join(file.readline().split()))
    decimal_part = int(''.join(file.readline().split()))

# Convert the decimal to a fraction
divisor = 10 ** nz
numerator = integer_part * divisor + decimal_part
denominator = divisor

# Reduce the fraction to its simplest form
gcd = np.gcd(numerator, denominator)
numerator //= gcd
denominator //= gcd

# Find minimum difference between numerator and denominator
diff = abs(numerator - denominator)

# Save output data to numar.out
with open('numar.out', 'w') as file:
    file.write(f"{len(str(numerator))}\n")
    file.write(f"{numerator}\n")
    file.write(f"{len(str(denominator))}\n")
    file.write(f"{denominator}\n")
```

Make sure to run this code in an environment where the memory limit of ~8MB is respected. The `numpy.gcd` function helps efficiently compute the greatest common divisor, which is necessary for simplifying the fraction. If the input numbers are large, the standard Python `math.gcd` might not be memory-efficient enough, which is why `numpy` is used here.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the `numpy` module is not installed in the environment where the script is running, resulting in a `ModuleNotFoundError`. Since the challenge requires optimizing for memory usage and mentions the use of `numpy`, I assumed that `numpy` would be available. However, if `numpy` is not available or cannot be used due to the memory constraint, I will implement the solution using standard Python libraries only.

Here's the revised solution without using `numpy`:

```python
# Define a function to compute the greatest common divisor
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read input data from numar.in
with open('numar.in', 'r') as file:
    ni, nz = map(int, file.readline().split())
    integer_part = int(''.join(file.readline().split()))
    decimal_part = int(''.join(file.readline().split()))

# Convert the decimal to a fraction
divisor = 10 ** nz
numerator = integer_part * divisor + decimal_part
denominator = divisor

# Reduce the fraction to its simplest form
g = gcd(numerator, denominator)
numerator //= g
denominator //= g

# Find minimum difference between numerator and denominator
diff = abs(numerator - denominator)

# Save output data to numar.out
with open('numar.out', 'w') as file:
    file.write(f"{len(str(numerator))}\n")
    file.write(f"{numerator}\n")
    file.write(f"{len(str(denominator))}\n")
    file.write(f"{denominator}\n")
```

This code uses a custom `gcd` function to find the greatest common divisor of two numbers, which is used to reduce the fraction to its simplest form. It then writes the output to `numar.out` as specified. The usage of standard Python libraries ensures that no additional modules are required, avoiding the `ModuleNotFoundError`.
