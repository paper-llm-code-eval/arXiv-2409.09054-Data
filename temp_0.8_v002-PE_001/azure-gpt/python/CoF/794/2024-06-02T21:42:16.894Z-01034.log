---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to reduce the fraction by finding the greatest common divisor
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Function to find the minimum difference between a and b
def find_min_diff_fraction(ni, nz, int_part, dec_part):
    # Construct the numerator and denominator
    numerator = int_part * (10**nz) + dec_part
    denominator = 10**nz
    
    # Reduce the fraction by dividing both numerator and denominator by their gcd
    divisor = gcd(numerator, denominator)
    numerator //= divisor
    denominator //= divisor
    
    return numerator, denominator

# Read the input file
with open('numar.in', 'r') as f:
    ni, nz = map(int, f.readline().split())
    int_part = int(''.join(f.readline().split()))
    dec_part = int(''.join(f.readline().split()))

# Find the minimal difference fraction
a, b = find_min_diff_fraction(ni, nz, int_part, dec_part)

# Write the output file
with open('numar.out', 'w') as f:
    f.write(f"{len(str(a))}\n{a}\n{len(str(b))}\n{b}\n")
```

Please ensure that the `numar.in` file is present in the same directory as the script before running it, and it will create or overwrite the `numar.out` file with the appropriate output.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error occurred because the module `numpy` is not installed or not available in the environment where the script is being run. Since the use of `numpy` is not actually necessary for this task, we can remove the import statement for `numpy` and proceed with pure Python code to complete the challenge.

Here is the corrected solution without the dependency on `numpy`:

```python
# Function to reduce the fraction by finding the greatest common divisor
def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a

# Function to find the minimum difference between a and b
def find_min_diff_fraction(ni, nz, int_part, dec_part):
    # Construct the numerator and denominator
    numerator = int_part * (10**nz) + dec_part
    denominator = 10**nz
    
    # Reduce the fraction by dividing both numerator and denominator by their gcd
    divisor = gcd(numerator, denominator)
    numerator //= divisor
    denominator //= divisor
    
    return numerator, denominator

# Read the input file
with open('numar.in', 'r') as f:
    ni, nz = map(int, f.readline().split())
    int_part = int(''.join(f.readline().split()))
    dec_part = int(''.join(f.readline().split()))

# Find the minimal difference fraction
a, b = find_min_diff_fraction(ni, nz, int_part, dec_part)

# Write the output file
with open('numar.out', 'w') as f:
    f.write(f"{len(str(a))}\n{a}\n{len(str(b))}\n{b}\n")
```

This version of the code does not rely on external libraries and should work in a standard Python environment. Please ensure to have `numar.in` file with the correct input format in the same directory as the script, and it will generate `numar.out` with the expected output.
