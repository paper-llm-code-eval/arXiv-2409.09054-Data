---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# pelican.py
import numpy as np

# Helper function to parse and execute command
def execute_command(ducks, command, directions, N):
    letter, number = command
    number = int(number)
    
    if letter == 'A':
        for duck in ducks:
            if duck[2] == 1:  # North
                duck[0] = (duck[0] - number) % N
            elif duck[2] == 2:  # East
                duck[1] = (duck[1] + number) % N
            elif duck[2] == 3:  # South
                duck[0] = (duck[0] + number) % N
            elif duck[2] == 4:  # West
                duck[1] = (duck[1] - number) % N

    elif letter == 'R':
        for duck in ducks:
            duck[2] = directions[(directions.index(duck[2]) + number) % 4]

    elif letter == 'Z':
        for duck in ducks:
            duck[0], duck[1] = divmod(number, N)

# Main function to read, process, and write data
def main():
    with open('pelican.in', 'r') as file:
        N, P, K = map(int, file.readline().split())
        ducks = np.loadtxt(file, dtype=int, max_rows=P)
        commands = [file.readline().split() for _ in range(K)]

    directions = [1, 2, 3, 4]

    for command in commands:
        execute_command(ducks, command, directions, N)

    with open('pelican.out', 'w') as file:
        for duck in ducks:
            file.write(f"{duck[0]} {duck[1]}\n")

if __name__ == '__main__':
    main()
```

This solution should be efficient both in terms of time and memory, as it utilizes numpy for reading the input file and avoiding unnecessary copying of arrays. The commands are executed in place, modifying the ducks' positions directly, and the changes are written to the output file once all commands have been processed. This should meet the memory constraints of the problem.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the error occurred because the `numpy` library is not available in the environment. Given that the memory limit for the solution is ~8MB, relying on `numpy` might not be the best approach anyway, due to the potential overhead it might introduce.

Considering the constraints and required optimization, I'll rewrite the solution using only built-in Python data structures and functions, which should be memory-efficient and not require any external library:

```python
# Execute command based on the letter and number
def execute_command(duck, letter, number, N):
    if letter == 'A':
        if duck[2] == 1:  # North
            duck[0] = (duck[0] - number) % N
        elif duck[2] == 2:  # East
            duck[1] = (duck[1] + number) % N
        elif duck[2] == 3:  # South
            duck[0] = (duck[0] + number) % N
        elif duck[2] == 4:  # West
            duck[1] = (duck[1] - number) % N

    elif letter == 'R':
        duck[2] = (duck[2] - 1 + number) % 4 + 1

    elif letter == 'Z':
        duck[0], duck[1] = divmod(number, N)

# Read data from pelican.in
with open('pelican.in', 'r') as file:
    N, P, K = map(int, file.readline().split())
    ducks = [list(map(int, file.readline().split())) for _ in range(P)]
    commands = [file.readline().split() for _ in range(K)]

# Process each command for all ducks
for letter, number in commands:
    number = int(number)
    for duck in ducks:
        execute_command(duck, letter, number, N)

# Write final positions to pelican.out
with open('pelican.out', 'w') as file:
    for duck in ducks:
        file.write(f'{duck[0]} {duck[1]}\n')
```

This solution processes the commands one by one for each duck, updating their position in place. It respects the memory limit by avoiding excessive data structures and not using heavy libraries. The input and output are handled using file reading and writing, as required.
