---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to perform the command
def execute_command(ducks, command, N):
    action, value = command.split()
    value = int(value)
    
    if action == 'A':  # Advance
        for duck in ducks:
            if duck[2] == 1:  # North
                duck[1] = (duck[1] - value) % N
            elif duck[2] == 2:  # East
                duck[0] = (duck[0] + value) % N
            elif duck[2] == 3:  # South
                duck[1] = (duck[1] + value) % N
            elif duck[2] == 4:  # West
                duck[0] = (duck[0] - value) % N

    elif action == 'R':  # Rotate
        for duck in ducks:
            duck[2] = ((duck[2] - 1 + value) % 4) + 1

    elif action == 'Z':  # Fly
        for duck in ducks:
            duck[0], duck[1] = divmod(value, N)

# Read the input from file
with open('pelican.in', 'r') as fin:
    N, P, K = map(int, fin.readline().split())
    ducks = [list(map(int, fin.readline().split())) for _ in range(P)]
    commands = [fin.readline().strip() for _ in range(K)]

# Execute the commands
for command in commands:
    execute_command(ducks, command, N)

# Write the output to file
with open('pelican.out', 'w') as fout:
    for duck in ducks:
        fout.write(f"{duck[0]} {duck[1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def execute_commands(ducks_positions, commands, N):
    # Translate directions to array indices (N, E, S, W = 0, 1, 2, 3)
    direction_indices = {1: 0, 2: 1, 3: 2, 4: 3}
    
    # Array to map direction index to movement (row_change, col_change)
    directions = np.array([[-1, 0], [0, 1], [1, 0], [0, -1]])
    
    # Loop through commands and execute them
    for command in commands:
        action, value = command.split()
        value = int(value)

        if action == 'A':  # Advance
            # Calculate the change for each duck based on their direction
            moves = directions[[direction_indices[dir] for dir in ducks_positions[:, 2]]] * value
            ducks_positions[:, :2] = (ducks_positions[:, :2] + moves) % N
        
        elif action == 'R':  # Rotate
            # Update direction based on rotation value
            ducks_positions[:, 2] = (ducks_positions[:, 2] + value - 1) % 4 + 1
        
        elif action == 'Z':  # Fly
            # Set new positions for all ducks
            ducks_positions[:, 0] = value // N
            ducks_positions[:, 1] = value % N

    return ducks_positions

# Read the input
with open('pelican.in', 'r') as fin:
    N, P, K = map(int, fin.readline().split())
    ducks_positions = np.array([list(map(int, fin.readline().split())) for _ in range(P)])
    commands = [fin.readline().strip() for _ in range(K)]

# Execute the commands
ducks_positions = execute_commands(ducks_positions, commands, N)

# Write the output
with open('pelican.out', 'w') as fout:
    for i in range(P):
        fout.write(f"{ducks_positions[i, 0]} {ducks_positions[i, 1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Solution without the use of numpy to conserve memory usage

def perform_advance(ducks, value, N):
    for duck in ducks:
        if duck[2] == 1:  # North
            duck[1] = (duck[1] - value) % N
        elif duck[2] == 2:  # East
            duck[0] = (duck[0] + value) % N
        elif duck[2] == 3:  # South
            duck[1] = (duck[1] + value) % N
        elif duck[2] == 4:  # West
            duck[0] = (duck[0] - value) % N

def perform_rotate(ducks, value):
    for duck in ducks:
        duck[2] = ((duck[2] - 1 + value) % 4) + 1

def perform_fly(ducks, value, N):
    for duck in ducks:
        duck[0], duck[1] = divmod(value, N)

# Read the input from file
with open('pelican.in', 'r') as fin:
    N, P, K = map(int, fin.readline().split())
    ducks = [list(map(int, fin.readline().split())) for _ in range(P)]
    commands = [fin.readline().strip() for _ in range(K)]

# Execute the commands
for command in commands:
    action, value = command.split()
    value = int(value)
    
    if action == 'A':
        perform_advance(ducks, value, N)
    elif action == 'R':
        perform_rotate(ducks, value)
    elif action == 'Z':
        perform_fly(ducks, value, N)

# Write the output to file
with open('pelican.out', 'w') as fout:
    for duck in ducks:
        fout.write(f"{duck[0]} {duck[1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution without using numpy to conserve memory.

# Function to perform the command
def execute_command(ducks, command, N):
    action, value = command[0], int(command[1:])
    
    for duck in ducks:
        if action == 'A':  # Advance
            if duck[2] == 1:  # North
                duck[0] = (duck[0] - value) % N
            elif duck[2] == 2:  # East
                duck[1] = (duck[1] + value) % N
            elif duck[2] == 3:  # South
                duck[0] = (duck[0] + value) % N
            elif duck[2] == 4:  # West
                duck[1] = (duck[1] - value) % N
        elif action == 'R':  # Rotate
            duck[2] = ((duck[2] - 1 + (value // 90)) % 4) + 1
        elif action == 'Z':  # Fly
            duck[0], duck[1] = divmod(value, N)

# Read the input from file
with open('pelican.in', 'r') as fin:
    N, P, K = map(int, fin.readline().split())
    ducks = [list(map(int, line.split())) for line in fin.readlines()[:P]]
    commands = fin.readlines()[P:]

# Execute the commands
for command in commands:
    execute_command(ducks, command.strip(), N)

# Write the output to file
with open('pelican.out', 'w') as fout:
    for duck in ducks:
        fout.write(f"{duck[0]} {duck[1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to perform the advance action
def advance(duck, value, N):
    if duck[2] == 1:  # North
        duck[0] = (duck[0] - value) % N
    elif duck[2] == 2:  # East
        duck[1] = (duck[1] + value) % N
    elif duck[2] == 3:  # South
        duck[0] = (duck[0] + value) % N
    elif duck[2] == 4:  # West
        duck[1] = (duck[1] - value) % N

# Function to perform the rotate action
def rotate(duck, value):
    duck[2] = (duck[2] + value - 1) % 4 + 1

# Function to perform the fly action
def fly(duck, value, N):
    duck[0], duck[1] = divmod(value, N)

# Read input data from file
with open('pelican.in', 'r') as file:
    N, P, K = map(int, file.readline().split())
    ducks = [list(map(int, file.readline().split())) for _ in range(P)]
    commands = [file.readline().strip().split() for _ in range(K)]

# Execute commands
for command in commands:
    action = command[0]
    value = int(command[1])

    if action == 'A':
        for duck in ducks:
            advance(duck, value, N)
    elif action == 'R':
        for duck in ducks:
            rotate(duck, value // 90)  # number of 90 degree turns
    elif action == 'Z':
        for duck in ducks:
            fly(duck, value, N)

# Write output data to file
with open('pelican.out', 'w') as file:
    for duck in ducks:
        file.write(f"{duck[0]} {duck[1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to execute a series of commands on the ducks' positions
def execute_commands(ducks, commands, N):
    for command in commands:
        action, value = command[0], int(command[1:])
        if action == 'A':  # Advance
            for duck in ducks:
                if duck[2] == 1:  # North
                    duck[0] = (duck[0] - value) % N
                elif duck[2] == 2:  # East
                    duck[1] = (duck[1] + value) % N
                elif duck[2] == 3:  # South
                    duck[0] = (duck[0] + value) % N
                elif duck[2] == 4:  # West
                    duck[1] = (duck[1] - value) % N
        elif action == 'R':  # Rotate
            for duck in ducks:
                duck[2] = ((duck[2] - 1 + (value // 90)) % 4) + 1
        elif action == 'Z':  # Fly
            for duck in ducks:
                duck[0], duck[1] = divmod(value, N)

# Read the input from 'pelican.in'
with open('pelican.in', 'r') as file_in:
    N, P, K = map(int, file_in.readline().split())
    ducks = [list(map(int, file_in.readline().split())) for _ in range(P)]
    commands = [file_in.readline().strip() for _ in range(K)]

# Execute all commands
execute_commands(ducks, commands, N)

# Write the output to 'pelican.out'
with open('pelican.out', 'w') as file_out:
    for duck in ducks:
        file_out.write(f"{duck[0]} {duck[1]}\n")
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Define functions to handle each command type
def handle_advance(i, j, d, nr, N):
    if d == 1:  # North
        return (i - nr) % N, j, d
    elif d == 2:  # East
        return i, (j + nr) % N, d
    elif d == 3:  # South
        return (i + nr) % N, j, d
    elif d == 4:  # West
        return i, (j - nr) % N, d

def handle_rotate(i, j, d, nr):
    return i, j, (d - 1 + nr) % 4 + 1

def handle_fly(i, j, d, nr, N):
    return nr // N, nr % N, d

# Read input data from file
with open('pelican.in', 'r') as fin:
    N, P, K = map(int, fin.readline().split())
    ducks = [tuple(map(int, fin.readline().split())) for _ in range(P)]
    commands = [fin.readline().strip().split() for _ in range(K)]

# Process each command
for cmd, nr in commands:
    nr = int(nr)
    for idx in range(P):
        if cmd == 'A':
            ducks[idx] = handle_advance(*ducks[idx], nr, N)
        elif cmd == 'R':
            ducks[idx] = handle_rotate(*ducks[idx], nr // 90)
        elif cmd == 'Z':
            ducks[idx] = handle_fly(*ducks[idx], nr, N)

# Write output data to file
with open('pelican.out', 'w') as fout:
    for duck in ducks:
        fout.write(f"{duck[0]} {duck[1]}\n")
```
```
