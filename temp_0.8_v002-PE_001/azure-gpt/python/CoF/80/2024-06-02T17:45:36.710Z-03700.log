---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `stdin` and write to `stdout`.
The solution must use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[polihroniade.png|align=right]

O matrice pătratică de dimensiuni `N × N` cu `N` par și elemente din mulțimea `{0, 1}` se numește **tablă de șah** dacă oricare două celule vecine pe o linie sau pe o coloană au valori diferite (cu alte cuvinte, dacă nu există două valori egale alăturate).

De ziua ei, Victor i-a cumpărat Elisabetei o astfel de matrice `A`, care nu este *neapărat* tablă de șah. Aflând despre pasiunea ei, acesta vrea acum să transforme matricea `A` într-o tablă de șah. Timpul fiind limitat, el poate efectua doar următoarele tipuri de operații asupra matricii:

- Interschimbă liniile `i` și `j` din `A` (celelalte linii rămân neschimbate, iar valorile din interiorul liniilor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.
- Interschimbă coloanele `i` și `j` din `A` (celelalte coloane rămân neschimbate, iar valorile din interiorul coloanelor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.

Dorind să o impresioneze pe Elisabeta, Victor apelează la voi, programatori renumiți, să îl ajutați în a transforma matricea `A` într-o tablă de șah. Pentru aceasta, Victor are nevoie de următoarele informații:
- Poate fi transformată matricea `A` în tablă de șah?
- Care este numărul minim de operații necesare pentru a duce la îndeplinire acest scop?
- Care ar fi o succesiune de operații care transformă matricea `A` într-o tablă de șah?

În cazul ultimei cerințe, pentru a intra în grațiile lui Victor va trebui ca numărul de operații efectuate să fie minim. Totuși, chiar și un număr neminim de operații va fi răsplătit, însă nu într-atât de mult.

Vi se dau două numere `P, T` și `T` matrici `A`, reprezentând mai multe instanțe ale problemei. Pentru fiecare matrice `A` dintre cele `T` va trebui să rezolvați cerința cu numărul `P ∈ {1, 2, 3}` dintre cele listate mai sus.

# Date de intrare
Pe prima linie se găsesc două numere întregi pozitive `P` și `T`, reprezentând numarul cerinței de rezolvat și, respectiv, numărul de scenarii pentru care va trebui să rezolvați problema.
Urmează cele `T` instanțe ale problemei, fiecare fiind compusă din `N + 1` linii: pe prima linie se va afla numărul `N`, iar pe următoarele `N` linii câte `N` cifre binare **neseparate** prin spații, reprezentând câte o linie a matricii `A`.

# Date de ieșire
Pentru fiecare dintre cele `T` instanțe se va afișa răspunsul, începând de la o linie nouă, după cum urmează:

1. Dacă `P = 1`, atunci se va afișa pe o singură linie `1` dacă matricea `A` poate fi transformată în tablă de șah, și `0` altfel.
2. Dacă `P = 2`, atunci se va afișa pe o singură linie un întreg reprezentând numărul minim de interschimbări de linii și/sau coloane necesare pentru a transforma matricea `A` în tablă de șah.
3. Dacă `P = 3`, atunci se va afișa pe o linie un număr `X`. Apoi, pe fiecare dintre următoarele `X` linii se va afișa câte o interschimbare de linii sau coloane, după următorul format: `L i j` are semnificația că liniile `i` și `j` se interschimbă, iar `C i j` are semnificația că coloanele `i` și `j` se interschimbă. Matricea obținută după aplicarea celor `X` operații asupra lui `A` în ordinea dată trebuie să fie o tablă de șah.

# Restricții și precizări
* `1 ≤ T ≤ 350`
* `1 ≤ N ≤ 1 000`
* `N` este par.
* Pentru cerințele de tip `P = 2` și `P = 3` se garantează că matricea `A` poate fi transformată în tablă de șah folosind interschimbări de linii și/sau coloane.
* Suma valorilor `N` pentru cele `T` scenarii nu depășește `2 000`.

## Pentru 40 de puncte
* `P = 1`
## Pentru alte 34 de puncte
* `P = 2`
## Pentru alte 26 de puncte
* `P = 3`
* Dacă există mai multe soluții, oricare este considerată corectă.
* Dacă numărul `X` de operații folosite nu este minim, atunci se acordă `50%` din punctajul pe test.

---

Example:
`stdin`
```
1 3
2
11
11
4
1100
1100
0011
0011
2
10
01
```

`stdout`
```
0
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import sys
import numpy as np

def can_be_chessboard(matrix, N):
    for i in range(N):
        for j in range(1, N):
            if matrix[i, j] == matrix[i, j - 1] or matrix[j, i] == matrix[j - 1, i]:
                return False
    return True

def min_swap_operations(matrix, N):
    def count_swaps(arr):
        expected1 = np.tile([0, 1], len(arr) // 2)
        expected2 = np.tile([1, 0], len(arr) // 2)
        swaps1 = np.sum(arr != expected1)
        swaps2 = np.sum(arr != expected2)
        return min(swaps1, swaps2) // 2

    row_swaps = sum(count_swaps(matrix[i, :]) for i in range(N))
    col_swaps = sum(count_swaps(matrix[:, i]) for i in range(N))
    return row_swaps + col_swaps

def swap_sequences(matrix, N):
    operations = []

    def swap_rows_cols(arr, is_row):
        expected1 = np.tile([0, 1], len(arr) // 2)
        expected2 = np.tile([1, 0], len(arr) // 2)
        for i in range(0, N, 2):
            if not (np.array_equal(arr[i], expected1) and np.array_equal(arr[i+1], expected2)) and \
               not (np.array_equal(arr[i], expected2) and np.array_equal(arr[i+1], expected1)):
                for j in range(i+2, N, 2):
                    if np.array_equal(arr[j], arr[i+1]):
                        if is_row:
                            matrix[[i, j]] = matrix[[j, i]]
                            operations.append(f"L {i+1} {j+1}")
                        else:
                            matrix[:, [i, j]] = matrix[:, [j, i]]
                            operations.append(f"C {i+1} {j+1}")
                        break

    swap_rows_cols(matrix, True)
    swap_rows_cols(matrix.T, False)

    return operations

def solve_problem(P, T, input_data):
    output_data = []
    for i in range(T):
        N = int(input_data.readline().strip())
        matrix = np.array([list(map(int, input_data.readline().strip())) for _ in range(N)])

        if P == 1:
            output_data.append(str(int(can_be_chessboard(matrix, N))))
        elif P == 2:
            output_data.append(str(min_swap_operations(matrix, N)))
        elif P == 3:
            operations = swap_sequences(matrix, N)
            output_data.append(str(len(operations)))
            output_data.extend(operations)

    return output_data

# Read from stdin and write to stdout
def main():
    P, T = map(int, input().split())
    input_data = sys.stdin
    output_data = solve_problem(P, T, input_data)
    print("\n".join(output_data))

if __name__ == "__main__":
    main()
```

This code reads input from `stdin`, processes each of the `T` scenarios according to the problem number `P`, and writes the output to `stdout`. The solution checks if a matrix can be transformed into a chessboard, calculates the minimum number of swaps needed, and generates a sequence of swap operations, while also considering the memory constraints.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
