---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `stdin` and write to `stdout`.
The solution must use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[polihroniade.png|align=right]

O matrice pătratică de dimensiuni `N × N` cu `N` par și elemente din mulțimea `{0, 1}` se numește **tablă de șah** dacă oricare două celule vecine pe o linie sau pe o coloană au valori diferite (cu alte cuvinte, dacă nu există două valori egale alăturate).

De ziua ei, Victor i-a cumpărat Elisabetei o astfel de matrice `A`, care nu este *neapărat* tablă de șah. Aflând despre pasiunea ei, acesta vrea acum să transforme matricea `A` într-o tablă de șah. Timpul fiind limitat, el poate efectua doar următoarele tipuri de operații asupra matricii:

- Interschimbă liniile `i` și `j` din `A` (celelalte linii rămân neschimbate, iar valorile din interiorul liniilor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.
- Interschimbă coloanele `i` și `j` din `A` (celelalte coloane rămân neschimbate, iar valorile din interiorul coloanelor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.

Dorind să o impresioneze pe Elisabeta, Victor apelează la voi, programatori renumiți, să îl ajutați în a transforma matricea `A` într-o tablă de șah. Pentru aceasta, Victor are nevoie de următoarele informații:
- Poate fi transformată matricea `A` în tablă de șah?
- Care este numărul minim de operații necesare pentru a duce la îndeplinire acest scop?
- Care ar fi o succesiune de operații care transformă matricea `A` într-o tablă de șah?

În cazul ultimei cerințe, pentru a intra în grațiile lui Victor va trebui ca numărul de operații efectuate să fie minim. Totuși, chiar și un număr neminim de operații va fi răsplătit, însă nu într-atât de mult.

Vi se dau două numere `P, T` și `T` matrici `A`, reprezentând mai multe instanțe ale problemei. Pentru fiecare matrice `A` dintre cele `T` va trebui să rezolvați cerința cu numărul `P ∈ {1, 2, 3}` dintre cele listate mai sus.

# Date de intrare
Pe prima linie se găsesc două numere întregi pozitive `P` și `T`, reprezentând numarul cerinței de rezolvat și, respectiv, numărul de scenarii pentru care va trebui să rezolvați problema.
Urmează cele `T` instanțe ale problemei, fiecare fiind compusă din `N + 1` linii: pe prima linie se va afla numărul `N`, iar pe următoarele `N` linii câte `N` cifre binare **neseparate** prin spații, reprezentând câte o linie a matricii `A`.

# Date de ieșire
Pentru fiecare dintre cele `T` instanțe se va afișa răspunsul, începând de la o linie nouă, după cum urmează:

1. Dacă `P = 1`, atunci se va afișa pe o singură linie `1` dacă matricea `A` poate fi transformată în tablă de șah, și `0` altfel.
2. Dacă `P = 2`, atunci se va afișa pe o singură linie un întreg reprezentând numărul minim de interschimbări de linii și/sau coloane necesare pentru a transforma matricea `A` în tablă de șah.
3. Dacă `P = 3`, atunci se va afișa pe o linie un număr `X`. Apoi, pe fiecare dintre următoarele `X` linii se va afișa câte o interschimbare de linii sau coloane, după următorul format: `L i j` are semnificația că liniile `i` și `j` se interschimbă, iar `C i j` are semnificația că coloanele `i` și `j` se interschimbă. Matricea obținută după aplicarea celor `X` operații asupra lui `A` în ordinea dată trebuie să fie o tablă de șah.

# Restricții și precizări
* `1 ≤ T ≤ 350`
* `1 ≤ N ≤ 1 000`
* `N` este par.
* Pentru cerințele de tip `P = 2` și `P = 3` se garantează că matricea `A` poate fi transformată în tablă de șah folosind interschimbări de linii și/sau coloane.
* Suma valorilor `N` pentru cele `T` scenarii nu depășește `2 000`.

## Pentru 40 de puncte
* `P = 1`
## Pentru alte 34 de puncte
* `P = 2`
## Pentru alte 26 de puncte
* `P = 3`
* Dacă există mai multe soluții, oricare este considerată corectă.
* Dacă numărul `X` de operații folosite nu este minim, atunci se acordă `50%` din punctajul pe test.

---

Example:
`stdin`
```
1 3
2
11
11
4
1100
1100
0011
0011
2
10
01
```

`stdout`
```
0
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
import sys
from collections import Counter

def is_valid_board(board):
    for row in board:
        if len(set(row)) != N // 2: return False
    for col in board.T:
        if len(set(col)) != N // 2: return False
    return True

def swap_rows(board, pattern):
    row_swaps = []
    for i in range(N):
        if not np.array_equal(board[i], pattern[i % 2]):
            for j in range(i + 1, N):
                if np.array_equal(board[j], pattern[i % 2]):
                    board[[i, j]] = board[[j, i]]
                    row_swaps.append((i + 1, j + 1))
                    break
    return row_swaps

def swap_cols(board, pattern):
    col_swaps = []
    for i in range(N):
        if not np.array_equal(board[:, i], pattern[:, i % 2]):
            for j in range(i + 1, N):
                if np.array_equal(board[:, j], pattern[:, i % 2]):
                    board[:, [i, j]] = board[:, [j, i]]
                    col_swaps.append((i + 1, j + 1))
                    break
    return col_swaps

def solve_scenario(P, N, board):
    pattern1 = np.tile([0, 1], (N, N//2))
    pattern2 = np.tile([1, 0], (N, N//2))
    can_be_chessboard = is_valid_board(board)
    
    if P == 1:
        print(int(can_be_chessboard))
        return

    if not can_be_chessboard:
        print(-1)
        return

    row_swaps = swap_rows(board, pattern1)
    col_swaps = swap_cols(board, pattern1)

    if P == 2:
        print(len(row_swaps) + len(col_swaps))
    elif P == 3:
        print(len(row_swaps) + len(col_swaps))
        for i, j in row_swaps:
            print(f"L {i} {j}")
        for i, j in col_swaps:
            print(f"C {i} {j}")

P, T = map(int, input().split())

for _ in range(T):
    N = int(input())
    board = np.array([list(map(int, list(input()))) for _ in range(N)])
    solve_scenario(P, N, board)
```

Please note that the above code assumes that the input is given exactly in the format specified in the question. The code will read from `stdin` and write to `stdout` as required. It uses Numpy for matrix manipulation, which provides highly efficient operations on large arrays.

To define the operations, the code checks every row and column against the pattern it should match ([0, 1, 0, 1, ...] or [1, 0, 1, 0, ...]), and performs swaps when there is a mismatch. It tracks the swaps made to report them as output.

Remember that this code is optimized for being run on a platform where the input is given through `stdin` and the output is expected in `stdout`. If you run the code in a local environment, you will need to provide the input manually or change the input method accordingly.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the execution environment. Since we must optimize for both time and memory usage, and the memory limit is ~8MB, it should be noted that importing `numpy` can easily exceed this limit due to its overhead. 

Therefore, we should avoid using `numpy` and instead use Python's built-in data structures to solve the problem efficiently. Here is an updated version of the solution without using `numpy`:

```python
import sys

def is_chessboard(matrix, N):
    for row in matrix:
        for i in range(N - 1):
            if row[i] == row[i + 1]: return False
    for col in zip(*matrix):
        for i in range(N - 1):
            if col[i] == col[i + 1]: return False
    return True

def get_swap_operations(matrix, N):
    expected_row = [i % 2 for i in range(N)]
    row_swaps = []
    for i in range(0, N, 2):
        if matrix[i] != expected_row:
            for j in range(i + 1, N):
                if matrix[j] == expected_row:
                    matrix[i], matrix[j] = matrix[j], matrix[i]
                    row_swaps.append(('L', i + 1, j + 1))
                    break
    col_swaps = []
    for i in range(0, N, 2):
        column = [matrix[row][i] for row in range(N)]
        if column != expected_row:
            for j in range(i + 1, N):
                column_j = [matrix[row][j] for row in range(N)]
                if column_j == expected_row:
                    for row in range(N):
                        matrix[row][i], matrix[row][j] = matrix[row][j], matrix[row][i]
                    col_swaps.append(('C', i + 1, j + 1))
                    break
    return row_swaps + col_swaps

def solve_scenario(P, N, matrix):
    if P == 1:
        print(1 if is_chessboard(matrix, N) else 0)
    else:
        swaps = get_swap_operations(matrix, N)
        if P == 2:
            print(len(swaps))
        elif P == 3:
            print(len(swaps))
            for swap in swaps:
                print(f"{swap[0]} {swap[1]} {swap[2]}")

# Read input
P, T = map(int, input().split())

for _ in range(T):
    N = int(input())
    matrix = [list(map(int, input().strip())) for _ in range(N)]
    solve_scenario(P, N, matrix)
```

This code should work given the constraints and produce the correct output with efficient memory usage, as it only uses lists and basic operations that minimize memory footprint. It reads input from `stdin` and writes to `stdout` using `print()`, as per the problem's requirement.
---------- user ----------


Program result did not match expected result.
Input data:
```
1 3
2
11
11
4
1100
1100
0011
0011
2
10
01
```
Expected output:
```
0
1
1
```
Found output:
```
0
0
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
