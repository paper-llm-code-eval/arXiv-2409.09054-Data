---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `galbeni.in` and write to `galbeni.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

După ce au descoperit ascunzătoarea piratului Spânu, marinarii de pe corabia “Speranţa” au hotărât să ofere sătenilor o parte din comoara acestuia. Întrucât comoara avea un număr nelimitat de bani din aur, numiţi galbeni, singura problemă a marinarilor a fost regula după care să împartă banii.

După îndelungi discuţii au procedat astfel: i-au rugat pe săteni să se aşeze în ordine la coadă şi să vină, pe rând, unul câte unul pentru a-şi ridica galbenii cuveniţi. Primul sătean a fost rugat să îşi aleagă numărul de galbeni, cu condiţia ca acest număr să fie format din exact $K$ cifre. Al doilea sătean va primi un număr de galbeni calculat astfel: se înmulţeşte numărul de galbeni ai primului sătean cu toate cifrele nenule ale acelui număr, rezultatul se înmulţeşte cu $8$ şi apoi se împarte la $9$ păstrându-se doar ultimele $K$ cifre ale câtului împărţirii. Dacă numărul obţinut are mai puţin de $K$ cifre, atunci acestuia i se adaugă la final cifra $9$, până când se completează $K$ cifre.

Pentru a stabili câţi galbeni primeşte al treilea sătean, se aplică aceeaşi regulă, dar pornind de la numărul de galbeni ai celui de-al doilea sătean. Regula se aplică în continuare fiecărui sătean, plecând de la numărul de galbeni primiţi de săteanul care a stat la coadă exact în faţa lui. 

# Cerința

Cunoscând numărul de galbeni aleşi de primul sătean, determinaţi numărul de galbeni pe care îl va primi al $N$-lea sătean.

# Date de intrare
Fișierul de intrare `galbeni.in` conține pe prima linie cele $3$ numere naturale nenule $S$, $K$, $N$ separate prin câte un spaţiu, unde $S$ reprezintă numărul de galbeni ales de primul sătean, $K$ este numărul de cifre ale numărului $S$, iar $N$ reprezintă numărul de ordine al săteanului pentru care se cere să determinaţi numărul de galbeni primiţi.

# Date de ieșire
Fișierul de ieșire `galbeni.out` va conține pe unica sa linie un număr natural reprezentând rezultatul determinat.

# Restricții și precizări
* $2 \leq N \leq 1 \ 000 \ 000 \ 000$;
* $1 \leq K \leq 3$;
* Se garantează că $S$ are exact $K$ cifre.

---

Example:
`galbeni.in`
```
51 2 3
```

`galbeni.out`
```
77
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Reading from `galbeni.in`.
with open('galbeni.in', 'r') as file:
    S, K, N = map(int, file.readline().split())

# Function to compute next number of galbeni.
def compute_next_galbeni(S, K):
    non_zero_digits = [int(digit) for digit in str(S) if digit != '0']
    product = np.prod(non_zero_digits) * S * 8
    result_str = str(product // 9)[-K:]
    while len(result_str) < K:
        result_str += '9'
    return int(result_str)

# Iteratively compute the number of galbeni for the N-th person.
for _ in range(N - 1):
    S = compute_next_galbeni(S, K)

# Writing to `galbeni.out`.
with open('galbeni.out', 'w') as file:
    file.write(str(S))
```

Please note that this solution assumes that `numpy` is available on the system and that the input and output files are named exactly as specified in the challenge.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the environment does not have `numpy` available and we are optimizing for memory usage, I will rewrite the solution using only built-in Python facilities and avoiding any unnecessary memory usage:

```python
# Function to compute next number of galbeni.
def compute_next_galbeni(S, K):
    product = S * 8
    non_zero_digits = [int(digit) for digit in str(S) if digit != '0']
    for digit in non_zero_digits:
        product *= digit
    result_str = str(product // 9)[-K:]
    while len(result_str) < K:
        result_str += '9'
    return int(result_str)

# Function to read data from the input file.
def read_input(filename):
    with open(filename, 'r') as file:
        S, K, N = map(int, file.readline().split())
    return S, K, N

# Function to write data to the output file.
def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

# Main function to process the problem.
def process_galbeni(S, K, N):
    for _ in range(N - 1):
        S = compute_next_galbeni(S, K)
    return S

# Read the input data.
S, K, N = read_input('galbeni.in')

# Process the problem.
result = process_galbeni(S, K, N)

# Write the output data.
write_output('galbeni.out', result)
```

This version should work without `numpy`, using only Python's built-in features. It reads from the file `galbeni.in`, computes the number of galbeni for the N-th person, and writes the result to `galbeni.out`.
