---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cursuri.in` and write to `cursuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.

# Cerință

Cunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:

1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.
2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.

# Date de intrare

În fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq K \leq 1 \ 000$;
* $1 \leq a_i < b_i \leq 100 \ 000$;
* În cazul cerinței $2$ se garantează că pentru toate testele există soluție
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`cursuri.in`
```
1
4 2
2 16
1 3
3 18
1 20
```

`cursuri.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        C = int(file.readline().strip())
        N, K = map(int, file.readline().split())
        courses = [tuple(map(int, file.readline().split())) for _ in range(N)]
    return C, N, K, np.array(courses)

def write_data(filename, data):
    with open(filename, 'w') as file:
        file.write(str(data) + '\n')

def schedule_max_courses(N, K, courses):
    # Sort courses based on end times
    sorted_courses = courses[courses[:, 1].argsort()]
    # Initialize classrooms with the earliest possible end time
    classrooms = np.zeros(K, dtype=int)
    # Count scheduled courses
    count = 0
    for course in sorted_courses:
        # Find the first available classroom
        for i in range(K):
            if classrooms[i] <= course[0]:
                classrooms[i] = course[1]
                count += 1
                break
    return count

def find_max_duration(N, K, courses):
    # Find the maximum initial duration of a course
    max_duration = np.amax(courses[:, 1] - courses[:, 0])
    # Start with the maximum possible duration
    duration = max_duration
    # Sort courses based on start times
    sorted_courses = courses[courses[:, 0].argsort()]
    # Binary search to find the maximum duration
    left, right = 0, max_duration
    while left <= right:
        duration = (left + right) // 2
        free_time = np.zeros(K, dtype=int)
        fits = True
        for course in sorted_courses:
            start_time = course[0]
            for i in range(K):
                if free_time[i] <= start_time:
                    free_time[i] = start_time + duration
                    break
            else:
                # Course does not fit in any classroom
                fits = False
                break
        if fits:
            left = duration + 1
        else:
            right = duration - 1
    return right

def main():
    C, N, K, courses = read_data('cursuri.in')
    if C == 1:
        result = schedule_max_courses(N, K, courses)
    else:
        result = find_max_duration(N, K, courses)
    write_data('cursuri.out', result)

if __name__ == '__main__':
    main()
```

This Python solution uses numpy for efficient array manipulation, and it solves both problems separately as required by the challenge. The code reads from 'cursuri.in' and writes to 'cursuri.out'. The first problem is solved using a greedy algorithm that sorts the courses by end times and then iterates through them, trying to fit each course into the earliest available classroom. The second problem is solved using binary search to determine the maximum duration for all courses while ensuring they all fit into the available classrooms.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the numpy module is not available in the environment. Since the memory limit is strict and we should optimize both time and memory usage, I will rewrite the solution without using the numpy library.

Here is the fixed solution:

```python
def read_data(filename):
    with open(filename, 'r') as file:
        C = int(file.readline().strip())
        N, K = map(int, file.readline().split())
        courses = [tuple(map(int, file.readline().split())) for _ in range(N)]
    return C, N, K, courses

def write_data(filename, data):
    with open(filename, 'w') as file:
        file.write(str(data) + '\n')

def schedule_max_courses(N, K, courses):
    sorted_courses = sorted(courses, key=lambda x: x[1])
    classrooms = [0] * K
    count = 0
    for course in sorted_courses:
        for i in range(K):
            if classrooms[i] <= course[0]:
                classrooms[i] = course[1]
                count += 1
                break
    return count

def find_max_duration(N, K, courses):
    max_initial_duration = max(b - a for a, b in courses)
    left, right = 1, max_initial_duration
    while left <= right:
        mid = (left + right) // 2
        fits = True
        classrooms = [0] * K
        for start, _ in sorted(courses, key=lambda x: x[0]):
            for i in range(K):
                if classrooms[i] <= start:
                    classrooms[i] = start + mid
                    break
            else:
                fits = False
                break
        if fits:
            left = mid + 1
        else:
            right = mid - 1
    return right

def main():
    C, N, K, courses = read_data('cursuri.in')
    if C == 1:
        result = schedule_max_courses(N, K, courses)
    elif C == 2:
        result = find_max_duration(N, K, courses)
    write_data('cursuri.out', result)

if __name__ == '__main__':
    main()
```

This revised solution uses simple Python data structures and sorting instead of numpy arrays. It should now run without the numpy module and remain within the memory limit of ~8MB.
