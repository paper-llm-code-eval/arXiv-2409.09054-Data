{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/883/2024-06-03T10:21:02.099Z-03566.log",
  "attemptStart": 1717410062.099,
  "attemptEnd": 1717410112.382,
  "attemptDuration": 50.282999992370605,
  "code": "# Solution to Programming Challenge\nimport heapq\n\ndef read_input(filename):\n    with open(filename, 'r') as f:\n        C = int(f.readline().strip())\n        N, K = map(int, f.readline().strip().split())\n        courses = [tuple(map(int, f.readline().strip().split())) for _ in range(N)]\n    return C, N, K, courses\n\ndef write_output(filename, result):\n    with open(filename, 'w') as f:\n        f.write(str(result) + '\\n')\n\ndef max_courses_scheduled(courses, K):\n    # Sort courses by end time\n    sorted_courses = sorted(courses, key=lambda x: x[1])\n\n    # Initialize priority queue (min heap)\n    rooms = []\n\n    count = 0\n    for course in sorted_courses:\n        # Remove rooms that are now free\n        while rooms and rooms[0] <= course[0]:\n            heapq.heappop(rooms)\n\n        # Add current course's end time\n        heapq.heappush(rooms, course[1])\n        if len(rooms) <= K:\n            count += 1\n        else:\n            heapq.heappop(rooms)\n\n    return count\n\ndef max_course_duration(courses, N, K):\n    # Find the maximum duration that can be assigned to each course\n    max_duration = 0\n    for duration in range(1, max(courses, key=lambda x: x[1])[1] + 1):\n        sorted_courses = sorted([(start, start + duration) for start, end in courses], key=lambda x: x[1])\n        count = max_courses_scheduled(sorted_courses, K)\n        if count == N:\n            max_duration = duration\n        else:\n            break\n    return max_duration\n\n# Read input\nC, N, K, courses = read_input('cursuri.in')\n\n# Solve the problem\nif C == 1:\n    result = max_courses_scheduled(courses, K)\nelif C == 2:\n    result = max_course_duration(courses, N, K)\n\n# Write output\nwrite_output('cursuri.out', result)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2407,
  "metadata": {
    "id": 883,
    "examples": [
      {
        "in": "1\n4 2\n2 16\n1 3\n3 18\n1 20",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n4 2\n5 12\n9 18\n1 3\n1 7",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.\n\n# Cerință\n\nCunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:\n\n1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.\n2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.\n\n# Date de intrare\n\nÎn fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \\ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \\ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.\n\n# Date de ieșire\n\nDacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.\n\nDacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq K \\leq 1 \\ 000$;\n* $1 \\leq a_i < b_i \\leq 100 \\ 000$;\n* În cazul cerinței $2$ se garantează că pentru toate testele există soluție\n* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.",
    "header": {
      "problem_id": 883,
      "problem_name": "cursuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "cursuri.in",
      "output_filename": "cursuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "cursuri.in",
      "output": "cursuri.out"
    },
    "consoleInteraction": false
  }
}