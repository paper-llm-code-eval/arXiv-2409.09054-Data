{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/883/2024-06-03T10:20:21.665Z-06221.log",
  "attemptStart": 1717410021.665,
  "attemptEnd": 1717410058.732,
  "attemptDuration": 37.06700015068054,
  "code": "# Function to determine the maximum number of courses that can be scheduled\ndef max_courses(K, intervals):\n    # Sort intervals by end time to use Greedy algorithm\n    sorted_intervals = sorted(intervals, key=lambda x: x[1])\n    classes = [0] * K\n\n    # Schedule each course in the earliest available class\n    count = 0\n    for start, end in sorted_intervals:\n        for i in range(K):\n            if classes[i] <= start:\n                classes[i] = end\n                count += 1\n                break\n\n    return count\n\n# Function to determine the maximum duration of all courses\ndef max_duration(K, N, intervals):\n    # Find the maximum possible duration\n    max_possible_duration = max(end - start for start, end in intervals)\n\n    def can_schedule(duration):\n        # Sort intervals by start time\n        sorted_intervals = sorted(intervals, key=lambda x: x[0])\n        classes = [0] * K\n\n        # Schedule each course with the given duration\n        for start, _ in sorted_intervals:\n            for i in range(K):\n                if classes[i] <= start:\n                    classes[i] = start + duration\n                    break\n            else:\n                # If no class is available, return False\n                return False\n        return True\n\n    # Use binary search to find the maximum duration\n    lo, hi = 1, max_possible_duration\n    while lo < hi:\n        mid = (lo + hi + 1) // 2\n        if can_schedule(mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    return lo\n\n# Read the challenge configuration from the input file\nwith open('cursuri.in', 'r') as file:\n    C = int(file.readline().strip())\n    N, K = map(int, file.readline().split())\n    intervals = [tuple(map(int, file.readline().split())) for _ in range(N)]\n\n# Write the result to the output file\nwith open('cursuri.out', 'w') as file:\n    if C == 1:\n        result = max_courses(K, intervals)\n    elif C == 2:\n        result = max_duration(K, N, intervals)\n    file.write(str(result) + '\\n')\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2409,
  "metadata": {
    "id": 883,
    "examples": [
      {
        "in": "1\n4 2\n2 16\n1 3\n3 18\n1 20",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n4 2\n5 12\n9 18\n1 3\n1 7",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.\n\n# Cerință\n\nCunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:\n\n1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.\n2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.\n\n# Date de intrare\n\nÎn fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \\ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \\ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.\n\n# Date de ieșire\n\nDacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.\n\nDacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq K \\leq 1 \\ 000$;\n* $1 \\leq a_i < b_i \\leq 100 \\ 000$;\n* În cazul cerinței $2$ se garantează că pentru toate testele există soluție\n* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.",
    "header": {
      "problem_id": 883,
      "problem_name": "cursuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "cursuri.in",
      "output_filename": "cursuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "cursuri.in",
      "output": "cursuri.out"
    },
    "consoleInteraction": false
  }
}