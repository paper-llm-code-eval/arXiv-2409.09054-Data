---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cursuri.in` and write to `cursuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.

# Cerință

Cunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:

1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.
2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.

# Date de intrare

În fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq K \leq 1 \ 000$;
* $1 \leq a_i < b_i \leq 100 \ 000$;
* În cazul cerinței $2$ se garantează că pentru toate testele există soluție
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`cursuri.in`
```
1
4 2
2 16
1 3
3 18
1 20
```

`cursuri.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution for the programming challenge written in Python

import numpy as np

def solve_case_1(courses, K):
    # Sort courses by their end time
    courses.sort(key=lambda x: x[1])
    # Initialize the end times of classes
    end_times = np.zeros(K, dtype=np.int64)
    max_courses = 0

    for start, end in courses:
        for i in range(K):
            # Find a free classroom or the one which finishes the earliest
            if end_times[i] <= start:
                end_times[i] = end
                max_courses += 1
                break

    return max_courses

def solve_case_2(courses, K):
    # Sort courses by their start time and then by their duration
    courses.sort(key=lambda x: (x[0], x[1] - x[0]))
    # Calculate the minimum duration
    min_duration = max(courses, key=lambda x: x[1] - x[0])[1] - max(courses, key=lambda x: x[0])[0]
    # Use binary search to find the maximum duration
    left, right = 0, min_duration
    
    while left <= right:
        mid = (left + right) // 2
        current_time = 0
        count = 0
        
        for start, end in courses:
            if start >= current_time:
                current_time = start + mid
                count += 1
                if count == K:
                    break
        
        if count == K:
            left = mid + 1
        else:
            right = mid - 1
    
    return right

# Read from 'cursuri.in'
with open('cursuri.in', 'r') as file:
    C = int(file.readline().strip())
    N, K = map(int, file.readline().strip().split())
    courses = [tuple(map(int, file.readline().strip().split())) for _ in range(N)]

# Process and produce output in 'cursuri.out'
with open('cursuri.out', 'w') as file:
    if C == 1:
        result = solve_case_1(courses, K)
        file.write(f"{result}\n")
    elif C == 2:
        result = solve_case_2(courses, K)
        file.write(f"{result}\n")
```

This solution reads from `cursuri.in` and writes to `cursuri.out`. It does not use `input()` or `print()` for I/O operations. The `solve_case_1` function solves the first part of the challenge, and the `solve_case_2` function solves the second part. The solutions are optimized for both time and memory usage, considering the constraints of the problem. Please ensure that the given code is run in an environment where the `cursuri.in` file is present with the correct format, as specified in the challenge.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not installed in the environment where the code is being executed. Since the solution must be efficient in terms of memory usage, and relying on external libraries such as `numpy` might not be possible in certain environments, I'll rewrite the solution avoiding `numpy` and use pure Python instead.

Here is the updated solution:

```python
# Helper function to solve case 1
def solve_case_1(courses, K):
    # Sort courses by their end time
    courses.sort(key=lambda x: x[1])
    # Initialize the end times of classes
    end_times = [0] * K
    max_courses = 0

    for start, end in courses:
        for i in range(K):
            # Find a free classroom or the one which finishes the earliest
            if end_times[i] <= start:
                end_times[i] = end
                max_courses += 1
                break

    return max_courses

# Helper function to solve case 2
def solve_case_2(courses, K):
    # Find the maximum possible duration
    max_duration = max(end - start for start, end in courses)

    def can_schedule_with_duration(duration):
        # Use greedy approach to check if we can schedule all courses with the given duration
        classrooms = [0] * K
        for start, _ in sorted(courses):
            for i in range(K):
                if classrooms[i] <= start:
                    classrooms[i] = start + duration
                    break
            else:
                # No classroom was available
                return False
        return True

    # Binary search for the maximum duration
    left, right = 0, max_duration
    while left < right:
        mid = (left + right + 1) // 2
        if can_schedule_with_duration(mid):
            left = mid
        else:
            right = mid - 1

    return left

# Main function to read and write files
def main():
    with open('cursuri.in', 'r') as file:
        C = int(file.readline().strip())
        N, K = map(int, file.readline().strip().split())
        courses = [tuple(map(int, file.readline().strip().split())) for _ in range(N)]

    result = solve_case_1(courses, K) if C == 1 else solve_case_2(courses, K)

    with open('cursuri.out', 'w') as file:
        file.write(f"{result}\n")

if __name__ == "__main__":
    main()
```

The updated solution uses only built-in Python functions and types, avoiding the need for external libraries. It should work in any Python 3 environment that complies with the programming challenge requirements. Make sure to run this code in a directory that contains the `cursuri.in` file.
