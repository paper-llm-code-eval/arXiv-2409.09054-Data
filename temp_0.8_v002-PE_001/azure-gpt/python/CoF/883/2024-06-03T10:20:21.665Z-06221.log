---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cursuri.in` and write to `cursuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.

# Cerință

Cunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:

1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.
2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.

# Date de intrare

În fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq K \leq 1 \ 000$;
* $1 \leq a_i < b_i \leq 100 \ 000$;
* În cazul cerinței $2$ se garantează că pentru toate testele există soluție
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`cursuri.in`
```
1
4 2
2 16
1 3
3 18
1 20
```

`cursuri.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Below is a Python solution to the challenge, formatted as a markdown code block. This solution uses the Greedy algorithm approach for the first case to find the maximum number of courses that can be scheduled. For the second case, it uses a binary search to find the maximum duration of the courses.

```python
import numpy as np

# Read the challenge configuration from the input file
with open('cursuri.in', 'r') as file:
    C = int(file.readline().strip())
    N, K = map(int, file.readline().split())
    intervals = [tuple(map(int, file.readline().split())) for _ in range(N)]

# Function to determine the maximum number of courses that can be scheduled
def max_courses(K, intervals):
    # Sort intervals by end time to use Greedy algorithm
    sorted_intervals = sorted(intervals, key=lambda x: x[1])
    classes = np.zeros(K, dtype=int)

    # Schedule each course in the earliest available class
    count = 0
    for start, end in sorted_intervals:
        for i in range(K):
            if classes[i] <= start:
                classes[i] = end
                count += 1
                break

    return count

# Function to determine the maximum duration of all courses
def max_duration(K, N, intervals):
    # Find the maximum possible duration
    max_possible_duration = max(end - start for start, end in intervals)

    def can_schedule(duration):
        # Sort intervals by start time
        sorted_intervals = sorted(intervals, key=lambda x: x[0])
        classes = np.zeros(K, dtype=int)

        # Schedule each course with the given duration
        for start, _ in sorted_intervals:
            for i in range(K):
                if classes[i] <= start:
                    classes[i] = start + duration
                    break
            else:
                # If no class is available, return False
                return False
        return True

    # Use binary search to find the maximum duration
    lo, hi = 1, max_possible_duration
    while lo < hi:
        mid = (lo + hi + 1) // 2
        if can_schedule(mid):
            lo = mid
        else:
            hi = mid - 1
    return lo

# Write the result to the output file
with open('cursuri.out', 'w') as file:
    if C == 1:
        result = max_courses(K, intervals)
    elif C == 2:
        result = max_duration(K, N, intervals)
    file.write(str(result) + '\n')
```

This solution takes into account the memory constraint by using efficient data structures and algorithms, and performs file I/O operations to read and write data as specified in the challenge.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! It seems that the Numpy library is not available on the platform running this code. To fix the program, let's rewrite the solution without using Numpy and instead use Python's built-in data structures and functions. 

Here's the complete solution written without Numpy and formatted as a markdown code block:

```python
# Function to determine the maximum number of courses that can be scheduled
def max_courses(K, intervals):
    # Sort intervals by end time to use Greedy algorithm
    sorted_intervals = sorted(intervals, key=lambda x: x[1])
    classes = [0] * K

    # Schedule each course in the earliest available class
    count = 0
    for start, end in sorted_intervals:
        for i in range(K):
            if classes[i] <= start:
                classes[i] = end
                count += 1
                break

    return count

# Function to determine the maximum duration of all courses
def max_duration(K, N, intervals):
    # Find the maximum possible duration
    max_possible_duration = max(end - start for start, end in intervals)

    def can_schedule(duration):
        # Sort intervals by start time
        sorted_intervals = sorted(intervals, key=lambda x: x[0])
        classes = [0] * K

        # Schedule each course with the given duration
        for start, _ in sorted_intervals:
            for i in range(K):
                if classes[i] <= start:
                    classes[i] = start + duration
                    break
            else:
                # If no class is available, return False
                return False
        return True

    # Use binary search to find the maximum duration
    lo, hi = 1, max_possible_duration
    while lo < hi:
        mid = (lo + hi + 1) // 2
        if can_schedule(mid):
            lo = mid
        else:
            hi = mid - 1
    return lo

# Read the challenge configuration from the input file
with open('cursuri.in', 'r') as file:
    C = int(file.readline().strip())
    N, K = map(int, file.readline().split())
    intervals = [tuple(map(int, file.readline().split())) for _ in range(N)]

# Write the result to the output file
with open('cursuri.out', 'w') as file:
    if C == 1:
        result = max_courses(K, intervals)
    elif C == 2:
        result = max_duration(K, N, intervals)
    file.write(str(result) + '\n')
```

This rewritten solution does not rely on Numpy or any external libraries. It uses simple lists and functions available in standard Python to achieve the task while still being memory-efficient and within the constraints given.
