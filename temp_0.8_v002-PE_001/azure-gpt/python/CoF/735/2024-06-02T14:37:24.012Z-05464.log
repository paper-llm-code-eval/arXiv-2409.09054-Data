---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mircea este pasionat de programare. El a început să rezolve probleme din ce în ce mai grele. Astfel a ajuns la o problemă, care are ca date de intrare un tablou pătratic cu $n$ linii şi $n$ coloane, componente tabloului fiind toate numerele naturale distincte de la $1$ la $n^2$. Pentru a verifica programul pe care l-a scris îi trebuie un fişier care să conţină tabloul respectiv. După ce a creat acest fişier, fratele său, pus pe şotii îi umblă în fişier şi îi schimbă câteva numere consecutive, cu numărul $0$. Când se întoarce Mircea de la joacă constată cu stupoare că nu îi merge programul pentru testul respectiv. După câteva ore de depanare îşi dă seama că programul lui este corect şi că fişierul de intrare are probleme.

# Cerinţă
Scrieţi un program care să-l ajute pe Mircea, găsindu-i cel mai mic şi cel mai mare dintre numerele consecutive schimbate de fratele său.

# Date de intrare
În fişierul `numere.in` se dă pe prima linie $n$, iar pe următoarele $n$ linii elementele tabloului, câte $n$ elemente pe o linie, separate între ele prin câte un spaţiu, după modificările făcute de fratele lui Mircea.

# Date de ieşire
În fişierul `numere.out` se va scrie pe un singur rând cu un singur spaţiu între ele numerele cerute (primul fiind cel mai mic).

# Restricţii şi precizări
- $0 < n \leq 500$
- Fratele lui Mircea schimbă cel puţin un număr în fişier.
- Numerele schimbate de fratele lui Mircea sunt mai mici sau cel mult egale cu $60\ 000$.

---

Example:
`numere.in`
```
3
5 0 7
0 0 1
6 9 8
```

`numere.out`
```
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def find_missing_sequence(matrix, n):
    # Flatten the matrix to a 1D array for easier handling
    flat_matrix = matrix.flatten()
    
    # Find the indices where 0s occur
    zeros = np.where(flat_matrix == 0)[0]
    
    # Find missing numbers by checking the difference between indices
    missing = np.setdiff1d(np.arange(1, n*n + 1), flat_matrix)
    
    # Taking the first and last missing number will give us the minimum and maximum
    min_missing = missing[0]
    max_missing = missing[-1]
    
    return min_missing, max_missing

# Reading the input
with open('numere.in', 'r') as file:
    n = int(file.readline().strip())
    matrix = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)

# Find the missing sequence
min_missing, max_missing = find_missing_sequence(matrix, n)

# Writing the output
with open('numere.out', 'w') as file:
    file.write(f"{min_missing} {max_missing}\n")
```

Explanation:
1. We first read the input from `numere.in` into a NumPy array of 32-bit integers (`dtype=np.int32`) to save memory.
2. We flatten the matrix into a 1D array for easier processing.
3. We find the positions of zeros and the missing numbers by using NumPy's set operations.
4. We find the smallest and largest missing number by accessing the first and last elements of the sorted array of missing numbers.
5. Finally, we write the results into `numere.out` using the prescribed format.

The solution avoids unnecessary memory usage by using NumPy efficiently, thus keeping the memory footprint within the 8MB limit. It also optimizes for speed by leveraging NumPy's optimized operations.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error code indicates that the `numpy` library is not available in the environment where the code is being executed. Since the problem requires an efficient solution and suggests using `numpy`, I will assume that we are expected to work in an environment where `numpy` is indeed available. However, if that is not the case, and we must work with the standard libraries only, I will provide a solution that does not depend on `numpy`.

Here is the entire solution rewritten to work without `numpy`:

```python
def find_missing_sequence(matrix, n):
    flat_matrix = [num for row in matrix for num in row]
    zeros_indices = [i for i, num in enumerate(flat_matrix) if num == 0]
    
    missing = [i for i in range(1, n*n + 1) if i not in flat_matrix]
    min_missing = missing[0]
    max_missing = missing[-1]
    
    return min_missing, max_missing

# Reading the input
with open('numere.in', 'r') as file:
    n = int(file.readline().strip())
    matrix = [[int(num) for num in line.split()] for line in file]

# Find the missing sequence
min_missing, max_missing = find_missing_sequence(matrix, n)

# Writing the output
with open('numere.out', 'w') as file:
    file.write(f"{min_missing} {max_missing}\n")
```

This version of the solution uses list comprehensions and built-in Python functions to flatten the matrix, find zero indices, and compute the set of missing numbers. It achieves the same result as the previous solution but relies solely on standard Python libraries, which should be available in any Python environment. This approach might use a bit more memory than the `numpy` solution due to the lack of optimized data structures, but it should still fit within the 8MB limit for the given problem constraints.
