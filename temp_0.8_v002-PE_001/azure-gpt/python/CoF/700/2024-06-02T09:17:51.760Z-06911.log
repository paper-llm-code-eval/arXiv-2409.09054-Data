---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to find the maximum food path
def find_max_food_path(matrix):
    m, n = matrix.shape
    dp = np.zeros_like(matrix)
    path_matrix = np.full((m, n, 2), -1)
    dp[0, 0] = matrix[0, 0]

    # Fill dp matrix and path matrix
    for i in range(m):
        for j in range(n):
            if i > 0 and dp[i, j] < dp[i-1, j] + matrix[i, j]:
                dp[i, j] = dp[i-1, j] + matrix[i, j]
                path_matrix[i, j] = [i-1, j]
            if j > 0 and dp[i, j] < dp[i, j-1] + matrix[i, j]:
                dp[i, j] = dp[i, j-1] + matrix[i, j]
                path_matrix[i, j] = [i, j-1]

    # Reconstruct the path
    path = []
    i, j = m-1, n-1
    while i != -1 and j != -1:
        path.append((i+1, j+1))
        i, j = path_matrix[i, j]

    path.reverse()
    return dp[-1, -1], path

# Read the input data from "mouse.in"
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.zeros((m, n), dtype=int)
    for i in range(m):
        matrix[i] = np.array(file.readline().split(), dtype=int)

# Process data
max_food, path = find_max_food_path(matrix)

# Write the output data to "mouse.out"
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for p in path:
        file.write(f"{p[0]} {p[1]}\n")
```

Remember to ensure this Python code is executed in an environment where the file `mouse.in` exists with the correct format, and the user has permission to write the file `mouse.out` in the same directory. This solution assumes the use of NumPy library for efficient array manipulation and for better performance over native Python lists when dealing with large datasets.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the Python environment where the code is being executed does not have the NumPy library installed. Since the code relies on NumPy for efficient array manipulation and we need to optimize for both time and memory usage, we should rewrite the solution without using NumPy or any third-party libraries, as we need to meet the memory limit of ~8MB.

Here's the revised solution using only built-in Python data structures and functions:

```python
# Function to find the maximum food path
def find_max_food_path(matrix):
    m, n = len(matrix), len(matrix[0])
    dp = [[0] * n for _ in range(m)]
    path_matrix = [[None] * n for _ in range(m)]
    dp[0][0] = matrix[0][0]

    # Fill dp matrix and path matrix
    for i in range(m):
        for j in range(n):
            if i > 0 and dp[i][j] < dp[i-1][j] + matrix[i][j]:
                dp[i][j] = dp[i-1][j] + matrix[i][j]
                path_matrix[i][j] = (i-1, j)
            if j > 0 and dp[i][j] < dp[i][j-1] + matrix[i][j]:
                dp[i][j] = dp[i][j-1] + matrix[i][j]
                path_matrix[i][j] = (i, j-1)

    # Reconstruct the path
    path = []
    i, j = m-1, n-1
    while i is not None and j is not None:
        path.append((i + 1, j + 1))  # Convert to 1-indexed
        i, j = path_matrix[i][j]

    path.reverse()
    return dp[-1][-1], path

# Read the input data from "mouse.in"
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = []
    for _ in range(m):
        matrix.append(list(map(int, file.readline().split())))

# Process data
max_food, path = find_max_food_path(matrix)

# Write the output data to "mouse.out"
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for p in path:
        file.write(f"{p[0]} {p[1]}\n")
```

This solution should work within the given memory constraints and without relying on external libraries. It reads from `mouse.in`, processes the data to find the path with the maximum food, and writes the results to `mouse.out`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 36, in <module>
    max_food, path = find_max_food_path(matrix)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 23, in find_max_food_path
    i, j = path_matrix[i][j]
    ^^^^
TypeError: cannot unpack non-iterable NoneType object

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
