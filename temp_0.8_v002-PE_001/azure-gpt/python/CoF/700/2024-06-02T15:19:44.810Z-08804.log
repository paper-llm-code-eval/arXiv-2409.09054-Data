---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# mouse.py

import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    m, n = map(int, lines[0].split())
    grid = np.array([list(map(int, line.split())) for line in lines[1:]])
    return m, n, grid

def write_output(filename, rooms_visited, max_food, path):
    with open(filename, 'w') as file:
        file.write(f"{rooms_visited} {max_food}\n")
        for pos in path:
            file.write(f"{pos[0]} {pos[1]}\n")

def find_max_food_path(m, n, grid):
    dp = np.zeros((m + 1, n + 1), dtype=int)
    path = [[(0, 0) for _ in range(n)] for _ in range(m)]

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if dp[i-1][j] > dp[i][j-1]:
                dp[i][j] = dp[i-1][j] + grid[i-1][j-1]
                path[i-1][j-1] = (i-1, j)
            else:
                dp[i][j] = dp[i][j-1] + grid[i-1][j-1]
                path[i-1][j-1] = (i, j-1)

    max_food = dp[m][n]
    i, j = m, n
    actual_path = [(i, j)]
    while i > 1 or j > 1:
        i, j = path[i-1][j-1]
        actual_path.append((i, j))
    actual_path.reverse()
    return len(actual_path), max_food, actual_path

def main():
    m, n, grid = read_input('mouse.in')
    rooms_visited, max_food, path = find_max_food_path(m, n, grid)
    write_output('mouse.out', rooms_visited, max_food, path)

if __name__ == "__main__":
    main()
```

This Python code reads the rectangular grid from a file named 'mouse.in', computes the path that yields the maximum amount of food using dynamic programming to optimize both time and memory, and writes the result to a file named 'mouse.out'. 

Please note that this script is expected to be run as a file and not within an interactive interpreter. It assumes the input file 'mouse.in' is formatted correctly according to the problem statement.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
