---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        food = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)
    return m, n, food

def write_output(filename, num_visited, max_food, path):
    with open(filename, 'w') as file:
        file.write(f"{num_visited} {max_food}\n")
        for pos in path:
            file.write(f"{pos[0]} {pos[1]}\n")

def find_max_food_path(m, n, food):
    dp = np.zeros((m+1, n+1), dtype=np.int32)
    for i in range(1, m+1):
        for j in range(1, n+1):
            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + food[i-1, j-1]

    path = []
    i, j = m, n
    while i > 0 and j > 0:
        path.append((i, j))
        if dp[i-1, j] > dp[i, j-1]:
            i -= 1
        else:
            j -= 1
    path.reverse()

    return len(path), dp[m, n], [(x, y) for x, y in path]

def main():
    m, n, food = read_input('mouse.in')
    num_visited, max_food, path = find_max_food_path(m, n, food)
    write_output('mouse.out', num_visited, max_food, path)

if __name__ == "__main__":
    main()
```

This code defines a `main` function that reads the input from `mouse.in`, finds the maximum food path, and then writes the output to `mouse.out`. It uses numpy to handle array operations efficiently and minimizes memory usage by using `int32` for the arrays.

The `find_max_food_path` function uses dynamic programming to find the maximum food that the mouse can collect. It keeps track of the maximum food collected up to each cell in a DP table. It then uses backtracking to construct the path of rooms visited. I have used numpy to optimize array operations, which provides a significant speedup compared to pure Python list operations.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue is being caused by the `numpy` library not being available in the environment where the code is executed. Since I am required to work within a memory limit and optimize for performance without relying on third-party libraries like `numpy`, I will refactor the solution to use only Python's standard library.

Here is the revised solution:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        food = [list(map(int, line.split())) for line in file]
    return m, n, food

def write_output(filename, num_visited, max_food, path):
    with open(filename, 'w') as file:
        file.write(f"{num_visited} {max_food}\n")
        for pos in path:
            file.write(f"{pos[0]} {pos[1]}\n")

def find_max_food_path(m, n, food):
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + food[i-1][j-1]

    path = []
    i, j = m, n
    while i > 0 and j > 0:
        path.append((i, j))
        if dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1

    path.reverse()
    return len(path), dp[m][n], path

def main():
    m, n, food = read_input('mouse.in')
    num_visited, max_food, path = find_max_food_path(m, n, food)
    write_output('mouse.out', num_visited, max_food, path)

if __name__ == "__main__":
    main()
```

This solution uses only the Python standard library and should not encounter the `ModuleNotFoundError` that occurred with `numpy`. It performs the same operations using lists instead of numpy arrays, and it should still be memory efficient as it uses a simple 2D list for dynamic programming, which is a standard approach for such problems.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous code is that it only considers moving to the right or down at each step, which is a greedy approach and does not necessarily yield the maximum amount of food the mouse can collect. This is because the mouse is allowed to move up and down as well as left and right, as long as it does not enter a room it has visited before. 

The correct approach to this problem would be to use a depth-first search (DFS) algorithm to explore all possible paths, keeping track of the maximum food collected as well as the path taken to collect that amount of food. Here is the correct solution that uses DFS:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        food = [list(map(int, line.split())) for line in file]
    return m, n, food

def write_output(filename, max_food, path):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {max_food}\n")
        for pos in path:
            file.write(f"{pos[0]} {pos[1]}\n")

def dfs(x, y, m, n, food, visited, current_food, best_path, path):
    if x == m - 1 and y == n - 1:
        if current_food > best_path['max_food']:
            best_path['max_food'] = current_food
            best_path['path'] = path[:]
        return
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
            visited[nx][ny] = True
            path.append((nx + 1, ny + 1))
            dfs(nx, ny, m, n, food, visited, current_food + food[nx][ny], best_path, path)
            path.pop()
            visited[nx][ny] = False

def find_max_food_path(m, n, food):
    visited = [[False] * n for _ in range(m)]
    visited[0][0] = True
    best_path = {'max_food': 0, 'path': []}
    dfs(0, 0, m, n, food, visited, food[0][0], best_path, [(1, 1)])
    return best_path['max_food'], best_path['path']

def main():
    m, n, food = read_input('mouse.in')
    max_food, path = find_max_food_path(m, n, food)
    write_output('mouse.out', max_food, path)

if __name__ == "__main__":
    main()
```

This code performs a DFS on the grid to find the path that collects the maximum amount of food. It uses a recursive `dfs` function that explores all possible moves from the current position and updates the best path found so far. The `visited` grid is used to keep track of the rooms that the mouse has already visited.

The `find_max_food_path` function initializes the `visited` grid, sets the starting room as visited, and calls the `dfs` function with the initial conditions. The DFS will update the `best_path` dictionary with the maximum food collected and the corresponding path. Finally, the main function writes the result to the output file.
