---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Helper function to return the path taken
def get_path(dp, m, n):
    path = []
    i, j = m - 1, n - 1
    while i > 0 and j > 0:
        path.append((i + 1, j + 1))
        if dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1
    while i > 0:
        path.append((i + 1, j + 1))
        i -= 1
    while j > 0:
        path.append((i + 1, j + 1))
        j -= 1
    path.append((1, 1))
    return path[::-1]

# Main function to solve the problem
def solve_mouse_problem():
    # Read the file input
    with open('mouse.in', 'r') as input_file:
        m, n = map(int, input_file.readline().split())
        grid = np.array([list(map(int, input_file.readline().split())) for _ in range(m)], dtype=np.int32)

    # Initialize the DP table
    dp = np.zeros((m, n), dtype=np.int32)
    dp[0, 0] = grid[0, 0]

    # Fill the first row and first column with the max food along the path
    for i in range(1, m):
        dp[i, 0] = dp[i - 1, 0] + grid[i, 0]
    for j in range(1, n):
        dp[0, j] = dp[0, j - 1] + grid[0, j]

    # Populate the rest of the DP table
    for i in range(1, m):
        for j in range(1, n):
            dp[i, j] = max(dp[i - 1, j], dp[i, j - 1]) + grid[i, j]

    max_food = dp[m - 1, n - 1]
    path = get_path(dp, m, n)
    num_rooms = len(path)

    # Write the file output
    with open('mouse.out', 'w') as output_file:
        output_file.write(f"{num_rooms} {max_food}\n")
        for room in path:
            output_file.write(f"{room[0]} {room[1]}\n")

# Execute the main function
solve_mouse_problem()
```

Please note that the above code assumes that input and output file names are `mouse.in` and `mouse.out`, respectively. It is designed to work with these files and will not use `input()` or `print()` for data I/O. Additionally, the code uses Numpy to optimize memory usage and ensure the program fits within the 8MB memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed in the environment where the code is being executed. If you are unable to install `numpy` or need to adhere to the given memory constraints strictly, we'll need to avoid using `numpy` and instead rely on built-in Python data structures.

Let's rewrite the solution using pure Python:

```python
# Helper function to return the path taken
def get_path(dp, m, n):
    path = []
    i, j = m - 1, n - 1
    while i > 0 and j > 0:
        path.append((i + 1, j + 1))
        if dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1
    while i > 0:
        path.append((i + 1, j + 1))
        i -= 1
    while j > 0:
        path.append((i + 1, j + 1))
        j -= 1
    path.append((1, 1))
    return path[::-1]

# Main function to solve the problem
def solve_mouse_problem():
    # Read the file input
    with open('mouse.in', 'r') as input_file:
        m, n = map(int, input_file.readline().split())
        grid = [list(map(int, input_file.readline().split())) for _ in range(m)]

    # Initialize the DP table
    dp = [[0] * n for _ in range(m)]
    dp[0][0] = grid[0][0]

    # Fill the first row and first column with the max food along the path
    for i in range(1, m):
        dp[i][0] = dp[i - 1][0] + grid[i][0]
    for j in range(1, n):
        dp[0][j] = dp[0][j - 1] + grid[0][j]

    # Populate the rest of the DP table
    for i in range(1, m):
        for j in range(1, n):
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]

    max_food = dp[m - 1][n - 1]
    path = get_path(dp, m, n)
    num_rooms = len(path)

    # Write the file output
    with open('mouse.out', 'w') as output_file:
        output_file.write(f"{num_rooms} {max_food}\n")
        for room in path:
            output_file.write(f"{room[0]} {room[1]}\n")

# Execute the main function
solve_mouse_problem()
```

In this revised code, I've replaced the use of `numpy` arrays with list comprehensions to make sure the code runs in an environment where `numpy` is not available. The logic of the code remains the same, we're just using standard Python lists instead.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
