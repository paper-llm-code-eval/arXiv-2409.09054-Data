---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grid = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.int32)
    return m, n, grid

def write_output(filename, path, max_food):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {max_food}\n")
        for p in path:
            file.write(f"{p[0]} {p[1]}\n")

def find_max_food_path(m, n, grid):
    # Create a memoization matrix to store the maximum food that can be collected 
    # from each cell to the bottom-right cell, initialize with -1
    memo = np.full((m, n), -1, dtype=np.int32)

    def dp(r, c):
        # If we reached the bottom-right corner, return the food at that cell
        if r == m - 1 and c == n - 1:
            return grid[r, c]

        # Check if we have already solved this subproblem
        if memo[r, c] != -1:
            return memo[r, c]

        # Initialize the food collected to zero
        food_collected = grid[r, c]
        right = down = 0

        # Explore the right cell
        if c + 1 < n:
            right = dp(r, c + 1)

        # Explore the bottom cell
        if r + 1 < m:
            down = dp(r + 1, c)

        # Take the maximum of right and down paths and add to the current cell's food
        memo[r, c] = food_collected + max(right, down)
        return memo[r, c]

    # Start from the top-left corner
    max_food = dp(0, 0)

    # Reconstruct the path using memoization matrix
    r, c = 0, 0
    path = [(1, 1)]  # 1-indexed for the output format
    while (r != m - 1) or (c != n - 1):
        if c + 1 < n and memo[r, c + 1] >= memo[r + 1, c] if r + 1 < m else 0:
            c += 1
        else:
            r += 1
        path.append((r + 1, c + 1))

    return path, max_food

def mouse_challenge():
    m, n, grid = read_input('mouse.in')
    path, max_food = find_max_food_path(m, n, grid)
    write_output('mouse.out', path, max_food)

# Execute the challenge function
mouse_challenge()
```

This solution reads from a file `mouse.in`, finds the maximum amount of food a mouse can eat along with the path, and writes the output to `mouse.out`. It utilizes dynamic programming and the numpy library to optimize for both time and memory usage. The memory limit should be respected as the solution uses an `m x n` numpy array for the grid and another similarly sized array for memoization. The path reconstruction does not require additional space that would exceed the memory limits. The solution is written without using `input()` or `print()` for I/O operations, as per the requirements.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the environment where the program is being executed. Since the original challenge specifies using numpy for an efficient solution and there might be constraints about installing or using external libraries like numpy in the execution environment, I will have to rewrite the solution without using numpy.

Here is the revised solution without numpy:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grid = [list(map(int, file.readline().split())) for _ in range(m)]
    return m, n, grid

def write_output(filename, path, max_food):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {max_food}\n")
        for p in path:
            file.write(f"{p[0]} {p[1]}\n")

def find_max_food_path(m, n, grid):
    memo = [[-1 for _ in range(n)] for _ in range(m)]

    def dp(r, c):
        if r == m - 1 and c == n - 1:
            return grid[r][c]
        if memo[r][c] != -1:
            return memo[r][c]
        food_collected = grid[r][c]
        right = down = 0
        if c + 1 < n:
            right = dp(r, c + 1)
        if r + 1 < m:
            down = dp(r + 1, c)
        memo[r][c] = food_collected + max(right, down)
        return memo[r][c]

    max_food = dp(0, 0)

    r, c = 0, 0
    path = [(1, 1)]
    while (r != m - 1) or (c != n - 1):
        if c + 1 < n and (r + 1 == m or memo[r][c + 1] >= memo[r + 1][c]):
            c += 1
        else:
            r += 1
        path.append((r + 1, c + 1))

    return path, max_food

def mouse_challenge():
    m, n, grid = read_input('mouse.in')
    path, max_food = find_max_food_path(m, n, grid)
    write_output('mouse.out', path, max_food)

mouse_challenge()
```

This solution uses standard Python lists instead of numpy arrays. The logic of the algorithm remains the same: we use dynamic programming to find the maximum food the mouse can eat and reconstruct the path from the memoization matrix. The program reads from `mouse.in` and writes to `mouse.out`, and does not use `input()` or `print()` to manipulate I/O. The memory usage is still within the constraints, as we only use a 2D list for the grid and another for memoization, which should not exceed 8MB for the given problem size.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The output difference indicates that the original algorithm did not correctly optimize for the maximum amount of food the mouse can consume. Specifically, the logic in the `dp` function appears to be incorrect. The error lies in the fact that the algorithm only considers rightward and downward movements from a cell without considering that the mouse might need to move upwards or leftwards after moving right or down to maximize the total amount of food.

To address this, the algorithm needs to be able to backtrack and consider all possible paths from the starting cell to the destination cell, accumulating the maximum amount of food. Since the mouse can move in four directions, a Depth-First Search (DFS) algorithm with backtracking and memoization/cache to store the best result at each cell might be necessary.

Here's the revised solution with correct logic:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grid = [list(map(int, file.readline().split())) for _ in range(m)]
    return m, n, grid

def write_output(filename, path, max_food):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {max_food}\n")
        for p in path:
            file.write(f"{p[0]} {p[1]}\n")

def find_max_food_path(m, n, grid):
    visited = [[False] * n for _ in range(m)]
    memo = {}
    max_food = 0
    best_path = []

    def backtrack(r, c, food, path):
        nonlocal max_food, best_path
        if r == m - 1 and c == n - 1:
            if food > max_food:
                max_food = food
                best_path = path[:]
            return
        visited[r][c] = True
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)] # right, down, left, up
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < m and 0 <= nc < n and not visited[nr][nc]:
                backtrack(nr, nc, food + grid[nr][nc], path + [(nr + 1, nc + 1)])
        visited[r][c] = False

    backtrack(0, 0, grid[0][0], [(1, 1)])
    return best_path, max_food

def mouse_challenge():
    m, n, grid = read_input('mouse.in')
    path, max_food = find_max_food_path(m, n, grid)
    write_output('mouse.out', path, max_food)

mouse_challenge()
```

This solution maintains a visited matrix to prevent the mouse from entering a cell more than once and invokes a DFS-based backtracking algorithm starting from the top-left cell. The `backtrack` function recursively explores all possible paths and updates the global variables `max_food` and `best_path` when it finds a better path. The output is written to 'mouse.out' without using `input()` or `print()`.
