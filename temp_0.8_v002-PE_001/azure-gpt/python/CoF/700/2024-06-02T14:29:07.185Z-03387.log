---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input from mouse.in
with open('mouse.in', 'r') as f:
    m, n = map(int, f.readline().split())
    grid = np.array([list(map(int, f.readline().split())) for _ in range(m)])

# Initialize a DP matrix to store the maximum food that can be collected
dp = np.zeros((m, n), dtype=int)
dp[0, 0] = grid[0, 0]

# Fill the DP matrix
for i in range(m):
    for j in range(n):
        if i > 0:
            dp[i, j] = max(dp[i, j], dp[i - 1, j] + grid[i, j])
        if j > 0:
            dp[i, j] = max(dp[i, j], dp[i, j - 1] + grid[i, j])

# Backtrack to find the path
path = []
i, j = m - 1, n - 1
while i != 0 or j != 0:
    path.append((i + 1, j + 1))
    if i == 0:
        j -= 1
    elif j == 0:
        i -= 1
    else:
        if dp[i - 1, j] > dp[i, j - 1]:
            i -= 1
        else:
            j -= 1

path.append((1, 1))
path.reverse()

# Write output to mouse.out
with open('mouse.out', 'w') as f:
    f.write(f"{len(path)} {dp[-1, -1]}\n")
    for p in path:
        f.write(f"{p[0]} {p[1]}\n")
```

This solution reads the grid from the `mouse.in` file, uses dynamic programming to find the maximum amount of food the mouse can eat, and backtracks to find the path the mouse took. The path and the maximum food quantity are written to `mouse.out`. The use of NumPy ensures efficient memory and time usage, and the data is handled with file operations instead of `input()` or `print()`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the exit code 1, along with the error message `ModuleNotFoundError: No module named 'numpy'`, indicates that the NumPy library is not installed or not available in the runtime environment where the code is being executed. Since the instructions specify the need for an efficient solution and the use of NumPy, but the environment does not have NumPy installed, I will rewrite the solution to not use NumPy or any external libraries.

Here's the corrected solution using only built-in Python functionality:

```python
# Read input from mouse.in
with open('mouse.in', 'r') as f:
    m, n = map(int, f.readline().split())
    grid = [list(map(int, f.readline().split())) for _ in range(m)]

# Initialize a DP matrix to store the maximum food that can be collected
dp = [[0 for _ in range(n)] for _ in range(m)]
dp[0][0] = grid[0][0]

# Fill the DP matrix
for i in range(m):
    for j in range(n):
        if i > 0:
            dp[i][j] = max(dp[i][j], dp[i - 1][j] + grid[i][j])
        if j > 0:
            dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j])

# Backtrack to find the path
path = []
i, j = m - 1, n - 1
while i != 0 or j != 0:
    path.append((i + 1, j + 1))
    if i == 0:
        j -= 1
    elif j == 0:
        i -= 1
    else:
        if dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1

path.append((1, 1))
path.reverse()

# Write output to mouse.out
with open('mouse.out', 'w') as f:
    f.write(f"{len(path)} {dp[-1][-1]}\n")
    for p in path:
        f.write(f"{p[0]} {p[1]}\n")
```

This solution does not use NumPy and adheres to the memory limitation of ~8MB. The algorithm is still based on dynamic programming to find the maximum amount of food the mouse can eat, and it backtracks to find the path the mouse took. The solution reads from `mouse.in` and writes to `mouse.out`, as required.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
