---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_matrix_from_file(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.int32)
    return m, n, matrix

def write_path_to_file(filename, path, food):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {food}\n")
        for position in path:
            file.write(f"{position[0]} {position[1]}\n")

def find_maximum_food_path(m, n, matrix):
    dp = np.zeros((m+1, n+1), dtype=np.int32)
    dp[1, 1] = matrix[0, 0]
    for i in range(1, m+1):
        for j in range(1, n+1):
            if i == 1 and j == 1:
                continue
            dp[i, j] = max(dp[i-1, j], dp[i, j-1]) + matrix[i-1, j-1]
    
    food = dp[m, n]
    path = [(m, n)]
    i, j = m, n
    while i > 1 or j > 1:
        if i == 1:
            j -= 1
        elif j == 1:
            i -= 1
        elif dp[i-1, j] > dp[i, j-1]:
            i -= 1
        else:
            j -= 1
        path.append((i, j))
    
    path.reverse()
    return path, food

# Main execution
m, n, matrix = read_matrix_from_file('mouse.in')
path, total_food = find_maximum_food_path(m, n, matrix)
write_path_to_file('mouse.out', path, total_food)
```

This code reads the maze from `mouse.in`, finds the path that maximizes the amount of food the mouse can collect while traversing from the top-left corner to the bottom-right corner, and writes the path and the total amount of collected food to `mouse.out`. It uses dynamic programming to solve the problem efficiently and numpy for optimized memory and computation performance.

Please ensure that the code is saved in a `.py` file and executed in an environment where the numpy library is installed and the file `mouse.in` exists in the same directory.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the numpy module is not installed in the environment where the code is being executed. Given this situation and the memory constraints, we need to rewrite the solution without using numpy or any other third-party library that may cause memory or compatibility issues.

Here is the updated solution that does not rely on numpy:

```python
def read_matrix_from_file(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = [list(map(int, file.readline().split())) for _ in range(m)]
    return m, n, matrix

def write_path_to_file(filename, path, food):
    with open(filename, 'w') as file:
        file.write(f"{len(path)} {food}\n")
        for position in path:
            file.write(f"{position[0]} {position[1]}\n")

def find_maximum_food_path(m, n, matrix):
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    dp[1][1] = matrix[0][0]
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if not (i == 1 and j == 1):
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i - 1][j - 1]
    
    food = dp[m][n]
    path = [(m, n)]
    i, j = m, n
    while i > 1 or j > 1:
        if i == 1:
            j -= 1
        elif j == 1:
            i -= 1
        elif dp[i - 1][j] > dp[i][j - 1]:
            i -= 1
        else:
            j -= 1
        path.append((i, j))
    
    path.reverse()
    return path, food

# Main execution
m, n, matrix = read_matrix_from_file('mouse.in')
path, total_food = find_maximum_food_path(m, n, matrix)
write_path_to_file('mouse.out', path, total_food)
```

This version of the solution only uses built-in Python functions and should work correctly within the memory limitations as it does not rely on the numpy library. It follows the same logic as the previous solution, with dynamic programming used to determine the path that allows the mouse to consume the maximum amount of food while traversing the grid.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
