---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def find_max_food_path(matrix, m, n):
    dp = np.zeros((m+1, n+1), dtype=np.int64)
    path = [[[] for _ in range(n+1)] for _ in range(m+1)]

    # Bottom-up approach to fill in the dp table and store paths
    for i in range(1, m+1):
        for j in range(1, n+1):
            if dp[i-1][j] > dp[i][j-1]:  # Coming from top
                dp[i][j] = dp[i-1][j] + matrix[i-1][j-1]
                path[i][j] = path[i-1][j] + [(i, j)]
            else:  # Coming from left
                dp[i][j] = dp[i][j-1] + matrix[i-1][j-1]
                path[i][j] = path[i][j-1] + [(i, j)]

    return path[m][n], dp[m][n]

def write_output(filename, num_rooms, max_food, path):
    with open(filename, 'w') as f:
        f.write(f"{num_rooms} {max_food}\n")
        for p in path:
            f.write(f"{p[0]} {p[1]}\n")

def main():
    with open('mouse.in', 'r') as f:
        m, n = map(int, f.readline().split())
        matrix = [list(map(int, line.split())) for line in f.readlines()]

    matrix = np.array(matrix, dtype=np.int64)

    path, max_food = find_max_food_path(matrix, m, n)
    num_rooms = len(path)

    write_output('mouse.out', num_rooms, max_food, path)

if __name__ == "__main__":
    main()
```

This solution uses dynamic programming to find the maximum food collected along with the path taken. It uses numpy arrays for efficient memory and computation. The `find_max_food_path` function iterates over the matrix, calculating the maximum food that can be collected up to each cell and recording the path taken to reach it.

Finally, the `write_output` function formats the output correctly to the `mouse.out` file. The main function reads the input, calls the `find_max_food_path` function, and writes the output.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the `numpy` library is not available in the environment where the code is executed. To address this, we need to rewrite the solution using standard Python data structures without relying on external libraries like `numpy`. The revised solution will use lists to store and manipulate the matrix and paths, and will still adhere to the principles of dynamic programming to solve the problem efficiently.

Here's the entire updated solution without using `numpy`:

```python
def find_max_food_path(matrix, m, n):
    dp = [[0] * (n+1) for _ in range(m+1)]
    path = [[[] for _ in range(n+1)] for _ in range(m+1)]

    # Bottom-up approach to fill in the dp table and store paths
    for i in range(1, m+1):
        for j in range(1, n+1):
            if dp[i-1][j] > dp[i][j-1]:  # Coming from top
                dp[i][j] = dp[i-1][j] + matrix[i-1][j-1]
                path[i][j] = path[i-1][j] + [(i, j)]
            else:  # Coming from left
                dp[i][j] = dp[i][j-1] + matrix[i-1][j-1]
                path[i][j] = path[i][j-1] + [(i, j)]

    return path[m][n], dp[m][n]

def write_output(filename, num_rooms, max_food, path):
    with open(filename, 'w') as f:
        f.write(f"{num_rooms} {max_food}\n")
        for p in path:
            f.write(f"{p[0]} {p[1]}\n")

def main():
    with open('mouse.in', 'r') as f:
        m, n = map(int, f.readline().split())
        matrix = [list(map(int, line.split())) for line in f.readlines()]

    path, max_food = find_max_food_path(matrix, m, n)
    num_rooms = len(path)

    write_output('mouse.out', num_rooms, max_food, path)

if __name__ == "__main__":
    main()
```

The logic remains the same as the previous solution, but now we are using lists instead of numpy arrays. The function `find_max_food_path` still computes the maximum amount of food that can be collected from the top-left corner to the bottom-right corner, along with the path taken. The `write_output` function writes the results to `mouse.out`. The `main` function is the entry point of the program, reading the input from `mouse.in` and invoking the necessary functions to find the solution.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The provided solution incorrectly assumes that the mouse can only move either to the right or down. However, the mouse is allowed to move to any adjacent cell (left, right, up, or down), as long as it does not visit a cell more than once. Therefore, we need to implement a solution that explores all possible paths the mouse can take to ensure we find the one that collects the maximum amount of food.

We can address this problem by using a backtracking algorithm that will explore all possible paths and keep track of the maximum food collected along with the corresponding path. Here is a solution that implements this approach:

```python
def find_max_food_path(matrix, m, n):
    def backtrack(row, col, visited, current_food, current_path):
        nonlocal max_food, max_path

        # Add the current cell to the visited set and path
        visited.add((row, col))
        current_path.append((row + 1, col + 1))
        current_food += matrix[row][col]

        # Check if we reached the bottom-right corner and update max_food and max_path if needed
        if row == m - 1 and col == n - 1:
            if current_food > max_food:
                max_food = current_food
                max_path = current_path.copy()

        # Explore adjacent cells
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < m and 0 <= new_col < n and (new_row, new_col) not in visited:
                backtrack(new_row, new_col, visited, current_food, current_path)

        # Backtrack: remove the current cell from the visited set and path
        visited.remove((row, col))
        current_path.pop()
        current_food -= matrix[row][col]

    max_food = 0
    max_path = []
    backtrack(0, 0, set(), 0, [])
    return max_path, max_food

def write_output(filename, num_rooms, max_food, path):
    with open(filename, 'w') as f:
        f.write(f"{num_rooms} {max_food}\n")
        for p in path:
            f.write(f"{p[0]} {p[1]}\n")

def main():
    with open('mouse.in', 'r') as f:
        m, n = map(int, f.readline().split())
        matrix = [list(map(int, line.split())) for line in f.readlines()]

    path, max_food = find_max_food_path(matrix, m, n)
    num_rooms = len(path)

    write_output('mouse.out', num_rooms, max_food, path)

if __name__ == "__main__":
    main()
```

This revised solution uses a backtracking approach to explore all possible paths. The `backtrack` function is a recursive function that tries to move in all possible directions from the current cell, while keeping track of the visited cells to avoid revisiting them. It updates the maximum amount of food collected and the corresponding path whenever it reaches the bottom-right corner.

To run this solution, we call the `main` function, which reads the input from `mouse.in`, invokes `find_max_food_path` to compute the maximum food and path, and then writes the output to `mouse.out`.
