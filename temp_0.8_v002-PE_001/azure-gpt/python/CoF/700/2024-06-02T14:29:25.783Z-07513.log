---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution for the mouse maze problem
import numpy as np

# Reading input data from 'mouse.in'
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    food_matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.int32)

# Initialize the DP table with -1
dp_table = np.full((m, n), -1, dtype=np.int32)

# Calculate the maximum food that can be eaten using dynamic programming
def calculate_max_food(x, y):
    if x >= m or y >= n:
        return 0
    if dp_table[x, y] != -1:
        return dp_table[x, y]
    dp_table[x, y] = food_matrix[x, y] + max(calculate_max_food(x + 1, y), calculate_max_food(x, y + 1))
    return dp_table[x, y]

# Backtrack to find the path
def find_path(x, y):
    path = [(x + 1, y + 1)]
    while x != m - 1 or y != n - 1:
        if x == m - 1:
            y += 1
        elif y == n - 1:
            x += 1
        else:
            if dp_table[x + 1, y] > dp_table[x, y + 1]:
                x += 1
            else:
                y += 1
        path.append((x + 1, y + 1))
    return path

# Run the DP algorithm to fill the table
max_food = calculate_max_food(0, 0)
# Find the path of the mouse
path = find_path(0, 0)

# Write to 'mouse.out'
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for position in path:
        file.write(f"{position[0]} {position[1]}\n")
```

This Python code employs dynamic programming to find the maximum amount of food that a mouse can eat in a 2D grid and the path it can take to do so. It reads from a file named `mouse.in` and writes the output to a file named `mouse.out`. The solution minimizes memory usage by using a DP table of integers and ensuring that the path is not stored until necessary. The code carefully avoids memory-intensive constructs and is designed to be efficient both in terms of time and memory. The memory limit of 8MB is taken into consideration, and the solution uses the numpy library to handle the input data and computations.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1 along with the message in the standard error output indicates that the `numpy` module is not installed or not found. Since the constraints of the problem ask us to optimize for both time and memory and to avoid using unnecessary memory which may result in an Out Of Memory (OOM) error, we should write the solution without using the `numpy` library, and instead, use Python's built-in data structures and algorithms.

Here is the rewritten solution without using `numpy`:

```python
# Solution for the mouse maze problem without numpy

# Reading input data from 'mouse.in'
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    food_matrix = [list(map(int, file.readline().split())) for _ in range(m)]

# Initialize the DP table with -1
dp_table = [[-1 for _ in range(n)] for _ in range(m)]

# Calculate the maximum food that can be eaten using dynamic programming
def calculate_max_food(x, y):
    if x >= m or y >= n:
        return 0
    if dp_table[x][y] != -1:
        return dp_table[x][y]
    dp_table[x][y] = food_matrix[x][y] + max(calculate_max_food(x + 1, y), calculate_max_food(x, y + 1))
    return dp_table[x][y]

# Backtrack to find the path
def find_path(x, y):
    path = [(x + 1, y + 1)]
    while x != m - 1 or y != n - 1:
        if x == m - 1:
            y += 1
        elif y == n - 1:
            x += 1
        else:
            if dp_table[x + 1][y] > dp_table[x][y + 1]:
                x += 1
            else:
                y += 1
        path.append((x + 1, y + 1))
    return path

# Run the DP algorithm to fill the table
max_food = calculate_max_food(0, 0)
# Find the path of the mouse
path = find_path(0, 0)

# Write to 'mouse.out'
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for position in path:
        file.write(f"{position[0]} {position[1]}\n")
```

Now the solution uses lists instead of numpy arrays and functions that are available in Python's standard library. This should resolve the `ModuleNotFoundError` and ensure the program can run in an environment without external libraries installed.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
