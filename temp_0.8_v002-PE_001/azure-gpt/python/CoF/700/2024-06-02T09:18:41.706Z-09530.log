---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Custom comparator function for sorting paths based on their food amount and length
def compare(item1, item2):
    if item1[2] > item2[2]:  # higher food amount is better
        return -1
    elif item1[2] < item2[2]:
        return 1
    else:  # if food amount is equal, shorter path is better
        return len(item1[1]) - len(item2[1])

# Read the input file and parse m, n and the food grid
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    food_grid = np.array([list(map(int, line.split())) for line in file])

# Initialize the dynamic programming table to store maximum food amount from (i, j) to (m, n)
dp = np.zeros((m, n), dtype=int)
dp_path = [[[] for _ in range(n)] for _ in range(m)]  # To store paths for each cell

# Start from the bottom right cell and fill the table with maximum food amount backward
for i in reversed(range(m)):
    for j in reversed(range(n)):
        if i == m - 1 and j == n - 1:
            dp[i, j] = food_grid[i, j]
            dp_path[i][j] = [(m, n)]
        else:
            right = dp[i, j + 1] if j + 1 < n else 0
            down = dp[i + 1, j] if i + 1 < m else 0
            # Choose the direction which gives more food
            if right > down:
                dp[i, j] = food_grid[i, j] + right
                dp_path[i][j] = [(i + 1, j + 1)] + dp_path[i][j + 1]
            else:
                dp[i, j] = food_grid[i, j] + down
                dp_path[i][j] = [(i + 1, j + 1)] + dp_path[i + 1][j]

# Collect the result from the top left cell
max_food = dp[0, 0]
path = dp_path[0][0]

# Write the output file with maximum food amount and the path
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for position in path:
        file.write(f"{position[0]} {position[1]}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available. Since my initial solution relies heavily on `numpy` for efficiency, and considering the memory constraints, I will rewrite the solution to avoid the use of `numpy` and other external libraries. I will use built-in Python data structures to solve the problem.

Here is the new solution:

```python
# Function to backtrack and find the maximum food path
def find_path(m, n, dp, food_grid):
    path = []
    i, j = 0, 0
    path.append((1, 1))  # Start from (1, 1)
    
    while (i, j) != (m - 1, n - 1):
        if j < n - 1 and dp[i][j + 1] >= dp[i + 1][j]:
            j += 1
        else:
            i += 1
        path.append((i + 1, j + 1))
        
    return path

# Read the input file and parse m, n, and the food grid
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().strip().split())
    food_grid = [list(map(int, line.strip().split())) for line in file]

# Initialize the dynamic programming table to store the maximum food amount
dp = [[0] * n for _ in range(m)]

# Start from the bottom right cell and fill the table with the maximum food amount backward
for i in range(m - 1, -1, -1):
    for j in range(n - 1, -1, -1):
        if i == m - 1 and j == n - 1:
            dp[i][j] = food_grid[i][j]
        else:
            dp[i][j] = food_grid[i][j] + max(
                dp[i + 1][j] if i + 1 < m else 0,
                dp[i][j + 1] if j + 1 < n else 0
            )

# Collect the result from the top left cell
max_food = dp[0][0]
path = find_path(m, n, dp, food_grid)

# Write the output file with the maximum food amount and the path
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for position in path:
        file.write(f"{position[0]} {position[1]}\n")
```

This solution uses only built-in Python features and should not exceed the memory limit. It uses a bottom-up dynamic programming approach to calculate the maximum amount of food that can be collected while also storing the path. It then backtracks from the end to the start to reconstruct the path.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
