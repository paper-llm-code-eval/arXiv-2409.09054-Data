---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def sieve_of_eratosthenes(max_num):
    sieve = np.ones(max_num + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(max_num**0.5) + 1):
        if sieve[i]:
            sieve[i*i:max_num+1:i] = False
    return sieve

def prime_factors(num, primes):
    factors = []
    for p in primes:
        if p * p > num:
            break
        if num % p == 0:
            factors.append(p)
            while num % p == 0:
                num //= p
    if num > 1:
        factors.append(num)
    return factors

def solve_case_1(arr, K):
    max_len = 0
    left = 0
    primes_sum = comp_sum = 0
    for right, num in enumerate(arr):
        if num > 1:
            if is_prime[num]:
                primes_sum += num
            else:
                comp_sum += num
            while primes_sum * comp_sum > K:
                if arr[left] > 1:
                    if is_prime[arr[left]]:
                        primes_sum -= arr[left]
                    else:
                        comp_sum -= arr[left]
                left += 1
        max_len = max(max_len, right - left + 1)
    return max_len

def solve_case_2(arr, primes):
    max_len = 0
    max_pos = (0, 0)
    gcd_all = arr[0] if arr[0] > 1 else 1
    left = 0
    for right, num in enumerate(arr):
        if num > 1:
            if not is_prime[num]:
                factors = prime_factors(num, primes)
                arr[right] = factors[0] * factors[-1]
            gcd_all = np.gcd(gcd_all, arr[right])
        else:
            arr[right] = 1
        while gcd_all == 1 and left <= right:
            gcd_all = np.gcd.reduce(arr[left:right+1])
            left += 1
        if right - left + 1 > max_len:
            max_len = right - left + 1
            max_pos = (left, right)
    return max_pos

# Read input
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    A = np.fromstring(file.readline(), dtype=int, sep=' ')

# Generate list of prime numbers using sieve
MAX_NUM = 1000000
is_prime = sieve_of_eratosthenes(MAX_NUM)
primes = np.nonzero(is_prime)[0]

# Solve
if C == 1:
    result = solve_case_1(A, K)
elif C == 2:
    result = solve_case_2(A, primes)

# Write output
with open('tema.out', 'w') as file:
    if C == 1:
        file.write(f'{result}\n')
    elif C == 2:
        file.write(f'{result[0]+1} {result[1]+1}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to perform Sieve of Eratosthenes and return a boolean array indicating prime numbers
def sieve_of_eratosthenes(max_num):
    sieve = np.ones(max_num + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(max_num**0.5) + 1):
        if sieve[i]:
            sieve[i*i:max_num+1:i] = False
    return sieve

# Function to determine if a number is composite and return its smallest and largest prime factors
def smallest_largest_prime_factors(num, primes):
    if num <= 1 or primes[num]:
        return num, num
    smallest_prime = None
    for prime in primes:
        if num % prime == 0:
            smallest_prime = prime
            while num % prime == 0:
                num //= prime
            break
    return smallest_prime, num

# Function to solve the first problem
def max_sequence_length(arr, primes, K):
    max_len = 0
    left = 0
    prime_sum, composite_sum = 0, 0
    for right, value in enumerate(arr):
        if primes[value]:
            prime_sum += value
        elif value > 1:  # it's a composite number
            composite_sum += value
        while prime_sum * composite_sum > K and left <= right:
            if primes[arr[left]]:
                prime_sum -= arr[left]
            elif arr[left] > 1:
                composite_sum -= arr[left]
            left += 1
        max_len = max(max_len, right - left + 1)
    return max_len

# Function to solve the second problem
def max_common_divisor_sequence(arr, primes):
    left = 0
    max_len = 0
    max_start = max_end = 0
    gcd = 0
    for right in range(len(arr)):
        small_prime, large_prime = smallest_largest_prime_factors(arr[right], primes)
        if small_prime != 1:
            arr[right] = small_prime * large_prime
            gcd = np.gcd(arr[right], gcd) if gcd != 0 else arr[right]
        while gcd <= 1 and left <= right:
            gcd = np.gcd.reduce(arr[left:right+1])
            left += 1
        if right - left + 1 > max_len:
            max_len = right - left + 1
            max_start, max_end = left, right
    return max_start + 1, max_end + 1

# Main program starts here
MAX_NUM = 1000000
prime_mask = sieve_of_eratosthenes(MAX_NUM)

with open('tema.in', 'r') as fin:
    C, N, K = map(int, fin.readline().split())
    arr = np.fromstring(fin.readline(), dtype=int, sep=' ')

if C == 1:
    result = max_sequence_length(arr, prime_mask, K)
elif C == 2:
    result = max_common_divisor_sequence(arr, prime_mask)

with open('tema.out', 'w') as fout:
    if C == 1:
        fout.write(f'{result}\n')
    else:
        fout.write(f'{result[0]} {result[1]}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def get_prime_factors(n):
    factors = set()
    # Count the number of 2s that divide n
    while n % 2 == 0:
        factors.add(2)
        n = n // 2
        
    # n must be odd at this point
    for i in range(3, int(np.sqrt(n)) + 1, 2):
        # While i divides n, add i and divide n
        while n % i == 0:
            factors.add(i)
            n = n // i
            
    # Condition if n is a prime number greater than 2
    if n > 2:
        factors.add(n)
        
    return factors

def task1(A, K):
    max_len = 0
    primes_sum = 0
    composites_sum = 0
    left = 0
    for right, val in enumerate(A):
        if is_prime(val):
            primes_sum += val
        elif val > 1:
            composites_sum += val
        while primes_sum * composites_sum > K and left <= right:
            if is_prime(A[left]):
                primes_sum -= A[left]
            elif A[left] > 1:
                composites_sum -= A[left]
            left += 1
        max_len = max(max_len, right - left + 1)
    return max_len

def task2(A):
    max_len = 0
    start = end = 0
    for i in range(len(A)):
        for j in range(i, len(A)):
            sub_array = A[i:j+1]
            gcd = np.gcd.reduce(sub_array)
            if gcd > 1 and j - i + 1 > max_len:
                max_len = j - i + 1
                start, end = i, j
    return start + 1, end + 1

# Read input
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    A = list(map(int, file.readline().split()))

# Process input and write output
with open('tema.out', 'w') as file:
    if C == 1:
        result = task1(A, K)
        file.write(str(result) + '\n')
    else:
        start, end = task2(A)
        file.write(f'{start} {end}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to create a sieve of prime numbers up to a certain limit
def sieve_of_eratosthenes(limit):
    sieve = np.ones(limit + 1, dtype=bool)
    sieve[:2] = False
    for number in range(2, int(limit ** 0.5) + 1):
        if sieve[number]:
            sieve[number*number:limit+1:number] = False
    return sieve

# Function to calculate the maximum sequence length for task 1
def max_sequence_length(arr, K, prime_sieve):
    max_length = 0
    prime_sum = composite_sum = 0
    start = 0

    for end in range(len(arr)):
        if arr[end] == 1:
            continue

        if prime_sieve[arr[end]]:
            prime_sum += arr[end]
        else:
            composite_sum += arr[end]

        while prime_sum * composite_sum > K:
            if prime_sieve[arr[start]]:
                prime_sum -= arr[start]
            else:
                composite_sum -= arr[start]
            start += 1

        max_length = max(max_length, end - start + 1)

    return max_length

# Function to find the maximum GCD subsequence for task 2
def max_gcd_subsequence(arr, prime_sieve):
    max_length = 0
    max_start = max_end = 0
    current_gcd = 0
    start = 0

    for end, value in enumerate(arr):
        if value == 1:
            continue

        if not prime_sieve[value]:
            smallest_factor = next((i for i in range(2, int(np.sqrt(value)) + 1) if value % i == 0), value)
            largest_factor = value // smallest_factor
            arr[end] = smallest_factor * largest_factor

        current_gcd = np.gcd(current_gcd, arr[end]) if current_gcd != 0 else arr[end]

        while current_gcd == 1 and start < end:
            start += 1
            current_gcd = np.gcd.reduce(arr[start:end+1])

        if end - start + 1 > max_length:
            max_length = end - start + 1
            max_start, max_end = start, end

    return max_start + 1, max_end + 1

# Read input
with open('tema.in', 'r') as fin:
    C, N, K = map(int, fin.readline().split())
    A = np.array(fin.readline().split(), dtype=np.int64)

# Prime sieve for checking prime numbers
prime_sieve = sieve_of_eratosthenes(1000000)

# Calculate the result based on the task
if C == 1:
    result = max_sequence_length(A, K, prime_sieve)
elif C == 2:
    result = max_gcd_subsequence(A, prime_sieve)

# Write output
with open('tema.out', 'w') as fout:
    if C == 1:
        fout.write(f'{result}\n')
    else:
        fout.write(f'{result[0]} {result[1]}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
