---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def prime_factors(n):
    factors = []
    for i in range(2, int(n**0.5) + 1):
        while n % i == 0:
            factors.append(i)
            n //= i
    if n > 1:
        factors.append(n)
    return factors

def solve_task1(A, K):
    max_length = 0
    for start in range(len(A)):
        prime_sum = 0
        comp_sum = 0
        for end in range(start, len(A)):
            if is_prime(A[end]):
                prime_sum += A[end]
            elif A[end] > 1:
                comp_sum += A[end]
            if prime_sum * comp_sum <= K:
                max_length = max(max_length, end - start + 1)
            else:
                break
    return max_length

def solve_task2(A):
    max_len = 0
    max_pos = (0, 0)
    gcd = np.gcd.reduce
    for start in range(len(A)-1, -1, -1):
        for end in range(start+1, len(A)):
            if gcd(A[start:end+1]) != 1:
                if end - start + 1 > max_len:
                    max_len = end - start + 1
                    max_pos = (start+1, end+1)
                break
    return max_pos

def main():
    with open('tema.in', 'r') as f:
        C, N, K = map(int, f.readline().split())
        A = list(map(int, f.readline().split()))
        
    if C == 1:
        result = solve_task1(A, K)
    elif C == 2:
        B = np.array(A)
        for i in range(N):
            if not is_prime(B[i]):
                factors = prime_factors(B[i])
                B[i] = factors[0] * factors[-1]
        result = solve_task2(B)
        
    with open('tema.out', 'w') as f:
        if isinstance(result, int):
            f.write(str(result) + '\n')
        else:
            f.write(f"{result[0]} {result[1]}\n")

main()
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def sieve_of_eratosthenes(n):
    sieve = np.ones(n+1, dtype=bool)
    sieve[0:2] = False
    for i in range(2, int(n**0.5)+1):
        if sieve[i]:
            sieve[i*i:n+1:i] = False
    return sieve

def solve_task1(primes, A, K):
    max_length = 0
    start = 0
    prime_sum = 0
    comp_sum = 0
    for end in range(len(A)):
        if primes[A[end]]:
            prime_sum += A[end]
        elif A[end] > 1:
            comp_sum += A[end]
        while prime_sum * comp_sum > K and start <= end:
            if primes[A[start]]:
                prime_sum -= A[start]
            elif A[start] > 1:
                comp_sum -= A[start]
            start += 1
        max_length = max(max_length, end - start + 1)
    return max_length

def solve_task2(A):
    max_len = 0
    max_pos = (0, 0)
    gcd = np.gcd.reduce
    for start in range(len(A)):
        current_gcd = A[start]
        for end in range(start, len(A)):
            current_gcd = gcd(current_gcd, A[end])
            if current_gcd == 1:
                break
            if end - start + 1 > max_len:
                max_len, max_pos = end - start + 1, (start+1, end+1)
    return max_pos

def main():
    with open('tema.in', 'r') as f:
        C, N, K = map(int, f.readline().split())
        A = np.fromstring(f.readline(), dtype=int, sep=' ')

    primes = sieve_of_eratosthenes(max(A))

    if C == 1:
        result = solve_task1(primes, A, K)
    elif C == 2:
        B = np.array(A)
        for i in range(N):
            if not primes[B[i]]:
                low, high = 2, B[i]
                while low <= high:
                    if B[i] % low == 0 and primes[low]:
                        high = B[i] // low
                        if primes[high]:
                            B[i] = low * high
                            break
                    low += 1
        result = solve_task2(B)

    with open('tema.out', 'w') as f:
        if isinstance(result, int):
            f.write(f'{result}\n')
        else:
            f.write(f'{result[0]} {result[1]}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient Sieve of Eratosthenes to mark prime numbers
def sieve_of_eratosthenes(max_num):
    sieve = np.ones(max_num + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(np.sqrt(max_num)) + 1):
        if sieve[i]:
            sieve[i*i::i] = False
    return sieve

# Read data from file
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    A = np.fromfile(file, dtype=int, sep=' ', count=N)

# Precompute prime numbers using Sieve of Eratosthenes
max_value_in_A = np.max(A)
primes = sieve_of_eratosthenes(max_value_in_A)

# Function to solve the first task
def task1(A, K, primes):
    max_length = 0
    sum_primes = 0
    sum_composites = 0
    start = 0
    
    for end in range(N):
        if primes[A[end]]:
            sum_primes += A[end]
        elif A[end] > 1:
            sum_composites += A[end]
        
        # Move start pointer if the cost exceeds K
        while sum_primes * sum_composites > K and start <= end:
            if primes[A[start]]:
                sum_primes -= A[start]
            elif A[start] > 1:
                sum_composites -= A[start]
            start += 1
        
        max_length = max(max_length, end - start + 1)
    
    return max_length

# Function to solve the second task
def task2(A, primes):
    # Replace composites with the product of their smallest and largest prime factors
    for i in range(N):
        if not primes[A[i]] and A[i] > 1:
            j = 2
            while j * j <= A[i]:
                if A[i] % j == 0:
                    A[i] = j * (A[i] // j)
                    break
                j += 1
    
    max_len = 0
    max_i, max_j = 0, 0
    for i in range(N):
        gcd = A[i]
        for j in range(i + 1, N):
            gcd = np.gcd(gcd, A[j])
            if gcd == 1:
                break
            if j - i + 1 > max_len:
                max_len = j - i + 1
                max_i, max_j = i, j

    return max_i + 1, max_j + 1

# Solve the task based on the value of C
if C == 1:
    result = task1(A, K, primes)
else:
    result = task2(A, primes)

# Write the result to the file
with open('tema.out', 'w') as file:
    if isinstance(result, tuple):
        file.write(f'{result[0]} {result[1]}\n')
    else:
        file.write(f'{result}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def sieve_of_eratosthenes(limit):
    sieve = np.ones(limit + 1, dtype=bool)
    sieve[0:2] = False
    for i in range(2, int(limit**0.5) + 1):
        if sieve[i]:
            sieve[i*i:limit+1:i] = False
    return sieve

def solve_first_task(A, K, primes):
    max_length = 0
    current_sum_prime = 0
    current_sum_composite = 0
    start = 0

    for end in range(len(A)):
        if primes[A[end]]:
            current_sum_prime += A[end]
        elif A[end] > 1:
            current_sum_composite += A[end]

        while current_sum_prime * current_sum_composite > K and start <= end:
            if primes[A[start]]:
                current_sum_prime -= A[start]
            elif A[start] > 1:
                current_sum_composite -= A[start]
            start += 1
        max_length = max(max_length, end - start + 1)

    return max_length

def solve_second_task(A, primes):
    max_length = 0
    start_index = -1
    end_index = -1

    # Replace composite numbers with the product of their smallest and largest prime factors
    for i in range(len(A)):
        if not primes[A[i]] and A[i] > 1:
            factors = [j for j in range(2, A[i]//2+1) if A[i] % j == 0 and primes[j]]
            if factors:
                A[i] = factors[0] * factors[-1]

    gcd = np.gcd
    for i in range(len(A)):
        current_gcd = A[i]
        for j in range(i + 1, len(A)):
            current_gcd = gcd(current_gcd, A[j])
            if current_gcd == 1:
                break
            if j - i + 1 > max_length:
                max_length = j - i + 1
                start_index = i
                end_index = j

    return start_index + 1, end_index + 1

# Read input from file
with open('tema.in', 'r') as fin:
    C, N, K = map(int, fin.readline().split())
    A = np.array(fin.readline().split(), dtype=int)

# Primes sieve
primes = sieve_of_eratosthenes(A.max())

# Solve the problem
if C == 1:
    result = solve_first_task(A, K, primes)
else:
    result = solve_second_task(A, primes)

# Write output to file
with open('tema.out', 'w') as fout:
    if isinstance(result, int):
        fout.write(f"{result}\n")
    else:
        fout.write(f"{result[0]} {result[1]}\n")
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to efficiently check for primes and find prime factors
def sieve_of_eratosthenes(n):
    sieve = np.ones(n + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            sieve[i * i:n + 1:i] = False
    return sieve

# Read input from 'tema.in'
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    A = np.array(list(map(int, file.readline().split())))

# Generate a list of prime numbers using the sieve algorithm
primes = sieve_of_eratosthenes(1000000)

# Function to solve the first task
def task1(A, K, primes):
    max_length = 0
    start = 0
    prime_sum = 0
    comp_sum = 0

    for end in range(N):
        if primes[A[end]]:
            prime_sum += A[end]
        elif A[end] > 1:
            comp_sum += A[end]
        
        while prime_sum * comp_sum > K and start < end:
            if primes[A[start]]:
                prime_sum -= A[start]
            elif A[start] > 1:
                comp_sum -= A[start]
            start += 1
        
        if prime_sum * comp_sum <= K:
            max_length = max(max_length, end - start + 1)
    
    return max_length

# Function to solve the second task
def task2(A, primes):
    for i in range(N):
        if not primes[A[i]] and A[i] > 1:
            factors = prime_factors(A[i])
            A[i] = factors[0] * factors[-1]

    max_len = 0
    max_pair = (0, 0)
    for i in range(N):
        gcd_val = A[i]
        for j in range(i + 1, N):
            gcd_val = np.gcd(gcd_val, A[j])
            if gcd_val == 1:
                break
            length = j - i + 1
            if length > max_len:
                max_len = length
                max_pair = (i + 1, j + 1)
    
    return max_pair

# Function to find the prime factors of a number
def prime_factors(n):
    factors = []
    for p in range(2, int(np.sqrt(n)) + 1):
        while n % p == 0:
            factors.append(p)
            n //= p
    if n > 1:
        factors.append(n)
    return factors

# Solve the problem and write output to 'tema.out'
result = task1(A, K, primes) if C == 1 else task2(A, primes)
with open('tema.out', 'w') as file:
    if isinstance(result, int):
        file.write(f'{result}\n')
    else:
        file.write(f'{result[0]} {result[1]}\n')
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
