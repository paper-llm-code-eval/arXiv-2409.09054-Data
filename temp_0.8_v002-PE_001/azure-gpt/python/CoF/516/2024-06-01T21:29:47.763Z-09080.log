---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_prime(n):
    """Check if a number is prime."""
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def get_prime_factors(n):
    """Get the smallest and largest prime factors of a number."""
    factors = []
    # Check for divisibility by 2
    if n % 2 == 0:
        factors.append(2)
        while n % 2 == 0:
            n //= 2
    # Check for odd factors
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            factors.append(i)
            while n % i == 0:
                n //= i
    # If n is a prime number greater than 2
    if n > 2:
        factors.append(n)
    return min(factors), max(factors)

# Load data
with open('tema.in', 'r') as f:
    C, N, K = map(int, f.readline().split())
    A = np.array(f.readline().split(), dtype=np.int64)

if C == 1:
    max_length = 0
    for start in range(N):
        prime_sum = composite_sum = 0
        for end in range(start, N):
            # Skip ones
            if A[end] == 1:
                continue
            # Update sums
            if is_prime(A[end]):
                prime_sum += A[end]
            else:
                composite_sum += A[end]
            # Break if cost exceeds K
            if prime_sum * composite_sum > K:
                break
            # Update maximum length
            max_length = max(max_length, end - start + 1)
    with open('tema.out', 'w') as f:
        f.write(str(max_length) + '\n')

elif C == 2:
    # Replace composite numbers with the product of their smallest and largest prime factors
    for i in range(N):
        if not is_prime(A[i]) and A[i] != 1:
            smallest, largest = get_prime_factors(A[i])
            A[i] = smallest * largest
    
    max_length = 0
    max_gcd = 1
    start_max = end_max = 0
    for start in range(N):
        gcd = 0
        for end in range(start, N):
            # Update gcd
            gcd = np.gcd(gcd, A[end])
            # Skip if gcd is 1
            if gcd == 1:
                break
            # Update maximum length and positions
            if end - start + 1 > max_length:
                max_length = end - start + 1
                start_max = start + 1
                end_max = end + 1
            # Update maximum length and positions if equal length but higher start position
            elif end - start + 1 == max_length and start + 1 > start_max:
                start_max = start + 1
                end_max = end + 1
    with open('tema.out', 'w') as f:
        f.write(f"{start_max} {end_max}\n")
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def sieve_eratosthenes(n):
    """Create a sieve to identify primes and composite numbers."""
    sieve = np.ones(n + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(n ** 0.5) + 1):
        if sieve[i]:
            sieve[i*i:n+1:i] = False
    return sieve

def prime_factors(product):
    """Get the smallest and largest prime factors of a number."""
    factors = []
    for prime in primes:
        if prime > product or product == 1:
            break
        if product % prime == 0:
            factors.append(prime)
            while product % prime == 0:
                product //= prime
    return factors[0], factors[-1]

# Read the input data
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    A = np.array(file.readline().split(), dtype=np.int64)

# Prepare a sieve and list of primes for prime checking and factorization
MAX_VALUE = 1000000
sieve = sieve_eratosthenes(MAX_VALUE)
primes = np.where(sieve)[0]

# Solve for requirement C
if C == 1:
    max_length = 0
    for start in range(N):
        prime_sum, composite_sum = 0, 0
        for end in range(start, N):
            if A[end] == 1: continue
            if sieve[A[end]]:
                prime_sum += A[end]
            else:
                composite_sum += A[end]
            if prime_sum * composite_sum > K: break
            max_length = max(max_length, end - start + 1)
    with open('tema.out', 'w') as file:
        file.write(f"{max_length}\n")

elif C == 2:
    # Update array with smallest * largest prime factors for composite numbers
    for i in range(N):
        if not sieve[A[i]] and A[i] != 1:
            smallest, largest = prime_factors(A[i])
            A[i] = smallest * largest

    # Initialize variables for maximum sequence length and gcd
    max_length, max_gcd = 0, 1
    max_start, max_end = 0, 0

    for start in range(N):
        gcd = 0
        for end in range(start, N):
            gcd = np.gcd(gcd, A[end]).item()  # item() to convert numpy.int64 to Python int
            if gcd == 1: break
            if end - start + 1 > max_length or (end - start + 1 == max_length and start + 1 > max_start):
                max_length = end - start + 1
                max_gcd = gcd
                max_start, max_end = start + 1, end + 1

    with open('tema.out', 'w') as file:
        file.write(f"{max_start} {max_end}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
