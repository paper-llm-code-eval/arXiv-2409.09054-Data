---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def is_prime(num):
    if num < 2:
        return False
    if num in (2, 3):
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    w = 2
    while i * i <= num:
        if num % i == 0:
            return False
        i += w
        w = 6 - w
    return True

def prime_factors(num):
    factors = []
    # Handle 2 separately
    while num % 2 == 0:
        factors.append(2)
        num //= 2
    # Handle odd numbers
    i = 3
    while i * i <= num:
        while num % i == 0:
            factors.append(i)
            num //= i
        i += 2
    if num > 2:
        factors.append(num)
    return factors

with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    sequence = np.array(file.readline().split(), dtype=np.int64)

if C == 1:
    max_length = 0
    for start in range(N):
        prime_sum = 0
        composite_sum = 0
        for end in range(start, N):
            num = sequence[end]
            if num == 1:
                continue
            if is_prime(num):
                prime_sum += num
            else:
                composite_sum += num
            if prime_sum * composite_sum <= K:
                max_length = max(max_length, end - start + 1)
            else:
                break
    with open('tema.out', 'w') as file:
        file.write(f"{max_length}\n")

elif C == 2:
    for i in range(N):
        num = sequence[i]
        if num == 1 or is_prime(num):
            continue
        factors = prime_factors(num)
        sequence[i] = factors[0] * factors[-1]
    max_length = 0
    max_gcd = 0
    start_index = 0
    for start in range(N):
        gcd = sequence[start]
        for end in range(start+1, N):
            gcd = np.gcd(gcd, sequence[end])
            if gcd == 1:
                break
            length = end - start + 1
            if length > max_length or (length == max_length and start > start_index):
                max_length = length
                max_gcd = gcd
                start_index = start
    with open('tema.out', 'w') as file:
        file.write(f"{start_index+1} {start_index+max_length}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found. Since we are focused on optimizing both time and memory and the problem statement does not explicitly require `numpy`, I will remove `numpy` and implement the solution using standard Python libraries, which should also help with the memory constraint.

Let's rewrite the solution without using `numpy`:

```python
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def solve_task1(sequence, N, K):
    max_length = 0
    for start in range(N):
        prime_sum = 0
        composite_sum = 0
        for end in range(start, N):
            num = sequence[end]
            if is_prime(num):
                prime_sum += num
            elif num > 1:
                composite_sum += num
            if prime_sum * composite_sum <= K:
                max_length = max(max_length, end - start + 1)
            else:
                break
    return max_length

def solve_task2(sequence, N):
    max_length = 0
    start_index = -1
    for start in range(N):
        local_gcd = sequence[start]
        if local_gcd == 1:
            continue
        for end in range(start + 1, N):
            local_gcd = gcd(local_gcd, sequence[end])
            if local_gcd == 1:
                break
            length = end - start + 1
            if length > max_length:
                max_length = length
                start_index = start
            elif length == max_length and start > start_index:
                start_index = start
    return start_index + 1, start_index + max_length if start_index != -1 else (0, 0)

with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().split())
    sequence = list(map(int, file.readline().split()))

if C == 1:
    max_length = solve_task1(sequence, N, K)
    with open('tema.out', 'w') as file:
        file.write(f"{max_length}\n")

elif C == 2:
    for i in range(N):
        num = sequence[i]
        if num > 1 and not is_prime(num):
            factors = [j for j in range(2, int(math.sqrt(num)) + 1) if num % j == 0]
            if factors:
                sequence[i] = factors[0] * factors[-1]
    start, end = solve_task2(sequence, N)
    with open('tema.out', 'w') as file:
        file.write(f"{start} {end}\n")
```

This solution should work without any external dependencies, and it should be memory-efficient since we are only using built-in Python functions and data structures.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 10 20
1 2 32 4 42 49 7 21 1 63
```
Expected output:
```
5 8
```
Found output:
```
2 5
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
