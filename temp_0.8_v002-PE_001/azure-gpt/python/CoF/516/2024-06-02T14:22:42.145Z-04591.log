---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from sympy import primerange, isprime

# Function to determine if a number is prime
def is_prime(num):
    if num < 2:
        return False
    for p in primerange(2, int(num ** 0.5) + 1):
        if num % p == 0:
            return False
    return True

# Function to get the smallest and largest prime factors of a number
def prime_factors(num):
    if is_prime(num):
        return num, num
    smallest, largest = num, 2
    i = 2
    while i * i <= num:
        if num % i == 0:
            smallest = min(smallest, i)
            largest = max(largest, i)
            while num % i == 0:
                num = num // i
        i += 1
    if num > 1:
        largest = max(largest, num)
    return smallest, largest

# Function to solve the second requirement
def solve_second_requirement(arr):
    primes = []
    for val in arr:
        if isprime(val):
            primes.append(val)
        elif val > 1:
            low, high = prime_factors(val)
            primes.append(low * high)
        else:
            primes.append(1)

    primes = np.array(primes)
    gcd_array = np.gcd.accumulate(primes[::-1])[::-1]
    max_length = 0
    max_pos = (0, 0)
    cur_gcd = 0

    for i in range(len(primes)):
        cur_gcd = np.gcd(cur_gcd, primes[i])
        if cur_gcd == 1:
            cur_length = 0
            cur_gcd = gcd_array[i]
            continue
        cur_length += 1
        if cur_length > max_length:
            max_length = cur_length
            max_pos = (i - cur_length + 2, i + 1)
        elif cur_length == max_length:
            max_pos = max(max_pos, (i - cur_length + 2, i + 1))

    return max_pos

# Read input from file
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().strip().split())
    A = np.array(file.readline().strip().split(), dtype=int)

# Solve the problem
if C == 1:
    max_length = 0
    for i in range(N):
        for j in range(i + 1, N):
            primes_sum = A[i:j+1][A[i:j+1] > 1][list(map(is_prime, A[i:j+1][A[i:j+1] > 1]))].sum()
            comp_sum = A[i:j+1][A[i:j+1] > 1][np.logical_not(list(map(is_prime, A[i:j+1][A[i:j+1] > 1])))].sum()
            if primes_sum * comp_sum <= K:
                max_length = max(max_length, j - i + 1)
    result = max_length
else:
    result = solve_second_requirement(A)

# Write output to file
with open('tema.out', 'w') as file:
    if C == 1:
        file.write(str(result) + '\n')
    else:
        file.write(f"{result[0]} {result[1]}\n")
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from sympy import isprime

# Function to check if a number is prime using sieve (faster for multiple queries)
def sieve(n):
    is_prime = np.ones(n + 1, dtype=bool)
    is_prime[0:2] = False
    for i in range(2, int(np.sqrt(n)) + 1):
        if is_prime[i]:
            is_prime[i*i:n+1:i] = False
    return is_prime

# Function to get the smallest and largest prime factors of a number
def prime_factors(num, primes):
    if num in primes:
        return num, num

    smallest, largest = None, None
    for p in primes:
        if p * p > num:
            break
        if num % p == 0:
            smallest = p
            while num % p == 0:
                num //= p
    if num > 1:
        largest = num
    return (smallest, largest) if smallest else (num, num)

# Main solution function
def solve(C, N, K, A, primes):
    if C == 1:
        max_length = 0
        for i in range(N):
            prime_sum, comp_sum = 0, 0
            for j in range(i, N):
                if primes[A[j]]:
                    prime_sum += A[j]
                elif A[j] > 1:
                    comp_sum += A[j]
                if prime_sum * comp_sum <= K:
                    max_length = max(max_length, j - i + 1)
                else:
                    break
        return max_length
    
    elif C == 2:
        modified_A = np.array([prime_factors(x, primes)[0] * prime_factors(x, primes)[1] if x > 1 and not primes[x] else x for x in A])
        max_length = 1
        max_i, max_j = 0, 0
        for i in range(N):
            gcd = modified_A[i]
            if gcd == 1:
                continue
            for j in range(i + max_length, N):
                gcd = np.gcd(gcd, modified_A[j])
                if gcd == 1:
                    break
                seq_length = j - i + 1
                if seq_length > max_length:
                    max_length, max_i, max_j = seq_length, i, j
        return max_i + 1, max_j + 1  # Convert to 1-based indexing

# Read input from file
with open('tema.in', 'r') as file:
    C, N, K = map(int, file.readline().strip().split())
    A = list(map(int, file.readline().strip().split()))

# Generate a list of prime numbers up to the maximum value in A
primes = sieve(max(A))

# Solve the problem based on the requirement C
result = solve(C, N, K, A, primes)

# Write output to file
with open('tema.out', 'w') as file:
    if C == 1:
        file.write(f"{result}\n")
    else:
        file.write(f"{result[0]} {result[1]}\n")
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if a number is prime using precomputed sieve
def sieve(n):
    is_prime = np.ones(n + 1, dtype=bool)
    is_prime[:2] = False
    for i in np.arange(2, int(n**0.5) + 1):
        if is_prime[i]:
            is_prime[i*i:n+1:i] = False
    return is_prime

# Function to solve the first requirement
def solve_first_requirement(A, K, primes):
    max_length = 0
    prime_sum, comp_sum = 0, 0
    start = 0
    
    for end, val in enumerate(A):
        if val > 1:
            if primes[val]:
                prime_sum += val
            else:
                comp_sum += val
        
        while prime_sum * comp_sum > K and start <= end:
            if A[start] > 1:
                if primes[A[start]]:
                    prime_sum -= A[start]
                else:
                    comp_sum -= A[start]
            start += 1
        
        max_length = max(max_length, end - start + 1)
    
    return max_length

# Function to solve the second requirement
def solve_second_requirement(A, primes):
    max_length = 1
    max_i, max_j = 0, 0
    N = len(A)
    
    for i in range(N):
        gcd = 0 if A[i] <= 1 else A[i]
        for j in range(i, N):
            if A[j] > 1:
                gcd = np.gcd(gcd, A[j])
                if gcd == 1:
                    break
                length = j - i + 1
                if length > max_length:
                    max_length = length
                    max_i, max_j = i, j
    
    return max_i + 1, max_j + 1  # 1-based indexing

# Read data from input file
with open('tema.in', 'r') as f:
    C, N, K = map(int, f.readline().split())
    A = np.array(f.readline().split(), dtype=int)

# Precompute the prime numbers up to the max value in A
primes = sieve(max(A))

# Process the data based on the requirement C
if C == 1:
    result = solve_first_requirement(A, K, primes)
else:
    result = solve_second_requirement(A, primes)

# Write the result to output file
with open('tema.out', 'w') as f:
    if C == 1:
        f.write(f"{result}\n")
    else:
        f.write(f"{result[0]} {result[1]}\n")
```
```
---------- user ----------


Expected program to write result to `tema.out` and read from `tema.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
