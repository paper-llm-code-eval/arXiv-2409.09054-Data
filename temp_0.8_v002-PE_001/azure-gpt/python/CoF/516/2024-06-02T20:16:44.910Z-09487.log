---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Code block for the efficient solution in Python
import numpy as np

# Function to check if a number is prime
def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(np.sqrt(number)) + 1):
        if number % i == 0:
            return False
    return True

# Function to read the input data from tema.in
def read_input():
    with open('tema.in', 'r') as file:
        c, n, k = map(int, file.readline().split())
        a = list(map(int, file.readline().split()))
    return c, n, k, a

# Function to process the first requirement
def max_sequence_length(n, k, a):
    max_length = 0
    for start in range(n):
        sum_prime = 0
        sum_composite = 0
        for end in range(start, n):
            if is_prime(a[end]):
                sum_prime += a[end]
            elif a[end] > 1:
                sum_composite += a[end]
            if sum_prime * sum_composite <= k:
                max_length = max(max_length, end - start + 1)
            else:
                break
    return max_length

# Function to process the second requirement
def max_gcd_sequence(a):
    # Replace composite numbers with the product of their smallest and largest prime factors
    for i, num in enumerate(a):
        if not is_prime(num) and num > 1:
            factors = prime_factors(num)
            a[i] = factors[0] * factors[-1]
    
    # Find the longest sequence with gcd greater than 1
    max_length = 0
    max_indices = (0, 0)
    for start in range(len(a)):
        gcd_value = a[start]
        for end in range(start, len(a)):
            gcd_value = np.gcd(gcd_value, a[end])
            if gcd_value == 1:
                break
            if end - start + 1 >= max_length:
                max_length = end - start + 1
                max_indices = (start + 1, end + 1)
    return max_indices

# Function to derive the prime factors of a composite number
def prime_factors(number):
    i = 2
    factors = []
    while i * i <= number:
        if number % i:
            i += 1
        else:
            number //= i
            factors.append(i)
    if number > 1:
        factors.append(number)
    return factors

# Main function to handle the requirements and write the output to tema.out
def main():
    c, n, k, a = read_input()
    if c == 1:
        result = max_sequence_length(n, k, a)
    elif c == 2:
        result = max_gcd_sequence(a)
    
    with open('tema.out', 'w') as file:
        if c == 1:
            file.write(f'{result}\n')
        elif c == 2:
            file.write(f'{result[0]} {result[1]}\n')

# Run the main function
if __name__ == '__main__':
    main()
```
This solution takes into account the memory constraints and tries to solve the problem by using efficient looping and numpy's gcd function for the second requirement. The prime checking function is also made to be efficient by stopping at the square root of the number. The program reads from 'tema.in' and writes to 'tema.out' as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
