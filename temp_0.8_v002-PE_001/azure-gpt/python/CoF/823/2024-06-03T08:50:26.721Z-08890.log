---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Reading the input from 'arme.in'
with open('arme.in') as file:
    N, M = map(int, file.readline().split())
    pb = np.fromstring(file.readline(), dtype=int, sep=' ')
    pc = np.fromstring(file.readline(), dtype=int, sep=' ')

# Sort the pb and pc arrays in descending order
sorted_pb = np.sort(pb)[::-1]
sorted_pc = np.sort(pc)[::-1]

# Swap the lower power weapons with higher power weapons from the wall if it's beneficial
for i in range(min(N, M)):
    if sorted_pb[i] < sorted_pc[i]:
        sorted_pb[i] = sorted_pc[i]

# Calculate the final power sum
final_sum = np.sum(sorted_pb)

# Writing the output to 'arme.out'
with open('arme.out', 'w') as file:
    file.write(str(final_sum))
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read input data from 'arme.in'
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())  # Read N and M
    belt_weapons = np.fromstring(file.readline(), dtype=int, sep=' ')  # Read weapons on the belt
    room_weapons = np.fromstring(file.readline(), dtype=int, sep=' ')   # Read weapons in the room

# Sort weapons by power (highest first)
belt_weapons.sort()
room_weapons.sort()

# Perform replacements to maximize the total power
for i in range(min(N, M)):
    if belt_weapons[i] < room_weapons[-(i+1)]:  # If a room weapon is stronger, replace it
        belt_weapons[i] = room_weapons[-(i+1)]

# Calculate the total sum of the belt weapons' power
total_power = belt_weapons.sum()

# Write the output to 'arme.out'
with open('arme.out', 'w') as file:
    file.write(str(total_power))
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input from 'arme.in'
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = np.fromfile(file, dtype=int, sep=' ', count=N)
    pc = np.fromfile(file, dtype=int, sep=' ', count=M)

# Sort pb and pc in ascending order to be able to replace from the end
pb.sort()
pc.sort()

# Replace the weaker weapons in pb with the strongest ones in pc when it is beneficial
for i in range(min(N, M)):
    if pb[i] < pc[M - 1 - i]:
        pb[i] = pc[M - 1 - i]

# Calculate the sum of the weapon powers after replacements
total_power = pb.sum()

# Write the result to 'arme.out'
with open('arme.out', 'w') as file:
    file.write(f"{total_power}\n")
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input from 'arme.in'
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = np.array(file.readline().split(), dtype=int)
    pc = np.array(file.readline().split(), dtype=int)

# Sort the arrays in descending order to get the biggest weapons at the start
pb.sort()
pc.sort()

# Ensure we're operating with the lowest amount of weapons possible
min_length = min(N, M)

# Get indexes where the weapon on the belt is weaker than the one on the wall
replace_idxs = pb[:min_length] < pc[-min_length:]

# Perform the replacements
pb[:min_length][replace_idxs] = pc[-min_length:][replace_idxs]

# Calculate the sum of powers after replacement
total_power = pb.sum()

# Write the output to 'arme.out'
with open('arme.out', 'w') as file:
    file.write(f"{total_power}\n")
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# We will use numpy for efficient array operations
import numpy as np

# Define function to read the file and perform the weapon replacements
def maximize_weapon_power():
    # Read the input from 'arme.in'
    with open('arme.in', 'r') as file:
        N, M = map(int, file.readline().split())  # Read N and M
        pb = np.array(file.readline().split(), dtype=int)  # Read weapons at the belt
        pc = np.array(file.readline().split(), dtype=int)  # Read weapons in the room

    # Sort belt weapons in ascending order and room weapons in descending order
    pb.sort()
    pc = np.sort(pc)[::-1]

    # Replace the weapons if the room weapon has more power
    for i in range(min(N, M)):
        if pb[i] < pc[i]:
            pb[i] = pc[i]

    # Calculate the total power of the belt weapons
    total_power = pb.sum()

    # Write the output to 'arme.out'
    with open('arme.out', 'w') as file:
        file.write(f"{total_power}\n")

# Call the function to solve the problem
maximize_weapon_power()
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        N, M = map(int, file.readline().strip().split())
        pb = np.array(file.readline().strip().split(), dtype=int)
        pc = np.array(file.readline().strip().split(), dtype=int)
    return N, M, pb, pc

def write_output(filename, total_power):
    with open(filename, 'w') as file:
        file.write(f"{total_power}\n")

def maximize_belt_power(N, M, pb, pc):
    pb.sort()  # Sort belt weapons in ascending order
    pc[::-1].sort()  # Sort wall weapons in descending order
    # Replace weapons when it is advantageous
    for i in range(min(N, M)):
        if pb[i] < pc[i]:
            pb[i] = pc[i]
    return pb.sum()  # Return the total power

# Main code logic
if __name__ == "__main__":
    N, M, pb, pc = read_input('arme.in')
    total_power = maximize_belt_power(N, M, pb, pc)
    write_output('arme.out', total_power)
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read input data from 'arme.in'
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())  # Read N and M
    pb = np.array(file.readline().split(), dtype=int)  # Read weapons on the belt
    pc = np.array(file.readline().split(), dtype=int)  # Read weapons in the room

# Sort both arrays, pb in ascending and pc in descending order
pb.sort()
pc.sort()

# Perform the replacement to maximize the total power
for i in range(min(N, M)):
    if pb[i] < pc[-1 - i]:  # Replace with a stronger weapon from the wall if possible
        pb[i] = pc[-1 - i]

# Calculate the total power of the weapons on the belt
total_power = pb.sum()

# Write the result to 'arme.out'
with open('arme.out', 'w') as file:
    file.write(str(total_power) + '\n')
```
```
