---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# We will use numpy for efficient array manipulation
import numpy as np

# Define the function to read the input and compute the solution
def maximize_weapon_power(input_file, output_file):
    with open(input_file, 'r') as f_in:
        # Read N and M
        N, M = map(int, f_in.readline().split())
        
        # Read the power of the weapons at the belt (pb) and in the room (pc)
        pb = np.array(f_in.readline().split(), dtype=int)
        pc = np.array(f_in.readline().split(), dtype=int)
    
    # Sort the arrays in ascending order
    pb.sort()
    pc.sort()
    
    # Perform the replacements to maximize the power at the belt
    # Since the arrays are sorted, replace from the end of pc and start of pb
    for i in range(min(N, M)):
        if pb[i] < pc[-(i+1)]:
            pb[i] = pc[-(i+1)]
        else:
            break
    
    # Write the maximum sum of weapon powers to the output file
    with open(output_file, 'w') as f_out:
        f_out.write(str(np.sum(pb)))

# Call the function with the specified input and output files
maximize_weapon_power('arme.in', 'arme.out')
```
Please ensure that numpy is installed in your Python environment as it is used for efficient array manipulation. This code reads the data from `arme.in`, performs the required computations, and writes the result to `arme.out` as specified in the problem statement.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

As the error message indicates, the `numpy` module is not found. This is because `numpy` is not a built-in library and must be installed separately. However, since the challenge specifies a memory limit and for the sake of simplicity, I will rewrite the solution without using `numpy`, relying on built-in Python functions to ensure compatibility.

Here is the revised solution using only built-in Python functions:

```python
# Define the function to read the input and compute the solution
def maximize_weapon_power(input_file, output_file):
    with open(input_file, 'r') as f_in:
        # Read N and M
        N, M = map(int, f_in.readline().split())
        
        # Read the power of the weapons at the belt (pb) and in the room (pc)
        pb = list(map(int, f_in.readline().split()))
        pc = list(map(int, f_in.readline().split()))
    
    # Sort the arrays in ascending order
    pb.sort()
    pc.sort()
    
    # Perform the replacements to maximize the power at the belt
    # Since the arrays are sorted, replace from the end of pc and start of pb
    for i in range(min(N, M)):
        if pb[i] < pc[-(i+1)]:
            pb[i] = pc[-(i+1)]
        else:
            break
    
    # Calculate the maximum sum of weapon powers
    max_sum = sum(pb)
    
    # Write the maximum sum of weapon powers to the output file
    with open(output_file, 'w') as f_out:
        f_out.write(str(max_sum))

# Call the function with the specified input and output files
maximize_weapon_power('arme.in', 'arme.out')
```

This code performs the same logic as the previous solution but uses built-in Python data structures and functions instead of `numpy`. It should work given the constraints of the problem and the fact that `numpy` is not available.
