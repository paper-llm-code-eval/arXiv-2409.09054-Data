---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        N, M = map(int, file.readline().split())
        pb = np.fromstring(file.readline(), dtype=int, sep=' ')
        pc = np.fromstring(file.readline(), dtype=int, sep=' ')
    return N, M, pb, pc

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def maximum_power(N, M, pb, pc):
    # Sort both arrays to maximize the power by swapping
    pb.sort()
    pc.sort()
    
    # Loop through the arrays and swap if pc's element is greater
    for i in range(min(N, M)):
        if pb[i] < pc[M - 1 - i]:
            pb[i] = pc[M - 1 - i]
    
    # Return the sum of the powers
    return pb.sum()

def main():
    N, M, pb, pc = read_data('arme.in')
    result = maximum_power(N, M, pb, pc)
    write_output('arme.out', result)

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `arme.out` and read from `arme.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def maximum_power(N, M, pb, pc):
    # Sort both arrays to maximize the power by swapping
    pb.sort()
    pc.sort()

    # Loop through the arrays and swap if pc's element is greater
    for i in range(min(N, M)):
        if pb[i] < pc[M - 1 - i]:
            # Replace the power with a more powerful weapon
            pb[i] = pc[M - 1 - i]
    
    # Return the sum of the powers
    return pb.sum()

# Read data from arme.in
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = np.fromstring(file.readline(), dtype=int, sep=' ')
    pc = np.fromstring(file.readline(), dtype=int, sep=' ')

# Calculate the result
result = maximum_power(N, M, pb, pc)

# Write the result to arme.out
with open('arme.out', 'w') as file:
    file.write(str(result))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Given the memory constraint and the error message indicating that `numpy` is not available, I will rewrite the solution without using `numpy` and optimize it using only built-in Python functions. The memory constraint should be respected by avoiding unnecessary data structures or large memory allocations.

```python
def maximum_power(N, M, pb, pc):
    # Sort both arrays to maximize the power by swapping
    pb.sort()
    pc.sort(reverse=True)

    # Loop through the arrays and swap if pc's element is greater
    for i in range(min(N, M)):
        if pb[i] < pc[i]:
            pb[i] = pc[i]

    # Return the sum of the powers
    return sum(pb)

# Read data from arme.in
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = list(map(int, file.readline().split()))
    pc = list(map(int, file.readline().split()))

# Calculate the result
result = maximum_power(N, M, pb, pc)

# Write the result to arme.out
with open('arme.out', 'w') as file:
    file.write(str(result))
```

This code should run correctly, use less memory than the previous `numpy` solution, and not require any external libraries.
