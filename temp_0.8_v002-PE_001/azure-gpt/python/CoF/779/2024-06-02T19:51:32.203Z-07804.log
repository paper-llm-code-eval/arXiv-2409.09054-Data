---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def save_output_to_file(filename, data):
    with open(filename, 'w') as file:
        file.write(f'{data}\n')

def read_input_from_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    return lines

def parse_input(lines):
    M, N = map(int, lines[0].split())
    tourist_position = tuple(map(int, lines[1].split()))
    cities_count = int(lines[2])
    cities = [tuple(map(int, line.split())) for line in lines[3:3+cities_count]]
    return M, N, tourist_position, cities

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def get_directions(M, N, tourist_position, cities):
    directions = {}
    for city in cities:
        delta_x = city[0] - tourist_position[0]
        delta_y = city[1] - tourist_position[1]
        g = gcd(abs(delta_x), abs(delta_y))
        direction = (delta_x // g, delta_y // g)
        if direction in directions:
            directions[direction] += 1
        else:
            directions[direction] = 1
    return directions

def find_max_cities(directions):
    return max(directions.values(), default=0)

def main():
    lines = read_input_from_file('turist.in')
    M, N, tourist_position, cities = parse_input(lines)
    directions = get_directions(M, N, tourist_position, cities)
    max_cities = find_max_cities(directions)
    save_output_to_file('turist.out', max_cities)

if __name__ == "__main__":
    main()
```
```

This code efficiently calculates the maximum number of cities that the tourist can visit by considering each city as a potential next stop and computing the direction to that city. It uses the gcd to reduce the direction to its simplest form, and then counts how many cities can be visited along each direction. The maximum count is the output. The use of Python's standard libraries should keep the memory usage within the specified limit.
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from collections import defaultdict
from math import gcd

# Read input from a file
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_x, start_y = map(int, file.readline().split())
    K = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(K)]

# Function to compute the greatest common divisor for normalization
def normalize(x, y):
    d = gcd(x, y)
    return (x // d, y // d)

# Dictionary to store the number of cities in each direction
directions = defaultdict(int)

# Process each city to find the direction from the starting position
for city_x, city_y in cities:
    dx, dy = city_x - start_x, city_y - start_y
    if dx == 0 and dy == 0:
        continue  # Skip if it's the starting city
    norm = normalize(dx, dy)
    directions[norm] += 1

# Find the maximum number of cities that can be visited in any direction
max_cities = max(directions.values(), default=0)

# Write output to a file
with open('turist.out', 'w') as file:
    file.write(f"{max_cities}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the `numpy` library is not available or not needed in the given environment. Since the code does not use `numpy` functions, I will remove the import statement for `numpy` and provide the corrected code without this dependency.

Here is the revised solution:

```python
from collections import defaultdict
from math import gcd

# Function to compute the greatest common divisor for normalization
def normalize(x, y):
    d = gcd(x, y)
    return (x // d, y // d) if d else (0, 0)

# Read input from a file
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_x, start_y = map(int, file.readline().split())
    K = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(K)]

# Dictionary to store the number of cities in each direction
directions = defaultdict(int)

# Process each city to find the direction from the starting position
for city_x, city_y in cities:
    dx, dy = city_x - start_x, city_y - start_y
    if dx == 0 and dy == 0:
        continue  # Skip if it's the starting city
    norm = normalize(dx, dy)
    directions[norm] += 1

# Find the maximum number of cities that can be visited in any direction
max_cities = max(directions.values(), default=0)

# Write output to a file
with open('turist.out', 'w') as file:
    file.write(f"{max_cities}\n")
```
