---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_row, start_col = map(int, file.readline().split())
    K = int(file.readline().strip())
    cities = np.array([list(map(int, file.readline().split())) for _ in range(K)])

# Calculate direction vectors for all possible 8 directions
directions = np.array([[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]])

# Initialize the maximum count of visited cities to 0
max_visited = 0

# Function to calculate gcd of two numbers
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Iterate through each direction
for dx, dy in directions:
    visited_cities = {}
    for city in cities:
        delta_row, delta_col = city - [start_row, start_col]
        
        # Skip cities that are not in the current direction
        if delta_row * dy != delta_col * dx or (dx == 0 and delta_col == 0) or (dy == 0 and delta_row == 0):
            continue
        
        # Calculate the GCD to find the minimal step to reach the city in current direction
        step_gcd = gcd(abs(delta_row), abs(delta_col))
        
        # Normalize the direction step
        norm_step = (delta_row // step_gcd, delta_col // step_gcd)
        
        # If the normalized direction step is new, count it, otherwise skip
        if norm_step not in visited_cities:
            visited_cities[norm_step] = 1
        else:
            visited_cities[norm_step] += 1
        
        max_visited = max(max_visited, visited_cities[norm_step])

# Write the output data
with open('turist.out', 'w') as file:
    file.write(str(max_visited))
```
```
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict
from math import gcd

# Read the input data
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_row, start_col = map(int, file.readline().split())
    K = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(K)]

# Initialize the maximum count of visited cities to 0
max_visited = 0

# Function to calculate gcd of two numbers
def normalize_direction(dx, dy):
    if dx == 0 or dy == 0:  # Handle the zero case to avoid division by zero
        return (0, 1) if dx == 0 else (1, 0)
    divisor = gcd(dx, dy)
    return (dx // divisor, dy // divisor)

# Use a dictionary to store count of cities in each direction
direction_counts = defaultdict(int)

# Check each city to see if it aligns with the tourist's position in any of the 8 possible directions
for city_row, city_col in cities:
    dx, dy = city_row - start_row, city_col - start_col
    norm_dx, norm_dy = normalize_direction(dx, dy)
    direction_counts[(norm_dx, norm_dy)] += 1

# Find the maximum number of cities in any direction
max_visited = max(direction_counts.values(), default=0)

# Write the output data
with open('turist.out', 'w') as file:
    file.write(str(max_visited))
```
```

---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict
from math import gcd
from itertools import product

def read_input(filename):
    with open(filename, 'r') as file:
        M, N = map(int, file.readline().split())
        start = tuple(map(int, file.readline().split()))
        K = int(file.readline())
        cities = [tuple(map(int, file.readline().split())) for _ in range(K)]
    return M, N, start, cities

def write_output(filename, max_visited):
    with open(filename, 'w') as file:
        file.write(f"{max_visited}\n")

def compute_directions(start, cities):
    direction_counts = defaultdict(int)
    for city in cities:
        dx, dy = city[0] - start[0], city[1] - start[1]
        if dx == 0 and dy == 0:
            continue
        g = gcd(dx, dy)
        direction = (dx // g, dy // g)
        direction_counts[direction] += 1
    return direction_counts

def solve_tourist_problem(M, N, start, cities):
    directions = compute_directions(start, cities)
    max_visited = max(directions.values(), default=0)
    return max_visited

def main():
    M, N, start, cities = read_input('turist.in')
    max_visited = solve_tourist_problem(M, N, start, cities)
    write_output('turist.out', max_visited)

if __name__ == "__main__":
    main()
```
```

---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from math import gcd
from collections import defaultdict

# Function to calculate gcd of two numbers and normalize direction vector
def normalize(dx, dy):
    if dx == 0:
        return (0, 1 if dy > 0 else -1)
    if dy == 0:
        return (1 if dx > 0 else -1, 0)
    g = gcd(dx, dy)
    return (dx // g, dy // g)

# Read the input data
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    tourist_x, tourist_y = map(int, file.readline().split())
    K = int(file.readline().strip())
    # Dictionary to keep track of directions and city counts
    city_directions = defaultdict(int)

    for _ in range(K):
        city_x, city_y = map(int, file.readline().split())
        # Normalize the direction vector
        direction = normalize(city_x - tourist_x, city_y - tourist_y)
        city_directions[direction] += 1

# Find the maximum number of cities in any direction
max_visited = max(city_directions.values(), default=0)

# Write the output data
with open('turist.out', 'w') as file:
    file.write(str(max_visited))
```
```
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from math import gcd
from collections import defaultdict

# Function to calculate gcd of two numbers and normalize the direction
def normalize_direction(dx, dy):
    if dx == 0 or dy == 0: # Avoid division by zero
        return (0, 1) if dx == 0 else (1, 0)
    divisor = gcd(dx, dy)
    return (dx // divisor, dy // divisor)

# Initialize the maximum count of visited cities to 0
max_visited = 0

# Read the input data
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_x, start_y = map(int, file.readline().split())
    K = int(file.readline().strip())
    # Dictionary to store the number of cities in a particular direction
    directions = defaultdict(int)

    # Process each city
    for _ in range(K):
        city_x, city_y = map(int, file.readline().split())
        # Calculate the direction from the starting point to the city
        normalized_direction = normalize_direction(city_x - start_x, city_y - start_y)
        # Increment the count of cities in this direction
        directions[normalized_direction] += 1

# Find the maximum number of cities in any direction
max_visited = max(directions.values(), default=0)

# Write the output data
with open('turist.out', 'w') as file:
    file.write(f"{max_visited}\n")
```
