---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def gcd(a, b):
    while b:
        a, b = b, a % b
    return abs(a)

def main():
    with open('turist.in', 'r') as f:
        M, N = map(int, f.readline().split())
        tourist_x, tourist_y = map(int, f.readline().split())
        k = int(f.readline())
        cities = [tuple(map(int, f.readline().split())) for _ in range(k)]

    directions = {}
    for city_x, city_y in cities:
        dx, dy = city_x - tourist_x, city_y - tourist_y
        if dx == 0:
            direction = (0, np.sign(dy))
        elif dy == 0:
            direction = (np.sign(dx), 0)
        else:
            gcd_xy = gcd(dx, dy)
            direction = (dx // gcd_xy, dy // gcd_xy)
        directions[direction] = directions.get(direction, 0) + 1
    
    max_cities = max(directions.values(), default=0)

    with open('turist.out', 'w') as f:
        f.write(str(max_cities))

if __name__ == '__main__':
    main()
```
```

This solution calculates the greatest common divisor (gcd) for the differences in x and y coordinates between the tourist and each city. This is used to normalize the direction of the vector pointing from the tourist to the city, ensuring that cities that lie on the same line of travel are counted together. It uses a dictionary to track the number of cities on each unique direction, and then finds the maximum value to determine the most cities the tourist can visit while traveling in a straight line. This approach is both time and memory efficient for the constraints given.
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def gcd(a, b):
    while b:
        a, b = b, a % b
    return abs(a)

def main():
    with open('turist.in', 'r') as f:
        M, N = map(int, f.readline().split())
        tourist_x, tourist_y = map(int, f.readline().split())
        k = int(f.readline())
        cities = [tuple(map(int, f.readline().split())) for _ in range(k)]

    directions = {}
    for city_x, city_y in cities:
        dx, dy = city_x - tourist_x, city_y - tourist_y
        if dx == 0:
            direction = (0, np.sign(dy))
        elif dy == 0:
            direction = (np.sign(dx), 0)
        else:
            gcd_xy = gcd(dx, dy)
            direction = (dx // gcd_xy, dy // gcd_xy)
        directions[direction] = directions.get(direction, 0) + 1
    
    max_cities = max(directions.values(), default=0)

    with open('turist.out', 'w') as f:
        f.write(str(max_cities) + '\n')

if __name__ == '__main__':
    main()
```
```
The program now reads from the file 'turist.in' and writes to 'turist.out' as required, without using `input()` or `print()` functions. It calculates the normalized direction vectors for the cities and counts how many cities are on each vector. It then finds the maximum number of cities on a single vector and writes this number to 'turist.out'. The gcd function is used to calculate the greatest common divisor, which is used to normalize the direction vectors. The use of NumPy's `sign` function helps in determining the direction for cities aligned horizontally or vertically with the tourist's starting position.
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def gcd(a, b):
    while b:
        a, b = b, a % b
    return abs(a)

def main():
    with open('turist.in', 'r') as f:
        M, N = map(int, f.readline().split())
        tourist_x, tourist_y = map(int, f.readline().split())
        k = int(f.readline())
        cities = [tuple(map(int, f.readline().split())) for _ in range(k)]

    directions = {}
    for city_x, city_y in cities:
        dx, dy = city_x - tourist_x, city_y - tourist_y
        if dx == 0:  # Vertical line
            direction = (0, 1 if dy > 0 else -1)
        elif dy == 0:  # Horizontal line
            direction = (1 if dx > 0 else -1, 0)
        else:
            gcd_xy = gcd(dx, dy)
            direction = (dx // gcd_xy, dy // gcd_xy)
        directions[direction] = directions.get(direction, 0) + 1
    
    max_cities = max(directions.values(), default=0)

    with open('turist.out', 'w') as f:
        f.write(str(max_cities) + '\n')

if __name__ == '__main__':
    main()
```

This version of the solution does not use NumPy, as the original code block did not require it for the operations performed. The solution is compliant with the constraints of reading from "turist.in" and writing to "turist.out" without using `input()` or `print()` functions.
