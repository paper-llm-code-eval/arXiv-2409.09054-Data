---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Define a function to calculate the greatest common divisor
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Define a function to calculate the number of cities that can be visited
def calculate_max_cities(M, N, start_pos, cities):
    max_cities = 0
    visited_cities = {}

    for city in cities:
        delta_y = city[0] - start_pos[0]
        delta_x = city[1] - start_pos[1]
        
        # Reduce the movement to its simplest form to avoid counting the same direction twice
        divisor = gcd(abs(delta_x), abs(delta_y)) or 1
        direction = (delta_y // divisor, delta_x // divisor)

        if direction not in visited_cities:
            visited_cities[direction] = 0
        visited_cities[direction] += 1

        # Update the maximum number of cities that can be visited
        max_cities = max(max_cities, visited_cities[direction])

    return max_cities

# Read from 'turist.in'
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_pos = tuple(map(int, file.readline().split()))
    k = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(k)]

# Calculate the result
result = calculate_max_cities(M, N, start_pos, cities)

# Write to 'turist.out'
with open('turist.out', 'w') as file:
    file.write(str(result))
```
```

In the solution above, I've avoided using large data structures or complex computations. The direction is reduced to its simplest form using the greatest common divisor to ensure that we don't count the same direction more than once. 

This solution should be fairly memory-efficient, as it uses a dictionary with tuples as keys, which only stores the number of cities for each unique direction. The number of entries in the dictionary is at most the number of cities, which is K, and hence should not exceed the memory limit.
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from fractions import gcd
from collections import defaultdict

# Read from 'turist.in'
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_pos = tuple(map(int, file.readline().split()))
    k = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(k)]

# Define function to calculate greatest common divisor
# Note: Python 3.5 and later include gcd in the math library, if using older versions,
# use the commented implementation provided here.
# def gcd(a, b):
#     while b:
#         a, b = b, a % b
#     return a

# Find the number of distinct directions yielding the maximum number of visited cities
directions = defaultdict(int)
max_cities = 0

for city in cities:
    dy, dx = city[0] - start_pos[0], city[1] - start_pos[1]
    div = gcd(dy, dx) if dy != 0 and dx != 0 else max(abs(dy), abs(dx))
    directions[(dy // div, dx // div)] += 1
    max_cities = max(max_cities, directions[(dy // div, dx // div)])

# Write to 'turist.out'
with open('turist.out', 'w') as file:
    file.write(f'{max_cities}\n')
```
```
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from math import gcd

# Define a function to calculate the number of cities that can be visited
def calculate_max_cities(start_pos, cities):
    max_cities = 0
    visited_cities = {}

    for city in cities:
        delta_y = city[0] - start_pos[0]
        delta_x = city[1] - start_pos[1]
        
        # Reduce the movement to its simplest form to avoid counting the same direction twice
        if delta_y == 0:
            direction = (0, 1 if delta_x > 0 else -1)
        elif delta_x == 0:
            direction = (1 if delta_y > 0 else -1, 0)
        else:
            g = gcd(delta_x, delta_y)
            direction = (delta_y // g, delta_x // g)

        if direction not in visited_cities:
            visited_cities[direction] = 1
        else:
            visited_cities[direction] += 1

        # Update the maximum number of cities that can be visited
        max_cities = max(max_cities, visited_cities[direction])

    return max_cities

# Read from 'turist.in'
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().split())
    start_pos = tuple(map(int, file.readline().split()))
    k = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().split())) for _ in range(k)]

# Calculate the result
result = calculate_max_cities(start_pos, cities)

# Write to 'turist.out'
with open('turist.out', 'w') as file:
    file.write(str(result) + '\n')
```
This solution reads from 'turist.in' and writes to 'turist.out'. It uses the `gcd` function from the `math` module to simplify the direction vectors to their smallest form, ensuring that we count each direction only once. The `visited_cities` dictionary keeps track of how many cities have been visited in each direction, and `max_cities` is updated accordingly. The solution avoids using unnecessary memory and should be within the ~8MB memory limit.
