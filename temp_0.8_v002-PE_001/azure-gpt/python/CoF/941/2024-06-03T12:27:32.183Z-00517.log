---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ceas.in` and write to `ceas.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un atelier de fabricat ceasuri cu cuc are nevoie de plăcuțe cu numerele pentru orele pe care trebuie să le așeze pe discul ceasurilor. Aceste numere sunt realizate la o imprimantă.

Din cauza unei erori imprimanta tipărește plăcuțe cu numere naturale, unele mai mari ca $12$. Atelierul poate utiliza doar plăcuțe cu numere cuprinse ı̂ntre $0$ și $12$. Pentru a utiliza aceste numere este nevoie ca ele să fie tăiate ı̂ncepând din partea dreaptă ı̂n grupuri de maximum două cifre, fiecare grup reprezentând valoarea de pe o plăcuță, care să fie o cifră la $0$ la $9$ sau unul dintre numerele $10$, $11$, $12$. Dacă pe o plăcuță se găsește un număr mai mare ca $12$ atunci plăcuța trebuie tăiată, astfel ı̂ncât ı̂n urma tăierii să se obțină numere de cel mult $2$ cifre. Dacă ı̂n numărul de pe o plăcuță cifra zecilor este $0$, atunci la prima tăiere se ia doar cifra unităților, altfel dacă numărul format cu cifra zecilor și unităților este mai mare ca $12$, atunci se taie prima dată cifra unităților, iar dacă numărul format cu cifra zecilor și unităților este $10$, $11$ sau $12$ se taie prima dată numărul format din ultimele două cifre, apoi procedeul se repetă până la tăierea completă a plăcuței. Imprimanta a realizat N plăcuțe. De exemplu dacă plăcuța este $12030$, după tăiere se obțin $0$, $3$, $0$, $12$.

# Cerință
1. Determinați numărul total de apariții ale cifrei $X$ pe plăcuțe ı̂nainte de tăiere.
2. Determinați numărul de tăieturi realizate conform enunțului.

# Date de intrare

Pe prima linie a fișierului `ceas.in` se află valorile $C$, $X$ și $N$ separate prin câte un singur spațiu. Pe linia a doua se află $N$ numere naturale separate prin câte un singur spațiu, având semnificația din enunț. Pentru $C = 1$ se rezolvă doar cerința $1$, iar pentru $C = 2$ se rezolvă doar cerința $2$.

# Date de ieșire

Fișierul `ceas.out` conține pe prima linie un singur număr natural care reprezintă valoarea calculată conform cerinței.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $0 \leq X \leq 9$;
* Valorile din șir sunt numere naturale $\leq 50 \ 000$;
* Pentru testele în care avem $C = 2$ valoarea $X$ este prezentă în fișierul de intrare chiar dacă nu este folosită în rezolvare.
* Pentru teste în valoare de $39$ de puncte avem $C = 1$
* Pentru teste în valoare de $61$ de puncte avem $C = 2$

---

Example:
`ceas.in`
```
1 0 6
1010 40 201 5123 31 6
```

`ceas.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to count occurrences before cutting
def count_occurrences_before_cutting(nums, X):
    return sum(str(num).count(str(X)) for num in nums)

# Function to count the total cuts needed
def count_total_cuts(nums):
    cut_count = 0
    for num in nums:
        while num > 0:
            if num % 100 > 12 or num % 10 == 0:
                num //= 10
            else:
                num //= 100
            cut_count += 1
    return cut_count - len(nums)  # Subtract the count of numbers themselves

# Read from 'ceas.in'
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().split())
    numbers = np.fromstring(file.readline(), dtype=int, sep=' ')

# Compute the result based on the value of C
if C == 1:
    result = count_occurrences_before_cutting(numbers, X)
elif C == 2:
    result = count_total_cuts(numbers)

# Write the result to 'ceas.out'
with open('ceas.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
````python
import numpy as np

# Function to count occurrences before cutting
def count_occurrences_before_cutting(numbers, X):
    X_str = str(X)
    return sum(num_str.count(X_str) for num_str in numbers)

# Function to count the total cuts needed
def count_total_cuts(numbers):
    cut_count = 0
    for num in numbers:
        while num > 0:
            if num % 100 > 12 or num % 10 == 0:
                num //= 10
            else:
                num //= 100
            cut_count += 1
    return cut_count - len(numbers)  # Subtract the count of numbers themselves

# Read from 'ceas.in'
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().split())
    numbers = np.fromstring(file.readline(), dtype=int, sep=' ')

# Convert all numbers to strings once to avoid multiple conversions
numbers_str = [str(num) for num in numbers]

# Compute the result based on the value of C
if C == 1:
    result = count_occurrences_before_cutting(numbers_str, X)
elif C == 2:
    result = count_total_cuts(numbers)

# Write the result to 'ceas.out'
with open('ceas.out', 'w') as file:
    file.write(str(result))
````
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to count occurrences before cutting
def count_occurrences_before_cutting(numbers, X):
    count = 0
    for number in numbers:
        while number > 0:
            digit = number % 10
            if digit == X:
                count += 1
            number //= 10
    return count

# Function to count the total cuts needed
def count_total_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if number % 100 <= 12 and number % 100 != 0:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

# Initialize result variable
result = 0

# Read from 'ceas.in' and process the data
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().split())
    numbers = list(map(int, file.readline().split()))

# Solve the problem based on the value of C
if C == 1:
    result = count_occurrences_before_cutting(numbers, X)
elif C == 2:
    result = count_total_cuts(numbers)

# Write the result to 'ceas.out'
with open('ceas.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to count occurrences before cutting
def count_occurrences_before_cutting(numbers, X):
    count = 0
    for number in numbers:
        while number > 0:
            if number % 10 == X:
                count += 1
            number //= 10
    return count

# Function to count the total cuts needed
def count_total_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number:
            if number % 100 <= 12 and number % 100 > 0:
                number //= 100
            else:
                number //= 10
            cuts += 1
        cuts -= 1  # The last cut for single or two-digit number is not needed
    return cuts

# Read from 'ceas.in'
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().strip().split())
    numbers = list(map(int, file.readline().strip().split()))

# Solve the problem and write the result to 'ceas.out'
with open('ceas.out', 'w') as file:
    if C == 1:
        file.write(str(count_occurrences_before_cutting(numbers, X)))
    elif C == 2:
        file.write(str(count_total_cuts(numbers)))
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
