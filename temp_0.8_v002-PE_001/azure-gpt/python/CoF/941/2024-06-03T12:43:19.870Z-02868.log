---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ceas.in` and write to `ceas.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un atelier de fabricat ceasuri cu cuc are nevoie de plăcuțe cu numerele pentru orele pe care trebuie să le așeze pe discul ceasurilor. Aceste numere sunt realizate la o imprimantă.

Din cauza unei erori imprimanta tipărește plăcuțe cu numere naturale, unele mai mari ca $12$. Atelierul poate utiliza doar plăcuțe cu numere cuprinse ı̂ntre $0$ și $12$. Pentru a utiliza aceste numere este nevoie ca ele să fie tăiate ı̂ncepând din partea dreaptă ı̂n grupuri de maximum două cifre, fiecare grup reprezentând valoarea de pe o plăcuță, care să fie o cifră la $0$ la $9$ sau unul dintre numerele $10$, $11$, $12$. Dacă pe o plăcuță se găsește un număr mai mare ca $12$ atunci plăcuța trebuie tăiată, astfel ı̂ncât ı̂n urma tăierii să se obțină numere de cel mult $2$ cifre. Dacă ı̂n numărul de pe o plăcuță cifra zecilor este $0$, atunci la prima tăiere se ia doar cifra unităților, altfel dacă numărul format cu cifra zecilor și unităților este mai mare ca $12$, atunci se taie prima dată cifra unităților, iar dacă numărul format cu cifra zecilor și unităților este $10$, $11$ sau $12$ se taie prima dată numărul format din ultimele două cifre, apoi procedeul se repetă până la tăierea completă a plăcuței. Imprimanta a realizat N plăcuțe. De exemplu dacă plăcuța este $12030$, după tăiere se obțin $0$, $3$, $0$, $12$.

# Cerință
1. Determinați numărul total de apariții ale cifrei $X$ pe plăcuțe ı̂nainte de tăiere.
2. Determinați numărul de tăieturi realizate conform enunțului.

# Date de intrare

Pe prima linie a fișierului `ceas.in` se află valorile $C$, $X$ și $N$ separate prin câte un singur spațiu. Pe linia a doua se află $N$ numere naturale separate prin câte un singur spațiu, având semnificația din enunț. Pentru $C = 1$ se rezolvă doar cerința $1$, iar pentru $C = 2$ se rezolvă doar cerința $2$.

# Date de ieșire

Fișierul `ceas.out` conține pe prima linie un singur număr natural care reprezintă valoarea calculată conform cerinței.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $0 \leq X \leq 9$;
* Valorile din șir sunt numere naturale $\leq 50 \ 000$;
* Pentru testele în care avem $C = 2$ valoarea $X$ este prezentă în fișierul de intrare chiar dacă nu este folosită în rezolvare.
* Pentru teste în valoare de $39$ de puncte avem $C = 1$
* Pentru teste în valoare de $61$ de puncte avem $C = 2$

---

Example:
`ceas.in`
```
1 0 6
1010 40 201 5123 31 6
```

`ceas.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def count_appearances(numbers, X):
    # Convert numbers into strings, concatenate them, and count occurrences of X
    return ''.join(map(str, numbers)).count(str(X))

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 0:
            if number % 100 <= 12:
                number //= 100
                cuts += 1
            else:
                number //= 10
                cuts += 1
    return cuts

def main():
    with open('ceas.in', 'r') as fin:
        C, X, N = map(int, fin.readline().split())
        numbers = np.array(fin.readline().split(), dtype=np.int32)

    if C == 1:
        result = count_appearances(numbers, X)
    else:
        result = count_cuts(numbers)

    with open('ceas.out', 'w') as fout:
        fout.write(str(result))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def count_appearances(numbers, X):
    # Convert numbers into strings, concatenate them, and count occurrences of X
    str_numbers = ''.join(map(str, numbers))
    return str_numbers.count(str(X))

def count_cuts(numbers):
    cuts = 0
    # Iterate through each number to apply the cutting logic
    for number in numbers:
        # Apply the cutting logic until the number is greater than 12
        while number > 12:
            if number % 100 > 12 or number % 100 == 0:
                number //= 10  # Cut the last digit
            else:
                number //= 100  # Cut the last two digits
            cuts += 1
        # Check for a single cut if the number is between 1 and 12
        if 0 < number < 13:
            cuts += 1
    return cuts

def main():
    # Read from 'ceas.in'
    with open('ceas.in', 'r') as fin:
        C, X, N = map(int, fin.readline().split())
        numbers = np.fromstring(fin.readline().strip(), dtype=int, sep=' ')

    # Compute the result based on the value of C
    if C == 1:
        result = count_appearances(numbers, X)
    elif C == 2:
        result = count_cuts(numbers)

    # Write the result to 'ceas.out'
    with open('ceas.out', 'w') as fout:
        fout.write(str(result))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_appearances(numbers, X):
    count = 0
    for number in numbers:
        count += str(number).count(str(X))
    return count

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number:
            if number % 100 <= 12:
                number //= 100
            else:
                number %= 10**((len(str(number)) - 1) if len(str(number)) - 1 > 0 else 1)
            cuts += 1
            if number <= 12:
                break
    return cuts - len(numbers)  # Exclude the initial entry which is not a cut

def main():
    with open('ceas.in', 'r') as fin:
        C, X, N = map(int, fin.readline().strip().split())
        numbers = list(map(int, fin.readline().strip().split()))

    result = count_appearances(numbers, X) if C == 1 else count_cuts(numbers)

    with open('ceas.out', 'w') as fout:
        fout.write(f"{result}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_appearances(numbers, X):
    count = 0
    # Convert the entire list to strings only once to save memory
    str_numbers = ''.join(map(str, numbers))
    count = str_numbers.count(str(X))
    return count

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if 10 <= number % 100 <= 12:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

def main():
    # Read from 'ceas.in'
    with open('ceas.in', 'r') as fin:
        C, X, N = map(int, fin.readline().split())
        numbers = list(map(int, fin.readline().split()))

    # Compute the result based on the value of C
    if C == 1:
        result = count_appearances(numbers, X)
    elif C == 2:
        result = count_cuts(numbers)

    # Write the result to 'ceas.out'
    with open('ceas.out', 'w') as fout:
        fout.write(str(result) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_appearances(numbers, X):
    count = 0
    for number in numbers:
        count += str(number).count(str(X))
    return count

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if 10 <= number % 100 <= 12:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

def main():
    with open('ceas.in') as f:
        C, X, N = map(int, f.readline().split())
        numbers = list(map(int, f.readline().split()))

    if C == 1:
        result = count_appearances(numbers, X)
    else:
        result = count_cuts(numbers)

    with open('ceas.out', 'w') as f:
        f.write(f'{result}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_appearances(numbers, X):
    count = 0
    for number in numbers:
        count += str(number).count(str(X))
    return count

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if number % 100 <= 12 and number % 10 != 0:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

def main():
    with open('ceas.in', 'r') as file:
        C, X, N = map(int, file.readline().split())
        numbers = [int(num) for num in file.readline().split()]

    result = count_appearances(numbers, X) if C == 1 else count_cuts(numbers)

    with open('ceas.out', 'w') as file:
        file.write(str(result) + '\n')

main()
```
```
---------- user ----------


Expected program to write result to `ceas.out` and read from `ceas.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_appearances(numbers, X):
    return sum(str(num).count(str(X)) for num in numbers)

def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number:
            # If number is 10, 11, or 12, or if tens digit is 0
            # (which means we have a leading zero in a number > 100),
            # we cut off two digits, otherwise we cut off one digit
            if 10 <= number % 100 <= 12 or number % 100 // 10 == 0:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

def main():
    with open('ceas.in', 'r') as fin:
        C, X, N = map(int, fin.readline().split())
        numbers = list(map(int, fin.readline().split()))

    if C == 1:
        result = count_appearances(numbers, X)
    else:
        result = count_cuts(numbers)

    with open('ceas.out', 'w') as fout:
        fout.write(str(result))

if __name__ == "__main__":
    main()
```
```
