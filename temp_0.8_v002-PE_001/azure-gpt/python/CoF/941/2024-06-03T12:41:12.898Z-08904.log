---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ceas.in` and write to `ceas.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un atelier de fabricat ceasuri cu cuc are nevoie de plăcuțe cu numerele pentru orele pe care trebuie să le așeze pe discul ceasurilor. Aceste numere sunt realizate la o imprimantă.

Din cauza unei erori imprimanta tipărește plăcuțe cu numere naturale, unele mai mari ca $12$. Atelierul poate utiliza doar plăcuțe cu numere cuprinse ı̂ntre $0$ și $12$. Pentru a utiliza aceste numere este nevoie ca ele să fie tăiate ı̂ncepând din partea dreaptă ı̂n grupuri de maximum două cifre, fiecare grup reprezentând valoarea de pe o plăcuță, care să fie o cifră la $0$ la $9$ sau unul dintre numerele $10$, $11$, $12$. Dacă pe o plăcuță se găsește un număr mai mare ca $12$ atunci plăcuța trebuie tăiată, astfel ı̂ncât ı̂n urma tăierii să se obțină numere de cel mult $2$ cifre. Dacă ı̂n numărul de pe o plăcuță cifra zecilor este $0$, atunci la prima tăiere se ia doar cifra unităților, altfel dacă numărul format cu cifra zecilor și unităților este mai mare ca $12$, atunci se taie prima dată cifra unităților, iar dacă numărul format cu cifra zecilor și unităților este $10$, $11$ sau $12$ se taie prima dată numărul format din ultimele două cifre, apoi procedeul se repetă până la tăierea completă a plăcuței. Imprimanta a realizat N plăcuțe. De exemplu dacă plăcuța este $12030$, după tăiere se obțin $0$, $3$, $0$, $12$.

# Cerință
1. Determinați numărul total de apariții ale cifrei $X$ pe plăcuțe ı̂nainte de tăiere.
2. Determinați numărul de tăieturi realizate conform enunțului.

# Date de intrare

Pe prima linie a fișierului `ceas.in` se află valorile $C$, $X$ și $N$ separate prin câte un singur spațiu. Pe linia a doua se află $N$ numere naturale separate prin câte un singur spațiu, având semnificația din enunț. Pentru $C = 1$ se rezolvă doar cerința $1$, iar pentru $C = 2$ se rezolvă doar cerința $2$.

# Date de ieșire

Fișierul `ceas.out` conține pe prima linie un singur număr natural care reprezintă valoarea calculată conform cerinței.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $0 \leq X \leq 9$;
* Valorile din șir sunt numere naturale $\leq 50 \ 000$;
* Pentru testele în care avem $C = 2$ valoarea $X$ este prezentă în fișierul de intrare chiar dacă nu este folosită în rezolvare.
* Pentru teste în valoare de $39$ de puncte avem $C = 1$
* Pentru teste în valoare de $61$ de puncte avem $C = 2$

---

Example:
`ceas.in`
```
1 0 6
1010 40 201 5123 31 6
```

`ceas.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to count appearances of digit X in a list of numbers
def count_appearances(numbers, X):
    # Convert each number to a string and concatenate them
    numbers_str = ''.join(map(str, numbers))
    # Count occurrences of the digit X
    return numbers_str.count(str(X))

# Function to count cuts needed to satisfy the conditions
def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if number % 100 >= 10 and number % 100 <= 12:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

# Read input data
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().split())
    numbers = np.loadtxt(file, dtype=int, delimiter=' ', ndmin=1)

# Check which task to execute and write the output
with open('ceas.out', 'w') as file:
    if C == 1:
        result = count_appearances(numbers, X)
    elif C == 2:
        result = count_cuts(numbers)
    file.write(str(result))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The program exited with code 1 due to a `ModuleNotFoundError` which indicates that the numpy module is not available in the execution environment. As the challenge requires optimizing both time and memory usage and given the memory constraint, it's not appropriate to use numpy or any external libraries that are not absolutely necessary.

I will rewrite the solution without using the numpy module and by using built-in Python functionalities to ensure we stay within the memory limit:

```python
# Function to count appearances of digit X in a list of numbers
def count_appearances(numbers, X):
    count = 0
    for number in numbers:
        count += str(number).count(X)
    return count

# Function to count cuts needed to satisfy the conditions
def count_cuts(numbers):
    cuts = 0
    for number in numbers:
        while number > 12:
            if number % 100 >= 10 and number % 100 <= 12:
                number //= 100
            else:
                number //= 10
            cuts += 1
    return cuts

# Read input data
with open('ceas.in', 'r') as file:
    C, X, N = map(int, file.readline().split())
    X = str(X)  # Convert X to string once for efficiency
    numbers = list(map(int, file.readline().split()))

# Check which task to execute and write the output
with open('ceas.out', 'w') as file:
    if C == 1:
        result = count_appearances(numbers, X)
    elif C == 2:
        result = count_cuts(numbers)
    file.write(str(result))
```

This code will read from `ceas.in`, process the data according to the provided challenge, and write the result to `ceas.out` while respecting the memory limit and optimizing for time and memory usage.
