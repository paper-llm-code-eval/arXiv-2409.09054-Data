---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ozn.in` and write to `ozn.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O invazie de $N$ farfurii zburătoare (denumite uzual OZN) dă bătăi de cap autorităților. În fiecare astfel de OZN se află extratereștri care au ca misiune distrugerea planetei noastre. Radarul care a detectat invazia are un ecran similar cu planul XOY. Fiecare OZN este reprezentat pe ecran printr-un segment de dreaptă.

Pentru anihilarea OZN-urilor, autoritățile dispun de $K$ arme laser. Armele sunt poziționate pe sol (ilustrat pe ecranul radarului prin axa OX). Fiecare armă emite o rază laser, ilustrată pe ecran printr-o paralelă cu axa OY. Dacă o rază laser intersectează segmentul de pe ecranul radarului corespunzător unui OZN, raza va omorî toți extratereștrii aflați în OZN-ul respectiv.

Din păcate, în preajmă se află doar un militar specializat în arme laser, așa că autoritățile doresc să știe exact ce armă trebuie să folosească acesta pentru a distruge cât mai mulți extratereștri.

# Cerință

Ajutați autoritățile să determine numărul de extratereștri care pot fi anihilați cu fiecare armă din dotare.

# Date de intrare

Fișierul de intrare `ozn.in` conține pe prima linie două numere naturale separate prin spațiu $N \ K$ reprezentând numărul de OZN-uri și respectiv numărul de arme laser. Pe următoarele $N$ linii sunt descrise cele $N$ OZN-uri, câte unul pe linie. Un OZN este descris prin $5$ numere naturale separate prin câte un spațiu $x1 \ y1 \ x2 \ y2 \ nr$, reprezentând în ordine coordonatele capetelor segmentului corespunzător ($x1, y1$), ($x2, y2$), iar $nr$ – numărul de extratereștri din el. Pe ultima linie se găsesc $K$ numere naturale $a_1, a_2, a_3, \dots , a_K$, separate prin câte un spațiu, reprezentând coordonatele pe axa OX (abscisele) unde sunt amplasate armele laser.

# Date de ieșire

Fișierul de ieșire `ozn.out` va conține $K$ linii. Pe linia $i$ va fi scris numărul total de extratereștri care pot fi distruși cu arma $i$, considerând armele numerotate în ordinea în care acestea apar în fișierul de intrare.

# Restricții și precizări

* $1 \leq N \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq$ orice coordonată din fișierul de intrare $\leq 2 \ 000 \ 000$;
* $1 \leq nr \leq 100$, pentru orice OZN
* $x1 < x2$, pentru orice OZN
* Pe ecranul radarului segmentele ce descriu navele se pot intersecta.
* Dacă raza laser trece prin unul dintre capetele unui OZN atunci acesta este distrus.
* Pentru $50$ % dintre testele de intrare $1 \leq N \cdot K \leq 10 \ 000 \ 000$;

---

Example:
`ozn.in`
```
5 3
1 1 3 2 2
2 3 4 1 3
6 5 8 5 8
5 1 7 1 6
6 2 7 4 1
3 7 5
```

`ozn.out`
```
5
15
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read data from 'ozn.in'
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = np.zeros((N, 5), dtype=np.int64)
    for i in range(N):
        ozn_data[i] = list(map(int, file.readline().split()))
    laser_positions = np.array(file.readline().split(), dtype=np.int64)

# Prepare the result array
results = np.zeros(K, dtype=np.int64)

# Count extraterrestrials for each laser
for i in range(N):
    x1, y1, x2, y2, nr = ozn_data[i]
    min_x, max_x = min(x1, x2), max(x1, x2)
    # Check which lasers intersect this OZN and update the results
    for j in range(K):
        if min_x <= laser_positions[j] <= max_x:
            results[j] += nr

# Write data to 'ozn.out'
with open('ozn.out', 'w') as file:
    for result in results:
        file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient data structure using numpy
dtype = np.dtype([('x1', np.int32), ('y1', np.int32), ('x2', np.int32), ('y2', np.int32), ('nr', np.int32)])
ufunc_min = np.frompyfunc(min, 2, 1)
ufunc_max = np.frompyfunc(max, 2, 1)

# Read data from 'ozn.in'
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = np.loadtxt(file, dtype=dtype, max_rows=N)
    laser_positions = np.loadtxt(file, dtype=np.int32)

# Prepare the result array
results = np.zeros(K, dtype=np.int32)

# Process each OZN
for i in range(N):
    x1 = ozn_data[i]['x1']
    x2 = ozn_data[i]['x2']
    nr = ozn_data[i]['nr']
    min_x = ufunc_min(x1, x2).astype(np.int32)
    max_x = ufunc_max(x1, x2).astype(np.int32)

    # Check which lasers intersect this OZN
    mask = (laser_positions >= min_x) & (laser_positions <= max_x)
    results += mask * nr

# Write data to 'ozn.out'
with open('ozn.out', 'w') as file:
    for result in results:
        file.write(f"{result}\n")
```
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Define function to read OZN data and laser positions from file
def read_data(filename):
    with open(filename, 'r') as file:
        N, K = map(int, file.readline().split())
        ozn_data = []
        for _ in range(N):
            ozn_data.append(list(map(int, file.readline().split())))
        lasers = list(map(int, file.readline().split()))
    return N, K, ozn_data, lasers

# Define function to write results to file
def write_results(filename, results):
    with open(filename, 'w') as file:
        for result in results:
            file.write(f'{result}\n')

# Read OZN data and laser positions
N, K, ozn_data, lasers = read_data('ozn.in')

# Convert data to numpy arrays for efficient processing
ozn_array = np.array(ozn_data, dtype=int)
lasers_array = np.array(lasers, dtype=int)
results = np.zeros(K, dtype=int)

# Process each OZN and count hits for each laser
for ozn in ozn_array:
    x1, y1, x2, y2, nr = ozn
    hits = (lasers_array >= x1) & (lasers_array <= x2)
    results += hits * nr

# Write results to file
write_results('ozn.out', results)
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'ozn.in' using numpy
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = np.zeros((N, 5), dtype=np.int32)
    for i in range(N):
        ozn_data[i] = np.fromstring(file.readline().strip(), dtype=np.int32, sep=' ')
    lasers = np.fromstring(file.readline().strip(), dtype=np.int32, sep=' ')

# Initialize results with zeros
results = np.zeros(K, dtype=np.int32)

# Calculate the number of extraterrestrials destroyed by each laser
for x1, y1, x2, y2, nr in ozn_data:
    # Find lasers that intersect with the OZN
    intersections = (lasers >= x1) & (lasers <= x2)
    results += intersections * nr

# Write results to 'ozn.out'
with open('ozn.out', 'w') as file:
    for result in results:
        file.write(f"{result}\n")
```
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Set data type for structured array to optimize memory usage
dtype = np.dtype([
    ('x1', np.int32),
    ('y1', np.int32),
    ('x2', np.int32),
    ('y2', np.int32),
    ('nr', np.int32)
])

# Read data from 'ozn.in'
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = np.zeros(N, dtype=dtype)
    for i in range(N):
        ozn_data[i] = tuple(map(int, file.readline().split()))
    laser_positions = np.array(file.readline().split(), dtype=np.int32)

# Process the data
results = np.zeros(K, dtype=np.int32)
for laser_idx, laser_x in np.ndenumerate(laser_positions):
    for ozn in ozn_data:
        if ozn['x1'] <= laser_x <= ozn['x2']:
            results[laser_idx] += ozn['nr']

# Write data to 'ozn.out'
with open('ozn.out', 'w') as file:
    file.writelines(f"{result}\n" for result in results)
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'ozn.in'
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = [list(map(int, file.readline().split())) for _ in range(N)]
    lasers = list(map(int, file.readline().split()))

# Prepare an array for counting extraterrestrials that can be destroyed by each laser
results = np.zeros(K, dtype=np.int32)

# Process each OZN
for x1, y1, x2, y2, nr in ozn_data:
    # Update the results for lasers that intersect with the current OZN
    for i, laser_x in enumerate(lasers):
        if x1 <= laser_x <= x2:
            results[i] += nr

# Write data to 'ozn.out'
with open('ozn.out', 'w') as file:
    for count in results:
        file.write(f'{count}\n')
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Define data type for the structured array
dtype = np.dtype([
    ('x1', np.int32),
    ('y1', np.int32),
    ('x2', np.int32),
    ('y2', np.int32),
    ('nr', np.int32)
])

# Read data from 'ozn.in' using numpy
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = np.loadtxt(file, dtype=dtype, max_rows=N)
    laser_positions = np.sort(np.loadtxt(file, dtype=np.int32))

# Prepare the result array
results = np.zeros(K, dtype=np.int32)

# Process each OZN
for ozn in ozn_data:
    # Check which lasers intersect this OZN
    hits = (laser_positions >= ozn['x1']) & (laser_positions <= ozn['x2'])
    results += hits * ozn['nr']

# Write results to 'ozn.out'
with open('ozn.out', 'w') as file:
    for result in results:
        file.write(f"{result}\n")
```
