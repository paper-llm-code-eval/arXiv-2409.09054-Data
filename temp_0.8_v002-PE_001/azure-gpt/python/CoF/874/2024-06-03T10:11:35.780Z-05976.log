---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `interesant.in` and write to `interesant.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o mulțime $S$ care conține $N$ șiruri de caractere formate din litere mici ale alfabetului englezesc.  

Un șir de caractere se numește _interesant_ în raport cu celelalte șiruri ale mulțimii, dacă nu există un alt șir în mulțime care să-l conțină ca subșir. De exemplu, dacă mulțimea $S$ conține șirurile `abc`, `bde` și `abcdef`, atunci singurul șir *interesant* este `abcdef` deoarece `abc` și `bde` nu îl conțin ca subșir. Mai mult, `abc` și `bde` sunt subșiruri în `abcdef`, deci nu sunt *interesante*.

# Cerințe

Fiind dată o mulțime $S$ formată din $N$ șiruri de caractere se cere:

1. Să se determine cel mai lung șir. Dacă sunt mai multe șiruri având aceeași lungime maximă, se cere cel mai mic din punct de vedere lexicografic.
2. Să se determine toate șirurile _interesante_ din  mulțimea $S$.

# Date de intrare


Fișierul de intrare `interesant.in` conține pe prima linie două numere naturale $p$ și $N$, despărțite prin spațiu. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$. Pe următoarele $N$ linii, se găsesc șirurile de caractere, câte unul pe linie.


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai cerința $1$**.

În acest caz, în fișierul de ieșire `interesant.out` se va scrie cel mai lung șir dintre cele citite. Dacă există mai multe șiruri de aceeași lungime, se va scrie cel mai mic din punct de vedere lexicografic.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai cerința $2$**.

În acest caz, fișierul de ieșire `interesant.out` va conține pe prima linie o valoare $K$ ce reprezintă numărul de șiruri _interesante_, iar pe următoarele $K$ linii, șirurile *interesante* **în ordinea în care apar în fișierul de intrare**.


# Restricții și precizări

* $2 \leq N \leq 200$
* Lungimea unui șir va fi cuprinsă între $1$ și $5 \ 000$.
* Un subșir al șirului de caractere $C_0 C_1 C_2 \dots C_k$ se definește ca fiind o succesiune de caractere $C_{i_1} C_{i_2} C_{i_3} \dots C_{i_k}$, unde $0 \leq i_1 < i_2 < i_3 < \dots < i_k \leq k$.
* Fișierul de intrare **NU conține șiruri identice**.

| $p$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 80      |

---

Example:
`interesant.in`
```
1 5
abcacaaz
ad
abcacaad
acd
zyt
```

`interesant.out`
```
abcacaad
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Define a function to check if the string `a` is a substring of `b`
def is_substring(a, b):
    a_len, b_len = len(a), len(b)
    dp = np.zeros((a_len + 1, b_len + 1), dtype=bool)
    dp[0, :] = True

    for i in range(1, a_len + 1):
        for j in range(1, b_len + 1):
            if a[i - 1] == b[j - 1]:
                dp[i, j] = dp[i - 1, j - 1]
            dp[i, j] = dp[i, j] or dp[i, j - 1]

    return dp[a_len, b_len]

# Read the input data from 'interesant.in'
with open('interesant.in', 'r') as infile:
    p, N = map(int, infile.readline().split())
    strings = [infile.readline().strip() for _ in range(N)]

# Process the input data based on the value of p
if p == 1:
    # Find the longest string
    longest_string = min((s for s in strings if len(s) == len(max(strings, key=len))), key=str)
    # Write the result to 'interesant.out'
    with open('interesant.out', 'w') as outfile:
        outfile.write(longest_string)

elif p == 2:
    # Find all interesting strings
    interesting_strings = []
    for i, s in enumerate(strings):
        if not any(is_substring(s, other) for j, other in enumerate(strings) if i != j and len(other) >= len(s)):
            interesting_strings.append(s)

    # Write the results to 'interesant.out'
    with open('interesant.out', 'w') as outfile:
        outfile.write(f"{len(interesting_strings)}\n")
        outfile.write('\n'.join(interesting_strings))
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def solve_task_1(strings):
    # Find the longest string (min is used to handle lexicographical order in case of equal lengths)
    longest = min((s for s in strings if len(s) == len(max(strings, key=len))), key=str)
    return longest

def solve_task_2(strings):
    # Prepare a boolean array to mark interesting strings
    interesting = np.ones(len(strings), dtype=bool)
    
    # Mark strings that are contained within others as not interesting
    for i, s in enumerate(strings):
        for j, other in enumerate(strings):
            if i != j and len(s) <= len(other) and s in other:
                interesting[i] = False
                break
    
    # Collect interesting strings
    result = [s for i, s in enumerate(strings) if interesting[i]]
    return result

# Read the input data from 'interesant.in'
with open('interesant.in', 'r') as infile:
    p, N = map(int, infile.readline().split())
    strings = [infile.readline().strip() for _ in range(N)]

# Process the input data based on the value of p and write the result to 'interesant.out'
with open('interesant.out', 'w') as outfile:
    if p == 1:
        # Solve task 1
        longest_string = solve_task_1(strings)
        outfile.write(longest_string + '\n')
    elif p == 2:
        # Solve task 2
        interesting_strings = solve_task_2(strings)
        outfile.write(f"{len(interesting_strings)}\n")
        outfile.write('\n'.join(interesting_strings) + '\n')
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution to read from 'interesant.in' and write to 'interesant.out'

def longest_string(strings):
    # Finds the longest string, lexicographically smallest if there is a tie
    return min(filter(lambda x: len(x) == max(map(len, strings)), strings))

def interesting_strings(strings):
    # Finds all interesting strings
    interesting = []
    for string in strings:
        if not any(string in other for other in strings if other != string):
            interesting.append(string)
    return interesting

def write_result(file_path, result):
    # Writes the result to the file
    with open(file_path, 'w') as file:
        if isinstance(result, list):
            # If result is a list, write the length and the elements
            file.write(f"{len(result)}\n")
            file.write('\n'.join(result))
        else:
            # If result is a string, write it directly
            file.write(result)

# Read the input data from 'interesant.in'
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process the input data based on the value of p
if p == 1:
    # Task 1: Find the longest string
    result = longest_string(strings)
elif p == 2:
    # Task 2: Find all interesting strings
    result = interesting_strings(strings)

# Write the result to 'interesant.out'
write_result('interesant.out', result)
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Start by defining the is_substring function which will use numpy for efficient memory usage
import numpy as np

def is_substring(sub, string):
    sub_len, string_len = len(sub), len(string)
    if sub_len > string_len:
        return False
    for i in range(string_len - sub_len + 1):
        if string[i:i+sub_len] == sub:
            return True
    return False

# Read from 'interesant.in'
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Prepare the output data based on the value of p
if p == 1:
    # Task 1: Find the longest string
    longest = min((s for s in strings if len(s) == max(map(len, strings))), key=str)
    output_data = longest
else:
    # Task 2: Find all interesting strings
    interesting = []
    for i, string in enumerate(strings):
        if not any(is_substring(string, other) for j, other in enumerate(strings) if i != j):
            interesting.append(string)
    output_data = f"{len(interesting)}\n" + "\n".join(interesting)

# Write to 'interesant.out'
with open('interesant.out', 'w') as file:
    if isinstance(output_data, str):
        file.write(output_data + '\n')
    else:
        file.writelines(output_data)
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution for string processing challenge

# Function to determine if a string is a substring of another
def is_substring(small, large):
    return small in large

# Task 1: Find the longest string, min used for lexicographically smallest
def find_longest_string(strings):
    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]
    return min(longest_strings)

# Task 2: Find all interesting strings
def find_interesting_strings(strings):
    # A string is interesting if no other string contains it as a substring
    interesting = []
    for s in strings:
        if all(not is_substring(s, other) for other in strings if s != other):
            interesting.append(s)
    return interesting

# Read input data from 'interesant.in'
with open('interesant.in', 'r') as infile:
    p, N = map(int, infile.readline().split())
    strings = [infile.readline().strip() for _ in range(N)]

# Process and write output data to 'interesant.out'
with open('interesant.out', 'w') as outfile:
    if p == 1:
        # Task 1
        result = find_longest_string(strings)
        outfile.write(result + '\n')
    else:
        # Task 2
        interesting = find_interesting_strings(strings)
        outfile.write(f"{len(interesting)}\n" + '\n'.join(interesting) + '\n')
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_substring(small, large):
    # Check if small is a substring of large
    return small in large

def solve_task_1(strings):
    # Find the longest string
    longest = max(strings, key=len)
    # Filter strings of maximum length and return lexicographically smallest
    return min(filter(lambda x: len(x) == len(longest), strings))

def solve_task_2(strings):
    # Find all interesting strings
    interesting = []
    for s in strings:
        if all(not is_substring(s, other) for other in strings if s != other):
            interesting.append(s)
    return interesting

# Read from 'interesant.in'
with open('interesant.in', 'r') as infile:
    p, N = map(int, infile.readline().split())
    strings = [infile.readline().strip() for _ in range(N)]

# Solve the problem based on the value of p and write to 'interesant.out'
with open('interesant.out', 'w') as outfile:
    if p == 1:
        result = solve_task_1(strings)
        outfile.write(result + '\n')
    elif p == 2:
        interesting = solve_task_2(strings)
        outfile.write(f"{len(interesting)}\n" + '\n'.join(interesting) + '\n')
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array manipulation
import numpy as np

# Define the function to check if a string is a substring of another
def is_substring(sub, string):
    return sub in string

# Define the function for the first task
def find_longest_string(strings):
    # Find the longest strings
    max_length = max(map(len, strings))
    longest_strings = [s for s in strings if len(s) == max_length]
    # Return the lexicographically smallest string among the longest ones
    return min(longest_strings)

# Define the function for the second task
def find_interesting_strings(strings):
    # Initialize an array to hold the flags for interesting strings
    interesting_flags = np.ones(len(strings), dtype=bool)
    # Mark strings that are substrings of others as not interesting
    for i, s1 in enumerate(strings):
        for j, s2 in enumerate(strings):
            if i != j and is_substring(s1, s2):
                interesting_flags[i] = False
                break
    # Return the interesting strings based on the flags
    return [s for s, flag in zip(strings, interesting_flags) if flag]

# Read data from 'interesant.in'
with open('interesant.in', 'r') as infile:
    p, N = map(int, infile.readline().split())
    strings = [infile.readline().strip() for _ in range(N)]

# Perform operations based on the value of p and write results to 'interesant.out'
with open('interesant.out', 'w') as outfile:
    if p == 1:
        longest_str = find_longest_string(strings)
        outfile.write(longest_str + '\n')
    elif p == 2:
        interesting_strs = find_interesting_strings(strings)
        outfile.write(f"{len(interesting_strs)}\n")
        outfile.write('\n'.join(interesting_strs) + '\n')
```
```
