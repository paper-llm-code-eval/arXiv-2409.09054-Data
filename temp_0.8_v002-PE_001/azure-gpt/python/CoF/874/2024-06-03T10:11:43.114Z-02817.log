---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `interesant.in` and write to `interesant.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o mulțime $S$ care conține $N$ șiruri de caractere formate din litere mici ale alfabetului englezesc.  

Un șir de caractere se numește _interesant_ în raport cu celelalte șiruri ale mulțimii, dacă nu există un alt șir în mulțime care să-l conțină ca subșir. De exemplu, dacă mulțimea $S$ conține șirurile `abc`, `bde` și `abcdef`, atunci singurul șir *interesant* este `abcdef` deoarece `abc` și `bde` nu îl conțin ca subșir. Mai mult, `abc` și `bde` sunt subșiruri în `abcdef`, deci nu sunt *interesante*.

# Cerințe

Fiind dată o mulțime $S$ formată din $N$ șiruri de caractere se cere:

1. Să se determine cel mai lung șir. Dacă sunt mai multe șiruri având aceeași lungime maximă, se cere cel mai mic din punct de vedere lexicografic.
2. Să se determine toate șirurile _interesante_ din  mulțimea $S$.

# Date de intrare


Fișierul de intrare `interesant.in` conține pe prima linie două numere naturale $p$ și $N$, despărțite prin spațiu. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$. Pe următoarele $N$ linii, se găsesc șirurile de caractere, câte unul pe linie.


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai cerința $1$**.

În acest caz, în fișierul de ieșire `interesant.out` se va scrie cel mai lung șir dintre cele citite. Dacă există mai multe șiruri de aceeași lungime, se va scrie cel mai mic din punct de vedere lexicografic.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai cerința $2$**.

În acest caz, fișierul de ieșire `interesant.out` va conține pe prima linie o valoare $K$ ce reprezintă numărul de șiruri _interesante_, iar pe următoarele $K$ linii, șirurile *interesante* **în ordinea în care apar în fișierul de intrare**.


# Restricții și precizări

* $2 \leq N \leq 200$
* Lungimea unui șir va fi cuprinsă între $1$ și $5 \ 000$.
* Un subșir al șirului de caractere $C_0 C_1 C_2 \dots C_k$ se definește ca fiind o succesiune de caractere $C_{i_1} C_{i_2} C_{i_3} \dots C_{i_k}$, unde $0 \leq i_1 < i_2 < i_3 < \dots < i_k \leq k$.
* Fișierul de intrare **NU conține șiruri identice**.

| $p$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 80      |

---

Example:
`interesant.in`
```
1 5
abcacaaz
ad
abcacaad
acd
zyt
```

`interesant.out`
```
abcacaad
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_substring(s1, s2):
    """Return True if s1 is a substring of s2."""
    if s1 == s2:
        return False
    if len(s1) > len(s2):
        return False
    
    for i in range(len(s2) - len(s1) + 1):
        if s2[i:i+len(s1)] == s1:
            return True
    return False

def find_longest_string(strings):
    """Find the longest string in the list of strings."""
    max_length = max(len(s) for s in strings)
    candidates = [s for s in strings if len(s) == max_length]
    return min(candidates)

def find_interesting_strings(strings):
    """Find all interesting strings in the list."""
    interesting = []
    for i, s1 in enumerate(strings):
        if not any(is_substring(s1, s2) for j, s2 in enumerate(strings) if i != j):
            interesting.append(s1)
    return interesting

# Read input
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process and write output
with open('interesant.out', 'w') as file:
    if p == 1:
        longest = find_longest_string(strings)
        file.write(f"{longest}\n")
    elif p == 2:
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        for s in interesting:
            file.write(f"{s}\n")
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def find_longest_string(strings):
    """Find the longest string in the list of strings."""
    longest = min((s for s in strings if len(s) == len(max(strings, key=len))), key=len)
    return longest

def find_interesting_strings(strings):
    """Find all interesting strings in the list."""
    # Sort strings by their length in descending order
    sorted_strings = sorted(strings, key=lambda x: -len(x))
    interesting = []
    for i, s in enumerate(sorted_strings):
        if not any(s in other for other in sorted_strings[:i]):
            interesting.append(s)
    # Return the interesting strings in their original order
    return [s for s in strings if s in interesting]

# Read input
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process and write output
with open('interesant.out', 'w') as file:
    if p == 1:
        longest = find_longest_string(strings)
        file.write(f"{longest}\n")
    elif p == 2:
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        for s in interesting:
            file.write(f"{s}\n")
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def find_longest_string(strings):
    """Find the longest string in the list of strings, lexicographically smallest. """
    strings.sort(key=lambda s: (-len(s), s))
    return strings[0]

def find_interesting_strings(strings):
    """Find all interesting strings in the list."""
    interesting = []
    for s in strings:
        if not any(s in other for other in strings if s != other):
            interesting.append(s)
    return interesting

# Read input
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process and write output
with open('interesant.out', 'w') as file:
    if p == 1:
        longest = find_longest_string(strings)
        file.write(f"{longest}\n")
    elif p == 2:
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        for s in interesting:
            file.write(f"{s}\n")
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def find_interesting_strings(strings):
    """Find all interesting strings in the list."""
    # Initialize a list to hold interesting strings
    interesting = []
    
    # Convert all strings into a set for efficient containment checking
    string_set = set(strings)

    # Check each string if it is a substring of any other
    for s in strings:
        if not any(s in other for other in string_set if s != other):
            interesting.append(s)
    
    return interesting

# Read input from file
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process and write output to file
with open('interesant.out', 'w') as file:
    if p == 1:
        # Find the longest string
        longest = max(strings, key=lambda s: (len(s), s))
        file.write(f"{longest}\n")
    elif p == 2:
        # Find all interesting strings
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        file.writelines(f"{s}\n" for s in interesting)
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def find_interesting_strings(strings):
    """Find all interesting strings in the list."""
    interesting = []
    for s in strings:
        if all(s not in other for other in strings if other != s):
            interesting.append(s)
    return interesting

# Read input from file
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process and write output to file
with open('interesant.out', 'w') as file:
    if p == 1:
        # Find the longest string, lexicographically smallest
        longest = min((s for s in strings if len(s) == len(max(strings, key=len))), key=lambda s: (len(s), s))
        file.write(longest + '\n')
    elif p == 2:
        # Find all interesting strings
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        file.writelines(s + '\n' for s in interesting)
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to find the longest string
def find_longest_string(strings):
    longest_string = max(strings, key=lambda x: (len(x), x))
    return longest_string

# Function to find all interesting strings
def find_interesting_strings(strings):
    interesting = []
    for string in strings:
        if not any(string in other for other in strings if other != string):
            interesting.append(string)
    return interesting

# Read input from file
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = sorted([file.readline().strip() for _ in range(N)], key=lambda x: (-len(x), x))

# Process and write output to file
with open('interesant.out', 'w') as file:
    if p == 1:
        # Write the longest string to the file
        longest = find_longest_string(strings)
        file.write(f"{longest}\n")
    elif p == 2:
        # Write all interesting strings to the file
        interesting = find_interesting_strings(strings)
        file.write(f"{len(interesting)}\n")
        for s in interesting:
            file.write(f"{s}\n")
```
```
---------- user ----------


Expected program to write result to `interesant.out` and read from `interesant.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from file
with open('interesant.in', 'r') as file:
    p, N = map(int, file.readline().split())
    strings = [file.readline().strip() for _ in range(N)]

# Process input based on the value of p
if p == 1:
    # Find the longest string, lexicographically smallest
    longest = min((s for s in strings if len(s) == max(map(len, strings))), key=lambda s: (len(s), s))
    # Write output to file
    with open('interesant.out', 'w') as file:
        file.write(f"{longest}\n")
elif p == 2:
    # Find all interesting strings
    interesting = []
    for s in strings:
        if not any(s in other for other in strings if s != other):
            interesting.append(s)
    # Write output to file
    with open('interesant.out', 'w') as file:
        file.write(f"{len(interesting)}\n")
        for s in interesting:
            file.write(f"{s}\n")
```
```
