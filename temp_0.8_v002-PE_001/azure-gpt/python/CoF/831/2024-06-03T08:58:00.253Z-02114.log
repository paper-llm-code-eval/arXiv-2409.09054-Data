---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `bete.in` and write to `bete.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ana și Bogdan au găsit la bunicul lor o cutie cu $N$ bețe de aceeași lungime. După câteva minute de joacă urmează cearta. Bunicul le-a propus să rupă cele $N$ bețe și apoi Ana să primească fragmentele din mâna stângă, iar Bogdan fragmentele din mâna dreaptă. Zis și făcut. Copiii au luat fragmentele, le-au numerotat fiecare cu numere de la $1$ la $N$, le-au măsurat și acum își doresc să lipească fragmentele primite, dar mai au nevoie de câteva informații.

# Cerință

Cunoscând $N$ numărul de bețe, $A_1$, $A_2$, ..., $A_N$ lungimile fragmentelor primite de Ana și $B_1$, $B_2$, ..., $B_N$ lungimile fragmentelor primite de Bogdan, să se scrie un program care să determine:

* lungimea inițială a bețelor;
* lungimea celui mai lung băț care se poate obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan;
* numărul bețelor de lungime maximă care se pot obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan.

# Date de intrare


Fișierul de intrare `bete.in` conține pe prima linie numărul natural $N$ reprezentând numărul de bețe. Pe a doua linie sunt $N$ numere naturale $A_1$, $A_2$, ..., $A_N$ reprezentând lungimile fragmentelor primite de Ana și pe a treia linie sunt $N$ numere naturale $B_1$, $B_2$, ..., $B_N$ reprezentând lungimile fragmentelor primite de Bogdan.


# Date de ieșire

Fișierul de ieșire `bete.out` va conține trei linii. Pe prima linie se va scrie numărul natural $L$ reprezentând lungimea inițială a bețelor, pe a doua linie se va scrie numărul natural $K$ reprezentând lungimea celui mai lung băț care se poate obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan, iar pe a treia linie se va scrie numărul natural $P$ reprezentând numărul bețelor de lungime maximă care se pot obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan.


# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq A_i \leq 10 \ 000$;
* $1 \leq B_i \leq 10 \ 000$;
* $1 \leq L \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq P \leq 1 \ 000$;
* Odată lipite două fragmente, acestea nu se pot dezlipi.
* Pentru determinarea corectă a valorii L se acordă 30% din punctaj, pentru determinarea corectă a valorii K se acordă 30% din punctaj, iar pentru determinarea corectă a valorii P se acordă 40% din punctaj.

---

Example:
`bete.in`
```
6
2 6 7 1 3 5
5 4 7 8 9 3
```

`bete.out`
```
10
16
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read from input file
with open('bete.in', 'r') as file:
    N = int(file.readline().strip())
    A = np.array(file.readline().strip().split(), dtype=np.int16)
    B = np.array(file.readline().strip().split(), dtype=np.int16)

# Calculate the initial length of the sticks
L = int(np.max(A + B))

# Find the maximum length and count sticks of maximum length
max_length = 0
max_count = 0
for length in A:
    complementary_lengths = L - length
    if np.any(B == complementary_lengths):
        current_max_length = length + complementary_lengths
        current_count = np.sum(B == complementary_lengths)
        if current_max_length > max_length:
            max_length = current_max_length
            max_count = current_count
        elif current_max_length == max_length:
            max_count += current_count

# Write to output file
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{max_length}\n{max_count}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from input file
with open('bete.in', 'r') as file:
    N = int(file.readline().strip())
    A = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    B = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Calculate the initial length of the sticks
L = A + B
initial_stick_length = np.max(L)

# Find the maximum length and count sticks of maximum length that can be formed
max_combined_length = np.max(A) + np.max(B)
max_length_count = np.sum(A[:, None] + B == max_combined_length)

# Write to output file
with open('bete.out', 'w') as file:
    file.write(f"{initial_stick_length}\n{max_combined_length}\n{max_length_count}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Load data from file
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A = np.fromstring(file.readline(), dtype=int, sep=' ')
    B = np.fromstring(file.readline(), dtype=int, sep=' ')

# The initial length of the sticks is the sum of the corresponding pairs
initial_length = A + B
L = np.max(initial_length)

# Find the maximum combined length of a stick that can be obtained by Ana and Bogdan
max_length = np.max(A) + np.max(B)

# Find the number of sticks that can achieve this maximum combined length
max_stick_counter = 0
for i in range(N):
    for j in range(N):
        if A[i] + B[j] == max_length:
            max_stick_counter += 1

# Write the result to the output file
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{max_length}\n{max_stick_counter}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from input file
with open('bete.in', 'r') as file:
    N = int(file.readline().strip())
    A = np.array(file.readline().strip().split(), dtype=int)
    B = np.array(file.readline().strip().split(), dtype=int)

# Calculate the initial length of the sticks
original_lengths = A + B
initial_length = np.max(original_lengths)

# Find the maximum length and count sticks of maximum length
combined_lengths = A.reshape(-1, 1) + B
max_combined_length = np.max(combined_lengths)
max_length_count = np.count_nonzero(combined_lengths == max_combined_length)

# Write to output file
with open('bete.out', 'w') as file:
    file.write(f"{initial_length}\n{max_combined_length}\n{max_length_count}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient function to count the maximum stick length and how many can be made
def calculate_maximum_stick(A, B, L):
    unique, counts = np.unique(A, return_counts=True)
    A_frequency = dict(zip(unique, counts))

    max_length = 0
    max_count = 0

    for b in B:
        complementary_length = L - b
        if complementary_length in A_frequency:
            if complementary_length + b > max_length:
                max_length = complementary_length + b
                max_count = A_frequency[complementary_length]
            elif complementary_length + b == max_length:
                max_count += A_frequency[complementary_length]

    return max_length, max_count

# Read input from file
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A = np.array(file.readline().split(), dtype=np.int16)
    B = np.array(file.readline().split(), dtype=np.int16)

# Calculate the initial length of the sticks (L)
L = np.max(A + B)

# Calculate the maximum stick length (K) and the count of such sticks (P)
K, P = calculate_maximum_stick(A, B, L)

# Write output to file
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{K}\n{P}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python

# Import numpy for efficient array operations
import numpy as np

# Read from input file
with open('bete.in', 'r') as file:
    N = int(file.readline().strip())
    A = np.array(file.readline().strip().split(), dtype=int)
    B = np.array(file.readline().strip().split(), dtype=int)

# Calculate the initial length of the sticks (the sum of paired fragments)
initial_lengths = A + B
L = np.max(initial_lengths)

# Find the maximum length of stick that can be made by combining two fragments
max_length = 0
for fragment_A in A:
    for fragment_B in B:
        combined_length = fragment_A + fragment_B
        if combined_length > max_length:
            max_length = combined_length

# Count how many maximum length sticks can be made
K = max_length
P = np.sum(A[:, None] + B == K)

# Write the results to the output file
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{K}\n{P}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from file 'bete.in'.
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A = np.array(list(map(int, file.readline().split())), dtype=np.int32)
    B = np.array(list(map(int, file.readline().split())), dtype=np.int32)

# Calculate initial length of the sticks (L).
L = np.max(A + B)

# Find the maximum length of stick that can be made by combining two fragments.
# And count how many maximum length sticks can be made (P).
K = 0
P = 0
for a in A:
    for b in B:
        if a + b > K:
            K = a + b
            P = 1
        elif a + b == K:
            P += 1

# Write the results to the file 'bete.out'.
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{K}\n{P}\n")
```
```
