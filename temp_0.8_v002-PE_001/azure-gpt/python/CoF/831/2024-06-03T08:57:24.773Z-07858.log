---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `bete.in` and write to `bete.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ana și Bogdan au găsit la bunicul lor o cutie cu $N$ bețe de aceeași lungime. După câteva minute de joacă urmează cearta. Bunicul le-a propus să rupă cele $N$ bețe și apoi Ana să primească fragmentele din mâna stângă, iar Bogdan fragmentele din mâna dreaptă. Zis și făcut. Copiii au luat fragmentele, le-au numerotat fiecare cu numere de la $1$ la $N$, le-au măsurat și acum își doresc să lipească fragmentele primite, dar mai au nevoie de câteva informații.

# Cerință

Cunoscând $N$ numărul de bețe, $A_1$, $A_2$, ..., $A_N$ lungimile fragmentelor primite de Ana și $B_1$, $B_2$, ..., $B_N$ lungimile fragmentelor primite de Bogdan, să se scrie un program care să determine:

* lungimea inițială a bețelor;
* lungimea celui mai lung băț care se poate obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan;
* numărul bețelor de lungime maximă care se pot obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan.

# Date de intrare


Fișierul de intrare `bete.in` conține pe prima linie numărul natural $N$ reprezentând numărul de bețe. Pe a doua linie sunt $N$ numere naturale $A_1$, $A_2$, ..., $A_N$ reprezentând lungimile fragmentelor primite de Ana și pe a treia linie sunt $N$ numere naturale $B_1$, $B_2$, ..., $B_N$ reprezentând lungimile fragmentelor primite de Bogdan.


# Date de ieșire

Fișierul de ieșire `bete.out` va conține trei linii. Pe prima linie se va scrie numărul natural $L$ reprezentând lungimea inițială a bețelor, pe a doua linie se va scrie numărul natural $K$ reprezentând lungimea celui mai lung băț care se poate obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan, iar pe a treia linie se va scrie numărul natural $P$ reprezentând numărul bețelor de lungime maximă care se pot obține prin lipirea unui fragment aparținând Anei cu un fragment care aparține lui Bogdan.


# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq A_i \leq 10 \ 000$;
* $1 \leq B_i \leq 10 \ 000$;
* $1 \leq L \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq P \leq 1 \ 000$;
* Odată lipite două fragmente, acestea nu se pot dezlipi.
* Pentru determinarea corectă a valorii L se acordă 30% din punctaj, pentru determinarea corectă a valorii K se acordă 30% din punctaj, iar pentru determinarea corectă a valorii P se acordă 40% din punctaj.

---

Example:
`bete.in`
```
6
2 6 7 1 3 5
5 4 7 8 9 3
```

`bete.out`
```
10
16
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Load data from the input file
with open('bete.in', 'r') as file:
    N = int(file.readline().strip())
    A = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    B = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Calculate the original stick lengths
original_lengths = A + B

# The original stick length is the maximum of the calculated lengths
L = np.max(original_lengths)

# Create a dictionary to count the occurrences of each stick length
length_count = {}

# Count the occurrences of each stick length by pairing each fragment from Ana with each from Bogdan
for a in A:
    for b in B:
        pair_sum = a + b
        if pair_sum in length_count:
            length_count[pair_sum] += 1
        else:
            length_count[pair_sum] = 1

# Find the maximum length (K) and its occurrences (P)
K = max(length_count.keys())
P = length_count[K]

# Write the results to the output file
with open('bete.out', 'w') as file:
    file.write(f"{L}\n{K}\n{P}\n")
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently read the input data from 'bete.in'
with open('bete.in', 'r') as f:
    N = int(f.readline().strip())
    A_lengths = np.fromstring(f.readline().strip(), dtype=int, sep=' ')
    B_lengths = np.fromstring(f.readline().strip(), dtype=int, sep=' ')

# Calculate the original stick length which is the sum of corresponding pairs
original_length = np.add(A_lengths, B_lengths).max()

# Find the maximum stick length K by adding each pair of A and B lengths
# and count the number of occurrences of each stick length for P
combined_lengths = np.add.outer(A_lengths, B_lengths)
max_length = combined_lengths.max()
max_count = (combined_lengths == max_length).sum()

# Write the results to 'bete.out'
with open('bete.out', 'w') as f:
    f.write(f'{original_length}\n{max_length}\n{max_count}\n')
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently read the input data from 'bete.in'
with open('bete.in', 'r') as f:
    N = int(f.readline().strip())
    A_lengths = np.fromfile(f, dtype=int, sep=' ', count=N)
    B_lengths = np.fromfile(f, dtype=int, sep=' ', count=N)

# Calculate the original stick length which is the sum of corresponding pairs
original_length = np.add(A_lengths, B_lengths).max()

# Efficiently find the maximum stick length K and number of occurrences P
max_length = np.add.outer(A_lengths, B_lengths).max()
max_count = (A_lengths[:, None] + B_lengths == max_length).sum()

# Write the results to 'bete.out'
with open('bete.out', 'w') as f:
    f.write(f'{original_length}\n{max_length}\n{max_count}\n')
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'bete.in'
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A = np.array(file.readline().split(), dtype=int)
    B = np.array(file.readline().split(), dtype=int)

# Calculate the original length of the sticks
orig_length = A + B
L = orig_length.max()

# Calculate the maximum length of stick possible by combining Ana's and Bogdan's sticks
max_combo_length = (A.reshape(-1, 1) + B).max()

# Calculate the number of maximum length sticks
max_combo_count = (A.reshape(-1, 1) + B == max_combo_length).sum()

# Write output to 'bete.out'
with open('bete.out', 'w') as file:
    file.write(f'{L}\n{max_combo_length}\n{max_combo_count}\n')
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'bete.in'
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A_lengths = list(map(int, file.readline().split()))
    B_lengths = list(map(int, file.readline().split()))

# Convert to numpy arrays for efficient computation
A = np.array(A_lengths)
B = np.array(B_lengths)

# Calculate the original length of each stick by summing the corresponding pieces
original_stick_lengths = A + B
L = np.max(original_stick_lengths)

# Find the maximum stick length that can be formed (K) and how many of them (P)
combined_lengths = A.reshape(N, 1) + B.reshape(1, N)
K = np.max(combined_lengths)
P = np.count_nonzero(combined_lengths == K)

# Write the results to 'bete.out'
with open('bete.out', 'w') as file:
    file.write(f'{L}\n{K}\n{P}\n')
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'bete.in'
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A_lengths = np.fromstring(file.readline(), sep=' ', dtype=int)
    B_lengths = np.fromstring(file.readline(), sep=' ', dtype=int)

# Calculate the original length of each stick by summing the matching pieces
original_length = A_lengths + B_lengths
L = np.max(original_length)

# Find the maximum stick length achievable by combining Ana's and Bogdan's pieces
combined_lengths = np.add.outer(A_lengths, B_lengths)
max_length = np.max(combined_lengths)

# Count the number of combinations that give the maximum length
max_count = np.sum(combined_lengths == max_length)

# Write the results to 'bete.out'
with open('bete.out', 'w') as file:
    file.write(f'{L}\n{max_length}\n{max_count}\n')
```
```
---------- user ----------


Expected program to write result to `bete.out` and read from `bete.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'bete.in'
with open('bete.in', 'r') as file:
    N = int(file.readline())
    A = np.array(file.readline().split(), dtype=np.int64)
    B = np.array(file.readline().split(), dtype=np.int64)

# Calculate the original length of each stick
original_length = A + B
L = np.max(original_length)

# Determine the maximum combined length of Ana's and Bogdan's stick pieces
max_combined_length = np.max(A[:, None] + B)

# Count the number of maximum length combinations
max_length_count = np.count_nonzero(A[:, None] + B == max_combined_length)

# Write the results to 'bete.out'
with open('bete.out', 'w') as file:
    file.write(f'{L}\n{max_combined_length}\n{max_length_count}')
```
```
