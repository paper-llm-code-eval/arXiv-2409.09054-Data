---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Helper function to try building the expression
def build_expression(digits, target, current_sum=0, index=0, expression="", found_expressions=[]):
    if index == len(digits):
        if current_sum == target:
            found_expressions.append(expression)
        return found_expressions

    # Try adding the next digit
    new_sum_add = current_sum + digits[index]
    if index == 0:  # First digit, don't include '+' in the expression
        build_expression(digits, target, new_sum_add, index + 1, expression + str(digits[index]), found_expressions)
    else:
        build_expression(digits, target, new_sum_add, index + 1, expression + "+" + str(digits[index]), found_expressions)
    
    # Try subtracting the next digit
    new_sum_sub = current_sum - digits[index]
    build_expression(digits, target, new_sum_sub, index + 1, expression + "-" + str(digits[index]), found_expressions)
    
    return found_expressions

# Read input data
with open('adunscad.in', 'r') as file:
    n_m = file.readline().strip().split()
    N = int(n_m[0])  # The target number
    M = int(n_m[1])  # Number of digits
    digits = np.array(file.readline().strip().split(), dtype=int)

# Solve the problem
expressions = build_expression(digits, N)

# Write output data
with open('adunscad.out', 'w') as file:
    if expressions:
        file.write(expressions[0])  # Write the first found expression
    else:
        file.write('0')  # Write 0 if no expression could be found
```
```
---------- user ----------


Expected program to write result to `adunscad.out` and read from `adunscad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Helper function to try building the expression
def build_expression(digits, target, current_sum=0, index=0, expression=""):
    if index == len(digits):
        if current_sum == target:
            return expression
        else:
            return None

    # Try adding the next digit
    new_sum_add = current_sum + digits[index]
    if index == 0:  # First digit, don't include '+' in the expression
        result = build_expression(digits, target, new_sum_add, index + 1, expression + str(digits[index]))
    else:
        result = build_expression(digits, target, new_sum_add, index + 1, expression + "+" + str(digits[index]))
    if result is not None:
        return result
    
    # Try subtracting the next digit
    new_sum_sub = current_sum - digits[index]
    result = build_expression(digits, target, new_sum_sub, index + 1, expression + "-" + str(digits[index]))
    if result is not None:
        return result

    return None

# Read input data
with open('adunscad.in', 'r') as file:
    n_m = file.readline().strip().split()
    N = int(n_m[0])  # The target number
    M = int(n_m[1])  # Number of digits
    digits = np.array(file.readline().strip().split(), dtype=int)

# Solve the problem
expression = build_expression(digits, N)

# Write output data
with open('adunscad.out', 'w') as file:
    if expression is not None:
        file.write(expression)  # Write the found expression
    else:
        file.write('0')  # Write 0 if no expression could be found
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I apologize for the oversight. The challenge states that we need to be memory-efficient and should not exceed an ~8MB memory limit. Using numpy is both unnecessary and inefficient for this task, as it seems the runtime environment does not have numpy available. I will rewrite the solution without numpy, using only built-in Python functionality to ensure memory efficiency.

```python
# Helper function to try building the expression
def build_expression(digits, target, current_sum=0, index=0, expression=""):
    if index == len(digits):
        if current_sum == target:
            return expression
        return None

    # Try adding the next digit
    new_sum_add = current_sum + digits[index]
    if index == 0: # First digit, don't include '+' in the expression
        result = build_expression(digits, target, new_sum_add, index + 1, expression + str(digits[index]))
    else:
        result = build_expression(digits, target, new_sum_add, index + 1, expression + "+" + str(digits[index]))
    if result is not None:
        return result
    
    # Try subtracting the next digit
    new_sum_sub = current_sum - digits[index]
    result = build_expression(digits, target, new_sum_sub, index + 1, expression + "-" + str(digits[index]))
    if result is not None:
        return result
    
    return None

# Read input data
with open('adunscad.in', 'r') as file:
    n_m = file.readline().strip().split()
    N = int(n_m[0])  # The target number
    M = int(n_m[1])  # Number of digits
    digits = list(map(int, file.readline().strip().split()))  # Convert input string to list of integers

# Solve the problem
expression = build_expression(digits, N)

# Write output data
with open('adunscad.out', 'w') as file:
    if expression is not None:
        file.write(expression)  # Write the found expression
    else:
        file.write('0')  # Write 0 if no expression could be found
```
