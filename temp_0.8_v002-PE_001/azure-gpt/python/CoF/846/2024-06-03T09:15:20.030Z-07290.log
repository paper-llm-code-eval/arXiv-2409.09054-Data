---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `patrat.in` and write to `patrat.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[patrat.jpg|align=right]

Cel mai mare observator astronomic din România și din Europa de Est, aflat la Galați, a captat o imagine a boltei cerești, ce surprinde toate stelele vizibile în acel moment. Imaginea este în format digital, codificată sub forma unui tablou bidimensional, cu $N$ linii și $M$ coloane. Fiecare element al tabloului conține un număr natural care reprezintă intensitatea luminoasă a unei stele.

Numim **stea strălucitoare** o stea care are intensitatea luminoasă mai mare decât a tuturor stelelor învecinate direct cu ea, pe orizontală, verticală sau diagonală. Numim **constelație pătrată** patru stele strălucitoare care se află plasate în colțurile unui pătrat cu laturile paralele cu marginile tabloului. Lungimea laturii unei constelații pătrate este egală cu numărul de stele din care este formată latura. O stea strălucitoare poate face parte din mai multe constelații pătrate.

# Cerință

Scrieți un program care să determine:
1. Numărul stelelelor strălucitoare;
2. Numărul constelațiilor pătrate;
3. Lungimea laturii pătratului care reprezintă cea mai mare constelație pătrată

# Date de intrare

Din fișierul `patrat.in` se citesc de pe prima linie, două numere naturale $N$ și $M$, separate printr-un spațiu, reprezentând dimensiunile tabloului bidimensional, iar de pe următoarele $N$ linii, câte $M$ numere naturale separate prin câte un spațiu, reprezentând intensitatea luminoasă a stelelor.

# Date de ieșire

În fișierul `patrat.out` se va scrie pe prima linie un număr natural reprezentând răspunsul la cerința $1$. Pe cea de-a doua linie se va scrie un număr natural reprezentând răspunsul la cerința $2$. Pe a treia linie se va scrie un număr natural reprezentând răspunsul la cerința $3$.

# Restricții și precizări

* $1 < N \leq 200$;
* $1 < M \leq 200$;
* $1 \leq$ intensitatea unei stele $\leq 1 \ 000$;
* pentru rezolvarea corectă a cerinţei $1$ se acordă $40\%$ din punctajul fiecărui test, pentru rezolvarea corectă a cerinţei $2$ se acordă $40\%$ din punctajul fiecărui test iar pentru rezolvarea corectă a cerinţei $3$ se acordă $20\%$ din punctajul fiecărui test.
* Respectaţi formatul fişierului de ieşire! Pentru a obţine punctajul acordat unei cerinţe, trebuie ca răspunsul din fişier să fie corect şi scris exact pe linia precizată în enunţ.

---

Example:
`patrat.in`
```
6 8
1 8 5 7 1 6 3 4
1 2 3 1 1 5 2 1
1 7 1 9 1 1 8 1
6 3 5 1 6 4 3 1
1 9 5 7 1 8 2 1
1 5 6 5 3 1 3 6
```

`patrat.out`
```
11
3
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below you'll find the Python code to solve the given challenge, respecting the memory constraints and utilizing NumPy for efficient calculations. The code reads the input from 'patrat.in', processes the data to find the bright stars and square constellations, and then writes the results to 'patrat.out'.

```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)], dtype=np.int32)
    return n, m, matrix

def write_output(filename, bright_stars_count, square_constellations_count, largest_constellation_size):
    with open(filename, 'w') as file:
        file.write(f"{bright_stars_count}\n")
        file.write(f"{square_constellations_count}\n")
        file.write(f"{largest_constellation_size}\n")

def check_bright_stars(matrix, n, m):
    bright_stars = []
    # Using padding to simplify comparisons at the edges
    padded_matrix = np.pad(matrix, pad_width=1, mode='constant', constant_values=0)
    for i in range(1, n+1):
        for j in range(1, m+1):
            if padded_matrix[i, j] > np.max(padded_matrix[i-1:i+2, j-1:j+2]):
                bright_stars.append((i-1, j-1))
    return bright_stars

def check_square_constellations(bright_stars):
    constellation_count = 0
    largest_constellation_size = 0
    for i, (x1, y1) in enumerate(bright_stars):
        for j in range(i+1, len(bright_stars)):
            x2, y2 = bright_stars[j]
            if x1 != x2 and y1 != y2 and abs(x1 - x2) == abs(y1 - y2):
                if ((x1, y2) in bright_stars) and ((x2, y1) in bright_stars):
                    constellation_count += 1
                    largest_constellation_size = max(largest_constellation_size, abs(x1 - x2) + 1)
    return constellation_count, largest_constellation_size

def solve_challenge():
    n, m, matrix = read_input('patrat.in')
    bright_stars = check_bright_stars(matrix, n, m)
    bright_stars_count = len(bright_stars)
    square_constellations_count, largest_constellation_size = check_square_constellations(bright_stars)
    write_output('patrat.out', bright_stars_count, square_constellations_count, largest_constellation_size)

# Execute the challenge solution
solve_challenge()
```

This code should meet the requirements of the challenge with respect to time and memory efficiency. The size of the input is limited by the problem constraints, and NumPy operations are typically memory and time efficient. If the memory consumption is still too high for the given constraints, additional steps would be needed to optimize memory usage further, such as processing the data in chunks or using more memory-efficient data structures. However, given the constraints of the problem, this solution should work within the specified bounds.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the environment does not support NumPy, I will rewrite the solution to use only built-in Python data structures and functions while still optimizing for memory usage.

Here's the updated code:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        matrix = [list(map(int, file.readline().split())) for _ in range(n)]
    return n, m, matrix

def write_output(filename, bright_stars_count, square_constellations_count, largest_constellation_size):
    with open(filename, 'w') as file:
        file.write(f"{bright_stars_count}\n")
        file.write(f"{square_constellations_count}\n")
        file.write(f"{largest_constellation_size}\n")

def check_bright_stars(matrix, n, m):
    bright_stars = []
    for i in range(n):
        for j in range(m):
            star_intensity = matrix[i][j]
            # Check all adjacent stars
            bright = True
            for dx in range(-1, 2):
                for dy in range(-1, 2):
                    if dx == 0 and dy == 0:
                        continue
                    if 0 <= i+dx < n and 0 <= j+dy < m and matrix[i+dx][j+dy] >= star_intensity:
                        bright = False
                        break
                if not bright:
                    break
            if bright:
                bright_stars.append((i, j))
    return bright_stars

def check_square_constellations(bright_stars):
    constellation_count = 0
    largest_constellation_size = 0
    bright_set = set(bright_stars)
    for x1, y1 in bright_stars:
        for x2, y2 in bright_stars:
            if x1 < x2 and y1 < y2 and (x2 - x1) == (y2 - y1):
                if ((x1, y2) in bright_set) and ((x2, y1) in bright_set):
                    constellation_count += 1
                    largest_constellation_size = max(largest_constellation_size, x2 - x1 + 1)
    return constellation_count, largest_constellation_size

def solve_challenge():
    n, m, matrix = read_input('patrat.in')
    bright_stars = check_bright_stars(matrix, n, m)
    bright_stars_count = len(bright_stars)
    square_constellations_count, largest_constellation_size = check_square_constellations(bright_stars)
    write_output('patrat.out', bright_stars_count, square_constellations_count, largest_constellation_size)

# Execute the challenge solution
solve_challenge()
```

This solution reads from the file 'patrat.in', processes the data, and writes the results to 'patrat.out' without using any external libraries. The memory usage is kept low by using lists and sets, and the program should perform well within the constraints specified. The use of a set for `bright_set` is to optimize the constellation lookup to O(1) time complexity.
