---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `patrat.in` and write to `patrat.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[patrat.jpg|align=right]

Cel mai mare observator astronomic din România și din Europa de Est, aflat la Galați, a captat o imagine a boltei cerești, ce surprinde toate stelele vizibile în acel moment. Imaginea este în format digital, codificată sub forma unui tablou bidimensional, cu $N$ linii și $M$ coloane. Fiecare element al tabloului conține un număr natural care reprezintă intensitatea luminoasă a unei stele.

Numim **stea strălucitoare** o stea care are intensitatea luminoasă mai mare decât a tuturor stelelor învecinate direct cu ea, pe orizontală, verticală sau diagonală. Numim **constelație pătrată** patru stele strălucitoare care se află plasate în colțurile unui pătrat cu laturile paralele cu marginile tabloului. Lungimea laturii unei constelații pătrate este egală cu numărul de stele din care este formată latura. O stea strălucitoare poate face parte din mai multe constelații pătrate.

# Cerință

Scrieți un program care să determine:
1. Numărul stelelelor strălucitoare;
2. Numărul constelațiilor pătrate;
3. Lungimea laturii pătratului care reprezintă cea mai mare constelație pătrată

# Date de intrare

Din fișierul `patrat.in` se citesc de pe prima linie, două numere naturale $N$ și $M$, separate printr-un spațiu, reprezentând dimensiunile tabloului bidimensional, iar de pe următoarele $N$ linii, câte $M$ numere naturale separate prin câte un spațiu, reprezentând intensitatea luminoasă a stelelor.

# Date de ieșire

În fișierul `patrat.out` se va scrie pe prima linie un număr natural reprezentând răspunsul la cerința $1$. Pe cea de-a doua linie se va scrie un număr natural reprezentând răspunsul la cerința $2$. Pe a treia linie se va scrie un număr natural reprezentând răspunsul la cerința $3$.

# Restricții și precizări

* $1 < N \leq 200$;
* $1 < M \leq 200$;
* $1 \leq$ intensitatea unei stele $\leq 1 \ 000$;
* pentru rezolvarea corectă a cerinţei $1$ se acordă $40\%$ din punctajul fiecărui test, pentru rezolvarea corectă a cerinţei $2$ se acordă $40\%$ din punctajul fiecărui test iar pentru rezolvarea corectă a cerinţei $3$ se acordă $20\%$ din punctajul fiecărui test.
* Respectaţi formatul fişierului de ieşire! Pentru a obţine punctajul acordat unei cerinţe, trebuie ca răspunsul din fişier să fie corect şi scris exact pe linia precizată în enunţ.

---

Example:
`patrat.in`
```
6 8
1 8 5 7 1 6 3 4
1 2 3 1 1 5 2 1
1 7 1 9 1 1 8 1
6 3 5 1 6 4 3 1
1 9 5 7 1 8 2 1
1 5 6 5 3 1 3 6
```

`patrat.out`
```
11
3
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Reading data from input file
with open('patrat.in', 'r') as file:
    N, M = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(N)])

# Function to check if a star is brighter than its neighbors
def is_bright_star(matrix, i, j):
    star = matrix[i, j]
    neighbors = matrix[max(i - 1, 0):min(i + 2, N), max(j - 1, 0):min(j + 2, M)]
    return np.all(star > neighbors[neighbors != star])

# Find all bright stars
bright_stars_positions = []
for i in range(N):
    for j in range(M):
        if is_bright_star(matrix, i, j):
            bright_stars_positions.append((i, j))

# Count bright stars
num_bright_stars = len(bright_stars_positions)

# Function to check if four stars form a square constellation
def is_constellation_square(bright_stars_positions, i, j):
    for other_i in range(i+1, len(bright_stars_positions)):
        x1, y1 = bright_stars_positions[i]
        x2, y2 = bright_stars_positions[other_i]
        if x1 != x2 and y1 != y2 and abs(x1 - x2) == abs(y1 - y2):
            if ((x1, y2) in bright_stars_positions) and ((x2, y1) in bright_stars_positions):
                return abs(x1 - x2)

# Find all square constellations
constellations = set()
max_side_length = 0
for i in range(len(bright_stars_positions)):
    for j in range(i+1, len(bright_stars_positions)):
        side_length = is_constellation_square(bright_stars_positions, i, j)
        if side_length:
            constellations.add(side_length)
            if side_length > max_side_length:
                max_side_length = side_length

# Count square constellations
num_constellations = len(constellations)

# Writing data to output file
with open('patrat.out', 'w') as file:
    file.write(f'{num_bright_stars}\n')
    file.write(f'{num_constellations}\n')
    file.write(f'{max_side_length}\n')
```

This code reads the input from 'patrat.in', processes the data to find bright stars and square constellations, and then writes the output to 'patrat.out'. The code aims to minimize memory usage by using only necessary data structures and tries to be efficient in its calculations. However, it is important to note that the complexity of this solution may not be optimal due to the nested loops and repeated scans of the matrix. To further optimize the solution, consider more advanced techniques such as preprocessing for faster neighbor comparisons or using data structures tailored for spatial searches like quadtrees.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available. Since the challenge requires optimizing both time and memory usage, I will rewrite the solution without using `numpy` or any external libraries that might not be available or could potentially exceed the memory limit.

Here is the corrected solution, which uses only built-in Python capabilities:

```python
# Function to check if a star is brighter than its neighbors
def is_bright_star(matrix, i, j, N, M):
    star = matrix[i][j]
    for x in range(max(i - 1, 0), min(i + 2, N)):
        for y in range(max(j - 1, 0), min(j + 2, M)):
            if (x != i or y != j) and matrix[x][y] >= star:
                return False
    return True

# Reading data from input file
with open('patrat.in', 'r') as file:
    N, M = map(int, file.readline().split())
    matrix = [list(map(int, file.readline().split())) for _ in range(N)]

# Find all bright stars
bright_stars_positions = []
for i in range(N):
    for j in range(M):
        if is_bright_star(matrix, i, j, N, M):
            bright_stars_positions.append((i, j))

# Count bright stars
num_bright_stars = len(bright_stars_positions)

# Check for square constellations
constellation_sizes = {}
for (x1, y1) in bright_stars_positions:
    for (x2, y2) in bright_stars_positions:
        if x1 != x2 and y1 != y2 and abs(x1 - x2) == abs(y1 - y2):
            if ((x1, y2) in bright_stars_positions) and ((x2, y1) in bright_stars_positions):
                size = abs(x1 - x2) + 1
                constellation_sizes[size] = constellation_sizes.get(size, 0) + 1

# The same square can be counted four times (once for each corner), so divide by 4
num_constellations = sum(count // 4 for count in constellation_sizes.values())
max_side_length = max(constellation_sizes.keys(), default=0)

# Writing data to output file
with open('patrat.out', 'w') as file:
    file.write(f'{num_bright_stars}\n')
    file.write(f'{num_constellations}\n')
    file.write(f'{max_side_length}\n')
```

This solution uses a double loop to iterate through the matrix and find bright stars. It then uses another double loop to look for square constellations, storing the sizes of the squares in a dictionary and counting each square only once. The final results are written to 'patrat.out'. The memory usage of this approach is kept low by avoiding large data structures and the storage of unnecessary intermediate results.
