---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La proba de sărituri cu schiurile din cadrul jocurilor olimpice de iarnă participă $N$ concurenți, numerotați cu numere de la 1 la N.

Regulile de desfășurare a probei sunt următoarele:
- concurenții evoluează pe rând, în ordine de la $1$ la $N$;
- fiecare concurent va efectua o singură săritură;
- după efectuarea săriturii fiecare concurent primește un anumit punctaj;
- pe tot parcursul concursului, comisia de arbitri are obligația să alcătuiască o listă cu punctajele obținute de concurenți, în ordinea evoluției lor;
- evoluția unui concurent durează exact un minut;
- nu se face pauză între evoluțiile a doi concurenți care au numere de ordine consecutive;
- afișarea punctajului nu necesită timp suplimentar după efectuarea săriturii;
- proba se încheie la un minut după evoluția ultimului concurent.

Pe tot parcursul concursului se ține în mod neoficial și un clasament parțial, pe baza rezultatelor obținute de concurenții care au evoluat până în acel moment. Asta pentru că șeful comisiei de arbitri are o curiozitate aparte și pune $K$ întrebări sub forma următoare: Câte minute s-a ocupat primul loc din clasament cu un punctaj egal cu $X$ puncte? Dacă nici un concurent nu s-a clasat pe primul loc cu $X$ puncte atunci primește ca răspuns valoarea $0$.

# Cerință

Scrieți un program care determină răspunsul pentru fiecare dintre cele $K$ întrebări puse de șeful comisiei de arbitri.

# Date de intrare

În fișierul `schi.in`, pe prima linie este scris un număr natural, $N$ reprezentând numărul de concurenți. 
Pe a doua linie a fișierului sunt scrise cele $N$ numere naturale separate prin câte un spațiu, reprezentând punctajele obținute de fiecare dintre cei $N$ concurenți, în ordinea în care aceștia au evoluat. Pe a treia linie a fișierului este scris numărul natural $K$ ce reprezintă numărul de întrebări puse de șef. Pe a patra linie a fișierului sunt scrise $K$ numere naturale separate prin câte un spațiu, reprezentând valorile $X$ ale punctajelor alese de șeful comisiei de arbitri.

# Date de ieșire

În fișierul `schi.out` se vor scrie $K$ numere, separate prin câte un spațiu, reprezentând, în ordine, răspunsurile la cele $K$ întrebări.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq$ punctajele obținute de concurenți $\leq 1 \ 000 \ 000 \ 000$;
* $0 \leq$ valorile $X$ alese de șeful arbitrilor $\leq 1 \ 000 \ 000 \ 000$;

---

Example:
`schi.in`
```
10
1 6 5 3 6 8 8 6 1 9
6
5 1 6 8 2 9
```

`schi.out`
```
0 1 4 4 0 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data from schi.in
with open('schi.in', 'r') as file:
    N = int(file.readline().strip())
    scores = np.array(file.readline().strip().split(), dtype=int)
    K = int(file.readline().strip())
    queries = np.array(file.readline().strip().split(), dtype=int)

# Initialize a dictionary to keep track of the duration each score has been in the first position
duration_dict = {}

# Iterate through the scores to update the duration each score has been in the first position
max_score = -1
for score in scores:
    max_score = max(max_score, score)
    if max_score not in duration_dict:
        duration_dict[max_score] = 1
    else:
        duration_dict[max_score] += 1

# Initialize the list for storing the results of the queries
query_results = []

# For each query, check if the score has been in the first position and for how long
for query in queries:
    query_score = int(query)
    duration = duration_dict.get(query_score, 0)
    query_results.append(duration)

# Write the output data to schi.out
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, query_results)) + '\n')
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Required Libraries
import numpy as np

# Read the input data from 'schi.in'
with open('schi.in', 'r') as file:
    N = int(file.readline().strip())
    scores = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    K = int(file.readline().strip())
    queries = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Prepare an array to keep the maximum score at each minute
max_scores = np.maximum.accumulate(scores)

# Prepare the result array for the queries
results = np.zeros(K, dtype=int)

# Use a bincount to count occurrences of each score, but only for the highest scores
counts = np.bincount(max_scores)

# Answer each query using the bincount results
for i in range(K):
    if queries[i] < len(counts):
        results[i] = counts[queries[i]]

# Write the output data to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, results)) + '\n')
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array manipulation
import numpy as np

# Read the input data from 'schi.in'
with open('schi.in', 'r') as file:
    N = int(file.readline().strip())
    scores = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    K = int(file.readline().strip())
    queries = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Initialize a dictionary to keep track of the minutes each score occupied the first place
first_place_duration = {}

# Track the current maximum score and update the duration it occupies the first place
current_max_score = 0
for score in scores:
    if score > current_max_score:
        current_max_score = score
    if current_max_score in first_place_duration:
        first_place_duration[current_max_score] += 1
    else:
        first_place_duration[current_max_score] = 1

# Prepare the output list with the answer to each query
output = [str(first_place_duration.get(query, 0)) for query in queries]

# Write the output data to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(output))
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently read from 'schi.in' and prepare the necessary data structures
with open('schi.in', 'r') as file:
    N = int(file.readline().strip())
    scores = np.array(file.readline().strip().split(), dtype=np.int32)
    K = int(file.readline().strip())
    queries = np.array(file.readline().strip().split(), dtype=np.int32)

# Initialize the array to store the results for the queries
results = np.zeros(K, dtype=np.int32)

# Initialize the array to track the duration each score has been in the first place
leaderboard = np.zeros(N+1, dtype=np.int32)

# Update the leaderboard with the score durations
current_leader = 0
for i in range(N):
    score = scores[i]
    if score > current_leader:
        current_leader = score
    leaderboard[current_leader] += 1

# Answer the queries
for i in range(K):
    if queries[i] <= current_leader:
        results[i] = leaderboard[queries[i]]

# Efficiently write the results to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, results)))
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import bisect

# Read data from 'schi.in'
with open('schi.in', 'r') as file:
    N = int(file.readline())
    scores = list(map(int, file.readline().split()))
    K = int(file.readline())
    queries = list(map(int, file.readline().split()))

# Initialize result list
results = [0] * K

# Create list to hold the top score and its duration at each moment
top_scores = [(0, 0)]

# Process the scores and update the top scores list
for score in scores:
    if score > top_scores[-1][0]:
        top_scores.append((score, 1))
    else:
        top_scores[-1] = (top_scores[-1][0], top_scores[-1][1] + 1)

# Process the queries
for i, query in enumerate(queries):
    # Find the position of the first occurrence of the query score in the top_scores
    pos = bisect.bisect_left(top_scores, (query, 0))
    # If the score is found and it is the top score at that moment, add the duration
    if pos < len(top_scores) and top_scores[pos][0] == query:
        results[i] = top_scores[pos][1]

# Write results to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, results)))
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read data from 'schi.in'
with open('schi.in', 'r') as file:
    N = int(file.readline())
    scores = list(map(int, file.readline().split()))
    K = int(file.readline())
    queries = list(map(int, file.readline().split()))

# Initialize the result array
results = [0] * K

# Initialize the dictionary to store the first place time for each score
first_place_times = {}

# Track the maximum score and update the first place times
max_score = 0
for score in scores:
    if score > max_score:
        max_score = score
    if max_score in first_place_times:
        first_place_times[max_score] += 1
    else:
        first_place_times[max_score] = 1

# Answer the queries
for i, query in enumerate(queries):
    results[i] = first_place_times.get(query, 0)

# Write results to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, results)))
```
```
---------- user ----------


Expected program to write result to `schi.out` and read from `schi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from 'schi.in'
with open('schi.in', 'r') as file:
    n = int(file.readline())
    scores = list(map(int, file.readline().split()))
    k = int(file.readline())
    queries = list(map(int, file.readline().split()))

# Initialize the answer list
answers = [0] * k

# Calculate the time a score is at the first place
score_times = {}
current_max = 0
for score in scores:
    if score > current_max:
        current_max = score
        score_times[score] = 1
    else:
        score_times[current_max] += 1

# Answer the queries
for i in range(k):
    x = queries[i]
    answers[i] = score_times.get(x, 0)

# Write the answers to 'schi.out'
with open('schi.out', 'w') as file:
    file.write(' '.join(map(str, answers)))
```
```
