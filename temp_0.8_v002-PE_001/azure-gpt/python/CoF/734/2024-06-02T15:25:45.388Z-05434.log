---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `rj.in` and write to `rj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În ultima ecranizare a celebrei piese shakespeariene Romeo şi Julieta trăiesc într-un oraş modern, comunică prin e-mail şi chiar învaţă să programeze. Într-o secvenţă tulburătoare sunt prezentate frământările interioare ale celor doi eroi încercând fără succes să scrie un program care să determine un punct optim de întâlnire. 

Ei au analizat harta oraşului şi au reprezentat-o sub forma unei matrice cu $n$ linii şi $m$ coloane, în matrice fiind marcate cu spaţiu zonele prin care se poate trece (străzi lipsite de pericole) şi cu `X` zonele prin care nu se poate trece. De asemenea, în matrice au marcat cu `R` locul în care se află locuinţa lui Romeo, iar cu `J` locul în care se află locuinţa Julietei. 

Ei se pot deplasa numai prin zonele care sunt marcate cu spaţiu, din poziţia curentă în oricare dintre cele 8 poziţii învecinate (pe orizontală, verticală sau diagonale).

Cum lui Romeo nu îi place să aştepte şi nici să se lase aşteptat n-ar fi tocmai bine, ei au hotărât că trebuie să aleagă un punct de întâlnire în care atât Romeo, cât şi Julieta să poată ajunge în acelaşi timp, plecând de acasă. Fiindcă la întâlniri amândoi vin într-un suflet, ei estimează timpul necesar pentru a ajunge la întâlnire prin numărul de elemente din matrice care constituie drumul cel mai scurt de acasă până la punctul de întâlnire. Şi cum probabil există mai multe puncte de întâlnire posibile, ei vor să îl aleagă pe cel în care timpul necesar pentru a ajunge la punctul de întâlnire este minim.

# Cerință

Scrieţi un program care să determine o poziţie pe hartă la care Romeo şi Julieta pot să ajungă în acelaşi timp. Dacă există mai multe soluţii, programul trebuie să determine o soluţie pentru care timpul este minim.

# Date de intrare

Fişierul de intrare `rj.in` conţine:
* pe prima linie numerele naturale `N M`, care reprezintă numărul de linii şi respectiv de coloane ale matricei, separate prin spaţiu;
* pe fiecare dintre următoarele $N$ linii se află $M$ caractere (care pot fi doar `R`, `J`, `X` sau spaţiu) reprezentând matricea.

# Date de ieșire

Fişierul de ieşire `rj.out` va conţine o singură linie pe care sunt scrise trei numere naturale separate prin câte un spaţiu `tmin x y`, având semnificaţia:
* `x y` reprezinţă punctul de întâlnire ($x$ – numărul liniei, $y$ – numărul coloanei);
* `tmin` este timpul minim în care Romeo (respectiv Julieta) ajunge la punctul de întâlnire.

# Restricții și precizări

* $2 \leq N, M \leq 100$;
* Liniile şi coloanele matricei sunt numerotate începând cu 1.
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`rj.in`
```
5 8
XXR  XXX
 X  X  X
J X X  X
      XX
XXX XXXX
```

`rj.out`
```
4 4 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block for solving the challenge
import numpy as np
from scipy.sparse.csgraph import shortest_path
from scipy.sparse import csr_matrix

# Step 1: Read the input data from rj.in
with open('rj.in', 'r') as file:
    n, m = map(int, file.readline().split())
    city_map = [list(file.readline().strip()) for _ in range(n)]

# Step 2: Prepare the adjacency matrix for shortest path calculation
# Each cell will be a vertex in the graph. We use n*m vertices to represent the grid.
# We assign a large value for walls (X) and 1 for open spaces.
inf = np.inf
adjacency_matrix = np.full((n * m, n * m), inf)

# Define the 8 possible moves from any position (8-connected grid)
moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

# Populate the adjacency matrix
for i in range(n):
    for j in range(m):
        if city_map[i][j] != 'X':
            for dx, dy in moves:
                x, y = i + dx, j + dy
                if 0 <= x < n and 0 <= y < m and city_map[x][y] != 'X':
                    adjacency_matrix[i*m+j, x*m+y] = 1

# Step 3: Find Romeo's and Juliet's positions and calculate the shortest path from their homes
romeo_pos = None
juliet_pos = None

for i in range(n):
    for j in range(m):
        if city_map[i][j] == 'R':
            romeo_pos = i * m + j
        elif city_map[i][j] == 'J':
            juliet_pos = i * m + j

dist_romeo, _ = shortest_path(csgraph=csr_matrix(adjacency_matrix), directed=False,
                              indices=romeo_pos, return_predecessors=False)
dist_juliet, _ = shortest_path(csgraph=csr_matrix(adjacency_matrix), directed=False,
                               indices=juliet_pos, return_predecessors=False)

# Step 4: Determine the optimal meeting point
tmin = inf
meeting_point = (0, 0)

for i in range(n):
    for j in range(m):
        if city_map[i][j] == ' ':
            t = max(dist_romeo[i*m+j], dist_juliet[i*m+j])
            if t < tmin:
                tmin = t
                meeting_point = (i+1, j+1)  # Note the adjustment for 1-based indexing

# Step 5: Write the output data to rj.out
with open('rj.out', 'w') as file:
    file.write(f"{int(tmin)} {meeting_point[0]} {meeting_point[1]}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found, which means that the Python environment where the code was executed does not have the `numpy` library installed. Since the environment does not have `numpy` or possibly other libraries like `scipy`, the solution needs to be implemented without these libraries.

However, for this challenge, we need to ensure the solution is memory-efficient and does not exceed the memory limit of ~8MB. We'll have to implement a custom solution using standard Python libraries only.

Let's rewrite the entire solution without using `numpy` or `scipy`. We can use Breadth-First Search (BFS) to find the shortest path from Romeo and Juliet to all points on the map and then find the optimal meeting point. Here's the updated solution:

```python
from collections import deque

# Read input from rj.in
with open('rj.in') as file:
    n, m = map(int, file.readline().split())
    city_map = [list(file.readline().strip()) for _ in range(n)]

# Helper function for BFS traversal
def bfs(start):
    queue = deque([start])
    distances = [[None for _ in range(m)] for _ in range(n)]
    distances[start[0]][start[1]] = 0
    while queue:
        x, y = queue.popleft()
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and city_map[nx][ny] == ' ' and distances[nx][ny] is None:
                distances[nx][ny] = distances[x][y] + 1
                queue.append((nx, ny))
    return distances

# Find Romeo's and Juliet's starting positions and perform BFS
romeo_pos = juliet_pos = None
for i in range(n):
    for j in range(m):
        if city_map[i][j] == 'R':
            romeo_pos = (i, j)
        elif city_map[i][j] == 'J':
            juliet_pos = (i, j)

dist_romeo = bfs(romeo_pos)
dist_juliet = bfs(juliet_pos)

# Find the minimum meeting time and position
tmin = float('inf')
meeting_point = None

for i in range(n):
    for j in range(m):
        if city_map[i][j] == ' ' and dist_romeo[i][j] is not None and dist_juliet[i][j] is not None:
            max_dist = max(dist_romeo[i][j], dist_juliet[i][j])
            if max_dist < tmin:
                tmin = max_dist
                meeting_point = (i + 1, j + 1)

# Write output to rj.out
with open('rj.out', 'w') as file:
    file.write(f"{tmin} {meeting_point[0]} {meeting_point[1]}\n")
```

This code uses standard Python libraries and implements BFS to find the shortest path from Romeo and Juliet's locations. It then determines the optimal meeting point by iterating over each open space and selecting the one with the minimum maximum distance from both Romeo and Juliet. The results are written to `rj.out`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 26, in <module>
    if city_map[i][j] == 'R':
       ~~~~~~~~~~~^^^
IndexError: list index out of range

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
