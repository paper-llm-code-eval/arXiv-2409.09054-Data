---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `rj.in` and write to `rj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În ultima ecranizare a celebrei piese shakespeariene Romeo şi Julieta trăiesc într-un oraş modern, comunică prin e-mail şi chiar învaţă să programeze. Într-o secvenţă tulburătoare sunt prezentate frământările interioare ale celor doi eroi încercând fără succes să scrie un program care să determine un punct optim de întâlnire. 

Ei au analizat harta oraşului şi au reprezentat-o sub forma unei matrice cu $n$ linii şi $m$ coloane, în matrice fiind marcate cu spaţiu zonele prin care se poate trece (străzi lipsite de pericole) şi cu `X` zonele prin care nu se poate trece. De asemenea, în matrice au marcat cu `R` locul în care se află locuinţa lui Romeo, iar cu `J` locul în care se află locuinţa Julietei. 

Ei se pot deplasa numai prin zonele care sunt marcate cu spaţiu, din poziţia curentă în oricare dintre cele 8 poziţii învecinate (pe orizontală, verticală sau diagonale).

Cum lui Romeo nu îi place să aştepte şi nici să se lase aşteptat n-ar fi tocmai bine, ei au hotărât că trebuie să aleagă un punct de întâlnire în care atât Romeo, cât şi Julieta să poată ajunge în acelaşi timp, plecând de acasă. Fiindcă la întâlniri amândoi vin într-un suflet, ei estimează timpul necesar pentru a ajunge la întâlnire prin numărul de elemente din matrice care constituie drumul cel mai scurt de acasă până la punctul de întâlnire. Şi cum probabil există mai multe puncte de întâlnire posibile, ei vor să îl aleagă pe cel în care timpul necesar pentru a ajunge la punctul de întâlnire este minim.

# Cerință

Scrieţi un program care să determine o poziţie pe hartă la care Romeo şi Julieta pot să ajungă în acelaşi timp. Dacă există mai multe soluţii, programul trebuie să determine o soluţie pentru care timpul este minim.

# Date de intrare

Fişierul de intrare `rj.in` conţine:
* pe prima linie numerele naturale `N M`, care reprezintă numărul de linii şi respectiv de coloane ale matricei, separate prin spaţiu;
* pe fiecare dintre următoarele $N$ linii se află $M$ caractere (care pot fi doar `R`, `J`, `X` sau spaţiu) reprezentând matricea.

# Date de ieșire

Fişierul de ieşire `rj.out` va conţine o singură linie pe care sunt scrise trei numere naturale separate prin câte un spaţiu `tmin x y`, având semnificaţia:
* `x y` reprezinţă punctul de întâlnire ($x$ – numărul liniei, $y$ – numărul coloanei);
* `tmin` este timpul minim în care Romeo (respectiv Julieta) ajunge la punctul de întâlnire.

# Restricții și precizări

* $2 \leq N, M \leq 100$;
* Liniile şi coloanele matricei sunt numerotate începând cu 1.
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`rj.in`
```
5 8
XXR  XXX
 X  X  X
J X X  X
      XX
XXX XXXX
```

`rj.out`
```
4 4 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import dijkstra

# Read input file
with open('rj.in', 'r') as file:
    n, m = map(int, file.readline().split())
    city_map = [list(file.readline().strip()) for _ in range(n)]

city_array = np.array(city_map)
romeo_pos = tuple(np.argwhere(city_array == 'R')[0])
juliet_pos = tuple(np.argwhere(city_array == 'J')[0])

# Initialize the distances with a high number
distances = np.full((n, m), np.inf)

# Mark the obstacles and starting points
for i in range(n):
    for j in range(m):
        if city_array[i, j] == ' ' or city_array[i, j] in 'RJ':
            distances[i, j] = 0

# Create a graph represented as an adjacency matrix.
# This graph connects each walkable space to its 8 neighbor spaces if possible.
def make_graph(array):
    rows, cols = array.shape
    size = rows * cols
    graph = np.zeros((size, size))
    for r in range(rows):
        for c in range(cols):
            if array[r, c] not in ' X':
                idx = r * cols + c
                for dr in range(-1, 2):
                    for dc in range(-1, 2):
                        if 0 <= r + dr < rows and 0 <= c + dc < cols:
                            if array[r + dr, c + dc] == ' ':
                                neighbor_idx = (r + dr) * cols + (c + dc)
                                graph[idx, neighbor_idx] = 1
    return csr_matrix(graph)

# Create and run the shortest path algorithm (Dijkstra) on the graph for both Romeo and Juliet.
graph = make_graph(city_array)
romeo_distances = dijkstra(graph, indices=romeo_pos[0] * m + romeo_pos[1], return_predecessors=False)
juliet_distances = dijkstra(graph, indices=juliet_pos[0] * m + juliet_pos[1], return_predecessors=False)

# Reshape the romeo_distances and juliet_distances to match the format of the city_array
romeo_reshaped = romeo_distances.reshape(n, m)
juliet_reshaped = juliet_distances.reshape(n, m)

# Find the optimal meeting point
meeting_points = np.where((romeo_reshaped < np.inf) & (juliet_reshaped < np.inf) & (city_array == ' '), romeo_reshaped + juliet_reshaped, np.inf)
min_time = meeting_points.min()
meeting_point = np.argwhere(meeting_points == min_time)[0]

# Correct the indices to match the one-based indexing
meeting_point = meeting_point + 1

# Write output file
with open('rj.out', 'w') as file:
    file.write(f"{int(min_time)} {meeting_point[0]} {meeting_point[1]}\n")
```
```
---------- user ----------


Expected program to write result to `rj.out` and read from `rj.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import dijkstra

# Function to convert the city map into a graph
def city_to_graph(city_map, n, m):
    graph_size = n * m
    graph = np.zeros((graph_size, graph_size))
    for i in range(n):
        for j in range(m):
            if city_map[i][j] == ' ' or city_map[i][j] in 'RJ':
                index = i * m + j
                for di in range(-1, 2):
                    for dj in range(-1, 2):
                        if di == 0 and dj == 0:
                            continue
                        ni, nj = i + di, j + dj
                        if 0 <= ni < n and 0 <= nj < m and city_map[ni][nj] == ' ':
                            neighbor_index = ni * m + nj
                            graph[index, neighbor_index] = 1
    return csr_matrix(graph)

# Read the city map from the input file
with open('rj.in', 'r') as file:
    n, m = map(int, file.readline().split())
    city_map = [list(file.readline().strip()) for _ in range(n)]

# Find Romeo's and Juliet's positions
romeo_pos = [(i, j) for i in range(n) for j in range(m) if city_map[i][j] == 'R'][0]
juliet_pos = [(i, j) for i in range(n) for j in range(m) if city_map[i][j] == 'J'][0]

# Convert the city map into a graph
graph = city_to_graph(city_map, n, m)

# Run Dijkstra's algorithm to find the shortest path from Romeo and Juliet to all other points
romeo_distances = dijkstra(graph, indices=romeo_pos[0] * m + romeo_pos[1], return_predecessors=False)
juliet_distances = dijkstra(graph, indices=juliet_pos[0] * m + juliet_pos[1], return_predecessors=False)

# Find meeting points
meeting_points = (romeo_distances + juliet_distances).reshape((n, m))
possible_meetings = [(i, j) for i in range(n) for j in range(m) if city_map[i][j] == ' ']
min_meeting_point = min(possible_meetings, key=lambda x: meeting_points[x])

# Write the result to the output file
with open('rj.out', 'w') as file:
    min_time = meeting_points[min_meeting_point]
    x, y = min_meeting_point
    file.write(f"{int(min_time)} {x+1} {y+1}\n")
```
```
---------- user ----------


Expected program to write result to `rj.out` and read from `rj.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import dijkstra

# Function to convert the city map into a graph
def city_to_graph(city_map, n, m):
    graph_size = n * m
    graph = np.zeros((graph_size, graph_size))
    for i in range(n):
        for j in range(m):
            if city_map[i][j] == ' ' or city_map[i][j] in 'RJ':
                index = i * m + j
                for di in range(-1, 2):
                    for dj in range(-1, 2):
                        if di == 0 and dj == 0:
                            continue
                        ni, nj = i + di, j + dj
                        if 0 <= ni < n and 0 <= nj < m and city_map[ni][nj] == ' ':
                            neighbor_index = ni * m + nj
                            graph[index, neighbor_index] = 1
    return csr_matrix(graph)

# Read the city map from the input file
with open('rj.in', 'r') as file:
    n, m = map(int, file.readline().split())
    city_map = [list(file.readline().strip()) for _ in range(n)]

# Find Romeo's and Juliet's positions
romeo_pos = [(i, j) for i in range(n) for j in range(m) if city_map[i][j] == 'R'][0]
juliet_pos = [(i, j) for i in range(n) for j in range(m) if city_map[i][j] == 'J'][0]

# Convert the city map into a graph
graph = city_to_graph(city_map, n, m)

# Run Dijkstra's algorithm to find the shortest path from Romeo and Juliet to all other points
romeo_distances = dijkstra(graph, indices=romeo_pos[0] * m + romeo_pos[1], return_predecessors=False)
juliet_distances = dijkstra(graph, indices=juliet_pos[0] * m + juliet_pos[1], return_predecessors=False)

# Find the optimal meeting point
combined_distances = romeo_distances + juliet_distances
optimal_distance = np.inf
optimal_position = (-1, -1)

for i in range(n):
    for j in range(m):
        if city_map[i][j] == ' ':
            position_index = i * m + j
            distance = combined_distances[position_index]
            if distance < optimal_distance:
                optimal_distance = distance
                optimal_position = (i+1, j+1)

# Write the result to the output file
with open('rj.out', 'w') as file:
    file.write(f"{int(optimal_distance // 2)} {optimal_position[0]} {optimal_position[1]}\n")
```
```
---------- user ----------


Expected program to write result to `rj.out` and read from `rj.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import dijkstra

def load_data(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        grid = []
        for _ in range(n):
            grid.append(list(file.readline().strip()))
    return n, m, grid

def save_results(filename, tmin, x, y):
    with open(filename, 'w') as file:
        file.write(f"{tmin} {x} {y}\n")

def breadth_first_search(grid, start):
    n, m = len(grid), len(grid[0])
    dist = np.full((n, m), np.inf)
    queue = [start]
    dist[start] = 0
    while queue:
        x, y = queue.pop(0)
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == ' ' and dist[nx, ny] == np.inf:
                queue.append((nx, ny))
                dist[nx, ny] = dist[x, y] + 1
    return dist

def find_meeting_point(r_dist, j_dist):
    min_time = np.inf
    x, y = -1, -1
    n, m = r_dist.shape
    for i in range(n):
        for j in range(m):
            if (r_dist[i, j] < np.inf and j_dist[i, j] < np.inf and
                    max(r_dist[i, j], j_dist[i, j]) < min_time):
                min_time = max(r_dist[i, j], j_dist[i, j])
                x, y = i + 1, j + 1  # Convert to 1-based index
    return min_time, x, y

def main():
    n, m, grid = load_data('rj.in')
    r_pos = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 'R'][0]
    j_pos = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 'J'][0]
    
    r_dist = breadth_first_search(grid, r_pos)
    j_dist = breadth_first_search(grid, j_pos)
    
    tmin, x, y = find_meeting_point(r_dist, j_dist)
    save_results('rj.out', tmin, x, y)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `rj.out` and read from `rj.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
