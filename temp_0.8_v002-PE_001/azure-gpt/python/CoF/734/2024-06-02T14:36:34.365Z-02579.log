---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `rj.in` and write to `rj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În ultima ecranizare a celebrei piese shakespeariene Romeo şi Julieta trăiesc într-un oraş modern, comunică prin e-mail şi chiar învaţă să programeze. Într-o secvenţă tulburătoare sunt prezentate frământările interioare ale celor doi eroi încercând fără succes să scrie un program care să determine un punct optim de întâlnire. 

Ei au analizat harta oraşului şi au reprezentat-o sub forma unei matrice cu $n$ linii şi $m$ coloane, în matrice fiind marcate cu spaţiu zonele prin care se poate trece (străzi lipsite de pericole) şi cu `X` zonele prin care nu se poate trece. De asemenea, în matrice au marcat cu `R` locul în care se află locuinţa lui Romeo, iar cu `J` locul în care se află locuinţa Julietei. 

Ei se pot deplasa numai prin zonele care sunt marcate cu spaţiu, din poziţia curentă în oricare dintre cele 8 poziţii învecinate (pe orizontală, verticală sau diagonale).

Cum lui Romeo nu îi place să aştepte şi nici să se lase aşteptat n-ar fi tocmai bine, ei au hotărât că trebuie să aleagă un punct de întâlnire în care atât Romeo, cât şi Julieta să poată ajunge în acelaşi timp, plecând de acasă. Fiindcă la întâlniri amândoi vin într-un suflet, ei estimează timpul necesar pentru a ajunge la întâlnire prin numărul de elemente din matrice care constituie drumul cel mai scurt de acasă până la punctul de întâlnire. Şi cum probabil există mai multe puncte de întâlnire posibile, ei vor să îl aleagă pe cel în care timpul necesar pentru a ajunge la punctul de întâlnire este minim.

# Cerință

Scrieţi un program care să determine o poziţie pe hartă la care Romeo şi Julieta pot să ajungă în acelaşi timp. Dacă există mai multe soluţii, programul trebuie să determine o soluţie pentru care timpul este minim.

# Date de intrare

Fişierul de intrare `rj.in` conţine:
* pe prima linie numerele naturale `N M`, care reprezintă numărul de linii şi respectiv de coloane ale matricei, separate prin spaţiu;
* pe fiecare dintre următoarele $N$ linii se află $M$ caractere (care pot fi doar `R`, `J`, `X` sau spaţiu) reprezentând matricea.

# Date de ieșire

Fişierul de ieşire `rj.out` va conţine o singură linie pe care sunt scrise trei numere naturale separate prin câte un spaţiu `tmin x y`, având semnificaţia:
* `x y` reprezinţă punctul de întâlnire ($x$ – numărul liniei, $y$ – numărul coloanei);
* `tmin` este timpul minim în care Romeo (respectiv Julieta) ajunge la punctul de întâlnire.

# Restricții și precizări

* $2 \leq N, M \leq 100$;
* Liniile şi coloanele matricei sunt numerotate începând cu 1.
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`rj.in`
```
5 8
XXR  XXX
 X  X  X
J X X  X
      XX
XXX XXXX
```

`rj.out`
```
4 4 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure
from collections import deque

# Read the input file.
with open('rj.in', 'r') as file:
    n, m = map(int, file.readline().split())
    city_map = np.array([list(file.readline().strip()) for _ in range(n)])

# Find Romeo and Juliet's homes.
romeo = tuple(np.argwhere(city_map == 'R')[0])
juliet = tuple(np.argwhere(city_map == 'J')[0])

# Create movement structure for traversing (including diagonals).
structure = generate_binary_structure(2, 2)

# Generate binary matrix (passable or not).
passable = (city_map == ' ').astype(int)
labeled, num_features = label(passable, structure)

# Check if Romeo and Juliet are in the same area (they can meet).
if labeled[romeo] != labeled[juliet] or labeled[romeo] == 0:
    raise ValueError("No possible meeting point.")

# Breadth-first search function.
def bfs(start, passable, structure):
    visited = np.full_like(passable, False, dtype=bool)
    distances = np.full_like(passable, np.inf, dtype=int)
    queue = deque([start])
    visited[start] = True
    distances[start] = 0

    while queue:
        y, x = queue.popleft()
        for dy in range(-1, 2):
            for dx in range(-1, 2):
                if dy == 0 and dx == 0:
                    continue
                ny, nx = y + dy, x + dx
                if 0 <= ny < n and 0 <= nx < m and passable[ny, nx] and not visited[ny, nx]:
                    visited[ny, nx] = True
                    distances[ny, nx] = distances[y, x] + 1
                    queue.append((ny, nx))

    return distances

# Get the distances from Romeo and Juliet's homes to all other points.
dist_romeo = bfs(romeo, passable, structure)
dist_juliet = bfs(juliet, passable, structure)

# Find the minimum time and corresponding meeting point.
min_time = np.inf
meeting_point = None
for y in range(n):
    for x in range(m):
        if passable[y, x] and dist_romeo[y, x] == dist_juliet[y, x]:
            time = dist_romeo[y, x]
            if time < min_time:
                min_time = time
                meeting_point = (y + 1, x + 1)

# If there's no meeting point, exit.
if meeting_point is None:
    raise ValueError("No possible meeting point.")

# Write the output file.
with open('rj.out', 'w') as file:
    file.write(f"{min_time} {meeting_point[0]} {meeting_point[1]}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
