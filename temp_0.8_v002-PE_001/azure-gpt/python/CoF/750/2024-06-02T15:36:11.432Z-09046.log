---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `vraji.in` and write to `vraji.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La Școala de Vrăjitorie Hogswarts, Harry Potter și colegii săi își pun la încercare puterea vrăjilor cu ajutorul baghetelor magice. O vrajă constă în mutarea unuia sau a mai multor obiecte din încăperile școlii în "camera vrăjilor" unde se află adunați toți elevii.

Fiecare dintre cei $n$ "elevi vrăjitori" este înzestrat cu o anumită putere: dacă un elev are puterea $1$, cu o vrajă el aduce $1$ obiect, dacă puterea este $2$ cu o vrajă el va aduce $2$ obiecte, ..., pentru un elev cu puterea de valoare $p$, cu o vrajă el va aduce $p$ obiecte. Pe de altă parte, fiecare elev are o anumită rapiditate (viteză) de efectuare a vrăjilor. Astfel, pe parcursul unei ore, un elev cu viteza $1$ va reuși să facă o singură vrajă, un elev cu viteza $2$ va reuși două vrăji una după alta etc. Evident, un elev cu puterea $3$ și care are viteza $4$, va reuși să aducă până la sfârșitul orei $12$ obiecte ($3$ la prima vrajă, încă $3$ la a doua vrajă, încă $3$ la a treia vrajă și încă $3$ la ultima vrajă).

La sfârșitul orei de vrăjitorie, fiecare elev primește un număr de cutii pentru a ambala în ele numai obiectele aduse de el, astfel încât în fiecare dintre cutiile sale să se afle același număr de obiecte. Profesorul Dumbledore vrea în plus ca fiecare elev să primească același număr de cutii. O soluție simplă ar fi să distribuie fiecărui elev o singură cutie, însă el și-ar dori să distribuie cât mai multe cutii.

# Cerință

Cunoscând pentru fiecare dintre cei $n$ "elevi vrăjitori" ai școlii Hogswarts, puterea cu care este înzestrat și viteza cu care reușește să facă vrăjile, determinați:

1. cel mai mare număr de obiecte ce pot fi aduse până la sfârșitul orei de către un singur "elev vrăjitor";
2. care este numărul maxim de cutii pe care le va primi fiecare elev ținând cont de faptul că fiecare elev va trebui să își distribuie în mod egal obiectele sale în aceste cutii.

# Date de intrare


Din fișierul de intrare `vraji.in` se citește de pe prima linie numărul natural $n$, reprezentând numărul elevilor. De pe următoarele $n$ linii se citesc informațiile despre elevi, câte un elev pe o linie, sub forma a două numere separate prin spațiu, reprezentând puterea și viteza elevului.


# Date de ieșire


Fișierul de ieșire `vraji.out` va conține pe prima linie cel mai mare număr de obiecte ce pot fi aduse în "camera vrăjilor" de către un singur "elev vrăjitor" la sfârșitul orei. Pe cea de-a doua linie va fi scris cel mai mare număr de cutii pe care îl poate primi fiecare elev respectând condițiile din problemă.

# Restricții și precizări

* Numărul $n$ al elevilor, puterea și viteza fiecăruia sunt numere naturale mai mari decât $0$ și mai mici sau egale cu $100$.
* Fiecare cutie va conține numai obiecte ale unui singur "elev vrăjitor".
* Fiecare elev va primi același număr de cutii.

---

Example:
`vraji.in`
```
5
5 2
6 4
3 10
20 2
7 2
```

`vraji.out`
```
40
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Open the input file and read the number of wizards and their powers and speeds
with open('vraji.in') as f:
    n = int(next(f).strip())
    powers_speeds = np.array([list(map(int, line.split())) for line in f], dtype=int)

# Calculate the total number of objects each wizard can bring by multiplying powers and speeds
total_objects_by_wizard = powers_speeds[:, 0] * powers_speeds[:, 1]

# Write the maximum number of objects one wizard can bring
with open('vraji.out', 'w') as f:
    f.write(f"{total_objects_by_wizard.max()}\n")

    # Calculate the greatest common divisor for all wizards' totals
    gcd_of_totals = np.gcd.reduce(total_objects_by_wizard)

    # Calculate the number of boxes by dividing any wizard's total by the GCD
    # (since all totals are multiples of the GCD, the result will be the same)
    num_boxes = total_objects_by_wizard[0] // gcd_of_totals

    f.write(f"{num_boxes}\n")
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the number of wizards and their powers and speeds from 'vraji.in'
with open('vraji.in', 'r') as fin:
    n = int(fin.readline().strip())
    wizard_data = np.loadtxt(fin, dtype=int, max_rows=n)

# Calculate the total number of objects each wizard can bring
total_objects = wizard_data[:, 0] * wizard_data[:, 1]

# Determine the maximum number of objects that can be brought by a single wizard
max_objects = np.amax(total_objects)

# Find the greatest common divisor of all the total objects
gcd_total_objects = np.gcd.reduce(total_objects)

# Calculate the maximum number of boxes per wizard
max_boxes = gcd_total_objects

# Write the results to 'vraji.out'
with open('vraji.out', 'w') as fout:
    fout.write(f"{max_objects}\n{max_boxes}\n")
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently calculate the greatest common divisor for an array
def calculate_gcd(arr):
    gcd = np.gcd(arr[0], arr[1])
    for i in range(2, len(arr)):
        gcd = np.gcd(gcd, arr[i])
    return gcd

# Read the number of wizards and their powers and speeds from 'vraji.in'
with open('vraji.in', 'r') as fin:
    n = int(fin.readline().strip())
    powers = np.empty(n, dtype=int)
    speeds = np.empty(n, dtype=int)

    for i in range(n):
        powers[i], speeds[i] = map(int, fin.readline().split())

# Calculate the total number of objects each wizard can bring
total_objects = powers * speeds

# Determine the maximum number of objects that can be brought by a single wizard
max_objects = np.max(total_objects)

# Find the greatest common divisor of all the total objects
gcd_total_objects = calculate_gcd(total_objects)

# Calculate the maximum number of boxes per wizard
# It is the min number of objects divided by gcd_total_objects
max_boxes = min(total_objects) // gcd_total_objects

# Write the results to 'vraji.out'
with open('vraji.out', 'w') as fout:
    fout.write(f"{max_objects}\n{max_boxes}\n")
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently calculate the greatest common divisor for an array
def calculate_gcd(arr):
    gcd = arr[0]
    for val in arr:
        gcd = np.gcd(gcd, val)
    return gcd

# Read the number of wizards and their powers and speeds from 'vraji.in'
with open('vraji.in', 'r') as fin:
    n = int(fin.readline().strip())
    powers = np.empty(n, dtype=int)
    speeds = np.empty(n, dtype=int)

    for i in range(n):
        powers[i], speeds[i] = map(int, fin.readline().split())

# Calculate the total number of objects each wizard can bring
total_objects = powers * speeds

# Determine the maximum number of objects that can be brought by a single wizard
max_objects = total_objects.max()

# Find the greatest common divisor of all the total objects
gcd_total_objects = calculate_gcd(total_objects)

# Calculate the maximum number of boxes per wizard
# It is the gcd of total objects since all totals must be a multiple of the box count
max_boxes = gcd_total_objects

# Write the results to 'vraji.out'
with open('vraji.out', 'w') as fout:
    fout.write(f"{max_objects}\n{max_boxes}\n")
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Required libraries
import numpy as np
from math import gcd
from functools import reduce

# Function to read data from file
def read_data(file_name):
    with open(file_name, 'r') as file:
        n = int(file.readline().strip())
        powers_speeds = [tuple(map(int, line.strip().split())) for line in file]
    return n, np.array(powers_speeds, dtype=int)

# Function to write data to file
def write_data(file_name, max_objects, max_boxes):
    with open(file_name, 'w') as file:
        file.writelines([str(max_objects), '\n', str(max_boxes)])

# Function to calculate the greatest common divisor across an array
def calculate_gcd(arr):
    return reduce(gcd, arr)

# Main logic
def main():
    n, powers_speeds = read_data('vraji.in')
    total_objects_by_wizard = powers_speeds[:, 0] * powers_speeds[:, 1]
    max_objects = np.max(total_objects_by_wizard)
    gcd_of_totals = calculate_gcd(total_objects_by_wizard)
    num_boxes = total_objects_by_wizard[0] // gcd_of_totals
    write_data('vraji.out', max_objects, num_boxes)

# Execute the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from math import gcd
from functools import reduce

# Read data from file vraji.in
with open('vraji.in', 'r') as file:
    n = int(file.readline().strip())
    wizards = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Calculate the total number of objects each wizard can bring
total_objects = wizards[:, 0] * wizards[:, 1]

# Find the maximum number of objects any single wizard can bring
max_objects = np.max(total_objects)

# Find the greatest common divisor of all wizards' total objects
gcd_total_objects = reduce(gcd, total_objects)

# Find the maximum number of boxes each wizard can get
# This is the minimum total number of objects brought by any wizard divided by the gcd
max_boxes = np.min(total_objects) // gcd_total_objects

# Write data to file vraji.out
with open('vraji.out', 'w') as file:
    file.write(f"{max_objects}\n{max_boxes}\n")
```
```
---------- user ----------


Expected program to write result to `vraji.out` and read from `vraji.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from math import gcd
from functools import reduce

# Read data from file 'vraji.in'
with open('vraji.in', 'r') as file:
    n = int(file.readline().strip())
    wizard_data = np.array([tuple(map(int, file.readline().split())) for _ in range(n)])

# Calculate the total number of objects each wizard can bring (power * speed)
total_objects = wizard_data[:, 0] * wizard_data[:, 1]

# Find the maximum number of objects that can be brought by a single wizard
max_objects = total_objects.max()

# Calculate the gcd of total_objects to determine the number of boxes per wizard
boxes_gcd = reduce(gcd, total_objects)

# Write results to file 'vraji.out'
with open('vraji.out', 'w') as file:
    file.write(f"{max_objects}\n{boxes_gcd}\n")
```
```
