---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `triunghi.in` and write to `triunghi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $A$ un tablou bidimensional cu $n$ linii, $n$ coloane și elemente numere naturale. O zonă triunghiulară a tabloului, reprezentată de tripletul ($lin, col, k$), este o zonă de forma unui triunghi dreptunghic cu catetele de lungime egală cu |k|, definită astfel:

Pentru $k > 0$, zona este compusă din $k$ linii:
* pe prima linie a zonei se află elementele $A[lin][col], A[lin][col+1], \dots, A[lin][col+k-1]$;
* pe a doua linie a zonei se află elementele $A[lin+1][col], A[lin+1][col+1], \dots, A[lin+1][col+k-2]$;
* pe a treia linie a zonei se află elementele $A[lin+2][col], A[lin+2][col+1], \dots, A[lin+2][col+k-3]$;
* $\dots$;
* pe ultima linie a zonei se află elementul A[lin+k-1][col].

Pentru k<0, zona este compusă din |k|=-k linii:
* pe prima linie a zonei se află elementul $A[lin-|k|+1][col]$;
* pe a doua linie a zonei se află elementele $A[lin-|k|+2][col-1], A[lin-|k|+2][col]$;
* $\dots$;
* pe ultima linie a zonei se află elementele $A[lin][col-|k|+1], A[lin][col-|k|+2], \dots, A[lin][col]$.

Suma elementelor ce compun o zonă triunghiulară se numește suma zonei.

# Cerință

Scrieţi un program care, cunoscând tabloul $A$ şi $Q$ zone triunghiulare, determină cea mai mare dintre sumele zonelor.

# Date de intrare


Fișierul de intrare `triunghi.in` conține pe prima linie numărul natural $n$, cu semnificaţia din enunţ. Pe următoarele $n$ linii se găsesc câte $n$ valori naturale, reprezentând elementele tabloului $A$. Pe linia $n + 2$ se află numărul natural $Q$, reprezentând numărul zonelor triunghiulare. Pe următoarele $Q$ linii se găsesc tripletele de valori $lin \ col \ k$, care reprezintă cele $Q$ zone, în forma descrisă în enunţ. Valorile aflate pe aceeaşi linie a fişierului sunt separate prin câte un spațiu.


# Date de ieșire


Fișierul de ieșire `triunghi.out` va conține o singură linie pe care va fi scris un număr natural reprezentând suma maximă cerută.


# Restricții și precizări

* $3 \leq n \leq 1 \ 000$; $1 \leq Q \leq 100 \ 000$; $2 \leq |k| \leq n$;
* Valorile din tablou sunt numere naturale din intervalul [$1, 100$].
* Liniile şi coloanele tabloului $A$ sunt numerotate de la $1$ la $n$ (liniile de sus în jos, iar coloanele de la stânga la dreapta).
* $|k|$ reprezintă modulul numărului $k$ ($k$, pentru $k \geq 0$, respectiv $-k$, pentru $k < 0$).
* Se garantează că orice zonă triunghiulară dintre cele $Q$ este complet inclusă în tabloul $A$.

---

Example:
`triunghi.in`
```
6
5 8 10 4 9 4
2 10 10 2 4 8
8 10 3 4 6 6
4 6 9 7 1 9
6 7 2 2 10 6
10 4 6 1 10 4
3
4 1 3
4 4 -4
6 5 -2
```

`triunghi.out`
```
59
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input data
with open('triunghi.in', 'r') as f:
    n = int(f.readline().strip())
    A = np.array([list(map(int, f.readline().split())) for _ in range(n)], dtype=np.int32)
    Q = int(f.readline().strip())
    queries = [tuple(map(int, f.readline().split())) for _ in range(Q)]

# Helper function to calculate the sum of the positive triangle zone
def sum_positive_triangle(A, lin, col, k):
    return sum(A[lin:lin+k, col:col+k] - np.triu(A[lin:lin+k, col:col+k], k=1))

# Helper function to calculate the sum of the negative triangle zone
def sum_negative_triangle(A, lin, col, k):
    k = -k
    return sum(A[lin-k+1:lin+1, col-k+1:col+1][np.tril_indices(k)])

# Main processing
max_sum = 0
for lin, col, k in queries:
    lin -= 1
    col -= 1
    if k > 0:
        current_sum = sum_positive_triangle(A, lin, col, k)
    else:
        current_sum = sum_negative_triangle(A, lin, col, k)

    max_sum = max(max_sum, current_sum)

# Write output data
with open('triunghi.out', 'w') as f:
    f.write(str(max_sum) + '\n')
```

This solution uses NumPy for its efficient array operations and arithmetic, which helps to keep it both time- and memory-efficient. It reads and writes to the specified files directly, as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the NumPy library is not available in the execution environment. Given this limitation and the memory constraints for the problem, we need to implement a solution that doesn't depend on any external libraries.

Here is an updated version of the solution without using NumPy:

```python
# Define function to calculate sum of positive triangle zone
def sum_positive_triangle(A, lin, col, k):
    total_sum = 0
    for i in range(k):
        total_sum += sum(A[lin+i][col:col+k-i])
    return total_sum

# Define function to calculate sum of negative triangle zone
def sum_negative_triangle(A, lin, col, k):
    k = -k
    total_sum = 0
    for i in range(k):
        total_sum += sum(A[lin-k+i+1][col-i:col+1])
    return total_sum

# Read input data
with open('triunghi.in', 'r') as f:
    n = int(f.readline().strip())
    A = [list(map(int, f.readline().split())) for _ in range(n)]
    Q = int(f.readline().strip())
    queries = [tuple(map(int, f.readline().split())) for _ in range(Q)]

# Process queries
max_sum = 0
for lin, col, k in queries:
    lin -= 1
    col -= 1
    if k > 0:
        current_sum = sum_positive_triangle(A, lin, col, k)
    else:
        current_sum = sum_negative_triangle(A, lin, col, k)
    max_sum = max(max_sum, current_sum)

# Write output data
with open('triunghi.out', 'w') as f:
    f.write(str(max_sum) + '\n')
```

This version performs the required calculations using plain Python lists and the built-in `sum()` function, which should be memory-efficient and not exceed the memory limit. It follows the original logic but without the reliance on NumPy.
