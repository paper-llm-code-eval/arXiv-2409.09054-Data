---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block
import numpy as np

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

def calculate_duration(H1, M1, H2, M2, reverse=False):
    if reverse:
        H1, M1, H2, M2 = H2, M2, H1, M1
    start_minutes = H1 * 60 + M1
    end_minutes = H2 * 60 + M2
    if start_minutes > end_minutes:
        end_minutes += 24 * 60  # Add one day in minutes if flight ends next day
    duration = end_minutes - start_minutes
    return duration // 60, duration % 60  # Return hours and minutes

# Read the input file
with open('aeriana.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())
    flights = [list(map(int, file.readline().split())) for _ in range(N)]

# Compute the maximum duration before and after the intervention of the virus
max_duration_before = max_duration_after = 0
for A1, A2, H1, M1, H2, M2 in flights:
    # Calculate the flight duration before the virus intervention
    hours_before, minutes_before = calculate_duration(H1, M1, H2, M2)
    duration_before = hours_before * 60 + minutes_before
    max_duration_before = max(max_duration_before, duration_before)

    if is_prime(A1) and A2 % sum_of_digits(A1) == 0:
        # Calculate the flight duration after the virus intervention for special flights
        hours_after, minutes_after = calculate_duration(H1, M1, H2, M2, reverse=True)
    else:
        hours_after, minutes_after = hours_before, minutes_before
    duration_after = hours_after * 60 + minutes_after
    max_duration_after = max(max_duration_after, duration_after)

# Write the output file
with open('aeriana.out', 'w') as file:
    if C == 1:
        # If the requirement is to find the maximum duration before the virus
        file.write(f"{max_duration_before // 60} {max_duration_before % 60}\n")
    elif C == 2:
        # If the requirement is to find the maximum duration after the virus
        file.write(f"{max_duration_after // 60} {max_duration_after % 60}\n")
```

This python code block implements a solution to the problem. The algorithm reads data from `aeriana.in`, computes the maximum flight duration before and after the virus intervention, and writes the result to `aeriana.out`. All operations are done using functions that are optimized for avoiding unnecessary memory usage, and the code should respect the memory limit provided.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the program exited with an error due to an attempt to import the NumPy library, which is not available. Given the memory constraints of the problem and the error message, we don't actually need NumPy for this task, as Python's built-in functions are sufficient to handle the computations. 

Here's the rewritten solution without using NumPy:

```python
# markdown code block
def is_prime(n):
    if n <= 1:
        return False
    if n < 4:
        return True
    if n % 2 == 0:
        return False
    p = 3
    while p * p <= n:
        if n % p == 0:
            return False
        p += 2
    return True

def sum_of_digits(n):
    return sum(map(int, str(n)))

def calc_duration(h1, m1, h2, m2, reverse=False):
    if reverse:
        h1, m1, h2, m2 = h2, m2, h1, m1
    start = h1 * 60 + m1
    end = h2 * 60 + m2
    if start > end:
        end += 1440  # add 24 * 60 minutes for next day
    duration = end - start
    return duration // 60, duration % 60

# Read the input file
with open('aeriana.in', 'r') as fin:
    C = int(fin.readline().strip())
    N = int(fin.readline().strip())

    max_duration_before = 0
    max_duration_after = 0

    for _ in range(N):
        A1, A2, H1, M1, H2, M2 = map(int, fin.readline().split())
        before = calc_duration(H1, M1, H2, M2)
        duration_before = before[0] * 60 + before[1]
        
        if is_prime(A1) and A2 % sum_of_digits(A1) == 0:
            after = calc_duration(H1, M1, H2, M2, reverse=True)
        else:
            after = before
        duration_after = after[0] * 60 + after[1]

        max_duration_before = max(max_duration_before, duration_before)
        max_duration_after = max(max_duration_after, duration_after)

# Write the output file
with open('aeriana.out', 'w') as fout:
    if C == 1:
        fout.write(f"{max_duration_before // 60} {max_duration_before % 60}\n")
    elif C == 2:
        fout.write(f"{max_duration_after // 60} {max_duration_after % 60}\n")
```

This modified solution removes the dependency on NumPy and should work within the constraints provided. It calculates the durations before and after the virus intervention and writes the specified maximum durations to the output file.
