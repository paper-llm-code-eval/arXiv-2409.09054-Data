---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to check if the number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to calculate the sum of digits
def sum_of_digits(n):
    return sum(map(int, str(n)))

# Function to calculate the duration of the flight
def calculate_duration(H1, M1, H2, M2, invert=False):
    start_minutes = H1 * 60 + M1
    end_minutes = H2 * 60 + M2
    if invert:
        end_minutes += 24 * 60  # add 24 hours if inverted
    duration_minutes = end_minutes - start_minutes
    if duration_minutes < 0:
        duration_minutes += 24 * 60
    return divmod(duration_minutes, 60)  # returns (hours, minutes)

# Function to read input data, process it and write output data
def solve_challenge():
    # Read input data
    with open('aeriana.in', 'r') as file:
        C = int(file.readline().strip())
        N = int(file.readline().strip())
        flights = [list(map(int, file.readline().split())) for _ in range(N)]
    
    # Process data according to the challenge
    max_duration_pre_virus = 0
    max_duration_post_virus = 0
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        duration_pre_virus = calculate_duration(H1, M1, H2, M2)
        duration_pre_virus_minutes = duration_pre_virus[0] * 60 + duration_pre_virus[1]
        max_duration_pre_virus = max(max_duration_pre_virus, duration_pre_virus_minutes)
        
        # Check if the virus would invert the flight's time
        is_special = is_prime(A1) and (A2 % sum_of_digits(A1) == 0)
        if is_special:
            duration_post_virus = calculate_duration(H2, M2, H1, M1, invert=True)
        else:
            duration_post_virus = duration_pre_virus
        
        duration_post_virus_minutes = duration_post_virus[0] * 60 + duration_post_virus[1]
        max_duration_post_virus = max(max_duration_post_virus, duration_post_virus_minutes)
    
    # Write output data
    if C == 1:
        max_hours, max_minutes = divmod(max_duration_pre_virus, 60)
    else:  # C == 2
        max_hours, max_minutes = divmod(max_duration_post_virus, 60)
    
    with open('aeriana.out', 'w') as file:
        file.write(f"{max_hours} {max_minutes}\n")

# Execute the function to solve the challenge
solve_challenge()
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
