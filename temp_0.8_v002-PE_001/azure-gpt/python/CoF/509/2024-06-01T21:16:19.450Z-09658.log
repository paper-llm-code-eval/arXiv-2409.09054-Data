---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def sum_of_digits(num):
    return sum(int(digit) for digit in str(num))

def duration_in_minutes(h1, m1, h2, m2):
    return (h2 - h1) * 60 + (m2 - m1) if h2 >= h1 else (h2 + 24 - h1) * 60 + (m2 - m1)

def main():
    with open('aeriana.in', 'r') as fin:
        lines = fin.readlines()
        C = int(lines[0].strip())
        N = int(lines[1].strip())
        flights = np.array([list(map(int, line.split())) for line in lines[2:]], dtype=np.int32)

    max_duration_before = 0
    max_duration_after = 0
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        current_duration = duration_in_minutes(H1, M1, H2, M2)
        max_duration_before = max(max_duration_before, current_duration)
        if is_prime(A1) and A2 % sum_of_digits(A1) == 0:
            current_duration = duration_in_minutes(H2, M2, H1, M1)
        max_duration_after = max(max_duration_after, current_duration)
    
    max_hours_before, max_minutes_before = divmod(max_duration_before, 60)
    max_hours_after, max_minutes_after = divmod(max_duration_after, 60)
    
    with open('aeriana.out', 'w') as fout:
        if C == 1:
            fout.write(f"{max_hours_before} {max_minutes_before}\n")
        elif C == 2:
            fout.write(f"{max_hours_after} {max_minutes_after}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(np.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def sum_of_digits(num):
    s = 0
    while num:
        s, num = s + num % 10, num // 10
    return s

def duration_in_minutes(h1, m1, h2, m2):
    if h2 < h1 or (h2 == h1 and m2 < m1):
        h2 += 24
    return (h2 - h1) * 60 + (m2 - m1)

def main():
    with open('aeriana.in', 'r') as fin:
        C = int(fin.readline())
        N = int(fin.readline())
        max_duration_before = 0
        max_duration_after = 0
        for _ in range(N):
            A1, A2, H1, M1, H2, M2 = map(int, fin.readline().split())
            normal_duration = duration_in_minutes(H1, M1, H2, M2)
            max_duration_before = max(max_duration_before, normal_duration)
            if is_prime(A1) and A2 % sum_of_digits(A1) == 0:
                special_duration = duration_in_minutes(H2, M2, H1, M1)
                max_duration_after = max(max_duration_after, special_duration)
            else:
                max_duration_after = max(max_duration_after, normal_duration)
                
        max_hours_before, max_minutes_before = divmod(max_duration_before, 60)
        max_hours_after, max_minutes_after = divmod(max_duration_after, 60)
        
        with open('aeriana.out', 'w') as fout:
            if C == 1:
                fout.write(f"{max_hours_before} {max_minutes_before}\n")
            elif C == 2:
                fout.write(f"{max_hours_after} {max_minutes_after}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def sum_of_digits(n):
    return sum(int(digit) for digit in str(n))

def compute_duration(h1, m1, h2, m2, swap=False):
    if swap:
        h1, m1, h2, m2 = h2, m2, h1, m1
    duration = (h2 - h1) * 60 + m2 - m1
    if duration < 0:
        duration += 24 * 60
    return duration

def flights_duration(flights, task):
    max_duration = 0
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        duration = compute_duration(H1, M1, H2, M2)
        if task == 2 and is_prime(A1) and A2 % sum_of_digits(A1) == 0:
            duration = max(duration, compute_duration(H1, M1, H2, M2, swap=True))
        max_duration = max(max_duration, duration)
    return max_duration // 60, max_duration % 60

def main():
    with open('aeriana.in', 'r') as file:
        task = int(file.readline().strip())
        n = int(file.readline().strip())
        flights = [list(map(int, file.readline().strip().split())) for _ in range(n)]

    hours, minutes = flights_duration(flights, task)
    
    with open('aeriana.out', 'w') as file:
        file.write(f"{hours} {minutes}\n")

main()
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing only sqrt from math as it's the only function we need.
from math import sqrt

# Define the helper functions as provided in the previous solution.

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def sum_of_digits(n):
    result = 0
    while n > 0:
        result += n % 10
        n //= 10
    return result

def compute_duration(h1, m1, h2, m2):
    minutes = (h2 - h1) * 60 + m2 - m1
    if minutes < 0:
        minutes += 1440  # Add 24 hours in minutes if the duration is negative
    return minutes

def find_max_duration(flights):
    max_duration_before = 0
    max_duration_after = 0
    
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        # Compute duration before virus interference.
        duration_before = compute_duration(H1, M1, H2, M2)
        max_duration_before = max(max_duration_before, duration_before)

        # Check if the flight is special and compute duration after virus interference.
        if is_prime(A1) and A2 % sum_of_digits(A1) == 0:
            duration_after = compute_duration(H2, M2, H1, M1)
        else:
            duration_after = duration_before
        
        max_duration_after = max(max_duration_after, duration_after)

    return max_duration_before, max_duration_after

# Read data from 'aeriana.in'.
with open('aeriana.in', 'r') as file:
    task, n = map(int, file.readline().split())
    flights = [list(map(int, file.readline().split())) for _ in range(n)]

# Process the flights data.
max_duration_before, max_duration_after = find_max_duration(flights)

# Write the appropriate result to 'aeriana.out'.
with open('aeriana.out', 'w') as file:
    if task == 1:
        file.write(f"{max_duration_before // 60} {max_duration_before % 60}\n")
    else:
        file.write(f"{max_duration_after // 60} {max_duration_after % 60}\n")
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def sum_digits(n):
    return sum(int(digit) for digit in str(n))

def duration(h1, m1, h2, m2):
    start_minutes = h1 * 60 + m1
    end_minutes = h2 * 60 + m2
    if end_minutes < start_minutes:
        end_minutes += 24 * 60  # add 24h in minutes if flight ends next day
    return end_minutes - start_minutes

def max_flight_duration(flights, original=True):
    max_duration = 0
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        if original or (is_prime(A1) and A2 % sum_digits(A1) == 0):
            flight_duration = duration(H2, M2, H1, M1) if original else duration(H1, M1, H2, M2)
            max_duration = max(max_duration, flight_duration)
    return max_duration

# Read from 'aeriana.in'
with open('aeriana.in', 'r') as file:
    C = int(file.readline())
    N = int(file.readline())
    flights = [list(map(int, file.readline().split())) for _ in range(N)]

max_duration_before = max_flight_duration(flights, original=True)
max_duration_after = max_flight_duration(flights, original=False) if C == 2 else max_duration_before

max_hours = max_duration_after // 60
max_minutes = max_duration_after % 60

# Write to 'aeriana.out'
with open('aeriana.out', 'w') as file:
    file.write(f'{max_hours} {max_minutes}\n')
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if a number is prime (excluding 0 and 1)
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

# Function to calculate the sum of digits of a number
def digit_sum(n):
    return np.sum([int(d) for d in str(n)])

# Function to calculate the flight duration in minutes
def flight_duration(h1, m1, h2, m2, reverse=False):
    start = h1 * 60 + m1
    end = h2 * 60 + m2
    if reverse:  # If the flight is special and times are swapped
        start, end = end, start
    if end < start:  # Flight ends the next day
        end += 24 * 60
    return end - start

# Read input data from 'aeriana.in'
with open('aeriana.in', 'r') as file:
    c = int(file.readline().strip())
    n = int(file.readline().strip())
    flights = [list(map(int, file.readline().split())) for _ in range(n)]

# Calculate the maximum flight duration before and after the virus attack
max_duration_before, max_duration_after = 0, 0
for flight in flights:
    A1, A2, H1, M1, H2, M2 = flight
    normal_duration = flight_duration(H1, M1, H2, M2)
    max_duration_before = max(max_duration_before, normal_duration)
    if is_prime(A1) and A2 % digit_sum(A1) == 0:
        special_duration = flight_duration(H1, M1, H2, M2, reverse=True)
        max_duration_after = max(max_duration_after, special_duration)
    else:
        max_duration_after = max(max_duration_after, normal_duration)

# Depending on the task, write out the correct maximum duration
result = max_duration_after if c == 2 else max_duration_before
hours, minutes = divmod(result, 60)

# Write output data to 'aeriana.out'
with open('aeriana.out', 'w') as file:
    file.write(f'{hours} {minutes}\n')
```
```
---------- user ----------


Expected program to write result to `aeriana.out` and read from `aeriana.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_prime(num):
    """Check if a number is prime."""
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def sum_of_digits(num):
    """Return the sum of the digits of a number."""
    return sum(int(digit) for digit in str(num))

def calculate_duration(h1, m1, h2, m2):
    """Calculate the duration of the flight."""
    departure = h1 * 60 + m1
    arrival = h2 * 60 + m2
    if arrival < departure:
        arrival += 24 * 60  # next day
    return arrival - departure

def get_max_duration(flights, invert_special_flights=False):
    """Get the maximum duration of flights."""
    max_duration = 0
    for flight in flights:
        A1, A2, H1, M1, H2, M2 = flight
        if invert_special_flights and is_prime(A1) and A2 % sum_of_digits(A1) == 0:
            # Special flight: invert the times
            duration = calculate_duration(H2, M2, H1, M1)
        else:
            duration = calculate_duration(H1, M1, H2, M2)
        max_duration = max(max_duration, duration)
    return max_duration

# Read the input file
with open('aeriana.in', 'r') as file:
    C = int(file.readline())
    N = int(file.readline())
    flights = [list(map(int, file.readline().split())) for _ in range(N)]

# Process the flights data
if C == 1:
    max_duration = get_max_duration(flights)
else:
    max_duration = get_max_duration(flights, invert_special_flights=True)

# Convert duration to hours and minutes
max_hours, max_minutes = divmod(max_duration, 60)

# Write the output file
with open('aeriana.out', 'w') as file:
    file.write(f"{max_hours} {max_minutes}\n")
```
```
