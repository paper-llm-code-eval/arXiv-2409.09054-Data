---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `litere.in` and write to `litere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Algorel a primit un joc care conține $n$ jetoane pe care sunt scrise litere mari ale alfabetului. Fiecare literă are asociat un cod format dintr-o singură cifră nenulă. Jetoanele se așează în ordinea dată inițial, iar prin citirea literelor de pe acestea, de la primul la ultimul jeton, se formează un cuvânt. Dacă se citesc numerele de pe fiecare jeton, începând de la primul la ultimul, se obține un număr $k_1$. Jocul continuă la fel, dar se așează jetoanele începând de la al doilea la ultimul, obținându-se un nou număr $k_2$. Apoi, se așează jetoanele începând de la al treilea la ultimul, obținându-se un nou număr $k_3$, ș.a.m.d. până se ajunge la așezarea doar a ultimului jeton, caz în care se obține numărul $k_n$.

# Cerință

Scrieți un program care citește numărul $n$ de jetoane, cele $n$ litere asociate jetoanelor, precum și codurile asociate literelor, în ordinea apariției lor și afișează:

* numărul de perechi de litere consecutive din cuvântul inițial care au proprietatea că o literă este vocală și cealaltă este consoană (ordinea lor nu contează);
* numărul $k_1$, format din așezarea inițială a jetoanelor;
* suma $k_1 + k_2 + \dots + k_n$.



# Date de intrare

Fișierul de intrare `litere.in` va conține pe prima linie valoarea lui $n$, reprezentând numărul de jetoane, pe a doua linie un cuvânt format din $n$ litere mari (de la `A` la `Z`); literele sunt scrise una după alta, fără să fie separate cu spații, astfel încât prima literă este cea aflată pe primul jeton, a doua literă pe al doilea jeton ș.a.m.d. Pe a treia linie din fișier se află un număr $m$ ce reprezintă numărul de litere distincte, iar pe a patra linie $m$ valori reprezentând codurile literelor distincte ce apar în cuvânt. Codurile sunt date în ordinea apariției literelor în cuvânt și sunt numere naturale nenule formate dintr-o singură cifră, separate printr-un spațiu, pentru fiecare literă codul fiind dat o singură dată, chiar dacă litera se repetă.

# Date de ieșire

Fișierul de ieșire `litere.out` va conține pe prima linie numărul de perechi de litere consecutive din cuvânt care au proprietatea că o literă este vocală și cealaltă consoană (ordinea lor nu contează), pe a doua linie numărul $k_1$, (format din așezarea inițială a jetoanelor), iar pe a treia linie suma $k_1 + k_2 + \dots + k_n$.

# Restricții și precizări

* $0 < n \leq 10 \ 000$;
* $0 < m < 27$;
* Se acordă punctaje parțiale astfel:
	- $20$% pentru afișarea valorii corecte pe prima linie din fișierul rezultat (cerința $1$);
	- $40$% pentru afișarea valorii corecte pe a doua linie din fișierul rezultat (cerința $2$);
	- $40$% pentru afișarea valorii corecte pe a treia linie din fișierul rezultat (cerința $3$).

---

Example:
`litere.in`
```
3
CSC
2
1 2
```

`litere.out`
```
0
121
143
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Helper function to calculate the sum of all shifted numbers k1, k2, ..., kn
def calculate_k_sum(codes, n):
    pow_10_vec = np.power(10, np.arange(n - 1, -1, -1), dtype=np.uint64)
    k1 = np.sum(codes * pow_10_vec, dtype=np.uint64)
    # Calculate the sum using the formula for the sum of a geometric series
    multiplier = np.full(n, 10, dtype=np.uint64) - 1
    k_sum = k1 * (np.power(10, n, dtype=np.uint64) - 1) // 9
    k_sum -= np.sum(codes * multiplier * pow_10_vec, dtype=np.uint64)
    return k1, k_sum

# Helper function to count vowel-consonant pairs
def count_vc_pairs(word):
    vowels = set('AEIOU')
    count = 0
    for i in range(len(word) - 1):
        # Check if one is a vowel and the other is a consonant
        if (word[i] in vowels) != (word[i + 1] in vowels):
            count += 1
    return count

# Read input from file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = np.array(list(file.readline().strip()), dtype='U1')
    m = int(file.readline().strip())
    codes_str = file.readline().split()
    
    # Create a dictionary to map letters to their codes
    letter_codes = {word[i]: int(codes_str[i]) for i in range(m)}
    # Map the word to its corresponding codes
    codes = np.array([letter_codes[letter] for letter in word], dtype=np.uint8)

# Process the data
vc_pairs = count_vc_pairs(word)
k1, k_sum = calculate_k_sum(codes, n)

# Write output to file
with open('litere.out', 'w') as file:
    file.writelines([f"{vc_pairs}\n", f"{k1}\n", f"{k_sum}\n"])
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the sum of all shifted numbers k1, k2, ..., kn
def calculate_k_sum(codes, n):
    pow_10_vec = np.power(10, np.arange(n - 1, -1, -1), dtype=np.int64)
    k1 = np.dot(codes, pow_10_vec)
    k_sum = k1 * (np.power(10, n) - 1) // 9
    k_sum -= np.dot(codes, pow_10_vec * (10 - 1))
    return k1, k_sum

# Function to count vowel-consonant pairs
def count_vc_pairs(word):
    vowels = set('AEIOU')
    count = 0
    for i in range(len(word) - 1):
        if (word[i] in vowels) != (word[i + 1] in vowels):
            count += 1
    return count

# Read input from file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = file.readline().strip()
    m = int(file.readline().strip())
    codes_dict = dict(zip(word[:m], map(int, file.readline().strip().split())))

# Convert letters to codes using numpy and dictionary lookup
codes = np.array([codes_dict[letter] for letter in word], dtype=np.int64)

# Calculate the number of vowel-consonant pairs and the sum of numbers k1, k2, ..., kn
vc_pairs = count_vc_pairs(word)
k1, k_sum = calculate_k_sum(codes, n)

# Write output to file
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k1}\n{k_sum}\n")
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the sum of all shifted numbers k1, k2, ..., kn
def calculate_k_sum(codes, n):
    # Generate a vector with powers of 10
    pow_10_vec = np.power(10, np.arange(n - 1, -1, -1), dtype=np.int64)
    # Calculate k1
    k1 = np.dot(codes, pow_10_vec)
    # Calculate geometric series sum for the progression of k values
    k_sum = k1 * (np.power(10, n) - 1) // 9
    # Apply correction for each code's position
    correction = np.cumsum(codes[::-1]) * pow_10_vec[::-1]
    k_sum -= np.sum(correction)
    return k1, k_sum

# Function to count vowel-consonant pairs
def count_vc_pairs(word):
    vowels = set('AEIOU')
    count = 0
    for i in range(len(word) - 1):
        if (word[i] in vowels) != (word[i + 1] in vowels):
            count += 1
    return count

# Read input from file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = file.readline().strip()
    m = int(file.readline().strip())
    # Read codes and map them to corresponding letters
    letter_codes = dict(zip(word, map(int, file.readline().strip().split())))

# Convert letters to codes using numpy and dictionary lookup
codes = np.array([letter_codes[letter] for letter in word], dtype=np.int64)

# Calculate the number of vowel-consonant pairs and the sum of numbers k1, k2, ..., kn
vc_pairs = count_vc_pairs(word)
k1, k_sum = calculate_k_sum(codes, n)

# Write output to file
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k1}\n{k_sum}\n")
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing the numpy library for efficient array calculations
import numpy as np

# Function to check if a character is a vowel
def is_vowel(ch):
    return ch in 'AEIOU'

# Function to count the vowel-consonant pairs
def count_vowel_consonant_pairs(word):
    count = 0
    for i in range(len(word) - 1):
        if is_vowel(word[i]) != is_vowel(word[i + 1]):
            count += 1
    return count

# Read input from file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = file.readline().strip()
    m = int(file.readline().strip())
    letter_codes = dict(zip(set(word), map(int, file.readline().strip().split())))

# Create the numpy array of codes corresponding to each letter in the word
codes = np.array([letter_codes[letter] for letter in word], dtype=np.int64)

# Count the number of vowel-consonant pairs
vc_pairs = count_vowel_consonant_pairs(word)

# Compute k1 and k_sum
k1 = int(''.join(str(letter_codes[letter]) for letter in word))
k_sum = sum(int(''.join(str(letter_codes[letter]) for letter in word[i:])) for i in range(n))

# Write output to file
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k1}\n{k_sum}\n")
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing the numpy library for efficient array calculations
import numpy as np

# Function to compute the sum of all k values
def compute_k_sum(codes):
    # Calculating k1 is straightforward as it's just all codes concatenated
    k1 = int(''.join(map(str, codes)))
    
    # To calculate the sum of all k values, we need to consider each code's contribution
    # Each code contributes to multiple k values depending on its position
    # We'll use numpy to vectorize this computation for efficiency
    n = len(codes)
    positional_multipliers = np.power(10, np.arange(n)[::-1], dtype=np.int64)
    k_values_sum = np.sum(codes * positional_multipliers) * (np.power(10, n) - 1) // 9
    
    # Correct for the excess counts where each digit has been counted one time too many
    correction_factor = np.cumsum(positional_multipliers)
    k_values_sum -= np.sum(codes * correction_factor)

    return k1, k_values_sum

# Function to count the number of vowel-consonant pairs
def count_vc_pairs(word):
    vowels = 'AEIOU'
    count = 0
    for i in range(len(word) - 1):
        if (word[i] in vowels) != (word[i + 1] in vowels):
            count += 1
    return count

# Read from the input file
with open('litere.in', 'r') as input_file:
    n = int(input_file.readline())
    word = input_file.readline().strip()
    m = int(input_file.readline())
    codes = np.array([int(x) for x in input_file.readline().split()], dtype=np.int64)

# Map each letter in the word to its corresponding code
letter_to_code = {word[i]: codes[i] for i in range(m)}
codes_mapped = np.array([letter_to_code[letter] for letter in word], dtype=np.int64)

# Compute the number of vowel-consonant pairs
vc_pairs = count_vc_pairs(word)

# Compute k1 and the sum of all k values
k1, sum_k_values = compute_k_sum(codes_mapped)

# Write to the output file
with open('litere.out', 'w') as output_file:
    output_file.write(f"{vc_pairs}\n{k1}\n{sum_k_values}\n")
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to map the word to its corresponding codes
def word_to_codes(word, letter_values):
    return np.array([letter_values[letter] for letter in word], dtype=np.int64)

# Function to compute the sum of the k values
def compute_k_values(codes):
    n = len(codes)
    k1 = int(''.join(map(str, codes)))
    multipliers = np.power(10, np.arange(n - 1, -1, -1), dtype=np.int64)
    k_values = k1 * (np.power(10, n) - 1) // 9 - np.sum(multipliers * codes * (10 - 1))
    return k1, k_values

# Function to count vowel-consonant pairs
def count_vc_pairs(word):
    vowels = 'AEIOU'
    return sum((word[i] in vowels) ^ (word[i + 1] in vowels) for i in range(len(word) - 1))

# Read input from file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = file.readline().strip()
    m = int(file.readline().strip())
    codes = list(map(int, file.readline().strip().split()))

# Create a mapping of letter to code
letter_values = {word[i]: codes[i] for i in range(m)}

# Translate word to codes
word_codes = word_to_codes(word, letter_values)

# Compute k1 and the sum of k values
k1, k_values_sum = compute_k_values(word_codes)

# Count vowel-consonant pairs
vc_pairs = count_vc_pairs(word)

# Write output to file
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k1}\n{k_values_sum}\n")
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to count vowel-consonant pairs
def count_vc_pairs(word):
    vowels = set('AEIOU')
    count = 0
    for i in range(len(word) - 1):
        if (word[i] in vowels) ^ (word[i + 1] in vowels):
            count += 1
    return count

# Function to map letters to codes and calculate k1 and k_sum
def calculate_k(word, codes_map):
    # Convert word to array of codes
    codes = np.array([codes_map[letter] for letter in word], dtype=np.int64)
    # Calculate k1 by joining codes together
    k1 = int(''.join(map(str, codes)))
    # Calculate sum of k's by the formula derived for sum of all numbers formed
    # by the removal of digits from the left side
    n = len(codes)
    k_sum = k1
    for i in range(1, n):
        k_sum += int(''.join(map(str, codes[i:])))
    return k1, k_sum

# Reading from the input file
with open('litere.in', 'r') as file:
    n = int(file.readline().strip())
    word = file.readline().strip()
    m = int(file.readline().strip())
    codes_list = list(map(int, file.readline().strip().split()))

# Creating a dictionary to map the letters to their corresponding codes
codes_map = {word[i]: codes_list[i] for i in range(m)}

# Counting vowel-consonant pairs
vc_pairs = count_vc_pairs(word)

# Calculating k1 and k_sum
k1, k_sum = calculate_k(word, codes_map)

# Writing to the output file
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k1}\n{k_sum}\n")
```
```
