---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `recyclebin.in` and write to `recyclebin.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de `N` numere întregi notat cu `A`. O *subsecvență* a șirului `A` este un șir $A_i A_{i+1} A_{i+2} … A_j$ cu `1 ≤ i ≤ j ≤ N`, iar lungimea acestei subsecvențe este egală cu `j – i + 1`. O *operație* constă în alegerea unei subsecvențe din șir și ștergerea acesteia. În cadrul unei operații, **lungimea subsecvenței alese trebuie să fie o putere de`2`**. În cadrul tuturor operațiilor efectuate pe șir, **lungimile subsecvențelor șterse trebuie să fie distincte**.

Pentru fiecare subsecvență din șir considerăm suma elementelor ei. Definim *costul* unui șir ca fiind maximul acestor sume, în cazul în care șirul conține cel puțin un număr pozitiv, altfel costul șirului este egal cu `0`.

Putem aplica o succesiune de operații (eventual niciuna) pe șirul `A`. În urma acestor operații se vor șterge anumite elemente din șir, obținându-se astfel o mulțime de șiruri $M=\{A, A’_1, A’_2, A’_3, ...\}$.

# Cerinţă
Să se determine costul maxim posibil ce se poate obține dintr-un șir al mulțimii M.

# Date de intrare
Prima linie a fișierului de intrare `recyclebin.in` conține un număr întreg `N`.
A doua linie conține `N` numere întregi, separate prin câte un spațiu, reprezentând valorile șirului `A`.

# Date de ieşire
Afișați valoarea costului maxim pe prima linie a fișierului de ieșire `recyclebin.out`.

# Restricţii și precizări
* `1 ≤ N ≤ 1000`
* $-10^6 ≤ A_i ≤ 10^6$ pentru `1 ≤ i ≤ N`
* Pentru teste în valoare de `10` puncte `1 ≤ N ≤ 30`
* Pentru alte teste în valoare de `15` puncte se garantează că există o soluție cu cel mult o operație efectuată
* Pentru alte teste în valoare de `20` puncte se garantează că există o soluție cu cel mult două operații efectuate
* Se acordă `10` puncte din oficiu.

---

Example:
`recyclebin.in`
```
14
13 -19 13 -5 -12 11 20 4 -10 1 -7 19 -19 3
```

`recyclebin.out`
```
76
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Util function to calculate the powers of 2 up to N
def calculate_powers_of_two(N):
    powers = []
    power = 1
    while power <= N:
        powers.append(power)
        power *= 2
    return powers

# Read the input from 'recyclebin.in'
with open('recyclebin.in', 'r') as fin:
    N = int(fin.readline().strip())
    # Use numpy for efficient memory and computation
    A = np.fromstring(fin.readline().strip(), sep=' ', dtype=int)

# Calculate the prefix sums for A to efficiently compute subarray sums
prefix_sums = np.concatenate(([0], np.cumsum(A)))

# Calculate the powers of 2 up to N
possible_lengths = calculate_powers_of_two(N)

# Initialize the maximum cost to 0
max_cost = 0

# Iterate through all possible starting points
for i in range(N):
    # Compute the cost of subarray starting at i without any deletions
    current_cost = prefix_sums[i + 1] - prefix_sums[i]
    # Update max cost
    max_cost = max(max_cost, current_cost)
    # Initialize the mask to keep track of used powers of 2
    used_power_mask = 0
    # Iterate through all possible powers of 2
    for length in possible_lengths:
        # If this power of 2 has been used before, skip it
        if used_power_mask & (1 << length):
            continue
        # If the end of the subarray exceeds the array, break the loop
        if i + length > N:
            break
        # Delete the subarray and compute the new subarray sum
        current_cost = prefix_sums[i + length] - prefix_sums[i]
        # Update max cost
        max_cost = max(max_cost, current_cost)
        # Mark this power of 2 as used
        used_power_mask |= (1 << length)

# Write the output to 'recyclebin.out'
with open('recyclebin.out', 'w') as fout:
    fout.write(str(max_cost))
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
