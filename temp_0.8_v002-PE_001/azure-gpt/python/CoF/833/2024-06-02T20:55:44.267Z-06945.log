---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cladiri.in` and write to `cladiri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Având mai multe cuburi la dispoziție, Crina și Rareș au hotărât să construiască clădiri prin alipirea a două sau mai multor turnuri. Turnurile au fost obținute prin așezarea cuburilor unul peste celălalt. **Înălțimea unui turn** este dată de numărul de cuburi din care este format. Clădirile construite au fost așezate în linie, una lângă alta formând astfel o stradă, pe care cei doi copii se vor plimba.

~[cladiri.png|width=40em]

Pentru numerotarea clădirilor Crina și Rareș au stabilit următoarele reguli:
* Crina pornește dintr-un capăt al străzii iar Rareș din celălalt capăt al acesteia; fiecare dintre ei traversează strada complet, trecând prin dreptul fiecărei clădiri
* Crina lipește pe fiecare clădire, câte un bilețel pe care scrie înălțimea turnurilor din care aceasta este construită, în ordinea în care ea le vede când trece prin dreptul lor (de exemplu, pentru imaginea de mai sus, Crina va lipi pe prima clădire un bilețel pe care va scrie numărul $3112$ deoarece, primul turn e format din $3$ cuburi, următoarele două turnuri ale acestei clădiri sunt formate din câte un cub iar cel de-al patrulea turn e format din $2$ cuburi);
* Rareș va proceda la fel, dar începe plimbarea din celalalt capăt al străzii. În exemplul din imagine, el va lipi pe prima clădire pe care o întâlnește un bilețel pe care scrie numărul $2121$.

La finalul plimbării, Crina și Rareș își dau seama că există clădiri pe care au lipit amândoi bilețele cu numere identice.

# Cerință

1. Care este înălțimea celui mai înalt turn și care este numărul clădirilor care au în construcția lor un astfel de turn;
2. Care este numărul clădirilor pe care cei doi copii au lipit bilețele cu numere identice;
3. Care este cel mai mic număr de cuburi necesar pentru **a completa** clădirile astfel încât, pe fiecare clădire bilețelul pe care îl va lipi Crina să conțină același număr cu cel pe care îl va lipi Rareș. Cuburile din care a fost construită inițial clădirea nu se pot muta.

# Date de intrare

Din fișierul de intrare `cladiri.in` se va citi de pe prima linie un număr natural $N$, reprezentând numărul clădirilor de pe stradă iar de pe următoarele $N$ linii, câte un număr natural cu toate cifrele nenule, reprezentând numerele scrise de Crina pe bilețele, în ordinea în care au fost lipite de ea pe clădiri.

# Date de ieșire

În fișierul de ieșire `cladiri.out` se va scrie pe prima linie două numere naturale despărțite printr-un singur spațiu ce reprezintă, în ordine, valorile cerute la cerința $1$. Pe cea de-a doua linie a fișierului se va scrie un număr natural, mai mare sau egal cu zero reprezentând răspunsul la cerința $2$ iar pe cea de-a treia linie a fișierului se va scrie un număr natural mai mare sau egal cu zero reprezentând răspunsul la cerința $3$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$;
* Fiecare clădire este alcătuită din cel mult $9$ turnuri, iar înălțimea fiecărui turn este exprimată printr-o cifră nenulă.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20$% din punctajul fiecărui test, pentru rezolvarea corectă a cerinței $2$ se acordă $40$% din punctajul fiecărui test iar pentru rezolvarea corectă a cerinței $3$ se acordă 40% din punctajul fiecărui test.
* Respectați formatul fișierului de ieșire! Pentru a obține punctajul acordat unei cerințe, trebuie ca răspunsul din fișier să fie corect și scris exact pe linia precizată în enunț.

---

Example:
`cladiri.in`
```
6
3112
2772
42422
1741
27372
1212
```

`cladiri.out`
```
7 3
2
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_cladiri(file_path):
    with open(file_path, 'r') as file:
        N = int(file.readline().strip())
        cladiri = [int(file.readline().strip()) for _ in range(N)]
    return N, cladiri

def write_cladiri(file_path, tallest_tower_height, num_buildings_tallest, identical, min_cubes):
    with open(file_path, 'w') as file:
        file.write(f"{tallest_tower_height} {num_buildings_tallest}\n")
        file.write(f"{identical}\n")
        file.write(f"{min_cubes}\n")

def get_tallest_tower(cladiri):
    tallest_tower_height = max(max(str(building)) for building in cladiri)
    num_buildings_tallest = sum(str(tallest_tower_height) in str(building) for building in cladiri)
    return tallest_tower_height, num_buildings_tallest

def get_identical_buildings(cladiri):
    reversed_cladiri = [int(str(building)[::-1]) for building in cladiri]
    return np.sum(np.array(cladiri) == np.array(reversed_cladiri))

def get_min_cubes_to_complete(cladiri):
    min_cubes = 0
    for building in cladiri:
        str_building = str(building)
        str_reversed_building = str_building[::-1]
        for i in range(len(str_building)):
            min_cubes += abs(int(str_building[i]) - int(str_reversed_building[i]))
    return min_cubes // 2  # Because we counted each cube twice, once for each side

def main():
    N, cladiri = read_cladiri('cladiri.in')
    tallest_tower_height, num_buildings_tallest = get_tallest_tower(cladiri)
    identical = get_identical_buildings(cladiri)
    min_cubes = get_min_cubes_to_complete(cladiri)
    write_cladiri('cladiri.out', tallest_tower_height, num_buildings_tallest, identical, min_cubes)

if __name__ == "__main__":
    main()
```

This Python code snippet solves the given programming challenge by performing several tasks:
1. It reads the input data from the file `cladiri.in`.
2. It finds the tallest tower and how many buildings have such a tower.
3. It determines the number of buildings with identical numbers on the stickers from both sides.
4. It calculates the minimum number of cubes needed to make all buildings symmetrical.
5. It writes the output data to the file `cladiri.out`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
