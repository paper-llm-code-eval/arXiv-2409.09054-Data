---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To provide a solution for this challenge, we need to employ a binary search to find the maximum possible sum that the youngest heir can receive. Since we want to optimize for time and memory, we will use NumPy for efficient array manipulation. Below is a possible solution to the problem:

```python
import numpy as np

# Function to check if a distribution is valid, given a minimum sum for the youngest heir
def valid_distribution(sacks, K, minimum_sum):
    heirs = np.zeros(K, dtype=int)
    current_heir = K - 1
    current_sum = 0
    
    # Iterate through the sacks in reverse order, allocating to the youngest possible heir
    for sack in reversed(sacks):
        if current_sum + sack <= minimum_sum:
            current_sum += sack
        else:
            if current_heir == 0:  # Check if we are at the oldest heir already
                return False
            heirs[current_heir] = current_sum
            current_heir -= 1
            current_sum = sack

    heirs[current_heir] = current_sum
    return all(heirs[i] >= heirs[i+1] for i in range(K-1))

# Function to perform binary search to find the maximum sum for the youngest heir
def find_max_sum_for_youngest(sacks, K):
    left, right = 0, sum(sacks)
    best_sum = 0

    while left <= right:
        mid = (left + right) // 2
        if valid_distribution(sacks, K, mid):
            best_sum = mid
            left = mid + 1
        else:
            right = mid - 1

    return best_sum

# Read input
with open('mostenire.in', 'r') as file:
    N, K = map(int, file.readline().split())
    sacks = np.array([int(file.readline()) for _ in range(N)])

# Find the maximum sum for the youngest heir
max_youngest_sum = find_max_sum_for_youngest(sacks, K)

# Output the result
with open('mostenire.out', 'w') as file:
    file.write(f"{max_youngest_sum}\n")
    current_sum = 0
    current_heir = K
    for sack in sacks:
        if current_sum + sack <= max_youngest_sum:
            current_sum += sack
        else:
            file.write(f"{current_heir} {N // K + int(N % K >= current_heir)}\n")
            current_heir -= 1
            current_sum = sack

    file.write(f"{current_heir} {N // K + int(N % K >= current_heir)}\n")
```

This code will read the number of sacks and the number of heirs from the input file `mostenire.in`, then perform a binary search to find the maximum sum the youngest heir can receive while still meeting the conditions set by the emperor. It writes the results to `mostenire.out`, including the total sum for the youngest heir and the allocation of sacks to each heir. The binary search is used to efficiently find the maximum sum that can be allocated to the youngest heir while maintaining the order of inheritance. The allocation distributes sacks to heirs from the youngest to oldest, ensuring that no younger heir receives more than an older heir.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
