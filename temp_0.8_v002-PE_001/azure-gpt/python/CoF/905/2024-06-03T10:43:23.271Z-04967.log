---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to find the optimal division of sacks
def optimal_division(sacks, K):
    N = len(sacks)
    dp = np.zeros((K, N+1), dtype=int)
    path = np.zeros((K, N+1), dtype=int)

    # Initialize the first row of dp with cumulative sum
    dp[0] = np.cumsum(sacks)

    # Fill dp table
    for i in range(1, K):
        for j in range(i, N):
            # Compute minimum among the maximum sack distribution
            # for the previous son and the sum of remaining sacks
            options = [max(dp[i-1][k], dp[0][j] - dp[0][k]) for k in range(i-1, j)]
            dp[i][j], path[i][j] = min(enumerate(options), key=lambda x: x[1])

    # Backtrack to find the solution
    solution = []
    remaining_sacks = N
    for i in range(K-1, -1, -1):
        son_sacks = remaining_sacks - path[i][remaining_sacks]
        solution.append((i+1, son_sacks))
        remaining_sacks -= son_sacks

    # Reverse the solution to get correct order and the smallest sum
    solution.reverse()
    smallest_sum = dp[K-1][N-1]
    return (smallest_sum, solution)

# Read from input file
with open('mostenire.in', 'r') as file:
    N, K = map(int, file.readline().split())
    sacks = np.array([int(file.readline()) for _ in range(N)], dtype=int)

# Get the optimal division
smallest_sum, allocation = optimal_division(sacks, K)

# Write to output file
with open('mostenire.out', 'w') as file:
    file.write(f'{smallest_sum}\n')
    for son, sack_count in allocation:
        file.write(f'{son} {sack_count}\n')
```
This code is designed to find an optimal division of the sacks according to the emperor's requirements, and then write the answers to `mostenire.out`. It uses NumPy for efficient array manipulation and to keep the memory usage low. The algorithm uses dynamic programming to find the minimum possible sum for the youngest son.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the runtime environment. Since the challenge specifies optimizing for memory and that the use of efficient libraries is encouraged, the absence of `numpy` is problematic. However, given the memory constraints and that the environment does not have `numpy` installed, I will rewrite the solution to work without `numpy` using standard Python lists to handle the data.

Here is the updated solution without using `numpy`:

```python
# Function to find the optimal division of sacks
def optimal_division(sacks, K):
    N = len(sacks)
    dp = [[0] * (N + 1) for _ in range(K)]
    path = [[0] * (N + 1) for _ in range(K)]

    # Initialize the first row of dp with cumulative sum
    cum_sum = 0
    for j in range(N):
        cum_sum += sacks[j]
        dp[0][j] = cum_sum

    # Fill dp table
    for i in range(1, K):
        for j in range(i, N):
            min_value = float('inf')
            for k in range(i - 1, j):
                option = max(dp[i - 1][k], dp[0][j] - dp[0][k])
                if option < min_value:
                    min_value = option
                    path[i][j] = k
            dp[i][j] = min_value

    # Backtrack to find the solution
    solution = []
    remaining_sacks = N - 1
    for i in range(K - 1, -1, -1):
        son_sacks = remaining_sacks - path[i][remaining_sacks]
        solution.append((i + 1, son_sacks - path[i][son_sacks] if i > 0 else son_sacks))
        remaining_sacks = path[i][remaining_sacks]

    # Reverse the solution to get correct order and the smallest sum
    solution.reverse()
    smallest_sum = dp[K - 1][N - 1]
    return smallest_sum, solution

# Read from input file
with open('mostenire.in', 'r') as file:
    N, K = map(int, file.readline().split())
    sacks = [int(file.readline()) for _ in range(N)]

# Get the optimal division
smallest_sum, allocation = optimal_division(sacks, K)

# Write to output file
with open('mostenire.out', 'w') as file:
    file.write(f'{smallest_sum}\n')
    for son, sack_count in allocation:
        file.write(f'{son} {sack_count}\n')
``` 

This code reads from `mostenire.in` and writes to `mostenire.out` as required, without using `numpy`. It should be considerably less memory-intensive than a version using `numpy`, as it only uses lists and basic arithmetic operations. The dynamic programming approach remains the same, and the solution should be correct and efficient in terms of both time and memory.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
15
1 3
2 1
3 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The mismatch between the expected and found results is because the original algorithm does not correctly implement the logic for determining the optimal division of the sacks. Specifically, the dynamic programming table is not correctly filled, and the backtracking logic does not correspond to the correct problem statement.

To fix this, I will implement a different approach. Since the youngest son (the last one to receive sacks) must get the maximum possible gold without getting more than any older brother, we can start by giving the youngest son as much as possible, then proceed with the others. We can achieve this by successively giving each son the maximum number of sacks they can get without exceeding the number of gold coins previously assigned.

Here is the corrected solution:

```python
# Function to find the optimal division of sacks
def optimal_division(sacks, K):
    N = len(sacks)
    # Initialize the allocation array with the index of the sons and their respective allocation of 0
    allocation = [[i+1, 0] for i in range(K)]
    # Calculate the cumulative sum of sacks from the end
    cum_sum = [0] * (N + 1)
    for i in range(N-1, -1, -1):
        cum_sum[i] = cum_sum[i+1] + sacks[i]

    # Assign maximum possible to the youngest son
    for i in range(N-1, -1, -1):
        if cum_sum[i] - cum_sum[N] <= cum_sum[allocation[K-1][1]]:
            allocation[K-1][1] += 1
        else:
            break

    # Assign sacks to other sons, ensuring each gets less or equal to the younger brother
    for i in range(K-2, -1, -1):
        max_sacks_for_son = allocation[i+1][1]
        for j in range(allocation[i+1][1], N):
            if allocation[i][1] < max_sacks_for_son and cum_sum[j] - cum_sum[allocation[i+1][1]] <= cum_sum[allocation[i+1][1]]:
                allocation[i][1] += 1
            else:
                break

    # Convert allocation to required format
    solution = []
    last_sack_index = 0
    for son, sack_count in allocation:
        solution.append((son, sack_count - last_sack_index))
        last_sack_index = sack_count

    # The sum for the youngest son is the cumulative sum of his sacks
    smallest_sum = cum_sum[N - allocation[-1][1]]
    return smallest_sum, solution

# Read from input file
with open('mostenire.in', 'r') as file:
    N, K = map(int, file.readline().split())
    sacks = [int(file.readline().strip()) for _ in range(N)]

# Get the optimal division
smallest_sum, solution = optimal_division(sacks, K)

# Write to output file
with open('mostenire.out', 'w') as file:
    file.write(f'{smallest_sum}\n')
    for son, sack_count in solution:
        file.write(f'{son} {sack_count}\n')
```

This corrected solution calculates the cumulative sum of sacks from the end and attempts to assign the youngest son as many sacks as possible without surpassing the older brothers. Then, it assigns sacks to the remaining sons in reverse order, ensuring each son gets fewer sacks than his younger brother (or an equal number at most). This approach should now provide the correct output as expected by the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
26
1 4
2 0
3 0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
