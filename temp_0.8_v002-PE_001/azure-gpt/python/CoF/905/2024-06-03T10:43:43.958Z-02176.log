---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# mostenire.py
import numpy as np

# Read input file
with open('mostenire.in', 'r') as f:
    N, K = map(int, f.readline().split())
    gold = np.array([int(f.readline().strip()) for _ in range(N)], dtype=np.int32)

# Initialize variables
allocation = np.zeros(K, dtype=np.int32)
sons_order = np.arange(1, K + 1, dtype=np.int32)
remaining_gold = gold.copy()

# Set the maximum gold given to the youngest son
allocation[-1] = remaining_gold[-K:]
remaining_gold = remaining_gold[:-K+1]

# Distribute the rest of the gold to other sons
for i in range(K - 2, -1, -1):
    max_gold_for_current_son = allocation[i + 1]
    # Find the most gold we can give to the current son without exceeding the maximum for the next son
    gold_so_far = 0
    sacks_given = 0
    for j in range(len(remaining_gold)):
        if gold_so_far + remaining_gold[j] <= max_gold_for_current_son:
            gold_so_far += remaining_gold[j]
            sacks_given += 1
        else:
            break
    allocation[i] = gold_so_far
    remaining_gold = remaining_gold[sacks_given:]

# Write output file
with open('mostenire.out', 'w') as f:
    f.write(f"{allocation[-1]}\n")
    current_sack = 0
    for i, sacks in enumerate(allocation):
        f.write(f"{K - i} {sacks}\n")
        current_sack += sacks
```

This implementation aims to distribute the gold efficiently while obeying the constraints. The strategy is to first determine the maximum amount of gold that the youngest son can receive, then allocate gold to other sons in descending order of age.

The process of distributing gold involves checking, for each son starting from the second-youngest, the maximum amount of gold that can be given without exceeding the amount given to the younger son. Once the allocation is determined, the remaining gold is updated to reflect the new distribution. 

Finally, the output file is written following the required format, with the allocation for the youngest son (the maximum amount he can receive) printed first, followed by the allocation details for each of the sons in the order they were called by the emperor.

It is important to note that the use of NumPy arrays and careful memory management is essential to comply with the memory limit of ~8MB. The `dtype=np.int32` is used to ensure that each integer takes up 4 bytes of memory, which should be enough for the given range of values.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the numpy module is not available in the environment where the code is being executed. To fix this issue, we can implement the solution without numpy, using built-in Python capabilities that do not require additional libraries.

Here's the revised solution, replacing numpy usage with built-in Python lists:

```python
# mostenire.py

# Read input file
with open('mostenire.in', 'r') as f:
    N, K = map(int, f.readline().split())
    gold = [int(f.readline().strip()) for _ in range(N)]

# Initialize variables
allocation = [0] * K
sons_order = list(range(1, K + 1))

# Set the maximum gold given to the youngest son
allocation[-1] = sum(gold[-K:])
remaining_gold = gold[:-K+1]

# Distribute the rest of the gold to other sons
for i in range(K - 2, -1, -1):
    max_gold_for_current_son = allocation[i + 1]
    # Find the most gold we can give to the current son without exceeding the maximum for the next son
    gold_so_far = 0
    sacks_given = 0
    for gold_amount in remaining_gold:
        if gold_so_far + gold_amount <= max_gold_for_current_son:
            gold_so_far += gold_amount
            sacks_given += 1
        else:
            break
    allocation[i] = gold_so_far
    remaining_gold = remaining_gold[sacks_given:]

# Write output file
with open('mostenire.out', 'w') as f:
    f.write(f"{allocation[-1]}\n")
    current_sack = 0
    for i in range(K):
        f.write(f"{K - i} {allocation[i]}\n")
        current_sack += allocation[i]
```

This version of the program should work in a standard Python environment without any external dependencies like numpy. It uses lists to store allocations and gold amounts, and it ensures that memory usage is kept to a minimum by using integers and slicing lists instead of creating new copies.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
21
3 0
2 21
1 21
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
