---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_input(file_name):
    with open(file_name, 'r') as file:
        N, K = map(int, file.readline().split())
        bags = np.array([int(file.readline().strip()) for _ in range(N)], dtype=np.int64)
    return N, K, bags

def write_output(file_name, min_sum, allocation):
    with open(file_name, 'w') as file:
        file.write("{}\n".format(min_sum))
        for son, count in allocation:
            file.write("{} {}\n".format(son, count))

def find_inheritance(N, K, bags):
    # Calculate the prefix sums for the bags in reverse order.
    prefix_sums = np.flip(np.cumsum(np.flip(bags)))
    
    # Each son must get at least one bag, so we calculate the minimal sums
    # each son should get if they get exactly one bag (from the end).
    minimal_sums = prefix_sums[-K:]
    
    # Calculate the max sum the youngest son can get.
    min_sum = minimal_sums[0] - minimal_sums[1]
    
    # Finding out how many bags each son will get and the order in which they are called.
    allocation = []
    remaining_bags = N
    for i in range(1, K):
        bags_to_take = np.searchsorted(prefix_sums, minimal_sums[i], side='right', sorter=np.arange(remaining_bags-1, -1, -1))
        allocation.append((K-i+1, remaining_bags - bags_to_take))
        remaining_bags = bags_to_take
        
    # The last son (the youngest) gets all the remaining bags.
    allocation.append((1, remaining_bags))
    
    # Reverse the allocation order to match the calling order.
    allocation.reverse()
    
    return min_sum, allocation

def main():
    N, K, bags = read_input('mostenire.in')
    min_sum, allocation = find_inheritance(N, K, bags)
    write_output('mostenire.out', min_sum, allocation)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `mostenire.out` and read from `mostenire.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(file_name):
    with open(file_name, 'r') as file:
        N, K = map(int, file.readline().split())
        bags = np.array([int(file.readline().strip()) for _ in range(N)], dtype=np.int32)
    return N, K, bags

def write_output(file_name, min_sum, allocation):
    with open(file_name, 'w') as file:
        file.write("{}\n".format(min_sum))
        for son, count in allocation:
            file.write("{} {}\n".format(son, count))

def find_inheritance(N, K, bags):
    # Initialize the allocation array
    allocation = np.zeros((K, 2), dtype=np.int32)
    
    # Sort bags in ascending order to give the younger sons the smaller sums first
    sorted_indices = np.argsort(bags)
    bags_sorted = bags[sorted_indices]
    
    # Start with the youngest son
    allocation[K - 1, 0] = K
    allocation[K - 1, 1] = 1
    
    # Sum allocated to the youngest son
    min_sum = bags_sorted[0]
    
    # Start giving out bags from the smallest to the largest
    for i in range(1, N):
        son = K - 1 - (i % K)
        allocation[son, 1] += 1
        if son == K - 1:
            min_sum += bags_sorted[i]
    
    # Sort allocation back to the original order of the bags
    restore_order = np.argsort(sorted_indices // K)
    allocation[:, 1] = allocation[restore_order, 1]
    
    # Restore the original order of the sons
    allocation[:, 0] = np.arange(1, K + 1)
    
    return min_sum, allocation

def main():
    N, K, bags = read_input('mostenire.in')
    min_sum, allocation = find_inheritance(N, K, bags)
    write_output('mostenire.out', min_sum, allocation.tolist())

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `mostenire.out` and read from `mostenire.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(file_name):
    with open(file_name, 'r') as file:
        N, K = map(int, file.readline().split())
        bags = [int(file.readline().strip()) for _ in range(N)]
    return N, K, bags

def write_output(file_name, min_sum, allocation):
    with open(file_name, 'w') as file:
        file.write(f"{min_sum}\n")
        for son, count in allocation:
            file.write(f"{son} {count}\n")

def find_inheritance(N, K, bags):
    # Initialize the allocation array and the minimum sum for the youngest son
    allocation = []
    min_sum = 0
    
    # Start with the youngest son (K) and assign a bag to each son to ensure
    # everyone gets at least one
    sons = list(range(K, 0, -1))  # From youngest to oldest
    bags_per_son = [1] * K
    bags_left = N - K  # Remaining bags after giving each son one bag
    min_sum = bags[-1]  # Start with the last bag, which is the smallest
    bags = bags[:-1]  # Remove the last bag from consideration

    # Assign the remaining bags one by one starting from the smallest
    for i in range(bags_left):
        # Find the son with the smallest current sum and give him the next bag
        min_son = min(range(K), key=lambda x: bags_per_son[x])
        bags_per_son[min_son] += 1
        if min_son == K - 1:  # If the son is the youngest, add to his sum
            min_sum += bags[i]

    # Convert the allocation to the expected output format
    for son in range(K):
        allocation.append((K - son, bags_per_son[son]))

    return min_sum, allocation

def main():
    N, K, bags = read_input('mostenire.in')
    min_sum, allocation = find_inheritance(N, K, sorted(bags))
    write_output('mostenire.out', min_sum, allocation)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `mostenire.out` and read from `mostenire.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def allocate_gold(N, K, gold):
    # Initialize dynamic programming table
    dp = np.zeros((K+1, N+1), dtype=np.int32)
    dp[0] = np.cumsum([0] + gold)  # Prefix sum for easier calculation
    
    # Initialize table to keep track of divisions
    div = np.zeros((K+1, N+1), dtype=np.int32)
    
    # Dynamic programming to find the optimal division
    for i in range(1, K+1):
        for j in range(i, N+1):
            max_gold = 0
            for x in range(i-1, j):
                gold_this_son = dp[i-1][x] - dp[i-1][j]
                if x == i-1 or gold_this_son <= dp[i][j-1]:
                    if gold_this_son > max_gold:
                        max_gold = gold_this_son
                        div[i][j] = x
            dp[i][j] = max_gold
    
    # Backtrack to find the solution
    solution = [0] * K
    last = N
    for i in range(K, 0, -1):
        solution[i-1] = last - div[i][last]
        last = div[i][last]
    
    # Calculate the gold for the youngest son
    youngest_gold = dp[K][N]
    
    return youngest_gold, solution

# Read the input file
N, K, gold = read_input('mostenire.in')

# Calculate the allocation
youngest_gold, solution = allocate_gold(N, K, gold)

# Prepare the allocation list for output
allocation = [(i+1, solution[i]) for i in range(K)]

# Write the output file
write_output('mostenire.out', youngest_gold, allocation)
```
```
---------- user ----------


Expected program to write result to `mostenire.out` and read from `mostenire.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(file_name):
    with open(file_name, 'r') as file:
        N, K = map(int, file.readline().split())
        bags = np.array([int(file.readline().strip()) for _ in range(N)], dtype=np.int32)
    return N, K, bags

def write_output(file_name, min_sum, allocation):
    with open(file_name, 'w') as file:
        file.write(f"{min_sum}\n")
        for son, count in allocation:
            file.write(f"{son} {count}\n")

def find_inheritance(N, K, bags):
    dp = np.zeros((K + 1, N + 1), dtype=np.int32)
    for i in range(1, N + 1):
        dp[1][i] = dp[1][i - 1] + bags[i - 1]
    for i in range(2, K + 1):
        for j in range(i, N + 1 - (K - i)):
            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j - 1])
            for k in range(j - 1, i - 2, -1):
                dp[i][j] = max(dp[i][j], min(dp[i - 1][k], dp[1][j] - dp[1][k]))

    allocation = []
    j = N
    for i in range(K, 0, -1):
        while dp[i][j] == dp[i][j - 1]:
            j -= 1
        allocation.append((i, j - (i - 1)))
        j -= (j - (i - 1))

    min_sum = dp[K][N]
    return min_sum, allocation[::-1]

N, K, bags = read_input('mostenire.in')
min_sum, allocation = find_inheritance(N, K, bags)
write_output('mostenire.out', min_sum, allocation)
```
```
---------- user ----------


Expected program to write result to `mostenire.out` and read from `mostenire.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
