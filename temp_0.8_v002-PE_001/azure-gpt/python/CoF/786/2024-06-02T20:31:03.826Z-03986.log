---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Prime sieve for generating primes up to n
def sieve(n):
    is_prime = np.ones(n + 1, dtype=bool)
    is_prime[:2] = False
    for i in range(2, int(n ** 0.5) + 1):
        if is_prime[i]:
            is_prime[i*i:n+1:i] = False
    return np.nonzero(is_prime)[0]

# Calculate the power of prime factors in n!
def prime_factors_power(n, primes):
    powers = np.zeros_like(primes)
    for i, prime in enumerate(primes):
        if prime > n:
            break
        # Count multiples of prime in all numbers from 1 to n
        k = prime
        while k <= n:
            powers[i] += n // k
            k *= prime
    return powers

# Read from factori.in and write to factori.out
def process_factorials():
    with open('factori.in', 'r') as f_in:
        numbers = [int(line.strip()) for line in f_in.readlines() if int(line.strip()) != 0]

    primes = sieve(max(numbers))
    with open('factori.out', 'w') as f_out:
        for num in numbers:
            powers = prime_factors_power(num, primes)
            # Filter non-zero powers and convert numbers to strings
            powers_str = ' '.join([str(p) for p in powers if p > 0])
            f_out.write(powers_str + '\n')

process_factorials()
```

The above Python code reads from a file named `factori.in`, computes the prime factors and their powers for each factorial, and writes the results to a file named `factori.out`. It uses a prime sieve to generate all primes up to the maximum number in the input file, and it computes the powers of these primes in the factorial of each number efficiently, by counting the multiples of each prime in the range from 1 to n. This ensures that the memory usage is kept low, without storing the actual factorials, which would quickly exceed the memory limit for large numbers.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed in the environment where the program is being executed. Since the original challenge requires optimizing both time and memory usage and suggests using highly efficient libraries like `numpy`, but I am faced with an environment where I cannot use `numpy`, I will have to implement the solution using standard Python libraries only.

Here's the adjusted solution without `numpy`:

```python
# Generate all primes up to n using the Sieve of Eratosthenes
def sieve(n):
    is_prime = [True] * (n + 1)
    is_prime[0] = is_prime[1] = False
    primes = []
    for i in range(2, n + 1):
        if is_prime[i]:
            primes.append(i)
            for j in range(i*i, n + 1, i):
                is_prime[j] = False
    return primes

# Calculate the power of prime factors in n!
def prime_factors_power(n, primes):
    powers = []
    for prime in primes:
        if prime > n:
            break
        count = 0
        k = prime
        while k <= n:
            count += n // k
            k *= prime
        powers.append(count)
    return powers

# Read from factori.in and write to factori.out
def process_factorials():
    with open('factori.in', 'r') as f_in:
        numbers = [int(line.strip()) for line in f_in if int(line.strip()) != 0]

    max_num = max(numbers)
    primes = sieve(max_num)
    results = []

    for num in numbers:
        powers = prime_factors_power(num, primes)
        # Filter out zero powers and convert numbers to strings
        powers_str = ' '.join(str(p) for p in powers if p > 0)
        results.append(powers_str)

    with open('factori.out', 'w') as f_out:
        f_out.write('\n'.join(results))

process_factorials()
```

This solution should work within the standard Python environment and does not rely on external libraries such as `numpy`. It uses the Sieve of Eratosthenes to find all prime numbers up to the maximum number in the input, and then for each input number, it calculates the powers of these primes in the factorial efficiently. The results are written to `factori.out` as required.
