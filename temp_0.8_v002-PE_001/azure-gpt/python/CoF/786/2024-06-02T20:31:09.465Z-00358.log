---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def prime_sieve(n):
    sieve = np.ones(n // 3 + (n % 6 == 2), dtype=bool)
    for i in range(1, int(n**0.5) // 3 + 1):
        if sieve[i]:
            k = 3*i + 1 | 1
            sieve[k*k//3::2*k] = False
            sieve[k*(k-2*(i&1)+4)//3::2*k] = False
    return np.r_[2, 3, ((3*np.nonzero(sieve)[0][1:] + 1) | 1)]

def count_factors(n, prime):
    count = 0
    while n:
        n //= prime
        count += n
    return count

def main():
    with open('factori.in', 'r') as fin:
        numbers = [int(line.strip()) for line in fin.readlines() if int(line.strip()) != 0]

    max_number = max(numbers)
    primes = prime_sieve(max_number)

    factor_counts_matrix = np.zeros((len(numbers), len(primes)), dtype=int)

    for i, number in enumerate(numbers):
        for j, prime in enumerate(primes):
            if prime > number:
                break
            factor_counts_matrix[i, j] = count_factors(number, prime)

    with open('factori.out', 'w') as fout:
        for counts in factor_counts_matrix:
            counts_str = ' '.join(map(str, counts[counts > 0]))
            fout.write(counts_str + '\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def get_primes_upto(n):
    # Sieve of Eratosthenes to generate all primes less than or equal to n
    sieve = np.ones(n+1, dtype=bool)
    sieve[:2] = False  # 0 and 1 are not prime numbers
    for i in range(2, int(n**0.5)+1):
        if sieve[i]:
            sieve[i*i:n+1:i] = False
    return np.flatnonzero(sieve)

def prime_factor_counts(n, primes):
    # Count occurrences of prime factors in n!
    prime_counts = []
    for prime in primes:
        count = 0
        k = n
        while k > 0:
            k //= prime
            count += k
        prime_counts.append(count)
    return prime_counts

def main():
    # Read from 'factori.in'
    with open('factori.in', 'r') as fin:
        numbers = [int(line.strip()) for line in fin if int(line.strip()) != 0]

    # Generate primes up to the maximum number
    primes = get_primes_upto(max(numbers))

    # Process each number and write results to 'factori.out'
    with open('factori.out', 'w') as fout:
        for number in numbers:
            # Get prime factor counts for the factorial of the number
            counts = prime_factor_counts(number, primes)
            # Filter out the primes that don't contribute to the factorial
            counts = [str(count) for count in counts if count > 0]
            # Write the result in the desired format
            fout.write(' '.join(counts) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def get_primes_upto(n):
    # Use sieve algorithm to get all primes up to n
    sieve = np.ones(n+1, dtype=bool)
    sieve[0] = sieve[1] = False
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            sieve[i*i:n+1:i] = False
    primes = np.nonzero(sieve)[0]
    return primes

def count_prime_factors_in_factorial(n, prime):
    # Count the number of times prime divides n!
    count = 0
    while n:
        n //= prime
        count += n
    return count

def main():
    with open('factori.in', 'r') as fin:
        numbers = [int(line.strip()) for line in fin if int(line.strip()) != 0]

    max_number = max(numbers)
    primes = get_primes_upto(max_number)
    
    with open('factori.out', 'w') as fout:
        for number in numbers:
            factors = [str(count_prime_factors_in_factorial(number, prime)) for prime in primes if prime <= number]
            fout.write(' '.join(factors) + '\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Calculate the primes up to the maximum value using the Sieve of Eratosthenes
def sieve_of_eratosthenes(max_val):
    sieve = np.ones(max_val + 1, dtype=bool)
    sieve[0] = sieve[1] = False
    for i in range(2, int(max_val**0.5) + 1):
        if sieve[i]:
            sieve[i*i::i] = False
    return np.nonzero(sieve)[0]

# Count the power of prime in the factorization of factorial(n)
def count_prime_in_factorial(n, prime):
    count = 0
    while n > 0:
        n //= prime
        count += n
    return count

# Main function to handle reading and writing files
def main():
    # Read numbers from 'factori.in'
    with open('factori.in', 'r') as fin:
        numbers = [int(line.strip()) for line in fin if int(line.strip()) != 0]

    # Find the largest number to determine the range of primes
    max_number = max(numbers)
    primes = sieve_of_eratosthenes(max_number)

    # Open 'factori.out' for writing the output
    with open('factori.out', 'w') as fout:
        for number in numbers:
            prime_powers = [count_prime_in_factorial(number, prime) for prime in primes if prime <= number]
            # Convert the counts to strings and join them with spaces, then write to the file
            fout.write(' '.join(map(str, prime_powers)) + '\n')

# Check if the script is the main program and call main
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def sieve_of_eratosthenes(n):
    sieve = np.ones(n//3 + (n%6==2), dtype=bool)
    for i in range(1,int(n**0.5)//3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[       k*k//3     ::2*k] = False
            sieve[k*(k - 2*(i&1) + 4)//3::2*k] = False
    return np.r_[2,3,((3*np.nonzero(sieve)[0][1:]+1)|1)]

def prime_factorization(factorial_prime_powers):
    factors = []
    for prime, power in factorial_prime_powers.items():
        if power > 0:
            factors.append(str(power))
    return ' '.join(factors)

def calculate_factorial_prime_powers(n, primes):
    factorial_prime_powers = {}
    for prime in primes:
        power = 0
        k = n
        while k >= prime:
            k //= prime
            power += k
        factorial_prime_powers[prime] = power
    return factorial_prime_powers

def main():
    with open('factori.in', 'r') as fin:
        numbers = list(map(int, fin.readlines()))
        numbers.pop()  # remove the last 0

    max_number = max(numbers)
    primes = sieve_of_eratosthenes(max_number)

    with open('factori.out', 'w') as fout:
        for n in numbers:
            factorial_prime_powers = calculate_factorial_prime_powers(n, primes)
            fout.write(prime_factorization(factorial_prime_powers) + '\n')

main()
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to compute the primes up to n using the Sieve of Eratosthenes
def primes_up_to(n):
    sieve = np.ones(n+1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(n**0.5) + 1):
        if sieve[i]:
            sieve[i*i:n+1:i] = False
    return np.nonzero(sieve)[0]

# Function to count the occurrences of each prime in the factorial of n
def factorial_prime_factors(n, primes):
    factors = {}
    for prime in primes:
        power = 0
        divisor = prime
        while divisor <= n:
            power += n // divisor
            divisor *= prime
        if power > 0:
            factors[prime] = power
    return factors

# Function to read numbers from input file and write the results to the output file
def process_numbers(input_file, output_file):
    with open(input_file, 'r') as fin:
        numbers = [int(line.strip()) for line in fin if int(line.strip())]

    max_n = max(numbers)
    primes = primes_up_to(max_n)

    with open(output_file, 'w') as fout:
        for n in numbers:
            factors = factorial_prime_factors(n, primes)
            output_line = ' '.join(str(factors[p]) for p in sorted(factors))
            fout.write(output_line + '\n')

# Call the main function to process the input and output files
process_numbers('factori.in', 'factori.out')
```
```
---------- user ----------


Expected program to write result to `factori.out` and read from `factori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient sieve algorithm to find all primes up to a certain limit
def sieve_of_eratosthenes(limit):
    sieve = np.ones(limit + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(np.sqrt(limit)) + 1):
        if sieve[i]:
            sieve[i*i:limit+1:i] = False
    primes = np.flatnonzero(sieve)
    return primes

# Count the power of each prime in the factorization of n!
def count_factors(n, primes):
    factors = []
    for prime in primes:
        count = 0
        k = n
        while k >= prime:
            k //= prime
            count += k
        if count > 0:
            factors.append(count)
    return factors

# Main function to read the input, process the data, and write the output
def main():
    with open('factori.in', 'r') as file_in:
        numbers = [int(line.strip()) for line in file_in if int(line.strip())]

    primes = sieve_of_eratosthenes(max(numbers))

    with open('factori.out', 'w') as file_out:
        for number in numbers:
            factor_counts = count_factors(number, primes)
            file_out.write(' '.join(map(str, factor_counts)) + '\n')

main()
```
```
