---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from collections import Counter

# Function to find the maximum sequence of the same element
def max_sequence(arr):
    max_count = count = 1
    for i in range(1, len(arr)):
        if arr[i] == arr[i - 1]:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 1
    return max_count

# Function to find if there is a majority element
def has_majority(arr, n):
    counts = Counter(arr)
    for key, value in counts.items():
        if value > n // 2:
            return True
    return False

# Read the input
with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    majority_count = 0
    max_consecutive = 0
    for _ in range(m):
        row = np.fromfile(file, dtype=int, count=n, sep=" ")
        if has_majority(row, n):
            majority_count += 1
        max_consecutive = max(max_consecutive, max_sequence(row))

# Write the output
with open('livada.out', 'w') as file:
    file.write(f"{majority_count}\n")
    file.write(f"{max_consecutive}\n")
```

This code should be both time and memory efficient. It uses numpy to read the rows of trees directly from the file, which is generally faster and more memory efficient than reading them into a list. The `Counter` from `collections` is a hash map and will be efficient for counting frequencies. The `max_sequence` function iterates over the array only once to find the longest consecutive sequence, which is optimal. The `has_majority` function also iterates only once over the array to find if there is a majority element. This code should meet the specified memory requirement as it only stores one row in memory at a time and uses efficient data structures for counting.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed or not available in the current environment where the code is being run. Since the problem requires optimizing for memory and we are asked to use highly efficient libraries whenever possible, I will rewrite the solution without the use of `numpy`, sticking to the standard Python libraries, to ensure that it works in an environment without `numpy`.

Here is the updated solution, which reads from 'livada.in' and writes to 'livada.out':

```python
from collections import Counter

def max_sequence(arr):
    max_count = count = 1
    prev_element = arr[0]
    for element in arr[1:]:
        if element == prev_element:
            count += 1
            max_count = max(max_count, count)
        else:
            prev_element = element
            count = 1
    return max_count

def has_majority(arr, n):
    counts = Counter(arr)
    for count in counts.values():
        if count > n // 2:
            return True
    return False

with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    majority_count = 0
    max_consecutive = 0
    for _ in range(m):
        row = list(map(int, file.readline().split()))
        if has_majority(row, n):
            majority_count += 1
        max_consecutive = max(max_consecutive, max_sequence(row))

with open('livada.out', 'w') as file:
    file.write(f"{majority_count}\n")
    file.write(f"{max_consecutive}\n")
```

This code should work without `numpy` and be efficient in both time and memory usage. The logic remains the same as the previous solution but relies solely on built-in Python functionalities. We use `list` and `map` to create the array of tree types for each row from the input file. The `Counter` from `collections` is used to count the frequencies, and custom functions are used to determine the longest consecutive sequence and the presence of a majority element.
