---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def count_majority_and_longest_sequence(arr, n):
    # Initialize variables
    prev = arr[0]
    count = 1
    max_count = 1
    majority_count = 0
    longest_sequence = 1
    
    # Iterate over the array to determine the longest sequence
    for i in range(1, n):
        if arr[i] == prev: 
            count += 1
        else:
            prev = arr[i]
            count = 1
        longest_sequence = max(longest_sequence, count)
    
    # Count the occurrence of each element to determine if there is a majority
    unique_elements, counts_elements = np.unique(arr, return_counts=True)
    if np.any(counts_elements > n // 2):
        majority_count = 1

    return majority_count, longest_sequence

# Read from livada.in
with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    
    majority_rows = 0
    max_consecutive = 0
    
    for i in range(m):
        row = np.fromstring(file.readline(), dtype=int, sep=' ')
        majority, longest = count_majority_and_longest_sequence(row, n)
        majority_rows += majority
        max_consecutive = max(max_consecutive, longest)

# Write to livada.out
with open('livada.out', 'w') as file:
    file.write(f"{majority_rows}\n")
    file.write(f"{max_consecutive}\n")
```

This code uses numpy to efficiently process each row of trees, counting the soi majoritar (majority type) and the longest sequence of the same type. It reads from 'livada.in' and writes to 'livada.out', taking care to minimize memory usage and avoid exceeding the 8MB limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the environment in which the code was executed does not have the `numpy` library installed. Given that installing external libraries is not feasible in this context, we need to rewrite the solution without using `numpy` or any other external libraries.

Here is the revised solution that only uses built-in Python functionalities:

```python
def count_majority_and_longest_sequence(arr, n):
    # Initialize variables
    prev = arr[0]
    count = 1
    max_count = 1
    majority_count = 0
    longest_sequence = 1
    
    # Create a dictionary to count occurrences of each element
    occurrence_counter = {}
    
    # Iterate over the array to determine the longest sequence and count occurrences
    for i in range(n):
        occurrence_counter[arr[i]] = occurrence_counter.get(arr[i], 0) + 1
        if arr[i] == prev:
            count += 1
        else:
            prev = arr[i]
            count = 1
        longest_sequence = max(longest_sequence, count)
    
    # Check if any element has occurred more than n/2 times
    for count in occurrence_counter.values():
        if count > n // 2:
            majority_count = 1
            break

    return majority_count, longest_sequence

# Read from livada.in
with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    
    majority_rows = 0
    max_consecutive = 0
    
    for i in range(m):
        row = list(map(int, file.readline().split()))
        majority, longest = count_majority_and_longest_sequence(row, n)
        majority_rows += majority
        max_consecutive = max(max_consecutive, longest)

# Write to livada.out
with open('livada.out', 'w') as file:
    file.write(f"{majority_rows}\n")
    file.write(f"{max_consecutive}\n")
```

This new version of the code uses a dictionary to count occurrences instead of `numpy`'s unique method. The rest of the code logic remains the same, with the program reading from `livada.in` and writing to `livada.out` without using `input()` or `print()`. The memory usage should also be within acceptable limits since it processes one row at a time.
