---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Import numpy for faster array handling
import numpy as np

# Function to find the maximum consecutive sequence of the same element
def find_max_consecutive(arr):
    max_count = 0
    count = 1

    for i in range(1, len(arr)):
        if arr[i] == arr[i - 1]:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 1

    return max(max_count, count)

# Function to check if there is a majority element in the array
def has_majority(arr, n):
    counts = dict()
    
    for num in arr:
        counts[num] = counts.get(num, 0) + 1
        if counts[num] > n // 2:
            return True
    return False

# Read from livada.in
with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    max_consecutive = 0
    rows_with_majority = 0

    for _ in range(m):
        # Using numpy to read and convert the row to an array for faster computation
        row = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
        # Check if there is a majority in the current row
        if has_majority(row, n):
            rows_with_majority += 1
        # Find the maximum consecutive sequence
        max_consecutive = max(max_consecutive, find_max_consecutive(row))

# Write to livada.out
with open('livada.out', 'w') as file:
    file.write(f"{rows_with_majority}\n{max_consecutive}\n")
```

This Python code reads from `livada.in` and writes to `livada.out` the required results, while optimizing for both time and memory usage. It utilizes numpy just for reading and converting each row to an array. The has_majority and find_max_consecutive functions compute the majority and the maximum number of consecutive elements in each row, respectively. The code does not use `input()` or `print()` for I/O operations.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1 and the error message indicate that the `numpy` module is not available in the current environment where the code is being executed. Since the prompt requires that the solution optimize both time and memory usage and suggests utilizing numpy, but we have a strict memory constraint and we're running into an environment issue, we may need to revise the strategy and use pure Python without any third-party libraries.

Let's refactor the solution to use pure Python while remaining efficient.

```python
# Function to find the maximum consecutive sequence of the same element
def find_max_consecutive(arr):
    max_count = 1
    count = 1
    for i in range(1, len(arr)):
        if arr[i] == arr[i - 1]:
            count += 1
            max_count = max(max_count, count)
        else:
            count = 1
    return max_count

# Function to check if there is a majority element in the array
def has_majority(arr, n):
    counts = dict()
    for num in arr:
        counts[num] = counts.get(num, 0) + 1
        if counts[num] > n // 2:
            return True
    return False

# Read from livada.in
with open('livada.in', 'r') as file:
    m, n, p = map(int, file.readline().split())
    max_consecutive = 0
    rows_with_majority = 0

    for _ in range(m):
        # Read the row and convert it to a list of integers
        row = list(map(int, file.readline().split()))
        # Check if there is a majority in the current row
        if has_majority(row, n):
            rows_with_majority += 1
        # Find the maximum consecutive sequence
        max_consecutive = max(max_consecutive, find_max_consecutive(row))

# Write to livada.out
with open('livada.out', 'w') as file:
    file.write(f"{rows_with_majority}\n{max_consecutive}\n")
```

This solution should work in a Python environment without any third-party libraries, while still adhering to the memory and time optimization requirements to the extent possible within the constraints of the challenge and the programming language.
