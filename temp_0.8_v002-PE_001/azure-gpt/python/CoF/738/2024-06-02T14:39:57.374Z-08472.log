---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the value of n from "ucif.in".
with open('ucif.in', 'r') as f:
    n = int(f.readline().strip())

# We can calculate the last digit of each i^i and add them up, keeping only the last digit.
# Since raising a number to its own power, only the last digit's pattern repeats every 4 steps,
# we can optimize further by precomputing these patterns for the digits 0-9 and avoid large power calculations.
patterns = {
    0: [0], 1: [1], 2: [6, 2, 4, 8], 3: [1, 3, 9, 7],
    4: [6, 4], 5: [5], 6: [6], 7: [1, 7, 9, 3],
    8: [6, 8, 4, 2], 9: [1, 9]
}

# Compute the sum of the last digits of i^i for i in 1 to n.
sum_last_digit = 0
for i in range(1, n + 1):
    last_digit_i = i % 10
    pattern = patterns[last_digit_i]
    # The power cycle length for the current last digit
    cycle_length = len(pattern)
    # Find the last digit of i^i by using the precomputed patterns
    last_digit_pow = pattern[(i - 1) % cycle_length]
    sum_last_digit += last_digit_pow
    sum_last_digit %= 10  # Keep only the last digit of the sum

# Write the last digit of the sum to "ucif.out".
with open('ucif.out', 'w') as f:
    f.write(str(sum_last_digit))
```
```
---------- user ----------


Expected program to write result to `ucif.out` and read from `ucif.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution to write the last digit of sum 1^1 + 2^2 + ... + n^n to "ucif.out"

# Read the value of n from "ucif.in"
with open('ucif.in', 'r') as f:
    n = int(f.readline().strip())

# Since the last digit of i^i repeats in cycles, we only need to consider the last digit of i
# and the pattern it follows. For example, 2^2 = 4, 2^3 = 8, 2^4 = 6 (back to the cycle beginning),
# so we can use a precomputed list of such cycles for each possible last digit to avoid the heavy computation.
#
# The cycle for each digit (0-9) is as follows:
# 0: [0], 1: [1], 2: [6, 2, 4, 8], 3: [1, 3, 9, 7], 4: [6, 4],
# 5: [5], 6: [6], 7: [1, 7, 9, 3], 8: [6, 8, 4, 2], 9: [1, 9]

# Precompute the cycles
cycles = {
    0: [0],
    1: [1],
    2: [6, 2, 4, 8],
    3: [1, 3, 9, 7],
    4: [6, 4],
    5: [5],
    6: [6],
    7: [1, 7, 9, 3],
    8: [6, 8, 4, 2],
    9: [1, 9]
}

# Initialize the sum of the last digits to 0
sum_last_digit = 0

# Calculate the last digit of the sum 1^1 + 2^2 + ... + n^n
for i in range(1, n + 1):
    last_digit = i % 10  # Last digit of i
    cycle_length = len(cycles[last_digit])
    power_index = (i % cycle_length) - 1  # Adjusted index for 1-based to 0-based
    # If the power is 0-based index out of range, use the last element of cycle
    power_index = cycle_length - 1 if power_index < 0 else power_index
    sum_last_digit += cycles[last_digit][power_index]
    sum_last_digit %= 10  # Keep only the last digit

# Write the last digit of the sum to "ucif.out"
with open('ucif.out', 'w') as f:
    f.write(str(sum_last_digit))
```
```
---------- user ----------


Expected program to write result to `ucif.out` and read from `ucif.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the correct code block that satisfies the requirements and constraints mentioned:

```python
# Read the value of n from "ucif.in".
with open('ucif.in', 'r') as infile:
    n = int(infile.readline().strip())

# The sum follows a pattern every 10 numbers, we can use this pattern to avoid large number computation
# The patterns are pre-calculated for the last digit of (i^i) for i from 0 to 9
patterns = {
    0: [0], 1: [1], 2: [6, 2, 4, 8], 3: [1, 3, 9, 7],
    4: [6, 4], 5: [5], 6: [6], 7: [1, 7, 9, 3],
    8: [6, 8, 4, 2], 9: [1, 9]
}

# Initialize sum_last_digit to keep track of the last digit of the sum
sum_last_digit = 0

# Compute the last digit of the sum
for i in range(1, n + 1):
    last_digit = i % 10
    # Find the appropriate pattern based on the last digit of i
    pattern = patterns[last_digit]
    
    # The power to which the last_digit is raised in the pattern cycle
    power = (i - 1) % len(pattern)
    
    # Add the corresponding last digit from the pattern to the sum
    sum_last_digit += pattern[power]
    sum_last_digit %= 10  # We are only interested in the last digit of the sum

# Write the last digit of the sum to "ucif.out".
with open('ucif.out', 'w') as outfile:
    outfile.write(str(sum_last_digit))
```

Please save this code block to a file with a `.py` extension and make sure that the input file `ucif.in` is in the same directory before running the program. The output will be written to `ucif.out`.
