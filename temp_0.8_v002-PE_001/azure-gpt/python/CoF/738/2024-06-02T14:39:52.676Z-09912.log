---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the number n from the input file
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Since the memory limit is strict, we avoid creating large arrays or unnecessary calculations.
# We'll keep track of the sum modulo 10, which is the last digit of the sum.
last_digit_sum = 0

# Iterate from 1 to n
for i in range(1, n + 1):
    # Calculate the last digit of i^i and add it to the sum, keeping only the last digit of the sum.
    # We use numpy's power function, as it's optimized for performance.
    # The operation is done modulo 10 to ensure we only keep the last digit.
    last_digit_sum = (last_digit_sum + int(np.power(i, i, dtype=np.int64)) % 10) % 10

# Write the last digit of the sum to the output file
with open('ucif.out', 'w') as file:
    file.write(str(last_digit_sum))
```
```

Note that the use of `numpy` here might not be necessary since we are only dealing with small integers, and Python's built-in `pow` function with a modulo can handle this efficiently as well. However, I used `numpy` following the given directive to utilize highly efficient libraries. If memory is a significant concern, replacing `np.power` with the built-in `pow` function might be more memory-efficient.
---------- user ----------


Expected program to write result to `ucif.out` and read from `ucif.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read the number n from the input file
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Since the memory limit is strict, we avoid creating large arrays or unnecessary calculations.
# We'll keep track of the sum modulo 10, which is the last digit of the sum.
last_digit_sum = 0

# Iterate from 1 to n
for i in range(1, n + 1):
    # Calculate the last digit of i^i and add it to the sum, keeping only the last digit of the sum.
	# Efficiently compute i^i modulo 10 using the built-in pow function to handle large numbers.
    last_digit_sum = (last_digit_sum + pow(i, i, 10)) % 10

# Write the last digit of the sum to the output file
with open('ucif.out', 'w') as file:
    file.write(str(last_digit_sum))
```
