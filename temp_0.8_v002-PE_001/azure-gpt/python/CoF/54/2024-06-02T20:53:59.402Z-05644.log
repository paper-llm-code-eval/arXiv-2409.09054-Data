---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
import heapq

# Load data from the input file
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().split())
    recharge_bases = np.array(list(map(int, file.readline().split())), dtype=np.int8)
    M = int(file.readline())
    roads = [list(map(int, file.readline().split())) for _ in range(M)]

# This will store the result
T_min = np.inf
W_min = K + 1

# Create graph
graph = {i: [] for i in range(1, N + 1)}
for a, b, T, W in roads:
    graph[a].append((b, T, W))
    graph[b].append((a, T, W))

# Dijkstra's algorithm with a priority queue
def dijkstra(K):
    queue = [(0, 1, K)]  # (time, position, watts_left)
    visited = {(1, K): 0}
    while queue:
        time, position, watts_left = heapq.heappop(queue)
        
        if position == N:  # Reached destination
            return time
        
        for neighbor, T, W in graph[position]:
            if watts_left >= W:  # If the lantern has enough battery
                new_time = time + T
                new_watts_left = K if recharge_bases[neighbor - 1] == 1 else watts_left - W
                
                if (neighbor, new_watts_left) not in visited or visited[(neighbor, new_watts_left)] > new_time:
                    visited[(neighbor, new_watts_left)] = new_time
                    heapq.heappush(queue, (new_time, neighbor, new_watts_left))
    
    return np.inf

# Iterate over all lantern types
for watts in range(1, K + 1):
    time = dijkstra(watts)
    if time < T_min or (time == T_min and watts < W_min):
        T_min, W_min = time, watts

# Write the result to the output file
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

This code block first reads the input from "lanterna.in", then computes the shortest time and corresponding lowest watt lantern type required using a modified Dijkstra's algorithm, and finally writes the result to "lanterna.out". It is optimized for memory by using primitive data types and avoiding unnecessary data structures. It should work within the 8MB memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the `numpy` library is not available in the environment where the program is being executed. Since the challenge emphasizes the importance of memory efficiency and the environment does not have `numpy` installed, we should avoid using it and instead utilize standard Python data structures and functions to find an efficient solution.

Below is the rewritten solution without using `numpy`:

```python
import heapq

# Load data from the input file
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().split())
    recharge_bases = list(map(int, file.readline().split()))
    M = int(file.readline())
    roads = [list(map(int, file.readline().split())) for _ in range(M)]

# This will store the result
T_min = float('inf')
W_min = K + 1

# Create graph
graph = {i: [] for i in range(1, N + 1)}
for a, b, T, W in roads:
    graph[a].append((b, T, W))
    graph[b].append((a, T, W))

# Dijkstra's algorithm with a priority queue
def dijkstra(K):
    queue = [(0, 1, K)]  # (time, position, watts_left)
    visited = {(1, K): 0}
    while queue:
        time, position, watts_left = heapq.heappop(queue)
        
        if position == N:  # Reached destination
            return time
        
        for neighbor, T, W in graph[position]:
            if watts_left >= W:  # If the lantern has enough battery
                new_time = time + T
                new_watts_left = K if recharge_bases[neighbor - 1] == 1 else watts_left - W
                
                if (neighbor, new_watts_left) not in visited or visited[(neighbor, new_watts_left)] > new_time:
                    visited[(neighbor, new_watts_left)] = new_time
                    heapq.heappush(queue, (new_time, neighbor, new_watts_left))
    
    return float('inf')

# Iterate over all lantern types
for watts in range(1, K + 1):
    time = dijkstra(watts)
    if time < T_min or (time == T_min and watts < W_min):
        T_min, W_min = time, watts

# Write the result to the output file
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

This solution should meet the requirements without using `numpy` or any other external library and also stay within the memory limit. It reads the input from `lanterna.in`, runs the Dijkstra algorithm for each possible lantern wattage, and writes the result to `lanterna.out`.
