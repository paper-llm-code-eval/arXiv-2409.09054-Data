---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import dijkstra

# Reading data from the input file
with open('lanterna.in', 'r') as fin:
    N, K = map(int, fin.readline().split())
    recharging_bases = np.array(list(map(int, fin.readline().split())))
    M = int(fin.readline())
    edges = np.array([list(map(int, fin.readline().split())) for _ in range(M)])

# Transform the edge list to an adjacency matrix for both time and energy
time_graph = csr_matrix((N, N), dtype=np.int32)
energy_graph = csr_matrix((N, N), dtype=np.int32)

# Fill the graphs with the appropriate values from the edges
for a, b, T, W in edges:
    time_graph[a-1, b-1] = T
    time_graph[b-1, a-1] = T
    energy_graph[a-1, b-1] = W
    energy_graph[b-1, a-1] = W

# Initialize variables for the results
min_time = np.inf
min_watts = np.inf

# Run Dijkstra's algorithm for each type of lantern
for watts in range(1, K+1):
    # Create a mask for the available energy in the battery
    battery_mask = (energy_graph <= watts).toarray()
    # Compute shortest path with the energy constraint
    dist_matrix, predecessors = dijkstra(csgraph=time_graph.multiply(battery_mask),
                                         directed=False, indices=0,
                                         return_predecessors=True)

    current_time = dist_matrix[N-1]

    # Check if the path is valid
    if current_time == np.inf:
        continue

    # Check if all segments of the path have sufficient battery
    path_valid = True
    node = N - 1
    while predecessors[node] != -9999:
        prev_node = predecessors[node]
        if not recharging_bases[prev_node]:
            if energy_graph[node, prev_node] > watts:
                path_valid = False
                break
        node = prev_node

    # Update the minimal time and watts if the current path is better
    if path_valid and current_time <= min_time:
        min_time = current_time
        min_watts = min(min_watts, watts)

# Write the result to the output file
with open('lanterna.out', 'w') as fout:
    fout.write(f"{int(min_time)} {min_watts}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution attempt imported numpy and scipy, but these modules are not part of the Python standard library and cannot be used if they're not available in the environment where the code is run. To resolve this problem, I will rewrite the solution to solve the challenge without using numpy and scipy, sticking to the Python standard library. Here's the fixed solution:

```python
from heapq import heappop, heappush

def read_input(filename):
    with open(filename, 'r') as file:
        N, K = map(int, file.readline().split())
        recharge_stations = list(map(int, file.readline().split()))
        M = int(file.readline())
        edges = [list(map(int, file.readline().split())) for _ in range(M)]
    return N, K, recharge_stations, M, edges

def write_output(filename, min_time, min_watts):
    with open(filename, 'w') as file:
        file.write(f"{min_time} {min_watts}\n")

def dijkstra(N, edges, recharge_stations, max_watts):
    graph = {i: {} for i in range(N)}
    for a, b, T, W in edges:
        if W <= max_watts:
            graph[a-1][b-1] = T
            graph[b-1][a-1] = T

    # Heap of (time, node, watts_left), starting from node 0 with max_watts
    heap = [(0, 0, max_watts)]
    visited = set()

    while heap:
        time, node, watts_left = heappop(heap)
        if node == N - 1:
            return time
        if (node, watts_left) in visited:
            continue
        visited.add((node, watts_left))

        for neighbour, T in graph[node].items():
            new_watts_left = watts_left - edges[node][neighbour] if node in edges and neighbour in edges[node] else max_watts
            if new_watts_left >= 0:
                if recharge_stations[neighbour]:
                    new_watts_left = max_watts
                heappush(heap, (time + T, neighbour, new_watts_left))

    return float('inf')

def find_min_lantern_type(N, K, recharge_stations, M, edges):
    min_time = float('inf')
    min_watts = None

    for watts in range(1, K + 1):
        time = dijkstra(N, edges, recharge_stations, watts)
        if time < min_time:
            min_time = time
            min_watts = watts
        elif time == min_time and watts < min_watts:
            min_watts = watts

    return min_time, min_watts

def main():
    N, K, recharge_stations, M, edges = read_input('lanterna.in')
    min_time, min_watts = find_min_lantern_type(N, K, recharge_stations, M, edges)
    write_output('lanterna.out', min_time, min_watts)

if __name__ == "__main__":
    main()
```

This solution reads from 'lanterna.in', computes the shortest path using Dijkstra's algorithm implemented with a priority queue, and writes to 'lanterna.out'. No additional libraries beyond the Python standard library are used.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 63, in <module>
    main()
  File "/app/app.py", line 59, in main
    min_time, min_watts = find_min_lantern_type(N, K, recharge_stations, M, edges)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 52, in find_min_lantern_type
    elif time == min_time and watts < min_watts:
                              ^^^^^^^^^^^^^^^^^
TypeError: '<' not supported between instances of 'int' and 'NoneType'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
