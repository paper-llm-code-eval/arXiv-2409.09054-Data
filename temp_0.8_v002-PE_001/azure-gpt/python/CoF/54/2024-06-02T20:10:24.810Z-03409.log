---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:````markdown
```python
import heapq
import numpy as np

# Implementing the Dijkstra algorithm with additional conditions for lantern types
def dijkstra(N, K, M, friendly_bases, roads):
    min_time = np.full((N + 1, K + 1), np.inf)
    min_time[1, :] = 0
    pq = [(0, 1, k) for k in range(1, K + 1)]  # (time, node, battery level)
    heapq.heapify(pq)

    while pq:
        current_time, node, battery_level = heapq.heappop(pq)

        # Check if this is the best known time for this node with current battery level
        if current_time > min_time[node, battery_level]:
            continue

        # Traverse all neighbors of the current node
        for neighbor, time, battery_cost in roads[node]:
            if battery_level >= battery_cost:
                # Update if the time to reach the neighbor is improved
                next_time = current_time + time
                next_battery = battery_level - battery_cost if friendly_bases[neighbor] == 0 else K

                if next_time < min_time[neighbor, next_battery]:
                    min_time[neighbor, next_battery] = next_time
                    heapq.heappush(pq, (next_time, neighbor, next_battery))

    return min_time[N, :]

# Read input
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().strip().split())
    friendly_bases = np.array([int(x) for x in file.readline().strip().split()])
    M = int(file.readline().strip())

    # Create a list of roads for each node
    roads = [[] for _ in range(N + 1)]
    for _ in range(M):
        a, b, T, W = map(int, file.readline().strip().split())
        roads[a].append((b, T, W))
        roads[b].append((a, T, W))

# Apply Dijkstra algorithm
min_time_by_battery = dijkstra(N, K, M, friendly_bases, roads)

# Extract minimum time and corresponding battery type
T_min = np.min(min_time_by_battery)
W_min = np.argmin(min_time_by_battery) if T_min != np.inf else -1

# Write output
with open('lanterna.out', 'w') as file:
    file.write(f"{int(T_min)} {W_min}\n")
```
````
Please note that the above code assumes that `numpy` is allowed and the environment has sufficient memory for the `numpy` arrays. The algorithm makes use of Dijkstra's algorithm with a priority queue to find the shortest path, while also keeping track of the different battery levels as a third dimension to the problem. It should work well within the given constraints.
---------- user ----------


Expected program to write result to `lanterna.out` and read from `lanterna.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import heapq
import numpy as np

# Helper function to read data from file
def read_input(filename):
    with open(filename, 'r') as file:
        N, K = map(int, file.readline().strip().split())
        friendly_bases = list(map(int, file.readline().strip().split()))
        M = int(file.readline().strip())

        roads = [[] for _ in range(N + 1)]
        for _ in range(M):
            a, b, T, W = map(int, file.readline().strip().split())
            roads[a].append((b, T, W))
            roads[b].append((a, T, W))

    return N, K, friendly_bases, roads

# Helper function to write output to file
def write_output(filename, T_min, W_min):
    with open(filename, 'w') as file:
        file.write(f"{int(T_min)} {W_min}\n")

# Implementing the Dijkstra algorithm with additional conditions for lantern types
def dijkstra(N, K, friendly_bases, roads):
    min_time = np.full((N + 1, K + 1), np.inf)
    min_time[1, :] = 0
    pq = [(0, 1, k) for k in range(K + 1)]  # (time, node, battery level)
    heapq.heapify(pq)

    while pq:
        current_time, node, battery_level = heapq.heappop(pq)

        if current_time > min_time[node, battery_level]:
            continue

        for neighbor, time, battery_cost in roads[node]:
            if battery_level >= battery_cost:
                next_time = current_time + time
                next_battery_level = battery_level - battery_cost if friendly_bases[neighbor] == 0 else K

                if next_time < min_time[neighbor, next_battery_level]:
                    min_time[neighbor, next_battery_level] = next_time
                    heapq.heappush(pq, (next_time, neighbor, next_battery_level))

    min_times = min_time[N, 1:]
    T_min = np.min(min_times)
    W_min = np.argmin(min_times) + 1 if T_min != np.inf else -1

    return T_min, W_min

# Main code
if __name__ == "__main__":
    N, K, friendly_bases, roads = read_input('lanterna.in')
    T_min, W_min = dijkstra(N, K, friendly_bases, roads)
    write_output('lanterna.out', T_min, W_min)
```
This updated code will write the results to `lanterna.out` and read from `lanterna.in`. It does not use `input()` or `print()`, and it utilizes `numpy` for efficient array operations.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the environment does not have the `numpy` library installed, and we have a strict memory limit which also suggests avoiding large libraries like `numpy`. To address this issue, I'll rewrite the solution to use only Python's built-in libraries and data types, ensuring the memory usage is optimized. 

Here's the entire solution without using `numpy`:

```python
import heapq

# Helper function to read data from file
def read_input(filename):
    with open(filename, 'r') as file:
        N, K = map(int, file.readline().strip().split())
        friendly_bases = list(map(int, file.readline().strip().split()))
        M = int(file.readline().strip())

        roads = {i: [] for i in range(1, N + 1)}
        for _ in range(M):
            a, b, T, W = map(int, file.readline().strip().split())
            roads[a].append((b, T, W))
            roads[b].append((a, T, W))

    return N, K, friendly_bases, roads

# Helper function to write output to file
def write_output(filename, T_min, W_min):
    with open(filename, 'w') as file:
        file.write(f"{T_min} {W_min}\n")

# Implementing the Dijkstra algorithm with additional conditions for lantern types
def dijkstra(N, K, friendly_bases, roads):
    min_time = {(node, battery): float('inf') for node in range(1, N + 1) for battery in range(K + 1)}
    min_time[(1, K)] = 0
    pq = [(0, 1, K)]  # (time, node, battery level)
    
    while pq:
        current_time, node, battery_level = heapq.heappop(pq)

        if current_time > min_time[(node, battery_level)]:
            continue

        for neighbor, time, battery_cost in roads[node]:
            if battery_level >= battery_cost:
                next_time = current_time + time
                next_battery_level = battery_level - battery_cost if friendly_bases[neighbor] == 0 else K

                if next_time < min_time[(neighbor, next_battery_level)]:
                    min_time[(neighbor, next_battery_level)] = next_time
                    heapq.heappush(pq, (next_time, neighbor, next_battery_level))

    # Get the minimum time and corresponding battery level for reaching node N
    T_min = min(min_time[(N, battery)] for battery in range(K + 1))
    W_min = min(battery for battery in range(K + 1) if min_time[(N, battery)] == T_min)
    
    return T_min, W_min

# Main code
if __name__ == "__main__":
    N, K, friendly_bases, roads = read_input('lanterna.in')
    T_min, W_min = dijkstra(N, K, friendly_bases, roads)
    write_output('lanterna.out', T_min, W_min)
```

This code should work within the constraints of the given environment and respect the memory limit. It uses a dictionary to store the minimum time based on the location and battery levels, which also allows for efficient retrieval and updates. The priority queue is used to select the next node to visit based on the smallest time taken so far.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 53, in <module>
    T_min, W_min = dijkstra(N, K, friendly_bases, roads)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 38, in dijkstra
    next_battery_level = battery_level - battery_cost if friendly_bases[neighbor] == 0 else K
                                                         ~~~~~~~~~~~~~~^^^^^^^^^^
IndexError: list index out of range

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
