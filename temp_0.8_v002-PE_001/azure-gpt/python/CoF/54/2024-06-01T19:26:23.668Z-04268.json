{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/54/2024-06-01T19:26:23.668Z-04268.log",
  "attemptStart": 1717269983.668,
  "attemptEnd": 1717270042.933,
  "attemptDuration": 59.265000104904175,
  "code": "from heapq import heappop, heappush\nfrom collections import defaultdict\n\ndef read_input(filename):\n    with open(filename, 'r') as file:\n        N, K = map(int, file.readline().split())\n        friendly_bases = list(map(int, file.readline().split()))\n        M = int(file.readline())\n        roads = [list(map(int, file.readline().split())) for _ in range(M)]\n    return N, K, friendly_bases, M, roads\n\ndef write_output(filename, Tmin, Wmin):\n    with open(filename, 'w') as file:\n        file.write(f\"{Tmin} {Wmin}\\n\")\n\ndef dijkstra(N, M, roads, friendly_bases, K):\n    adj_list = defaultdict(list)\n    for a, b, T, W in roads:\n        adj_list[a].append((b, T, W))\n        adj_list[b].append((a, T, W))\n    \n    distances = [float('inf')] * (N + 1)\n    distances[1] = 0\n    battery_consumption = [0] * (N + 1)\n    \n    queue = [(0, 1, K)]\n    \n    while queue:\n        current_distance, current_node, current_battery = heappop(queue)\n        \n        if friendly_bases[current_node - 1]:\n            current_battery = K\n        \n        for next_node, T, W in adj_list[current_node]:\n            next_distance = current_distance + T\n            next_battery = current_battery - W\n            if next_battery >= 0 and (next_distance < distances[next_node] or (next_distance == distances[next_node] and next_battery > battery_consumption[next_node])):\n                distances[next_node] = next_distance\n                battery_consumption[next_node] = next_battery\n                heappush(queue, (next_distance, next_node, next_battery))\n    \n    Tmin = distances[N]\n    Wmin = K - battery_consumption[N] + 1\n    return Tmin, Wmin\n\n# Read the input\nN, K, friendly_bases, M, roads = read_input(\"lanterna.in\")\n\n# Run Dijkstra's algorithm\nTmin, Wmin = dijkstra(N, M, roads, friendly_bases, K)\n\n# Write the output\nwrite_output(\"lanterna.out\", Tmin, Wmin)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2948,
  "metadata": {
    "id": 54,
    "examples": [
      {
        "in": "7 10\n1 0 1 0 0 0 0\n7\n1 2 10 3\n1 4 5 5\n2 3 10 3\n4 3 15 1\n3 6 4 3\n6 5 2 2\n5 7 1 0",
        "out": "27 6",
        "explainer": ""
      }
    ],
    "body": "Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \\leq W \\leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.\n\nCunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).\n\n# Date de intrare\nPe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\\ b\\ T\\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.\n\n# Date de ieşire\nIn fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.\n\n# Restricţii şi precizări\n* $2 ≤ N ≤ 50$\n* $1 ≤ K ≤ 1 \\ 000$\n* $1 ≤ M ≤ N(N-1)/2$\n* Între două oraşe diferite poate exista maximum un drum direct.\n* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$\n* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.\n* Punctajul pentru un test se va acorda in felul următor:\n* 30% daca este determinat corect $T_{min}$\n* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$",
    "header": {
      "problem_id": 54,
      "problem_name": "lanterna",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.05,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "lanterna.in",
      "output_filename": "lanterna.out",
      "multiple_solutions": true,
      "original_source": "OJI 2004 XI-XII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "lanterna.in",
      "output": "lanterna.out"
    },
    "consoleInteraction": false
  }
}