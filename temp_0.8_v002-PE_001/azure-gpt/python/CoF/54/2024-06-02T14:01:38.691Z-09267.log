---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
import heapq

# Read input from file
with open('lanterna.in', 'r') as f:
    N, K = map(int, f.readline().split())
    bases = list(map(int, f.readline().split()))
    M = int(f.readline().strip())
    edges = [list(map(int, f.readline().split())) for _ in range(M)]

# Create adjacency matrix for time and watts
time_matrix = np.full((N, N), np.inf)
watts_matrix = np.zeros((N, N), dtype=int)

# Populate the adjacency matrices
for edge in edges:
    a, b, T, W = edge
    time_matrix[a-1, b-1] = time_matrix[b-1, a-1] = T
    watts_matrix[a-1, b-1] = watts_matrix[b-1, a-1] = W

# Dijkstra's algorithm using a min-heap (priority queue)
def dijkstra(N, time_matrix, watts_matrix, bases, K):
    # Start with a tuple of (time, watts, node index) for the starting node
    min_heap = [(0, K, 0)]
    visited = set()
    min_time = np.full(N, np.inf)
    min_time[0] = 0
    min_watts = np.full(N, -1)
    min_watts[0] = K

    while min_heap:
        time, watts, node = heapq.heappop(min_heap)
        
        # Skip if this node was already visited
        if node in visited:
            continue
        visited.add(node)

        # Check if this is a friendly base
        if bases[node] == 1:
            watts = K

        # Check all adjacent nodes
        for neighbor in range(N):
            if time_matrix[node, neighbor] != np.inf:
                next_time = time + time_matrix[node, neighbor]
                next_watts = watts - watts_matrix[node, neighbor]

                # If the next node can be visited with enough watts and in less time
                if next_watts >= 0 and next_time < min_time[neighbor]:
                    min_time[neighbor] = next_time
                    min_watts[neighbor] = next_watts
                    heapq.heappush(min_heap, (next_time, next_watts, neighbor))

    return min_time, min_watts

# Run the algorithm
min_time, min_watts = dijkstra(N, time_matrix, watts_matrix, bases, K)

# Find the optimal lantern
time_to_end = min_time[-1]
optimal_lantern = min_watts[-1]

# Write output to file
with open('lanterna.out', 'w') as f:
    f.write(f"{time_to_end} {optimal_lantern}\n")
```

This code should read the input from the `lanterna.in` file, process it using the modified Dijkstra's algorithm to find the shortest path that satisfies the constraints of the problem, and write the output to the `lanterna.out` file. The algorithm takes into consideration the watts consumption and recharging at friendly bases, aiming to find the minimum consumption lantern for the shortest time path.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the environment where the program is being executed. Since the problem statement requires us to be efficient with memory, it's better not to rely on `numpy` or any other external libraries that may not be available or could potentially exceed the memory limits.

We can rewrite the solution without using `numpy` and with Python's built-in data structures and functions which should be more memory-efficient.

Here is the corrected solution without using `numpy`:

```python
import heapq

def read_input(filename):
    with open(filename, 'r') as file:
        N, K = map(int, file.readline().split())
        bases = list(map(int, file.readline().split()))
        M = int(file.readline().strip())
        edges = [list(map(int, file.readline().split())) for _ in range(M)]
    return N, K, bases, edges

def write_output(filename, time, lantern):
    with open(filename, 'w') as file:
        file.write(f"{time} {lantern}\n")

def dijkstra(N, edges, bases, K):
    graph = {i: [] for i in range(1, N+1)}
    for edge in edges:
        a, b, T, W = edge
        graph[a].append((b, T, W))
        graph[b].append((a, T, W))

    min_heap = [(0, K, 1)] # (time, remaining_watts, node)
    visited = [False] * (N + 1)
    best_time = float('inf')
    best_lantern = K

    while min_heap:
        time, watts, node = heapq.heappop(min_heap)
        if visited[node]:
            continue
        visited[node] = True

        if node == N:
            if time < best_time or (time == best_time and watts < best_lantern):
                best_time = time
                best_lantern = watts
            continue

        if bases[node-1] == 1:  # Recharge at friendly base
            watts = K

        for neighbor, T, W in graph[node]:
            if not visited[neighbor] and watts >= W:
                heapq.heappush(min_heap, (time + T, watts - W, neighbor))

    return best_time, best_lantern

def solve():
    N, K, bases, edges = read_input('lanterna.in')
    T_min, W_min = dijkstra(N, edges, bases, K)
    write_output('lanterna.out', T_min, K - W_min + 1)

solve()
```

This version of the code uses a priority queue implemented with `heapq` and a typical graph representation with adjacency lists. It follows the Dijkstra's algorithm to find the shortest path based on time while also keeping track of the remaining watts from the lantern. It then outputs the minimum time and the corresponding minimum lantern wattage that allows for the optimal path to be completed.
