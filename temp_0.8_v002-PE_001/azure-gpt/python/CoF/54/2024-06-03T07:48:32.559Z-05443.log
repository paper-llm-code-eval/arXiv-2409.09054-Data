---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
import heapq

# Define a function to read the input file and return relevant data
def read_input(filename):
    with open(filename) as file:
        N, K = map(int, file.readline().split())
        bases = list(map(int, file.readline().split()))
        M = int(file.readline())
        roads = [list(map(int, file.readline().split())) for _ in range(M)]
    return N, K, bases, M, roads

# Define the main function to solve the problem
def solve_lanterna_problem(N, K, bases, M, roads):
    # Create an adjacency matrix to represent the graph
    # Initialize with infinity for each entry
    graph = np.full((N, N), np.inf)
    
    # Fill in the adjacency matrix with road data
    for a, b, T, W in roads:
        graph[a - 1][b - 1] = graph[b - 1][a - 1] = (T, W)
        
    # Initialize the priority queue
    pq = []
    # Distance, power consumption, node, power type
    heapq.heappush(pq, (0, K, 0, K))
    
    # Initialize visited set to keep track of visited nodes with the power type
    visited = set()
    
    while pq:
        # Pop the minimum element
        T, W, node, lantern_power = heapq.heappop(pq)
        
        # If we have reached the destination with the smallest lantern power
        if node == N - 1:
            return T, lantern_power
        
        # If the node was already visited with a smaller or equal lantern power, skip it
        if (node, lantern_power) in visited:
            continue
        
        # Mark the current node as visited with the current lantern power
        visited.add((node, lantern_power))
        
        # Recharge if we're at a friendly base
        if bases[node] == 1:
            W = lantern_power
        
        # Explore neighbors
        for next_node in range(N):
            if graph[node][next_node] != np.inf:
                next_T, next_W = graph[node][next_node]
                
                # If we have enough power to go to the next node
                if W >= next_W:
                    heapq.heappush(pq, (T + next_T, W - next_W, next_node, lantern_power))
                    
    # If the destination is not reachable (should not happen according to the problem statement)
    return -1, -1

# Read the input file
N, K, bases, M, roads = read_input('lanterna.in')

# Solve the problem
T_min, W_min = solve_lanterna_problem(N, K, bases, M, roads)

# Write the output to file
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

Remember, the solution is optimized for time and memory, and all the operations are carried out with the constraints of the challenge in mind. This code reads from 'lanterna.in' and writes to 'lanterna.out', as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the numpy module is not installed or not available in the current environment where the code is being executed.

Given the memory constraints of the problem and the fact that the environment does not have numpy installed, I need to rewrite the solution without using numpy. I'll use Python's built-in data structures instead.

Here's the reworked solution:

```python
import heapq

# Define a function to read the input file and return relevant data
def read_input(filename):
    with open(filename) as file:
        N, K = map(int, file.readline().split())
        bases = list(map(int, file.readline().split()))
        M = int(file.readline())
        roads = [list(map(int, file.readline().split())) for _ in range(M)]
    return N, K, bases, M, roads

# Define the main function to solve the problem
def solve_lanterna_problem(N, K, bases, M, roads):
    # Create an adjacency list to represent the graph
    graph = {i: [] for i in range(N)}
    for a, b, T, W in roads:
        graph[a - 1].append((b - 1, T, W))
        graph[b - 1].append((a - 1, T, W))
    
    # Initialize the priority queue
    pq = []
    # Distance, power consumption, node, power type
    heapq.heappush(pq, (0, K, 0, K))
    
    # Initialize visited set to keep track of visited nodes with the power type
    visited = set()
    
    while pq:
        # Pop the minimum element
        T, W, node, lantern_power = heapq.heappop(pq)
        
        # If we have reached the destination with the smallest lantern power
        if node == N - 1:
            return T, lantern_power
        
        # If the node was already visited with a smaller or equal lantern power, skip it
        if (node, lantern_power) in visited:
            continue
        
        # Mark the current node as visited with the current lantern power
        visited.add((node, lantern_power))
        
        # Recharge if we're at a friendly base
        if bases[node] == 1:
            W = lantern_power
        
        # Explore neighbors
        for next_node, next_T, next_W in graph[node]:
            # If we have enough power to go to the next node
            if W >= next_W:
                heapq.heappush(pq, (T + next_T, W - next_W, next_node, lantern_power))
                    
    # If the destination is not reachable (should not happen according to the problem statement)
    return -1, -1

# Read the input file
N, K, bases, M, roads = read_input('lanterna.in')

# Solve the problem
T_min, W_min = solve_lanterna_problem(N, K, bases, M, roads)

# Write the output to file
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

This solution avoids using numpy and opts for an adjacency list to represent the graph, which is more memory-efficient for sparse graphs. It uses Python's heapq module for the priority queue and avoids unnecessary memory allocation. The algorithm should be efficient enough to handle the input size specified in the problem constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```
Expected output:
```
27 6
```
Found output:
```
27 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
