---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data from the 'dreptc.in' file
with open('dreptc.in', 'r') as fin:
    N, MaxC = map(int, fin.readline().split())
    points = [tuple(map(int, line.split())) for line in fin.readlines()]

# Create a dictionary to group points by color
points_by_color = {i: [] for i in range(1, MaxC + 1)}
for x, y, c in points:
    points_by_color[c].append((x, y))

# Efficiently count the number of rectangles for each color
rectangles_count = 0
for color, color_points in points_by_color.items():
    if len(color_points) < 4:  # Not enough points to form a rectangle
        continue
    
    # Convert the points into numpy arrays for vectorized operations
    color_points = np.array(color_points)
    
    # Create dictionaries to count the occurrences of x and y coordinates
    x_counts = np.unique(color_points[:, 0], return_counts=True)
    y_counts = np.unique(color_points[:, 1], return_counts=True)
    x_count_dict = dict(zip(x_counts[0], x_counts[1]))
    y_count_dict = dict(zip(y_counts[0], y_counts[1]))
    
    # Count the number of possible pairs for each unique x and y coordinate
    for count in x_count_dict.values():
        if count > 1:  # At least two points with the same x coordinate
            # The number of pairs is the binomial coefficient (n choose 2)
            rectangles_count += count * (count - 1) // 2
    for count in y_count_dict.values():
        if count > 1:  # At least two points with the same y coordinate
            # Just like before, count the pairs
            rectangles_count += count * (count - 1) // 2

# The final result is the product of pairs of x and y divided by 2
# as each rectangle is counted twice (once for horizontal side, once for vertical).
rectangles_count //= 2

# Write the output data to the 'dreptc.out' file
with open('dreptc.out', 'w') as fout:
    fout.write(str(rectangles_count) + '\n')
```
```

This solution reads the input coordinates, groups them by color, and then calculates the number of pairs of points with the same x-coordinate and the same y-coordinate for each color. This gives us the number of potential horizontal and vertical sides of rectangles. Since each rectangle has two horizontal and two vertical sides, the product of pairs of x and y, divided by two, gives us the number of distinct rectangles.

This approach is efficient in both time and space. The space complexity is kept low by using dictionaries that store counts rather than full lists of points, and the time complexity is minimized by using numpy for vectorized operations and avoiding nested loops.
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to read input from file
def read_input(filename):
    with open(filename, 'r') as file:
        N, MaxC = map(int, file.readline().split())
        points = [tuple(map(int, line.split())) for line in file.readlines()]
    return N, MaxC, points

# Function to write output to file
def write_output(filename, count):
    with open(filename, 'w') as file:
        file.write(str(count) + '\n')

# Function to count rectangles
def count_rectangles(N, MaxC, points):
    # Create a dictionary to group points by color
    points_by_color = {i: [] for i in range(1, MaxC + 1)}
    for x, y, c in points:
        points_by_color[c].append((x, y))

    rectangles_count = 0
    for color, color_points in points_by_color.items():
        # Convert the points into numpy arrays for vectorized operations
        xs, ys = np.array(color_points).T

        # Count unique xs and ys and their occurrences
        unique_xs, counts_xs = np.unique(xs, return_counts=True)
        unique_ys, counts_ys = np.unique(ys, return_counts=True)

        # Compute pairs for xs and ys
        pairs_xs = np.sum(counts_xs * (counts_xs - 1) // 2)
        pairs_ys = np.sum(counts_ys * (counts_ys - 1) // 2)

        # Count rectangles by multiplying pairs of xs with pairs of ys
        rectangles_count += pairs_xs * pairs_ys

    return rectangles_count

# Main function to solve the problem
def solve_problem():
    N, MaxC, points = read_input('dreptc.in')
    rectangles_count = count_rectangles(N, MaxC, points)
    write_output('dreptc.out', rectangles_count)

# Call the main function to solve the problem
solve_problem()
```
```

This code refactors the provided solution into functions for better organization and readability. It reads input from `dreptc.in`, counts the rectangles by grouping points based on their colors, and then writes the count to `dreptc.out`. The `count_rectangles` function is optimized to avoid unnecessary computations by using numpy for efficient array operations and vectorized summation. The `solve_problem` function orchestrates the reading, processing, and writing of data.
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import defaultdict

# Function to count the number of correct rectangles
def count_rectangles(points_by_color):
    rectangles_count = 0
    for color, coords in points_by_color.items():
        x_coords = defaultdict(int)
        y_coords = defaultdict(int)
        
        # Count occurrences of x and y coordinates for current color
        for x, y in coords:
            x_coords[x] += 1
            y_coords[y] += 1
        
        # For each pair of x or y, calculate possible rectangles
        for count in x_coords.values():
            rectangles_count += count * (count - 1) // 2
        for count in y_coords.values():
            rectangles_count += count * (count - 1) // 2

    # Since each rectangle is counted twice (once for each side), divide by 2
    return rectangles_count // 2

# Main function to solve the problem
def solve_problem():
    # Read input from file
    with open('dreptc.in', 'r') as file:
        N, MaxC = map(int, file.readline().split())
        points_by_color = defaultdict(list)
        for _ in range(N):
            x, y, c = map(int, file.readline().split())
            points_by_color[c].append((x, y))

    # Count the number of correct rectangles
    rectangles_count = count_rectangles(points_by_color)

    # Write the output to file
    with open('dreptc.out', 'w') as file:
        file.write(str(rectangles_count) + '\n')

# Execute the main function
solve_problem()
```
```
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import defaultdict from collections module
from collections import defaultdict

# Read the input data from the 'dreptc.in' file
with open('dreptc.in', 'r') as fin:
    N, MaxC = map(int, fin.readline().strip().split())
    points = defaultdict(lambda: defaultdict(list))
    for _ in range(N):
        x, y, c = map(int, fin.readline().strip().split())
        points[c]['x'].append(x)
        points[c]['y'].append(y)

# Count rectangles by color
rectangles_count = 0
for c in points:
    x_count = defaultdict(int)
    y_count = defaultdict(int)
    for x in points[c]['x']:
        x_count[x] += 1
    for y in points[c]['y']:
        y_count[y] += 1
    rectangles_count += sum(v * (v - 1) // 2 for v in x_count.values()) * sum(v * (v - 1) // 2 for v in y_count.values())

# Write the output data to the 'dreptc.out' file
with open('dreptc.out', 'w') as fout:
    fout.write(str(rectangles_count) + '\n')
```
```
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import defaultdict

def main():
    # Read data from file
    with open('dreptc.in', 'r') as infile:
        N, _ = map(int, infile.readline().split())
        points_by_color = defaultdict(list)
        for _ in range(N):
            x, y, c = map(int, infile.readline().split())
            points_by_color[c].append((x, y))

    # Initialize the count of rectangles
    rectangle_count = 0

    # Calculate the number of rectangles for each color
    for color, points in points_by_color.items():
        x_coords = defaultdict(int)
        y_coords = defaultdict(int)
        
        # Count the occurrences of each x and y coordinate
        for x, y in points:
            x_coords[x] += 1
            y_coords[y] += 1
        
        # Count the number of rectangle sides for each coordinate
        x_sides = sum(count * (count - 1) // 2 for count in x_coords.values())
        y_sides = sum(count * (count - 1) // 2 for count in y_coords.values())

        # Multiply the count of horizontal and vertical sides to get the rectangle count
        rectangle_count += x_sides * y_sides

    # Write the result to the outfile
    with open('dreptc.out', 'w') as outfile:
        outfile.write(f"{rectangle_count}\n")

# Call the main function to solve the problem
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import defaultdict

# Main function to solve the problem
def solve_problem():
    # Read input from file
    with open('dreptc.in', 'r') as file:
        N, MaxC = map(int, file.readline().split())
        points_by_color = defaultdict(list)
        for _ in range(N):
            x, y, c = map(int, file.readline().split())
            points_by_color[c].append((x, y))

    # Process points to count the correct rectangles
    rectangles_count = 0
    for color in points_by_color:
        points = points_by_color[color]
        x_dict = defaultdict(int)
        y_dict = defaultdict(int)
        
        # Count occurrences of each x and y coordinate
        for x, y in points:
            x_dict[x] += 1
            y_dict[y] += 1
        
        # Count rectangles using pairs of coordinates on the same axis
        for x_count in x_dict.values():
            if x_count > 1:
                rectangles_count += x_count * (x_count - 1) // 2
        for y_count in y_dict.values():
            if y_count > 1:
                rectangles_count += y_count * (y_count - 1) // 2

    # Since each rectangle is counted twice (once for each axis), divide by 2
    rectangles_count //= 2

    # Write the output to file
    with open('dreptc.out', 'w') as file:
        file.write(f'{rectangles_count}\n')

# Execute the main function
solve_problem()
```
```
---------- user ----------


Expected program to write result to `dreptc.out` and read from `dreptc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import defaultdict from collections module
from collections import defaultdict

# This function will calculate the number of correct rectangles
def calculate_rectangles(points_by_color):
    rectangles_count = 0
    for color, points in points_by_color.items():
        x_coords = defaultdict(int)
        y_coords = defaultdict(int)
        # Count the occurrences of each x and y coordinate for the current color
        for x, y in points:
            x_coords[x] += 1
            y_coords[y] += 1
        # Calculate the number of rectangle sides
        for x_count in x_coords.values():
            rectangles_count += x_count * (x_count - 1) // 2
        for y_count in y_coords.values():
            rectangles_count += y_count * (y_count - 1) // 2
    # Each rectangle is counted twice, once for each dimension
    return rectangles_count // 2

# Main function to solve the problem
def solve_problem():
    # Read input from file
    with open('dreptc.in', 'r') as file:
        N, MaxC = map(int, file.readline().strip().split())
        points_by_color = defaultdict(list)
        for _ in range(N):
            x, y, c = map(int, file.readline().strip().split())
            points_by_color[c].append((x, y))

    # Count the number of correct rectangles
    rectangles_count = calculate_rectangles(points_by_color)

    # Write the output to file
    with open('dreptc.out', 'w') as file:
        file.write(str(rectangles_count) + '\n')

# Call the main function to execute the problem-solving process
solve_problem()
```
```
