---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `betasah.in` and write to `betasah.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jocul **betasah** se joacă folosindu-se doar piese asemănătoare damelor clasicului șah, numite tot *dame*. Suprafața de joc are o formă triunghiulară și este formată din $N \cdot (N+1) / 2$ pătrate identice dispuse pe $N$ rânduri și $N$ coloane. Rândurile se numerotează de sus in jos, de la $1$ la $N$. Coloanele se numerotează de la stânga la dreapta, de la $1$ la $N$. Primul rând conține un singur pătrat, al doilea rând conține două pătrate alăturate, $\dots$, al $N$-lea rând conține $N$ pâtrate alăturate, ca în suprafețele de joc cu $N=6$ din figurile de mai jos. Din cele $N \cdot (N+1) / 2$ pătrate, $K$ sunt gri, iar restul sunt albe. Poziția fiecărui pătrat de pe suprafața de joc este dată de rândul și coloana în care acesta este situat.

~[betasah.png]

Pe suprafața de joc sunt așezate $D$ dame în $D$ pătrate albe distincte, ocupându-le. Într-un pătrat alb **poate fi așezată o singură damă**, iar într-un pătrat gri **nu poate fi așezată nicio damă**. Poziția unei dame pe suprafața de joc este dată de poziția pătratului alb în care este așezată damă.
Damele pot accesa orice pătrat alb neocupat situat pe direcțiile: verticală, orizontală sau diagonală, numerotate de la $1$ la $8$ în **figura $b$)**. Accesul pe o direcție se face trecând din pătrat alb în pătrat alb (doar pătrate albe neocupate) până la întâlnirea unui pătrat gri sau a unui pătrat alb ocupat de o altă damă sau până la terminarea suprafeței de joc.
Numim **pătrat accesibil** orice pătrat alb neocupat (de pe suprafața de joc) care ar putea fi accesat de cel puțin una din cele $D$ dame.
De exemplu, pentru suprafața de joc din **figura $c$)** numărul de pătrate accesibile (marcate cu $X$) de pe suprafață este $11$; pentru suprafața de joc cu $N=6, D=3$ și $K=4$ din **figura $d$)** numărul de pătrate accesibile de pe suprafață este $13$. În figura $e$) sunt marcate cu $X$ pătratele accesibile fiecărei dame de pe suprafața de joc din figura $d$).

~[betasah2.png]

# Cerință

Scrieți un program care să citească numerele naturale $N \ D \ K$, pozițiile damelor și ale pătratelor gri pe suprafața de joc și care să determine:

* numărul maxim $M$ de pătrate albe conținute de un rând al suprafeței de joc;
* numărul $P$ de pătrate accesibile de pe suprafața de joc.

# Date de intrare


Fișierul de intrare `betasah.in` conține:

* pe prima linie cele trei numere naturale $N \ D \ K$, separate prin câte un spațiu, cu semnificația din enunț;
* pe linia $i+1$ două numere naturale nenule $x_i \ y_i$, separate prin câte un spațiu, reprezentând poziția damei $i$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $i = 1,2,3,\dots,D$;
* pe linia $D+1+j$ două numere naturale nenule $z_j \ t_j$, separate printr-un singur spațiu, reprezentând poziția pătratului gri $j$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $j = 1, 2, 3, \dots , K$.


# Date de ieșire


Fișierul de ieșire `betasah.out` va conține pe prima linie numărul natural $M$ și pe a doua linie numărul natural $P$, cu semnificația din enunț.

# Restricții și precizări

* $2 \leq N \leq 1 \ 000$;
* $1 \leq D \leq 100$;
* $1 \leq K \leq 50$;
* $D + K \leq N \cdot (N+1) / 2$;
* $1 \leq y_i \leq xi \leq N$;
* $1 \leq t_j \leq zj \leq N$;
* numărul $M$ se va scrie obligatoriu pe prima linie a fișierului de ieșire `betasah.in`.
* numărul $P$ se va scrie obligatoriu pe a doua linie a fișierului de ieșire `betasah.out`.
* pentru rezolvarea corectă a cerinței $1$) se acordă $20$% din punctaj, iar pentru rezolvarea corectă a cerinței $2$) se acordă $80$% din punctaj.

---

Example:
`betasah.in`
```
6 3 4
3 2
5 2
5 4
3 1
4 3
6 4
1 1
```

`betasah.out`
```
5
13
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read from input file
with open('betasah.in', 'r') as file:
    N, D, K = map(int, file.readline().split())
    # Initialize the board with zeros (representing white squares)
    board = np.zeros((N, N), dtype=int)
    # Mark the position of the queens (dames) with -1
    for i in range(D):
        x, y = map(int, file.readline().split())
        board[x - 1, y - 1] = -1
    # Mark the position of the grey squares with -2
    for i in range(K):
        z, t = map(int, file.readline().split())
        board[z - 1, t - 1] = -2

# Function to update accessible squares in a given direction
def update_accessible(row, col, d_row, d_col):
    while 0 <= row < N and 0 <= col < N and board[row, col] != -1 and board[row, col] != -2:
        if board[row, col] == 0:
            board[row, col] = 1
        row += d_row
        col += d_col

# Loop through the board to update accessible squares
for row in range(N):
    for col in range(row + 1):
        if board[row, col] == -1:
            # Traverse in each direction (8 directions: horizontal, vertical, and diagonals)
            for d_row, d_col in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
                update_accessible(row + d_row, col + d_col, d_row, d_col)

# Calculate M (the maximum number of white squares contained by a row of the game surface)
M = max(np.sum(board[i, :i+1] >= 0) for i in range(N))

# Calculate P (the number of accessible squares from the surface of the game)
P = np.sum(board == 1)

# Write to output file
with open('betasah.out', 'w') as file:
    file.write(f"{M}\n{P}\n")
```
```
---------- user ----------


Expected program to write result to `betasah.out` and read from `betasah.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Read from input file
with open('betasah.in', 'r') as file:
    N, D, K = map(int, file.readline().split())
    queens = [tuple(map(int, file.readline().split())) for _ in range(D)]
    grey_squares = [tuple(map(int, file.readline().split())) for _ in range(K)]

# Initialize the board with zeros (representing white squares)
board = np.zeros((N, N), dtype=int)

# Mark the position of the queens (dames) with -1
for x, y in queens:
    board[x - 1, y - 1] = -1

# Mark the position of the grey squares with -2
for z, t in grey_squares:
    board[z - 1, t - 1] = -2

# Function to update accessible squares in a given direction
def update_accessible(row, col, d_row, d_col):
    while 0 <= row < N and 0 <= col <= row and board[row, col] != -1 and board[row, col] != -2:
        if board[row, col] == 0:
            board[row, col] = 1
        row += d_row
        col += d_col

# Loop through the board updating accessible squares
for row in range(N):
    for col in range(row + 1):
        if board[row, col] == -1:
            # Traverse in each direction (8 directions: horizontal, vertical, and diagonals)
            for d_row, d_col in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
                update_accessible(row + d_row, col + d_col, d_row, d_col)

# Calculate M (the maximum number of white squares contained by a row of the game surface)
M = max(np.sum(board[i, :i+1] >= 0) for i in range(N))

# Calculate P (the number of accessible squares from the surface of the game)
P = np.sum(board == 1)

# Write to output file
with open('betasah.out', 'w') as file:
    file.write(f"{M}\n{P}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` library is not available in the current execution environment. To resolve this, we need to rewrite the program without using `numpy` or any other third-party libraries, relying solely on built-in Python functionalities.

Here's the entire solution using only standard Python lists and functions:

```python
# Function to read from the file and return the content
def read_input(file_path):
    with open(file_path, 'r') as file:
        N, D, K = map(int, file.readline().split())
        queens = [tuple(map(int, file.readline().split())) for _ in range(D)]
        grey_squares = [tuple(map(int, file.readline().split())) for _ in range(K)]
    return N, D, K, queens, grey_squares

# Function to write to the file
def write_output(file_path, M, P):
    with open(file_path, 'w') as file:
        file.write(f"{M}\n{P}\n")

# Function to update accessible squares in a given direction
def update_accessible(board, row, col, d_row, d_col, N):
    while 0 <= row < N and 0 <= col <= row:
        if board[row][col] == 0:
            board[row][col] = 1
        elif board[row][col] in (-1, -2):
            break
        row += d_row
        col += d_col

# Read input data
N, D, K, queens, grey_squares = read_input('betasah.in')

# Initialize the board with zeros (representing white squares)
board = [[0] * (i + 1) for i in range(N)]

# Mark the position of the queens (dames) with -1
for x, y in queens:
    board[x - 1][y - 1] = -1

# Mark the position of the grey squares with -2
for z, t in grey_squares:
    board[z - 1][t - 1] = -2

# Loop through the board to update accessible squares
for row in range(N):
    for col in range(row + 1):
        if board[row][col] == -1:
            # Traverse in each direction (8 directions: horizontal, vertical, and diagonals)
            for d_row, d_col in [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]:
                update_accessible(board, row + d_row, col + d_col, d_row, d_col, N)

# Calculate M (the maximum number of white squares contained by a row of the game surface)
M = max(sum(square >= 0 for square in row) for row in board)

# Calculate P (the number of accessible squares from the surface of the game)
P = sum(square == 1 for row in board for square in row)

# Write to output file
write_output('betasah.out', M, P)
```
