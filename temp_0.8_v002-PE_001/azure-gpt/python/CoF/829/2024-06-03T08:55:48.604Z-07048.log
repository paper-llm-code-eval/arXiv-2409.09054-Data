---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `betasah.in` and write to `betasah.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jocul **betasah** se joacă folosindu-se doar piese asemănătoare damelor clasicului șah, numite tot *dame*. Suprafața de joc are o formă triunghiulară și este formată din $N \cdot (N+1) / 2$ pătrate identice dispuse pe $N$ rânduri și $N$ coloane. Rândurile se numerotează de sus in jos, de la $1$ la $N$. Coloanele se numerotează de la stânga la dreapta, de la $1$ la $N$. Primul rând conține un singur pătrat, al doilea rând conține două pătrate alăturate, $\dots$, al $N$-lea rând conține $N$ pâtrate alăturate, ca în suprafețele de joc cu $N=6$ din figurile de mai jos. Din cele $N \cdot (N+1) / 2$ pătrate, $K$ sunt gri, iar restul sunt albe. Poziția fiecărui pătrat de pe suprafața de joc este dată de rândul și coloana în care acesta este situat.

~[betasah.png]

Pe suprafața de joc sunt așezate $D$ dame în $D$ pătrate albe distincte, ocupându-le. Într-un pătrat alb **poate fi așezată o singură damă**, iar într-un pătrat gri **nu poate fi așezată nicio damă**. Poziția unei dame pe suprafața de joc este dată de poziția pătratului alb în care este așezată damă.
Damele pot accesa orice pătrat alb neocupat situat pe direcțiile: verticală, orizontală sau diagonală, numerotate de la $1$ la $8$ în **figura $b$)**. Accesul pe o direcție se face trecând din pătrat alb în pătrat alb (doar pătrate albe neocupate) până la întâlnirea unui pătrat gri sau a unui pătrat alb ocupat de o altă damă sau până la terminarea suprafeței de joc.
Numim **pătrat accesibil** orice pătrat alb neocupat (de pe suprafața de joc) care ar putea fi accesat de cel puțin una din cele $D$ dame.
De exemplu, pentru suprafața de joc din **figura $c$)** numărul de pătrate accesibile (marcate cu $X$) de pe suprafață este $11$; pentru suprafața de joc cu $N=6, D=3$ și $K=4$ din **figura $d$)** numărul de pătrate accesibile de pe suprafață este $13$. În figura $e$) sunt marcate cu $X$ pătratele accesibile fiecărei dame de pe suprafața de joc din figura $d$).

~[betasah2.png]

# Cerință

Scrieți un program care să citească numerele naturale $N \ D \ K$, pozițiile damelor și ale pătratelor gri pe suprafața de joc și care să determine:

* numărul maxim $M$ de pătrate albe conținute de un rând al suprafeței de joc;
* numărul $P$ de pătrate accesibile de pe suprafața de joc.

# Date de intrare


Fișierul de intrare `betasah.in` conține:

* pe prima linie cele trei numere naturale $N \ D \ K$, separate prin câte un spațiu, cu semnificația din enunț;
* pe linia $i+1$ două numere naturale nenule $x_i \ y_i$, separate prin câte un spațiu, reprezentând poziția damei $i$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $i = 1,2,3,\dots,D$;
* pe linia $D+1+j$ două numere naturale nenule $z_j \ t_j$, separate printr-un singur spațiu, reprezentând poziția pătratului gri $j$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $j = 1, 2, 3, \dots , K$.


# Date de ieșire


Fișierul de ieșire `betasah.out` va conține pe prima linie numărul natural $M$ și pe a doua linie numărul natural $P$, cu semnificația din enunț.

# Restricții și precizări

* $2 \leq N \leq 1 \ 000$;
* $1 \leq D \leq 100$;
* $1 \leq K \leq 50$;
* $D + K \leq N \cdot (N+1) / 2$;
* $1 \leq y_i \leq xi \leq N$;
* $1 \leq t_j \leq zj \leq N$;
* numărul $M$ se va scrie obligatoriu pe prima linie a fișierului de ieșire `betasah.in`.
* numărul $P$ se va scrie obligatoriu pe a doua linie a fișierului de ieșire `betasah.out`.
* pentru rezolvarea corectă a cerinței $1$) se acordă $20$% din punctaj, iar pentru rezolvarea corectă a cerinței $2$) se acordă $80$% din punctaj.

---

Example:
`betasah.in`
```
6 3 4
3 2
5 2
5 4
3 1
4 3
6 4
1 1
```

`betasah.out`
```
5
13
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Auxiliary function to mark accessible squares
def mark_access(board, row, col, directions):
    for dr, dc in directions:
        r, c = row + dr, col + dc
        while 0 <= r < len(board) and 0 <= c <= r and board[r, c] == 0:
            board[r, c] = 2
            r += dr
            c += dc

# Read input file
with open('betasah.in') as f:
    N, D, K = map(int, f.readline().split())
    queens = [tuple(map(int, f.readline().split())) for _ in range(D)]
    gray_squares = [tuple(map(int, f.readline().split())) for _ in range(K)]

# Initialize the board
board = np.zeros((N, N), dtype=np.int8)

# Place queens (represented as 1) and gray squares (represented as -1)
for x, y in queens:
    board[x - 1, y - 1] = 1
for z, t in gray_squares:
    board[z - 1, t - 1] = -1

# Define directions (dr, dc) for vertical, horizontal and diagonal moves
directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]

# Mark accessible squares (represented as 2)
for x, y in queens:
    mark_access(board, x - 1, y - 1, directions)

# Calculate the number of accessible squares and the maximum number of white squares per row
P = np.sum(board == 2)
M = max(np.sum((board >= 0), axis=1))

# Write output file
with open('betasah.out', 'w') as f:
    f.write(f"{M}\n{P}\n")
```

This python script aims to solve the problem with optimized memory usage, avoiding any unnecessary large data structures and minimizing the number of operations. It uses numpy for efficient array manipulation. After running this code with the provided input, it will read the board configuration from `betasah.in`, process it to find the requested outputs, and then write the results to `betasah.out`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available. Since the environment in which the solution is executed may not have the `numpy` library installed, we need to rely on Python's standard libraries to solve the problem efficiently.

Below is the entire solution rewritten without using `numpy`:

```python
# Auxiliary function to mark accessible squares
def mark_access(board, row, col, directions, N):
    for dr, dc in directions:
        r, c = row + dr, col + dc
        while 0 <= r < N and 0 <= c <= r and board[r][c] == 0:
            board[r][c] = 2
            r += dr
            c += dc

# Read input file
with open('betasah.in') as f:
    N, D, K = map(int, f.readline().split())
    queens = [tuple(map(lambda x: int(x) - 1, f.readline().split())) for _ in range(D)]
    gray_squares = [tuple(map(lambda x: int(x) - 1, f.readline().split())) for _ in range(K)]

# Initialize the board
board = [[0] * (i + 1) for i in range(N)]

# Place queens (represented as 1) and gray squares (represented as -1)
for x, y in queens:
    board[x][y] = 1
for z, t in gray_squares:
    board[z][t] = -1

# Define directions (dr, dc) for vertical, horizontal and diagonal moves
directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]

# Mark accessible squares (represented as 2)
for x, y in queens:
    mark_access(board, x, y, directions, N)

# Calculate the number of accessible squares and the maximum number of white squares per row
P = sum(row.count(2) for row in board)
M = max(len(row) - row.count(-1) for row in board)

# Write output file
with open('betasah.out', 'w') as f:
    f.write(f"{M}\n{P}\n")
```

This code uses list comprehension and Python's built-in functions to maintain efficiency. It still follows the same approach and logic but avoids the usage of `numpy` for compatibility with the given execution environment. The board is represented as a list of lists, where each inner list corresponds to a row of the board. The updated solution reads from `betasah.in`, processes the data, and writes to `betasah.out`, just as required.
