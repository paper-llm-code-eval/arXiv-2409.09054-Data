---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Required libraries
import numpy as np
from sympy import isprime

# Function to check if a number is p-prime based on the given definition
def is_p_prime(num, p):
    if num == p:
        return True
    if isprime(num):
        if num != p and num % p != 0:
            return True
    else:
        if num % p == 0:
            num //= p
            return isprime(num)
    return False

# Function to process each dataset and find p-prime sequences
def process_dataset(n, p, k, sequence):
    p_primes_indices = []
    count = 0
    result = []

    # Find all p-prime numbers and their indices
    for i, num in enumerate(sequence, 1):
        if is_p_prime(num, p):
            p_primes_indices.append(i)

    # Check for sequences with exactly k p-prime numbers
    for i in range(len(p_primes_indices) - k + 1):
        # Start and end indices of potential sequence
        start_idx = p_primes_indices[i]
        end_idx = p_primes_indices[i + k - 1]

        # Check if the sequence has exactly k p-prime numbers
        if end_idx - start_idx == k - 1:
            count += 1
            result.append((start_idx, end_idx))

    return count, result

# Read from 'secvente.in' and write to 'secvente.out'
with open('secvente.in', 'r') as infile:
    D = int(infile.readline().strip())
    datasets = [
        [list(map(int, infile.readline().split()))] +
        [int(infile.readline().strip()) for _ in range(int(infile.readline().split()[0]))]
        for _ in range(D)
    ]

results = []

for data in datasets:
    n, p, k = data[0]
    sequence = data[1:]
    count, sequences = process_dataset(n, p, k, sequence)
    results.append((count, sequences))

with open('secvente.out', 'w') as outfile:
    for count, sequences in results:
        outfile.write(f"{count}\n")
        for start_idx, end_idx in sequences:
            outfile.write(f"{start_idx} {end_idx}\n")
```

This solution utilizes the `sympy` library for prime checking, which is efficient for the given range of values. The program first identifies all p-prime numbers and their indices, then it checks for sequences with exactly `k` p-prime numbers and records their start and end indices. The results are written to the `secvente.out` file as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the `numpy` library is not installed or not required in this environment. Since the `numpy` library is not used in the solution, I will remove the import statement. Additionally, we need to ensure that the `sympy` library is installed and available. If it's not, we should implement our own prime checking function to avoid external dependencies.

Let's rewrite the solution without using `numpy`. I will also remove any dependency on `sympy` and write a custom `is_prime` function suitable for checking primality within the given constraints.

Here's the modified code:

```python
# Custom function to check if a number is a prime
def is_prime(num):
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

# Function to check if a number is p-prime based on the given definition
def is_p_prime(num, p):
    if num == p:
        return True
    if is_prime(num):
        return True
    if num % p != 0:
        return False
    num //= p
    return is_prime(num)

# Function to process each dataset and find p-prime sequences
def process_dataset(n, p, k, sequence):
    # Boolean array indicating if the number at index i is p-prime
    p_prime_flags = [False] * n
    for i in range(n):
        if is_p_prime(sequence[i], p):
            p_prime_flags[i] = True

    result = []
    count = 0
    for i in range(n):
        if p_prime_flags[i]:
            for j in range(i, n):
                if p_prime_flags[j]:
                    if sum(p_prime_flags[i:j+1]) == k:
                        count += 1
                        result.append((i + 1, j + 1))
                    elif sum(p_prime_flags[i:j+1]) > k:
                        break
    return count, result

# Read from 'secvente.in' and write to 'secvente.out'
with open('secvente.in', 'r') as infile:
    D = int(infile.readline())
    datasets = []
    for _ in range(D):
        n, p, k = map(int, infile.readline().split())
        sequence = [int(infile.readline()) for _ in range(n)]
        datasets.append((n, p, k, sequence))

with open('secvente.out', 'w') as outfile:
    for n, p, k, sequence in datasets:
        count, sequences = process_dataset(n, p, k, sequence)
        outfile.write(f"{count}\n")
        for start_idx, end_idx in sequences:
            outfile.write(f"{start_idx} {end_idx}\n")
```

This code will read from `secvente.in`, process each dataset to find the p-prime sequences, and write the output to `secvente.out` without using any external libraries. The prime checking is done with a custom function that handles the constraints of the problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```
Expected output:
```
2
1 2
2 4
0
```
Found output:
```
0
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
