---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def sieve_of_eratosthenes(n):
    is_prime = np.ones(n+1, dtype=bool)
    is_prime[:2] = False
    for i in range(2, int(n**0.5)+1):
        if is_prime[i]:
            is_prime[i*i:n+1:i] = False
    return is_prime

def is_p_prime(num, p, prime_mask):
    if num == p:
        return True
    if num % p == 0 or prime_mask[num]:
        return True
    return False

def write_output(filename, sequences):
    with open(filename, 'w') as file:
        for sequence in sequences:
            file.write(f"{len(sequence)}\n")
            for seq in sequence:
                file.write(f"{seq[0]} {seq[1]}\n")

def process_file(infile, outfile):
    with open(infile, 'r') as file:
        data = file.readlines()

    D = int(data[0].strip())
    prime_mask = sieve_of_eratosthenes(30000)

    results = []
    data_index = 1

    for _ in range(D):
        n, p, k = map(int, data[data_index].strip().split())
        data_index += 1
        sequence_count = 0
        sequences = []
        count_p_primes = 0
        start_index = -1
        for i in range(n):
            num = int(data[data_index].strip())
            data_index += 1
            if is_p_prime(num, p, prime_mask):
                if start_index == -1:
                    start_index = i
                count_p_primes += 1
                if count_p_primes == k:
                    sequences.append([start_index+1, i+1])
                    count_p_primes -= 1
                    start_index += np.argmax([is_p_prime(int(data[data_index - n + start_index + j].strip()), p, prime_mask) for j in range(k-1)]) + 1
            else:
                count_p_primes = 0
                start_index = -1

        results.append(sequences)

    write_output(outfile, results)

process_file('secvente.in', 'secvente.out')
```

The above code snippet should find all sequences of "p-prime" numbers in the given inputs, while being sensitive to memory usage and respecting the constraints of the challenge. The prime sieve and the prime check have been optimized for speed, and careful considerations were taken not to use unnecessary memory. The output is written to a file without using the `print()` function, as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The program exited with code 1 due to a `ModuleNotFoundError`. It appears that the `numpy` module is not installed in the environment where the program is being run. Since we have a strict memory limit and it's not clear whether we can install additional packages, it would be best to write a solution that does not depend on `numpy` or any other external libraries.

Below is the revised solution using only the standard library, which should not produce the `ModuleNotFoundError`:

```python
def is_prime(x):
    if x < 2:
        return False
    for i in range(2, int(x**0.5) + 1):
        if x % i == 0:
            return False
    return True

def is_p_prime(num, p):
    if num == p:
        return True
    if num % p == 0 or is_prime(num):
        return True
    return False

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    return lines

def write_output(filename, sequences):
    with open(filename, 'w') as file:
        for sequence in sequences:
            file.write(f"{len(sequence)}\n")
            for seq in sequence:
                file.write(f"{seq[0]} {seq[1]}\n")

def process_data(lines):
    D = int(lines[0].strip())
    current_line = 1
    results = []

    for _ in range(D):
        n, p, k = map(int, lines[current_line].strip().split())
        current_line += 1
        sequence_count = 0
        sequences = []
        nums = [int(lines[current_line + i].strip()) for i in range(n)]
        current_line += n

        count_p_primes = 0
        start_index = -1

        for i, num in enumerate(nums):
            if is_p_prime(num, p):
                if start_index == -1:
                    start_index = i
                count_p_primes += 1
                
                if count_p_primes == k:
                    sequences.append([start_index + 1, i + 1])
                    while not is_p_prime(nums[start_index], p):
                        start_index += 1
                    count_p_primes -= 1
                    start_index += 1
            else:
                count_p_primes = 0
                start_index = -1

        results.append(sequences)

    return results

lines = read_input('secvente.in')
sequences = process_data(lines)
write_output('secvente.out', sequences)
```

This code should read from `secvente.in`, process the data according to the challenge's specifications, and write the result to `secvente.out` without relying on `numpy` or any other third-party library. It uses list comprehensions, basic file I/O operations, and standard Python functions and data structures to manage memory efficiently.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```
Expected output:
```
2
1 2
2 4
0
```
Found output:
```
1
1 2
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
