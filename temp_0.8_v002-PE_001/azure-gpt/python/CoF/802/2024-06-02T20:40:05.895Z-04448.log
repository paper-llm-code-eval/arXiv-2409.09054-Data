---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to check if a number is p-prime
def is_p_prime(num, p, primes):
    if num == p or num in primes:
        return True
    if num % p == 0:
        return True
    return False

# Function to calculate all primes up to a given limit
def sieve_of_eratosthenes(limit):
    sieve = np.ones(limit + 1, dtype=bool)
    sieve[:2] = False
    for number in range(2, int(limit**0.5) + 1):
        if sieve[number]:
            sieve[number*number:limit+1:number] = False
    primes = np.nonzero(sieve)[0]
    return set(primes)

# Read input data
with open('secvente.in', 'r') as file:
    D = int(file.readline().strip())
    sets = []
    for _ in range(D):
        n, p, k = map(int, file.readline().split())
        sequence = [int(file.readline().strip()) for _ in range(n)]
        sets.append((n, p, k, sequence))

# Prepare output list
output = []

# Process each set of data
for n, p, k, sequence in sets:
    primes = sieve_of_eratosthenes(30000)
    p_primes = np.array([is_p_prime(x, p, primes) for x in sequence])
    count = 0
    sequences = []
    for i in range(n):
        for j in range(i, n):
            if p_primes[i] and p_primes[j] and np.sum(p_primes[i:j+1]) == k:
                count += 1
                sequences.append((i + 1, j + 1))
                break
    # Append number of sequences and sequences to output
    output.append((count, sequences))

# Write output data
with open('secvente.out', 'w') as file:
    for count, sequences in output:
        file.write(f"{count}\n")
        for start, end in sequences:
            file.write(f"{start} {end}\n")
```

This solution uses the NumPy library for efficient array operations and boolean operations for the sieve of Eratosthenes. To optimize for both time and memory, the solution calculates all prime numbers up to 30,000 only once and uses a boolean array to mark numbers as p-prime or not. The use of NumPy should help to stay within the memory constraints while still being efficient enough to process each dataset quickly.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error `ModuleNotFoundError: No module named 'numpy'` indicates that the NumPy library is not installed in the environment where the code is being run. For a programming challenge, it's usually expected to work with the standard library due to the restricted environment. 

Since we need to optimize for memory and NumPy is not available, we'll need to use the standard library instead. Below is the entire solution rewritten to remove the dependency on NumPy and optimize it for memory usage:

```python
# Function to check if a number is p-prime
def is_p_prime(num, p, primes):
    if num == p or num in primes:
        return True
    if num % p == 0:
        return True
    return False

# Function to calculate all primes up to a given limit using Sieve of Eratosthenes
def sieve_of_eratosthenes(limit):
    sieve = [True] * (limit + 1)
    sieve[0] = sieve[1] = False
    for number in range(2, int(limit**0.5) + 1):
        if sieve[number]:
            for multiple in range(number*number, limit+1, number):
                sieve[multiple] = False
    primes = {i for i, prime in enumerate(sieve) if prime}
    return primes

# Read input data
with open('secvente.in', 'r') as file:
    D = int(file.readline().strip())
    sets = []
    for _ in range(D):
        n, p, k = map(int, file.readline().split())
        sequence = [int(file.readline().strip()) for _ in range(n)]
        sets.append((n, p, k, sequence))

# Prepare output list
output = []

# Process each set of data
for n, p, k, sequence in sets:
    primes = sieve_of_eratosthenes(30000)
    p_primes = [is_p_prime(x, p, primes) for x in sequence]
    count = 0
    sequences = []
    for i in range(n):
        if not p_primes[i]:
            continue
        p_prime_count = 0
        for j in range(i, n):
            if p_primes[j]:
                p_prime_count += 1
            if p_prime_count == k:
                count += 1
                sequences.append((i + 1, j + 1))
                break
            if j == n-1 or p_prime_count > k:
                break
    # Append number of sequences and sequences to output
    output.append((count, sequences))

# Write output data
with open('secvente.out', 'w') as file:
    for count, sequences in output:
        file.write(f"{count}\n")
        for start, end in sequences:
            file.write(f"{start} {end}\n")
```

This solution uses list comprehensions and sets, which are part of the Python standard library, to handle prime and p-prime checks. It avoids the use of NumPy and should meet the memory constraints specified in the challenge.
