---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import Counter

def num_divisors(n):
    divisors = 0
    for i in range(1, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 1
            if i != n // i:
                divisors += 1
    return divisors

def main():
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = np.array([list(map(int, line.split())) for line in file])

    divisors_count = np.vectorize(num_divisors)(matrix)
    groups = Counter(divisors_count.flatten())

    sorted_groups = sorted(groups.items(), key=lambda x: (-x[1], -x[0]))
    result = [(div, count, np.max(matrix[divisors_count == div])) for div, count in sorted_groups[:2]]

    with open('grupe.out', 'w') as file:
        for res in result:
            file.write(f"{res[0]} {res[1]} {res[2]}\n")

        if len(result) < 2:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict

def num_divisors(n):
    divisors = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            divisors += 1
            if i != n // i:
                divisors += 1
    return divisors

def main():
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        elements = [int(num) for line in file for num in line.split()]

    # Calculate divisors for each element and group them
    divisor_groups = defaultdict(list)
    for elem in elements:
        div_count = num_divisors(elem)
        divisor_groups[div_count].append(elem)

    # Sort the groups by number of divisors and the size of the group
    sorted_groups = sorted(divisor_groups.items(), key=lambda x: (-len(x[1]), -x[0]))

    with open('grupe.out', 'w') as file:
        # Write group A
        div_count_a, group_a = sorted_groups[0]
        max_elem_a = max(group_a)
        file.write(f"{div_count_a} {len(group_a)} {max_elem_a}\n")

        # Write group B if exists
        if len(sorted_groups) > 1:
            div_count_b, group_b = sorted_groups[1]
            max_elem_b = max(group_b)
            file.write(f"{div_count_b} {len(group_b)} {max_elem_b}\n")
        else:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict

# Function to calculate the number of divisors of a number
def num_divisors(n):
    divisors = 2  # account for 1 and n
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 1
            if i != n // i:
                divisors += 2 if i * i != n else 1
    return divisors if n != 1 else 1

# Main function to process the input and output files
def main():
    # Read data from input file
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)])

    # Calculate divisors for all elements
    divisors = np.vectorize(num_divisors)(matrix)
    
    # Group elements by their divisors count
    groups = defaultdict(list)
    for i in range(m):
        for j in range(n):
            groups[divisors[i, j]].append(matrix[i, j])

    # Sort groups by number of elements and then by the number of divisors
    sorted_groups = sorted(groups.items(), key=lambda x: (-len(x[1]), -x[0]))
    
    # Write the result to the output file
    with open('grupe.out', 'w') as file:
        # Group A: Most elements
        div_count_a, group_a = sorted_groups[0]
        max_elem_a = max(group_a)
        file.write(f"{div_count_a} {len(group_a)} {max_elem_a}\n")
        
        # Group B: Second most elements, or "0 0 0" if only one group exists
        if len(sorted_groups) > 1:
            div_count_b, group_b = sorted_groups[1]
            max_elem_b = max(group_b)
            file.write(f"{div_count_b} {len(group_b)} {max_elem_b}\n")
        else:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict

# Function to calculate the number of divisors of a number
def num_divisors(n):
    divisors = 1  # account for 1, n is not included to avoid double count
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 1
            if i != n // i:
                divisors += 1
    return divisors + 1  # add n as a divisor

# Main function to process the input and output files
def main():
    # Read data from input file
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = np.fromfile(file, dtype=int, sep=' ', count=m*n).reshape((m, n))

    # Calculate divisors for all elements
    divisors = np.vectorize(num_divisors)(matrix)
    
    # Group elements by their divisors count
    groups = defaultdict(list)
    for count in np.nditer(divisors):
        groups[int(count)].append(matrix[divisors == count].max())

    # Sort groups by number of elements and then by the number of divisors
    sorted_groups = sorted(groups.items(), key=lambda x: (-len(x[1]), -x[0]))
    
    # Write the result to the output file
    with open('grupe.out', 'w') as file:
        # Group A: Most elements
        div_count_a, group_a = sorted_groups[0]
        max_elem_a = max(group_a)
        file.write(f"{div_count_a} {len(group_a)} {max_elem_a}\n")
        
        # Group B: Second most elements, or "0 0 0" if only one group exists
        if len(sorted_groups) > 1:
            div_count_b, group_b = sorted_groups[1]
            max_elem_b = max(group_b)
            file.write(f"{div_count_b} {len(group_b)} {max_elem_b}\n")
        else:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import defaultdict

# Function to calculate the number of divisors of a number
def num_divisors(n):
    divisors = 0
    for i in range(1, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 2 if i * i != n else 1
    return divisors

# Main function to process the input and output files
def main():
    # Read data from input file
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        numbers = [int(num) for line in file for num in line.split()]

    # Calculate divisors for all elements and store them in a dictionary
    divisors_dict = defaultdict(lambda: {'count': 0, 'max_value': 0})
    for number in numbers:
        divisors = num_divisors(number)
        divisors_dict[divisors]['count'] += 1
        divisors_dict[divisors]['max_value'] = max(divisors_dict[divisors]['max_value'], number)

    # Sort the divisors dictionary by count and then by number of divisors
    sorted_groups = sorted(divisors_dict.items(), key=lambda x: (-x[1]['count'], -x[0]))

    # Write the result to the output file
    with open('grupe.out', 'w') as file:
        # Group A: Most elements
        div_count_a, group_a = sorted_groups[0]
        file.write(f"{div_count_a} {group_a['count']} {group_a['max_value']}\n")

        # Group B: Second most elements, or "0 0 0" if only one group exists
        if len(sorted_groups) > 1:
            div_count_b, group_b = sorted_groups[1]
            file.write(f"{div_count_b} {group_b['count']} {group_b['max_value']}\n")
        else:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient function to calculate the number of divisors of a number using numpy
def num_divisors(n):
    if n == 1:
        return 1
    divisors = 2  # 1 and n
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 1 if i == n // i else 2
    return divisors

# Main function to process the input and output files
def main():
    # Read data from input file
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        # Read the rest of the numbers into a 1D Numpy array, then reshape
        numbers = np.fromfile(file, dtype=int, sep=' ').reshape((m, n))

    # Calculate the number of divisors for each element in the array
    divisors = np.vectorize(num_divisors)(numbers)
    
    # Count the frequency of each number of divisors and the max value with that number of divisors
    unique, counts = np.unique(divisors, return_counts=True)
    divisor_dict = dict(zip(unique, counts))
    max_elements = {k: numbers[divisors == k].max() for k in unique}

    # Sort groups first by count descending, then by number of divisors descending
    sorted_groups = sorted(divisor_dict.items(), key=lambda x: (-x[1], -x[0]))

    # Write the result to the output file
    with open('grupe.out', 'w') as file:
        # Group A: Most elements
        div_count_a, count_a = sorted_groups[0]
        max_elem_a = max_elements[div_count_a]
        file.write(f"{div_count_a} {count_a} {max_elem_a}\n")

        # Group B: Second most elements, or "0 0 0" if only one group exists
        if len(sorted_groups) > 1:
            div_count_b, count_b = sorted_groups[1]
            max_elem_b = max_elements[div_count_b]
            file.write(f"{div_count_b} {count_b} {max_elem_b}\n")
        else:
            file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import defaultdict
import numpy as np

# Define the function to calculate the number of divisors of a number
def num_divisors(n):
    if n == 1:
        return 1
    divisors = 2  # every number has at least two divisors: 1 and itself
    for i in range(2, int(np.sqrt(n)) + 1):
        if n % i == 0:
            divisors += 2 if i != n // i else 1
    return divisors

# Define the main function
def main():
    # Read data from 'grupe.in'
    with open('grupe.in', 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)])

    # Calculate the number of divisors for each element in the matrix
    divisors_map = np.vectorize(num_divisors)(matrix)

    # Group the elements by number of divisors
    groups = defaultdict(list)
    for i in range(m):
        for j in range(n):
            groups[divisors_map[i, j]].append(matrix[i, j])

    # Sort the groups by size and then by number of divisors
    sorted_groups = sorted(groups.items(), key=lambda item: (-len(item[1]), -item[0]))

    # Write data to 'grupe.out'
    with open('grupe.out', 'w') as file:
        if sorted_groups:
            # Group A
            div_count_a, group_a = sorted_groups[0]
            max_elem_a = max(group_a)
            file.write(f"{div_count_a} {len(group_a)} {max_elem_a}\n")

            # Group B, if exists
            if len(sorted_groups) > 1:
                div_count_b, group_b = sorted_groups[1]
                max_elem_b = max(group_b)
                file.write(f"{div_count_b} {len(group_b)} {max_elem_b}\n")
            else:
                file.write("0 0 0\n")

if __name__ == "__main__":
    main()
```
```
