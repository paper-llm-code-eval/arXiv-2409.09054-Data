---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Markdown code block for efficient solution to the programming challenge

import numpy as np
from collections import defaultdict

# Efficient function to calculate divisors
def count_divisors(n):
    count = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            count += 1
            if n // i != i:  # Count the complementary divisor only if it's different
                count += 1
    return count

# Read from the input file
with open('grupe.in', 'r') as file:
    m, n = map(int, file.readline().split())
    array = np.array([list(map(int, line.split())) for line in file], dtype=int)

# Count divisors for each element and group them
grouped_elements = defaultdict(list)
values = np.vectorize(count_divisors)(array).flatten()

for value, divisors in zip(array.flatten(), values):
    grouped_elements[divisors].append(value)

# Sort groups by the number of elements descending, then by the number of divisors descending
sorted_groups = sorted(grouped_elements.items(), key=lambda x: (-len(x[1]), -x[0]))

# Prepare output data for A and B groups
group_a_info = (sorted_groups[0][0], len(sorted_groups[0][1]), max(sorted_groups[0][1]))
group_b_info = (0, 0, 0)  # Default values for the second group in case there is only one group

if len(sorted_groups) > 1:
    group_b_info = (sorted_groups[1][0], len(sorted_groups[1][1]), max(sorted_groups[1][1]))

# Write to the output file
with open('grupe.out', 'w') as file:
    file.write(' '.join(map(str, group_a_info)) + '\n')
    file.write(' '.join(map(str, group_b_info)) + '\n')
```

This code snippet reads the input from the 'grupe.in' file, performs the computation, and writes the output to 'grupe.out'. It uses NumPy to handle the array efficiently and a dictionary to group elements by the number of divisors. It strives to use memory efficiently and respect the given memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not installed in the running environment. Since the problem constraints state that we should optimize for memory and the environment may not allow the installation of external libraries such as `numpy`, I will rewrite the solution without using `numpy` and instead rely on built-in Python functionalities.

Below is the rewritten solution using only standard Python libraries:

```python
# Markdown code block for efficient solution to the programming challenge without numpy

from collections import defaultdict

# Efficient function to calculate divisors
def count_divisors(n):
    count = 0
    for i in range(1, int(n ** 0.5) + 1):
        if n % i == 0:
            count += 1
            if n // i != i:  # Count the complementary divisor only if it's different
                count += 1
    return count

# Read from the input file
with open('grupe.in', 'r') as file:
    m, n = map(int, file.readline().split())
    array = [list(map(int, line.split())) for line in file]

# Count divisors for each element and group them
grouped_elements = defaultdict(list)

for row in array:
    for value in row:
        divisors = count_divisors(value)
        grouped_elements[divisors].append(value)

# Sort groups by the number of elements descending, then by the number of divisors descending
sorted_groups = sorted(grouped_elements.items(), key=lambda x: (-len(x[1]), -x[0]))

# Prepare output data for A and B groups
group_a_info = (sorted_groups[0][0], len(sorted_groups[0][1]), max(sorted_groups[0][1]))
group_b_info = (0, 0, 0)  # Default values for the second group in case there is only one group

if len(sorted_groups) > 1:
    group_b_info = (sorted_groups[1][0], len(sorted_groups[1][1]), max(sorted_groups[1][1]))

# Write to the output file
with open('grupe.out', 'w') as file:
    file.write(' '.join(map(str, group_a_info)) + '\n')
    file.write(' '.join(map(str, group_b_info)) + '\n')
```

This modified code should run in an environment without the `numpy` module, as it only uses the standard Python library. It still adheres to the memory limit and optimizes time and memory usage within the constraints of the given problem.
