---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import defaultdict

# Efficient function to find the number of divisors
def count_divisors(n):
    count = 0
    for i in range(1, int(np.sqrt(n)) + 1):
        if n % i == 0:
            count += 2 if i * i != n else 1
    return count

# Read data from file
with open('grupe.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)

# Calculate the number of divisors for each element and group by the number of divisors
divisors = np.vectorize(count_divisors)(matrix)
groups = defaultdict(list)
for i in range(m):
    for j in range(n):
        groups[divisors[i, j]].append(matrix[i, j])

# Sort the groups by the number of elements and then by the number of divisors
sorted_groups = sorted(groups.items(), key=lambda x: (-len(x[1]), -x[0]))

# Extract data for group A and B (or use zeros if B doesn't exist)
group_A = sorted_groups[0]
group_B = sorted_groups[1] if len(sorted_groups) > 1 else (0, [0])

# Write data to file
with open('grupe.out', 'w') as file:
    file.write(f"{group_A[0]} {len(group_A[1])} {max(group_A[1])}\n")
    file.write(f"{group_B[0]} {len(group_B[1])} {max(group_B[1])}\n" if group_B[0] != 0 else "0 0 0\n")
```
```
This python code should meet the requirements specified in the challenge. It uses numpy for efficient data handling and collections.defaultdict for grouping elements. The divisors are calculated for each element using an optimized approach that counts divisors up to the square root. The groups are then sorted according to the problem's rules, and the data is written to a file without using `input()` or `print()` as per the instructions. The solution also accounts for the possibility of only one group existing.

Please ensure that you have the `numpy` library installed to run this code, as it is essential for the efficient handling of the 2D array and vectorized operations.
---------- user ----------


Expected program to write result to `grupe.out` and read from `grupe.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from collections import defaultdict

# Efficient function to find the number of divisors
def count_divisors(n):
    count = 0
    for i in range(1, int(np.sqrt(n)) + 1):
        if n % i == 0:
            count += 2 if i * i != n else 1
    return count

# Read data from file
with open('grupe.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)

# Calculate the number of divisors for each element and group by the number of divisors
divisors = np.vectorize(count_divisors)(matrix)
groups = defaultdict(list)
for i in range(m):
    for j in range(n):
        groups[divisors[i, j]].append(matrix[i, j])

# Sort the groups by the number of elements and then by the number of divisors
sorted_groups = sorted(groups.items(), key=lambda x: (-len(x[1]), -x[0]))

# Extract data for group A and B (or use zeros if B doesn't exist)
group_A = sorted_groups[0]
group_B = sorted_groups[1] if len(sorted_groups) > 1 else (0, [0])

# Write data to file
with open('grupe.out', 'w') as file:
    file.write(f"{group_A[0]} {len(group_A[1])} {max(group_A[1])}\n")
    file.write(f"{group_B[0]} {len(group_B[1])} {max(group_B[1])}\n" if group_B[0] != 0 else "0 0 0\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
