{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/712/2024-06-02T09:28:18.007Z-07899.log",
  "attemptStart": 1717320498.007,
  "attemptEnd": 1717320625.036,
  "attemptDuration": 127.02900004386902,
  "code": "from itertools import combinations\n\ndef read_input(filename):\n    with open(filename, 'r') as file:\n        numbers = list(map(int, file.readline().strip().split()))\n    return numbers\n\ndef write_output(filename, pair_count, max_sum, max_pair_subsets):\n    with open(filename, 'w') as file:\n        file.write(f\"{pair_count} {max_sum}\\n\")\n        file.write(' '.join(map(str, max_pair_subsets[0])) + \"\\n\")\n        file.write(' '.join(map(str, max_pair_subsets[1])) + \"\\n\")\n\ndef find_subsets(numbers):\n    all_sums = {}\n    max_sum = 0\n    max_pair = ((), ())\n    pair_count = 0\n\n    for i in range(1, 1 << len(numbers)):\n        subset = [numbers[j] for j in range(len(numbers)) if (i & (1 << j)) > 0]\n        subset_sum = sum(subset)\n        \n        if subset_sum in all_sums:\n            for existing_subset in all_sums[subset_sum]:\n                if not set(existing_subset).intersection(subset):\n                    if subset_sum > max_sum:\n                        max_sum = subset_sum\n                        max_pair = (existing_subset, subset)\n                    pair_count += 1\n        all_sums.setdefault(subset_sum, []).append(subset)\n\n    return pair_count, max_sum, max_pair\n\nnumbers = read_input('numere.in')\npair_count, max_sum, max_pair_subsets = find_subsets(numbers)\nwrite_output('numere.out', pair_count, max_sum, max_pair_subsets)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3196,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}