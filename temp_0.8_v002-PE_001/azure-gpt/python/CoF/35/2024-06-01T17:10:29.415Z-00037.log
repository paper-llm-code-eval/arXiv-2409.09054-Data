---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `biperm.in` and write to `biperm.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural nenul `n`, să considerăm toate numerele naturale nenule mai mici sau egale cu `n`, luând fiecare număr de câte două ori: `1, 1, 2, 2, 3, 3, ... , n, n`. Aceste numere le amestecăm aleator, şi le aranjăm pe două linii a câte `n` elemente. Structura astfel obţinută o vom numi o bipermutare. În figurile `1, 2` şi `3` avem câte un exemplu de bipermutare pentru `n=5`. 

O bipermutare este perfectă, dacă ambele linii ale structurii reprezintă câte o permutare (vezi figurile `2` şi `3`).

Prin mutare pe poziţia `p`, înţelegem interschimbarea elementelor de pe aceeaşi coloană `p`. În exemplele de mai jos, bipermutarea perfectă din figura `2` s-a obţinut din bipermutarea din figura `1`, aplicând o mutare pe poziţa `2`. Bipermutarea perfectă din figura `3` s-a obţinut din bipermutarea din figura `1`, aplicând mutări pe poziţiile `1, 2, 4` şi `5`.

~[biperm.png]

# Cerinţe
Cunoscând o bipermutare, determinaţi:
* numărul bipermutărilor perfecte distincte ce se pot obţine prin mutări;
* numărul minim de mutări prin care se poate obţine o bipermutare perfectă;
* o bipermutare perfectă obţinută din bipermutarea iniţială.

# Date de intrare
Fişierul de intrare `biperm.in` conţine pe prima linie valoarea lui `n`. Următoarele două linii conţin, fiecare, câte `n` elemente separate prin câte un spaţiu, formând o bipermutare.

# Date de ieşire
Fişierul de ieşire `biperm.out` va conţine:
* pe prima linie două numere naturale separate printr-un spaţiu, reprezentând  numărul bipermutărilor perfecte distincte ce se pot obţine din bipermutarea dată, respectiv numărul minim de mutări prin care se poate obţine o bipermutare perfectă; 
* pe următoarele două linii se vor tipări câte n numere separate prin spaţiu, reprezentând o bipermutare perfectă obţinută din bipermutarea dată. 

# Restricţii şi precizări
* `2 < n ≤ 10 000`;
* calculul corect al numărului bipermutărilor perfecte distincte valorează `30%` din punctaj;
* calculul corect al numărului minim de mutări valorează `10%` din punctaj;
* tipărirea unei bipermutări perfecte valorează `60%` din punctaj. Pot exista mai multe soluţii, se va admite orice soluţie corectă;
* se garantează că numărul bipermutărilor perfecte distincte nu depăşeşte `2 000 000 000` pentru niciun test.
* acordarea punctajului la un răspuns corect este condiţionată de existenţa răspunsurilor anterioare, indiferent de corectitudinea lor;
* pentru `40%` din teste `n ≤ 20` 
* pentru `40%` din teste `20 < n ≤ 400`
* pentru `20%` din teste `400 < n ≤ 10 000`

---

Example:
`biperm.in`
```
5
1 5 5 3 4
3 2 2 4 1
```

`biperm.out`
```
4 1
1 2 5 3 4
3 5 2 4 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def swap_columns(biperm, col, n):
    biperm[:, [0, col]] = biperm[:, [col, 0]]

def find_mismatches(biperm, n):
    mismatches = []
    counts = np.zeros(n + 1, dtype=int)
    for i in range(n):
        counts[biperm[0, i]] += 1
        counts[biperm[1, i]] += 1
        if biperm[0, i] == biperm[1, i]:
            mismatches.append(i)
    return mismatches, counts

def solve_bipermutation(n, biperm):
    biperm = np.array(biperm)

    mismatches, counts = find_mismatches(biperm, n)
    num_unique_pairs = np.sum(counts == 2)
    moves = 0

    while mismatches:
        # Find two mismatched pairs to swap, which share a common number
        for i in range(len(mismatches)):
            first = mismatches[i]
            for j in range(i + 1, len(mismatches)):
                second = mismatches[j]
                if (biperm[0, first] == biperm[1, second] or
                    biperm[1, first] == biperm[0, second]):
                    swap_columns(biperm, first, n)
                    swap_columns(biperm, second, n)
                    moves += 1
                    break
            else:
                continue
            break

        mismatches, counts = find_mismatches(biperm, n)

    num_perfect_bipermutations = 2 ** (n - num_unique_pairs)
    return num_perfect_bipermutations, moves, biperm

with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    biperm = [
        [int(x) for x in file.readline().split()],
        [int(x) for x in file.readline().split()]
    ]

num_perfect_bipermutations, min_moves, perfect_biperm = solve_bipermutation(n, biperm)

with open('biperm.out', 'w') as file:
    file.write(f"{num_perfect_bipermutations} {min_moves}\n")
    for line in perfect_biperm:
        file.write(' '.join(map(str, line)) + '\n')
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently find mismatches and count occurrences of elements
def find_mismatches(biperm, n):
    mismatches = []
    counts = np.zeros(n + 1, dtype=int)
    for i in range(n):
        counts[biperm[0, i]] += 1
        counts[biperm[1, i]] += 1
        if biperm[0, i] == biperm[1, i]:
            mismatches.append(i)
    return mismatches, counts

# Main function to solve the bipermutation problem
def solve_bipermutation(n, biperm):
    # Convert the list of lists to a numpy array
    biperm = np.array(biperm)
    # Find initial mismatches and element counts
    mismatches, counts = find_mismatches(biperm, n)

    # Initialize the number of moves to 0
    moves = 0

    # While there are mismatches, try to fix them by swapping
    while mismatches:
        for i in range(len(mismatches)):
            for j in range(i + 1, len(mismatches)):
                if biperm[0, mismatches[i]] == biperm[1, mismatches[j]] or biperm[1, mismatches[i]] == biperm[0, mismatches[j]]:
                    # Swap the columns with mismatches
                    biperm[:, [mismatches[i], mismatches[j]]] = biperm[:, [mismatche[j], mismatches[i]]]
                    moves += 1
                    break
            else:
                # Continue if the inner loop wasn't broken
                continue
            # Inner loop was broken, break the outer loop
            break
        # Recalculate mismatches after the swap
        mismatches, counts = find_mismatches(biperm, n)

    # Calculate the number of perfect bipermutations
    num_perfect_bipermutations = 2 ** (n - np.sum(counts == 2))
    return num_perfect_bipermutations, moves, biperm

# Read from 'biperm.in'
with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    biperm = [list(map(int, file.readline().split())) for _ in range(2)]

# Solve the bipermutation problem
num_perfect_bipermutations, min_moves, perfect_biperm = solve_bipermutation(n, biperm)

# Write to 'biperm.out'
with open('biperm.out', 'w') as file:
    file.write(f"{num_perfect_bipermutations} {min_moves}\n")
    for line in perfect_biperm:
        file.write(' '.join(map(str, line)) + '\n')
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def load_bipermutation(file_path):
    with open(file_path, 'r') as file:
        n = int(file.readline().strip())
        top_row = list(map(int, file.readline().strip().split()))
        bottom_row = list(map(int, file.readline().strip().split()))
    return n, np.array([top_row, bottom_row])

def find_cycles(biperm):
    n = biperm.shape[1]
    visited = np.zeros(n, dtype=bool)
    cycles = 0
    for i in range(n):
        if not visited[i]:
            cycles += 1
            while not visited[i]:
                visited[i] = True
                i = np.where(biperm[0] == biperm[1, i])[0][0]
    return cycles

def solve_bipermutation(n, biperm):
    perfect_count = 2 ** (n - find_cycles(biperm))
    swap_indices = []
    count_swaps = 0
    for i in range(n):
        if biperm[0, i] != biperm[1, i]:
            swap_idx = np.where(biperm[1] == biperm[0, i])[0][0]
            biperm[:, [i, swap_idx]] = biperm[:, [swap_idx, i]]
            swap_indices.append((i, swap_idx))
            count_swaps += 1
    return perfect_count, count_swaps, biperm

def save_bipermutation(file_path, perfect_count, count_swaps, biperm):
    with open(file_path, 'w') as file:
        file.write(f"{perfect_count} {count_swaps}\n")
        for row in biperm:
            file.write(' '.join(str(num) for num in row))
            file.write('\n')

# Load bipermutation from file
n, biperm = load_bipermutation('biperm.in')

# Solve bipermutation
perfect_count, count_swaps, solved_biperm = solve_bipermutation(n, biperm)

# Save solved bipermutation to file
save_bipermutation('biperm.out', perfect_count, count_swaps, solved_biperm)
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to find the number of cycles in the bipermutation.
def find_cycles(biperm, n):
    cycles = 0
    seen = set()
    for i in range(n):
        if i not in seen:
            cycles += 1
            j = i
            while j not in seen:
                seen.add(j)
                j = np.where(biperm[0] == biperm[1][j])[0][0]
    return cycles

# Function to save the result to the output file.
def save_output(file_path, num_perfect, min_swaps, biperm):
    with open(file_path, 'w') as file:
        file.write(f"{num_perfect} {min_swaps}\n")
        for row in biperm:
            file.write(" ".join(map(str, row.tolist())) + "\n")

# Load the bipermutation.
with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    top_row = list(map(int, file.readline().strip().split()))
    bottom_row = list(map(int, file.readline().strip().split()))
    biperm = np.array([top_row, bottom_row])

# Initialize variables.
min_swaps = 0
swapped = set()

# Create a dictionary for the bottom row for fast lookup.
bottom_dict = {v: i for i, v in enumerate(biperm[1])}

# Go through each column and perform necessary swaps.
for i in range(n):
    if biperm[0][i] != biperm[1][i]:
        # If we haven't already swapped to correct this column
        if i not in swapped:
            # Find the correct index to swap with.
            swap_idx = bottom_dict[biperm[0][i]]
            # Swap the columns.
            biperm[:, [i, swap_idx]] = biperm[:, [swap_idx, i]]
            # We've now swapped these two columns.
            swapped.add(i)
            swapped.add(swap_idx)
            # Increment the swap counter.
            min_swaps += 1

# Calculate the number of perfect bipermutations.
num_perfect = 2 ** find_cycles(biperm, n)

# Save the result to the output file.
save_output('biperm.out', num_perfect, min_swaps, biperm)
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to find the number of cycles in the bipermutation.
def find_cycles(biperm, n):
    cycles = 0
    seen = set()
    for i in range(n):
        if i not in seen:
            cycles += 1
            j = i
            while j not in seen:
                seen.add(j)
                j = np.where(biperm[0] == biperm[1][j])[0][0]
    return cycles

# Function to save the result to the output file.
def save_output(file_path, num_perfect, min_swaps, biperm):
    with open(file_path, 'w') as file:
        file.write(f"{num_perfect} {min_swaps}\n")
        for row in biperm:
            file.write(" ".join(map(str, row.tolist())) + "\n")

# Load the bipermutation.
with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    top_row = list(map(int, file.readline().strip().split()))
    bottom_row = list(map(int, file.readline().strip().split()))
    biperm = np.array([top_row, bottom_row])

# Initialize variables.
min_swaps = 0
swapped = set()

# Create a dictionary for the bottom row for fast lookup.
bottom_dict = {v: i for i, v in enumerate(biperm[1])}

# Go through each column and perform necessary swaps.
for i in range(n):
    if biperm[0][i] != biperm[1][i]:
        # If we haven't already swapped to correct this column
        if i not in swapped:
            # Find the correct index to swap with.
            swap_idx = bottom_dict[biperm[0][i]]
            # Swap the columns.
            biperm[:, [i, swap_idx]] = biperm[:, [swap_idx, i]]
            # We've now swapped these two columns.
            swapped.add(i)
            swapped.add(swap_idx)
            # Increment the swap counter.
            min_swaps += 1

# Calculate the number of perfect bipermutations.
num_perfect = 2 ** find_cycles(biperm, n)

# Save the result to the output file.
save_output('biperm.out', num_perfect, min_swaps, biperm)
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to identify mismatched pairs and count occurrences of each element
def find_mismatches(biperm, n):
    mismatches = []
    counts = np.zeros(n + 1, dtype=int)
    for i in range(n):
        counts[biperm[0, i]] += 1
        counts[biperm[1, i]] += 1
        if biperm[0, i] == biperm[1, i]:
            mismatches.append(i)
    return mismatches, counts

# Function to solve the bipermutation problem
def solve_bipermutation(n, biperm):
    mismatches, counts = find_mismatches(biperm, n)
    
    # The number of perfect bipermutations is 2^(n - number of numbers that do not need to be paired)
    num_perfect_bipermutations = int(2 ** (n - np.sum(counts == 2) / 2))
    
    # The minimum number of swaps needed to make the bipermutation perfect
    min_swaps = len(mismatches) // 2
    if len(mismatches) % 2 == 1:
        min_swaps += 2  # An extra swap for the odd one out
    
    # Performing the swaps to obtain one of the perfect bipermutations
    for i in range(min_swaps):
        # Swap the first mismatch with another mismatch that has the first element of the first mismatch in the second row
        index_to_swap = np.where(biperm[1] == biperm[0, mismatches[i]])[0][0]
        biperm[:, [mismatches[i], index_to_swap]] = biperm[:, [index_to_swap, mismatches[i]]]
        # Update the mismatches after the swap
        mismatches, _ = find_mismatches(biperm, n)
    
    return num_perfect_bipermutations, min_swaps, biperm

# Read data from file
with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    biperm = np.array([list(map(int, file.readline().split())) for _ in range(2)])

# Solve the bipermutation problem
num_perfect_bipermutations, min_swaps, perfect_biperm = solve_bipermutation(n, biperm)

# Write results to a file
with open('biperm.out', 'w') as file:
    file.write(f"{num_perfect_bipermutations} {min_swaps}\n")
    for row in perfect_biperm:
        file.write(' '.join(map(str, row)) + '\n')
```
```
---------- user ----------


Expected program to write result to `biperm.out` and read from `biperm.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def solve_bipermutation(n, biperm):
    # Find the elements that are on the same position in both lines
    same_elements = biperm[0] == biperm[1]
    # Find the number of unique pairs
    unique_pairs = n - np.sum(same_elements)
    # Calculate the number of perfect bipermutations
    # It is 2 raised to the power of the number of unique pairs
    num_perfect_bipermutations = 2**unique_pairs
    # Find the positions of the repeated elements
    positions = np.where(same_elements)[0]
    min_swaps = 0
    # Swap repeated elements to make the bipermutation perfect
    for pos in positions:
        swap_with = np.where(biperm[1] == biperm[0, pos])[0][0]
        biperm[:, [pos, swap_with]] = biperm[:, [swap_with, pos]]
        min_swaps += 1
    # Number of swaps is half the number of same positions, because each swap fixes two positions
    min_swaps = min_swaps // 2
    return num_perfect_bipermutations, min_swaps, biperm

# Read the input from 'biperm.in'
with open('biperm.in', 'r') as file:
    n = int(file.readline().strip())
    top_row = list(map(int, file.readline().strip().split()))
    bottom_row = list(map(int, file.readline().strip().split()))
    biperm = np.array([top_row, bottom_row])

# Solve the bipermutation problem
num_perfect_bipermutations, min_swaps, perfect_biperm = solve_bipermutation(n, biperm)

# Write the output to 'biperm.out'
with open('biperm.out', 'w') as file:
    file.write(f"{num_perfect_bipermutations} {min_swaps}\n")
    for row in perfect_biperm:
        file.write(' '.join(map(str, row)) + '\n')
```
```
