---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un tablou bidimensional de dimensiuni date $m$ (numărul de linii) şi $n$ (numărul de coloane) există în fiecare celulă o valoare $0$ sau $1$. Un turn este format numai din valori $1$ vecine, de pe aceeaşi coloană, numărul acestor valori egale cu $1$ reprezentând înălţimea turnului. Se consideră că pe o coloană nu există alte valori egale cu 1 în afara celor care intră în componenţa unui turn.

Fiecare coloană poate conţine câte un singur turn. Dacă o coloană are numai valori $0$, se consideră totuşi că acea coloană conţine un turn de înălţime $0$. Dacă o coloană are una sau mai multe valori $1$, atunci una dintre ele este obligatoriu plasată pe ultima linie.

Luând pe rând toate perechile formate din câte $2$ turnuri aflate pe coloane vecine, este posibilă următoarea operaţie de reconfigurare: din $2$ turnuri de înălţime nenulă, de pe $2$ coloane vecine se poate forma un nou turn cu înălţimea egală cu suma celor două. Dorim astfel să obţinem în final numărul maxim de turnuri de înălţime maximă. Există însă două condiţii care trebuie respectate:
- înălţimea noului turn format nu poate depăşi valoarea $m$ (numărul de linii ale tabloului);
- orice turn care a contribuit la formarea unui turn de înălţime maximă nu mai poate contribui şi la formarea unui alt turn de înălţime maximă.

Operaţia de reconfigurare se efectuează o singură dată.

# Cerință

Dându-se tabloul bidimensional cu $m$ linii şi $n$ coloane cu valori $0$ şi $1$, se cere:

1. Să se afişeze înălţimile turnurilor din configuraţia iniţială, precizându-se şi turnurile cu înălţime $0$, începând cu cel mai din stânga turn
2. Să se afişeze înălţimea maximă a turnurilor rezultate după operaţia de reconfigurare
3. Să se afişeze numărul maxim de turnuri de înălţime maximă, rezultate după operaţia de reconfigurare

# Date de intrare

Fişierul de intrare `turnuri.in` va conţine:

- pe prima linie din fişier se află numărul natural $m$ care reprezintă numărul de linii şi numărul natural $n$ care reprezintă numărul de coloane, valori separate între ele printr-un spaţiu
- pe următoarele $m$ linii câte n valori $0$ sau $1$, separate două câte două printr-un spaţiu

# Date de ieșire

Fişierul de ieşire `turnuri.out` va conţine trei linii:

- pe prima linie se află înălţimile iniţiale ale turnurilor, valori separate două câte două printr-un spaţiu
- pe a doua linie se află înălţimea maximă a turnurilor rezultate după operaţia de reconfigurare
- pe a treia linie se află numărul maxim de turnuri de înălţime maximă, rezultate după operaţia de reconfigurare


# Restricții și precizări

* $2 \leq m, n \leq 1 \ 000$; 
* Testele si restricțiile au fost refăcute pentru standardele anului $2023$
* Se acordă punctaje parţiale: cerinţa a) $40$% din punctaj, cerinţa b) $40$% din punctaj, cerinţa c) $20$%.
* Toate turnurile incep de pe ultima linie a matricii.

---

Example:
`turnuri.in`
```
6 6
0 0 0 0 0 0
1 0 0 0 0 0
1 0 1 0 0 0
1 0 1 1 0 1
1 0 1 1 1 1
1 0 1 1 1 1 
```

`turnuri.out`
```
5 0 4 3 2 3
5
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read data from file
with open('turnuri.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.byte)

# Calculate the height of towers
tower_heights = np.sum(grid, axis=0)

# Write initial tower heights to the output file
with open('turnuri.out', 'w') as file:
    file.write(' '.join(map(str, tower_heights)) + '\n')

    # Find maximum height of towers after reconfiguration
    max_height = min(max(tower_heights), m)
    file.write(f'{max_height}\n')

    # Calculate the number of maximum height towers after reconfiguration
    pairs = np.minimum(tower_heights[:-1] + tower_heights[1:], m)
    max_towers = np.count_nonzero(pairs == max_height)
    max_towers += np.count_nonzero(tower_heights == max_height)

    # Avoid counting the same tower twice
    for i in range(1, n - 1):
        if tower_heights[i] == max_height:
            if tower_heights[i - 1] + tower_heights[i] == max_height:
                max_towers -= 1
            elif i < n - 1 and tower_heights[i] + tower_heights[i + 1] == max_height:
                max_towers -= 1

    file.write(f'{max_towers}\n')
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from file
with open('turnuri.in', 'r') as file:
    m, n = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(m)], dtype=np.byte)

# Calculate the height of towers
tower_heights = np.sum(matrix, axis=0)

# Find maximum possible tower height after reconfiguration not exceeding m
possible_towers = np.minimum(tower_heights[:-1] + tower_heights[1:], m)

# Calculate the number of maximum height towers after reconfiguration
max_height = possible_towers.max()
num_max_towers = (possible_towers == max_height).sum()

# Account for standalone towers that are already at maximum height
standalone_max_towers = (tower_heights == max_height).sum()

# Ensure we don't count a standalone max tower that was used in a reconfiguration
for i in range(1, n-1):
    if tower_heights[i] == max_height and (possible_towers[i-1] == max_height or (i < n-1 and possible_towers[i] == max_height)):
        standalone_max_towers -= 1

num_max_towers += standalone_max_towers

# Write results to the output file
with open('turnuri.out', 'w') as file:
    file.write(' '.join(map(str, tower_heights)) + '\n')
    file.write(str(max_height) + '\n')
    file.write(str(num_max_towers) + '\n')
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input_file(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grid = np.zeros((m, n), dtype=np.int8)
        for i in range(m):
            grid[i] = np.fromstring(file.readline().strip(), dtype=np.int8, sep=' ')
    return m, n, grid

def write_output_file(filename, initial_heights, max_reconfigured_height, max_towers_count):
    with open(filename, 'w') as file:
        file.write(' '.join(map(str, initial_heights)) + '\n')
        file.write(str(max_reconfigured_height) + '\n')
        file.write(str(max_towers_count) + '\n')

def calculate_tower_heights(grid):
    return np.sum(grid, axis=0)

def find_max_heights_and_towers(m, tower_heights):
    max_height = min(m, max(tower_heights))
    max_towers_count = 0
    for i in range(len(tower_heights) - 1):
        if tower_heights[i] + tower_heights[i + 1] <= m and \
           tower_heights[i] + tower_heights[i + 1] == max_height:
            max_towers_count += 1
            tower_heights[i + 1] = 0  # Mark as used
    standalone_max_towers = sum(height == max_height for height in tower_heights)
    max_towers_count += standalone_max_towers
    return max_height, max_towers_count

# Read from 'turnuri.in'
m, n, grid = read_input_file('turnuri.in')

# Calculate initial tower heights
initial_heights = calculate_tower_heights(grid)

# Find the maximum heights and the number of such towers after reconfiguration
max_reconfigured_height, max_towers_count = find_max_heights_and_towers(m, initial_heights)

# Write to 'turnuri.out'
write_output_file('turnuri.out', initial_heights, max_reconfigured_height, max_towers_count)
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input():
    with open('turnuri.in', 'r') as file:
        m, n = map(int, file.readline().split())
        tower_heights = np.zeros(n, dtype=int)
        for _ in range(m):
            line = np.array(file.readline().split(), dtype=int)
            tower_heights += line
    return m, n, tower_heights

def write_output(initial_heights, max_height, max_towers):
    with open('turnuri.out', 'w') as file:
        file.write(' '.join(map(str, initial_heights)) + '\n')
        file.write(str(max_height) + '\n')
        file.write(str(max_towers) + '\n')

def calculate_max_height_and_towers(m, n, tower_heights):
    max_height = min(m, max(tower_heights))
    reconfigured_towers = np.zeros(n, dtype=int)
    for i in range(n - 1):
        if tower_heights[i] > 0 and tower_heights[i+1] > 0:
            combined_height = tower_heights[i] + tower_heights[i+1]
            if combined_height <= m:
                reconfigured_towers[i] = combined_height
                tower_heights[i+1] = 0  # Mark the next tower as used

    reconfigured_towers = np.maximum(reconfigured_towers, tower_heights)
    max_towers = np.count_nonzero(reconfigured_towers == max_height)
    return max_height, max_towers

m, n, tower_heights = read_input()
initial_heights = tower_heights.copy()
max_height, max_towers = calculate_max_height_and_towers(m, n, tower_heights)
write_output(initial_heights, max_height, max_towers)
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Step 1: Read the input file
with open('turnuri.in', 'r') as f:
    m, n = map(int, f.readline().split())
    matrix = np.zeros((m, n), dtype=np.int8)
    for i in range(m):
        matrix[i, :] = np.fromstring(f.readline().strip(), dtype=np.int8, sep=' ')

# Step 2: Calculate the initial heights of towers
heights = np.sum(matrix, axis=0)
max_possible_height = m

# Step 3: Determine the maximum height after reconfiguration and count the towers
max_height = 0
num_max_towers = 0
used_towers = np.zeros(n, dtype=bool)

for i in range(n-1):
    if heights[i] > 0:
        for j in range(i+1, n):
            if heights[j] > 0:
                combined_height = heights[i] + heights[j]
                if combined_height <= max_possible_height:
                    max_height = max(max_height, combined_height)
                    used_towers[i] = used_towers[j] = True
                break  # Exit inner loop after the first reconfiguration

# Recalculate the number of max height towers after reconfiguration
if max_height > 0:
    for i in range(n):
        if not used_towers[i] and heights[i] == max_height:
            num_max_towers += 1
        elif used_towers[i] and heights[i] * 2 == max_height:
            num_max_towers += 1

# If no reconfiguration was possible, the max height is the tallest standalone tower
if max_height == 0:
    max_height = max(heights)
    num_max_towers = np.sum(heights == max_height)

# Step 4: Write the output file
with open('turnuri.out', 'w') as f:
    f.write(' '.join(map(str, heights)) + '\n')
    f.write(str(max_height) + '\n')
    f.write(str(num_max_towers) + '\n')
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'turnuri.in'
with open('turnuri.in', 'r') as fin:
    m, n = map(int, fin.readline().split())
    # Initialize a numpy array to store the matrix
    board = np.zeros((m, n), dtype=np.int8)
    for i in range(m):
        line = list(map(int, fin.readline().split()))
        board[i, :] = line

# Calculate initial tower heights
initial_heights = np.sum(board, axis=0)

# Perform reconfiguration
reconfig_heights = initial_heights.copy()
for i in range(n - 1):
    if reconfig_heights[i] > 0 and reconfig_heights[i] + reconfig_heights[i + 1] <= m:
        reconfig_heights[i] += reconfig_heights[i + 1]
        reconfig_heights[i + 1] = 0

# Determine the maximum height and count maximum height towers after reconfiguration
max_height = min(m, max(reconfig_heights))
max_towers = np.count_nonzero(reconfig_heights == max_height)

# Write results to 'turnuri.out'
with open('turnuri.out', 'w') as fout:
    fout.write(' '.join(map(str, initial_heights)) + '\n')
    fout.write(f"{max_height}\n")
    fout.write(f"{max_towers}\n")
```
```
---------- user ----------


Expected program to write result to `turnuri.out` and read from `turnuri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'turnuri.in'
with open('turnuri.in', 'r') as fin:
    m, n = map(int, fin.readline().split())
    # Initialize a numpy array to store the matrix
    matrix = np.zeros((m, n), dtype=np.int8)
    for i in range(m):
        row = list(map(int, fin.readline().strip().split()))
        matrix[i, :] = row

# Calculate initial tower heights
tower_heights = np.sum(matrix, axis=0)

# Calculate the max height after reconfiguration
max_height = min(m, max(tower_heights))

# Calculate the number of maximum height towers after reconfiguration
max_towers = 0

# Check reconfiguration possibilities
reconfigurable = np.zeros(n, dtype=bool)

for i in range(1, n):
    if tower_heights[i] > 0 and tower_heights[i - 1] > 0:
        combined_height = tower_heights[i] + tower_heights[i - 1]
        if combined_height <= max_height:
            reconfigurable[i] = reconfigurable[i - 1] = True

# Count maximum height towers
for i in range(n):
    if tower_heights[i] == max_height and not reconfigurable[i]:
        max_towers += 1
    elif reconfigurable[i] and tower_heights[i] + tower_heights[i - 1] == max_height:
        max_towers += 1

# Write to 'turnuri.out'
with open('turnuri.out', 'w') as fout:
    fout.write(' '.join(map(str, tower_heights)) + '\n')
    fout.write(str(max_height) + '\n')
    fout.write(str(max_towers) + '\n')
```
```
