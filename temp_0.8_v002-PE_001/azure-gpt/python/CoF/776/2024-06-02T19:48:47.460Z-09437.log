---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Define a function to perform one simulation step
def simulate_step(fish_grid, n, m):
    # Create padded grid to handle edge cases (boundary conditions)
    padded_grid = np.pad(fish_grid, ((1, 1), (1, 1)), mode='constant', constant_values=-1)
    new_grid = fish_grid.copy()

    # Offsets for the eight neighbors
    neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

    # Iterate over all fish positions
    for i in range(n):
        for j in range(m):
            neighbor_colors = [padded_grid[i + 1 + dx, j + 1 + dy] for dx, dy in neighbors if padded_grid[i + 1 + dx, j + 1 + dy] != -1]

            # Count the colors of neighbors
            red_count = np.sum(neighbor_colors)
            blue_count = len(neighbor_colors) - red_count

            # Determine new color based on neighbors
            if red_count > blue_count:
                new_grid[i, j] = 1
            elif blue_count > red_count:
                new_grid[i, j] = 0

    return new_grid

# Read input
with open('culori.in', 'r') as file:
    n, m, t = map(int, file.readline().split())
    fish_colors = {'r': 1, 'a': 0}
    fish_grid = np.array([[fish_colors[ch] for ch in file.readline().strip()] for _ in range(n)])

# Run the simulation for t steps
for _ in range(t):
    fish_grid = simulate_step(fish_grid, n, m)

# Prepare the output
output_colors = {1: 'r', 0: 'a'}
output = '\n'.join(''.join(output_colors[fish] for fish in row) for row in fish_grid)

# Write output
with open('culori.out', 'w') as file:
    file.write(output)
```

This code snippet is a python solution, using NumPy to handle grid operations efficiently. Please note that the code assumes the files 'culori.in' and 'culori.out' exist in the working directory. The provided solution reads the input grid, simulates the fish color changes for 't' time steps, and writes the final grid to an output file. It does not use `input()` or `print()` for I/O operations, as per the requirements.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error you are encountering, `ModuleNotFoundError: No module named 'numpy'`, indicates that numpy library is not installed in the environment where the code is being executed. Since we have a strict memory constraint and the environment does not have numpy installed, we need to refactor the solution to not use numpy or any other external libraries that are not part of the standard library.

Here is a complete solution that does not use numpy, only standard Python data structures:

```python
# Define a function to perform one simulation step
def simulate_step(fish_grid, n, m):
    # Copy original grid
    new_grid = [row[:] for row in fish_grid]

    # Offsets for the eight neighbors
    neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

    # Iterate over all fish positions
    for i in range(n):
        for j in range(m):
            red_count = 0
            blue_count = 0

            # Check each neighbor
            for dx, dy in neighbors:
                x, y = i + dx, j + dy
                if 0 <= x < n and 0 <= y < m:
                    if fish_grid[x][y] == 'r':
                        red_count += 1
                    else:
                        blue_count += 1

            # Determine new color based on neighbors
            if red_count > blue_count:
                new_grid[i][j] = 'r'
            elif blue_count > red_count:
                new_grid[i][j] = 'a'

    return new_grid

# Read input
with open('culori.in', 'r') as file:
    n, m, t = map(int, file.readline().split())
    fish_grid = [list(file.readline().strip()) for _ in range(n)]

# Run the simulation for t steps
for _ in range(t):
    fish_grid = simulate_step(fish_grid, n, m)

# Prepare the output
output = '\n'.join(''.join(row) for row in fish_grid)

# Write output
with open('culori.out', 'w') as file:
    file.write(output)
```

This solution uses lists of strings to represent the grid and performs the simulation directly on these data structures. It follows the same logical steps as the numpy-based solution but ensures compatibility with environments where numpy is not available. Additionally, it should be memory efficient as it only deals with characters and uses list comprehensions to avoid unnecessary memory allocations.
