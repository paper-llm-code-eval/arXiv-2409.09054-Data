---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `piata.in` and write to `piata.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionuţ pleacă la sfârşit de săptămână să se relaxeze într-un parc de distracţii. La intrarea în parc se află o piaţă mare, pavată cu plăci de marmură de aceeaşi dimensiune. Fiecare placă are scris pe ea un singur număr dintre $f(1), f(2), f(3), …, f(n)$, unde $f(k)$ este suma cifrelor lui $k$, pentru $k$ din mulţimea $\{1, 2, \dots, n\}$. Piaţa are forma unui tablou bidimensional cu $n$ linii şi $n$ coloane. Plăcile care alcătuiesc piaţa sunt aşezate astfel:

-	pe prima linie sunt plăci cu numerele $f(1), f(2), \dots, f(n-2), f(n-1), f(n)$ (în această ordine de la stânga la dreapta);
-	pe linia a doua sunt plăci cu numerele $f(n),f(1),f(2), f(3), \dots, f(n-1)$, (în această ordine de la stânga la dreapta);
-	pe linia a treia sunt plăci cu numerele $f(n-1),f(n),f(1),f(2), f(3), \dots, f(n-2)$ (în această ordine de la stânga la dreapta);
-	$\dots$
-	pe ultima linie sunt plăci cu numerele $f(2), \dots, f(n-2), f(n-1), f(n), f(1)$ (în această ordine de la stânga la dreapta).

Părinţii lui Ionuţ vor ca şi în această zi, fiul lor să rezolve măcar o problemă cu sume. Astfel aceştia îi propun lui Ionuţ să determine suma numerelor aflate pe porţiunea dreptunghiulară din piaţă având colţurile în poziţiile în care se găsesc aşezaţi ei. Tatăl se află pe linia $i_T$ şi coloana $j_T$ (colţul stânga-sus), iar mama pe linia $i_M$ şi coloana $j_M$ (colţul dreapta-jos). Porţiunea din piaţă pentru care se doreşte suma este în formă dreptunghiulară, cu laturile paralele cu marginile pieţei (vezi zona plină din exemplu). Dacă Ionuţ va calcula suma cerută, atunci el va fi recompensat în parcul de distracţii, de către părinţii lui.
  
# Cerinţă
Determinaţi suma cerută de părinţii lui Ionuţ.  

# Date de intrare


Fişierul de intrare `piata.in` conţine pe prima linie numărul natural n reprezentând dimensiunea pieţei. Pe linia a doua se află despărţite printr-un spaţiu numerele naturale $i_T$ şi $j_T$. Pe linia a treia se află despărţite printr-un spaţiu numerele naturale $i_M$ şi $j_M$.

# Date de ieșire


Fişierul de ieşire `piata.out`, va conţine pe prima linie suma cerută.

# Restricții și precizări

* $2 \leq n \leq 40 \ 000$
* $1 \leq i_T, j_T, i_M, j_M \leq n$
* $i_T \leq i_M$
* $j_T \leq j_M$
* Suma cerută de părinţii lui Ionuţ nu depăşeşte niciodată valoarea $2 \ 100 \ 000 \ 000$.
* $20\%$ din teste au $n \leq 250$
* $30\%$ din teste au $250 \leq n \leq 10 \ 000$
* $30\%$ din teste au $10 \ 001 \leq n \leq 28 \ 000$
* $20\%$ din teste au $28 \ 001 \leq n \leq 40 \ 000$

---

Example:
`piata.in`
```
6
2 3
6 5
```

`piata.out`
```
51
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to calculate sum of digits
def sum_of_digits(k):
    return np.sum([int(digit) for digit in str(k)])

# Function to generate the sum array
def generate_sum_array(n):
    sum_array = np.zeros(n, dtype=np.int32)  # Use np.int32 to limit memory usage
    for i in range(1, n+1):
        sum_array[i - 1] = sum_of_digits(i)
    return sum_array

# Function to calculate the sum in the requested area
def calculate_sum(n, i_T, j_T, i_M, j_M, sum_array):
    total_sum = 0
    for i in range(i_T, i_M + 1):
        offset = (n - i) % n
        total_sum += np.sum(sum_array[j_T-1:j_M][(np.arange(j_T-1, j_M) + offset) % n])
    return total_sum

# Read input file
with open('piata.in', 'r') as file:
    n = int(file.readline().strip())
    i_T, j_T = map(int, file.readline().split())
    i_M, j_M = map(int, file.readline().split())

# Calculate sum array once
sum_array = generate_sum_array(n)

# Calculate the requested sum
requested_sum = calculate_sum(n, i_T, j_T, i_M, j_M, sum_array)

# Write output file
with open('piata.out', 'w') as file:
    file.write(str(requested_sum))
```
```
---------- user ----------


Expected program to write result to `piata.out` and read from `piata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate sum of digits
def sum_of_digits(k):
    sum_digits = 0
    while k:
        sum_digits += k % 10
        k //= 10
    return sum_digits

# Function to calculate all f(k) for k in {1, ..., n}
def calc_fk(n):
    fk = np.zeros(n, dtype=np.int32) # Use int32 to save memory
    for i in range(1, n + 1):
        fk[i - 1] = sum_of_digits(i)
    return fk

# Rotate function to align the fk array for the requested row
def rotate(arr, n, row):
    return np.roll(arr, shift=(n - row + 1) % n)

# Calculate the sum of the selected tiles
def calc_sum(n, i_T, j_T, i_M, j_M, fk):
    total_sum = 0
    for row in range(i_T, i_M + 1):
        r_fk = rotate(fk, n, row)
        total_sum += r_fk[j_T - 1:j_M].sum()
    return total_sum

# Read input file
with open('piata.in', 'r') as file:
    n = int(file.readline())
    i_T, j_T = map(int, file.readline().split())
    i_M, j_M = map(int, file.readline().split())

# Calculate f(k) for k in {1, ..., n} only once
fk = calc_fk(n)

# Find the sum of the selected tiles
selected_sum = calc_sum(n, i_T, j_T, i_M, j_M, fk)

# Write the result to the output file
with open('piata.out', 'w') as file:
    file.write(str(selected_sum) + '\n')
```
```
---------- user ----------


Expected program to write result to `piata.out` and read from `piata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
