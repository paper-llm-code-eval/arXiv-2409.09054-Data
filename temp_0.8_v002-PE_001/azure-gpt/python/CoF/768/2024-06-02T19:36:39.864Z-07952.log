---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `alee.in` and write to `alee.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Parcul oraşului a fost neglijat mult timp, astfel că acum toate aleile sunt distruse. Prin urmare, anul acesta Primăria şi-a propus să facă reamenajări. 

Parcul are forma unui pătrat cu latura de $n$ metri şi este înconjurat de un gard care are exact două porţi. Proiectanţii de la Primărie au realizat o hartă a parcului şi au trasat pe hartă un caroiaj care împarte parcul în $n \times n$ zone pătrate cu latura de $1$ metru. Astfel harta parcului are aspectul unei matrice pătratice cu $n$ linii şi $n$ coloane. Liniile şi respectiv coloanele sunt numerotate de la $1$ la $n$. Elementele matricei corespund zonelor pătrate de latură $1$ metru. O astfel de zonă poate să conţină un copac sau este liberă.

Edilii oraşului doresc să paveze cu un număr minim de dale pătrate cu latura de $1$ metru zonele libere (fără copaci) ale parcului, astfel încât să se obţină o alee continuă de la o poartă la alta.

# Cerinţă

Scrieţi un program care să determine numărul minim de dale necesare pentru construirea unei alei continue de la o poartă la cealaltă.

# Date de intrare


Fişierul de intrare `alee.in` conţine pe prima linie două valori naturale $n$ şi $m$ separate printr-un spaţiu, reprezentând dimensiunea parcului, respectiv numărul de copaci care se găsesc în parc. Fiecare dintre următoarele $m$ linii conţine câte două numere naturale $x$ şi $y$ separate printr-un spaţiu, reprezentând poziţiile copacilor în parc ($x$ reprezintă linia, iar $y$ reprezintă coloana zonei în care se află copacul). Ultima linie a fişierului conţine patru numere naturale $x_1 \ y_1 \ x_2 \ y_2$, separate prin câte un spaţiu, reprezentând poziţiile celor două porţi ($x_1$, $y_1$ reprezintă linia şi respectiv coloana zonei ce conţine prima poartă, iar $x_2$, $y_2$ reprezintă linia şi respectiv coloana zonei ce  conţine cea de a doua poartă). 

# Date de ieșire


Fişierul de ieşire `alee.out` va conţine o singură linie pe care va fi scris un număr natural care reprezintă numărul minim de dale necesare pentru construirea aleii. 

# Restricții și precizări

* $1 \leq n \leq 175$
* $1 \leq m < n \cdot n$
*	Aleea este continuă dacă oricare două plăci consecutive au o latură comună.
*	Aleea începe cu zona unde se găseşte prima poartă şi se termină cu zona unde se găseşte cea de a doua poartă. 
*	Poziţiile porţilor sunt distincte şi corespund unor zone libere.
*	Pentru datele de test există întotdeauna soluţie.

---

Example:
`alee.in`
```
8 6 
2 7
3 3
4 6
5 4
7 3
7 5 
1 1 8 8
```

`alee.out`
```
15
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import deque

# Read data from file
with open('alee.in', 'r') as file:
    n, m = map(int, file.readline().split())
    park = np.zeros((n+1, n+1), dtype=np.int8)  # We use n+1 due to 1-based indexing
    # Mark the trees in the park
    for _ in range(m):
        x, y = map(int, file.readline().split())
        park[x, y] = -1  # -1 represents a tree
    # Read gate positions
    x1, y1, x2, y2 = map(int, file.readline().split())

# Directions for moving up, down, left, and right
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Implement BFS to find the shortest path from gate1 to gate2
def bfs(start, end):
    queue = deque([start])
    while queue:
        x, y = queue.popleft()
        if (x, y) == end:
            return park[x, y]  # Return the distance at gate2
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 1 <= nx <= n and 1 <= ny <= n and park[nx, ny] == 0:
                park[nx, ny] = park[x, y] + 1  # Update distance
                queue.append((nx, ny))
    return -1  # If there is no path

# Initialize the starting point with a distance of 1
park[x1, y1] = 1
# Run BFS and get the shortest path length
path_length = bfs((x1, y1), (x2, y2))

# Write result to file
with open('alee.out', 'w') as file:
    file.write(str(path_length))
```
```
---------- user ----------


Expected program to write result to `alee.out` and read from `alee.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import deque

# Define the directions for movement
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# BFS algorithm to find the shortest path
def bfs(start, end, park, n):
    queue = deque([start])
    park[start] = 1  # Start with a distance of 1
    while queue:
        x, y = queue.popleft()
        if (x, y) == end:
            return park[x, y]  # Return the distance at end gate
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 1 <= nx <= n and 1 <= ny <= n and park[nx, ny] == 0:
                park[nx, ny] = park[x, y] + 1  # Update distance
                queue.append((nx, ny))
    return -1  # If there is no path

# Read data from file
with open('alee.in', 'r') as file:
    n, m = map(int, file.readline().split())
    park = np.zeros((n+1, n+1), dtype=np.int8)  # Use n+1 for 1-based indexing
    for _ in range(m):
        x, y = map(int, file.readline().split())
        park[x, y] = -1  # Mark trees with -1
    x1, y1, x2, y2 = map(int, file.readline().split())

# Run BFS to find the shortest path from gate1 to gate2
path_length = bfs((x1, y1), (x2, y2), park, n)

# Write the result to file
with open('alee.out', 'w') as file:
    file.write(str(path_length))
```
```
---------- user ----------


Expected program to write result to `alee.out` and read from `alee.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from collections import deque

def bfs(park, start, end, n):
    queue = deque([start])
    park[start] = 1  # Distance to the start is 1
    while queue:
        x, y = queue.popleft()
        if (x, y) == end:
            return park[end]
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            nx, ny = x + dx, y + dy
            if 1 <= nx <= n and 1 <= ny <= n and park[(nx, ny)] == 0:
                park[(nx, ny)] = park[(x, y)] + 1
                queue.append((nx, ny))
    return -1

def main():
    with open('alee.in', 'r') as f:
        n, m = map(int, f.readline().split())
        park = np.zeros((n+1, n+1), dtype=np.int8)
        for _ in range(m):
            x, y = map(int, f.readline().split())
            park[x, y] = -1  # Tree
        x1, y1, x2, y2 = map(int, f.readline().split())

    path_length = bfs(park, (x1, y1), (x2, y2), n)

    with open('alee.out', 'w') as f:
        f.write(str(path_length))

main()
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available. Since the memory usage is a concern and we need to optimize for both time and memory, I will avoid using `numpy` and stick to standard Python lists. Here is the rewritten solution without `numpy`.

```python
from collections import deque

def bfs(park, start, end, n):
    queue = deque([start])
    park[start[0]][start[1]] = 1  # Distance to the start is 1
    while queue:
        x, y = queue.popleft()
        if (x, y) == end:
            return park[x][y]
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            nx, ny = x + dx, y + dy
            if 1 <= nx <= n and 1 <= ny <= n and park[nx][ny] == 0:
                park[nx][ny] = park[x][y] + 1
                queue.append((nx, ny))
    return -1

def main():
    with open('alee.in', 'r') as f:
        n, m = map(int, f.readline().split())
        park = [[0] * (n+1) for _ in range(n+1)]  # Initialize the park matrix
        for _ in range(m):
            x, y = map(int, f.readline().split())
            park[x][y] = -1  # Tree
        x1, y1, x2, y2 = map(int, f.readline().split())

    path_length = bfs(park, (x1, y1), (x2, y2), n)

    with open('alee.out', 'w') as f:
        f.write(str(path_length))

main()
```
