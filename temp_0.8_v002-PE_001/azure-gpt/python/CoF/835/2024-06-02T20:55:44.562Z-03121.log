---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `unific.in` and write to `unific.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un şir $A=(A_1, A_2, \dots, A_N)$, format din $N$ numere naturale nenule. Două numere se consideră vecine dacă se află pe poziţii alăturate ($A_i$ are ca vecini pe $A_{i-1}$ şi $A_{i+1}$, pentru orice $1<i<N$, $A_1$ are ca vecin doar pe $A_2$, iar $A_N$ are ca vecin doar pe $A_{N-1}$).
Dacă două elemente vecine $A_i, A_{i+1}$ au cel puţin o cifră comună, ele se pot unifica. Procedeul de unificare constă în eliminarea din numerele $A_i$ şi $A_{i+1}$ a tuturor cifrelor comune şi adăugarea prin alipire a numărului obţinut din $A_{i+1}$ la numărul obţinut din $A_{i}$, formându-se astfel un nou număr. Numărul $A_i$ va fi înlocuit cu noul număr, iar numărul $A_{i+1} va fi eliminat din şir. 

De exemplu, numerele $A_i=23814$ şi $A_{i+1}=40273$ au cifrele $2, 3, 4$ comune, după unificare obţinem $A_i=817$, iar $A_{i+1}$ este eliminat; observaţi că dacă după eliminarea cifrelor comune, numerele încep cu zerouri nesemnificative, acestea vor fi eliminate, apoi se realizează alipirea. Dacă în urma eliminării cifrelor comune, unul dintre numere nu mai are cifre, atunci numărul rezultat va avea cifrele rămase în celălalt. Dacă în urma eliminării cifrelor comune atât $A_i$ cât şi $A_{i+1}$ nu mai au cifre, atunci ambele numere vor fi eliminate din şir, fără a fi înlocuite cu o altă valoare.

Ordinea în care se fac unificările în şir este importantă: la fiecare pas se alege prima pereche de elemente vecine $A_i \ A_{i+1}$ care poate fi unificată, considerând şirul parcurs de la stânga la dreapta. (De exemplu, considerând $A_i=123, A_{i+1}=234, A_{i+2}=235$, se unifică $A_i$ cu $A_{i+1} \rightarrow A_i=14$, iar unificarea cu următorul număr nu mai este posibilă).

# Cerință

Cunoscându-se şirul celor $N$ numere naturale, să se determine:

1. cifra care apare cel mai frecvent în scrierea tuturor celor $N$ numere; dacă există mai multe cifre cu aceeaşi frecvenţă de apariţie maximă, se va reţine cea mai mică cifră.
2. şirul obţinut prin efectuarea unui număr maxim de unificări, după regulile descrise în enunţ. 

# Date de intrare

Fişierul de intrare `unific.in` conţine pe prima linie o valoare naturală $N$, iar pe următoarele $N$ linii, în ordine, cele $N$ numere naturale din şirul $A$, câte un număr pe o linie.

# Date de ieșire

Fişierul de ieşire `unific.out` va conţine pe prima linie un număr natural $c$ reprezentând cifra care apare cel mai frecvent în scrierea celor $N$ numere naturale. Pe cea de a doua linie un număr natural $Nr$ reprezentând numărul de numere naturale rămase în şir după efectuarea unui număr maxim de unificări. Pe cea de a treia linie se vor scrie cele $Nr$ numere naturale rămase, în ordinea din şir, separate prin câte un spaţiu. Dacă în urma procedeului de unificare, toate numerele vor fi eliminate, fişierul de ieşire va conţine o singură linie, pe care se va scrie cifra care apare cel mai frecvent în scrierea celor $N$ numere naturale

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* Numerele din şirul iniţial, precum şi numerele obţinute în urma unificărilor, nu vor depăşi $10^{18}$;
* Pentru datele de test şirul obţinut în urma unificărilor este nevid.
* Pentru $30$% dintre teste $N \leq 1 \ 000$;
* Pentru $70$% dintre teste numere naturale din şir au cifrele nenule.
* Pentru determinarea corectă a primei cerinţe se acordă $10\%$ din punctajul pe test. Punctajul integral se acordă pe ambele cerinţe rezolvate corect.

---

Example:
`unific.in`
```
10
6
47
67
40
123
231
1238
331
2035
50007
```

`unific.out`
```
3
2
0 837
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read from 'unific.in'
with open("unific.in", "r") as file:
    N = int(file.readline().strip())
    numbers = [int(file.readline().strip()) for _ in range(N)]

# Calculate digit frequency
freq = np.zeros(10, dtype=int)
for number in numbers:
    for digit in str(number):
        freq[int(digit)] += 1
most_common_digit = np.argmin(np.maximum(-freq, np.arange(10)))

def remove_common_digits(a, b):
    """Remove common digits from a and b and return the concatenated result.
    If any number becomes zero after removing digits, it returns the non-zero number."""
    common_digits = set(str(a)).intersection(str(b))
    if not common_digits:
        return None
    a_digits = ''.join(d for d in str(a) if d not in common_digits).lstrip('0')
    b_digits = ''.join(d for d in str(b) if d not in common_digits).lstrip('0')
    return int(a_digits + b_digits) if a_digits or b_digits else None

i = 0
while i < len(numbers) - 1:
    new_number = remove_common_digits(numbers[i], numbers[i + 1])
    if new_number is not None:
        numbers[i] = new_number
        del numbers[i + 1]
        i = max(i - 1, 0)  # Step back to check for new unification opportunities
    else:
        i += 1

# Write to 'unific.out'
with open("unific.out", "w") as file:
    file.write(f"{most_common_digit}\n")
    if numbers:
        file.write(f"{len(numbers)}\n")
        file.write(" ".join(map(str, numbers)) + "\n")
```
```

This solution reads from `unific.in`, calculates the most common digit, performs the unification process, and writes the output to `unific.out`. It uses numpy for efficient frequency calculation and simple native Python data structures for the rest of the problem. It is optimized to limit memory usage by avoiding unnecessary data structures or copies of the list.
---------- user ----------


Expected program to write result to `unific.out` and read from `unific.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to remove common digits and return the concatenated result
def unify(a, b):
    a_str, b_str = str(a), str(b)
    common = set(a_str) & set(b_str)
    if not common:
        return None
    a_unified = int(''.join(filter(lambda x: x not in common, a_str)).lstrip('0') or '0')
    b_unified = int(''.join(filter(lambda x: x not in common, b_str)).lstrip('0') or '0')
    return int(str(a_unified) + str(b_unified)) if a_unified or b_unified else 0

# Function to process the entire array and unify where possible
def process_array(arr):
    i = 0
    while i < len(arr) - 1:
        unified = unify(arr[i], arr[i + 1])
        if unified is not None:
            arr[i] = unified
            del arr[i + 1]
        else:
            i += 1
    return arr

# Read data from 'unific.in'
with open('unific.in', 'r') as fin:
    N = int(fin.readline().strip())
    numbers = [int(fin.readline().strip()) for _ in range(N)]

# Calculate digit frequency
digits = np.zeros(10, dtype=np.int64)
for number in numbers:
    for digit in str(number):
        digits[int(digit)] += 1
most_common_digit = np.argmin(np.maximum(-digits, np.arange(10)))

# Process unification of the array
result = process_array(numbers)

# Write data to 'unific.out'
with open('unific.out', 'w') as fout:
    fout.write(f"{most_common_digit}\n")
    if result:
        fout.write(f"{len(result)}\n")
        fout.write(" ".join(map(str, result)) + "\n")
```
```
---------- user ----------


Expected program to write result to `unific.out` and read from `unific.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
