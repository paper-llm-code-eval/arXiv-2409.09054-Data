---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input
with open('multimi.in', 'r') as file:
    n = int(file.readline().strip())
    ranges = [list(map(int, file.readline().split())) for _ in range(n)]

# Find the intersection range
start, end = ranges[0]
for r in ranges[1:]:
    start, end = max(start, r[0]), min(end, r[1])
    if start > end:
        # No intersection, write the output and exit
        with open('multimi.out', 'w') as file:
            file.write('multimea vida')
        exit()

# Generate the intersection elements
intersection = np.arange(start, end + 1)

# Write output
with open('multimi.out', 'w') as file:
    file.write(' '.join(map(str, intersection)) if intersection.size > 0 else 'multimea vida')
```

This solution reads from `multimi.in`, calculates the intersection of the sets by comparing the start and end points, and writes the result to `multimi.out`. It uses `numpy` to generate the intersection elements efficiently. If there is no intersection, it writes `multimea vida` to the output file. The solution is designed to be memory efficient and should stay within the 8MB limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed on the environment where the program is being executed. Since we are limited by the memory and should not rely on additional libraries that may exceed this limit, we can solve the problem using only built-in Python libraries to ensure it compiles and runs correctly.

The rewritten solution without `numpy` is as follows:

```python
# Read input
with open('multimi.in', 'r') as file:
    n = int(file.readline().strip())
    ranges = [list(map(int, file.readline().split())) for _ in range(n)]

# Find the intersection range
start, end = ranges[0]
for r in ranges[1:]:
    start, end = max(start, r[0]), min(end, r[1])
    if start > end:
        # No intersection, write the output and exit
        with open('multimi.out', 'w') as file:
            file.write('multimea vida')
        exit()

# Generate the intersection elements
intersection = list(range(start, end + 1))

# Write output
with open('multimi.out', 'w') as file:
    file.write(' '.join(map(str, intersection)) if intersection else 'multimea vida')
```

This solution does not use `numpy` and only employs built-in Python functions and libraries. It still reads from `multimi.in` and writes to `multimi.out`, processes the ranges to find the intersection, and outputs the results as specified.
