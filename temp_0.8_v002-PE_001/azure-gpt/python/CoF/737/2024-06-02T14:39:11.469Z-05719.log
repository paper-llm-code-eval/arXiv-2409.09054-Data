---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Import numpy for efficient array manipulation
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        sets = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return sets

def write_output(filename, intersection):
    with open(filename, 'w') as file:
        if intersection.size == 0:
            file.write('multimea vida\n')
        else:
            file.write(' '.join(map(str, intersection)) + '\n')

def find_intersection(sets):
    # Initialize intersection range with the first set
    intersection_min, intersection_max = sets[0]

    # Narrow down the intersection range with each subsequent set
    for s_min, s_max in sets[1:]:
        intersection_min = max(intersection_min, s_min)
        intersection_max = min(intersection_max, s_max)

        # If there is no overlap, return an empty intersection
        if intersection_min > intersection_max:
            return np.array([], dtype=int)

    # Generate the intersection set as a numpy array
    return np.arange(intersection_min, intersection_max + 1, dtype=int)

# Main function to solve the problem
def solve_problem():
    sets = read_input('multimi.in')
    intersection = find_intersection(sets)
    write_output('multimi.out', intersection)

# Execute the main function
solve_problem()
```

This Python solution reads sets from the input file `multimi.in`, finds the intersection, and writes the result to `multimi.out`. It uses NumPy to handle array operations efficiently and check the intersection of the number sets with minimal memory usage to respect the ~8MB memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the Python environment where the code is being executed does not have the `numpy` library installed. Since we have a strict memory limit and are asked to optimize both time and memory usage, but cannot use `numpy`, we will have to implement a solution using Python's standard libraries, which should suffice for the given constraints.

Let's rewrite the solution without using `numpy`. Since the sets consist of consecutive natural numbers, we can simply keep track of the minimum and maximum values that define the intersection set:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        sets = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return sets

def write_output(filename, intersection):
    with open(filename, 'w') as file:
        if len(intersection) == 0:
            file.write('multimea vida\n')
        else:
            file.write(' '.join(map(str, intersection)) + '\n')

def find_intersection(sets):
    # Initialize intersection range with the first set
    intersection_min, intersection_max = sets[0]

    # Narrow down the intersection range with each subsequent set
    for s_min, s_max in sets[1:]:
        intersection_min = max(intersection_min, s_min)
        intersection_max = min(intersection_max, s_max)

        # If there is no overlap, return an empty intersection
        if intersection_min > intersection_max:
            return []

    # Generate the intersection set
    return list(range(intersection_min, intersection_max + 1))

# Main function to solve the problem
def solve_problem():
    sets = read_input('multimi.in')
    intersection = find_intersection(sets)
    write_output('multimi.out', intersection)

# Execute the main function
solve_problem()
```

This solution still reads the sets from `multimi.in`, calculates their intersection, and writes the result to `multimi.out`, but now it does so using only Python's built-in capabilities, thus avoiding the `ModuleNotFoundError` for `numpy`.
