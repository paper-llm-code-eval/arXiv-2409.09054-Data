---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `summax.in` and write to `summax.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem o matrice triunghiulară cu $n$ linii, cu elemente numere întregi. În această matrice putem construi un traseu după următoarea regulă:
- primul element al traseului este elementul $a_{1,1}$
- dacă elementul $a_{i,j}$ aparţine traseului, atunci următorul element al traseului poate fi doar $a_{i+1,j}$ sau $a_{i+1,j+1}$, pentru orice $1≤j≤i≤n$

Traseul se va codifica cu numerele de ordine ale coloanelor, parcurgând liniile de la $1$ la $n$. Valoarea traseului este egală cu suma elementelor ce îl formează.

~[summax.png]

Traseul evidenţiat în exemplul din dreapta are valoarea $5+4+6+5+4=24$, şi se codifică cu `1,2,3,3,4`.

Fie mulţimea tuturor traseelor de valoare maximă generate în ordine lexicografică și numerotate. Pentru exemplul alăturat avem șase trasee de lungime maximă:
* traseul $1$.	`1 1 1 1 2`     ($5+2+7+6+4=24$)
* traseul $2$.	`1 1 1 2 2`     ($5+2+7+6+4=24$)
* traseul $3$.	`1 2 2 2 2`     ($5+4+5+6+4=24$)
* traseul $4$.	`1 2 3 3 4`     ($5+4+6+5+4=24$)
* traseul $5$.	`1 2 3 4 4`     ($5+4+6+5+4=24$)
* traseul $6$.	`1 2 3 4 5`     ($5+4+6+5+4=24$)

# Cerinţă 
Cunoscând dimensiunea și elementele unei matrice triunghiulare, respectiv două numere naturale $\text{st}$ şi $\text{dr}$ ($\text{st}≤\text{dr}$), se cere să se determine:
1. Numărul total al traseelor de valoare maximă. În cazul în care această valoare depășește $2 \ 000 \ 000 \ 000$, se va tipări valoarea $2 \ 000 \ 000 \ 001$;
2. Traseele cu numerele de ordine $\text{st}, \text{st}+1, \dots, \text{dr}$.

# Date de intrare
Fişierul `summax.in` conţine pe prima linie un număr natural $v$. Pentru toate testele de intrare, numărul $v$ poate avea doar valoarea $1$ sau $2$.
A doua linie conține trei numere naturale $n$, $\text{st}$ şi $\text{dr}$, separate prin spaţiu. Următoarele $n$ linii conțin câte o linie a matricei triunghiulare astfel: linia $i$ conține $i$ elemente, și anume valorile $a_{i,1} a_{i,2} ... a_{i,i}$ pentru orice $1≤i≤n$.

# Date de ieşire
Dacă valoarea lui $v$ este $1$, se va rezolva numai punctul $1$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se va scrie un singur număr natural ce reprezintă numărul traseelor de lungime maximă.

Dacă valoarea lui $v$ este $2$, se va rezolva numai punctul $2$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se vor tipări pe câte o linie $n$ numere naturale separate prin spațiu, reprezentând codificările traseelor de valoare maximă cu numerele de ordine $\text{st}, \text{st}+1, \dots, \text{dr}$.

# Restricții și precizări
* $1 ≤ n ≤ 2 \ 000$;
* $1 ≤ st ≤ dr ≤ 2 \ 000 \ 000 \ 000$;
* $1 ≤ dr – st ≤ 1 \ 000$;
* elementele matricei triunghiulare sunt numere naturale strict pozitive.
* valoarea maximă a traseului nu depășește $1 \ 000 \ 000 \ 000$

---

Example:
`summax.in`
```
1
5 2 4
5
2 4
7 5 6
6 6 5 5
3 4 3 4 4
```

`summax.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def compute_paths(triangle, n):
    paths_count = np.zeros((n, n), dtype=np.int64)
    paths_count[0][0] = 1
    max_sum = np.copy(triangle)
    
    for i in range(1, n):
        for j in range(i+1):
            paths = 0
            if j > 0 and max_sum[i-1][j-1] == max_sum[i][j]:
                paths += paths_count[i-1][j-1]
            if j < i and max_sum[i-1][j] == max_sum[i][j]:
                paths += paths_count[i-1][j]
            if paths == 0:
                max_sum[i][j] += max(max_sum[i-1][j-1] if j > 0 else 0, max_sum[i-1][j] if j < i else 0)
            paths_count[i][j] = paths

    return paths_count, max_sum[-1][-1]

def find_path(triangle, paths_count, max_sum, st):
    n = len(triangle)
    path = []
    j = 0
    for i in range(n):
        path.append(j+1)
        if i < n - 1:
            down_right = paths_count[i+1][j+1] if j+1 <= i else 0
            if st > down_right:
                st -= down_right
                j += 1
    
    return path

def write_output(file_name, data, v, st=None, dr=None):
    with open(file_name, 'w') as f:
        if v == 1:
            f.write(str(data if data <= 2000000000 else 2000000001))
        else:
            for i in range(st, dr+1):
                path = find_path(triangle, paths_count, max_sum, i)
                f.write(' '.join(map(str, path)) + '\n')

with open('summax.in') as file:
    lines = file.readlines()
    v = int(lines[0])
    n, st, dr = map(int, lines[1].split())
    triangle = np.array([list(map(int, line.split())) for line in lines[2:]], dtype=np.int64)

paths_count, max_sum = compute_paths(triangle, n)

if v == 1:
    total_paths = np.sum(paths_count[-1])
    write_output('summax.out', total_paths, v)
else:
    write_output('summax.out', None, v, st, dr)
```

This code should provide the correct output in file `summax.out` for both cases when `v` is either `1` or `2`. The path finding logic calculates each path on the fly when needed, to comply with the memory limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue indicated by the error message is that the `numpy` module is not installed in the environment where the program is being executed. Since the stipulated memory limit is very tight and we need to optimize for both time and memory usage, I'll rewrite the solution without using numpy or any other third-party libraries, using only standard Python data structures and functions to ensure maximum compatibility and efficiency.

Here's the corrected solution using only built-in Python functionality:

```python
def compute_paths(triangle, n):
    paths_count = [[0]*n for _ in range(n)]
    paths_count[0][0] = 1
    max_sum = [[0]*n for _ in range(n)]
    max_sum[0][0] = triangle[0][0]
    
    for i in range(1, n):
        for j in range(i+1):
            max_sum[i][j] = triangle[i][j]
            paths = 0
            if j > 0:
                max_sum[i][j] = max(max_sum[i][j], max_sum[i-1][j-1] + triangle[i][j])
                if max_sum[i][j] == max_sum[i-1][j-1] + triangle[i][j]:
                    paths += paths_count[i-1][j-1]
            if j < i:
                max_sum[i][j] = max(max_sum[i][j], max_sum[i-1][j] + triangle[i][j])
                if max_sum[i][j] == max_sum[i-1][j] + triangle[i][j]:
                    paths += paths_count[i-1][j]
            paths_count[i][j] = paths

    return paths_count, max_sum[-1][-1]

def find_path(triangle, paths_count, max_sum, st):
    n = len(triangle)
    path = []
    j = 0
    for i in range(n):
        path.append(j+1)
        if i < n - 1:
            down_right = paths_count[i+1][j+1] if j+1 <= i else 0
            if st > down_right:
                st -= down_right
                j += 1
    
    return path

def write_output(file_name, data, v, st=None, dr=None):
    with open(file_name, 'w') as f:
        if v == 1:
            f.write(str(data if data <= 2000000000 else 2000000001))
        else:
            for i in range(st, dr+1):
                path = find_path(triangle, paths_count, max_sum, i)
                f.write(' '.join(map(str, path)) + '\n')

with open('summax.in') as file:
    lines = file.readlines()
    v = int(lines[0])
    n, st, dr = map(int, lines[1].split())
    triangle = [list(map(int, line.split())) for line in lines[2:]]

paths_count, max_sum = compute_paths(triangle, n)

if v == 1:
    total_paths = sum(paths_count[-1])
    write_output('summax.out', total_paths, v)
else:
    write_output('summax.out', None, v, st, dr)
```

This code will read from `summax.in`, compute the number of maximum value paths, and then, depending on the value of `v`, it will write either the count of such paths or the specific paths themselves to `summax.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
5 2 4
5
2 4
7 5 6
6 6 5 5
3 4 3 4 4
```
Expected output:
```
6
```
Found output:
```
16
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
