---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `summax.in` and write to `summax.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem o matrice triunghiulară cu $n$ linii, cu elemente numere întregi. În această matrice putem construi un traseu după următoarea regulă:
- primul element al traseului este elementul $a_{1,1}$
- dacă elementul $a_{i,j}$ aparţine traseului, atunci următorul element al traseului poate fi doar $a_{i+1,j}$ sau $a_{i+1,j+1}$, pentru orice $1≤j≤i≤n$

Traseul se va codifica cu numerele de ordine ale coloanelor, parcurgând liniile de la $1$ la $n$. Valoarea traseului este egală cu suma elementelor ce îl formează.

~[summax.png]

Traseul evidenţiat în exemplul din dreapta are valoarea $5+4+6+5+4=24$, şi se codifică cu `1,2,3,3,4`.

Fie mulţimea tuturor traseelor de valoare maximă generate în ordine lexicografică și numerotate. Pentru exemplul alăturat avem șase trasee de lungime maximă:
* traseul $1$.	`1 1 1 1 2`     ($5+2+7+6+4=24$)
* traseul $2$.	`1 1 1 2 2`     ($5+2+7+6+4=24$)
* traseul $3$.	`1 2 2 2 2`     ($5+4+5+6+4=24$)
* traseul $4$.	`1 2 3 3 4`     ($5+4+6+5+4=24$)
* traseul $5$.	`1 2 3 4 4`     ($5+4+6+5+4=24$)
* traseul $6$.	`1 2 3 4 5`     ($5+4+6+5+4=24$)

# Cerinţă 
Cunoscând dimensiunea și elementele unei matrice triunghiulare, respectiv două numere naturale $\text{st}$ şi $\text{dr}$ ($\text{st}≤\text{dr}$), se cere să se determine:
1. Numărul total al traseelor de valoare maximă. În cazul în care această valoare depășește $2 \ 000 \ 000 \ 000$, se va tipări valoarea $2 \ 000 \ 000 \ 001$;
2. Traseele cu numerele de ordine $\text{st}, \text{st}+1, \dots, \text{dr}$.

# Date de intrare
Fişierul `summax.in` conţine pe prima linie un număr natural $v$. Pentru toate testele de intrare, numărul $v$ poate avea doar valoarea $1$ sau $2$.
A doua linie conține trei numere naturale $n$, $\text{st}$ şi $\text{dr}$, separate prin spaţiu. Următoarele $n$ linii conțin câte o linie a matricei triunghiulare astfel: linia $i$ conține $i$ elemente, și anume valorile $a_{i,1} a_{i,2} ... a_{i,i}$ pentru orice $1≤i≤n$.

# Date de ieşire
Dacă valoarea lui $v$ este $1$, se va rezolva numai punctul $1$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se va scrie un singur număr natural ce reprezintă numărul traseelor de lungime maximă.

Dacă valoarea lui $v$ este $2$, se va rezolva numai punctul $2$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se vor tipări pe câte o linie $n$ numere naturale separate prin spațiu, reprezentând codificările traseelor de valoare maximă cu numerele de ordine $\text{st}, \text{st}+1, \dots, \text{dr}$.

# Restricții și precizări
* $1 ≤ n ≤ 2 \ 000$;
* $1 ≤ st ≤ dr ≤ 2 \ 000 \ 000 \ 000$;
* $1 ≤ dr – st ≤ 1 \ 000$;
* elementele matricei triunghiulare sunt numere naturale strict pozitive.
* valoarea maximă a traseului nu depășește $1 \ 000 \ 000 \ 000$

---

Example:
`summax.in`
```
1
5 2 4
5
2 4
7 5 6
6 6 5 5
3 4 3 4 4
```

`summax.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Load data from summax.in
with open('summax.in', 'r') as fin:
    v = int(fin.readline().strip())
    n, st, dr = map(int, fin.readline().strip().split())
    triangle = [list(map(int, fin.readline().strip().split())) for _ in range(n)]

# Constants
MODULO = 2000000001

def count_max_paths(triangle):
    n = len(triangle)
    max_paths = np.zeros((n, n), dtype=np.int64)
    max_paths[0, 0] = 1

    for i in range(1, n):
        for j in range(i + 1):
            left_parent = triangle[i - 1][j - 1] if j > 0 else 0
            right_parent = triangle[i - 1][j] if j < i else 0
            triangle[i][j] += max(left_parent, right_parent)
            if j > 0 and triangle[i][j] == triangle[i - 1][j - 1] + triangle[i][j]:
                max_paths[i][j] += max_paths[i - 1][j - 1]
            if j < i and triangle[i][j] == triangle[i - 1][j] + triangle[i][j]:
                max_paths[i][j] += max_paths[i - 1][j]
            if max_paths[i][j] >= MODULO:
                max_paths[i][j] -= MODULO

    return int(max_paths[-1].sum() % MODULO)

def find_paths(triangle, st, dr, n):
    max_sum = max(triangle[-1])
    paths = []
    for idx, val in enumerate(triangle[-1]):
        if val == max_sum:
            paths.append([idx + 1])

    for row in range(n - 2, -1, -1):
        new_paths = []
        for path in paths:
            if triangle[row][path[-1] - 1] + sum(triangle[i][path[i] - 1] for i in range(row + 1, n)) == max_sum:
                new_paths.append(path + [path[-1]])
            if path[-1] > 1 and triangle[row][path[-1] - 2] + sum(triangle[i][path[i] - 1] for i in range(row + 1, n)) == max_sum:
                new_paths.append(path + [path[-1] - 1])
        paths = new_paths

    paths.sort()
    select_paths = paths[st - 1:dr]
    with open('summax.out', 'w') as fout:
        for path in select_paths:
            fout.write(' '.join(str(p) for p in reversed(path)) + '\n')

# Solve the problem based on the value of v
if v == 1:
    result = count_max_paths(triangle)
    with open('summax.out', 'w') as fout:
        fout.write(str(result) + '\n')
elif v == 2:
    find_paths(triangle, st, dr, n)
```
```
---------- user ----------


Expected program to write result to `summax.out` and read from `summax.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
