---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `clepsidru.in` and write to `clepsidru.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O **clepsidră** este un dispozitiv folosit pentru a măsura timpul. Clepsidra este alcatuită din două incinte de sticlă, conectate printr-un tub fin. Una dintre incinte este umplută cu nisip, acesta scurgându-se în cea de-a doua incintă, cu o viteză constantă. Clepsidra poate fi întoarsă, pentru a măsura o altă perioadă de timp.
Arheologii au descoperit un dispozitiv, pe care l-au denumit **clepsidru**, format din $n$ clepsidre identice, suprapuse, numerotate de la $1$ la $n$, prin care nisipul poate circula de la o clepsidră la alta datorită forței gravitaționale.
Studiind acest obiect, arheologii au constatat că:
* dispozitivul poate fi utilizat atât în pozitia $1$, când clepsidrele sunt în ordinea $1, 2,\dots, n$ cu clepsidra $n$ așezată pe sol, cât și în poziția $2$, cand clepsidrele sunt în ordinea $n, n-1, \dots, 1$ cu clepsidra $1$ așezată pe sol;
* viteza de trecere a nisipului de la o incintă la alta, a aceleiași clepsidre, este de **$1$ bob de nisip/secunda**, pentru toate clepsidrele, indiferent de poziție;
* trecerea clepsidrului dintr-o poziție în alta presupune răsturnarea acestuia și reașezarea boabelor de nisip;
* timpul de trecere a boabelor de nisip de la o clepsidră la alta este $0$.

Arheologii studiază comportarea clepsidrului realizând două experimente diferite, dupa cum urmează:

1. Se așează clepsidrul în poziția $1$, se introduc în incinta de sus a clepsidrei $1$ un numar $b$ de boabe de nisip și se determină dupa câte secunde vor ajunge toate boabele de nisip in incinta de jos a ultimei clepsidre;
2. Se așează clepsidrul în poziția $1$, se introduc în incinta de sus a clepsidrei $1$ un numar $b$ de boabe de nisip, apoi se așează clepsidrul în **$k$ stari** consecutive, o stare fiind caracterizată de valorile $S_i$ și $P_i$, ce reprezintă numărul de secunde, respectiv poziția, în care este menținut nemișcat clepsidrul, iar la final se determină numărul de boabe de nisip din incintele fiecărei clepsidre.

Spre exemplu, dacă clepsidrul este format din $n=2$ clepsidre, iar în incinta de sus a primei clepsidre se introduc $b=3$ boabe de nisip, la primul experiment se va obține valoarea $4$. La al doilea experiment se așează clepsidrul în $k=2$ stări, caracterizate prin $S_1=3, P_1=1$; $S_2=1, P_2=2$. Numărul de boabe de nisip din clepsidre va evolua ca în figura ce urmează:

~[clepsidru.png]

# Cerință

Să se scrie un program care citește valorile $n$ si $b$, precum și valorile $k, S_i, P_i$ și calculează valorile obținute de arheologi la realizarea celor două experimente.

# Date de intrare


Prima linie a fișierului de intrare `clepsidru.in` conține două numere naturale nenule $n$ si $b$, separate printr-un singur spațiu, cu semnificația din enunț; a doua linie conține numărul natural nenul $k$ având semnificația din enunț, iar următoarele $k$ linii conțin fiecare câte o pereche de valori $S_i$ și $P_i$, separate printr-un singur spațiu, cu semnificația din enunț.


# Date de ieșire


Fișierul de ieșire `clepsidru.out` va conține pe prima linie un număr natural ce reprezintă valoarea obținută la primul experiment, iar pe următoarele $n$ linii va conține câte o pereche de numere naturale, separate printr-un singur spațiu, ce reprezintă cantitățile de boabe de nisip din incintele de sus și jos ale celor $n$ clepsidre, scrise în ordinea de la $1$ la $n$ a clepsidrelor, după realizarea celui de-al doilea experiment.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq b \leq 1 \ 000 \ 000 \ 000$;
* $1 \leq k \leq 1 \ 000$;
* $1 \leq S_i \leq 1 \ 000$;
* $P_i$ aparține mulțimii $\{1, 2\}$, $1 ≤ i ≤ k$;
* Pentru rezolvarea corectă a primei cerințe se acordă $25\%$ din punctaj, iar pentru rezolvarea corectă a celei de-a doua cerințe se acordă $75\%$ din punctaj. Acordarea punctajului pentru a doua cerință se face numai dacă in fișierul de ieșire există un răspuns pentru prima cerință, indiferent de corectitudinea acestuia.

---

Example:
`clepsidru.in`
```
2 3
2
3 1
1 2
```

`clepsidru.out`
```
4
1 1
0 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        n, b = map(int, file.readline().split())
        k = int(file.readline().strip())
        states = [tuple(map(int, file.readline().split())) for _ in range(k)]
    return n, b, k, states

def experiment1(n, b):
    return n + (b - 1)

def experiment2(n, b, k, states):
    upper = np.zeros(n, dtype=np.int64)
    lower = np.zeros(n, dtype=np.int64)
    position = 1  # Start from position 1
    upper[0] = b
    for S_i, P_i in states:
        if position == 1:
            for _ in range(S_i):
                for j in range(n):
                    if upper[j] > 0:
                        transfer = min(upper[j], S_i)
                        upper[j] -= transfer
                        lower[j] += transfer
                        break
        else:
            for _ in range(S_i):
                for j in reversed(range(n)):
                    if lower[j] > 0:
                        transfer = min(lower[j], S_i)
                        lower[j] -= transfer
                        upper[j] += transfer
                        break
        position = P_i
    return upper, lower

def write_output(filename, experiment1_result, experiment2_result):
    with open(filename, 'w') as file:
        file.write(f"{experiment1_result}\n")
        for upper_val, lower_val in zip(*experiment2_result):
            file.write(f"{upper_val} {lower_val}\n")

# Read from input file
n, b, k, states = read_input('clepsidru.in')

# Run experiments
exp1_result = experiment1(n, b)
exp2_result = experiment2(n, b, k, states)

# Write to output file
write_output('clepsidru.out', exp1_result, exp2_result)
```
```
---------- user ----------


Expected program to write result to `clepsidru.out` and read from `clepsidru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        n, b = map(int, file.readline().split())
        k = int(file.readline().strip())
        states = [tuple(map(int, file.readline().split())) for _ in range(k)]
    return n, b, k, states

def experiment1(n, b):
    return n + (b - 1) // n

def experiment2(n, b, k, states):
    # Initializing the upper and lower chambers for all hourglasses
    upper = np.zeros(n, dtype=np.int64)
    lower = np.zeros(n, dtype=np.int64)
    upper[0] = b

    for S_i, P_i in states:
        for _ in range(S_i):
            if P_i == 1:
                for j in range(n):
                    if upper[j] > 0:
                        transfer = min(upper[j], 1)
                        upper[j] -= transfer
                        lower[j] += transfer
                        break
            elif P_i == 2:
                for j in reversed(range(n)):
                    if lower[j] > 0:
                        transfer = min(lower[j], 1)
                        lower[j] -= transfer
                        upper[j] += transfer
                        break

    result = np.vstack((upper, lower)).T
    return result

def write_output(filename, experiment1_result, experiment2_result):
    with open(filename, 'w') as file:
        file.write(f"{experiment1_result}\n")
        for res in experiment2_result:
            file.write(f"{res[0]} {res[1]}\n")

# Read from input file
n, b, k, states = read_input('clepsidru.in')

# Run experiments
exp1_result = experiment1(n, b)
exp2_result = experiment2(n, b, k, states)

# Write to output file
write_output('clepsidru.out', exp1_result, exp2_result)
```
```
---------- user ----------


Expected program to write result to `clepsidru.out` and read from `clepsidru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_time_to_last_hourglass(n, b):
    # Calculate the time to reach the last hourglass
    time_to_pass_all_sand = (b - 1) // n + 1
    return time_to_pass_all_sand + (n - 1)

def upper_chamber_sand(n, k, states, upper_chamber_sand, position):
    # Calculate the upper chamber sand distribution after k states
    for s, p in states:
        # Calculate the sand distribution for each second in state
        for second in range(s):
            if position == 1:
                if upper_chamber_sand[0] == 0:
                    break
                upper_chamber_sand[0] -= 1
                for i in range(1, n):
                    if upper_chamber_sand[i] < upper_chamber_sand[i - 1]:
                        upper_chamber_sand[i] += 1
            else:
                if upper_chamber_sand[-1] == 0:
                    break
                upper_chamber_sand[-1] -= 1
                for i in range(n - 2, -1, -1):
                    if upper_chamber_sand[i] < upper_chamber_sand[i + 1]:
                        upper_chamber_sand[i] += 1
        # Change the position of hourglass
        position = 3 - position
    return upper_chamber_sand

def main():
    # Read the input data
    with open('clepsidru.in', 'r') as file:
        n, b = map(int, file.readline().split())
        k = int(file.readline().strip())
        states = [tuple(map(int, file.readline().split())) for _ in range(k)]

    # Perform the first experiment
    result_exp1 = calculate_time_to_last_hourglass(n, b)

    # Initialize the upper chamber sand distribution for the second experiment
    upper_chamber_sand = np.zeros(n, dtype=np.int64)
    upper_chamber_sand[0] = b

    # Perform the second experiment
    position = 1
    upper_chamber_sand_after_k = upper_chamber_sand(n, k, states, upper_chamber_sand, position)

    # Write the output data
    with open('clepsidru.out', 'w') as file:
        file.write(f"{result_exp1}\n")
        lower_chamber_sand = np.cumsum(upper_chamber_sand_after_k[::-1])[::-1]
        for i in range(n):
            upper = upper_chamber_sand_after_k[i]
            lower = lower_chamber_sand[i] - upper
            file.write(f"{upper} {lower}\n")

# Run the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `clepsidru.out` and read from `clepsidru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
