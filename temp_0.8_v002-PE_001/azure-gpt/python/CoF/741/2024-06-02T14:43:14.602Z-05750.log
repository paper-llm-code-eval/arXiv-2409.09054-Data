---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def find_center_of_gravity(image):
    n, m = image.shape
    # Calculate cumulative sums along both axes
    vertical_cumsum = np.cumsum(image, axis=0)
    horizontal_cumsum = np.cumsum(image, axis=1)
    
    # Initialize variables to keep the minimum differences and corresponding indices
    min_diff_vertical = float('inf')
    min_diff_horizontal = float('inf')
    i_center = 0
    j_center = 0
    
    # Find the row with the minimum difference in sum above and below it
    for i in range(n):
        above = vertical_cumsum[i-1, m-1] if i > 0 else 0
        below = vertical_cumsum[n-1, m-1] - vertical_cumsum[i, m-1]
        diff = abs(above - below)
        if diff <= min_diff_vertical:
            min_diff_vertical = diff
            i_center = i
    
    # Find the column with the minimum difference in sum to the left and right of it
    for j in range(m):
        left = horizontal_cumsum[n-1, j-1] if j > 0 else 0
        right = horizontal_cumsum[n-1, m-1] - horizontal_cumsum[n-1, j]
        diff = abs(left - right)
        if diff <= min_diff_horizontal:
            min_diff_horizontal = diff
            j_center = j
    
    # Adjust indices to be 1-based instead of 0-based
    return i_center + 1, j_center + 1

# Read the image from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)])

# Find the center of gravity
i_center, j_center = find_center_of_gravity(image)

# Write the center of gravity to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f"{i_center} {j_center}\n")
```
```
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Below is the complete and fixed solution that reads from `ocr.in` and writes the center of gravity coordinates to `ocr.out`, without using `input()` or `print()`. The solution is presented in a markdown code block.

```python
import numpy as np

# Load the image from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)])

# Define a function to find the center of gravity of the image
def find_center_of_gravity(image):
    n, m = image.shape
    # Pre-compute cumulative sums along both axes for efficient computation
    vertical_cumsum = np.cumsum(image, axis=0)
    horizontal_cumsum = np.cumsum(image, axis=1)

    # Initialize the center of gravity to the top-left corner
    center_row, center_col = 0, 0
    min_row_diff, min_col_diff = float('inf'), float('inf')

    for i in range(n):
        # Calculate the absolute difference between the sum above and below the current row
        sum_above = vertical_cumsum[i - 1, -1] if i > 0 else 0
        sum_below = vertical_cumsum[-1, -1] - vertical_cumsum[i, -1]
        row_diff = abs(sum_above - sum_below)
        # Update the center row if the new difference is smaller or equal (favoring the bottom-most index)
        if row_diff <= min_row_diff:
            min_row_diff = row_diff
            center_row = i

    for j in range(m):
        # Calculate the absolute difference between the sum left and right of the current column
        sum_left = horizontal_cumsum[-1, j - 1] if j > 0 else 0
        sum_right = horizontal_cumsum[-1, -1] - horizontal_cumsum[-1, j]
        col_diff = abs(sum_left - sum_right)
        # Update the center column if the new difference is smaller or equal (favoring the right-most index)
        if col_diff <= min_col_diff:
            min_col_diff = col_diff
            center_col = j

    # Return 1-based indices for row and column
    return center_row + 1, center_col + 1

# Find the center of gravity
center_i, center_j = find_center_of_gravity(image)

# Write the results to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f"{center_i} {center_j}\n")
```
Please note that the provided code above should be stored in a `.py` file, and the `ocr.in` file must be present in the same directory for the code to execute properly. The code will then generate an `ocr.out` file with the calculated center of gravity.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the environment where the code is executed. Since we cannot use external libraries like `numpy`, we will have to rewrite the solution using pure Python to make sure it fits within the constraints provided. Below is the complete and fixed solution without using `numpy`.

```python
# Define a function to find the center of gravity of the image
def find_center_of_gravity(image, n, m):
    # Initialize the center of gravity to the top-left corner
    center_row, center_col = 0, 0
    min_row_diff, min_col_diff = float('inf'), float('inf')

    for i in range(n):
        # Calculate the absolute difference between the sum above and below the current row
        sum_above = sum(sum(row) for row in image[:i])
        sum_below = sum(sum(row) for row in image[i+1:])
        row_diff = abs(sum_above - sum_below)
        # Update the center row if the new difference is smaller or equal (favoring the bottom-most index)
        if row_diff <= min_row_diff:
            min_row_diff = row_diff
            center_row = i

    for j in range(m):
        # Calculate the absolute difference between the sum left and right of the current column
        sum_left = sum(image[row][j] for row in range(n) for j in range(j))
        sum_right = sum(image[row][j] for row in range(n) for j in range(j+1, m))
        col_diff = abs(sum_left - sum_right)
        # Update the center column if the new difference is smaller or equal (favoring the right-most index)
        if col_diff <= min_col_diff:
            min_col_diff = col_diff
            center_col = j

    # Return 1-based indices for row and column
    return center_row + 1, center_col + 1

# Load the image from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = [list(map(float, file.readline().split())) for _ in range(n)]

# Find the center of gravity
center_i, center_j = find_center_of_gravity(image, n, m)

# Write the results to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f"{center_i} {center_j}\n")
```
This code reads the image from `ocr.in`, calculates the center of gravity using pure Python, and writes the result to `ocr.out`. No external modules are required, so it should run successfully in environments without `numpy` installed.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 36, in <module>
    center_i, center_j = find_center_of_gravity(image, n, m)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 19, in find_center_of_gravity
    sum_left = sum(image[row][j] for row in range(n) for j in range(j))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 19, in <genexpr>
    sum_left = sum(image[row][j] for row in range(n) for j in range(j))
                                                                    ^
UnboundLocalError: cannot access local variable 'j' where it is not associated with a value

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that there's an `UnboundLocalError` because the variable `j` is being used in the inner loop of a generator expression with the same name as the outer loop variable. To fix this, we need to use different variable names for the inner loop to avoid conflicts. Additionally, we can improve the efficiency by calculating the sum of each row once and using that to calculate `sum_above` and `sum_below`.

Here is the corrected solution:

```python
# Define a function to find the center of gravity of the image
def find_center_of_gravity(image, n, m):
    # Precompute row sums and column sums
    row_sums = [sum(row) for row in image]
    col_sums = [sum(image[i][j] for i in range(n)) for j in range(m)]
    
    # Initialize the center of gravity to the top-left corner
    center_row, center_col = 0, 0
    min_row_diff, min_col_diff = float('inf'), float('inf')

    total_sum = sum(row_sums)

    for i in range(n):
        sum_above = sum(row_sums[:i])
        sum_below = total_sum - sum(row_sums[:i+1])
        row_diff = abs(sum_above - sum_below)
        if row_diff <= min_row_diff:
            min_row_diff = row_diff
            center_row = i

    for j in range(m):
        sum_left = sum(col_sums[:j])
        sum_right = total_sum - sum(col_sums[:j+1])
        col_diff = abs(sum_left - sum_right)
        if col_diff <= min_col_diff:
            min_col_diff = col_diff
            center_col = j

    # Return 1-based indices for row and column
    return center_row + 1, center_col + 1

# Load the image from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = [list(map(float, file.readline().split())) for _ in range(n)]

# Find the center of gravity
center_i, center_j = find_center_of_gravity(image, n, m)

# Write the results to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f"{center_i} {center_j}\n")
```

This code should now execute without errors, reading the input from `ocr.in`, finding the center of gravity using efficient computations, and writing the output to `ocr.out`.
