---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def find_center_of_gravity(image):
    n, m = image.shape
    cumulative_row_sums = np.cumsum(image, axis=0)
    cumulative_col_sums = np.cumsum(image, axis=1)

    # Total sum for rows and columns
    total_row_sum = cumulative_row_sums[-1, :]
    total_col_sum = cumulative_col_sums[:, -1]

    # Differences between sums when split by each row/column
    row_diffs = np.abs((cumulative_row_sums[:-1, :] - (total_row_sum - cumulative_row_sums[:-1, :])))
    col_diffs = np.abs((cumulative_col_sums[:, :-1] - (total_col_sum[:, np.newaxis] - cumulative_col_sums[:, :-1])))

    # Minimum difference for rows and columns
    min_row_diff = np.min(row_diffs, axis=0)
    min_col_diff = np.min(col_diffs, axis=1)

    # Find the index of the max row and col where the minimum difference occurs
    center_row = n - np.argmax(min_row_diff[::-1]) - 1
    center_col = m - np.argmax(min_col_diff[::-1]) - 1
    
    return center_row + 1, center_col + 1  # Add 1 for 1-based indexing

# Read the input from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)])

# Process the image to find the center of gravity
center_row, center_col = find_center_of_gravity(image)

# Write the output to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_row} {center_col}\n')
```
```
This code has been optimized for both time complexity and memory usage. It should work within the constraints specified in the challenge without exceeding the 8MB memory limit.
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Below is the corrected solution that reads from `ocr.in` and writes to `ocr.out`, without using `input()` or `print()` functions:

```markdown
```python
import numpy as np

def find_center_of_gravity(image):
    n, m = image.shape
    cumulative_row_sums = np.cumsum(image, axis=0)
    cumulative_col_sums = np.cumsum(image, axis=1)

    # Total sum for rows and columns
    total_row_sum = cumulative_row_sums[-1, :]
    total_col_sum = cumulative_col_sums[:, -1]

    # Differences between sums when split by each row/column
    row_diffs = np.abs(cumulative_row_sums - (total_row_sum - cumulative_row_sums))
    col_diffs = np.abs(cumulative_col_sums - (total_col_sum[:, np.newaxis] - cumulative_col_sums))

    # Find the minimum absolute difference after removing each row/column
    min_row_diff = np.min(row_diffs, axis=1)
    min_col_diff = np.min(col_diffs, axis=0)

    # Identify the row and column where the smallest difference occurs
    center_row = np.argmin(min_row_diff)
    center_col = np.argmin(min_col_diff)
    
    return center_row + 1, center_col + 1  # Add 1 for 1-based indexing

# Read the input from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)], dtype=np.float64)

# Process the image to find the center of gravity
center_row, center_col = find_center_of_gravity(image)

# Write the output to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_row} {center_col}\n')
```
```
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Below is the solution that respects all the constraints mentioned, including reading from `ocr.in` and writing to `ocr.out`:

```python
import numpy as np

# Read the input from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)])

# Calculate the cumulative sums along both axes
cumulative_sum = np.cumsum(np.cumsum(image, axis=0), axis=1)

# Determine the cumulative sums at the boundaries to avoid recomputing
top_cumulative_sum = np.vstack([np.zeros(m), cumulative_sum[:-1]])
left_cumulative_sum = np.hstack([np.zeros((n, 1)), cumulative_sum[:, :-1]])

# Calculate the sum of all elements
total_sum = cumulative_sum[-1, -1]

# Compute the absolute differences from the total sum when excluding each row or column
vertical_diffs = np.abs(total_sum - 2 * top_cumulative_sum)
horizontal_diffs = np.abs(total_sum - 2 * left_cumulative_sum)

# Find the row and column with the minimum differences, with preference for larger indices
center_of_gravity_row = np.argmax(np.min(vertical_diffs, axis=1))
center_of_gravity_col = np.argmax(np.min(horizontal_diffs, axis=0))

# Write the output to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_of_gravity_row+1} {center_of_gravity_col+1}\n')
```

This code snippet will find the center of gravity with the lowest sum differences respecting the memory constraint.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available. Since we have a memory constraint and must optimize for performance, I will rewrite the solution to use only standard Python libraries, without any third-party modules like `numpy`.

Here is the updated code:

```python
# Function to calculate the cumulative sums along both dimensions
def compute_cumulative_sums(image):
    n = len(image)
    m = len(image[0])
    cum_row = [[0]*m for _ in range(n)]
    cum_total = [[0]*m for _ in range(n)]
    
    # Compute cumulative sum for each row
    for i in range(n):
        cum_row[i][0] = image[i][0]
        for j in range(1, m):
            cum_row[i][j] = cum_row[i][j-1] + image[i][j]
    
    # Compute total cumulative sum
    for j in range(m):
        cum_total[0][j] = cum_row[0][j]
        for i in range(1, n):
            cum_total[i][j] = cum_total[i-1][j] + cum_row[i][j]

    return cum_total

# Read the input from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = [list(map(float, file.readline().split())) for _ in range(n)]

# Compute cumulative sums
cumulative_sums = compute_cumulative_sums(image)

# Initialize variables to store the center of gravity
center_of_gravity_row = 0
center_of_gravity_col = 0
min_row_diff = float('inf')
min_col_diff = float('inf')

# Find the row with the minimum absolute difference
for i in range(n):
    upper_sum = cumulative_sums[i-1][-1] if i > 0 else 0
    lower_sum = cumulative_sums[-1][-1] - cumulative_sums[i][-1]
    diff = abs(upper_sum - lower_sum)
    if diff <= min_row_diff:
        min_row_diff = diff
        center_of_gravity_row = i

# Find the column with the minimum absolute difference
for j in range(m):
    left_sum = cumulative_sums[-1][j-1] if j > 0 else 0
    right_sum = cumulative_sums[-1][-1] - cumulative_sums[-1][j]
    diff = abs(left_sum - right_sum)
    if diff <= min_col_diff:
        min_col_diff = diff
        center_of_gravity_col = j

# Write the output to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_of_gravity_row+1} {center_of_gravity_col+1}\n')
```

This code no longer uses the `numpy` library and should work in a standard Python environment without any third-party dependencies. It calculates the center of gravity using cumulative sums and writes the result to `ocr.out`.
