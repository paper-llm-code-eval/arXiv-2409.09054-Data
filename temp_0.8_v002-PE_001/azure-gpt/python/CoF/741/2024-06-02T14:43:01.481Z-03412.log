---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read input
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)])

# Calculate prefix sums for rows and columns
row_sums = image.cumsum(axis=0)
col_sums = image.cumsum(axis=1)

def find_center_of_gravity(sum_axis, axis_length):
    min_diff = float('inf')
    center_index = -1
    for i in range(axis_length):
        upper_sum = sum_axis[i - 1] if i > 0 else 0
        lower_sum = sum_axis[-1] - sum_axis[i]
        diff = abs(upper_sum - lower_sum)
        if diff < min_diff:
            min_diff = diff
            center_index = i
    return center_index + 1

# Find the center of gravity along the rows and columns
center_row = find_center_of_gravity(row_sums[:, -1], n)
center_col = find_center_of_gravity(col_sums[-1], m)

# Write output
with open('ocr.out', 'w') as file:
    file.write(f"{center_row} {center_col}\n")
```
```
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read input
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = np.array([list(map(float, file.readline().split())) for _ in range(n)], dtype=np.float32)

# Calculate the cumulative sums along rows and columns
cumulative_sums = image.cumsum(axis=0).cumsum(axis=1)

def find_center_of_gravity(cum_sums, axis_length, total_sum):
    min_diff = float('inf')
    center_index = -1
    for i in range(axis_length):
        if i == 0:
            before_sum = 0
        else:
            before_sum = cum_sums[i - 1]
            
        after_sum = total_sum - cum_sums[i]
        diff = abs(after_sum - before_sum)
        
        if diff <= min_diff:
            min_diff = diff
            center_index = i
    
    return center_index + 1

# Find the center of gravity for both axes
center_row = find_center_of_gravity(cumulative_sums[:, -1], n, cumulative_sums[-1, -1])
center_col = find_center_of_gravity(cumulative_sums[-1, :], m, cumulative_sums[-1, -1])

# Write output
with open('ocr.out', 'w') as file:
    file.write(f"{center_row} {center_col}\n")
```
```
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Here is the corrected version of the Python code that reads from `ocr.in` and writes to `ocr.out` without using `input()` or `print()`. The code is optimized for both time and memory usage and is written within the markdown code block as requested:

```python
import numpy as np

def find_center_of_gravity_on_axis(sums, axis_length):
    min_diff = float('inf')
    best_index = -1
    for index in range(axis_length):
        upper_sum = sums[index - 1] if index > 0 else 0
        lower_sum = sums[-1] - sums[index]
        diff = abs(upper_sum - lower_sum)
        if diff <= min_diff:
            min_diff = diff
            best_index = index
    return best_index + 1

def main():
    # Read input from file
    with open('ocr.in', 'r') as file:
        n, m = map(int, file.readline().split())
        image = np.array([list(map(float, file.readline().split())) for _ in range(n)], dtype=np.float32)

    # Compute the cumulative sum along rows and columns
    row_sums = np.cumsum(image, axis=0)
    col_sums = np.cumsum(image, axis=1)

    # Compute center of gravity for rows and columns
    center_row = find_center_of_gravity_on_axis(row_sums[:, -1], n)
    center_col = find_center_of_gravity_on_axis(col_sums[-1, :], m)

    # Write output to file
    with open('ocr.out', 'w') as file:
        file.write(f'{center_row} {center_col}\n')

if __name__ == '__main__':
    main()
```
This code will use numpy's efficient array representation and cumulative sum computation to minimize memory usage and optimize performance. It also follows the constraints regarding reading from and writing to files directly.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` library is not available in the execution environment. Since the problem statement emphasizes optimizing for both time and memory, and imposes a strict memory limit, which suggests using highly efficient libraries, the lack of `numpy` presents a challenge.

One solution to this problem would be to emulate some of numpy's functionality using Python's built-in library to handle the computations required for finding the center of gravity. Here's the updated code without the dependency on `numpy`:

```python
def prefix_sums(matrix):
    # Calculate prefix sums for each row
    for row in matrix:
        for i in range(1, len(row)):
            row[i] += row[i-1]

    # Calculate prefix sums for each column based on row prefix sums
    for j in range(len(matrix[0])):
        for i in range(1, len(matrix)):
            matrix[i][j] += matrix[i-1][j]

    return matrix

def find_center_of_gravity(sum_array, axis_length):
    center_index = -1
    min_diff = float('inf')

    for i in range(axis_length):
        upper_sum = sum_array[i - 1] if i != 0 else 0
        lower_sum = sum_array[-1] - sum_array[i]
        diff = abs(upper_sum - lower_sum)

        if diff <= min_diff:
            min_diff = diff
            center_index = i

    return center_index + 1

def main():
    # Read input from file
    with open('ocr.in', 'r') as file:
        n, m = map(int, file.readline().split())
        image = [list(map(float, file.readline().split())) for _ in range(n)]

    # Calculate prefix sums
    cum_matrix = prefix_sums(image)

    # Find center of gravity
    center_row = find_center_of_gravity([cum_matrix[i][-1] for i in range(n)], n)
    center_col = find_center_of_gravity(cum_matrix[-1], m)

    # Write output to file
    with open('ocr.out', 'w') as file:
        file.write(f'{center_row} {center_col}\n')

if __name__ == '__main__':
    main()
```

This code does not use the `numpy` library and should work in an environment where only the Python standard library is available. It still computes prefix sums and efficiently finds the center of gravity while adhering to the memory constraints as closely as possible with built-in Python data structures.
