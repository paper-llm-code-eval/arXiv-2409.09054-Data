---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `elicop.in` and write to `elicop.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un teren de fotbal este folosit pentru aterizarea elicopterelor. Gazonul de pe stadion este parcelat în pătrăţele de aceeaşi dimensiune, cu laturile paralele cu marginile terenului. Liniile cu pătrăţele de gazon sunt numerotate de sus în jos cu numerele $1, 2, \dots, m$, iar coloanele cu pătrăţele de gazon sunt numerotate de la stânga la dreapta cu numerele $1, 2, \dots, n$. Din cauza tipului diferit de iarbă se ştie care dintre pătrăţele de gazon sunt afectate sau nu de umbră. Acest lucru este precizat printr-un tablou bidimensional $a$ cu $m$ linii şi $n$ coloane, cu elemente $0$ şi $1$ ($a_{ij} = 0$ înseamnă că pătrăţelul aflat pe linia $i$ şi coloana $j$ este afectat de umbră, iar $a_{ij} = 1$ înseamnă că pătrăţelul aflat pe linia $i$ şi coloana $j$ nu este afectat de umbră). Fiecare elicopter are $3$ roţi pe care se sprijină. Roţile fiecărui elicopter determină un triunghi dreptunghic isoscel. Elicopterele aterizează, astfel încât triunghiurile formate să fie cu catetele paralele cu marginile terenului. În exemplul următor avem patru elicoptere.

~[elicop.png|width=30em]

Pentru a preciza poziţia unui elicopter pe teren este suficient să cunoaştem linia şi coloana vărfurilor ipotenuzei şi poziţia vârfului deasupra (codificată prin $1$) sau dedesubtul ipotenuzei (codificată prin $-1$). Pentru exemplu, elicopterul din stânga sus este dat prin $(1, 1), (3, 3)$ şi $-1$, cel din dreapta sus prin $(1, 9), (5, 5)$ şi $1$, cel din stânga jos prin $(5, 1), (6, 2)$ şi $1$, iar cel din dreapta jos prin $(5, 9), (6, 8)$ şi $1$.
Un elicopter se consideră că a aterizat *greşit*, dacă triunghiul format sub el (definit mai sus) are mai mult de jumătate din pătrăţele afectate de umbră.
Administratorul terenului de fotbal doreşte să determine numărul $N_1$ de elicoptere, care nu afectează nici un pătrăţel din teren şi numerele de ordine al elicopterelor, care au aterizat *greşit* în ordine crescătoare: $e_1, e_2, \dots, e_{N_2}$, ştiind că există $k$ elicoptere codificate prin numerele $1, 2, \dots, k$.

# Cerință

Scrieţi un program care să determine, pentru fişierul cu datele din enunţ: numărul de elicoptere $N_1$, care nu afectează nici un pătrăţel din teren şi numerele de ordine al elicopterelor, care au aterizat *greşit* în ordine crescătoare, precedate de numărul lor $N_2$.

# Date de intrare


Prima linie a fişierului de intrare `elicop.in` conţine două numere naturale $m$ şi $n$, separate printr-un spaţiu, cu semnificaţia din enunţ. Următoarele $m$ linii conţin câte $n$ numere $0$ sau $1$, separate prin câte un spaţiu cu semnificaţia $0$ – pătrăţel de gazon care este afectat de umbră, respectiv $1$ - pătrăţel care nu este afectat de umbră. Pe linia $m+2$ se află numărul de elicoptere $k$, iar pe următoarele $k$ linii (în ordinea codificării lor $1, 2, \dots, k$) câte cinci numere separate prin cate un spaţiu, pentru liniile şi coloanele ipotenuzelor şi poziţia vârfului ($1$ sau $-1$), triunghiurilor dreptunghice asociate elicopterelor: $L_1 \ C_1 \ L_2 \ C_2 \ p$.


# Date de ieșire


Fişierul de ieşire `elicop.out` va conţine două linii: prima linie numărul $N_1$ de elicoptere, pe care nu afectează nici un pătrăţel din teren, a doua linie cu numerele naturale $N_2, e_1, e_2, \dots, e_{N_2}$ separate prin câte un spaţiu, în ordine crescătoare.


# Restricții și precizări

* $2 \leq m, n \leq 100$
* $1 \leq k \leq 40$
* Nu există suprapuneri de triunghiuri asociate la două elicoptere.
* Triunghiurile asociate elicopterelor conţin cel puţin trei pătrăţele.
* Pentru determinarea corectă a valorilor $N_1$ se obţine $40$% din punctajul unui test, iar pentru determinarea corectă a valorilor $N_2, e_1, e_2, \dots, e_{N_2}$ se obţine $60$% din punctajul unui test.

---

Example:
`elicop.in`
```
7 9
1 1 1 1 1 1 1 1 1
0 0 0 0 1 1 1 1 0
0 0 1 0 1 1 1 0 0
1 1 1 0 1 1 0 1 1
0 0 1 1 1 1 0 1 1
1 1 1 1 1 1 0 1 1
1 1 1 1 1 1 0 0 1
4
1 1 3 3 -1
1 9 5 5 1
5 1 6 2 1
5 9 6 8 1
```

`elicop.out`
```
2
2 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# elicop.py
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grass_matrix = [list(map(int, file.readline().split())) for _ in range(m)]
        k = int(file.readline().strip())
        helicopters = [list(map(int, file.readline().split())) for _ in range(k)]
    return m, n, np.array(grass_matrix, dtype=np.uint8), k, helicopters

def save_result(filename, clear_landings, wrong_landings):
    with open(filename, 'w') as file:
        file.write(f"{clear_landings}\n")
        file.write(f"{len(wrong_landings)} {' '.join(map(str, wrong_landings))}\n")

def triangle_area(x1, y1, x2, y2):
    # Calculates area based on the coordinates of the hypotenuse
    return (abs(x2 - x1) + 1) * (abs(y2 - y1) + 1) // 2

def check_landing(grass_matrix, x1, y1, x2, y2, position):
    # Generates indices for triangle area
    x_range = range(x1, x2 + 1) if x1 <= x2 else range(x1, x2 - 1, -1)
    y_range = range(y1, y2 + 1) if y1 <= y2 else range(y1, y2 - 1, -1)
    
    affected = 0
    total = 0
    for i, x in enumerate(x_range):
        for y in y_range[:i+1]:
            affected += 1 - grass_matrix[x - 1, y - 1]
            total += 1
    return total, affected

def process_helicopters(m, n, grass_matrix, k, helicopters):
    clear_landings = 0
    wrong_landings = []
    
    for idx, (x1, y1, x2, y2, position) in enumerate(helicopters, 1):
        # Adjust coordinates for position of the third wheel
        if position == -1:
            x2, y2 = x1, y1
            x1, y1 = x1 + abs(y2 - y1), y1 + abs(x2 - x1)
        total, affected = check_landing(grass_matrix, x1, y1, x2, y2, position)
        if affected == 0: # No shadowed squares affected
            clear_landings += 1
        elif affected > total // 2: # More than half of the squares are shadowed
            wrong_landings.append(idx)
    
    return clear_landings, wrong_landings

# Main program execution
m, n, grass_matrix, k, helicopters = read_data('elicop.in')
clear_landings, wrong_landings = process_helicopters(m, n, grass_matrix, k, helicopters)
save_result('elicop.out', clear_landings, wrong_landings)
```

This code reads the input data from `elicop.in`, processes each helicopter landing, and writes the results to `elicop.out` as specified in the problem statement. The program uses numpy for efficient array handling while being mindful of the memory constraints. It has been designed to avoid unnecessary memory usage and optimizes for time efficiency, particularly when checking the number of shadowed squares under each helicopter.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the `numpy` library is not installed in the execution environment where the code is being run. Since the execution environment does not have `numpy` and we have a strict memory limit, we can't rely on `numpy` for this task. We need to rewrite the solution without using `numpy` or any external library that isn't part of the Python Standard Library.

Here's the updated code:

```python
# elicop.py

def read_data(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        grass_matrix = [list(map(int, file.readline().split())) for _ in range(m)]
        k = int(file.readline().strip())
        helicopters = [list(map(int, file.readline().split())) for _ in range(k)]
    return m, n, grass_matrix, k, helicopters

def save_result(filename, clear_landings, wrong_landings):
    with open(filename, 'w') as file:
        file.write(f"{clear_landings}\n")
        if wrong_landings:
            file.write(f"{len(wrong_landings)} {' '.join(map(str, wrong_landings))}\n")
        else:
            file.write("0\n")

def check_landing(grass_matrix, x1, y1, x2, y2, position):
    affected = 0
    total = 0
    dx = 1 if x2 >= x1 else -1
    dy = 1 if y2 >= y1 else -1
    
    for i in range(abs(y2 - y1) + 1):
        for j in range(i+1):
            affected += 1 - grass_matrix[x1 + j*dx - 1][y1 + i*dy - 1]
            total += 1
    return total, affected

def process_helicopters(m, n, grass_matrix, k, helicopters):
    clear_landings = 0
    wrong_landings = []
    
    for idx, (x1, y1, x2, y2, position) in enumerate(helicopters, 1):
        if position == -1:
            x1, x2 = x2, x1
            y1, y2 = y2, y1
        total, affected = check_landing(grass_matrix, x1, y1, x2, y2, position)
        if affected == 0:
            clear_landings += 1
        elif affected > total // 2:
            wrong_landings.append(idx)
    
    return clear_landings, wrong_landings

# Main program execution
m, n, grass_matrix, k, helicopters = read_data('elicop.in')
clear_landings, wrong_landings = process_helicopters(m, n, grass_matrix, k, helicopters)
save_result('elicop.out', clear_landings, wrong_landings)
```

This updated solution no longer uses `numpy` and should work in an environment where only the Python Standard Library is available. The key functions `read_data`, `save_result`, `check_landing`, and `process_helicopters` are implemented using pure Python without any third-party libraries.
