---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `arrows.in` and write to `arrows.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

“Arrows” este un joc care se joacă pe o tablă dreptunghiulară a cărei suprafață este împărțită în $N \cdot M$ celule, aranjate pe $N$ linii și $M$ coloane. În fiecare celulă se află o săgeată (sus, jos, stânga sau dreapta), ca în figura de mai jos:

~[arrows.png]

Când este la mutare, un jucător poate alege o poziție de start pe care plasează un jeton, apoi deplasează jetonul la celula învecinată în sensul indicat de săgeată. Deplasarea continuă până când jetonul părăsește tabla de joc, caz în care jucătorul obține un punctaj egal cu numărul de celule parcurse de jetonul său.
Există însă poziții de start denumite favorabile, pentru care jetonul **nu** va părăsi niciodată tabla de joc. De exemplu, toate pozițiile din figură cu fundal gri sunt favorabile. Jucătorul care alege o poziție de start favorabilă obține un punctaj egal cu numărul de celule distincte vizitate înmulțit cu $1000$.

Scrieți un program care, cunoscând configurația tablei de joc, rezolvă una dintre următoarele cerințe:

1. determină punctajul pe care îl obține un jucător care plasează jetonul său pe o poziție de start specificată;
2. determină numărul de celule favorabile de pe tabla de joc;
3. determină punctajul maxim pe care jucătorul îl poate obține la o mutare, alegând convenabil poziția de start.

# Date de intrare

Fișierul de intrare `arrows.in` conține pe prima linie cerința care trebuie să fie rezolvată ($1, 2$ sau $3$). Pe a doua linie se află numerele naturale $N \ M$, care reprezintă numărul de linii și respectiv de coloane de pe tabla de joc. Pe următoarele $N$ linii se află câte $M$ numere din mulțimea {$1,2,3,4$} reprezentând săgețile aflate în celulele de pe tabla de joc ($1$ semnificând săgeata la dreapta, $2$ săgeata în sus, $3$ săgeata la stânga și $4$ săgeata în jos). Pe ultima linie sunt scrise numerele naturale $lin \ col$, reprezentând linia și coloana pe care se află poziția de start specificată. Valorile scrise pe aceeași linie în fișierul de intrare sunt separate prin spații.

# Date de ieșire

Fișierul de ieșire `arrows.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul pentru cerința specificată pe prima linie a fișierului de intrare.

# Restricții și precizări

* $1 \leq N, M \leq 500$;
* Liniile sunt numerotate de la $1$ la $N$, iar coloanele de la $1$ la $M$.
* Pentru teste valorând $20$ de puncte cerința este $1$. Pentru teste valorând $40$ de puncte cerința este $2$. Pentru celelalte teste, valorând de asemenea $40$ de puncte, cerința este $3$.

---

Example:
`arrows.in`
```
1
6 5
3 1 1 4 2
1 2 4 3 1
4 2 1 1 4
1 2 3 3 3
3 1 4 4 4
2 2 3 4 2
5 5
```

`arrows.out`
```
2000
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Directions (right, up, left, down)
directions = [(0, 1), (-1, 0), (0, -1), (1, 0)]

# Load the input file
with open("arrows.in", "r") as file:
    task = int(file.readline().strip())
    N, M = map(int, file.readline().split())
    board = np.array([list(map(int, line.split())) for line in file.readlines()[:N]], dtype=np.int32)
    if task == 1:
        start_row, start_col = map(lambda x: int(x) - 1, file.readline().split())

# Function to calculate the score for a given position
def calc_score(row, col):
    visited = set()
    while 0 <= row < N and 0 <= col < M:
        if (row, col) in visited:
            # Cycle detected, return favorable score
            return len(visited) * 1000
        visited.add((row, col))
        direction = directions[board[row, col] - 1]
        row += direction[0]
        col += direction[1]
    return len(visited)

# Task 1: Calculate the score for the given start position
if task == 1:
    score = calc_score(start_row, start_col)
    with open("arrows.out", "w") as file:
        file.write(str(score))

# Task 2: Calculate the number of favorable cells
elif task == 2:
    favorable_count = 0
    for row in range(N):
        for col in range(M):
            if calc_score(row, col) >= 1000:
                favorable_count += 1
    with open("arrows.out", "w") as file:
        file.write(str(favorable_count))

# Task 3: Calculate the maximum score achievable
elif task == 3:
    max_score = 0
    for row in range(N):
        for col in range(M):
            score = calc_score(row, col)
            if score > max_score:
                max_score = score
    with open("arrows.out", "w") as file:
        file.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `arrows.out` and read from `arrows.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Directions (right, up, left, down)
directions = [(0, 1), (-1, 0), (0, -1), (1, 0)]

# Function to calculate the score for a given position
def calc_score(board, row, col, N, M):
    visited = set()
    cycle_length = 0
    while 0 <= row < N and 0 <= col < M:
        if (row, col) in visited:
            # Cycle detected, return favorable score
            return cycle_length * 1000
        visited.add((row, col))
        cycle_length += 1
        direction = directions[board[row, col] - 1]
        row += direction[0]
        col += direction[1]
    return cycle_length

# Load the input file
with open("arrows.in", "r") as file:
    task = int(file.readline().strip())
    N, M = map(int, file.readline().split())
    board = np.zeros((N, M), dtype=int)
    for i in range(N):
        board[i] = np.array(file.readline().split(), dtype=int)
    if task == 1:
        start_row, start_col = map(lambda x: int(x) - 1, file.readline().split())

# Task 1: Calculate the score for the given start position
if task == 1:
    score = calc_score(board, start_row, start_col, N, M)
    with open("arrows.out", "w") as file:
        file.write(str(score))

# Task 2: Calculate the number of favorable cells
elif task == 2:
    favorable_count = 0
    for row in range(N):
        for col in range(M):
            if calc_score(board, row, col, N, M) >= 1000:
                favorable_count += 1
    with open("arrows.out", "w") as file:
        file.write(str(favorable_count))

# Task 3: Calculate the maximum score achievable
elif task == 3:
    max_score = 0
    for row in range(N):
        for col in range(M):
            score = calc_score(board, row, col, N, M)
            max_score = max(max_score, score)
    with open("arrows.out", "w") as file:
        file.write(str(max_score))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the environment does not have the 'numpy' library installed and the memory constraint is strict, I'll provide a solution that doesn't rely on 'numpy' or any external libraries. Here is the revised solution using only Python's built-in features.

```python
# Utility function to move in the given direction
def move(pos, direction):
    if direction == 1:
        return pos[0], pos[1] + 1
    elif direction == 2:
        return pos[0] - 1, pos[1]
    elif direction == 3:
        return pos[0], pos[1] - 1
    elif direction == 4:
        return pos[0] + 1, pos[1]

# Function to calculate the score for a given position
def calc_score(board, row, col, N, M):
    visited = set()
    cycle_length = 0
    while 0 <= row < N and 0 <= col < M:
        if (row, col) in visited:
            # Cycle detected, return favorable score
            return cycle_length * 1000
        visited.add((row, col))
        cycle_length += 1
        row, col = move((row, col), board[row][col])
    return cycle_length

# Load the input file
with open("arrows.in", "r") as file:
    task = int(file.readline().strip())
    N, M = map(int, file.readline().split())
    board = [list(map(int, file.readline().split())) for _ in range(N)]
    if task == 1:
        start_row, start_col = map(lambda x: int(x) - 1, file.readline().split())

# Task 1: Calculate the score for the given start position
if task == 1:
    score = calc_score(board, start_row, start_col, N, M)
    with open("arrows.out", "w") as file:
        file.write(str(score))

# Task 2: Calculate the number of favorable cells
elif task == 2:
    favorable_count = 0
    for row in range(N):
        for col in range(M):
            if calc_score(board, row, col, N, M) >= 1000:
                favorable_count += 1
    with open("arrows.out", "w") as file:
        file.write(str(favorable_count))

# Task 3: Calculate the maximum score achievable
elif task == 3:
    max_score = 0
    for row in range(N):
        for col in range(M):
            score = calc_score(board, row, col, N, M)
            max_score = max(max_score, score)
    with open("arrows.out", "w") as file:
        file.write(str(max_score))
```
