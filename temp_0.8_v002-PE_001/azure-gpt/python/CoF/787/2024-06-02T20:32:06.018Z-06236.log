---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `ruleta.in` and write to `ruleta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Nicușor este elev în clasa a VI-a și s-a gândit că este suficient de mare ca să inventeze un joc nou. Are doar o foaie de hârtie și un pix. Scrie mai întâi $n$ numere naturale în cerc. Acestea formează ***Ruleta numerelor***. Jocul se desfășoară după următoarele reguli:

* se parcurge șirul numerelor în sensul deplasării acelor de ceasornic;
* se pornește de fiecare dată de la același element;
* se execută de fiecare dată o rotație completă;
* fiecare element nenul se scade din elementul imediat următor doar dacă este mai mic sau egal cu acesta și nenul;

**Exemplu.** Dacă notăm cu $R_1, R_2, R_3, R_4, R_5, R_6, R_7, R8$ șirul numerelor ce formează ruleta din figura $1$, atunci, o rotație completă realizează următoarele modificări asupra numerelor din listă:

~[ruleta1.png|width=35em] ~[ruleta2.png|width=23em]

* ruleta se oprește atunci când execută o rotație completă și nu se modifică nici o valoare din șirul elementelor.

**Exemplu.** Pentru ruleta din figura $1$ se execută $4$ rotații (dintre care $3$ în care se fac modificări):

~[ruleta3.png]

# Cerință

Scrieți un program care să determine, pentru un șir de $n$ numere naturale care indică starea inițială a ruletei, numărul $r$ de rotații complete efectuate respectând regulile jocului până la încheierea acestuia și numărul $t$ al elementelor nenule aflate în șir la încheierea jocului.

# Date de intrare

Fișierul de intrare `ruleta.in` conține pe prima linie numărul $n$ de numere naturale așezate în cerc iar pe linia a doua, separate prin câte un spațiu, cele $n$ valori, în ordinea deplasării, începând cu elementul de la care pornește ruleta.

# Date de ieșire

Fișierul de ieșire `ruleta.out` conține pe prima linie, separate printr-un spațiu, valorile $r$ și $t$ (în această ordine).

# Restricții și precizări

* $2 \leq n \leq 10 \ 000$;
* Numerele de pe ruletă sunt numere naturale mai mici sau cel mult egale cu $30 \ 000$.
* pentru aflarea corectă a numărului $r$ de rotaţii se acordă 70% din punctajul pe test; punctajul integral se acordă dacă ambele valori afişate sunt corecte.

---

Example:
`ruleta.in`
```
8
1 2 3 4 3 2 3 1
```

`ruleta.out`
```
4 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input file
with open('ruleta.in', 'r') as file:
    n = int(file.readline().strip())
    roulette = np.array(file.readline().strip().split(), dtype=np.int32)

# Rotate the roulette and count rotations
rotations = 0
while True:
    rotations += 1
    changes = False
    new_roulette = np.copy(roulette)
    for i in range(n):
        current = roulette[i]
        next_index = (i + 1) % n
        if current != 0 and current <= roulette[next_index]:
            new_roulette[next_index] -= current
            changes = True

    if not changes:
        break
    roulette = new_roulette

# Count non-zero elements
non_zeros = np.count_nonzero(roulette)

# Write the output file
with open('ruleta.out', 'w') as file:
    file.write(f"{rotations} {non_zeros}\n")
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input file
with open('ruleta.in', 'r') as file:
    n = int(file.readline().strip())
    roulette = np.array(file.readline().strip().split(), dtype=np.int32)

# Rotate the roulette and count rotations
rotations = 0
while True:
    temp_roulette = np.copy(roulette)
    changes = False
    for i in range(n):
        current = temp_roulette[i]
        next_index = (i + 1) % n
        if current != 0 and current <= roulette[next_index]:
            roulette[next_index] -= current
            changes = True

    rotations += 1
    if not changes:
        break

# Count non-zero elements
non_zeros = n - np.count_nonzero(roulette == 0)

# Write the output file
with open('ruleta.out', 'w') as file:
    file.write(f"{rotations} {non_zeros}\n")
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the input file
    with open('ruleta.in', 'r') as file:
        n = int(file.readline().strip())
        roulette_numbers = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

    # Initialize rotation count and a flag to detect changes
    rotations = 0
    changes = True

    # Rotate the roulette and count rotations
    while changes:
        changes = False
        prev_val = roulette_numbers[-1]
        for i in range(n):
            if roulette_numbers[i] != 0 and roulette_numbers[i] <= prev_val:
                prev_val -= roulette_numbers[i]
                changes = True
            else:
                prev_val = roulette_numbers[i]
        rotations += 1
        roulette_numbers = np.roll(roulette_numbers, -1)

    # Count non-zero elements
    non_zeros = np.count_nonzero(roulette_numbers)

    # Write the output file
    with open('ruleta.out', 'w') as file:
        file.write(f"{rotations} {non_zeros}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def play_roulette(roulette):
    rotations = 0
    while True:
        changes = False
        # Copy the array to avoid changing the current round's values
        new_roulette = np.roll(roulette, -1)
        for i in range(len(roulette)):
            if roulette[i] != 0 and roulette[i] <= new_roulette[i]:
                new_roulette[i] -= roulette[i]
                changes = True
        # Update the roulette for the next round
        roulette[:] = new_roulette
        rotations += 1
        # Stop if no changes occurred in this rotation
        if not changes:
            break
    non_zero_count = np.count_nonzero(roulette)
    return rotations, non_zero_count

# Read from file
with open('ruleta.in', 'r') as file:
    n = int(file.readline().strip())
    roulette = np.array(file.readline().split(), dtype=np.int32)

# Play the game
rotations, non_zero_count = play_roulette(roulette)

# Write to file
with open('ruleta.out', 'w') as file:
    file.write(f"{rotations} {non_zero_count}\n")
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the input file
    with open('ruleta.in', 'r') as file:
        n = int(file.readline().strip())
        roulette_numbers = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

    # Initialize rotation count
    rotations = 0

    # Rotate the roulette and count rotations
    while True:
        changed = False
        for i in range(n):
            next_index = (i + 1) % n
            if roulette_numbers[i] != 0 and roulette_numbers[i] <= roulette_numbers[next_index]:
                roulette_numbers[next_index] -= roulette_numbers[i]
                changed = True

        rotations += 1
        if not changed:
            break

    # Count non-zero elements
    non_zeros = np.count_nonzero(roulette_numbers)

    # Write the output file
    with open('ruleta.out', 'w') as file:
        file.write(f"{rotations} {non_zeros}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to perform the roulette game
def roulette_game(numbers):
    rotations = 0
    n = len(numbers)
    while True:
        # Create a temporary copy to check against at the end of the rotation
        original_numbers = np.copy(numbers)
        for i in range(n):
            if numbers[i] != 0 and numbers[i] <= numbers[(i + 1) % n]:
                numbers[(i + 1) % n] -= numbers[i]
        rotations += 1
        if np.array_equal(numbers, original_numbers):
            break
    non_zero = np.count_nonzero(numbers)
    return rotations, non_zero

# Read the input data from 'ruleta.in'
with open('ruleta.in', 'r') as file:
    n = int(file.readline())
    numbers = np.array(file.readline().split(), dtype=int)

# Perform the game
rotations, non_zero = roulette_game(numbers)

# Write the output data to 'ruleta.out'
with open('ruleta.out', 'w') as file:
    file.write(f'{rotations} {non_zero}\n')
```
```
---------- user ----------


Expected program to write result to `ruleta.out` and read from `ruleta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def perform_rotations(roulette):
    count_rotations = 0
    modified = True
    n = len(roulette)

    while modified:
        modified = False
        prev_val = roulette[-1]
        for i in range(n):
            if roulette[i] <= prev_val and roulette[i] > 0:
                modified = True
                prev_val -= roulette[i]
            else:
                prev_val = roulette[i]

        count_rotations += 1
        roulette = np.roll(roulette, -1)  # Rotate for the next iteration

    non_zero_elements = np.count_nonzero(roulette)
    return count_rotations, non_zero_elements

# Read the input from the file 'ruleta.in'
with open('ruleta.in', 'r') as file:
    n = int(file.readline().strip())
    roulette = np.array(file.readline().strip().split(), dtype=np.int32)

# Calculate the number of rotations and non-zero elements left
count_rotations, non_zero_elements = perform_rotations(roulette)

# Write the output to the file 'ruleta.out'
with open('ruleta.out', 'w') as file:
    file.write(f'{count_rotations} {non_zero_elements}\n')
```
```
