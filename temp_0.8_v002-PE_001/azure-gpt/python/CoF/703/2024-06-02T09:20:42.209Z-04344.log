---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Check if a number is a valoare-panta
def is_valoare_panta(num):
    str_num = str(num)
    return all(str_num[i] <= str_num[i+1] for i in range(len(str_num) - 1)) or \
           all(str_num[i] >= str_num[i+1] for i in range(len(str_num) - 1))

# Read data from file
with open('valori-panta.in', 'r') as file:
    n = int(file.readline().strip())
    array = np.array(file.readline().split(), dtype=np.int32)

# Initialize variables to store the results
valori_panta_count = 0
max_valoare_panta = -1
min_valoare_panta = float('inf')
max_valoare_positions = []
min_valoare_positions = []

# Process the array to find valori-panta
for idx, num in enumerate(array):
    if is_valoare_panta(num):
        valori_panta_count += 1

        if num > max_valoare_panta:
            max_valoare_panta = num
            max_valoare_positions = [idx + 1]
        elif num == max_valoare_panta:
            max_valoare_positions.append(idx + 1)

        if num < min_valoare_panta:
            min_valoare_panta = num
            min_valoare_positions = [idx + 1]
        elif num == min_valoare_panta:
            min_valoare_positions.append(idx + 1)

# Write results to file
with open('valori-panta.out', 'w') as file:
    file.write(f"{valori_panta_count}\n")
    if valori_panta_count > 0:
        file.write(f"{max_valoare_panta} {' '.join(map(str, max_valoare_positions))}\n")
        file.write(f"{min_valoare_panta} {' '.join(map(str, min_valoare_positions))}\n")
    else:
        file.write("NU EXISTA\n")
```
This code uses numpy for efficient array storage and processing. However, numpy is not strictly necessary for this problem since it does not provide a significant advantage in this specific case. If numpy usage turns out to be too memory-intensive due to its overhead, the same logic can be used without numpy, using a list instead.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available, which means we cannot use it for this challenge. Let's rewrite the solution using standard Python lists, ensuring that memory usage is minimized.

Here's the revised solution without using `numpy`:

```python
# Check if a number is a valoare-panta
def is_valoare_panta(num):
    str_num = str(num)
    return all(str_num[i] <= str_num[i+1] for i in range(len(str_num) - 1)) or \
           all(str_num[i] >= str_num[i+1] for i in range(len(str_num) - 1))

# Read data from file
with open('valori-panta.in', 'r') as file:
    n = int(file.readline().strip())
    array = list(map(int, file.readline().split()))

# Initialize variables to store the results
valori_panta_count = 0
max_valoare_panta = -1
min_valoare_panta = float('inf')
max_valoare_positions = []
min_valoare_positions = []

# Process the array to find valori-panta
for idx, num in enumerate(array):
    if is_valoare_panta(num):
        valori_panta_count += 1

        if num > max_valoare_panta:
            max_valoare_panta = num
            max_valoare_positions = [idx + 1]
        elif num == max_valoare_panta:
            max_valoare_positions.append(idx + 1)

        if num < min_valoare_panta:
            min_valoare_panta = num
            min_valoare_positions = [idx + 1]
        elif num == min_valoare_panta:
            min_valoare_positions.append(idx + 1)

# Write results to file
with open('valori-panta.out', 'w') as file:
    file.write(f"{valori_panta_count}\n")
    if valori_panta_count > 0:
        file.write(f"{max_valoare_panta} {' '.join(map(str, max_valoare_positions))}\n")
        file.write(f"{min_valoare_panta} {' '.join(map(str, min_valoare_positions))}\n")
    else:
        file.write("NU EXISTA\n")
```

This code uses the built-in `list` and `map` functions to read and process the data from the file, ensuring compatibility without the need for third-party libraries. It should now run without the `ModuleNotFoundError` that was caused by attempting to import `numpy`.
