---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def calculate_max_height(terrain):
    total_dirt = terrain.sum()  # Calculate the total amount of dirt available
    return total_dirt // len(terrain)  # The maximum height is total dirt divided by the number of zones

def main():
    with open('buldo.in', 'r') as file:
        N = int(file.readline().strip())
        terrain = np.array(list(map(int, file.readline().split())), dtype=np.int64)

    max_height = calculate_max_height(terrain)

    with open('buldo.out', 'w') as file:
        file.write(str(max_height))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read from 'buldo.in'
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())
    terrain = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Calculate the maximum height H
total_dirt = terrain.sum()
max_height = total_dirt // N

# Write to 'buldo.out'
with open('buldo.out', 'w') as file:
    file.write(str(max_height))
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    with open('buldo.in', 'r') as file:
        N = int(file.readline().strip())
        terrain = np.array(list(map(int, file.readline().split())), dtype=np.int64)

    max_height = np.sum(terrain) // N

    with open('buldo.out', 'w') as file:
        file.write(str(max_height))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the maximum height for leveling the terrain
def calculate_max_height(terrain, N):
    total_dirt = np.sum(terrain)
    return total_dirt // N

def main():
    # Read terrain data from 'buldo.in'
    with open('buldo.in', 'r') as file:
        N = int(file.readline())
        terrain = np.array(file.readline().split(), dtype=np.int64)

    # Calculate max height
    max_height = calculate_max_height(terrain, N)

    # Write the result to 'buldo.out'
    with open('buldo.out', 'w') as file:
        file.write(str(max_height))

# Run the program
main()
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy for efficient array handling and sum computation
import numpy as np

def main():
    # Reading data from file 'buldo.in'
    with open('buldo.in', 'r') as fin:
        N = int(fin.readline().strip())  # Read the number of zones N
        heights = np.fromfile(fin, dtype=int, sep=' ', count=N)  # Read the N heights into a numpy array

    # Calculate the total volume of earth (sum of heights) and divide by number of zones to get maximal H
    H = heights.sum() // N

    # Writing the result to file 'buldo.out'
    with open('buldo.out', 'w') as fout:
        fout.write(str(H))

# Entry point of the program
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy for efficient array handling and sum computation
import numpy as np

def main():
    # Reading data from file 'buldo.in'
    with open('buldo.in', 'r') as fin:
        N = int(fin.readline().strip())  # Read the number of zones N
        heights = np.array(fin.readline().split(), dtype=np.int64)  # Read the N heights into a numpy array

    # Calculate the total volume of earth (sum of heights) and divide by number of zones to get maximal H
    H = heights.sum() // N

    # Writing the result to file 'buldo.out'
    with open('buldo.out', 'w') as fout:
        fout.write(str(H))

# Entry point of the program
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy for efficient array handling and sum computation
import numpy as np

# Function to calculate the maximum height H
def calculate_max_height(terrain_heights, num_zones):
    total_volume = terrain_heights.sum()
    return total_volume // num_zones

# Main function to read input, process data, and write output
def main():
    # Open the input file and read the terrain data
    with open('buldo.in', 'r') as fin:
        num_zones = int(fin.readline().strip())
        terrain_heights = np.array(fin.readline().split(), dtype=np.int64)

    # Calculate the maximum height for leveling the terrain
    max_height = calculate_max_height(terrain_heights, num_zones)

    # Open the output file and write the result
    with open('buldo.out', 'w') as fout:
        fout.write(str(max_height))

# Invoke the main function
if __name__ == "__main__":
    main()
```
```
