---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read heights from input file
with open('buldo.in', 'r') as file:
    n = int(file.readline().strip())  # number of zones
    heights = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Total amount of soil on the initial terrain
total_soil = np.sum(heights)

# The average height of soil should be the max height H achievable
# after leveling without running out of soil
H = total_soil // n

# Write the result to output file
with open('buldo.out', 'w') as file:
    file.write(str(H))
```
```

This solution assumes that the most efficient height to level the terrain is equal to the average height of the terrain, since excess soil from higher zones can be used to raise lower zones. To find the maximum height `H`, we calculate the total amount of soil and divide it by the total number of zones. Since numpy arrays are efficient and the division operation is a simple arithmetic operation, this solution should be efficient in terms of both time and memory usage. The reading and writing from files are done without loading the entire file into memory, which helps to respect the memory limit constraint. The usage of numpy guarantees efficient handling of the array of heights.
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the maximum height H
def calculate_max_height(heights, n):
    total_soil = np.sum(heights)
    left, right = 0, total_soil // n

    while left <= right:
        mid = (left + right) // 2
        required_soil = np.maximum(0, mid - heights).sum()
        available_soil = np.maximum(0, heights - mid).sum()
        if required_soil > available_soil:
            right = mid - 1
        else:
            left = mid + 1
    return right

# Read heights from input file
with open('buldo.in', 'r') as file:
    n = int(file.readline().strip())  # number of zones
    heights = np.fromstring(file.readline().strip(), dtype=np.int64, sep=' ')

# Calculate the maximum height H
H = calculate_max_height(heights, n)

# Write the result to output file
with open('buldo.out', 'w') as file:
    file.write(f'{H}\n')
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from file
with open('buldo.in', 'r') as fin:
    N = int(fin.readline().strip())
    heights = np.array(fin.readline().split(), dtype=np.int64)

# Initialize variables
low, high = 1, heights.max()
answer = 0

# Binary search for the maximum possible height H
while low <= high:
    H = (low + high) // 2
    soil = np.where(heights > H, heights - H, 0).sum()
    required = np.where(heights < H, H - heights, 0).sum()
    if soil >= required:
        answer = H
        low = H + 1
    else:
        high = H - 1

# Write result to file
with open('buldo.out', 'w') as fout:
    fout.write(f"{answer}\n")
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def find_max_height(heights, n):
    total_soil = heights.sum()
    # Binary search to find the highest level that can be achieved
    low, high = min(heights), total_soil // n
    while low < high:
        mid = (low + high + 1) // 2
        # Check if we can level to mid height
        if np.sum(np.maximum(0, mid - heights)) <= total_soil - np.sum(heights[heights < mid]):
            low = mid
        else:
            high = mid - 1
    return low

# Read from buldo.in
with open('buldo.in', 'r') as file:
    n = int(file.readline())
    heights = np.fromstring(file.readline(), dtype=int, sep=' ')

# Calculate the max height H
H = find_max_height(heights, n)

# Write to buldo.out
with open('buldo.out', 'w') as file:
    file.write(f'{H}\n')
```
```

---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# We will check if it's possible to level the terrain to a certain height H
def is_possible(heights, H):
    # Calculate the initial amount of soil on the blade
    C = np.sum(np.maximum(heights - H, 0))
    
    # Check if there's enough soil on the blade when leveling lower zones
    for h in heights:
        if h < H:
            C -= (H - h)
            # If at any point C is negative, it's not possible to level to H
            if C < 0:
                return False
    return True

# Main logic for finding the maximum height H
def find_max_height(heights, N):
    # Using binary search to find the optimal height H
    low, high = 1, max(heights)
    while low < high:
        mid = (low + high + 1) // 2
        if is_possible(heights, mid):
            low = mid
        else:
            high = mid - 1
    return low

# Read heights from input file
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())  # number of zones
    heights = np.fromfile(file, dtype=int, sep=' ', count=N)

# Find the maximum height H that can be achieved
max_height = find_max_height(heights, N)

# Write the result to output file
with open('buldo.out', 'w') as file:
    file.write(f'{max_height}\n')
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to determine if a certain height H is achievable with the soil available
def can_level(heights, N, H):
    soil = 0
    for i in range(N):
        if heights[i] < H:
            soil -= (H - heights[i])
        else:
            soil += (heights[i] - H)
        if soil < 0:
            return False
    return True

# Binary search to find the maximum achievable height H
def find_max_height(heights, N):
    left = 1
    right = max(heights)
    while left < right:
        mid = (left + right + 1) // 2
        if can_level(heights, N, mid):
            left = mid
        else:
            right = mid - 1
    return left

# Read data from file
with open('buldo.in', 'r') as file:
    N = int(file.readline())
    heights = np.fromstring(file.readline(), sep=' ', dtype=np.int64)

# Compute the result
H = find_max_height(heights, N)

# Write the result to the output file
with open('buldo.out', 'w') as file:
    file.write(str(H))
```
```
---------- user ----------


Expected program to write result to `buldo.out` and read from `buldo.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_max_height(heights):
    total_soil = np.sum(heights)
    n = len(heights)
    
    # Initial bounds for binary search
    left, right = 0, total_soil
    
    # Binary search to find the maximum height H
    while left < right:
        H = (left + right + 1) // 2
        # Calculate how much soil we will have or need
        soil_balance = np.sum(np.where(heights >= H, heights - H, 0)) - np.sum(np.where(heights < H, H - heights, 0))
        # If we have enough soil or more, we can try a higher H
        if soil_balance >= 0:
            left = H
        # If we don't have enough soil, we need to try a lower H
        else:
            right = H - 1
    return left

# Read data from the input file
with open('buldo.in', 'r') as f:
    n = int(f.readline().strip())
    heights = np.array(f.readline().strip().split(), dtype=np.int64)

# Calculate max height
max_height = calculate_max_height(heights)

# Write the result to the output file
with open('buldo.out', 'w') as f:
    f.write(str(max_height) + '\n')
```
```
