---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator cibernetic se fac experimente cu roboți. Pe o bandă de lucru se află așezate unul lângă altul, $N$ cuburi galbene și albastre, numeroate în ordine cu valori de la $1$ la $N$. Pentru fiecare cub se cunoaște latura acestuia, exprimată în centimetri, și culoarea, codificată prin simbolul $g$ (pentru galben) sau $a$ (pentru albastru).


~[turnuri-1.png|align=right|width=30%]

Un robot inteligent este programat să construiască turnuri prin așezarea cuburilor unul peste altul. El se află în fața benzii de lucru, analizează fiecare cub în ordine, de la primul la ultimul, și procedează astfel:
* dacă este primul cub, îl lasă la locul lui pe bandă;
* așază cubul numerotat cu $K$ peste cubul numerotat cu $K-1$ doar dacă el are culoarea diferită și latura mai mică decât cubul $K-1$. Această operație se efectuează în cazul în care cubul $K-1$ se află deja într-un turn construit anterior sau dacă el a rămas în poziția inițială. În cazul în care cubul $K$ nu poate fi așezat peste cubul $K-1$, el rămâne la locul lui.


# Cerință

Știind că un turn poate fi format din cel puțin un cub, scrieți un program care să determine:

1. numărul final $T$ al turnurilor de pe bandă și $H$, înălțimea celui mai înalt turn care se poate forma, exprimată în centimetri;
2. cel mai mare număr de cuburi Nmax ce pot forma un turn, dacă cele $N$ cuburi ar putea fi rearanjate inițial pe bandă, unul lângă altul.

# Date de intrare

Fișierul de intrare `turnuri.in` conține:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinței și poate fi $1$ sau $2$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul cuburilor de pe bandă;
* pe fiecare dintre următoarele $N$ linii, câte un număr natural care reprezintă latura unui cub, urmat de un spațiu și simbolul $g$ sau $a$, pentru codificarea culorii cubului.

# Date de ieșire

În fișierul de ieșire `turnuri.out` va conține pentru cerința $1$ pe prima linie două valori, separate printr-un spațiu, ce reprezintă $T$ și $H$. Pentru cerința $2$ fișierul va conține pe prima linie numărul $Nmax$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$ și $1 \leq$ latura unui cub $\leq 500 \ 000$;
* nu există două cuburi cu laturi egale;
* se acordă $10$ puncte din oficiu. Pentru rezolvarea corectă a primei cerințe se acordă $30$ de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă $60$ de puncte.

---

Example:
`turnuri.in`
```
1
6
18 a
13 g
15 a
10 a
8 g
2 a
```

`turnuri.out`
```
3 31
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Save this as a .py file and run with the input file "turnuri.in" in the same directory.

import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        cubes = [tuple(map(str, line.strip().split())) for line in file.readlines()]
    return c, n, np.array(cubes, dtype=[('size', np.int32), ('color', 'U1')])

def write_output(filename, t, h=None):
    with open(filename, 'w') as file:
        if h is not None:
            file.write(f"{t} {h}\n")
        else:
            file.write(f"{t}\n")

def solve_cerinta1(cubes):
    t = 1
    h = cubes[0]['size']
    max_h = h
    for i in range(1, len(cubes)):
        if cubes[i]['color'] != cubes[i-1]['color'] and cubes[i]['size'] < cubes[i-1]['size']:
            h += cubes[i]['size']
        else:
            t += 1
            h = cubes[i]['size']
        max_h = max(max_h, h)
    return t, max_h

def solve_cerinta2(cubes):
    # Sort the cubes by size, with the larger cubes first
    sorted_cubes = np.sort(cubes, order='size')[::-1]
    nmax = 1
    current_color = sorted_cubes[0]['color']
    for i in range(1, len(sorted_cubes)):
        if sorted_cubes[i]['color'] != current_color:
            nmax += 1
            current_color = sorted_cubes[i]['color']
    return nmax

def main():
    c, n, cubes = read_input('turnuri.in')

    if c == 1:
        t, max_h = solve_cerinta1(cubes)
        write_output('turnuri.out', t, max_h)
    elif c == 2:
        nmax = solve_cerinta2(cubes)
        write_output('turnuri.out', nmax)

if __name__ == "__main__":
    main()
```

This code should be saved in a `.py` file and executed in a Python environment with the `turnuri.in` file in the same directory. The `turnuri.out` file will be created or overwritten with the output of the program. This solution uses Numpy for efficient array handling and data types. The logic of `solve_cerinta1` is straightforward, iterating through the cubes and trying to stack them based on the rules. For `solve_cerinta2`, the cubes are first sorted by size and then the maximum tower is constructed by alternating colors. The code ensures that memory usage is within the constraints by using efficient data types and not creating unnecessary copies of the array.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not found, which means that the `numpy` library is not installed in the environment where the program is being executed. Since the environment does not support `numpy`, I will rewrite the solution to solve the problem without using any external libraries.

Here's the fixed solution that adheres to the memory constraints without using `numpy`:

```python
# Save this as a .py file and run with the input file "turnuri.in" in the same directory.

def read_input(filename):
    with open(filename, 'r') as file:
        c = int(file.readline().strip())
        n = int(file.readline().strip())
        cubes = [tuple(line.strip().split()) for line in file.readlines()]
    # Convert sizes to integers
    cubes = [(int(size), color) for size, color in cubes]
    return c, n, cubes

def write_output(filename, t, h=None):
    with open(filename, 'w') as file:
        if h is not None:
            file.write(f"{t} {h}\n")
        else:
            file.write(f"{t}\n")

def solve_cerinta1(cubes):
    t = 1
    h = cubes[0][0]
    max_h = h
    for i in range(1, len(cubes)):
        if cubes[i][1] != cubes[i-1][1] and cubes[i][0] < cubes[i-1][0]:
            h += cubes[i][0]
        else:
            t += 1
            h = cubes[i][0]
        max_h = max(max_h, h)
    return t, max_h

def solve_cerinta2(cubes):
    # Sort the cubes by size, with the larger cubes first
    sorted_cubes = sorted(cubes, key=lambda x: x[0], reverse=True)
    nmax = 1
    current_color = sorted_cubes[0][1]
    for i in range(1, len(sorted_cubes)):
        if sorted_cubes[i][1] != current_color:
            nmax += 1
            current_color = sorted_cubes[i][1]
    return nmax

def main():
    c, n, cubes = read_input('turnuri.in')

    if c == 1:
        t, max_h = solve_cerinta1(cubes)
        write_output('turnuri.out', t, max_h)
    elif c == 2:
        nmax = solve_cerinta2(cubes)
        write_output('turnuri.out', nmax)

if __name__ == "__main__":
    main()
```

This solution does not use the `numpy` library and relies on built-in Python functions and methods for reading from the input file and writing to the output file. It should be well within the memory limit of ~8MB, as the most memory-intensive operation is sorting a list of tuples, which is a built-in operation in Python and highly optimized.
