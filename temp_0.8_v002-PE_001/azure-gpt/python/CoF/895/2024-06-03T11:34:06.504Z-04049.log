---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator cibernetic se fac experimente cu roboți. Pe o bandă de lucru se află așezate unul lângă altul, $N$ cuburi galbene și albastre, numeroate în ordine cu valori de la $1$ la $N$. Pentru fiecare cub se cunoaște latura acestuia, exprimată în centimetri, și culoarea, codificată prin simbolul $g$ (pentru galben) sau $a$ (pentru albastru).


~[turnuri-1.png|align=right|width=30%]

Un robot inteligent este programat să construiască turnuri prin așezarea cuburilor unul peste altul. El se află în fața benzii de lucru, analizează fiecare cub în ordine, de la primul la ultimul, și procedează astfel:
* dacă este primul cub, îl lasă la locul lui pe bandă;
* așază cubul numerotat cu $K$ peste cubul numerotat cu $K-1$ doar dacă el are culoarea diferită și latura mai mică decât cubul $K-1$. Această operație se efectuează în cazul în care cubul $K-1$ se află deja într-un turn construit anterior sau dacă el a rămas în poziția inițială. În cazul în care cubul $K$ nu poate fi așezat peste cubul $K-1$, el rămâne la locul lui.


# Cerință

Știind că un turn poate fi format din cel puțin un cub, scrieți un program care să determine:

1. numărul final $T$ al turnurilor de pe bandă și $H$, înălțimea celui mai înalt turn care se poate forma, exprimată în centimetri;
2. cel mai mare număr de cuburi Nmax ce pot forma un turn, dacă cele $N$ cuburi ar putea fi rearanjate inițial pe bandă, unul lângă altul.

# Date de intrare

Fișierul de intrare `turnuri.in` conține:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinței și poate fi $1$ sau $2$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul cuburilor de pe bandă;
* pe fiecare dintre următoarele $N$ linii, câte un număr natural care reprezintă latura unui cub, urmat de un spațiu și simbolul $g$ sau $a$, pentru codificarea culorii cubului.

# Date de ieșire

În fișierul de ieșire `turnuri.out` va conține pentru cerința $1$ pe prima linie două valori, separate printr-un spațiu, ce reprezintă $T$ și $H$. Pentru cerința $2$ fișierul va conține pe prima linie numărul $Nmax$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$ și $1 \leq$ latura unui cub $\leq 500 \ 000$;
* nu există două cuburi cu laturi egale;
* se acordă $10$ puncte din oficiu. Pentru rezolvarea corectă a primei cerințe se acordă $30$ de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă $60$ de puncte.

---

Example:
`turnuri.in`
```
1
6
18 a
13 g
15 a
10 a
8 g
2 a
```

`turnuri.out`
```
3 31
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Required libraries
import numpy as np

# Read the input data from the file
def read_input(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
        task_type = int(lines[0].strip())
        count = int(lines[1].strip())
        cubes = [(int(line.split()[0]), line.split()[1]) for line in lines[2:]]
    return task_type, count, cubes

# Write the output data to the file
def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(f"{result}\n")

# Task 1: Determine the number of towers and the height of the tallest tower
def task1(cubes):
    towers = 1
    max_height = current_height = cubes[0][0]
    for i in range(1, len(cubes)):
        # Check if the current cube can be placed on the top of the previous one
        if cubes[i][1] != cubes[i-1][1] and cubes[i][0] < cubes[i-1][0]:
            current_height += cubes[i][0]
            max_height = max(max_height, current_height)
        else:
            towers += 1
            current_height = cubes[i][0]
    return towers, max_height

# Task 2: Determine the maximum number of cubes that can form a tower
def task2(cubes):
    # Sort cubes by size
    sorted_cubes = sorted(cubes, key=lambda x: x[0], reverse=True)
    # Count cubes alternating colors
    max_cubes = 1
    last_color = sorted_cubes[0][1]
    for i in range(1, len(sorted_cubes)):
        if sorted_cubes[i][1] != last_color:
            max_cubes += 1
            last_color = sorted_cubes[i][1]
    return max_cubes

# Main function to execute tasks based on input
def main(input_file, output_file):
    task_type, _, cubes = read_input(input_file)
    
    if task_type == 1:
        result = task1(cubes)
        write_output(output_file, ' '.join(map(str, result)))
    elif task_type == 2:
        result = task2(cubes)
        write_output(output_file, str(result))

# Run the program
if __name__ == "__main__":
    main("turnuri.in", "turnuri.out")
```
This code should be saved as a `.py` file, and ensure that the `turnuri.in` file is in the same directory as the python script when it's run. The script will generate or overwrite the `turnuri.out` file with the correct output.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The ModuleNotFoundError indicates that numpy is not installed or not available in the current environment. As the challenge requires optimizing for both time and memory and considering the memory limit of ~8MB, we can solve this problem without using numpy or other external libraries to make sure the code runs in environments where numpy is not available.

Below is the adjusted solution without importing `numpy`:

```python
# Read the input data from the file
def read_input(file_path):
    with open(file_path, 'r') as file:
        task_type = int(file.readline().strip())
        count = int(file.readline().strip())
        cubes = [(int(line.split()[0]), line.split()[1]) for line in file]
    return task_type, count, cubes

# Write the output data to the file
def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(f"{result}\n")

# Task 1: Determine the number of towers and the height of the tallest tower
def task1(cubes):
    towers = 1
    max_height = current_height = cubes[0][0]
    for i in range(1, len(cubes)):
        # Check if the current cube can be placed on the top of the previous one
        if cubes[i][1] != cubes[i-1][1] and cubes[i][0] < cubes[i-1][0]:
            current_height += cubes[i][0]
            max_height = max(max_height, current_height)
        else:
            towers += 1
            current_height = cubes[i][0]
    return towers, max_height

# Task 2: Determine the maximum number of cubes that can form a tower
def task2(cubes):
    # Sort cubes by size
    sorted_cubes = sorted(cubes, key=lambda x: x[0], reverse=True)
    # Count cubes alternating colors
    max_cubes = 1
    last_color = sorted_cubes[0][1]
    for i in range(1, len(sorted_cubes)):
        if sorted_cubes[i][1] != last_color:
            max_cubes += 1
            last_color = sorted_cubes[i][1]
    return max_cubes

# Main function to execute tasks based on input
def main(input_file, output_file):
    task_type, _, cubes = read_input(input_file)
    
    if task_type == 1:
        result = task1(cubes)
        write_output(output_file, ' '.join(map(str, result)))
    elif task_type == 2:
        result = task2(cubes)
        write_output(output_file, str(result))

# Run the program
if __name__ == "__main__":
    main("turnuri.in", "turnuri.out")
```

This code is a pure Python solution that does not rely on any third-party libraries or external dependencies. It should run correctly in environments where numpy is not installed.
