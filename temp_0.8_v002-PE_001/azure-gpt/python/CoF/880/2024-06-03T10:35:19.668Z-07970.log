---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `robot.in` and write to `robot.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Paul dorește să învețe cum să programeze un robot. Pentru început s-a gândit să construiască un robot format dintr-un mâner, $10$ butoane aranjate circular și un ecran. Pe butoane sunt scrise, în ordine crescătoare, cifrele de la $0$ la $9$, ca în figură.

~[robot.png]

Un roboprogram va fi format dintr-o secvență de instrucțiuni. Instrucțiunile pot fi:

* Dp: Mânerul robotului se deplasează spre dreapta cu $p$ poziții ($p$ este o cifră)
* Sp: Mânerul robotului se deplasează spre stânga cu $p$ poziții ($p$ este o cifră)
* A: Este apăsat butonul în dreptul căruia se află mânerul robotului și pe ecran apare cifra scrisă pe buton
* T: Terminarea programului (se utilizează o singură dată la final și este precedată de cel puțin o instrucțiune $A$)

Inițial mânerul robotului este plasat în dreptul butonului $0$, iar ecranul este gol. De exemplu, în urma executării roboprogramului D4AS1AAD6AT robotul apasă butoanele pe care sunt scrise cifrele $4$, $3$, $3$, $9$, iar pe ecran va apărea $4339$.

# Cerință

Să se scrie un program care rezolvă următoarele cerințe:

* citește un roboprogram și determină numărul de cifre afișate pe ecran după executarea roboprogramului;
* citește un roboprogram și determină cifrele afișate pe ecran după executarea roboprogramului;
* citește un număr natural $N$ și construiește un roboprogram de lungime minimă prin executarea căruia pe ecran se va obține numărul $N$; deoarece robotului îi place să se deplaseze în special spre dreapta, dacă există mai multe roboprograme de lungime deplasare minimă, se va afișa roboprogramul cu număr maxim de instrucțiuni $D$.

# Date de intrare

Fișierul de intrare `robot.in` conține pe prima linie un număr natural $C$, reprezentând cerința care urmează să fie rezolvată ($1$, $2$ sau $3$). Dacă $C = 1$ sau $C = 2$, pe a doua linie a fișierului se află un roboprogram. Dacă $C = 3$, pe a doua linie a fișierului de intrare se află numărul natural $N$.

# Date de ieșire

Fișierul de ieșire `robot.out` va conține o singură linie. 

Dacă $C = 1$, pe prima linie se va scrie un număr natural reprezentând numărul de cifre afișate pe ecran după executarea roboprogramului din fișierul de intrare.
Dacă $C = 2$, pe prima linie vor fi scrise cifrele afișate pe ecran în urma executării roboprogramului din fișierul de intrare. 
Dacă $C = 3$, pe prima linie va fi scris roboprogramul solicitat de cerința $3$.

# Restricții și precizări

* $0 \leq N \leq 10^9$;
* Lungimea roboprogramului citit din fișierul de intrare sau scris în fișierul de ieșire este cel mult $1000$ de caractere.
* Dacă mânerul este plasat în dreptul butonului $0$ și se deplasează spre dreapta, se va îndrepta către butonul $1$; dacă deplasarea este spre stânga, se va îndrepta către butonul $9$.
* Pentru rezolvarea corectă a primei cerințe se acordă $10$ puncte, pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte, iar pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte. $10$ puncte se acordă din oficiu.

---

Example:
`robot.in`
```
1
D1AD2AS1AT
```

`robot.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def simulate_robot(program):
    position = 0
    screen_digits = []

    for instruction in program:
        action = instruction[0]
        if action == 'D':
            position = (position + int(instruction[1])) % 10
        elif action == 'S':
            position = (position - int(instruction[1])) % 10
        elif action == 'A':
            screen_digits.append(str(position))
        elif action == 'T':
            break

    return screen_digits

def construct_program(number):
    digits = list(str(number))
    program = ''
    current_position = 0

    for digit in digits:
        target_position = int(digit)
        right_distance = (target_position - current_position) % 10
        left_distance = (current_position - target_position) % 10

        if right_distance <= left_distance:
            if right_distance > 0:
                program += 'D{}A'.format(right_distance)
        else:
            if left_distance > 0:
                program += 'S{}A'.format(left_distance)

        current_position = target_position

    program += 'T'
    return program

def main():
    with open('robot.in', 'r') as fin:
        task = int(fin.readline().strip())

        if task == 1 or task == 2:
            program = fin.readline().strip()
            screen_digits = simulate_robot(program)

        elif task == 3:
            N = int(fin.readline().strip())
            program = construct_program(N)

    with open('robot.out', 'w') as fout:
        if task == 1:
            fout.write(str(len(screen_digits)))
        elif task == 2:
            fout.write(''.join(screen_digits))
        elif task == 3:
            fout.write(program)

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def simulate_robot(program):
    position = 0
    screen_digits = []

    for i in range(0, len(program), 2):
        action = program[i]
        if action == 'D':
            position = (position + int(program[i+1])) % 10
        elif action == 'S':
            position = (position - int(program[i+1])) % 10
        elif action == 'A':
            screen_digits.append(str(position))
        elif action == 'T':
            break

    return screen_digits

def construct_program(N):
    digits = list(map(int, str(N)))
    program = []
    position = 0

    for digit in digits:
        right_distance = (digit - position) % 10
        left_distance = (position - digit) % 10
        if right_distance <= left_distance:
            if right_distance != 0:
                program.append('D' + str(right_distance))
            position = digit
        else:
            if left_distance != 0:
                program.append('S' + str(left_distance))
            position = digit
        program.append('A')

    program.append('T')
    return ''.join(program)

# NOTE: The code assumes 'robot.in' is properly formatted according to the problem's requirements.
with open('robot.in', 'r') as fin:
    C = int(next(fin).strip())

    if C == 1 or C == 2:
        roboprogram = next(fin).strip()

    if C == 3:
        N = int(next(fin).strip())

with open('robot.out', 'w') as fout:
    if C == 1:
        screen_digits = simulate_robot(roboprogram)
        fout.write(f"{len(screen_digits)}\n")
    elif C == 2:
        screen_digits = simulate_robot(roboprogram)
        fout.write(''.join(screen_digits) + '\n')
    elif C == 3:
        min_roboprogram = construct_program(N)
        fout.write(min_roboprogram + '\n')
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def simulate_robot(program):
    position = 0
    screen_digits = []

    for i in range(0, len(program), 2):
        action = program[i]
        if action == 'D':
            position = (position + int(program[i+1])) % 10
        elif action == 'S':
            position = (position - int(program[i+1])) % 10
        elif action == 'A':
            screen_digits.append(str(position))
        elif action == 'T':
            break

    return screen_digits

def construct_program(N):
    digits = list(map(int, str(N)))
    program = []
    position = 0

    for digit in digits:
        right_distance = (digit - position) % 10
        left_distance = (position - digit) % 10
        if right_distance <= left_distance:
            if right_distance != 0:
                program.append('D' + str(right_distance))
            position = digit
        else:
            if left_distance != 0:
                program.append('S' + str(left_distance))
            position = digit
        program.append('A')

    program.append('T')
    return ''.join(program)

# Read input from 'robot.in'
with open('robot.in', 'r') as fin:
    C = int(fin.readline().strip())

    if C == 1 or C == 2:
        roboprogram = fin.readline().strip()

    if C == 3:
        N = int(fin.readline().strip())

# Perform computation and write output to 'robot.out'
with open('robot.out', 'w') as fout:
    if C == 1:
        screen_digits = simulate_robot(roboprogram)
        fout.write(f"{len(screen_digits)}\n")
    elif C == 2:
        screen_digits = simulate_robot(roboprogram)
        fout.write(''.join(screen_digits) + '\n')
    elif C == 3:
        min_roboprogram = construct_program(N)
        fout.write(min_roboprogram + '\n')
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def execute_program(robot_program):
    position = 0
    output_digits = []
    for instr in robot_program:
        if instr.startswith("D"):
            position = (position + int(instr[1])) % 10
        elif instr.startswith("S"):
            position = (position - int(instr[1])) % 10
        elif instr == "A":
            output_digits.append(str(position))
    return output_digits

def construct_min_program(N):
    N_str = str(N)
    position = 0
    robot_program = ""
    for digit in N_str:
        target = int(digit)
        move_right = (target - position) % 10
        move_left = (position - target) % 10
        if move_right <= move_left:  # Prefer moving right
            if move_right > 0:
                robot_program += f"D{move_right}A"
        else:
            robot_program += f"S{move_left}A"
        position = target
    robot_program += "T"
    return robot_program

# Read the task and input data from 'robot.in'
with open('robot.in', 'r') as file:
    task = int(file.readline().strip())
    if task in (1, 2):
        program = list(file.readline().strip().split('T')[0])
    elif task == 3:
        N = int(file.readline().strip())

# Process the task and write the output to 'robot.out'
with open('robot.out', 'w') as file:
    if task == 1:
        output_digits = execute_program(program)
        file.write(f"{len(output_digits)}\n")
    elif task == 2:
        output_digits = execute_program(program)
        file.write("".join(output_digits) + "\n")
    elif task == 3:
        min_program = construct_min_program(N)
        file.write(min_program + "\n")
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def process_robot_instruction(position, instruction):
    if instruction.startswith('D'):
        position = (position + int(instruction[1])) % 10
    elif instruction.startswith('S'):
        position = (position - int(instruction[1])) % 10
    return position

def simulate_robot(program):
    position = 0
    screen_digits = []

    for i in range(0, len(program), 3):
        action = program[i]
        if action in 'DS':
            position = process_robot_instruction(position, program[i:i+2])
        elif action == 'A':
            screen_digits.append(str(position))
        elif action == 'T':
            break

    return screen_digits

def construct_program(N):
    digits = list(str(N))
    program = ''
    position = 0

    for digit in digits:
        target_position = int(digit)
        diff = (target_position - position) % 10

        # Prefer to move right if difference is 5 or less, left otherwise
        if diff <= 5:
            if diff > 0: 
                program += 'D{}A'.format(diff)
        else:
            diff = 10 - diff
            program += 'S{}A'.format(diff)

        position = target_position

    program += 'T'
    return program

def main():
    with open('robot.in', 'r') as fin:
        task = int(fin.readline().strip())

        if task in (1, 2):
            program = fin.readline().strip().replace(' ', '')

        if task == 3:
            N = int(fin.readline().strip())

    result = ''
    if task == 1:
        result = str(len(simulate_robot(program)))
    elif task == 2:
        result = ''.join(simulate_robot(program))
    elif task == 3:
        result = construct_program(N)

    with open('robot.out', 'w') as fout:
        fout.write(result + '\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Necessary imports
import numpy as np

# Constants
BUTTONS = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

# Function to execute a program and return the screen digits
def execute_program(program):
    position = 0
    screen_digits = []
    for instr in program:
        if instr.startswith('D'):
            position = (position + int(instr[1])) % 10
        elif instr.startswith('S'):
            position = (position - int(instr[1])) % 10
        elif instr == 'A':
            screen_digits.append(BUTTONS[position])
    return screen_digits

# Function to create the shortest program for the given number
def create_shortest_program(N):
    target_digits = np.array(list(map(int, str(N))))
    position = 0
    program = []
    for digit in target_digits:
        move_right = (digit - position) % 10
        move_left = (position - digit) % 10
        if move_right <= move_left:
            if move_right > 0:
                program.append('D' + str(move_right))
            position = digit
        else:
            if move_left > 0:
                program.append('S' + str(move_left))
            position = digit
        program.append('A')
    program.append('T')
    return ''.join(program)

# Read from 'robot.in'
with open('robot.in', 'r') as file_in:
    task = int(file_in.readline().strip())
    if task in (1, 2):
        program = file_in.readline().strip().replace(' ', '')
    elif task == 3:
        N = int(file_in.readline().strip())

# Process and write to 'robot.out'
with open('robot.out', 'w') as file_out:
    if task in (1, 2):
        screen_digits = execute_program(program)
        if task == 1:
            file_out.write(str(len(screen_digits)) + '\n')
        elif task == 2:
            file_out.write(''.join(map(str, screen_digits)) + '\n')
    elif task == 3:
        shortest_program = create_shortest_program(N)
        file_out.write(shortest_program + '\n')
```
```
---------- user ----------


Expected program to write result to `robot.out` and read from `robot.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to simulate the movement and button pressing of the robot
def simulate_robot(program):
    position = 0
    output = []
    for cmd in program:
        if cmd.startswith('D'):
            position = (position + int(cmd[1])) % 10
        elif cmd.startswith('S'):
            position = (position - int(cmd[1])) % 10
        elif cmd == 'A':
            output.append(str(position))
    return ''.join(output)

# Function to generate a robot program to display a number N on screen
def generate_program(N):
    digits = [int(d) for d in str(N)]
    position = 0
    program = []
    for digit in digits:
        move = (digit - position) % 10
        if move <= 5:
            program.append('D' + str(move))
        else:
            move = 10 - move
            program.append('S' + str(move))
        program.append('A')
        position = digit
    program.append('T')
    return ''.join(program)

# Reading the input from file 'robot.in'
with open('robot.in', 'r') as file:
    lines = file.readlines()
    task = int(lines[0].strip())

    if task in [1, 2]:
        robot_program = lines[1].strip()
    elif task == 3:
        N = int(lines[1].strip())

# Performing the task
if task == 1:
    # Count the number of digits displayed on the screen
    result = str(len(simulate_robot(robot_program)))
elif task == 2:
    # Display the digits on the screen
    result = simulate_robot(robot_program)
elif task == 3:
    # Generate the robot program to display number N
    result = generate_program(N)

# Writing the output in file 'robot.out'
with open('robot.out', 'w') as file:
    file.write(result + '\n')
```
```
