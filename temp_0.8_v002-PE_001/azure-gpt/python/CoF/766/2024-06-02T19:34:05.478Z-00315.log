---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `afise.in` and write to `afise.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Campania electorală s-a terminat de mult, dar zidul din parcul central al orașului în care au fost puse afișele este încă într-o formă dezolantă. Ploile și vântul au acționat și au urâțit și mai mult această zonă pe care altă dată erau afișe frumos colorate. Primăria a decis să se ocupe de această problemă. A format o comisie și a decis realizarea unor panouri reclamă care să ascundă porțiunile deteriorate.

Deoarece fondurile sunt mici s-a decis să fie alocate doar un anumit număr de panouri publicitare care trebuie să ocupe o suprafață cât mai mică posibil. Comisia a primit datele din teren sub forma: lungime zid, câte unități sunt ocupate cu afișe ce trebuie acoperite și care este numărul de panouri pe care le poate folosi. De asemenea se primesc ca date și care sunt unitățile de zid ocupate cu afișe deja deteriorate.

# Cerință

Fiind date lungimea zidului, câte unități sunt deteriorate, care este numărul maxim de panouri ce pot fi folosite și care sunt unitățile de zid deteriorate, se cere să se determine lungimea minimă totală a panourilor care sunt folosite pentru a acoperi zona și câte panouri se folosesc. Lungimea minimă o definim ca numărul total de unități de zid acoperite astfel încât să fie mascate zonele problemă. Pentru acoperirea unităților de zid deteriorate, nu este neapărat necesar să se folosească toate panourile. Numărul de panouri folosite fiind limitat există posibilitatea să fie acoperite și zone din zid care sunt curate.

# Date de intrare

Fișierul de intrare `afise.in` conține pe prima linie $3$ valori separate prin câte un spațiu $L \ n \ k$, cu semnificația: $L$ lungimea totală a zidului, $n$ numărul de unități ce urmează a fi acoperite și $k$ numărul maxim de panouri ce pot fi folosite. Pe a doua linie separate prin câte un spațiu sunt $n$ valori $x_1, x_2, \dots, x_n$, unde xi reprezintă unitatea din zid care este acoperită de un afiș vechi. Valorile $x_1, x_2, \dots, x_n$, apar într-o ordine aleatoare.

# Date de ieșire

Fișierul de ieșire `afise.out` conține o singură linie cu două valoari ce reprezintă lungimea minimă totală folosită și numărul de panouri folosite astfel încât toate zonele deteriorate să fie acoperite.

# Restricții și precizări

* $0 < L \leq 1 \ 000$;
* $0 < n \leq L$;
* $0 < k \leq L / 2$;

---

Example:
`afise.in`
```
25 8 3
3 11 6 4 19 15 20 12
```

`afise.out`
```
11 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def cover_posters_and_minimize_panels(length, damaged_units, max_panels, damaged_positions):
    damaged_positions.sort()
    intervals = []
    for i in range(len(damaged_positions) - 1):
        intervals.append(damaged_positions[i+1] - damaged_positions[i] - 1)
    intervals.sort()
    
    panels_to_use = min(max_panels, len(damaged_positions))
    units_to_cover = len(damaged_positions)
    
    for i in range(len(damaged_positions) - panels_to_use):
        units_to_cover += intervals[i]
    
    return (units_to_cover, panels_to_use)

def main():
    with open('afise.in', 'r') as file:
        L, n, k = map(int, file.readline().split())
        damaged_units = list(map(int, file.readline().split()))

    min_length, used_panels = cover_posters_and_minimize_panels(L, n, k, damaged_units)

    with open('afise.out', 'w') as file:
        file.write(f"{min_length} {used_panels}")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_min_panels_and_length(damaged, k):
    damaged.sort()
    intervals = np.diff(damaged) - 1
    intervals.sort()
    clean_intervals = intervals[:-k+1] if k < len(damaged) else []
    total_length = clean_intervals.sum() + len(damaged)
    panels_used = min(k, len(damaged))
    return total_length, panels_used

def main():
    with open('afise.in', 'r') as file:
        L, n, k = map(int, file.readline().split())
        damaged = np.fromstring(file.readline(), dtype=int, sep=' ')

    min_length, used_panels = calculate_min_panels_and_length(damaged, k)

    with open('afise.out', 'w') as file:
        file.write(f"{min_length} {used_panels}")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_min_panels_and_length(damaged_positions, num_panels):
    # Find the intervals between damaged positions
    intervals = np.diff(np.sort(damaged_positions))
    # Calculate the extra lengths between damaged positions after covering each with a panel
    extra_lengths = intervals - 1
    # Sort extra lengths to find which intervals to cover first
    extra_lengths.sort()
    # Calculate the number of extra lengths to use given the constraint on the number of panels
    extra_lengths_to_use = extra_lengths[:(len(damaged_positions) - num_panels)]
    # Calculate the total length used by summing the lengths of extra intervals and the number of panels
    total_length_used = np.sum(extra_lengths_to_use) + len(damaged_positions)
    # The number of panels used is the minimum between the available panels and damaged positions
    panels_used = min(num_panels, len(damaged_positions))
    return total_length_used, panels_used

def main():
    # Read the input data
    with open('afise.in', 'r') as file:
        L, n, k = map(int, file.readline().strip().split())
        damaged_positions = np.array(file.readline().strip().split(), dtype=int)

    # Calculate the result
    min_length, used_panels = calculate_min_panels_and_length(damaged_positions, k)

    # Write the output data
    with open('afise.out', 'w') as file:
        file.write(f"{min_length} {used_panels}")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Necessary imports
import numpy as np

# Function to cover damaged units with minimum length of panels
def cover_damaged_units_with_min_panels(length, damaged_units, max_panels, units):
    # Sort the units in ascending order
    units.sort()
    # Calculate gaps between damaged units
    gaps = np.diff(units) - 1
    # Sort gaps in ascending order
    gaps.sort()
    
    # Initialize total length covered by panels and number of panels used
    total_covered_length = damaged_units  # Each damaged unit will at least be covered by a panel
    panels_used = 1
    
    # Combine small gaps using panels until we reach the maximum number of panels
    for gap in gaps:
        if panels_used < max_panels:
            # If we have more panels left to use, cover the gap with a panel
            total_covered_length += gap + 1  # +1 because we need to cover the gaps on both ends
            panels_used += 1
        else:
            # If we have no panels left, break the loop
            break
    
    return total_covered_length, panels_used

# Main function to read and write the data
def main():
    # Read input from file
    with open('afise.in', 'r') as file:
        L, n, k = map(int, file.readline().strip().split())
        units = np.array(file.readline().strip().split(), dtype=np.int32)

    # Process the data
    min_length, used_panels = cover_damaged_units_with_min_panels(L, n, k, units)

    # Write output to file
    with open('afise.out', 'w') as file:
        file.write(f"{min_length} {used_panels}")

# Call the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_cover_length(damaged, max_panels):
    if len(damaged) == 0:
        return 0, 0
    damaged.sort()
    intervals = [damaged[0]-1] + [damaged[i+1] - damaged[i] - 1 for i in range(len(damaged) - 1)] + [L - damaged[-1]]
    intervals.sort()
    covered_length = len(damaged)
    panels_used = 1
    i = 0
    while panels_used < max_panels and i < len(intervals):
        if intervals[i] == 0:
            i += 1
            continue
        covered_length += intervals[i] + 1
        panels_used += 1
        i += 1
    return covered_length, panels_used

# Read the data from 'afise.in'
with open('afise.in', 'r') as file:
    L, n, k = map(int, file.readline().split())
    damaged = list(map(int, file.readline().split()))

# Calculate the minimum length of panels needed and the number of panels used
min_length, used_panels = calculate_cover_length(damaged, k)

# Write the result to 'afise.out'
with open('afise.out', 'w') as file:
    file.write(f"{min_length} {used_panels}\n")
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_min_panels_length(damaged_positions, k):
    # If no damaged positions, no need for panels
    if not damaged_positions:
        return 0, 0

    # Sort the positions of damaged units
    damaged_positions.sort()
    # Calculate gaps between damaged units
    gaps = [j - i - 1 for i, j in zip(damaged_positions[:-1], damaged_positions[1:])]
    # Sort the gaps to find the smallest gaps
    gaps.sort()

    # Start with covering each damaged unit with a panel
    min_length = len(damaged_positions)
    panels_used = 1

    # Try to cover as many small gaps as possible with available panels
    for gap in gaps:
        if panels_used < k:
            # Cover the gap with a panel, which adds the gap size plus one for the next damaged unit
            min_length += gap + 1
            panels_used += 1
        else:
            # No more panels can be used, stop the process
            break

    return min_length, panels_used

# Read the input data from 'afise.in'
with open('afise.in', 'r') as file:
    L, n, k = map(int, file.readline().split())
    damaged_positions = [int(x) for x in file.readline().split()]

# Calculate the minimum total length of panels and the number of panels used
min_length, used_panels = calculate_min_panels_length(damaged_positions, k)

# Write the output data to 'afise.out'
with open('afise.out', 'w') as file:
    file.write(f"{min_length} {used_panels}\n")
```
```
---------- user ----------


Expected program to write result to `afise.out` and read from `afise.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient numerical computations
import numpy as np

# Function to calculate the minimum length and number of panels used
def find_min_length_and_panels(damaged, k):
    # Sort the damaged positions
    damaged.sort()
    # Calculate the lengths of intervals between damaged positions
    intervals = np.diff(damaged) - 1

    # Sort intervals and consider only the smallest ones that we might leave uncovered
    smallest_intervals = np.sort(intervals)[:max(0, len(intervals) - (k - 1))]

    # The minimum length is the sum of intervals that are left uncovered
    # (since we can use at most k panels, we can cover k-1 intervals between damaged spots)
    # plus the number of damaged spots (since each one will be covered by a panel)
    min_length = np.sum(smallest_intervals) + len(damaged)
    
    # The number of panels used is the minimum between the number of damaged spots and k
    used_panels = min(len(damaged), k)

    return min_length, used_panels

# Main execution
def main():
    # Read from the input file
    with open('afise.in', 'r') as f:
        L, n, k = map(int, f.readline().split())
        damaged = np.array(f.readline().split(), dtype=int)

    # Calculate the solution
    min_length, used_panels = find_min_length_and_panels(damaged, k)

    # Write to the output file
    with open('afise.out', 'w') as f:
        f.write(f"{min_length} {used_panels}\n")

# Run the main function
if __name__ == "__main__":
    main()
```
```
