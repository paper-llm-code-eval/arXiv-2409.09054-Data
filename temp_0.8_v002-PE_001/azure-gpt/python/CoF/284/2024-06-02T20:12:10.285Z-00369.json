{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/284/2024-06-02T20:12:10.285Z-00369.log",
  "attemptStart": 1717359130.285,
  "attemptEnd": 1717359230.725,
  "attemptDuration": 100.43999981880188,
  "code": "# circular_solution.py\n\ndef shortest_distance(from_char, to_char):\n    distance = abs(ord(from_char) - ord(to_char))\n    return min(distance, 26 - distance)\n\ndef calculate_printing_time(blue_string):\n    time = 0\n    current_char = 'A'\n    for char in blue_string:\n        time += shortest_distance(current_char, char)\n        current_char = char\n    return time\n\ndef calculate_with_red(blue_string, red_set):\n    MOD = 666013\n    time = 0\n    combinations = 1\n    min_lexi_string = []\n\n    current_char = 'A'\n    for i, char in enumerate(blue_string):\n        if i > 0:\n            prev_char = blue_string[i-1]\n            min_time_to_next = float('inf')\n            chosen_red = None\n            paths = 0\n\n            for red_char in red_set:\n                temp_time = shortest_distance(prev_char, red_char) + shortest_distance(red_char, char) - shortest_distance(prev_char, char)\n                if temp_time < min_time_to_next:\n                    min_time_to_next = temp_time\n                    chosen_red = red_char\n                    paths = 1\n                elif temp_time == min_time_to_next:\n                    paths += 1\n                    if chosen_red is None or red_char < chosen_red:\n                        chosen_red = red_char\n\n            time += min_time_to_next\n            combinations = (combinations * paths) % MOD\n            min_lexi_string.append(chosen_red)\n\n        time += shortest_distance(current_char, char)\n        current_char = char\n        min_lexi_string.append(char)\n\n    return time, combinations, ''.join(min_lexi_string)\n\n# Read from circular.in\nwith open('circular.in', 'r') as file:\n    c = int(file.readline().strip())\n    blue_string = file.readline().strip()\n    red_letters = file.readline().strip()\n\n# Write to circular.out\nwith open('circular.out', 'w') as file:\n    if c == 1:\n        time = calculate_printing_time(blue_string)\n        file.write(f\"{time}\\n\")\n    elif c == 2:\n        time, combinations, min_lexi_string = calculate_with_red(blue_string, set(red_letters))\n        file.write(f\"{time}\\n\")\n        file.write(f\"{combinations}\\n\")\n        file.write(min_lexi_string + \"\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3351,
  "metadata": {
    "id": 284,
    "examples": [
      {
        "in": "1\nBBTH\nAEIOU",
        "out": "21",
        "explainer": ""
      },
      {
        "in": "2\nBBTH\nAEIOU",
        "out": "23\n4\nBABATIH",
        "explainer": ""
      },
      {
        "in": "2\nAMYMAMAMY\nBCDEFGHIJKLNOPQRSTUVWX",
        "out": "96\n568708\nABMNYNMBABMBABMNY",
        "explainer": ""
      }
    ],
    "body": "~[circular.jpg|align=right|width=20em]\nO imprimantă circulară are litere mari ale alfabetului englezesc dispuse circular de la $A$ la $Z$. Imprimanta are un indicator care inițial este plasat la litera $A$.\nPentru a tipări o literă indicatorul imprimantei se mișcă la stânga sau dreapta. Mișcarea indicatorului către o literă alăturată aflată la stânga sau la dreapta literei curente se realizează într-o secundă. De exemplu: pentru a tipări șirul $BCY$ sunt necesare $6$ secunde. Imprimanta va alege întotdeauna sensul cel mai avantajos de deplasare, astfel încât timpul de deplasare să fie minim.\nImprimanta tipărește literele în două culori: roșu sau albastru. Unele litere se tipăresc cu cerneală roșie, restul cu cerneală albastră. Pentru simplitate le vom numi litere roșii și litere albastre.\nFiind date un șir de litere albastre nu neapărat distincte și mulțimea literelor roșii ale imprimantei, să se calculeze:\n1. Care este timpul pentru tipărirea la imprimanta circulară a șirului de litere albastre.\n2. Să se insereze între oricare două litere albastre aflate pe poziții consecutive câte o literă roșie astfel încât să se obțină timpul minim pentru tipărire și să se afișeze:\n   * timpul minim;\n   * numărul de șiruri distincte care sunt tipărite cu timp minim;\n   * șirul minim lexicografic dintre toate șirurile ce sunt tipărite în acest timp.\n\n# Date de intrare\nFișierul `circular.in` conține:\n1. pe prima linie un număr natural $c$ cu valori posibile $1$ sau $2$ reprezentând cerința problemei;\n2. pe a doua linie un șir de litere albastre, nu neapărat distincte;\n3. pe a treia linie mulțimea literelor roșii distincte în ordine alfabetică.\n\n# Date de ieșire\nÎn fișierul `circular.out` se va afișa în funcție de cerință:\n* Dacă $c = 1$, un singur număr natural reprezentând timpul necesar pentru tipărirea la imprimantă a șirului de litere albastre.\n* Dacă $c = 2$, se vor tipări trei rezultate, fiecare pe câte o linie:\n  * timpul minim pentru tipărire conform cerinței a doua;\n  * numărul de șiruri distincte care sunt tipărite cu timp minim $\\text{modulo }666\\ 013$;\n  * șirul minim lexicografic ce obține acest timp.\n\n# Restricții\n* Cele două șiruri conțin doar litere mari ale alfabetului englez.\n* Lungimea șirului de litere albastre nu depășește $50\\ 000$ de litere.\n* Mulțimea literelor roșii nu depășește $25$ de litere, care sunt distincte și afișate în ordine alfabetică.\n* Toate celelalte litere care nu se regăsesc în mulțimea literelor roșii, sunt albastre.\n* Pentru cazul $c = 2$ se acordă punctaj parțial astfel:\n  * $25\\%$ din punctaj, pentru afișarea timpului minim;\n  * $25\\%$ din punctaj, pentru afișarea numărului de șiruri ce obțin timpul minim;\n  * $50\\%$ din punctaj, pentru afișarea șirului minim lexicografic.\n* **Atenție!** Pentru obținerea punctajului la cerința a doua, pentru orice test, în fișierul de ieșire trebuie să existe exact trei linii care respectă formatul cerut.\n* Cerința 1 valorează 24 de puncte, iar cerința 2 valorează 76 de puncte.",
    "header": {
      "problem_id": 284,
      "problem_name": "circular",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.25,
      "memory_limit_mb": 256,
      "console_input": false,
      "input_filename": "circular.in",
      "output_filename": "circular.out",
      "multiple_solutions": true,
      "original_source": "OJI 2022 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "256m",
    "filename": {
      "input": "circular.in",
      "output": "circular.out"
    },
    "consoleInteraction": false
  }
}