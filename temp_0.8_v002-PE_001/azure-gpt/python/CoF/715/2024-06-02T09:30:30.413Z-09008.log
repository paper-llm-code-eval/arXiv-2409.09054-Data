---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `visul.in` and write to `visul.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Sinbad Marinarul visează că se află într-o peşteră cu comori. Peste tot se aflau cufere pline cu bijuterii şi monezi din aur, iar peştera era luminată de strălucirea lor. Şi în timp ce Sinbad se minuna de toate splendorile din jurul său, se auzi o voce misterioasă, care spuse: 

> Există o posibilitate de a ajunge aici şi dacă reuşeşti toate aceste comori vor fi ale tale. Această pesteră se află în vârful muntelui Ararat,dar pe drum, duhurile rele vor încerca să te oprească. Tu trebuie sa lupti cu ele şi să le învingi în luptă dreaptă. Pentru a deschide peştera, trebuie sa–ţi aminteşti câte duhuri ai învins şi să rosteşti cu voce tare formula magică.
> Formula magică este cel mai mic număr, care are atât prima cifră cât şi numărul de cifre, egale cu numărul duhurilor rele învinse de tine. Dar atentie! Acest număr, trebuie în plus să aibă proprietatea că orice secvenţă de două cifre consecutive trebuie să fie numere prime diferite.

În acest moment, Sinbad s-a trezit şi vrea să plece în căutarea comorii. Nu se teme de duhurile rele, dar ştie câte calcule necesită căutarea formulei magice (şi mai ştie că la matematica nu se descurcă foarte bine). De aceea, vă roagă să-l ajutaţi.

# Cerință

Simbat vă va spune numărul $n$ (reprezentând numărul duhurilor rele învinse de el), iar tu trebuie să-i spui formula magică. În cazul în care nu există un astfel de număr, spuneţi-i lui Sinbad că a fost doar un vis şi că e timpul să se pregătească pentru şcoală.

# Date de intrare

Pe prima linie a fișierului de intrare `visul.in` se găsește $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `visul.out` se va găsi un singur număr natural, adică cel cerut de problemă. Dacă nu există soluţie se va afişa mesajul `Nu exista`.


# Restricții și precizări

* $1 \leq n \leq 10$;

---

Example:
`visul.in`
```
3
```

`visul.out`
```
311
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(np.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def generate_prime_pairs():
    prime_pairs = []
    for i in range(10, 100):
        if is_prime(i):
            prime_pairs.append(str(i))
    return prime_pairs

def find_magic_number(n, prime_pairs):
    for i in range(10**(n-1), 10**n):
        num_str = str(i)
        if num_str[0] != str(n):
            continue
        if all(num_str[j:j+2] in prime_pairs for j in range(len(num_str) - 1)):
            return num_str
    return "Nu exista"

def main():
    with open("visul.in", "r") as input_file:
        n = int(input_file.read().strip())

    prime_pairs = generate_prime_pairs()
    magic_number = find_magic_number(n, prime_pairs)

    with open("visul.out", "w") as output_file:
        output_file.write(magic_number)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# We will check for prime numbers up to 99, for the two-digit prime pairs.
# This sieve will help us quickly determine if a number is prime.
def sieve_of_eratosthenes():
    max_number = 100
    sieve = np.ones(max_number, dtype=bool)
    sieve[:2] = False  # 0 and 1 are not primes
    for i in range(2, int(max_number**0.5) + 1):
        if sieve[i]:
            sieve[i*i:max_number:i] = False
    return sieve

# Generate all two-digit prime numbers as strings for quick concatenation.
def generate_prime_pairs(prime_sieve):
    prime_pairs = [str(i) for i in range(10, 100) if prime_sieve[i]]
    return prime_pairs

# Find the magic number based on the constraints given in the problem.
def find_magic_number(n, prime_pairs):
    if n == 1:  # Special case where the magic number is 11 (two-digit prime)
        return "11"
    # Start with the first digit being n and try to complete the number
    # with each possible prime pair that follows, recursively.
    def build_magic_number(number_str):
        if len(number_str) == n:
            return number_str
        last_digit = number_str[-1]
        for pair in prime_pairs:
            if pair[0] == last_digit and number_str.count(pair) < 2:
                new_number_str = build_magic_number(number_str + pair[1])
                if new_number_str:
                    return new_number_str
        return ""
    # Initiate the process with the first digit being n.
    magic_number = build_magic_number(str(n))
    return magic_number if magic_number else "Nu exista"

def main():
    prime_sieve = sieve_of_eratosthenes()
    prime_pairs = generate_prime_pairs(prime_sieve)
    with open("visul.in", "r") as input_file:
        n = int(input_file.readline().strip())
    magic_number = find_magic_number(n, prime_pairs)
    with open("visul.out", "w") as output_file:
        output_file.write(magic_number + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to compute the sieve of Eratosthenes for 2-digit numbers
def primes_sieve():
    sieve = np.ones(100, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(np.sqrt(len(sieve)))+1):
        if sieve[i]:
            sieve[i*i::i] = False
    return sieve

# Function to determine if a number is prime using the sieve
def is_prime(num, sieve):
    return sieve[num]

# Function to find the magic number for Sinbad's challenge
def find_magic_number(n, sieve):
    # Start with the first digit being n
    # and check each number with n digits for the sequence property
    start = int(str(n) + '0'*(n-1))  # smallest n-digit number starting with n
    end = int(str(n+1) + '0'*(n-1))  # smallest (n+1)-digit number starting with n+1
    
    for num in range(start, end):
        num_str = str(num)
        all_prime = True
        for i in range(len(num_str)-1):
            # Check two-digit prime condition
            if not is_prime(int(num_str[i:i+2]), sieve):
                all_prime = False
                break
        if all_prime:
            return num_str  # Found the magic number
    return 'Nu exista'  # No magic number found

# Main function to read the input, process it, and write the output
def main():
    # Precompute the sieve of Eratosthenes for 2-digit primes
    prime_sieve = primes_sieve()
    
    # Read the input file
    with open('visul.in', 'r') as file_in:
        n = int(file_in.readline().strip())

    # Find the magic number
    magic_number = find_magic_number(n, prime_sieve)
    
    # Write the output file
    with open('visul.out', 'w') as file_out:
        file_out.write(magic_number + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to determine if a number is prime
def is_prime(number):
    if number <= 1:
        return False
    elif number <= 3:
        return True
    elif number % 2 == 0 or number % 3 == 0:
        return False
    i = 5
    while i * i <= number:
        if number % i == 0 or number % (i + 2) == 0:
            return False
        i += 6
    return True

# Function to generate a list of two-digit prime numbers as strings
def generate_two_digit_primes():
    return [str(i) for i in range(10, 100) if is_prime(i)]

# Function to check if a number follows the magic formula constraints
def is_magic_number(number, n, two_digit_primes):
    number_str = str(number)
    if len(number_str) != n or number_str[0] != str(n):
        return False
    for i in range(len(number_str) - 1):
        if number_str[i:i+2] not in two_digit_primes:
            return False
    return True

# Function to find the smallest number that satisfies the magic formula
def find_smallest_magic_number(n, two_digit_primes):
    if n == 1:
        return "11"  # Special case for n=1
    start = int(str(n) + "0" * (n - 1))  # Smallest n-digit number with first digit n
    for number in range(start, start * 10, n):  # Increment by n to keep the first digit as n
        if is_magic_number(number, n, two_digit_primes):
            return str(number)
    return "Nu exista"

# Main function to read input, process data, and write output
def main():
    two_digit_primes = generate_two_digit_primes()
    with open('visul.in', 'r') as file_in:
        n = int(file_in.readline().strip())
    magic_number = find_smallest_magic_number(n, two_digit_primes)
    with open('visul.out', 'w') as file_out:
        file_out.write(magic_number + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import necessary library for prime checking function
import numpy as np

# Define a function to create a sieve for prime checking
def create_sieve(max_num):
    sieve = np.ones(max_num, dtype=bool)
    sieve[0:2] = False
    for i in range(2, int(max_num**0.5)+1):
        if sieve[i]:
            sieve[i*i:max_num:i] = False
    return sieve

# Define a function to get all prime numbers in the form of two-digit strings
def get_prime_pairs(sieve):
    return [str(i) for i in range(10, 100) if sieve[i]]

# Define a function to construct the magical number
def construct_magical_number(n, prime_pairs):
    if n == 1:
        return "11"  # Special case for n=1
    for first in range(1, 10):
        if first == n:  # Only continue if the first digit matches n
            for second in range(10):
                if f"{first}{second}" in prime_pairs:
                    current = f"{first}{second}"
                    while True:
                        found = False
                        for digit in range(10):
                            if f"{current[-1]}{digit}" in prime_pairs:
                                current += str(digit)
                                found = True
                                break
                        if not found or len(current) == n:
                            break
                    if len(current) == n:
                        return current
    return "Nu exista"

# Main function to handle file operations and invoke the logic
def main():
    sieve = create_sieve(100)
    prime_pairs = get_prime_pairs(sieve)
    with open('visul.in', 'r') as fin:
        n = int(fin.readline().strip())
    magical_number = construct_magical_number(n, prime_pairs)
    with open('visul.out', 'w') as fout:
        fout.write(magical_number + '\n')

# Invoke the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution using bit manipulation for prime checking
import numpy as np

# Function to generate a sieve for checking prime numbers
def generate_sieve(limit):
    sieve = np.ones(limit, dtype=bool)
    sieve[0:2] = False
    for i in range(2, int(limit ** 0.5) + 1):
        if sieve[i]:
            sieve[i*i:limit:i] = False
    return sieve

# Function to check if a given sequence of two digits are primes
def is_valid_sequence(number, sieve):
    str_num = str(number)
    for i in range(len(str_num) - 1):
        if not sieve[int(str_num[i:i+2])]:
            return False
    return True

# Main code logic for generating the magical number based on Sinbad's rules
def find_magical_number(n, sieve):
    # For single-digit n, the magical number is '11'
    if n == 1:
        return "11"
    # Starting point (smallest n-digit number where first digit is n)
    start = int(str(n) + "0" * (n - 1))
    # Ending point (smallest (n+1)-digit number)
    end = start * 10
    for num in range(start, end):
        if str(num)[0] == str(n) and is_valid_sequence(num, sieve):
            return str(num)
    return "Nu exista"

# File operations and utilizing the functions to solve the problem
def main():
    sieve = generate_sieve(100)
    with open('visul.in', 'r') as input_file:
        n = int(input_file.readline().strip())
    result = find_magical_number(n, sieve)
    with open('visul.out', 'w') as output_file:
        output_file.write(result + '\n')

# Run the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `visul.out` and read from `visul.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to generate a sieve of Eratosthenes
def generate_sieve(max_value):
    sieve = np.ones(max_value, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(np.sqrt(max_value)) + 1):
        if sieve[i]:
            sieve[i*i::i] = False
    return sieve

# Function to check if the two last digits of number form a prime
def has_prime_last_digits(number, sieve):
    return sieve[int(str(number)[-2:])]

# Function to generate the magical number
def generate_magical_number(n, sieve):
    start = int(str(n) * 2)  # The smallest number with n as its first digit and two digits total
    end = 10 ** n  # The smallest number with more than n digits

    for number in range(start, end):
        if str(number)[0] != str(n) or len(str(number)) != n:
            continue
        if all(has_prime_last_digits(number[i:i+2], sieve) for i in range(n - 1)):
            return number

    return "Nu exista"

# Function to write the result to 'visul.out'
def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

# Main function to read n from 'visul.in', find the magical number and write it to 'visul.out'
def main():
    # Read n
    with open('visul.in', 'r') as file:
        n = int(file.read().strip())

    # Generate a sieve for prime checking
    sieve = generate_sieve(100)

    # Generate the magical number
    magical_number = generate_magical_number(n, sieve)

    # Write the result to 'visul.out'
    write_output('visul.out', magical_number)

if __name__ == '__main__':
    main()
```
```
