{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/791/2024-06-02T21:38:16.531Z-02851.log",
  "attemptStart": 1717364296.531,
  "attemptEnd": 1717364398.288,
  "attemptDuration": 101.757000207901,
  "code": "# Read input data\nwith open('vecini.in', 'r') as file:\n    m, n, k = map(int, file.readline().split())\n    matrix = [[0] * n for _ in range(m)]\n    for _ in range(k):\n        i, j = map(int, file.readline().split())\n        matrix[i - 1][j - 1] = 1\n\n# Function to count good neighbors for an element in the matrix\ndef count_good_neighbors(matrix, x, y, m, n):\n    neighbors = [\n        (x - 1, y - 1), (x - 1, y), (x - 1, y + 1),\n        (x, y - 1),                 (x, y + 1),\n        (x + 1, y - 1), (x + 1, y), (x + 1, y + 1)\n    ]\n    value = matrix[x][y]\n    count = sum(1 for i, j in neighbors if 0 <= i < m and 0 <= j < n and matrix[i][j] == value)\n    return count\n\n# Initialize variables for the maximum number of good neighbors and its frequency\nmax_good_neighbors = -1\nnum_elements_max_neighbors = 0\n\n# Iterate through the matrix to find the maximum number of good neighbors and its frequency\nfor i in range(m):\n    for j in range(n):\n        good_neighbors = count_good_neighbors(matrix, i, j, m, n)\n        if good_neighbors > max_good_neighbors:\n            max_good_neighbors = good_neighbors\n            num_elements_max_neighbors = 1\n        elif good_neighbors == max_good_neighbors:\n            num_elements_max_neighbors += 1\n\n# Write output data\nwith open('vecini.out', 'w') as file:\n    file.write(f\"{max_good_neighbors} {num_elements_max_neighbors}\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4678,
  "metadata": {
    "id": 791,
    "examples": [
      {
        "in": "3 4 7\n1 3\n2 1\n2 4\n3 1\n3 4\n3 3\n3 2",
        "out": "3 6",
        "explainer": ""
      }
    ],
    "body": "Se consideră matricea $A$ ale cărei elemente pot avea doar valorile $0$ sau $1$ și în care numerotarea liniilor și numerotarea coloanelor începe de la $1$. Pentru un element oarecare al matricei, definim noțiunea de vecin ca fiind acele elementele din matrice aflate în imediata sa apropiere pe una dintre direcțiile orizontală, verticală sau pe cele două diagonale (vezi figura de mai jos în care s-au marcat cu $x$ vecinii elementului marcat cu $o$). Un vecin bun al elementului $A_{ij}$ este un vecin care are aceeași valoare cu $A_{ij}$.\n\n~[vecini.png]\n\n# Cerință\n\nDându-se matricea $A$, să se determine numărul maxim de vecini buni pe care îi are unul dintre elementele matricei precum și numărul de elemente care au acest număr maxim de vecini buni.\n\n# Date de intrare\n\nFișierul de intrare `vecini.in` conține pe prima linie trei valori naturale $m \\ n \\ k$ reprezentând numărul de linii, numărul de coloane și respectiv numărul de valori egale cu $1$ din matricea $A$. Pe fiecare dintre următoarele $k$ linii se află două valori $i$ si $j$ cu semnificația $A_{ij}$ este egal cu $1$. Aceste valori sunt date in ordinea parcurgerii matricei pe linii de la linia $1$ la linia $m$.\n\n# Date de ieșire\n\nFișierul de ieșire `vecini.out` va conține pe prima linie două numere naturale $x$ și $y$ separate printr-un singur spațiu: $x$ va reprezenta numărul maxim de vecini buni pe care îi are unul dintre elementele matricei date, iar $y$ va reprezenta numărul de elemente din matricea dată care au acest număr maxim de vecini buni.\n\n# Restricții și precizări\n\n* $2 \\leq m,n \\leq 1 \\ 000$;\n* $0 \\leq k \\leq n \\cdot m / 2+1$;\n* Pentru $30$% dintre teste $2 \\leq m,n \\leq 200$;",
    "header": {
      "problem_id": 791,
      "problem_name": "vecini",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 1.5,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "vecini.in",
      "output_filename": "vecini.out",
      "multiple_solutions": false,
      "original_source": "OJI 2009 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "vecini.in",
      "output": "vecini.out"
    },
    "consoleInteraction": false
  }
}