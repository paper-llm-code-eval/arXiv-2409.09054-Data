---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `patratele.in` and write to `patratele.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[patratele.jpg|align=right|width=25em]

Gigel are în fața sa pe o foaie de matematică un desen obținut prin trasarea mai multor linii orizontale și verticale de lungime $1$ de-a lungul modelului foii de matematică.

Gigel a învăţat de la colegii mai mari un joc, care se joacă în doi: delimitează pe foaia de matematică o zonă dreptunghiulară, apoi, pe rând, trag cu creionul câte o linie pe o latură a unui pătrăţel. Cel care reuşeşte să formeze cele mai multe pătrăţele câştigă. Ochii lui Gigel sunt obişnuiţi să vadă imediat o problemă de matematică, chiar dacă se joacă.

Privind desenul de pe foaie el se întreabă: “Oare câte pătrate s-au format din liniile trasate?”

În desenul alăturat se vede foaia formată din $3$ linii şi $5$ coloane, precum şi liniile trasate până la un moment dat. Se pot distinge trei pătrate de latură $1$, două pătrate de latură $2$ şi un pătrat de latură $3$.

În problema noastră vom codifica fiecare pătrat de latură $1$ de pe foaie cu un număr natural cuprins între $0$ şi $15$ obținut prin însumarea codificării fiecărei laturi astfel:

* $1$ – dacă latura de sus este trasată
* $2$ – dacă latura din dreapta este trasată
* $4$ – dacă latura de jos este trasată
* $8$ – dacă latura din stânga este trasată

Apoi se face suma codificărilor laturilor pentru a afla codificarea fiecărui pătrățel. În acest fel desenul alăturat poate fi codificat printr-un tablou bidimensional de dimensiuni $3 \cdot 5$ cu valorile:

```
9 7 15 13 7
14 15 11 15 11
1 3 12 7 14
```

# Cerință

Fiind date dimensiunile $n$ şi $m$ ale foii de matematică, precum şi tabloul bidimensional de dimensiune $n \cdot m$ care conține codificarea foii, să se determine:

* numărul total de pătrate existente pe foaia de matematică în desenul realizat conform codificării
* distribuția numărului de pătrate în ordinea strict crescătoare a lungimii laturilor
* unde poate fi trasată încă o linie astfel încât numărul total de pătrate să crească și să devină maxim posibil


# Date de intrare


Fişierul de intrare `patratele.in` conţine pe prima linie trei numere naturale $n \ m \ t$, separate prin câte un spaţiu, indicând dimensiunile foii de matematică $n \cdot m$, respectiv cerinţa care trebuie rezolvată ($1, 2$ sau $3$). Fiecare dintre următoarele $n$ linii conţine câte $m$ numere naturale, fiecare dintre acestea reprezentând codificarea foii de matematică.


# Date de ieșire


Fișierul de ieșire `patratele.out` va conține următoarele în funcție de cerința cerută:

* Dacă $t = 1$, pe prima linie numărul total de pătrate determinat;
* Dacă $t = 2$, pe fiecare linie vor fi afișate câte două numere naturale nenule $a$ și $b$, separate printr-un spaţiu, indicând lungimea laturii pătratelor ($a$), respectiv numărul de pătrate cu latura de lungimea respectivă ($b$), în ordinea strict crescătoare a valorilor lui $a$;
* Dacă $t = 3$, prima linie va conține numărul maxim de pătrate, iar linia a doua va conține două valori naturale $lin, col$ și un cuvânt $poz$ separate printr-un spațiu, unde $lin, col$ reprezintă coordonatele pătratului de latură $1$ unde se trasează linia suplimentară, iar $poz \in \{$`SUS`$,$ `DREAPTA`$,$ `JOS`$,$ `STANGA`$,$ `NU`$\}$ (se va afișa `NU` în cazul în care nu se poate trasa nicio linie — în acest caz cele trei valori numerice afișate vor fi de asemenea $0$).


# Restricții și precizări

* Numerotarea liniilor și coloanelor foii de matematică începe de la $1$.
* Dacă la cerința $t=3$ se obțin mai multe poziții de trasare a liniei, se va afișa soluția cu indicele liniei minim, iar în caz de egalitate după linii, se va afișa soluția cu indicele coloanei minim. În cazul în care există mai multe posibilități de trasare a unei linii în același pătrat, pozițiile vor fi luate în ordinea `SUS`, `DREAPTA`, `JOS`, `STANGA`.
* $1 \leq n, m \leq 60$
* Pentru $30$ de puncte, $t = 1$.
* Pentru $30$ de puncte, $t = 2$.
* Pentru $10$ puncte, $t = 3$ și $1 \leq n, m \leq 20$.
* Pentru $30$ de puncte, $t = 3$.

---

Example:
`patratele.in`
```
3 5 1
9 7 15 13 7
14 15 11 15 11
1 3 12 7 14
```

`patratele.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def count_squares(grid):
    n, m = grid.shape
    total_squares = 0
    dp = np.zeros((n + 1, m + 1, 16), dtype=int)
    for i in range(n):
        for j in range(m):
            for k in range(1, min(n, m) + 1):
                if i - k + 1 < 0 or j - k + 1 < 0:
                    break
                sides_complete = all(
                    grid[i-l][j] & 1 and grid[i][j-l] & 8
                    for l in range(k)
                ) and grid[i-k+1][j] & 2 and grid[i][j-k+1] & 4
                if sides_complete:
                    dp[i+1][j+1][k] = 1
                    total_squares += 1
                else:
                    break
    return total_squares

def square_distribution(grid):
    n, m = grid.shape
    dp = np.zeros((n + 1, m + 1, 16), dtype=int)
    for i in range(n):
        for j in range(m):
            for k in range(1, min(n, m) + 1):
                if i - k + 1 < 0 or j - k + 1 < 0:
                    break
                sides_complete = all(
                    grid[i-l][j] & 1 and grid[i][j-l] & 8
                    for l in range(k)
                ) and grid[i-k+1][j] & 2 and grid[i][j-k+1] & 4
                if sides_complete:
                    dp[i+1][j+1][k] = 1
                else:
                    break
    distribution = [(i, dp[:, :, i].sum()) for i in range(1, min(n, m) + 1) if dp[:, :, i].sum() > 0]
    return distribution

def find_line_to_draw(grid):
    n, m = grid.shape
    pos = {}
    for i in range(n):
        for j in range(m):
            for direction, bitmask in [('SUS', 1), ('DREAPTA', 2), ('JOS', 4), ('STANGA', 8)]:
                if grid[i][j] & bitmask == 0:
                    new_grid = grid.copy()
                    new_grid[i][j] |= bitmask
                    new_total = count_squares(new_grid)
                    if new_total not in pos or (i, j) < pos[new_total]:
                        pos[new_total] = (i, j, direction)
    if pos:
        max_squares = max(pos.keys())
        return max_squares, pos[max_squares]
    else:
        return 0, (0, 0, 'NU')

with open('patratele.in', 'r') as fin:
    n, m, t = map(int, fin.readline().strip().split())
    grid = np.array([list(map(int, line.strip().split())) for line in fin.readlines()], dtype=int)

with open('patratele.out', 'w') as fout:
    if t == 1:
        fout.write(f'{count_squares(grid)}\n')
    elif t == 2:
        for length, count in square_distribution(grid):
            fout.write(f'{length} {count}\n')
    elif t == 3:
        max_squares, (i, j, direction) = find_line_to_draw(grid)
        fout.write(f'{max_squares}\n')
        if direction != 'NU':
            fout.write(f'{i+1} {j+1} {direction}\n')
        else:
            fout.write('0 0 NU\n')
```
```
---------- user ----------


Expected program to write result to `patratele.out` and read from `patratele.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def count_squares(grid, n, m):
    total_squares = 0
    for size in range(1, min(n, m) + 1):
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                complete = True
                for k in range(size):
                    if (grid[i+k][j] & 1 == 0) or (grid[i][j+k] & 8 == 0) or (grid[i+k][j+size-1] & 2 == 0) or (grid[i+size-1][j+k] & 4 == 0):
                        complete = False
                        break
                if complete:
                    total_squares += 1
    return total_squares

def square_distribution(grid, n, m):
    distribution = []
    for size in range(1, min(n, m) + 1):
        count = 0
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                complete = True
                for k in range(size):
                    if (grid[i+k][j] & 1 == 0) or (grid[i][j+k] & 8 == 0) or (grid[i+k][j+size-1] & 2 == 0) or (grid[i+size-1][j+k] & 4 == 0):
                        complete = False
                        break
                if complete:
                    count += 1
        if count > 0:
            distribution.append((size, count))
    return distribution

def find_line_to_draw(grid, n, m):
    max_squares, best_pos, best_dir = 0, (), ''
    for i in range(n):
        for j in range(m):
            for dir_code, (di, dj, dir_name) in enumerate([(0, 1, 'SUS'), (1, 0, 'DREAPTA'), (0, -1, 'JOS'), (-1, 0, 'STANGA')]):
                if grid[i][j] & (1 << dir_code) == 0:
                    grid_copy = np.copy(grid)
                    grid_copy[i][j] |= 1 << dir_code
                    if di == -1:
                        grid_copy[i + di][j + dj] |= 4
                    elif di == 1:
                        grid_copy[i][j] |= 4
                    if dj == -1:
                        grid_copy[i + di][j + dj] |= 2
                    elif dj == 1:
                        grid_copy[i][j] |= 2
                    new_count = count_squares(grid_copy, n, m)
                    if new_count > max_squares:
                        max_squares, best_pos, best_dir = new_count, (i, j), dir_name
    if max_squares == 0:
        return 0, (0, 0), 'NU'
    else:
        return max_squares, best_pos, best_dir

with open('patratele.in', 'r') as fin:
    n, m, task = map(int, fin.readline().split())
    grid = np.zeros((n, m), dtype=int)
    for i in range(n):
        grid[i] = np.array(fin.readline().split(), dtype=int)

if task == 1:
    with open('patratele.out', 'w') as fout:
        fout.write(f'{count_squares(grid, n, m)}\n')
elif task == 2:
    distribution = square_distribution(grid, n, m)
    with open('patratele.out', 'w') as fout:
        for size, count in distribution:
            fout.write(f'{size} {count}\n')
elif task == 3:
    max_squares, (i, j), direction = find_line_to_draw(grid, n, m)
    with open('patratele.out', 'w') as fout:
        fout.write(f'{max_squares}\n')
        if direction != 'NU':
            # Need to adjust i and j to be 1-indexed
            fout.write(f'{i + 1} {j + 1} {direction}\n')
        else:
            fout.write('0 0 NU\n')
```
```
---------- user ----------


Expected program to write result to `patratele.out` and read from `patratele.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to check if a square of a given size starting at (i, j) is complete
def is_square_complete(grid, i, j, size):
    for x in range(size):
        if (grid[i][j + x] & 1 == 0) or (grid[i + size - 1][j + x] & 4 == 0):
            return False
    for y in range(size):
        if (grid[i + y][j] & 8 == 0) or (grid[i + y][j + size - 1] & 2 == 0):
            return False
    return True

# Function to count the total number of squares
def count_total_squares(grid, n, m):
    total_squares = 0
    for size in range(1, min(n, m) + 1):
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                if is_square_complete(grid, i, j, size):
                    total_squares += 1
    return total_squares

# Function to get the distribution of squares by size
def get_squares_distribution(grid, n, m):
    distribution = []
    for size in range(1, min(n, m) + 1):
        count = 0
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                if is_square_complete(grid, i, j, size):
                    count += 1
        if count > 0:
            distribution.append((size, count))
    return distribution

# Function to find the best line to draw to maximize the number of squares
def find_best_line(grid, n, m):
    max_squares = count_total_squares(grid, n, m)
    best_move = (0, 0, 'NU')
    for i in range(n):
        for j in range(m):
            for bit, direction in [(1, 'SUS'), (2, 'DREAPTA'), (4, 'JOS'), (8, 'STANGA')]:
                if not (grid[i][j] & bit):
                    new_grid = grid.copy()
                    new_grid[i][j] |= bit
                    if direction == 'SUS' and i > 0:
                        new_grid[i - 1][j] |= 4
                    if direction == 'JOS' and i < n - 1:
                        new_grid[i + 1][j] |= 1
                    if direction == 'STANGA' and j > 0:
                        new_grid[i][j - 1] |= 2
                    if direction == 'DREAPTA' and j < m - 1:
                        new_grid[i][j + 1] |= 8
                    squares = count_total_squares(new_grid, n, m)
                    if squares > max_squares:
                        max_squares = squares
                        best_move = (i + 1, j + 1, direction)
    return max_squares, best_move

# Read input data
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, task = map(int, file.readline().split())
        grid = np.array([list(map(int, line.split())) for line in file])
    return n, m, task, grid

# Write output data
def write_output(filename, result, task):
    with open(filename, 'w') as file:
        if task == 1:
            file.write(f'{result}\n')
        elif task == 2:
            for size, count in result:
                file.write(f'{size} {count}\n')
        elif task == 3:
            max_squares, best_move = result
            file.write(f'{max_squares}\n')
            file.write(f'{best_move[0]} {best_move[1]} {best_move[2]}\n')

# Main function to solve the problem
def solve_problem():
    n, m, task, grid = read_input('patratele.in')
    if task == 1:
        result = count_total_squares(grid, n, m)
    elif task == 2:
        result = get_squares_distribution(grid, n, m)
    elif task == 3:
        result = find_best_line(grid, n, m)
    write_output('patratele.out', result, task)

solve_problem()
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available, which suggests that we're dealing with a system where only the standard library is present, or `numpy` is not installed. Given the memory constraints and the requirement for efficiency, it's best to solve this challenge without relying on external libraries like `numpy`.

We can rewrite the solution using Python's built-in lists and functions. Here's the updated solution without `numpy`:

```python
# Function to check if a square of a given size starting at (i, j) is complete
def is_square_complete(grid, i, j, size):
    for x in range(size):
        if (grid[i][j + x] & 1 == 0) or (grid[i + size - 1][j + x] & 4 == 0):
            return False
    for y in range(size):
        if (grid[i + y][j] & 8 == 0) or (grid[i + y][j + size - 1] & 2 == 0):
            return False
    return True

# Function to count the total number of squares
def count_total_squares(grid, n, m):
    total_squares = 0
    for size in range(1, min(n, m) + 1):
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                if is_square_complete(grid, i, j, size):
                    total_squares += 1
    return total_squares

# Function to get the distribution of squares by size
def get_squares_distribution(grid, n, m):
    distribution = []
    for size in range(1, min(n, m) + 1):
        count = 0
        for i in range(n - size + 1):
            for j in range(m - size + 1):
                if is_square_complete(grid, i, j, size):
                    count += 1
        if count > 0:
            distribution.append((size, count))
    return distribution

# Function to find the best line to draw to maximize the number of squares
def find_best_line(grid, n, m):
    max_squares = count_total_squares(grid, n, m)
    best_move = (0, 0, 'NU')
    for i in range(n):
        for j in range(m):
            for bit, direction in [(1, 'SUS'), (2, 'DREAPTA'), (4, 'JOS'), (8, 'STANGA')]:
                if not (grid[i][j] & bit):
                    new_grid = [row[:] for row in grid]  # Deep copy of the grid
                    new_grid[i][j] |= bit
                    if direction == 'SUS' and i > 0:
                        new_grid[i - 1][j] |= 4
                    if direction == 'JOS' and i < n - 1:
                        new_grid[i + 1][j] |= 1
                    if direction == 'STANGA' and j > 0:
                        new_grid[i][j - 1] |= 2
                    if direction == 'DREAPTA' and j < m - 1:
                        new_grid[i][j + 1] |= 8
                    squares = count_total_squares(new_grid, n, m)
                    if squares > max_squares:
                        max_squares = squares
                        best_move = (i + 1, j + 1, direction)
    return max_squares, best_move

# Read input data
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, task = map(int, file.readline().split())
        grid = [list(map(int, line.split())) for line in file]
    return n, m, task, grid

# Write output data
def write_output(filename, result, task):
    with open(filename, 'w') as file:
        if task == 1:
            file.write(f'{result}\n')
        elif task == 2:
            for size, count in result:
                file.write(f'{size} {count}\n')
        elif task == 3:
            max_squares, best_move = result
            file.write(f'{max_squares}\n')
            file.write(f'{best_move[0]} {best_move[1]} {best_move[2]}\n')

# Main function to solve the problem
def solve_problem():
    n, m, task, grid = read_input('patratele.in')
    if task == 1:
        result = count_total_squares(grid, n, m)
    elif task == 2:
        result = get_squares_distribution(grid, n, m)
    elif task == 3:
        result = find_best_line(grid, n, m)
    write_output('patratele.out', result, task)

solve_problem()
```
