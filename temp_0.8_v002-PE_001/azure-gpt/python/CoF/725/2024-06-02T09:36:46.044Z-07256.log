---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        a, b = map(int, file.readline().split())
    return a, b

def write_output(filename, common_digits, max_number):
    with open(filename, 'w') as file:
        if common_digits:
            file.write(' '.join(map(str, common_digits)) + '\n')
        else:
            file.write('-1\n')
        file.write(str(max_number))

def find_common_digits(a, b):
    digits_a = set(str(a))
    digits_b = set(str(b))
    common = sorted(digits_a & digits_b, key=int)
    return common

def find_largest_number(a, b):
    combined_digits = sorted(str(a) + str(b), reverse=True)
    return int(''.join(combined_digits))

def main():
    a, b = read_input('cifre.in')
    common_digits = find_common_digits(a, b)
    max_number = find_largest_number(a, b)
    write_output('cifre.out', common_digits, max_number)

if __name__ == "__main__":
    main()
```
```

Please note that this code is designed to work with external files named `cifre.in` and `cifre.out`. It reads two numbers from the input file, performs the necessary computations, and writes the result to the output file as per the problem statement. The code avoids using unnecessary memory and utilizes sets and sorting to optimize for both time and memory usage.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Find common digits
digits_a = np.array(list(str(a)), dtype=int)
digits_b = np.array(list(str(b)), dtype=int)
common_digits = np.intersect1d(digits_a, digits_b)

# Find the largest number by combining all digits
all_digits = np.concatenate((digits_a, digits_b))
unique_digits = np.unique(all_digits)
largest_number = int(''.join(map(str, unique_digits[::-1])))

# Write output to file
with open('cifre.out', 'w') as file:
    if common_digits.size > 0:
        file.write(' '.join(map(str, np.sort(common_digits))) + '\n')
    else:
        file.write('-1\n')
    file.write(str(largest_number))
```
```

This revised solution uses numpy's array and set operations to perform the tasks efficiently. It reads data from 'cifre.in', computes the common digits and the largest number formed by all digits, and then writes the output to 'cifre.out' without using `input()` or `print()`.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing numpy is not necessary for this task

# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Find common digits
digits_a = set(str(a))
digits_b = set(str(b))
common_digits = sorted(digits_a.intersection(digits_b), key=int)

# Find the largest number by combining all digits
all_digits = sorted(set(str(a) + str(b)), reverse=True)
largest_number = ''.join(all_digits)

# Write output to file
with open('cifre.out', 'w') as file:
    if common_digits:
        file.write(' '.join(common_digits) + '\n')
    else:
        file.write('-1\n')
    file.write(largest_number)
```
```

This solution does not use numpy to conserve memory. It operates by reading numbers from 'cifre.in', finding common and all unique digits, then writing the results to 'cifre.out', all while adhering to the memory and input/output constraints.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Find common digits
digits_a = set(str(a))
digits_b = set(str(b))
common_digits = sorted(digits_a & digits_b, key=int)

# Find the largest number from all distinct digits
all_digits = sorted(set(str(a) + str(b)), reverse=True)
largest_number = ''.join(all_digits)

# Write output to file
with open('cifre.out', 'w') as file:
    if common_digits:
        file.write(' '.join(common_digits) + '\n')
    else:
        file.write('-1\n')
    file.write(largest_number)
```
```

This code avoids using numpy and instead uses built-in Python data structures and functions to read the input from `cifre.in`, process the data to find common digits and the largest number, and write the results to `cifre.out`.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Convert numbers to sets of digits
digits_a = set(str(a))
digits_b = set(str(b))

# Find common digits
common_digits = sorted(digits_a & digits_b, key=int)

# Construct the largest number from all digits
all_digits = sorted(set(str(a) + str(b)), reverse=True)
largest_number = int(''.join(all_digits))

# Write output to file
with open('cifre.out', 'w') as file:
    if common_digits:
        file.write(' '.join(map(str, common_digits)) + '\n')
    else:
        file.write('-1\n')
    file.write(str(largest_number))
```
```

This code reads two integers from 'cifre.in', finds common digits and the largest number that can be constructed from all the digits of a and b, and writes the output to 'cifre.out'. It does not use any external libraries and keeps memory usage minimal by leveraging Python's built-in set operations and string manipulation.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Get the unique digits of a and b as strings
digits_a = set(str(a))
digits_b = set(str(b))

# Find common digits in sorted order
common_digits = sorted(digits_a.intersection(digits_b), key=int)

# Combine all digits of a and b and sort them in descending order
all_digits = sorted(set(str(a) + str(b)), reverse=True)

# Convert common digits list to a string, space-separated
common_digits_str = ' '.join(common_digits) if common_digits else '-1'

# Convert all digits list to a string without any spaces
largest_number_str = ''.join(all_digits)

# Write output to file
with open('cifre.out', 'w') as file:
    file.write(common_digits_str + '\n')
    file.write(largest_number_str)
```
```

This revised solution reads from 'cifre.in' and writes to 'cifre.out', addressing the problem without the use of `input()` or `print()`. It processes the input to find common digits and the largest number composed of all digits from both numbers a and b, then writes the results to the output file.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Solution without using numpy and other external libraries

# Read input from file
with open('cifre.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Convert numbers to sets of their digits
digits_a = set(str(a))
digits_b = set(str(b))

# Find common digits
common_digits = sorted(digits_a.intersection(digits_b), key=int)

# Construct the largest number from all distinct digits
all_digits = sorted(set(str(a) + str(b)), reverse=True)
largest_number = ''.join(all_digits)

# Write output to file
with open('cifre.out', 'w') as file:
    if common_digits:
        file.write(' '.join(str(digit) for digit in common_digits) + '\n')
    else:
        file.write('-1\n')
    file.write(largest_number)
```
```

This solution reads the input numbers from 'cifre.in', finds common digits, creates the largest number possible from all digits of both numbers, and writes the output to 'cifre.out' without using numpy or other external libraries. It adheres to the memory constraints and avoids using `input()` and `print()`.
