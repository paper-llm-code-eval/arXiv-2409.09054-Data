---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `cladiri.in` and write to `cladiri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Institutul de Fizică a Pământului studiază efectele unui potențial cutremur folosind simulări computerizate. Harta plană a clădirilor de pe un teritoriu oarecare este reprezentată folosind coordonatele GPS în plan, longitudine și latitudine, față de un reper considerat de coordonate ($0, 0$), ca în figura de mai jos.

Fiecare dintre clădirile aflate pe hartă, au două coordonate GPS, (Longitudine, Latitudine) și un Grad de rezistență la cutremure.
Un cutremur se poate produce în orice punct de coordonate de pe hartă, numit centrul seismului și are o anumită intensitate. Unda de șoc se propagă sub forma unor pătrate concentrice cu centrul seismului, numite nivele (nivelul $0$ reprezintă centrul seismului, nivelul $1$ primul pătrat concentric, nivelul $2$ al doilea pătrat concentric și așa mai departe). Intensitatea slăbește la fiecare pătrat concentric cu centrul seismului cu câte o unitate. Clădirile sunt afectate de cutremur doar dacă gradul lor de rezistență la cutremur este mai mic sau egal cu intensitatea cutremurului în poziția clădirii.

~[cladiri.png]

# Cerință

Scrieți un program care să citească coordonatele centrului seismului și intensitatea sa în acel punct, precum și coordonatele clădirilor și gradul lor de rezistență la cutremur, și apoi să determine numărul $N$ total de clădiri afectate; numărul $M$ maxim de clădiri afectate pe un nivel; numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Date de intrare

Fișierul de intrare `cladiri.in` conține pe prima linie, trei numere naturale $Long \ Lat \ Intensitate$, separate prin câte un spațiu, reprezentând coordonatele centrului seismului și respectiv intensitatea sa. Pe fiecare dintre următoarele linii, până la sfârșitul fișierului, se află câte trei numere naturale $Long \ Lat \ Grad$, separate prin câte un spațiu, reprezentând coordonatele unei clădiri, respectiv gradul de rezistență la cutremur.

# Date de ieșire

Fișierul de ieșire `cladiri.out` va conține trei linii. Pe prima linie se va scrie numărul natural $N$ reprezentând numărul total de clădiri afectate. Pe a doua linie se va scrie numărul natural $M$ reprezentând numărul maxim de clădiri afectate pe un nivel. Pe a treia linie se vor scrie numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Restricții și precizări

* $0 \leq$ Long, Lat, Grad, Intensitate $\leq 10 \ 000$;
* $0 <$ număr clădiri $\leq 100 \ 000$;
* În centrul seismului se pot afla clădiri.
* Nu există mai multe clădiri cu aceleași coordonate.
* $52$% din punctaj se poate obţine pe teste de intrare cu $0 \leq Long, Lat, Grad, Intensitate \leq 100$
* se acordă punctaje parţiale din punctajul acordat pe fiecare test, astfel: $25$% pentru cerinţa a), $25$% pentru cerinţa b), respectiv $50$% pentru cerinţa c).

---

Example:
`cladiri.in`
```
12 7 11
10 9 2
10 7 3
13 5 1
8 11 4
8 7 6
15 4 3
15 9 10
13 10 1
16 8 4
```

`cladiri.out`
```
8
3
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Define the Earthquake class to hold earthquake data and calculate affected buildings
class Earthquake:
    def __init__(self, center_x, center_y, intensity):
        self.center_x = center_x
        self.center_y = center_y
        self.intensity = intensity
        # Dictionaries to keep track of affected buildings and levels
        self.affected_buildings_by_level = {}
        self.total_affected = 0

    def add_building(self, building_x, building_y, resistance):
        # Calculate the distance from the earthquake center to the building
        level = max(abs(building_x - self.center_x), abs(building_y - self.center_y))
        # Determine if the building is affected
        if level <= self.intensity and self.intensity - level >= resistance:
            self.total_affected += 1
            if level in self.affected_buildings_by_level:
                self.affected_buildings_by_level[level] += 1
            else:
                self.affected_buildings_by_level[level] = 1

    def get_results(self):
        max_affected = max(self.affected_buildings_by_level.values())
        max_affected_levels = sorted([level for level, count in self.affected_buildings_by_level.items() if count == max_affected])
        return self.total_affected, max_affected, max_affected_levels
        
# Open input and output files
with open('cladiri.in', 'r') as fin, open('cladiri.out', 'w') as fout:
    # Read the earthquake data
    center_x, center_y, intensity = map(int, fin.readline().split())
    earthquake = Earthquake(center_x, center_y, intensity)

    # Read and process buildings
    for line in fin:
        building_x, building_y, resistance = map(int, line.split())
        earthquake.add_building(building_x, building_y, resistance)

    # Get results and write to the output file
    total_affected, max_affected, max_affected_levels = earthquake.get_results()
    fout.write(f"{total_affected}\n{max_affected}\n{' '.join(map(str, max_affected_levels))}\n")
```

This solution reads from `cladiri.in`, process the data to determine the affected buildings and the levels with the most affected buildings, then writes the results to `cladiri.out`. It does not use unnecessary memory and should be efficient in both time and memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` library is not available. However, upon reviewing the code, I see that `numpy` is actually not being used at all. Therefore, the solution is not to fix the missing `numpy` library, but rather to remove the unnecessary import statement.

Let's rewrite the entire solution without the `numpy` import:

```python
# Define the Earthquake class to hold earthquake data and calculate affected buildings
class Earthquake:
    def __init__(self, center_x, center_y, intensity):
        self.center_x = center_x
        self.center_y = center_y
        self.intensity = intensity
        # Dictionaries to keep track of affected buildings and levels
        self.affected_buildings_by_level = {}
        self.total_affected = 0

    def add_building(self, building_x, building_y, resistance):
        # Calculate the distance from the earthquake center to the building
        level = max(abs(building_x - self.center_x), abs(building_y - self.center_y))
        # Determine if the building is affected
        if level <= self.intensity and self.intensity - level >= resistance:
            self.total_affected += 1
            if level in self.affected_buildings_by_level:
                self.affected_buildings_by_level[level] += 1
            else:
                self.affected_buildings_by_level[level] = 1

    def get_results(self):
        max_affected = max(self.affected_buildings_by_level.values(), default=0)
        max_affected_levels = sorted([level for level, count in self.affected_buildings_by_level.items() if count == max_affected])
        return self.total_affected, max_affected, max_affected_levels
        
# Open input and output files
with open('cladiri.in', 'r') as fin, open('cladiri.out', 'w') as fout:
    # Read the earthquake data
    center_x, center_y, intensity = map(int, fin.readline().split())
    earthquake = Earthquake(center_x, center_y, intensity)

    # Read and process buildings
    for line in fin:
        building_x, building_y, resistance = map(int, line.split())
        earthquake.add_building(building_x, building_y, resistance)

    # Get results and write to the output file
    total_affected, max_affected, max_affected_levels = earthquake.get_results()
    fout.write(f"{total_affected}\n{max_affected}\n{' '.join(map(str, max_affected_levels))}\n")
```

This updated solution should work correctly without any reliance on external libraries, thereby fixing the program exit code 1 issue.
