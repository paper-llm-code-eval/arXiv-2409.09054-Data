---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ech.in` and write to `ech.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Numim _număr echilibrat_ un număr natural pentru care suma cifrelor de pe poziții pare este egală cu suma cifrelor de pe poziții impare.
De exemplu numărul $13552$ este _echilibrat_, pentru că $1+5+2=8=3+5$.

# Cerință

Dat fiind un număr natural $N$ să se determine cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Date de intrare

Fișierul de intrare `ech.in` conține pe prima linie numărul natural $N$.

# Date de ieșire

Fișierul de ieșire `ech.out` va conține o singură linie pe care va fi scris cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Restricții și precizări

* Numărul $N$ are cel mult $23$ de cifre.
* Pentru teste valorând $40\%$ din punctaj, $N$ are cel mult $18$ cifre.

---

Example:
`ech.in`
```
99
```

`ech.out`
```
110
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def balanced_number(n):
    while True:
        n += 1
        digits = np.array([int(d) for d in str(n)], dtype=np.int8)
        if sum(digits[::2]) == sum(digits[1::2]):
            return n

with open('ech.in', 'r') as file:
    n = int(file.readline().strip())

balanced_n = balanced_number(n)

with open('ech.out', 'w') as file:
    file.write(str(balanced_n))
```
```
---------- user ----------


Expected program to write result to `ech.out` and read from `ech.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def find_next_balanced_number(n):
    while True:
        n += 1
        digits = np.array([int(d) for d in str(n)], dtype=np.int8)
        if sum(digits[::2]) == sum(digits[1::2]):
            return n

with open('ech.in', 'r') as file:
    n = int(file.readline().strip())

next_balanced = find_next_balanced_number(n)

with open('ech.out', 'w') as file:
    file.write(str(next_balanced))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the `numpy` module is not available in the execution environment, and since the memory constraint is quite strict, converting the digits to a `numpy` array might not be the most memory-efficient approach. Let's rewrite the solution without using `numpy` or any other external libraries, strictly utilizing built-in Python features to optimize for both time and memory usage.

Here's the revised solution:

```python
def find_next_balanced_number(n):
    while True:
        n += 1
        digits = [int(d) for d in str(n)]
        if sum(digits[::2]) == sum(digits[1::2]):
            return n

with open('ech.in', 'r') as file:
    n = int(file.readline().strip())

next_balanced = find_next_balanced_number(n)

with open('ech.out', 'w') as file:
    file.write(str(next_balanced))
```
