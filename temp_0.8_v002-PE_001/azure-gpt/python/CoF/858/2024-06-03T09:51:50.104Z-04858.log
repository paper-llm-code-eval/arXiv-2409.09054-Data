---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ech.in` and write to `ech.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Numim _număr echilibrat_ un număr natural pentru care suma cifrelor de pe poziții pare este egală cu suma cifrelor de pe poziții impare.
De exemplu numărul $13552$ este _echilibrat_, pentru că $1+5+2=8=3+5$.

# Cerință

Dat fiind un număr natural $N$ să se determine cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Date de intrare

Fișierul de intrare `ech.in` conține pe prima linie numărul natural $N$.

# Date de ieșire

Fișierul de ieșire `ech.out` va conține o singură linie pe care va fi scris cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Restricții și precizări

* Numărul $N$ are cel mult $23$ de cifre.
* Pentru teste valorând $40\%$ din punctaj, $N$ are cel mult $18$ cifre.

---

Example:
`ech.in`
```
99
```

`ech.out`
```
110
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_balanced(number):
    digits = [int(d) for d in str(number)]
    even_sum = np.sum(digits[1::2])
    odd_sum = np.sum(digits[::2])
    return even_sum == odd_sum

def next_balanced_number(N):
    while True:
        N += 1
        if is_balanced(N):
            return N

def main():
    with open('ech.in', 'r') as file:
        N = int(file.readline().strip())

    next_balanced = next_balanced_number(N)

    with open('ech.out', 'w') as file:
        file.write(str(next_balanced))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ech.out` and read from `ech.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def next_balanced_number(N):
    while True:
        N += 1
        digits = [int(d) for d in str(N)]
        even_sum = np.sum(digits[::2])
        odd_sum = np.sum(digits[1::2])
        if even_sum == odd_sum:
            return N

# Read the input number from 'ech.in'
with open('ech.in', 'r') as file:
    N = int(file.readline().strip())

# Find the next balanced number
next_balanced = next_balanced_number(N)

# Write the result to 'ech.out'
with open('ech.out', 'w') as file:
    file.write(str(next_balanced))
```
```
---------- user ----------


Expected program to write result to `ech.out` and read from `ech.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def get_next_balanced(num):
    while True:
        num += 1
        digits = [int(digit) for digit in str(num)]
        if sum(digits[::2]) == sum(digits[1::2]):
            return num

# Read from 'ech.in'
with open('ech.in', 'r') as file:
    N = int(file.readline())

# Find the next balanced number and write to 'ech.out'
with open('ech.out', 'w') as file:
    file.write(f"{get_next_balanced(N)}\n")
```
