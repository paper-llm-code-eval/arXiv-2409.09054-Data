---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block

import numpy as np

# Function to calculate the Greatest Common Divisor (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read input data
with open('tort.in', 'r') as file:
    M, N = map(int, file.readline().strip().split())

# Calculate the size of the square (GCD of M and N)
L = gcd(M, N)

# Calculate the minimum number of portions
portions = (M // L) * (N // L)

# Write output data
with open('tort.out', 'w') as file:
    file.write(f'{portions} {L}\n')
```

Please make sure the `tort.in` file exists in the same directory as this Python script before running it. The script will create the `tort.out` file with the correct output.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the environment where the code is being executed. Since the problem doesn't actually require any specific `numpy` functionality, we can remove the import statement and implement the solution without using `numpy`. Here's the corrected solution:

```python
# markdown code block

# Function to calculate the Greatest Common Divisor (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read input data
with open('tort.in', 'r') as file:
    M, N = map(int, file.readline().strip().split())

# Calculate the size of the square (GCD of M and N)
L = gcd(M, N)

# Calculate the minimum number of portions
portions = (M // L) * (N // L)

# Write output data
with open('tort.out', 'w') as file:
    file.write(f'{portions} {L}\n')
```

This version of the solution should work correctly without the need for `numpy` or any other external library. Make sure to have the `tort.in` file with the appropriate input data in the same directory as the script, and after execution, it will generate the `tort.out` file with the correct answer.
