---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from math import gcd

def main():
    # Read the dimensions of the rectangle from tort.in
    with open('tort.in', 'r') as f:
        M, N = map(int, f.readline().split())

    # Calculate the greatest common divisor of M and N
    L = gcd(M, N)

    # Calculate the number of portions
    portions = (M // L) * (N // L)

    # Write the results to tort.out
    with open('tort.out', 'w') as f:
        f.write(f'{portions} {L}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here is the corrected code that reads from `tort.in` and writes to `tort.out` without using `input()` or `print()`. The solution uses the `gcd` (greatest common divisor) function from the `math` module to find the size of the largest square that can be used to divide the rectangle into equal portions.

```markdown
```python
from math import gcd

def main():
    # Read the dimensions of the rectangle from tort.in
    with open('tort.in', 'r') as file:
        M, N = map(int, file.readline().split())
    
    # Calculate the greatest common divisor of M and N
    L = gcd(M, N)
    
    # Calculate the number of portions
    portions = (M // L) * (N // L)
    
    # Write the results to tort.out
    with open('tort.out', 'w') as file:
        file.write('{} {}\n'.format(portions, L))

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here is the revised solution in Python, which adheres to the constraints:

```markdown
```python
from math import gcd

# Open the input file
with open('tort.in', 'r') as file_in:
    # Read the dimensions M and N from the file
    M, N = map(int, file_in.readline().split())

# Compute the greatest common divisor of M and N
L = gcd(M, N)

# Calculate the number of portions
portions = (M * N) // (L * L)

# Open the output file and write the result
with open('tort.out', 'w') as file_out:
    file_out.write(f'{portions} {L}\n')
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I apologize for the confusion. The solution provided meets the requirements specified, as it reads from `tort.in` and writes to `tort.out` without using `input()` or `print()`. Here is the solution restated in a markdown code block for clarity:

```python
from math import gcd

# Open the input file
with open('tort.in', 'r') as file_in:
    # Read the dimensions M and N from the file
    M, N = map(int, file_in.readline().split())

# Compute the greatest common divisor of M and N
L = gcd(M, N)

# Calculate the number of portions
portions = (M * N) // (L * L)

# Open the output file and write the result
with open('tort.out', 'w') as file_out:
    file_out.write(f'{portions} {L}\n')
```

This code snippet will read the dimensions of the rectangular cake from the file `tort.in`, then compute the number of square portions and their size, and finally write these results to the file `tort.out`. No `input()` or `print()` functions are used in this process.
