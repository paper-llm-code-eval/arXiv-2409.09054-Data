---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to compute the Greatest Common Divisor (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read the dimensions M and N from the input file
with open('tort.in', 'r') as fin:
    M, N = map(int, fin.readline().split())

# Calculate the size L of the square portions using the GCD of M and N
L = gcd(M, N)

# Calculate the minimum number of square portions
num_portions = (M // L) * (N // L)

# Write the results to the output file
with open('tort.out', 'w') as fout:
    fout.write(f"{num_portions} {L}\n")
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to compute the Greatest Common Divisor (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read the dimensions M and N from the input file
with open('tort.in', 'r') as fin:
    M, N = map(int, fin.readline().split())

# Calculate the size L of the square portions using the GCD of M and N
L = gcd(M, N)

# Calculate the minimum number of square portions
num_portions = (M // L) * (N // L)

# Write the results to the output file
with open('tort.out', 'w') as fout:
    fout.write(f"{num_portions} {L}\n")
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Sure, here is the entire solution with necessary fixes, ensuring that the program reads from `tort.in` and writes to `tort.out`, without using `input()` or `print()`:

```python
# Function to compute the Greatest Common Divisor (GCD)
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read the dimensions M and N from the input file
with open('tort.in', 'r') as fin:
    M, N = map(int, fin.readline().split())

# Calculate the size L of the square portions using the GCD of M and N
L = gcd(M, N)

# Calculate the minimum number of square portions
num_portions = (M // L) * (N // L)

# Write the results to the output file
with open('tort.out', 'w') as fout:
    fout.write("{} {}\n".format(num_portions, L))
```
