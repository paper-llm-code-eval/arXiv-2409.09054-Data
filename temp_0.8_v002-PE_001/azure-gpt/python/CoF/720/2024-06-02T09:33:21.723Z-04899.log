---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def main():
    with open('tort.in', 'r') as infile:
        M, N = map(int, infile.readline().split())
        
    L = gcd(M, N)
    num_portions = (M * N) // (L * L)
    
    with open('tort.out', 'w') as outfile:
        outfile.write(f"{num_portions} {L}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# We need to calculate the greatest common divisor (GCD) of the two dimensions
# to find the largest square size (L) that can fit into both dimensions.
# Then, we can calculate the number of portions by dividing the area of the rectangle (M * N)
# by the area of the square (L * L).

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def main():
    with open('tort.in', 'r') as infile:
        M, N = map(int, infile.readline().split())
        
    L = gcd(M, N)
    num_portions = (M * N) // (L * L)
    
    with open('tort.out', 'w') as outfile:
        outfile.write(f"{num_portions} {L}")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# The solution does not use any external libraries like numpy, as they are not necessary
# and would likely cause memory usage to exceed the 8MB limit.

def gcd(a, b):
    # Function to calculate the greatest common divisor of a and b
    while b:
        a, b = b, a % b
    return a

def main():
    # Open the 'tort.in' file to read the dimensions of the rectangular cake
    with open('tort.in', 'r') as infile:
        M, N = map(int, infile.readline().split())
    
    # Calculate the size of the largest square that can fit into both dimensions
    L = gcd(M, N)
    # Calculate the number of portions by dividing the area of the rectangle (M * N)
    # by the area of the square (L * L)
    num_portions = (M * N) // (L * L)
    
    # Open the 'tort.out' file to write the number of portions and the size of the squares
    with open('tort.out', 'w') as outfile:
        outfile.write("{} {}\n".format(num_portions, L))

# Check to make sure the script is not being imported, and if not, execute main
if __name__ == "__main__":
    main()
```
