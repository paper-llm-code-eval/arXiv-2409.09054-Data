---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `magic.in` and write to `magic.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Rămaşi singuri în pădure, Hansel şi Grettel, ştiu că singura lor şansă de supravieţuire este să găsească şi să intre în Castelul de Turtă Dulce. Poarta castelului este închisă şi pentru a intra este nevoie de un cuvânt magic şi de un număr fermecat.

Zâna cea Bună îi vede pe copii şi pentru că vrea să–i ajute le spune:
„Mergeţi tot înainte, iar în drumul vostru o să întâlniţi copaci pe a căror trunchiuri sunt scrise caractere reprezentând litere sau cifre. Cuvântul magic este format din toate caracterele literă în ordinea în care apar, dar scrise toate cu majuscule. Numărul fermecat este cel mai mic număr cu cifre distincte care se poate forma din caracterele cifră.”

# Cerință

Pentru a-i ajuta pe Hansel şi Grettel să intre în Castelul de Turtă Dulce, scrieţi un program care citeşte un număr natural $n$, apoi $n$ caractere şi determină:

* cuvântul magic;
* numărul fermecat;

# Date de intrare


Pe prima linie a fișierului de intrare `magic.in` se găseste un număr natural $n$, reprezentând numărul de caractere scrise pe copaci. Pe cea de a doua linie sunt $n$ caractere separate prin câte un spaţiu, reprezentând caracterele scrise pe copaci.


# Date de ieșire


Fișierul de ieșire `magic.out` va conține două linii:

* pe prima linie se va scrie un şir de litere mari, reprezentând cuvântul magic;
* pe a doua linie se va scrie un număr natural cu cifre distincte, reprezentând numărul fermecat.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* Caracterele sunt doar cifre sau litere mici ale alfabetului englez.
* Printre cele $n$ caractere se află întotdeauna cel puțin o literă şi cel puţin o cifră.
* Pe fiecare copac este scris un singur caracter.
* Numărul magic începe întotdeauna cu o cifră diferită de zero.
* Pentru rezolvarea cerinţei a) se acordă 40% din punctaj, pentru cerinţa b) 60% din punctaj.

---

Example:
`magic.in`
```
6
c 2 5 5 b 2
```

`magic.out`
```
CB
25
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read contents from input file
with open('magic.in', 'r') as file:
    n = int(file.readline().strip())
    characters = file.readline().strip().split()

# Initialize empty lists for letters and digits
letters = []
digits = set()

# Identify letters and digits and append them to respective lists
for char in characters:
    if char.isalpha():
        letters.append(char.upper())
    elif char.isdigit():
        digits.add(char)

# Convert letters list to string to form the magic word
magic_word = ''.join(letters)

# Sort the digits to form the smallest number with distinct digits
sorted_digits = sorted(digits)
magic_number = ''.join(sorted_digits)

# If the first digit is '0', swap it with the next non-zero digit
if sorted_digits[0] == '0':
    for i in range(1, len(sorted_digits)):
        if sorted_digits[i] != '0':
            sorted_digits[0], sorted_digits[i] = sorted_digits[i], sorted_digits[0]
            break
magic_number = ''.join(sorted_digits)

# Write results to output file
with open('magic.out', 'w') as file:
    file.write(f"{magic_word}\n{magic_number}")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1, along with the error message `ModuleNotFoundError: No module named 'numpy'`, indicates that the `numpy` module is not installed or not found in the Python environment where the code is running. Since the challenge doesn't actually require any functionality from `numpy`, I will remove the `import numpy as np` line and rewrite the entire solution without using any external libraries.

Here is the fixed solution:

```python
# Read contents from input file
with open('magic.in', 'r') as file:
    n = int(file.readline().strip())
    characters = file.readline().strip().split()

# Initialize empty lists for letters and digits
letters = []
digits = []

# Identify letters and digits and append them to respective lists
for char in characters:
    if char.isalpha():
        letters.append(char.upper())
    elif char.isdigit():
        digits.append(char)

# Convert letters list to string to form the magic word
magic_word = ''.join(letters)

# Sort the digits to form the smallest number with distinct digits
digits = sorted(set(digits))
magic_number = ''.join(digits)

# If the first digit is '0', swap it with the next non-zero digit
if digits[0] == '0' and len(digits) > 1:
    digits[0], digits[1] = digits[1], digits[0]
    magic_number = ''.join(digits)

# Write results to output file
with open('magic.out', 'w') as file:
    file.write(f"{magic_word}\n{magic_number}\n")
```

This solution reads from the `magic.in` file, processes the characters according to the specifications, and writes the results to the `magic.out` file. It does not use external libraries, so it should not encounter any import errors.
