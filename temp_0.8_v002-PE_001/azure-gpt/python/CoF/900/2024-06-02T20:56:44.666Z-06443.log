---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `castel.in` and write to `castel.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arheologii au descoperit pe un platou muntos greu accesibil ruinele unui castel medieval, pe care l-au fotografiat  din elicopter, obţinând harta digitizată a acestuia. Harta este memorată sub forma unui tablou bidimensional $H$, compus din $N \cdot N$ pătrate cu latura egală cu unitatea, având ca elemente numere naturale între $0$ și $15$, care codifică  forma pereţilor fiecărui pătrat unitar. Dacă scriem numărul natural $H[i][j]$ în baza $2$, folosind exact $4$ cifre binare, fiecare bit dă informații despre unul dintre pereții posibil de construit pe fiecare latură a pătratului unitar din poziția $(i,j)$, astfel:

* dacă bitul de pe poziția $0$ are valoarea $1$, atunci există perete pe latura vestică (latura din stânga)
* dacă bitul de pe poziția $1$ are valoarea $1$, atunci există perete pe latura sudică (latura de jos)
* dacă bitul de pe poziția $2$ are valoarea $1$, atunci există perete pe latura estică (latura din dreapta)
* dacă bitul de pe poziția $3$ are valoarea $1$, atunci există perete pe latura nordică (latura de sus)
* un bit de valoare $0$ indică lipsa peretelui corespunzător acestuia

Pentru un număr scris în baza $2$, numerotarea cifrelor începe cu poziția $0$, de la dreapta la stânga. Castelul este interesant deoarece, pentru realizarea unei mai bune apărări, camerele ce-l compun sunt construite fie independent, fie una în interiorul alteia. Orice camera este construită la o distanţă de cel puţin o unitate faţă de zidul ce împrejmuieşte castelul sau faţă de pereţii altor camere. 

Folosind harta, arheologii doresc să afle informaţii privind numărul camerelor şi camera de arie maximă. Prin arie a unei camere se înţelege numărul pătratelor unitate cuprinse în interiorul pereților aceasteia, fără a socoti ariile camerelor construite în interiorul ei.


# Cerință


Cunoscând codificarea hărţii castelului, să se determine:
1. numărul total al camerelor din castel
2. aria maximă a unei camere
3. coordonatele colţurilor din stânga-sus, respectiv dreapta-jos a camerei cu aria maximă. Dacă există mai multe camere având aceeaşi arie maximă, atunci se vor afişa coordonatele camerei având colţul din stânga-sus $({lin}_1, {col}_1)$ cu ${lin}_1$ minimă, iar la linii egale pe aceea cu ${col}_1$ minimă.

# Date de intrare


Datele de intrare se citesc din fişierul ```castel.in```, care are următoarea structură:

* Pe prima linie se află numărul natural $C$, care poate fi egal cu $1, 2$ sau $3$, în funcţie de cerinţa ce trebuie rezolvată
* Pe linia următoare se află numărul natural $N$, reprezentând dimensiunea hărţii
* Pe următoarele $N$ linii se găsesc câte $N$ numere naturale din intervalul $[0,15]$, separate prin câte un spaţiu, reprezentând harta castelului.


# Date de ieșire


Datele de ieşire se vor scrie în fişierul ```castel.out```, astfel:

* Dacă $C = 1$, pe prima linie se va scrie numărul total al camerelor din castel
* Dacă $C = 2$, pe prima linie se va scrie aria maximă a unei camere din castel
* Dacă $C = 3$, pe prima linie se vor scrie $4$ numere naturale ${lin}_1 \ {col}_1 \ {lin}_2 \ {col}_2$, separate prin câte un spaţiu, reprezentând coordonatele colțurilor din stânga-sus, respectiv dreapta-jos ale camerei de arie maximă.


# Restricții și precizări

* $2 \leq N \leq 100$;
* Se garantează că în castel există cel puţin o cameră.
* Se acordă $10$ puncte din oficiu.

| $C$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 50      |
| $3$ | 20      |

---

Example:
`castel.in`
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```

`castel.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def parse_file(filepath):
    with open(filepath, 'r') as file:
        lines = file.readlines()
    C = int(lines[0].strip())
    N = int(lines[1].strip())
    grid = np.array([list(map(int, line.split())) for line in lines[2:]])
    return C, N, grid

def count_rooms(N, grid):
    def get_neighbors(x, y):
        neighbors = []
        if x > 0 and not grid[x-1][y] & 1:
            neighbors.append((x-1, y))
        if y > 0 and not grid[x][y-1] & 2:
            neighbors.append((x, y-1))
        if x < N-1 and not grid[x][y] & 4:
            neighbors.append((x+1, y))
        if y < N-1 and not grid[x][y+1] & 8:
            neighbors.append((x, y+1))
        return neighbors
    
    visited = np.zeros_like(grid, dtype=bool)
    room_count = 0
    max_area = 0
    max_room_coords = (0, 0, 0, 0)
    
    for i in range(N):
        for j in range(N):
            if not visited[i][j]:
                queue = [(i, j)]
                visited[i][j] = True
                room_area = 0
                top_left = (i, j)
                bottom_right = (i, j)
                
                while queue:
                    x, y = queue.pop(0)
                    room_area += 1
                    top_left = (min(top_left[0], x), min(top_left[1], y))
                    bottom_right = (max(bottom_right[0], x), max(bottom_right[1], y))
                    for neighbor in get_neighbors(x, y):
                        nx, ny = neighbor
                        if not visited[nx][ny]:
                            visited[nx][ny] = True
                            queue.append(neighbor)
                
                if room_area > max_area:
                    max_area = room_area
                    max_room_coords = top_left + bottom_right
                
                room_count += 1
    
    return room_count, max_area, max_room_coords

def write_output(filepath, C, result):
    with open(filepath, 'w') as file:
        if C == 1:
            file.write(f"{result[0]}\n")
        elif C == 2:
            file.write(f"{result[1]}\n")
        elif C == 3:
            file.write(f"{' '.join(map(str, result[2]))}\n")

def solve_castle_challenge():
    input_file = 'castel.in'
    output_file = 'castel.out'
    C, N, grid = parse_file(input_file)
    result = count_rooms(N, grid)
    write_output(output_file, C, result)

solve_castle_challenge()
```

This code reads the problem input from `castel.in`, determines the number of rooms, the maximum room area, and the coordinates of the room with the maximum area, and writes the appropriate results to `castel.out` based on the value of $C$ in the input file. It uses NumPy for efficient array management and minimal memory footprint. The `count_rooms` function performs BFS on the grid to identify the rooms and calculate their areas, keeping track of the maximum area and its coordinates. The main function, `solve_castle_challenge`, orchestrates the reading, processing, and writing of data.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
