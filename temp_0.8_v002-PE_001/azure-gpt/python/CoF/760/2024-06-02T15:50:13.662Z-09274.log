---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read data from 'telecabina.in'
with open('telecabina.in', 'r') as file:
    data = file.readlines()

n = int(data[0])
stations = np.array([list(map(int, line.split())) for line in data[1:]])

# Calculate the number of people arriving at the city (the last station)
people_count = np.sum(stations[:-1, 1])

# Calculate fuel consumption and the number of special stations
fuel_consumption = 0
special_stations = 0
for i in range(n - 1):
    altitude_difference = stations[i+1, 0] - stations[i, 0]
    if altitude_difference > 0:
        # Climb
        fuel_consumption += 3 * altitude_difference
    else:
        # Descent
        fuel_consumption += -altitude_difference
    # Check if current station is special station
    if i != 0 and (altitude_difference > 0) != (stations[i, 0] - stations[i-1, 0] > 0):
        special_stations += 1

# Write data to 'telecabina.out'
with open('telecabina.out', 'w') as file:
    file.write(f"{people_count}\n")
    file.write(f"{fuel_consumption}\n")
    file.write(f"{special_stations}\n")
```

This code should solve the problem efficiently, utilizing numpy for fast array operations and keeping the memory usage within the given constraints.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the current environment. Since the problem requires optimizing for memory and potentially time, it's important to either use a different approach that doesn't rely on third-party libraries like `numpy` or ensure that the environment where the code is executed has `numpy` installed. 

Given the constraints of the problem and the error message indicating that `numpy` is not available, I will provide a solution that does not use `numpy` or any other external libraries, relying only on built-in Python functionality.

Here is the complete solution using only built-in Python features:

```python
# Read data from 'telecabina.in'
with open('telecabina.in', 'r') as file:
    n = int(file.readline())
    stations = [tuple(map(int, line.split())) for line in file]

# Calculate the number of people arriving at the city (the last station)
people_count = sum([people for altitude, people in stations[:-1]])

# Calculate fuel consumption and the number of special stations
fuel_consumption = 0
special_stations = 0
previous_altitude = stations[0][0]

for i in range(1, n):
    altitude_difference = stations[i][0] - previous_altitude
    if altitude_difference > 0:
        # Climb
        fuel_consumption += 3 * altitude_difference
    else:
        # Descent
        fuel_consumption += -altitude_difference

    # Check if current station is a special station
    if i > 1 and (altitude_difference > 0) != (previous_altitude - stations[i-2][0] > 0):
        special_stations += 1

    previous_altitude = stations[i][0]

# Write data to 'telecabina.out'
with open('telecabina.out', 'w') as file:
    file.write(f"{people_count}\n")
    file.write(f"{fuel_consumption}\n")
    file.write(f"{special_stations}\n")
```

This code reads the input from `telecabina.in`, performs the necessary calculations, and writes the output to `telecabina.out`, all while avoiding the use of `numpy` and adhering to the constraints of the problem.
