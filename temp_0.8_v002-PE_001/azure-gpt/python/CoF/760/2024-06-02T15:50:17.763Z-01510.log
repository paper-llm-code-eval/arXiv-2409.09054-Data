---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read from input file
with open('telecabina.in', 'r') as file:
    n = int(file.readline().strip())
    stations = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Initialize variables
people_at_city = 0
fuel_consumption = 0
special_stations_count = 0
climbing = True if stations[1, 0] > stations[0, 0] else False

# Calculate number of people that arrive at the city, fuel consumption and special stations
for i in range(1, n):
    people_at_city += stations[i - 1, 1]
    altitude_difference = abs(stations[i, 0] - stations[i - 1, 0])
    
    # Check direction of movement and calculate fuel consumption
    if stations[i, 0] > stations[i - 1, 0]:
        # Climbing
        fuel_consumption += altitude_difference * 3
        if not climbing:
            special_stations_count += 1
            climbing = True
    else:
        # Descending
        fuel_consumption += altitude_difference * 1
        if climbing:
            special_stations_count += 1
            climbing = False

# Write to output file
with open('telecabina.out', 'w') as file:
    file.write(f"{people_at_city}\n")
    file.write(f"{fuel_consumption}\n")
    file.write(f"{special_stations_count}\n")
```

This solution reads from `telecabina.in`, processes the data to calculate the number of people arriving at the city, the fuel consumption, and the number of special stations, then writes the results to `telecabina.out`. It optimizes memory usage by using numpy arrays and calculates the task in a single pass.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available. Since numpy is a third-party library and the environment may not have it installed, we'll need to rewrite the solution without using `numpy`. We will also have to be careful about memory usage due to the constraints. Here's the rewritten solution:

```python
# Read from input file
with open('telecabina.in', 'r') as file:
    n = int(file.readline().strip())
    stations = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Initialize variables
people_at_city = 0
fuel_consumption = 0
special_stations_count = 0
climbing = None

# Calculate number of people that arrive at the city, fuel consumption and special stations
for i in range(1, n):
    people_at_city += stations[i - 1][1]
    altitude_difference = abs(stations[i][0] - stations[i - 1][0])
    
    # Determine the direction of movement
    if stations[i][0] > stations[i - 1][0]:
        # Climbing
        fuel_consumption += altitude_difference * 3
        
        # Check if there's a change in movement direction
        if climbing == False:
            special_stations_count += 1
        climbing = True
    else:
        # Descending
        fuel_consumption += altitude_difference * 1
        
        # Check if there's a change in movement direction
        if climbing or climbing is None:
            special_stations_count += 1
        climbing = False

# Write to output file
with open('telecabina.out', 'w') as file:
    file.write(f"{people_at_city}\n")
    file.write(f"{fuel_consumption}\n")
    file.write(f"{special_stations_count}\n")
```

This solution does not use any third-party libraries and should compile and run correctly with the stated constraints. We use a list of tuples to store the stations' data instead of a numpy array. This should also stay within the memory limit as we're not storing any additional data structures that could cause memory usage to spike.
