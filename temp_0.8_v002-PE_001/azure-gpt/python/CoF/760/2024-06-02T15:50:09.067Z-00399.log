---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read data from input file
with open('telecabina.in', 'r') as f:
    n = int(f.readline().strip())
    data = np.genfromtxt(f, delimiter=' ', dtype=int)

# Initialize variables
people_in_cabin = 0
total_people = 0
fuel_consumed = 0
special_stations = 0

# Compute values
for i in range(n - 1):
    people_in_cabin += data[i, 1]
    total_people += data[i, 1]
    
    altitude_diff = data[i + 1, 0] - data[i, 0]
    
    if altitude_diff > 0:  # Uphill
        fuel_consumed += altitude_diff * 3
    else:  # Downhill
        fuel_consumed += -altitude_diff
    
    if (altitude_diff > 0 and i > 0 and data[i, 0] < data[i - 1, 0]) or \
       (altitude_diff < 0 and i > 0 and data[i, 0] > data[i - 1, 0]):
        special_stations += 1

# Write results to output file
with open('telecabina.out', 'w') as f:
    f.write(f"{total_people}\n")
    f.write(f"{fuel_consumed}\n")
    f.write(f"{special_stations}\n")
```
Please note that the code above assumes that the `telecabina.in` file exists and contains valid data according to the challenge's requirements. The code computes the total number of people arriving in the city, the fuel consumption for the transport, and the number of special stations, then writes this information to `telecabina.out` file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message is indicating that the `numpy` module is not found, meaning that numpy is not available in the environment where the code is being run. Since the use of `numpy` is not possible, I will rewrite the solution without using `numpy` or any other external libraries, relying only on standard Python libraries that are guaranteed to be available.

Here is the entire solution rewritten without any dependencies:

```python
# Read data from input file
with open('telecabina.in', 'r') as f:
    n = int(f.readline().strip())
    stations = [list(map(int, f.readline().split())) for _ in range(n)]

# Initialize variables
people_in_cabin = 0
total_people = 0
fuel_consumed = 0
special_stations = 0

# Compute values
for i in range(n - 1):
    altitude, people = stations[i]
    people_in_cabin += people
    total_people += people
    
    next_altitude = stations[i + 1][0]
    altitude_diff = next_altitude - altitude
    
    if altitude_diff > 0:  # Uphill
        fuel_consumed += altitude_diff * 3
    else:  # Downhill
        fuel_consumed += -altitude_diff
    
    if i > 0:
        prev_altitude = stations[i - 1][0]
        if (altitude_diff > 0 and altitude < prev_altitude) or \
           (altitude_diff < 0 and altitude > prev_altitude):
            special_stations += 1

# Write results to output file
with open('telecabina.out', 'w') as f:
    f.write(f"{total_people}\n")
    f.write(f"{fuel_consumed}\n")
    f.write(f"{special_stations}\n")
```

This version of the program does not use any external libraries and will work in a standard Python environment. The logic for calculating the total number of people, fuel consumption, and special stations remains the same as in the numpy-based version.
