---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read data from file
with open('telecabina.in', 'r') as f:
    n = int(f.readline().strip())
    stations = np.array([list(map(int, f.readline().strip().split())) for _ in range(n)], dtype=np.int32)

# Initialize variables
num_people = np.sum(stations[:, 1])
fuel_consumption = 0
num_special_stations = 0
ascending = True if stations[1, 0] > stations[0, 0] else False

# Calculate fuel consumption and number of special stations
for i in range(1, n):
    altitude_diff = abs(stations[i, 0] - stations[i - 1, 0])
    if ascending:
        fuel_consumption += altitude_diff * 3
    else:
        fuel_consumption += altitude_diff

    # Check if the current station is special
    if (stations[i, 0] > stations[i - 1, 0] and not ascending) or \
       (stations[i, 0] < stations[i - 1, 0] and ascending):
        num_special_stations += 1
        ascending = not ascending

# Write data to file
with open('telecabina.out', 'w') as f:
    f.write(f"{num_people}\n")
    f.write(f"{fuel_consumption}\n")
    f.write(f"{num_special_stations}\n")
```

This code reads the stations' data from the `telecabina.in` file, calculates the total number of people, the total fuel consumption, and the number of special stations, and writes the results to the `telecabina.out` file. It uses NumPy arrays to store station data and perform calculations, which is more memory-efficient than using lists of lists, considering the memory constraints. The data type used for the stations array is `np.int32` which should be within the memory allowance for the problem.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the numpy module is not found because it's not installed in the Python environment being used to run the code. In many programming challenges, especially those with strict memory limits, it is common that only the standard library is available, and third-party libraries like numpy are not allowed.

In light of this, I'll rewrite the solution without using numpy, and with a focus on optimizing memory usage. Here's the updated solution using only built-in Python data structures:

```python
# Read data from file
with open('telecabina.in', 'r') as f:
    n = int(f.readline().strip())
    stations = [tuple(map(int, f.readline().strip().split())) for _ in range(n)]

# Initialize variables
num_people = sum(station[1] for station in stations)
fuel_consumption = 0
num_special_stations = 0
ascending = True if stations[1][0] > stations[0][0] else False

# Calculate fuel consumption and number of special stations
for i in range(1, n):
    altitude_diff = abs(stations[i][0] - stations[i - 1][0])
    if ascending:
        fuel_consumption += altitude_diff * 3
    else:
        fuel_consumption += altitude_diff

    # Check if the current station is special
    if (stations[i][0] > stations[i - 1][0] and not ascending) or \
       (stations[i][0] < stations[i - 1][0] and ascending):
        num_special_stations += 1
        ascending = not ascending

# Write data to file
with open('telecabina.out', 'w') as f:
    f.write(f"{num_people}\n")
    f.write(f"{fuel_consumption}\n")
    f.write(f"{num_special_stations}\n")
```

This code accomplishes the same task without using numpy and should work within the constraints of the challenge. It uses basic file I/O, list comprehensions, and tuples to manage the data efficiently. The use of `sum()` and list comprehension ensures that we only iterate through the data once to calculate the total number of people. The calculation of fuel consumption and number of special stations is done with a single pass through the stations' data.
