---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the solution to the problem in a Python code block, utilizing NumPy to handle the memory efficiently. The code reads from `telecabina.in` and writes to `telecabina.out` as per the challenge requirements.

```python
import numpy as np

# Read data from file
with open('telecabina.in', 'r') as file:
    n = int(file.readline().strip())
    stations = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)

# Initialize variables
people_total = 0
fuel_consumption = 0
special_stations = 0
ascending = True

# Process each station
for i in range(n - 1):
    # Update people total
    people_total += stations[i, 1]

    # Calculate fuel consumption and check for special stations
    altitude_diff = stations[i + 1, 0] - stations[i, 0]
    if altitude_diff > 0:
        # Ascending
        fuel_consumption += altitude_diff * 3
        if not ascending:
            # Became a special station as it switched from descending to ascending
            special_stations += 1
        ascending = True
    else:
        # Descending
        fuel_consumption += -altitude_diff  # altitude_diff is negative
        if ascending:
            # Became a special station as it switched from ascending to descending
            special_stations += 1
        ascending = False

# Write results to file
with open('telecabina.out', 'w') as file:
    file.write(f'{people_total}\n{fuel_consumption}\n{special_stations}\n')
```

This solution reads the input data into a NumPy array to efficiently manage memory, keeping in mind the 8MB limit. Then, it iterates through each station, calculating the total number of people, overall fuel consumption, and the number of special stations. Finally, it writes the results to `telecabina.out`. The use of NumPy ensures that the memory footprint is minimized, and the use of file reading/writing (without `print` or `input`) satisfies the I/O requirements.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1 and the error message indicate that the `numpy` module is not installed in the Python environment being used. Since the environment does not have `numpy` installed and the challenge states that we need to optimize both time and memory usage with a memory limit of ~8MB, I will rewrite the solution without using `numpy` or any external libraries, relying only on built-in Python functionalities to maintain a small memory footprint.

Here is the revised solution:

```python
# Read data from file
with open('telecabina.in', 'r') as file:
    n = int(file.readline().strip())
    stations = [list(map(int, line.split())) for line in file]

# Initialize variables
people_total = 0
fuel_consumption = 0
special_stations = 0
ascending = True

# Process each station
for i in range(n - 1):
    # Update people total
    people_total += stations[i][1]

    # Calculate fuel consumption and check for special stations
    altitude_diff = stations[i + 1][0] - stations[i][0]
    if altitude_diff > 0:
        # Ascending
        fuel_consumption += altitude_diff * 3
        if not ascending:
            # Became a special station as it switched from descending to ascending
            special_stations += 1
        ascending = True
    else:
        # Descending
        fuel_consumption += -altitude_diff  # altitude_diff is negative
        if ascending:
            # Became a special station as it switched from ascending to descending
            special_stations += 1
        ascending = False

# Write results to file
with open('telecabina.out', 'w') as file:
    file.write(f'{people_total}\n{fuel_consumption}\n{special_stations}\n')
```

This solution uses a list of lists to store the station data instead of a NumPy array. It still efficiently calculates the total number of people, fuel consumption, and the number of special stations as before. Reading from and writing to files is handled in the same manner, satisfying the input and output requirements of the challenge. This solution should work in any standard Python environment without relying on external libraries.
