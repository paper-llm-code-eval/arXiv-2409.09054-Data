---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def calculate_combinations(disk_moves, target_digit):
    # Calculate how many disks can reach the target_digit with minimum moves
    reach_target_count = np.sum(disk_moves == disk_moves.min(axis=1)[:,None])
    return reach_target_count

def process_disks(disks):
    # Calculate the number of moves needed for each disk to reach each digit
    disk_moves = np.minimum(disks, 10 - disks)
    # Calculate the total moves needed for each digit
    total_moves = disk_moves.sum(axis=0)
    
    # Get the digit that needs the minimum total moves
    min_moves_digit = total_moves.argmin()
    min_moves_count = total_moves.min()
    
    # Calculate combinations
    combinations = calculate_combinations(disk_moves, min_moves_digit)
    
    return disks.max(), min_moves_count, min_moves_digit, combinations

def read_and_write_files(input_file='cifru.in', output_file='cifru.out'):
    with open(input_file, 'r') as fin:
        N = int(fin.readline().strip())
        disks = np.array([int(fin.readline().strip()) for _ in range(N)])
        disks = np.vstack((disks, 10 - disks))
    
    max_digit, min_moves, min_digit, combinations = process_disks(disks)
    
    with open(output_file, 'w') as fout:
        fout.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{combinations}\n")

# Call the function that does the reading and writing
read_and_write_files()
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to process the data and find the results
def process_disks(disks):
    # Find the max digit and the histogram of the digits
    max_digit = np.max(disks)
    digit_count = np.bincount(disks, minlength=10)
    
    # Calculate the minimum moves for each possible uniform digit
    moves = [np.sum(np.minimum(np.abs(disks - d), 10 - np.abs(disks - d))) for d in range(10)]
    min_moves = min(moves)
    
    # Find the digit(s) that require minimum moves
    min_moves_digits = [i for i, x in enumerate(moves) if x == min_moves]
    
    # Calculate the minimum uniform digit
    min_uniform_digit = min(min_moves_digits)
    
    # Calculate the number of combinations that require minimum moves
    combinations = 0
    if len(min_moves_digits) == 1:
        combinations = 1
    else:
        # Calculate the number of disks that can reach each of the min_moves_digits with the same number of moves
        for digit in min_moves_digits:
            combinations += np.prod(digit_count[np.minimum(np.abs(disks - digit), 10 - np.abs(disks - digit)) == moves[digit]])
    
    return max_digit, min_moves, min_uniform_digit, combinations

# Read data from 'cifru.in'
with open('cifru.in', 'r') as file:
    N = int(file.readline())
    disks = np.array([int(file.readline()) for _ in range(N)])

# Process the data
max_digit, min_moves, min_uniform_digit, combinations = process_disks(disks)

# Write results to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_uniform_digit}\n{combinations}\n")

```

---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_min_moves_and_combinations(disks):
    # Calculate the moves needed for each disk to get to each digit
    moves = np.abs(np.arange(10) - disks[:, None])
    moves = np.minimum(moves, 10 - moves)

    # Sum the moves for each target digit and find the minimum moves required
    total_moves = moves.sum(axis=0)
    min_moves = total_moves.min()
    min_moves_digit = total_moves.argmin()

    # Calculate the frequency of each move count to reach the min_moves_digit
    frequency = np.bincount(moves[:, min_moves_digit], minlength=min_moves+1)

    # Calculate the number of combinations that can achieve the uniform code with minimum moves
    combinations = np.prod(frequency[frequency > 0])

    return min_moves, min_moves_digit, combinations

# Read the input data
with open('cifru.in', 'r') as file:
    N = int(file.readline().strip())
    disks = np.array([int(file.readline().strip()) for _ in range(N)])

# Calculate the max digit, min moves, min moves digit and combinations
max_digit = disks.max()
min_moves, min_moves_digit, combinations = calculate_min_moves_and_combinations(disks)

# Write the output data
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_moves_digit}\n{combinations}\n")
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_min_moves_and_combinations(disks):
    max_digit = np.max(disks)
    # Calculate the cost of moving each disc to match each possible digit (0-9)
    move_costs = np.array([np.minimum(np.abs(disks - target), 10 - np.abs(disks - target)) for target in range(10)]).T
    # Sum the move costs for each target digit
    move_sums = np.sum(move_costs, axis=0)
    min_moves = np.min(move_sums)
    target_digit = np.argmin(move_sums)

    # Calculate the number of ways to achieve the target digit
    num_ways = 1
    for cost in move_costs:
        num_ways *= np.sum(cost == np.min(cost))

    return max_digit, min_moves, target_digit, num_ways

# Read the data from cifru.in
with open('cifru.in', 'r') as fin:
    N = int(fin.readline().strip())
    disks = np.array([int(fin.readline().strip()) for _ in range(N)])

# Perform the calculations
max_digit, min_moves, target_digit, num_ways = calculate_min_moves_and_combinations(disks)

# Write the results to cifru.out
with open('cifru.out', 'w') as fout:
    fout.write(f"{max_digit}\n{min_moves}\n{target_digit}\n{num_ways}\n")
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def min_moves_to_uniform(disk_values):
    # Calculate distances to each potential uniform value (0-9)
    distances = np.minimum(disk_values, 10 - disk_values)
    # Accumulate the total moves for each potential uniform value
    total_moves = np.sum(distances, axis=0)
    # Find the minimum moves required for uniformity
    min_total_moves = np.min(total_moves)
    # Identify which digits can be achieved with the minimum moves
    min_move_digits = np.where(total_moves == min_total_moves)[0]
    # Determine the smallest digit that can be achieved with minimum moves
    smallest_digit = np.min(min_move_digits)
    # Calculate the number of combinations to achieve uniformity with the minimum moves
    combinations = len(min_move_digits)

    return min_total_moves, smallest_digit, combinations

# Read the disk values from 'cifru.in'
with open('cifru.in', 'r') as infile:
    N = int(infile.readline().strip())
    disk_values = np.array([int(infile.readline().strip()) for _ in range(N)])

# Calculate the max digit from the initial values
max_digit = np.max(disk_values)
# Calculate the minimum moves to uniformity, the smallest digit, and combinations
min_total_moves, smallest_digit, combinations = min_moves_to_uniform(disk_values)

# Write the output to 'cifru.out'
with open('cifru.out', 'w') as outfile:
    outfile.write(f"{max_digit}\n{min_total_moves}\n{smallest_digit}\n{combinations}\n")
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to process the input disks and calculate the output values
def process_disks(disks):
    # Calculate the maximum digit on the disks
    max_digit = np.max(disks)

    # Calculate the number of moves each disk need to match each digit
    moves_to_digits = np.minimum(disks, 10 - disks).reshape(-1, 1) + np.minimum(9 - disks, disks + 1).reshape(-1, 1)
    
    # Count the number of moves to make all disks show the same digit
    moves_count = np.sum(moves_to_digits, axis=0)

    # Find the minimum number of moves and the corresponding digit
    min_moves = np.min(moves_count)
    min_digit = np.argmin(moves_count)

    # Count how many ways we can achieve this configuration
    ways_to_achieve = np.prod(moves_to_digits[:, min_digit] == moves_to_digits.min(axis=1))

    return max_digit, min_moves, min_digit, int(ways_to_achieve)

# Read the input data from 'cifru.in'
with open('cifru.in', 'r') as f:
    N = int(f.readline())
    disks = np.array([int(f.readline().strip()) for _ in range(N)])

# Process the disks to get the required output values
max_digit, min_moves, min_digit, ways_to_achieve = process_disks(disks)

# Write the output data to 'cifru.out'
with open('cifru.out', 'w') as f:
    f.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{ways_to_achieve}\n")
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to find the minimum moves and the number of combinations
def find_min_moves_and_combinations(disk_values):
    # Initialize the array to count the moves for each disk to each number
    moves = np.zeros((len(disk_values), 10), dtype=int)
    
    # Fill the array with the number of moves for each disk to each number
    for i, disk_value in enumerate(disk_values):
        moves[i] = np.minimum(np.abs(np.arange(10) - disk_value), 10 - np.abs(np.arange(10) - disk_value))
    
    # Sum the moves needed to get each number on all disks
    total_moves = np.sum(moves, axis=0)
    
    # Find the minimum number of moves needed to obtain uniform numbers
    min_moves = total_moves.min()
    
    # Find the smallest number which can be obtained in minimum moves
    min_moves_digit = np.where(total_moves == min_moves)[0].min()
    
    # Count the combinations that can be obtained with minimum moves
    combinations = sum(np.all(moves <= total_moves[min_moves_digit] - moves[:, min_moves_digit][:, np.newaxis], axis=1))
    
    # Find the maximum digit on the disks
    max_digit = max(disk_values)
    
    return max_digit, min_moves, min_moves_digit, combinations

# Read input from 'cifru.in'
with open('cifru.in', 'r') as input_file:
    N = int(input_file.readline().strip())
    disks = np.array([int(input_file.readline().strip()) for _ in range(N)], dtype=int)

# Process the input to obtain the results
max_digit, min_moves, min_moves_digit, combinations = find_min_moves_and_combinations(disks)

# Write output to 'cifru.out'
with open('cifru.out', 'w') as output_file:
    output_file.write(f"{max_digit}\n{min_moves}\n{min_moves_digit}\n{combinations}\n")
```
