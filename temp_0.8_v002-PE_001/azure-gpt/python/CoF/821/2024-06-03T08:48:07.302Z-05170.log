---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data
with open('cifru.in', 'r') as file:
    n = int(file.readline().strip())
    digits = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Compute the solution
max_digit = np.max(digits)
min_moves = np.sum(np.minimum(digits, 10 - digits))
min_digit_after_moves = np.argmin(np.bincount(digits, minlength=10))
unique_combinations = np.count_nonzero(np.bincount(digits, minlength=10) == min_moves)

# Write the output data
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_digit_after_moves}\n{unique_combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to calculate the minimum number of moves to make all discs show the same digit
def calculate_min_moves(digits):
    moves = np.zeros(10, dtype=int)
    for digit in digits:
        for target in range(10):
            moves[target] += min(abs(digit - target), 10 - abs(digit - target))
    return np.min(moves)

# Read the input data from 'cifru.in'
with open('cifru.in', 'r') as file:
    n = int(file.readline().strip())
    digits = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Calculate the required values
max_digit = np.max(digits)
min_moves = calculate_min_moves(digits)

# Find the digit that can be achieved with the minimum number of moves
target_digit = np.argmin([calculate_min_moves(np.full(n, i, dtype=np.int8)) for i in range(10)])

# Count the number of ways to achieve the same digit with the minimum number of moves
combinations = len([1 for i in range(10) if calculate_min_moves(np.full(n, i, dtype=np.int8)) == min_moves])

# Write the output data to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{target_digit}\n{combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from file
with open('cifru.in', 'r') as fin:
    n = int(fin.readline())
    disks = np.fromfile(fin, dtype=np.int8, count=n, sep='\n')

# Calculate maximum digit on disks
max_digit = np.max(disks)

# Calculate minimum moves to align all disks
move_counts = np.zeros(10, dtype=np.int32)
for d in disks:
    move_counts += np.minimum(np.abs(np.arange(10) - d), 10 - np.abs(np.arange(10) - d))

min_moves = np.min(move_counts)
target_digit = np.argmin(move_counts)

# Calculate number of combinations with identical digits
identical_digit_combinations = np.sum(move_counts == min_moves)

# Write data to file
with open('cifru.out', 'w') as fout:
    fout.write(f"{max_digit}\n{min_moves}\n{target_digit}\n{identical_digit_combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input data from 'cifru.in'
with open('cifru.in', 'r') as file:
    # Read the number of discs
    n = int(file.readline().strip())
    # Read the current position of each disc
    discs = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Compute the largest digit on the discs
max_digit = np.max(discs)

# Compute the number of moves for each possible uniform digit
moves_to_uniform = np.zeros(10, dtype=np.int32)
for i in range(10):
    moves_to_uniform[i] = np.sum((10 + discs - i) % 10)

# Compute the minimum number of moves to make all discs the same
min_moves = np.min(moves_to_uniform)

# Find the smallest digit after performing the minimum number of moves
min_digit_after_moves = np.argmin(moves_to_uniform)

# Count how many digits can be achieved with the minimum number of moves
unique_combinations = np.count_nonzero(moves_to_uniform == min_moves)

# Write the output data to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_digit_after_moves}\n{unique_combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_min_moves_and_combinations(digits, n):
    moves_needed = [sum(min(digit, 9 - digit) for digit in digits)]
    moves_needed += [sum(min(abs(digit - i), 10 - abs(digit - i)) for digit in digits) for i in range(1, 10)]

    min_moves = min(moves_needed)
    target_digit = moves_needed.index(min_moves)
    combinations = moves_needed.count(min_moves)

    if target_digit == 9 and combinations > 1:  # If we can get to 9 and another digit with same moves
        combinations -= 1  # Exclude the count for 9 as we want the smallest digit after moves

    return min_moves, target_digit, combinations

# Read the input data from 'cifru.in'
with open('cifru.in', 'r') as file:
    n = int(file.readline())
    disks = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Compute the required values
max_digit = np.max(disks)
min_moves, target_digit, combinations = calculate_min_moves_and_combinations(disks, n)

# Write the output data to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{target_digit}\n{combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array operations
import numpy as np

# Open the input file and read the number of disks and their current positions
with open('cifru.in', 'r') as file:
    n = int(file.readline().strip())
    digits = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Calculate the maximum digit present on the disks
max_digit = np.max(digits)

# Calculate the minimum number of moves required to make all disks show the same digit 
# and the smallest digit that can be formed after these moves
min_moves = np.inf
min_digit = -1
combinations = 0
for i in range(10):
    moves = np.sum(np.minimum(np.abs(digits - i), 10 - np.abs(digits - i)))
    if moves < min_moves:
        min_moves = moves
        min_digit = i
        combinations = 1
    elif moves == min_moves:
        combinations += 1

# Write the results to the output file
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array operations
import numpy as np

# Read the input from the file
with open('cifru.in', 'r') as file:
    n = int(file.readline())
    digits = np.array([int(file.readline().strip()) for _ in range(n)], dtype=np.int8)

# Compute the maximum digit on the discs
max_digit = np.max(digits)

# Calculate moves to each target digit from 0 to 9
moves = np.zeros(10, dtype=np.int32)
for digit in digits:
    moves += np.minimum(abs(digit - np.arange(10)), 10 - abs(digit - np.arange(10)))

# Find the target digit with the minimum moves and its moves
min_moves = np.min(moves)
target_digit = np.argmin(moves)

# Calculate the number of combinations with the minimum moves
# We count the occurrences of the minimum moves in the moves array
combinations = np.sum(moves == min_moves)

# Write the output to the file
with open('cifru.out', 'w') as file:
    file.writelines([f"{max_digit}\n", f"{min_moves}\n", f"{target_digit}\n", f"{combinations}\n"])
```
```
