---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mosia.in` and write to `mosia.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Păcală a primit, aşa cum era învoiala, un petec de teren de pe moşia boierului. Terenul este împrejmuit complet cu segmente drepte de gard ce se sprijină la ambele capete de câte un par zdravăn. La o nouă prinsoare, Păcală iese iar in câştig şi primeşte dreptul să strămute nişte pari, unul câte unul, cum i-o fi voia, astfel încât să-şi extindă suprafaţa de teren. Dar învoiala prevede că fiecare par poate fi mutat în orice direcţie, dar nu pe o distanţă mai mare decât o valoare dată (scrisă pe fiecare par) şi fiecare segment de gard, fiind cam şubred, poate fi rotit şi prelungit de la un singur capăt, celălalt rămânând nemişcat.

Cunoscând poziţiile iniţiale ale parilor şi valoarea înscrisă pe fiecare par, se cere suprafaţa maximă cu care poate să-şi extindă Păcală proprietatea. Se ştie că parii sunt daţi într-o ordine oarecare, poziţiile lor iniţiale sunt date prin numere întregi de cel mult $3$ cifre, distanţele pe care fiecare par poate fi deplasat sunt numere naturale strict pozitive şi figura formată de terenul iniţial este un poligon neconcav,

# Date de intrare
Fişierul `mosia.in` conţine $n+1$ linii cu următoarele valori:
$n$				    – numărul de pari
$x_1  y_1  d_1$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $1$
$x_2  y_2  d_2$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $2$
...
$x_n  y_n  d_n$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $n$

# Date de ieşire
În fişierul `mosia.out` se scrie un număr real cu $4$ zecimale ce reprezintă suprafaţa maximă cu care se poate mări moşia.

# Restricţii şi observaţii:
* $3 < N ≤ 200$ număr natural
* $–1 \ 000 < x_i,y_i < 1 \ 000$ numere întregi
* $0 < d_i ≤ 20$ numere întregi
* poligonul neconcav se defineşte ca un poligon convex cu unele vârfuri coliniare
* poziţiile parilor sunt date într-o ordine oarecare
* poligonul obţinut după mutarea parilor poate fi concav
* poziţiile finale ale parilor nu sunt in mod obligatoriu numere naturale

---

Example:
`mosia.in`
```
4
-3 0 2
3 0 3
0 6 2
0 -6 6
```

`mosia.out`
```
30.0000
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        data = file.readlines()
    n = int(data[0].strip())
    coords_distances = [tuple(map(int, line.strip().split())) for line in data[1:]]
    return n, coords_distances

def calc_max_area(n, coords_distances):
    coords = np.array([cd[:2] for cd in coords_distances])
    distances = np.array([cd[2] for cd in coords_distances])
    
    # Calculating the base area of the initial polygon
    base_area = 0.5 * np.abs(np.dot(coords[:,0], np.roll(coords[:,1], 1)) - np.dot(coords[:,1], np.roll(coords[:,0], 1)))
    
    # Calculating the max possible area added by moving each stake
    def calc_area_change(i):
        prev_idx = (i - 1) % n
        next_idx = (i + 1) % n
        prev_coord = coords[prev_idx]
        next_coord = coords[next_idx]
        dist = distances[i]
        
        # Calculate the vector for the previous and next segment
        prev_vector = prev_coord - coords[i]
        next_vector = next_coord - coords[i]
        
        # Normalize the vectors to get the direction
        prev_norm = prev_vector / np.linalg.norm(prev_vector) if np.linalg.norm(prev_vector) else prev_vector
        next_norm = next_vector / np.linalg.norm(next_vector) if np.linalg.norm(next_vector) else next_vector
        
        # Calculate the maximum vectors the stake can be moved along each direction
        max_prev_vector = prev_norm * dist
        max_next_vector = next_norm * dist
        
        # Calculate the extra area that the movement of the stake would create
        extra_area = 0.5 * np.linalg.norm(np.cross(max_prev_vector - prev_vector, max_next_vector - next_vector))
        return extra_area
    
    max_area_change = sum(calc_area_change(i) for i in range(n))
    max_area = base_area + max_area_change
    
    return max_area

def write_output(filename, area):
    with open(filename, 'w') as file:
        file.write(f'{area:.4f}\n')

# Main function to solve the problem
def solve_problem():
    n, coords_distances = read_data('mosia.in')
    max_area = calc_max_area(n, coords_distances)
    write_output('mosia.out', max_area)

# Call the main function
solve_problem()
```

The solution calculates the maximum possible area that can be added by moving each stake based on the distance it can be moved and the direction of the adjacent segments. It first calculates the base area of the initial polygon, then for each stake, it calculates the change in area that would occur if the stake were moved to its maximum possible position.

After executing the `solve_problem()`, the result will be written to 'mosia.out'. This solution assumes that the input file 'mosia.in' exists and is formatted correctly according to the problem's specifications.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
