---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `mosia.in` and write to `mosia.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Păcală a primit, aşa cum era învoiala, un petec de teren de pe moşia boierului. Terenul este împrejmuit complet cu segmente drepte de gard ce se sprijină la ambele capete de câte un par zdravăn. La o nouă prinsoare, Păcală iese iar in câştig şi primeşte dreptul să strămute nişte pari, unul câte unul, cum i-o fi voia, astfel încât să-şi extindă suprafaţa de teren. Dar învoiala prevede că fiecare par poate fi mutat în orice direcţie, dar nu pe o distanţă mai mare decât o valoare dată (scrisă pe fiecare par) şi fiecare segment de gard, fiind cam şubred, poate fi rotit şi prelungit de la un singur capăt, celălalt rămânând nemişcat.

Cunoscând poziţiile iniţiale ale parilor şi valoarea înscrisă pe fiecare par, se cere suprafaţa maximă cu care poate să-şi extindă Păcală proprietatea. Se ştie că parii sunt daţi într-o ordine oarecare, poziţiile lor iniţiale sunt date prin numere întregi de cel mult $3$ cifre, distanţele pe care fiecare par poate fi deplasat sunt numere naturale strict pozitive şi figura formată de terenul iniţial este un poligon neconcav,

# Date de intrare
Fişierul `mosia.in` conţine $n+1$ linii cu următoarele valori:
$n$				    – numărul de pari
$x_1  y_1  d_1$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $1$
$x_2  y_2  d_2$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $2$
...
$x_n  y_n  d_n$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $n$

# Date de ieşire
În fişierul `mosia.out` se scrie un număr real cu $4$ zecimale ce reprezintă suprafaţa maximă cu care se poate mări moşia.

# Restricţii şi observaţii:
* $3 < N ≤ 200$ număr natural
* $–1 \ 000 < x_i,y_i < 1 \ 000$ numere întregi
* $0 < d_i ≤ 20$ numere întregi
* poligonul neconcav se defineşte ca un poligon convex cu unele vârfuri coliniare
* poziţiile parilor sunt date într-o ordine oarecare
* poligonul obţinut după mutarea parilor poate fi concav
* poziţiile finale ale parilor nu sunt in mod obligatoriu numere naturale

---

Example:
`mosia.in`
```
4
-3 0 2
3 0 3
0 6 2
0 -6 6
```

`mosia.out`
```
30.0000
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to read input data from file
def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        n = int(lines[0].strip())
        posts = np.zeros((n, 3), dtype=np.int32)
        for i in range(1, n+1):
            posts[i-1] = list(map(int, lines[i].strip().split()))
    return n, posts

# Function to write output data to file
def write_output(filename, area):
    with open(filename, 'w') as file:
        file.write(f"{area:.4f}\n")

# Function to calculate the area of the polygon formed by the posts
def calculate_area(posts):
    n = len(posts)
    area = 0.0
    for i in range(n):
        j = (i + 1) % n
        area += posts[i][0] * posts[j][1]
        area -= posts[j][0] * posts[i][1]
    return np.abs(area) / 2.0

# Function to find the maximum area by moving the posts
def find_max_area(n, posts):
    # Sort posts counter-clockwise
    centroid = np.mean(posts[:, :2], axis=0)
    angles = np.arctan2(posts[:, 1] - centroid[1], posts[:, 0] - centroid[0])
    posts = posts[np.argsort(angles)]

    # Calculate initial area
    initial_area = calculate_area(posts[:, :2])

    # Move each post and calculate the new area, keeping the maximum
    max_area = initial_area
    for i in range(n):
        # Copy original posts for manipulation
        moved_posts = np.copy(posts)
        # Move post i
        moved_posts[i, :2] += posts[i, 2] * np.array([np.cos(angles[i]), np.sin(angles[i])])
        # Calculate new area
        new_area = calculate_area(moved_posts[:, :2])
        # Update max_area if the new_area is larger
        max_area = max(max_area, new_area)

    # The maximum area that Pacala can extend is the difference
    return max_area - initial_area

# Read input from file
n, posts = read_input('mosia.in')

# Find the maximum area that can be obtained by moving the posts
max_area_extension = find_max_area(n, posts)

# Write output to file
write_output('mosia.out', max_area_extension)
```

Please note that this solution assumes that moving the posts always results in a valid polygon and does not handle cases where the polygon could become self-intersecting after moving the posts. Handling such cases would require additional checks and potentially a more complex algorithm.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
