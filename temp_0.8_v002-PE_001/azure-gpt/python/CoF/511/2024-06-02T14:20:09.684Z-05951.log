---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ciocolata.in` and write to `ciocolata.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Irina și Mihaela sunt surori. Într-o zi, mama lor le aduce $N$ tablete de ciocolată, numerotate de la $1$ la $N$, pe care le așează, în această ordine, pe o poliță a unui raft. Pentru fiecare tabletă se cunoaște gramajul (numărul de grame pe care le cântărește). **Cantitatea totală** de ciocolată consumată de o fată este egală cu suma gramajelor tuturor tabletelor consumate de ea. Pentru a consuma ciocolată, fetele trebuie să respecte următoarele reguli:
* cantitatea totală de ciocolată consumată de Irina trebuie să fie mai mare sau egală cu cantitatea totală de ciocolată consumată de sora sa;
* diferența dintre cantitatea totală de ciocolată consumată de Irina și cantitatea totală de ciocolată consumată de Mihaela trebuie să fie cât mai mică;
* fiecare fată trebuie să consume cel puțin o tabletă de ciocolată;
* fiecare fată consumă tablete de ciocolată de pe raft: Irina începe de la cea numerotată cu $1$ și continuă, în ordine, de la stânga la dreapta, iar Mihaela începe cu cea numerotată cu $N$ și continuă, în ordine, de la dreapta la stânga;
* fiecare fată poate întrerupe oricând consumul tabletelor de ciocolată, iar cele rămase fie sunt abandonate pe raft fie sunt consumate de fata cealaltă, dacă ajunge la ele;
* fiecare tabletă de ciocolată fie este consumată complet de una dintre fete, fie rămâne pe raft dar fetele NU pot sări peste nicio tabletă de ciocolată.

# Cerințe
Determinați și afișați:
1. cel mai des întâlnit gramaj în șirul de tablete așezate inițial pe poliță, iar dacă sunt mai multe gramaje care apar de un număr maxim de ori, se alege cel mai mic dintre acestea;
2. diferența minimă dintre cantitatea totală de ciocolată consumată de Irina și cantitatea totală de ciocolată consumată de Mihaela.

# Date de intrare

Pe prima linie din fișierul `ciocolata.in` se găsește numărul $C$, reprezentând cerința ce trebuie rezolvată ($1$ sau $2$), urmat de numărul $N$, cu semnificația din enunț, iar pe a doua linie $N$ numere naturale, reprezentând gramajele celor $N$ tablete de ciocolată, în ordinea numerotării lor. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire

Pe prima linie a fișierului de ieșire `ciocolata.out` se va afla un singur număr reprezentând gramajul determinat la cerința $1$ (dacă $C = 1$), respectiv, diferența minimă determinată la cerința $2$ (dacă $C = 2$).

# Restricții și precizări

* $C \in \{1, 2\}$;
* $1 \leq N \leq 100 \ 000$;
* Gramajul fiecărei tablete este un număr natural nenul mai mic sau egal cu $10 \ 000$;
* Se garantează că există întodeauna soluție.
* Pentru $30$ de puncte, $C = 1$;
* Pentru $5$ puncte, $C = 2$ și $N = 2$;
* Pentru $10$ puncte, $C = 2$ și $1 \leq N \leq 100$;
* Pentru $25$ de puncte, $C = 2$ și $1 \leq N \leq 1 \ 000$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`ciocolata.in`
```
1 6
1 4 3 3 5 4
```

`ciocolata.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import Counter

def solve_task_one(chocolates):
    counter = Counter(chocolates)
    most_common = counter.most_common()
    max_occurrences = most_common[0][1]
    min_grammage = float('inf')

    for grammage, occurrences in most_common:
        if occurrences == max_occurrences:
            min_grammage = min(min_grammage, grammage)
        else:
            break

    return min_grammage

def solve_task_two(chocolates):
    chocolates = np.array(chocolates, dtype=int)
    total_grams = np.sum(chocolates)
    sum_irina = 0
    sum_mihaela = 0
    min_diff = float('inf')

    for i in range(len(chocolates) - 1):
        sum_irina += chocolates[i]
        sum_mihaela = total_grams - sum_irina
        if sum_irina >= sum_mihaela:
            min_diff = min(min_diff, sum_irina - sum_mihaela)

    return min_diff

def main():
    with open('ciocolata.in', 'r') as infile:
        task, num_chocolates = map(int, infile.readline().split())
        chocolates = list(map(int, infile.readline().split()))
        
    if task == 1:
        result = solve_task_one(chocolates)
    else:
        result = solve_task_two(chocolates)

    with open('ciocolata.out', 'w') as outfile:
        outfile.write(f'{result}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import Counter

def solve_task_one(chocolates):
    counter = Counter(chocolates)
    most_common = counter.most_common()
    max_occurrences = most_common[0][1]
    min_grammage = float('inf')

    for grammage, occurrences in most_common:
        if occurrences == max_occurrences:
            min_grammage = min(min_grammage, grammage)
        else:
            break

    return min_grammage

def solve_task_two(chocolates):
    chocolates = np.array(chocolates, dtype=int)
    total_grams = np.sum(chocolates)
    sum_irina = 0
    min_diff = float('inf')

    # Irina starts from the left and Mihaela from the right
    for i in range(len(chocolates)):
        sum_irina += chocolates[i]
        sum_mihaela = total_grams - sum_irina
        if sum_irina >= sum_mihaela:
            min_diff = min(min_diff, sum_irina - sum_mihaela)
            # Once Irina's total is greater or equal, we can stop the loop
            break

    return min_diff

def main():
    with open('ciocolata.in', 'r') as infile:
        task, num_chocolates = map(int, infile.readline().split())
        chocolates = list(map(int, infile.readline().split()))
        
    if task == 1:
        result = solve_task_one(chocolates)
    else:
        result = solve_task_two(chocolates)

    with open('ciocolata.out', 'w') as outfile:
        outfile.write(f'{result}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from collections import Counter

# Function to solve task 1: finding the most common and smallest grammage
def solve_task_one(grammages):
    counter = Counter(grammages)
    # Find the most common grammage with the smallest value
    most_common = min(counter.items(), key=lambda x: (-x[1], x[0]))
    return most_common[0]

# Function to solve task 2: finding the minimum difference between the sisters
def solve_task_two(grammages):
    # Convert the list of grammages to a numpy array for efficient computation
    chocolates = np.array(grammages, dtype=np.int32)
    # Calculate the prefix sum from the beginning and the end
    prefix_sum = np.cumsum(chocolates)
    suffix_sum = np.cumsum(chocolates[::-1])[::-1]
    # Compute the absolute difference between the two sums
    differences = np.abs(prefix_sum - suffix_sum)
    # The first index where Irina's sum is greater or equal to Mihaela's sum
    # gives us the minimum difference
    min_diff = np.min(differences[:-1])
    return min_diff

def main():
    # Open the input file and read the task number and the list of grammages
    with open('ciocolata.in', 'r') as infile:
        task, _ = map(int, infile.readline().split())
        grammages = list(map(int, infile.readline().split()))
    
    # Solve the specified task
    if task == 1:
        result = solve_task_one(grammages)
    else: # task == 2
        result = solve_task_two(grammages)

    # Write the result to the output file
    with open('ciocolata.out', 'w') as outfile:
        outfile.write(f'{result}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import Counter

def solve_task_one(chocolates):
    counter = Counter(chocolates)
    most_common = counter.most_common()
    max_count = max(counter.values())
    min_grammage = min(weight for weight, count in counter.items() if count == max_count)
    return min_grammage

def solve_task_two(chocolates):
    total = sum(chocolates)
    min_diff = float('inf')
    irina_choc = 0
    for choc in chocolates:
        irina_choc += choc
        mihaela_choc = total - irina_choc
        if irina_choc >= mihaela_choc:
            diff = irina_choc - mihaela_choc
            min_diff = min(min_diff, diff)

    return min_diff

def main():
    with open('ciocolata.in', 'r') as infile:
        task, _ = map(int, infile.readline().split())
        chocolates = list(map(int, infile.readline().split()))

    result = solve_task_one(chocolates) if task == 1 else solve_task_two(chocolates)

    with open('ciocolata.out', 'w') as outfile:
        outfile.write(str(result) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import Counter

def read_input(filename):
    with open(filename, 'r') as file:
        task, _ = map(int, file.readline().split())
        chocolates = list(map(int, file.readline().split()))
    return task, chocolates

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def most_common_smallest_grammage(chocolates):
    counter = Counter(chocolates)
    most_common_grammage = min((grammage for grammage, count in counter.items() if count == max(counter.values())))
    return most_common_grammage

def minimum_difference(chocolates):
    prefix_sum = [0]
    suffix_sum = [0]
    total_sum = 0
    for c in chocolates:
        total_sum += c
        prefix_sum.append(total_sum)
    total_sum = 0
    for c in reversed(chocolates):
        total_sum += c
        suffix_sum.append(total_sum)
    suffix_sum = list(reversed(suffix_sum))
    min_diff = float('inf')
    for i in range(1, len(chocolates)):
        irina_chocolate = prefix_sum[i]
        mihaela_chocolate = suffix_sum[i]
        if irina_chocolate >= mihaela_chocolate:
            min_diff = min(min_diff, irina_chocolate - mihaela_chocolate)
    return min_diff

def main():
    task, chocolates = read_input('ciocolata.in')
    
    if task == 1:
        result = most_common_smallest_grammage(chocolates)
    else:
        result = minimum_difference(chocolates)

    write_output('ciocolata.out', result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import Counter

def solve_task_one(chocolates):
    # Create a counter for all chocolates
    counter = Counter(chocolates)
    # Find the chocolate with the highest count and if there is a tie, choose the smallest one
    most_common = min(counter.items(), key=lambda x: (-x[1], x[0]))
    return most_common[0]

def solve_task_two(chocolates):
    # Initialize variables for the total weights consumed by Irina and Mihaela
    total_weight = sum(chocolates)
    irina_weight = 0
    min_diff = float('inf')
    
    # Iterate through the chocolates from the start for Irina and from the end for Mihaela
    for weight in chocolates:
        irina_weight += weight
        mihaela_weight = total_weight - irina_weight
        # We only consider the situation where Irina has consumed equal or more than Mihaela
        if irina_weight >= mihaela_weight:
            # Update the minimum difference
            min_diff = min(min_diff, irina_weight - mihaela_weight)

    return min_diff

def main():
    # Read the input from the file
    with open('ciocolata.in', 'r') as f:
        task, _ = map(int, f.readline().split())
        chocolates = list(map(int, f.readline().split()))

    # Solve the problem based on the task number
    if task == 1:
        result = solve_task_one(chocolates)
    elif task == 2:
        result = solve_task_two(chocolates)

    # Write the output to the file
    with open('ciocolata.out', 'w') as f:
        f.write(str(result) + '\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `ciocolata.out` and read from `ciocolata.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from collections import Counter

def read_input():
    with open('ciocolata.in', 'r') as file:
        task, _ = map(int, file.readline().split())
        chocolates = list(map(int, file.readline().split()))
    return task, chocolates

def write_output(result):
    with open('ciocolata.out', 'w') as file:
        file.write(str(result) + '\n')

def solve_task_one(chocolates):
    counter = Counter(chocolates)
    most_common = min(counter.most_common(), key=lambda x: (-x[1], x[0]))
    return most_common[0]

def solve_task_two(chocolates):
    total_weight = sum(chocolates)
    min_diff = total_weight
    irina_weight = 0
    for chocolate in chocolates[:-1]:
        irina_weight += chocolate
        mihaela_weight = total_weight - irina_weight
        if irina_weight >= mihaela_weight:
            min_diff = min(min_diff, irina_weight - mihaela_weight)
    return min_diff

def main():
    task, chocolates = read_input()
    
    if task == 1:
        result = solve_task_one(chocolates)
    else:  # task == 2
        result = solve_task_two(chocolates)
    
    write_output(result)

if __name__ == "__main__":
    main()
```
```
