---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `oneout.in` and write to `oneout.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Definim un număr ***liber de pătrate*** ca fiind un număr natural care nu are ca divizor niciun pătrat perfect mai mare ca $1$. Prin convenție, $1$ este considerat *liber de pătrate*.

Așadar, șirul numerelor *libere de pătrate* este: $1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, \dots$

Se consideră un șir de $N$ numere naturale $X_i$, $1 \leq i \leq N$, unde $N$ este un număr natural.

Definim o ***bisecvență*** ca un subșir nevid obținut prin eliminarea dintr-o secvență a unui număr care nu este la începutul sau la sfârșitul secvenței.

# Cerințe
1) Să se determine câte numere *libere de pătrate* conține șirul dat.
2) Să se determine cea mai lungă *bisecvență* din șir formată din numere *libere de pătrate*, obținută prin eliminarea unui număr care **nu** este *liber de pătrate*.

# Date de intrare
Fișierul de intrare `oneout.in` conține pe prima linie un număr natural $C$, care poate fi doar $1$ sau $2$, reprezentând cerința, pe a doua linie numărul natural $N$ iar pe a treia linie $N$ numere naturale, separate prin câte un spațiu, cu semnificația de mai sus.

# Date de ieșire
Dacă $C$ este egal cu $1$, în fișierul de ieșire `oneout.out` se va scrie numărul de numere *libere de pătrate* din șir.

Dacă $C$ este egal cu $2$:
- Pe prima linie a fișierului de ieșire `oneout.out` se vor scrie două numere $L$ și $K$ despărțite printr-un spațiu, unde $L$ reprezintă lungimea maximă a unei *bisecvențe* cu proprietățile cerute, iar $K$ reprezintă numărul de *bisecvențe* de lungime maximă existente în șir.
- Pe următoarele $K$ linii se vor scrie indicii de început și de sfârșit ai fiecărei *bisecvențe* de lungime maximă găsite, în ordinea crescătoare a indicelui de start, despărțite printr-un spațiu.
- Dacă șirul nu conține nicio *bisecvență* cu proprietățile cerute, în fișierul de ieșire se va scrie `-1`.

# Restricții și precizări
- $3 \leq N \leq 10^6$
- $2 \leq X_i \leq 10^6$, $1 \leq i \leq N$
- Lungimea unei *bisecvențe* reprezintă numărul de numere din aceasta.
- Pentru teste în valoare de 37 de puncte $C = 1$, din care pentru teste în valoare de 24 de puncte $3 \leq N \leq 25$.
- Pentru teste în valoare de 63 de puncte $C = 2$, din care pentru teste în valoare de 23 de puncte $3 \leq N \leq 101$.

---

Example:
`oneout.in`
```
1
6
10 2 12 7 8 15
```

`oneout.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def is_square_free(n, square_primes):
    for p in square_primes:
        if p > n:
            break
        if n % p == 0:
            return False
    return True

def precompute_square_free(max_value):
    primes = np.ones((max_value+1,), dtype=bool)
    primes[:2] = False
    p = 2
    while p*p <= max_value:
        if primes[p]: 
            for i in range(p*p, max_value+1, p):
                primes[i] = False
        p += 1
    square_primes = np.array([p*p for p in np.nonzero(primes)[0] if p*p <= max_value])
    is_square_free_arr = np.array([is_square_free(i, square_primes) for i in range(max_value+1)])
    return is_square_free_arr

def count_square_free(sequence, is_square_free_arr):
    return np.sum(is_square_free_arr[sequence])

def max_square_free_subsequence(sequence, is_square_free_arr):
    n = len(sequence)
    max_len = -1
    subsequences = []

    left = 0
    while left < n and is_square_free_arr[sequence[left]]:
        left += 1

    for right in range(n-1, -1, -1):
        if is_square_free_arr[sequence[right]]:
            length = right - left - 1
            if length > max_len:
                max_len = length
                subsequences = [(left+1, right-1)]
            elif length == max_len:
                subsequences.append((left+1, right-1))
        else:
            left = right
            while left >= 0 and is_square_free_arr[sequence[left]]:
                left -= 1

    return max_len, subsequences

def solve_problem():
    with open('oneout.in', 'r') as file:
        C = int(file.readline().strip())
        N = int(file.readline().strip())
        sequence = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

    max_value = np.max(sequence)
    is_square_free_arr = precompute_square_free(max_value)

    if C == 1:
        result = count_square_free(sequence, is_square_free_arr)
    elif C == 2:
        max_len, subsequences = max_square_free_subsequence(sequence, is_square_free_arr)
        subsequences.sort()

    with open('oneout.out', 'w') as file:
        if C == 1:
            file.write(f'{result}\n')
        elif C == 2:
            if max_len == -1:
                file.write('-1\n')
            else:
                file.write(f'{max_len} {len(subsequences)}\n')
                for subseq in subsequences:
                    file.write(f'{subseq[0] + 1} {subseq[1] + 1}\n')

solve_problem()
```

This code snippet reads the problem data from `oneout.in`, computes whether numbers up to the maximum value in the sequence are square-free, counts the square-free numbers in the sequence or finds the longest subsequence of square-free numbers that can be obtained by removing a single non-square-free number, and outputs the results to `oneout.out`.

The program utilizes numpy for efficient array processing and precomputes which numbers up to the maximum value in the sequence are square-free to optimize for both time and memory.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
