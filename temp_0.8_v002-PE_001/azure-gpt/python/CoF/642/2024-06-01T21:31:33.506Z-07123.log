---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `oneout.in` and write to `oneout.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Definim un număr ***liber de pătrate*** ca fiind un număr natural care nu are ca divizor niciun pătrat perfect mai mare ca $1$. Prin convenție, $1$ este considerat *liber de pătrate*.

Așadar, șirul numerelor *libere de pătrate* este: $1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, \dots$

Se consideră un șir de $N$ numere naturale $X_i$, $1 \leq i \leq N$, unde $N$ este un număr natural.

Definim o ***bisecvență*** ca un subșir nevid obținut prin eliminarea dintr-o secvență a unui număr care nu este la începutul sau la sfârșitul secvenței.

# Cerințe
1) Să se determine câte numere *libere de pătrate* conține șirul dat.
2) Să se determine cea mai lungă *bisecvență* din șir formată din numere *libere de pătrate*, obținută prin eliminarea unui număr care **nu** este *liber de pătrate*.

# Date de intrare
Fișierul de intrare `oneout.in` conține pe prima linie un număr natural $C$, care poate fi doar $1$ sau $2$, reprezentând cerința, pe a doua linie numărul natural $N$ iar pe a treia linie $N$ numere naturale, separate prin câte un spațiu, cu semnificația de mai sus.

# Date de ieșire
Dacă $C$ este egal cu $1$, în fișierul de ieșire `oneout.out` se va scrie numărul de numere *libere de pătrate* din șir.

Dacă $C$ este egal cu $2$:
- Pe prima linie a fișierului de ieșire `oneout.out` se vor scrie două numere $L$ și $K$ despărțite printr-un spațiu, unde $L$ reprezintă lungimea maximă a unei *bisecvențe* cu proprietățile cerute, iar $K$ reprezintă numărul de *bisecvențe* de lungime maximă existente în șir.
- Pe următoarele $K$ linii se vor scrie indicii de început și de sfârșit ai fiecărei *bisecvențe* de lungime maximă găsite, în ordinea crescătoare a indicelui de start, despărțite printr-un spațiu.
- Dacă șirul nu conține nicio *bisecvență* cu proprietățile cerute, în fișierul de ieșire se va scrie `-1`.

# Restricții și precizări
- $3 \leq N \leq 10^6$
- $2 \leq X_i \leq 10^6$, $1 \leq i \leq N$
- Lungimea unei *bisecvențe* reprezintă numărul de numere din aceasta.
- Pentru teste în valoare de 37 de puncte $C = 1$, din care pentru teste în valoare de 24 de puncte $3 \leq N \leq 25$.
- Pentru teste în valoare de 63 de puncte $C = 2$, din care pentru teste în valoare de 23 de puncte $3 \leq N \leq 101$.

---

Example:
`oneout.in`
```
1
6
10 2 12 7 8 15
```

`oneout.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Check if the number is free from squares
def is_free_from_squares(num):
    if num == 1:
        return True
    for i in range(2, int(np.sqrt(num)) + 1):
        if (num % (i * i)) == 0:
            return False
    return True

def find_free_from_squares_subsequences(nums):
    length = 0
    sequences = []
    i = 0
    while i < len(nums):
        if is_free_from_squares(nums[i]):
            start = i
            while i < len(nums) and is_free_from_squares(nums[i]):
                i += 1
            end = i - 1
            if end - start + 1 > length:
                length = end - start + 1
                sequences = [(start, end)]
            elif end - start + 1 == length:
                sequences.append((start, end))
        i += 1
    return length, sequences

def write_results_to_file(task, result):
    with open("oneout.out", "w") as file_out:
        if task == 1:
            file_out.write(str(result) + "\n")
        elif task == 2:
            L, subsequences = result
            if L == 0:
                file_out.write("-1\n")
            else:
                file_out.write(f"{L} {len(subsequences)}\n")
                for s in subsequences:
                    file_out.write(f"{s[0] + 1} {s[1] + 1}\n")

def solve():
    with open("oneout.in", "r") as file_in:
        task = int(file_in.readline().strip())
        n = int(file_in.readline().strip())
        nums = np.fromstring(file_in.readline().strip(), dtype=int, sep=' ')
    
    if task == 1:
        count = np.sum(np.vectorize(is_free_from_squares)(nums))
        write_results_to_file(task, count)
    elif task == 2:
        longest, subsequences = find_free_from_squares_subsequences(nums)
        write_results_to_file(task, (longest, subsequences))

solve()
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def is_square_free(num):
    if num < 2:
        return True
    for i in range(2, int(np.sqrt(num)) + 1):
        if num % (i * i) == 0:
            return False
    return True

def load_data(filename):
    with open(filename, 'r') as file:
        task = int(file.readline().strip())
        _ = int(file.readline().strip())  # We don't need N since we're reading all numbers in the next line
        nums = np.fromfile(file, dtype=int, sep=' ', count=-1)
    return task, nums

def count_square_free_nums(nums):
    is_square_free_vectorized = np.vectorize(is_square_free)
    return np.sum(is_square_free_vectorized(nums))

def find_longest_bisequence(nums):
    max_length = 0
    bisequences = []
    i = 0

    while i < len(nums):
        if not is_square_free(nums[i]):
            left_ptr = i - 1
            right_ptr = i + 1
            while left_ptr >= 0 and is_square_free(nums[left_ptr]):
                left_ptr -= 1
            while right_ptr < len(nums) and is_square_free(nums[right_ptr]):
                right_ptr += 1
            current_length = right_ptr - left_ptr - 1
            if current_length > max_length:
                max_length = current_length
                bisequences = [(left_ptr + 2, right_ptr)]
            elif current_length == max_length:
                bisequences.append((left_ptr + 2, right_ptr))
        i += 1

    if max_length == 0:
        return -1, []
    else:
        return max_length, bisequences

def write_result_to_file(filename, result, task):
    with open(filename, 'w') as file:
        if task == 1:
            file.write(f"{result}\n")
        elif task == 2:
            length, sequences = result
            if length == -1:
                file.write("-1\n")
            else:
                file.write(f"{length - 2} {len(sequences)}\n")  # Subtract 2 for start and end exclusions
                for sequence in sequences:
                    file.write(f"{sequence[0]} {sequence[1] - 1}\n")  # Convert to 1-indexed and inclusive end

def main():
    task, nums = load_data('oneout.in')
    
    if task == 1:
        result = count_square_free_nums(nums)
    elif task == 2:
        result = find_longest_bisequence(nums)
    
    write_result_to_file('oneout.out', result, task)

if __name__ == "__main__":
    main()
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
