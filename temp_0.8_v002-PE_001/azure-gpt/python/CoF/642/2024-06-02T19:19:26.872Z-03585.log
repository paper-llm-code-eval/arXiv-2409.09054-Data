---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `oneout.in` and write to `oneout.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Definim un număr ***liber de pătrate*** ca fiind un număr natural care nu are ca divizor niciun pătrat perfect mai mare ca $1$. Prin convenție, $1$ este considerat *liber de pătrate*.

Așadar, șirul numerelor *libere de pătrate* este: $1, 2, 3, 5, 6, 7, 10, 11, 13, 14, 15, 17, \dots$

Se consideră un șir de $N$ numere naturale $X_i$, $1 \leq i \leq N$, unde $N$ este un număr natural.

Definim o ***bisecvență*** ca un subșir nevid obținut prin eliminarea dintr-o secvență a unui număr care nu este la începutul sau la sfârșitul secvenței.

# Cerințe
1) Să se determine câte numere *libere de pătrate* conține șirul dat.
2) Să se determine cea mai lungă *bisecvență* din șir formată din numere *libere de pătrate*, obținută prin eliminarea unui număr care **nu** este *liber de pătrate*.

# Date de intrare
Fișierul de intrare `oneout.in` conține pe prima linie un număr natural $C$, care poate fi doar $1$ sau $2$, reprezentând cerința, pe a doua linie numărul natural $N$ iar pe a treia linie $N$ numere naturale, separate prin câte un spațiu, cu semnificația de mai sus.

# Date de ieșire
Dacă $C$ este egal cu $1$, în fișierul de ieșire `oneout.out` se va scrie numărul de numere *libere de pătrate* din șir.

Dacă $C$ este egal cu $2$:
- Pe prima linie a fișierului de ieșire `oneout.out` se vor scrie două numere $L$ și $K$ despărțite printr-un spațiu, unde $L$ reprezintă lungimea maximă a unei *bisecvențe* cu proprietățile cerute, iar $K$ reprezintă numărul de *bisecvențe* de lungime maximă existente în șir.
- Pe următoarele $K$ linii se vor scrie indicii de început și de sfârșit ai fiecărei *bisecvențe* de lungime maximă găsite, în ordinea crescătoare a indicelui de start, despărțite printr-un spațiu.
- Dacă șirul nu conține nicio *bisecvență* cu proprietățile cerute, în fișierul de ieșire se va scrie `-1`.

# Restricții și precizări
- $3 \leq N \leq 10^6$
- $2 \leq X_i \leq 10^6$, $1 \leq i \leq N$
- Lungimea unei *bisecvențe* reprezintă numărul de numere din aceasta.
- Pentru teste în valoare de 37 de puncte $C = 1$, din care pentru teste în valoare de 24 de puncte $3 \leq N \leq 25$.
- Pentru teste în valoare de 63 de puncte $C = 2$, din care pentru teste în valoare de 23 de puncte $3 \leq N \leq 101$.

---

Example:
`oneout.in`
```
1
6
10 2 12 7 8 15
```

`oneout.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def is_square_free(num):
    if num in {0, 1}:
        return True
    for i in range(2, int(np.sqrt(num)) + 1):
        if (num / i / i).is_integer():
            return False
    return True

def task1(numbers):
    return np.sum(np.vectorize(is_square_free)(numbers))

def task2(numbers):
    free_indices = np.where(np.vectorize(is_square_free)(numbers))[0]
    if len(free_indices) < 2:
        return -1, []
    
    max_length = free_indices[-1] - free_indices[0] - 1
    if max_length < 1:
        return -1, []

    bisect_sequences = []
    for i in range(len(free_indices) - 1):
        length = free_indices[i + 1] - free_indices[i] - 1
        if length == max_length:
            bisect_sequences.append((free_indices[i] + 2, free_indices[i + 1]))
    
    return max_length, bisect_sequences

def main():
    with open('oneout.in', 'r') as f:
        task = int(f.readline().strip())
        n = int(f.readline().strip())
        numbers = np.array(f.readline().strip().split(), dtype=int)
    
    result = ""
    
    if task == 1:
        result = str(task1(numbers))
    elif task == 2:
        length, bisect_sequences = task2(numbers)
        if length == -1:
            result = "-1"
        else:
            result = f"{length} {len(bisect_sequences)}\n"
            for start, end in bisect_sequences:
                result += f"{start} {end}\n"
    
    with open('oneout.out', 'w') as f:
        f.write(result.strip())

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def calculate_sieve(limit):
    sieve = np.ones(limit + 1, dtype=bool)
    sieve[0:2] = False
    for i in range(2, int(limit**0.5) + 1):
        if sieve[i]:
            sieve[i*i:limit+1:i*i] = False
    return sieve

def task1(numbers, sieve):
    return np.sum(sieve[numbers])

def task2(numbers, sieve):
    square_free = sieve[numbers]
    indices = np.nonzero(square_free)[0]
    if len(indices) < 2:
        return -1, []

    max_length = -1
    bisect_sequences = []
    start = indices[0]

    for i in range(len(indices) - 1):
        if not square_free[indices[i] + 1: indices[i + 1]].all():
            length = indices[i + 1] - start - 1
            if length > max_length:
                max_length = length
                bisect_sequences = [(start + 1, indices[i + 1])]
            elif length == max_length:
                bisect_sequences.append((start + 1, indices[i + 1]))
            start = indices[i + 1]

    if max_length < 0:
        return -1, []

    return max_length, bisect_sequences

def main():
    sieve = calculate_sieve(10**6)

    with open('oneout.in', 'r') as f:
        task = int(f.readline().strip())
        n = int(f.readline().strip())
        numbers = np.array(f.readline().strip().split(), dtype=int)

    result = ""
    
    if task == 1:
        result = str(task1(numbers, sieve))
    elif task == 2:
        length, bisect_sequences = task2(numbers, sieve)
        if length == -1:
            result = "-1"
        else:
            result = f"{length} {len(bisect_sequences)}\n" + "\n".join(f"{seq[0]} {seq[1]}" for seq in bisect_sequences)

    with open('oneout.out', 'w') as f:
        f.write(result.strip() + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if a number is square-free (optimized using Sieve of Eratosthenes)
def sieve_square_free(max_value):
    sieve = np.ones(max_value + 1, dtype=bool)
    sieve[:2] = False
    for i in range(2, int(np.sqrt(max_value)) + 1):
        if sieve[i]:
            sieve[i * i::i * i] = False
    return sieve

# Read from 'oneout.in'
with open('oneout.in', 'r') as file:
    task = int(file.readline())
    N = int(file.readline())
    numbers = np.array(file.readline().split(), dtype=int)

# Precompute the sieve for square-free numbers
max_num = np.max(numbers)
sieve = sieve_square_free(max_num)

# Task 1: Count square-free numbers in the array
if task == 1:
    square_free_count = np.count_nonzero(sieve[numbers])
    with open('oneout.out', 'w') as file:
        file.write(str(square_free_count) + '\n')

# Task 2: Find the longest bisect sequence of square-free numbers
elif task == 2:
    # Identify the indices of non square-free numbers
    non_square_free_indices = np.where(~sieve[numbers])[0]

    if len(non_square_free_indices) == 0:
        max_length = N
        bisect_sequences = [(1, N)]
    else:
        # Add sentinel indices at the start and end
        non_square_free_indices = np.concatenate(([0], non_square_free_indices, [N - 1]))
        # Calculate lengths between non square-free numbers
        lengths = np.diff(non_square_free_indices) - 1
        max_length = np.max(lengths)
        bisect_sequences = np.where(lengths == max_length)[0]

    with open('oneout.out', 'w') as file:
        if max_length <= 1:
            file.write('-1\n')
        else:
            file.write(f'{max_length} {len(bisect_sequences)}\n')
            for i in bisect_sequences:
                start = non_square_free_indices[i] + 2
                end = non_square_free_indices[i] + max_length + 1
                file.write(f'{start} {end}\n')
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Define a function to generate a sieve that marks non-square-free numbers as False
def generate_sieve(max_num):
    sieve = np.ones(max_num + 1, dtype=bool)
    for i in range(2, int(np.sqrt(max_num)) + 1):
        sieve[i * i::i * i] = False
    return sieve

# Function to handle the first task
def count_square_free_numbers(numbers, sieve):
    return np.sum(sieve[numbers])

# Function to handle the second task
def find_longest_bisect_sequence(numbers, sieve):
    square_free = sieve[numbers]
    non_square_free_indices = np.where(~square_free)[0]
    
    if len(non_square_free_indices) == 0:
        return len(numbers), [(1, len(numbers))]
    
    max_len = 0
    max_len_sequences = []

    prev_index = -1
    for idx in non_square_free_indices:
        if prev_index != -1:
            bisect_len = idx - prev_index - 1
            if bisect_len > max_len:
                max_len = bisect_len
                max_len_sequences = [(prev_index + 2, idx)]
            elif bisect_len == max_len:
                max_len_sequences.append((prev_index + 2, idx))
        prev_index = idx

    return max_len, max_len_sequences

# Read input from 'oneout.in'
with open('oneout.in', 'r') as infile:
    task = int(infile.readline().strip())
    n = int(infile.readline().strip())
    numbers = np.fromstring(infile.readline().strip(), dtype=int, sep=' ')

# Generate the sieve for all numbers up to the maximum number in the input
max_number = numbers.max()
sieve = generate_sieve(max_number)

# Perform tasks and write the output to 'oneout.out'
with open('oneout.out', 'w') as outfile:
    if task == 1:
        count = count_square_free_numbers(numbers, sieve)
        outfile.write(f'{count}\n')

    elif task == 2:
        longest_seq_length, sequences = find_longest_bisect_sequence(numbers, sieve)
        if longest_seq_length == 0:
            outfile.write('-1\n')
        else:
            outfile.write(f'{longest_seq_length} {len(sequences)}\n')
            for start, end in sequences:
                outfile.write(f'{start} {end}\n')
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Precompute the sieve for square-free numbers
max_value = 10**6
sieve = np.ones(max_value + 1, dtype=bool)
for i in range(2, int(np.sqrt(max_value)) + 1):
    if sieve[i]:
        sieve[i*i::i*i] = False

def read_input(filename):
    with open(filename, 'r') as file:
        task = int(file.readline())
        _ = int(file.readline())
        numbers = np.array(file.readline().split(), dtype=int)
    return task, numbers

def write_output(filename, result):
    with open(filename, 'w') as file:
        if isinstance(result, int) or isinstance(result, str):
            file.write(f"{result}\n")
        else:
            for line in result:
                file.write(" ".join(map(str, line)) + "\n")

def task1(numbers):
    return np.count_nonzero(sieve[numbers])

def task2(numbers):
    square_free_indices = np.flatnonzero(sieve[numbers])
    if len(square_free_indices) <= 1:
        return "-1"

    max_length = 0
    sequences = []

    prev_index = square_free_indices[0]
    for i in square_free_indices[1:]:
        length = i - prev_index - 1
        if length > max_length:
            max_length = length
            sequences = [(prev_index + 2, i)]
        elif length == max_length:
            sequences.append((prev_index + 2, i))
        prev_index = i

    return [max_length, len(sequences)] + sequences

# Process input and perform the appropriate task
task, numbers = read_input('oneout.in')
if task == 1:
    result = task1(numbers)
elif task == 2:
    result = task2(numbers)
write_output('oneout.out', result)
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to mark non-square-free numbers in a sieve
def mark_sieve(sieve):
    max_val = len(sieve)
    for i in range(2, int(np.sqrt(max_val)) + 1):
        if sieve[i]:
            sieve[i*i::i*i] = False

# Process input and compute task solution
def process(task, numbers, sieve):
    if task == 1:
        # Count square-free numbers
        square_free_count = np.count_nonzero(sieve[numbers])
        return str(square_free_count)
    elif task == 2:
        # Find the longest bisect sequence of square-free numbers
        square_free = sieve[numbers]
        non_square_free_idx = np.where(~square_free)[0]
        if non_square_free_idx.size == 0:
            max_len = 0
            sequences = []
        else:
            seq_start = np.concatenate(([0], non_square_free_idx + 1))
            seq_end = np.concatenate((non_square_free_idx, [len(numbers) - 1]))
            lens = seq_end - seq_start
            max_len = np.amax(lens)
            sequences = np.column_stack((seq_start[lens == max_len], seq_end[lens == max_len]))

        if max_len <= 1:
            return "-1"
        else:
            sequences_str_list = [' '.join(map(str, seq)) for seq in sequences]
            return f"{max_len} {len(sequences)}\n" + "\n".join(sequences_str_list)

# Initialize sieve array
max_num = 10**6
sieve = np.ones(max_num+1, dtype=bool)
mark_sieve(sieve)

# Read input
with open('oneout.in', 'r') as infile:
    task = int(infile.readline())
    _ = int(infile.readline())
    numbers = np.fromstring(infile.readline(), dtype=int, sep=' ')

# Process task and get the result
result = process(task, numbers, sieve)

# Write output
with open('oneout.out', 'w') as outfile:
    outfile.write(result + '\n')
```
```
---------- user ----------


Expected program to write result to `oneout.out` and read from `oneout.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to generate a sieve that marks square-free numbers as True and others as False
def generate_sieve(max_num):
    sieve = np.ones(max_num + 1, dtype=bool)
    for i in range(2, int(np.sqrt(max_num)) + 1):
        sieve[i*i::i*i] = False
    return sieve

# Function to count square-free numbers in the array
def count_square_free(numbers, sieve):
    return np.sum(sieve[numbers])

# Function to find the longest bisect sequences of square-free numbers
def longest_bisect_sequences(numbers, sieve):
    square_free = sieve[numbers]
    if np.all(square_free):
        return -1
    
    max_length = 0
    sequences = []
    start = 0 if square_free[0] else -1

    for i in range(1, len(numbers) - 1):
        if not square_free[i]:
            if square_free[i + 1]:
                start = i + 1
            elif start != -1:
                length = i - start
                if length > max_length:
                    max_length = length
                    sequences = [(start, i)]
                elif length == max_length:
                    sequences.append((start, i))
                start = -1

    if max_length < 1 or start != -1 and len(numbers) - start > max_length:
        return -1

    return (max_length, len(sequences)), sequences

# Read the input file
def read_input_file(filename):
    with open(filename, 'r') as file:
        task = int(file.readline())
        _ = int(file.readline())
        numbers = np.array(file.readline().split(), dtype=int)
    return task, numbers

# Write the output file
def write_output_file(filename, result, sequences=None):
    with open(filename, 'w') as file:
        if isinstance(result, int) and result == -1:
            file.write('-1\n')
        else:
            file.write(f'{result[0]} {result[1]}\n')
            for sequence in sequences:
                file.write(f'{sequence[0]} {sequence[1]}\n')

# Main execution
task, numbers = read_input_file('oneout.in')
sieve = generate_sieve(numbers.max())

if task == 1:
    square_free_count = count_square_free(numbers, sieve)
    write_output_file('oneout.out', square_free_count)
elif task == 2:
    result, sequences = longest_bisect_sequences(numbers, sieve)
    write_output_file('oneout.out', result, sequences)
```
```
