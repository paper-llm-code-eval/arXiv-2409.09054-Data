---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from collections import deque
from scipy.ndimage import label

# Read input
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().split())
    grid = np.array([list(map(int, list(f.readline().strip()))) for _ in range(n)])

# Function to find the minimum distance between two countries using BFS
def bfs_min_bridge(start, target_value, grid):
    visited = np.zeros_like(grid, dtype=bool)
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    queue = deque([(r, c, 0) for r in range(n) for c in range(m) if grid[r][c] == start])
    
    while queue:
        r, c, dist = queue.popleft()
        if grid[r][c] == target_value:
            return dist - 1  # Subtract 1 to not count the land square of the target island
        if not visited[r][c]:
            visited[r][c] = True
            for dr, dc in directions:
                rr, cc = r + dr, c + dc
                if 0 <= rr < n and 0 <= cc < m and not visited[rr][cc] and grid[rr][cc] != start:
                    queue.append((rr, cc, dist + 1))
    return n * m  # Return a large number if no bridge is possible

# Label each island and count them
labeled_grid, num_features = label(grid > 0)
island_counts = np.bincount(labeled_grid.ravel())[1:]  # Ignore label 0 (water)

# Count islands for R, G, B
NR, NG, NB = island_counts[grid[labeled_grid-1] == 1].size, island_counts[grid[labeled_grid-1] == 2].size, island_counts[grid[labeled_grid-1] == 3].size

# Find minimum bridge length
# Temporarily replace G islands with water to find the closest G island from each R island
grid_with_water = np.where(grid == 2, 0, grid)
min_bridge_length = min(bfs_min_bridge(1, 2, grid_with_water), bfs_min_bridge(2, 1, grid))

# Write output
with open('insule.out', 'w') as f:
    f.write(f"{NR} {NG} {NB} {min_bridge_length}\n")
```

This solution uses the numpy and scipy libraries for efficient array manipulation and connected component labeling. The `bfs_min_bridge` function implements a breadth-first search to find the shortest path from country R to country G across water. It is important to note that in the production environment, we should ensure that the libraries are installed and the versions are compatible with the code.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error you are seeing indicates that the `numpy` module is not available in the environment where you are trying to run the script. Since the challenge states we should optimize for both time and memory and utilize libraries like `numpy`, but we're facing an environment where `numpy` isn't available, we need to revert to using standard Python libraries only.

Let's rewrite the solution without using `numpy` or `scipy`, focusing on the standard Python libraries to ensure compatibility and adherence to the memory constraints.

```python
from collections import deque

# Helper functions
def read_input(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        grid = [list(map(int, line.strip())) for line in file]
    return n, m, grid

def write_output(filename, nr, ng, nb, min_length):
    with open(filename, 'w') as file:
        file.write(f"{nr} {ng} {nb} {min_length}\n")

def bfs(grid, start, target, n, m):
    visited = [[False] * m for _ in range(n)]
    queue = deque([(x, y, 1) for x in range(n) for y in range(m) if grid[x][y] == start])
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]

    while queue:
        x, y, length = queue.popleft()
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:
                if grid[nx][ny] == target:
                    return length
                elif grid[nx][ny] == 0:
                    visited[nx][ny] = True
                    queue.append((nx, ny, length + 1))
    return float('inf')

def find_islands(grid, n, m):
    def dfs(x, y, index):
        if not(0 <= x < n and 0 <= y < m) or grid[x][y] != index or visited[x][y]:
            return
        visited[x][y] = True
        for dx, dy in directions:
            dfs(x + dx, y + dy, index)

    visited = [[False] * m for _ in range(n)]
    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
    count = [0, 0, 0, 0]

    for x in range(n):
        for y in range(m):
            if grid[x][y] and not visited[x][y]:
                dfs(x, y, grid[x][y])
                count[grid[x][y]] += 1

    return count[1:]

# Main program
n, m, grid = read_input('insule.in')
island_counts = find_islands(grid, n, m)
min_length = min(bfs(grid, 1, 2, n, m), bfs(grid, 2, 1, n, m))

write_output('insule.out', *island_counts, min_length)
```

This solution uses depth-first search to count the islands and breadth-first search to find the minimum distance for the bridge. It meets the memory constraints by using only standard Python data structures and should be correct and efficient enough for the given problem size.
---------- user ----------


Program result did not match expected result.
Input data:
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```
Expected output:
```
4 2 3 4
```
Found output:
```
4 2 3 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
