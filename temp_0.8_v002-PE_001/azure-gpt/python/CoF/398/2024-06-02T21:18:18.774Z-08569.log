---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Function to compute the minimum bridge length
def compute_bridge_length(map, coords_R, coords_G):
    # Calculate all pairwise Manhattan distances between R and G land coordinates
    distances = cdist(coords_R, coords_G, metric='cityblock') - 1
    return np.min(distances).astype(int)

# Read data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, list(line.strip()))) for line in file.readlines()])

# Identify islands for countries R, G, and B using labeling
map_country_R = (data == 1).astype(int)
map_country_G = (data == 2).astype(int)
map_country_B = (data == 3).astype(int)

# Using label function to count the islands for each country
label_R, num_islands_R = label(map_country_R)
label_G, num_islands_G = label(map_country_G)
label_B, num_islands_B = label(map_country_B)

# Extract R and G land coordinates for bridge computation
coords_R = np.argwhere(label_R)
coords_G = np.argwhere(label_G)

# Compute the minimum bridge length
bridge_length = compute_bridge_length(data, coords_R, coords_G)

# Write output to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

def compute_bridge_length(map, coords_R, coords_G):
    # Calculate all pairwise Manhattan distances between R and G land coordinates
    distances = cdist(coords_R, coords_G, metric='cityblock') - 1
    return np.min(distances).astype(int)

# Read data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, list(line.strip()))) for line in file.readlines()], dtype=int)

# Identify islands for countries R, G, and B using labeling
map_country_R = (data == 1)
map_country_G = (data == 2)
map_country_B = (data == 3)

# Use label function to count the islands for each country
label_R, num_islands_R = label(map_country_R, structure=np.ones((3, 3)))
label_G, num_islands_G = label(map_country_G, structure=np.ones((3, 3)))
label_B, num_islands_B = label(map_country_B, structure=np.ones((3, 3)))

# Extract the borders of R and G for bridge computation
border_R = np.pad(map_country_R, pad_width=1)[:-2,1:-1] | np.pad(map_country_R, pad_width=1)[2:,1:-1] | \
           np.pad(map_country_R, pad_width=1)[1:-1,:-2] | np.pad(map_country_R, pad_width=1)[1:-1,2:]
border_G = np.pad(map_country_G, pad_width=1)[:-2,1:-1] | np.pad(map_country_G, pad_width=1)[2:,1:-1] | \
           np.pad(map_country_G, pad_width=1)[1:-1,:-2] | np.pad(map_country_G, pad_width=1)[1:-1,2:]
water = (data == 0)

# Get coordinates
coords_border_R = np.argwhere(border_R & water)
coords_border_G = np.argwhere(border_G & water)

# Compute the minimum bridge length
bridge_length = compute_bridge_length(data, coords_border_R, coords_border_G)

# Write output to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial import cKDTree as KDTree

# Read data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, list(line.strip()))) for line in file.readlines()], dtype=int)

# Identify islands for countries R, G, and B using labeling
map_country_R = (data == 1)
map_country_G = (data == 2)
map_country_B = (data == 3)

# Use label function to count the islands for each country
_, num_islands_R = label(map_country_R)
_, num_islands_G = label(map_country_G)
_, num_islands_B = label(map_country_B)

# Find the coordinates of the borders of the islands
borders_R = np.pad(map_country_R, 1)[:-2, 1:-1] | np.pad(map_country_R, 1)[2:, 1:-1] | \
             np.pad(map_country_R, 1)[1:-1, :-2] | np.pad(map_country_R, 1)[1:-1, 2:]
borders_G = np.pad(map_country_G, 1)[:-2, 1:-1] | np.pad(map_country_G, 1)[2:, 1:-1] | \
             np.pad(map_country_G, 1)[1:-1, :-2] | np.pad(map_country_G, 1)[1:-1, 2:]

# Get the coordinates of water adjacent to borders of R and G
coords_water_adjacent_R = np.argwhere(borders_R & ~map_country_R)
coords_water_adjacent_G = np.argwhere(borders_G & ~map_country_G)

# Create KD Trees for efficient nearest neighbor search
tree_R = KDTree(coords_water_adjacent_R)
tree_G = KDTree(coords_water_adjacent_G)

# Get the minimum distance from each water point near R to the nearest water point near G
distances, _ = tree_R.query(coords_water_adjacent_G)
bridge_length = int(distances.min()) + 1  # Add 1 to account for the actual distance between the land masses

# Write output to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Read data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, line.strip())) for line in file], dtype=np.int32)

# Function to find the coordinates of all points adjacent to water
def find_adjacent_to_water(map_data, land_value):
    adjacent_coords = []
    for i in range(n):
        for j in range(m):
            if map_data[i, j] == land_value:
                for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                    if 0 <= i + di < n and 0 <= j + dj < m and map_data[i + di, j + dj] == 0:
                        adjacent_coords.append((i + di, j + dj))
    return np.array(adjacent_coords)

# Function to label islands and count them
def label_and_count_islands(map_data, land_value):
    labels, num_features = label(map_data == land_value)
    return num_features

# Label and count islands for each country
num_islands_R = label_and_count_islands(map_data, 1)
num_islands_G = label_and_count_islands(map_data, 2)
num_islands_B = label_and_count_islands(map_data, 3)

# Find the coordinates of points adjacent to water for countries R and G
adjacent_to_water_R = find_adjacent_to_water(map_data, 1)
adjacent_to_water_G = find_adjacent_to_water(map_data, 2)

# Compute the minimum distance between two sets of points
if adjacent_to_water_R.size and adjacent_to_water_G.size:
    distances = cdist(adjacent_to_water_R, adjacent_to_water_G, 'cityblock') - 1
    bridge_length = int(distances.min())
else:
    bridge_length = -1  # There is no possible bridge

# Write output to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Auxiliary functions to find connected components and minimum bridge length
def find_islands(map_data, label_value):
    structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]  # Define connectivity structure
    labeled, n_islands = label(map_data == label_value, structure=structure)
    return labeled, n_islands

def find_border(map_data, label_data, label_value):
    border_mask = ((map_data == 0) & (
        (np.roll(label_data == label_value, 1, axis=0)) |
        (np.roll(label_data == label_value, -1, axis=0)) |
        (np.roll(label_data == label_value, 1, axis=1)) |
        (np.roll(label_data == label_value, -1, axis=1))
    ))
    return np.argwhere(border_mask)

def find_bridge_length(border_R, border_G):
    min_length = np.inf
    for r in border_R:
        for g in border_G:
            length = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if length < min_length:
                min_length = length
    return min_length

# Read data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, line.strip())) for line in file])

# Find islands and corresponding labels for each country
_, num_islands_R = find_islands(map_data, 1)
_, num_islands_G = find_islands(map_data, 2)
_, num_islands_B = find_islands(map_data, 3)

# Find the borders of the islands for R and G
labeled_R, _ = find_islands(map_data, 1)
labeled_G, _ = find_islands(map_data, 2)
border_R = find_border(map_data, labeled_R, 1)
border_G = find_border(map_data, labeled_G, 2)

# Calculate minimum bridge length
bridge_length = find_bridge_length(border_R, border_G)

# Write output to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Helper function to determine the minimum bridge length
def min_bridge_length(coords_R, coords_G):
    min_length = np.inf
    for r in coords_R:
        for g in coords_G:
            # Calculate Manhattan distance (subtract 1 because the end points should not count)
            length = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if length < min_length:
                min_length = length
    return min_length

# Read the map data from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, line.strip())) for line in file.readlines()])

# Initialize island counts
island_counts = {1: 0, 2: 0, 3: 0}

# Find islands and count them for each country R, G, and B
for country_code in [1, 2, 3]:
    labeled_islands, num_islands = label(map_data == country_code)
    island_counts[country_code] = num_islands

# Find coordinates bordering water for countries R and G
border_coords_R = np.argwhere((map_data == 0) & (np.roll(map_data == 1, 1, 0) | np.roll(map_data == 1, -1, 0) |
                                                  np.roll(map_data == 1, 1, 1) | np.roll(map_data == 1, -1, 1)))
border_coords_G = np.argwhere((map_data == 0) & (np.roll(map_data == 2, 1, 0) | np.roll(map_data == 2, -1, 0) |
                                                  np.roll(map_data == 2, 1, 1) | np.roll(map_data == 2, -1, 1)))

# Compute the minimum bridge length
bridge_len = min_bridge_length(border_coords_R, border_coords_G)

# Write the island counts and minimum bridge length to the output file
with open('insule.out', 'w') as file:
    file.write(f"{island_counts[1]} {island_counts[2]} {island_counts[3]} {bridge_len}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure

# Function to find coordinates adjacent to water
def adjacent_to_water(map_data, value):
    structure = generate_binary_structure(2, 1)
    dilated = label(map_data == value, structure)[0]
    eroded = label(map_data == value, structure=structure)[0]
    border = dilated - eroded
    water_adjacent = (border > 0) & (map_data == 0)
    return np.argwhere(water_adjacent)

# Function to find bridge length given coordinates adjacent to water
def bridge_length(coords_R, coords_G):
    min_length = np.inf
    for r in coords_R:
        for g in coords_G:
            dist = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if dist < min_length:
                min_length = dist
    return min_length

# Read map data
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().split())
    map_data = np.array([list(map(int, list(line.strip()))) for line in f], dtype=np.int8)

# Count islands
structure = np.ones((3, 3), dtype=np.int)
_, num_islands_R = label(map_data == 1, structure=structure)
_, num_islands_G = label(map_data == 2, structure=structure)
_, num_islands_B = label(map_data == 3, structure=structure)

# Find coordinates adjacent to water for islands R and G
coords_R = adjacent_to_water(map_data, 1)
coords_G = adjacent_to_water(map_data, 2)

# Find minimum bridge length
min_length = bridge_length(coords_R, coords_G)

# Write results
with open('insule.out', 'w') as f:
    f.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {min_length}\n")
```
```
