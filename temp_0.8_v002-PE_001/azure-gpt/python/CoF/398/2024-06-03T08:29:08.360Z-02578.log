---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Helper function to find islands and calculate distances between R and G islands
def process_map(data):
    # Label the islands for R, G, and B separately
    structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])  # Connectivity structure
    R_islands, num_R = label(data == 1, structure=structure)
    G_islands, num_G = label(data == 2, structure=structure)
    B_islands, num_B = label(data == 3, structure=structure)

    # Find the edge coordinates for each island of R and G
    R_edges = np.argwhere((R_islands > 0) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))
    G_edges = np.argwhere((G_islands > 0) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))
    
    # Calculate distance only if there are edges to connect
    if R_edges.size > 0 and G_edges.size > 0:
        # Compute all pairwise Euclidean distances and subtract 1 to get the bridge length
        distances = cdist(R_edges, G_edges, metric='cityblock') - 1
        min_distance = distances.min()
    else:
        min_distance = np.inf

    return num_R, num_G, num_B, int(min_distance)

# Read data from file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])

# Process the data
NR, NG, NB, Lg = process_map(map_data)

# Write output to file
with open('insule.out', 'w') as file:
    file.write(f'{NR} {NG} {NB} {Lg}\n')
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial import cKDTree

# Helper function to find islands and calculate distances between R and G islands
def process_map(data):
    # Label the islands for R, G, and B separately
    structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])  # Connectivity structure
    R_islands, num_R = label(data == 1, structure=structure)
    G_islands, num_G = label(data == 2, structure=structure)
    B_islands, num_B = label(data == 3, structure=structure)

    # Find the coordinates of the water zones bordering R and G islands
    R_borders = np.argwhere((R_islands > 0) & (np.roll(data, 1, 0) == 0))
    R_borders = np.vstack((R_borders, np.argwhere((R_islands > 0) & (np.roll(data, -1, 0) == 0))))
    R_borders = np.vstack((R_borders, np.argwhere((R_islands > 0) & (np.roll(data, 1, 1) == 0))))
    R_borders = np.vstack((R_borders, np.argwhere((R_islands > 0) & (np.roll(data, -1, 1) == 0))))

    G_borders = np.argwhere((G_islands > 0) & (np.roll(data, 1, 0) == 0))
    G_borders = np.vstack((G_borders, np.argwhere((G_islands > 0) & (np.roll(data, -1, 0) == 0))))
    G_borders = np.vstack((G_borders, np.argwhere((G_islands > 0) & (np.roll(data, 1, 1) == 0))))
    G_borders = np.vstack((G_borders, np.argwhere((G_islands > 0) & (np.roll(data, -1, 1) == 0))))

    # Remove duplicates
    R_borders = np.unique(R_borders, axis=0)
    G_borders = np.unique(G_borders, axis=0)

    # Find the minimum distance between R and G borders using KDTree
    R_tree = cKDTree(R_borders)
    min_distance, _ = R_tree.query(G_borders, k=1)
    bridge_length = np.ceil(min_distance).astype(int)

    return num_R, num_G, num_B, bridge_length

# Read data from file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])

# Process the data
NR, NG, NB, Lg = process_map(map_data)

# Write output to file
with open('insule.out', 'w') as file:
    file.write(f'{NR} {NG} {NB} {Lg}\n')
```
```

---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Helper function to find islands for a given country
def find_islands(data, country):
    # Define the structure for island detection (4-connectivity)
    structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    # Label the islands and count them
    labeled, num_features = label(data == country, structure=structure)
    return labeled, num_features

# Helper function to find the shortest bridge
def find_shortest_bridge(R, G, water):
    min_bridge = None
    for r in R:
        for g in G:
            if water[tuple(r)] and water[tuple(g)]:
                bridge_length = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
                if min_bridge is None or bridge_length < min_bridge:
                    min_bridge = bridge_length
    return min_bridge

# Read data from file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])

# Find islands for each country
R_labeled, NR = find_islands(data, 1)
G_labeled, NG = find_islands(data, 2)
B_labeled, NB = find_islands(data, 3)

# Find border coordinates for countries R and G
R_borders = np.argwhere((R_labeled > 0) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))
G_borders = np.argwhere((G_labeled > 0) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))

# Find the shortest bridge
water = data == 0
shortest_bridge = find_shortest_bridge(R_borders, G_borders, water)

# Write output to file
with open('insule.out', 'w') as file:
    file.write(f'{NR} {NG} {NB} {shortest_bridge}\n')
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure

def find_islands_and_min_bridge(matrix):
    # Define a binary structure for connectivity
    structure = generate_binary_structure(2, 1)
    
    # Label the islands for each country
    r_islands, nr = label(matrix == 1, structure=structure)
    g_islands, ng = label(matrix == 2, structure=structure)
    b_islands, nb = label(matrix == 3, structure=structure)
    
    # Find water borders around the R and G islands
    water = (matrix == 0)
    r_borders = np.argwhere((r_islands > 0) & (np.pad(water, ((1, 1), (1, 1)), mode='constant', constant_values=0)[1:-1, 1:-1]))
    g_borders = np.argwhere((g_islands > 0) & (np.pad(water, ((1, 1), (1, 1)), mode='constant', constant_values=0)[1:-1, 1:-1]))

    # Initialize minimum bridge length to a large number
    min_bridge = np.inf
    # Calculate the minimum bridge length
    for r in r_borders:
        for g in g_borders:
            distance = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if distance < min_bridge:
                min_bridge = distance

    # If no bridge can be built, set length to 0 (problem statement guarantees a solution)
    if min_bridge == np.inf:
        min_bridge = 0
    
    return nr, ng, nb, min_bridge

# Read the input file
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().split())
    matrix = np.array([list(map(int, list(f.readline().strip()))) for _ in range(n)])

# Process the matrix to find the number of islands for each country and the minimum bridge length
nr, ng, nb, min_bridge = find_islands_and_min_bridge(matrix)

# Write the output to file
with open('insule.out', 'w') as f:
    f.write(f"{nr} {ng} {nb} {min_bridge}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, find_objects
from scipy.spatial.distance import cityblock

# Read the map from the file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    map_data = np.array([list(map(int, file.readline().strip())) for _ in range(n)])

# Function to label the islands and count them
def count_islands(map_data, land_value):
    structure = np.ones((3, 3), dtype=np.int)  # 8-connectivity
    binary_island = (map_data == land_value)
    labeled_island, num_features = label(binary_island, structure=structure)
    return labeled_island, num_features

# Function to find the shortest path between R and G islands
def find_shortest_path(map_data, R_label, G_label):
    water = (map_data == 0)
    water_positions = np.argwhere(water)
    shortest_dist = np.inf
    
    # Search for the shortest path from each water cell
    for pos in water_positions:
        # Check adjacency to R and G islands using cityblock (Manhattan) distance
        dist_to_R = cityblock(pos, np.argwhere(R_label))
        dist_to_G = cityblock(pos, np.argwhere(G_label))
        
        # Calculate the total distance as if a bridge is made from R to G
        total_dist = dist_to_R + dist_to_G - 1  # Subtract 1 because the water cell is counted twice
        
        # Update shortest_dist if a shorter path is found
        if total_dist < shortest_dist:
            shortest_dist = total_dist
            
    return int(shortest_dist)

# Label the islands and count them
R_label, NR = count_islands(map_data, 1)
G_label, NG = count_islands(map_data, 2)
B_label, NB = count_islands(map_data, 3)

# Find the shortest path
shortest_path = find_shortest_path(map_data, R_label, G_label)

# Write the result to the file
with open('insule.out', 'w') as file:
    file.write(f"{NR} {NG} {NB} {shortest_path}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Function to label the islands for each country
def label_islands(matrix, land_value):
    structure = [[0, 1, 0], [1, 1, 1], [0, 1, 0]]  # 4-connectivity
    labeled, num_features = label(matrix == land_value, structure=structure)
    return labeled, num_features

# Function to find the shortest bridge
def find_shortest_bridge(matrix, R, G):
    water = (matrix == 0)
    R_edges = np.argwhere((R > 0) & water)
    G_edges = np.argwhere((G > 0) & water)

    min_distance = np.inf
    for r in R_edges:
        for g in G_edges:
            dist = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if dist < min_distance:
                min_distance = dist
    return min_distance

# Read input from file
with open('insule.in') as file:
    n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, line.strip())) for line in file.readlines()])

# Label islands for each country
R, num_R = label_islands(matrix, 1)
G, num_G = label_islands(matrix, 2)
B, num_B = label_islands(matrix, 3)

# Find the shortest bridge
shortest_bridge = find_shortest_bridge(matrix, R, G)

# Write output to file
with open('insule.out', 'w') as file:
    file.write(f'{num_R} {num_G} {num_B} {shortest_bridge}\n')
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Function to find the shortest bridge length between R and G islands
def find_bridge_length(matrix, r_edges, g_edges):
    min_length = np.inf
    for r_edge in r_edges:
        for g_edge in g_edges:
            # Calculate manhattan distance and subtract 1 since it's a bridge
            length = abs(r_edge[0] - g_edge[0]) + abs(r_edge[1] - g_edge[1]) - 1
            if length < min_length:
                min_length = length
    return min_length

# Read from file
with open('insule.in', 'r') as f_in:
    n, m = map(int, f_in.readline().split())
    matrix = np.array([list(map(int, line.strip())) for line in f_in])

# Binary maps for each country
country_map = {1: np.zeros_like(matrix), 2: np.zeros_like(matrix), 3: np.zeros_like(matrix)}
for country in country_map:
    country_map[country][matrix == country] = 1

# Label the islands for each country and find the borders for R and G
island_counts = {}
edges = {}
for country in [1, 2, 3]:
    island_counts[country], features = label(country_map[country])
    if country in [1, 2]:  # Only R and G need edges for the bridge
        edges[country] = np.argwhere(
            np.pad(country_map[country], 1)[:-2, 1:-1] |  # North
            np.pad(country_map[country], 1)[2:, 1:-1] |   # South
            np.pad(country_map[country], 1)[1:-1, :-2] |  # West
            np.pad(country_map[country], 1)[1:-1, 2:]     # East
        )

# Find the minimum bridge length
bridge_length = find_bridge_length(matrix, edges[1], edges[2])

# Number of islands for each country
num_r, num_g, num_b = (np.max(island_counts[1]), np.max(island_counts[2]), np.max(island_counts[3]))

# Write to file
with open('insule.out', 'w') as f_out:
    f_out.write(f"{num_r} {num_g} {num_b} {bridge_length}\n")
```
```
