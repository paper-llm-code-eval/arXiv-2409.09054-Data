---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Read the data from the file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, list(line.strip()))) for line in file.readlines()])

# Label islands for each country
labels_R, num_features_R = label(data == 1)
labels_G, num_features_G = label(data == 2)
labels_B, num_features_B = label(data == 3)

# Determine potential bridge starting points for R and G
border_R = np.pad(labels_R, pad_width=1, mode='constant', constant_values=0)[1:-1, 1:-1] != labels_R
border_G = np.pad(labels_G, pad_width=1, mode='constant', constant_values=0)[1:-1, 1:-1] != labels_G
potential_starts = np.where(data == 0)  # Positions of water

# Create sets of coordinates for R and G border positions
coords_R = set(zip(*np.where(border_R & (data == 1))))
coords_G = set(zip(*np.where(border_G & (data == 2))))

# Calculate distances from each potential start position to R and G coords
min_bridge_length = np.inf
for y, x in zip(*potential_starts):
    distances_R = np.array([abs(y-ry) + abs(x-rx) - 1 for ry, rx in coords_R])
    distances_G = np.array([abs(y-gy) + abs(x-gx) - 1 for gy, gx in coords_G])
    if distances_R.size > 0 and distances_G.size > 0:
        local_min = np.add.outer(distances_R, distances_G).min()  # Outer sum to get all combinations
        if local_min < min_bridge_length:
            min_bridge_length = local_min

# Write the output to the file
with open('insule.out', 'w') as file:
    file.write(f"{num_features_R} {num_features_G} {num_features_B} {min_bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Function to find the minimum bridge length
def find_min_bridge_length(water_positions, land_positions_R, land_positions_G):
    min_length = np.inf
    for water_position in water_positions:
        distances_R = np.abs(land_positions_R - water_position).sum(axis=1) - 1
        distances_G = np.abs(land_positions_G - water_position).sum(axis=1) - 1
        min_length = min(min_length, np.min(distances_R + distances_G))
    return min_length

# Read the input data
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    data = np.array([list(map(int, line.strip())) for line in file])

# Find the number of islands for each country
island_R, num_islands_R = label(data == 1)
island_G, num_islands_G = label(data == 2)
island_B, num_islands_B = label(data == 3)

# Find the water positions and border positions for R and G
water_positions = np.argwhere(data == 0)
border_positions_R = np.argwhere((data == 1) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))
border_positions_G = np.argwhere((data == 2) & (np.roll(data, 1, 0) == 0 | np.roll(data, -1, 0) == 0 | np.roll(data, 1, 1) == 0 | np.roll(data, -1, 1) == 0))

# Calculate the minimum bridge length
min_bridge_length = find_min_bridge_length(water_positions, border_positions_R, border_positions_G)

# Write the output data
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {min_bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

def compute_min_bridge_length(r_border, g_border, water):
    r_coords = np.argwhere(r_border)
    g_coords = np.argwhere(g_border)
    min_dist = np.inf
    for r in r_coords:
        dists = np.abs(g_coords - r).sum(axis=1) - 1
        min_dist = min(np.min(dists), min_dist)
    return min_dist if min_dist != np.inf else 0

# Read from 'insule.in'
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().strip().split())
    matrix = np.array([list(map(int, list(f.readline().strip()))) for _ in range(n)])

# Label the islands and find borders for R and G
labels_R, num_islands_R = label(matrix == 1)
labels_G, num_islands_G = label(matrix == 2)
labels_B, num_islands_B = label(matrix == 3)
r_border = np.pad(labels_R, 1, mode='constant') != np.pad(labels_R, 1, mode='constant', constant_values=-1)
g_border = np.pad(labels_G, 1, mode='constant') != np.pad(labels_G, 1, mode='constant', constant_values=-1)
water = matrix == 0

# Compute the minimum bridge length
bridge_length = compute_min_bridge_length(r_border, g_border, water)

# Write to 'insule.out'
with open('insule.out', 'w') as f:
    f.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Understood, I will provide a Python solution that reads from "insule.in" and writes to "insule.out", without using `input()` or `print()`. Here's the rewritten solution in a Markdown code block:

```python
import numpy as np
from scipy.ndimage import label, find_objects

# Helper function to find minimum bridge length using BFS
def bfs_min_bridge_length(water, r_edges, g_edges):
    queue = [(pos, 0) for pos in r_edges]  # Positions and distances
    visited = set(r_edges)
    while queue:
        (y, x), dist = queue.pop(0)
        for dy, dx in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            ny, nx = y + dy, x + dx
            if (ny, nx) in g_edges:
                return dist
            if 0 <= ny < n and 0 <= nx < m and water[ny, nx] and (ny, nx) not in visited:
                visited.add((ny, nx))
                queue.append(((ny, nx), dist + 1))
    return -1  # No bridge possible

# Read data from "insule.in"
with open('insule.in', 'r') as f_in:
    n, m = map(int, f_in.readline().split())
    matrix = np.array([list(map(int, list(line.strip()))) for line in f_in], dtype=np.int32)

# Find number of islands for each country
_, num_islands_R = label(matrix == 1)
_, num_islands_G = label(matrix == 2)
_, num_islands_B = label(matrix == 3)

# Mark the edges of islands R and G
edges_R = np.pad(matrix == 1, 1) ^ (np.pad(matrix == 1, 1, constant_values=1))
edges_G = np.pad(matrix == 2, 1) ^ (np.pad(matrix == 2, 1, constant_values=2))
r_edges = set(zip(*np.nonzero(edges_R[1:-1, 1:-1])))
g_edges = set(zip(*np.nonzero(edges_G[1:-1, 1:-1])))

# Find minimum bridge length
water = matrix == 0
min_bridge_length = bfs_min_bridge_length(water, r_edges, g_edges)
if min_bridge_length == -1:  # If no bridge is possible, default to 0
    min_bridge_length = 0

# Write data to "insule.out"
with open('insule.out', 'w') as f_out:
    f_out.write(f"{num_islands_R} {num_islands_G} {num_islands_B} {min_bridge_length}\n")
```

This code should be saved in a `.py` file and executed in an environment where the files "insule.in" and "insule.out" are accessible. It adheres to the memory limitations by using efficient data structures and avoiding unnecessary memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
