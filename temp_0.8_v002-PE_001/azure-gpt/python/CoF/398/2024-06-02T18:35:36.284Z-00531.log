---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Read the input file
with open('insule.in') as file:
    n, m = map(int, file.readline().split())
    data = file.read().splitlines()
    matrix = np.array([[int(cell) for cell in row] for row in data], dtype=np.int32)

# Label each island for R, G, and B countries (1, 2, and 3 respectively)
islands_r, num_islands_r = label(matrix == 1, structure=[[0, 1, 0], [1, 1, 1], [0, 1, 0]])
islands_g, num_islands_g = label(matrix == 2, structure=[[0, 1, 0], [1, 1, 1], [0, 1, 0]])
islands_b, num_islands_b = label(matrix == 3, structure=[[0, 1, 0], [1, 1, 1], [0, 1, 0]])

# Find the border points of R and G islands
border_r = np.argwhere((matrix == 0) & (np.isin(matrix, [1], mode='wrap')))
border_g = np.argwhere((matrix == 0) & (np.isin(matrix, [2], mode='wrap')))

# Compute the pairwise Manhattan distances between border points of R and G islands
distances = cdist(border_r, border_g, metric='cityblock') - 1
min_bridge_length = distances.min()

# Write the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {min_bridge_length}\n")
```
```

This solution does the following:
1. Reads the input from a file named `insule.in` and stores the data in a NumPy array.
2. Uses the `label` function from `scipy.ndimage` to identify islands belonging to countries R, G, and B.
3. Finds the border points (adjacent to water) for islands R and G using array operations.
4. Calculates the pairwise Manhattan distances between the border points of islands R and G using the `cdist` function from `scipy.spatial.distance`.
5. Finds the minimum distance which represents the minimum bridge length.
6. Writes the output to a file named `insule.out`.
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial import cKDTree

def find_islands_and_borders(matrix, country_val):
    # Label each island for the given country value
    islands, num_islands = label(matrix == country_val, structure=[[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    
    # Find the border points of the islands (next to water)
    borders = np.argwhere((matrix == 0) & (np.roll(matrix == country_val, 1, axis=0) |
                                           np.roll(matrix == country_val, -1, axis=0) |
                                           np.roll(matrix == country_val, 1, axis=1) |
                                           np.roll(matrix == country_val, -1, axis=1)))
    return num_islands, borders

def minimum_bridge_length(border_r, border_g):
    # Create KD-Trees for the border points
    tree_r = cKDTree(border_r)
    tree_g = cKDTree(border_g)
    
    # Query the minimum distance between any pair of R and G borders
    distances, _ = tree_r.query(border_g, k=1)
    
    # Minus 1 because we need to exclude either start or end point as it is a land
    return int(np.min(distances) - 1)

# Read the input file
with open('insule.in') as file:
    n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)], dtype=np.int32)

# Find islands and borders for R, G, and B
num_islands_r, border_r = find_islands_and_borders(matrix, 1)
num_islands_g, border_g = find_islands_and_borders(matrix, 2)
num_islands_b, _ = find_islands_and_borders(matrix, 3)

# Calculate the minimum bridge length
min_bridge_length = minimum_bridge_length(border_r, border_g)

# Write the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {min_bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure

def load_matrix(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        return np.array([list(map(int, line.strip())) for line in file], dtype=np.int8)

def find_islands(matrix, land_val):
    structure = generate_binary_structure(2, 2)
    labeled, n_islands = label(matrix == land_val, structure=structure)
    return labeled, n_islands

def find_adjacent_water_coords(labeled_island, matrix, land_val):
    water_coords = np.transpose(np.nonzero(matrix == 0))
    adjacents = []

    for coord in water_coords:
        r, c = coord
        if r > 0 and labeled_island[r-1, c] > 0:
            adjacents.append(coord)
        elif r < labeled_island.shape[0] - 1 and labeled_island[r+1, c] > 0:
            adjacents.append(coord)
        elif c > 0 and labeled_island[r, c-1] > 0:
            adjacents.append(coord)
        elif c < labeled_island.shape[1] - 1 and labeled_island[r, c+1] > 0:
            adjacents.append(coord)

    return np.array(adjacents)

def find_min_bridge_length(r_coords, g_coords):
    min_length = np.inf
    for r in r_coords:
        for g in g_coords:
            dist = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
            if dist < min_length:
                min_length = dist
    return min_length

matrix = load_matrix('insule.in')
labeled_r, nr = find_islands(matrix, 1)
labeled_g, ng = find_islands(matrix, 2)
_, nb = find_islands(matrix, 3)

r_coords = find_adjacent_water_coords(labeled_r, matrix, 1)
g_coords = find_adjacent_water_coords(labeled_g, matrix, 2)
min_bridge_length = find_min_bridge_length(r_coords, g_coords)

with open('insule.out', 'w') as file:
    file.write(f"{nr} {ng} {nb} {min_bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

def read_map(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        return np.array([[int(i) for i in list(line.strip())] for line in file], dtype=np.int8), n, m

def find_islands(matrix, value):
    structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    labeled, num_features = label(matrix == value, structure=structure)
    return labeled, num_features

def find_shortest_bridge(matrix, r_islands, g_islands, n, m):
    shortest_bridge = m + n  # start with the max possible distance
    for i in range(n):
        for j in range(m):
            if matrix[i][j] == 0:
                r_min = min([abs(i - x) + abs(j - y) - 1 for x in range(n) for y in range(m) if r_islands[x][y] > 0], default=shortest_bridge)
                g_min = min([abs(i - x) + abs(j - y) - 1 for x in range(n) for y in range(m) if g_islands[x][y] > 0], default=shortest_bridge)
                if r_min + g_min < shortest_bridge:
                    shortest_bridge = r_min + g_min
    return shortest_bridge if shortest_bridge < m + n else -1

matrix, n, m = read_map('insule.in')
r_islands, num_r_islands = find_islands(matrix, 1)
g_islands, num_g_islands = find_islands(matrix, 2)
_, num_b_islands = find_islands(matrix, 3)

bridge_length = find_shortest_bridge(matrix, r_islands, g_islands, n, m)

with open('insule.out', 'w') as file:
    file.write(f"{num_r_islands} {num_g_islands} {num_b_islands} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

def read_input(file_path):
    with open(file_path, 'r') as file:
        n, m = map(int, file.readline().split())
        data = np.array([list(map(int, line.strip())) for line in file], np.int8)
    return data, n, m

def find_islands(matrix, value):
    struct = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    return label(matrix == value, structure=struct)

def shortest_bridge(matrix, islands_r, islands_g):
    min_distance = np.inf
    water_positions = np.argwhere(matrix == 0)
    for water in water_positions:
        r, c = water
        for dr in [-1, 1, 0, 0]:
            for dc in [0, 0, -1, 1]:
                nr, nc = r + dr, c + dc
                if 0 <= nr < matrix.shape[0] and 0 <= nc < matrix.shape[1]:
                    if islands_r[nr, nc] != 0:
                        for gr, gc in [(r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)]:
                            if 0 <= gr < matrix.shape[0] and 0 <= gc < matrix.shape[1]:
                                if islands_g[gr, gc] != 0:
                                    distance = abs(nr - gr) + abs(nc - gc) - 1
                                    if distance < min_distance:
                                        min_distance = distance
    return min_distance if min_distance != np.inf else -1

def write_output(file_path, nr, ng, nb, bridge_len):
    with open(file_path, 'w') as file:
        file.write(f"{nr} {ng} {nb} {bridge_len}\n")

# Main process
matrix, n, m = read_input('insule.in')
islands_r, nr = find_islands(matrix, 1)
islands_g, ng = find_islands(matrix, 2)
_, nb = find_islands(matrix, 3)
bridge_len = shortest_bridge(matrix, islands_r[0], islands_g[0])
write_output('insule.out', nr, ng, nb, bridge_len)
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure

# Load the matrix from the file
def load_matrix(filename):
    with open(filename, 'r') as f:
        n, m = map(int, f.readline().split())
        matrix = np.array([list(map(int, line.strip())) for line in f], dtype=np.int8)
    return matrix

# Find islands and count them
def count_islands(matrix, land_value):
    struct = generate_binary_structure(2, 1)
    filtered = matrix == land_value
    labeled, num_features = label(filtered, structure=struct)
    return labeled, num_features

# Find the minimum bridge length by checking neighbors
def find_bridge(matrix, r_islands, g_islands):
    min_length = np.inf
    water = np.argwhere(matrix == 0)
    for wx, wy in water:
        if wx > 0 and r_islands[wx - 1, wy] > 0 or \
           wx < matrix.shape[0] - 1 and r_islands[wx + 1, wy] > 0 or \
           wy > 0 and r_islands[wx, wy - 1] > 0 or \
           wy < matrix.shape[1] - 1 and r_islands[wx, wy + 1] > 0:
            for gx, gy in water:
                if gx > 0 and g_islands[gx - 1, gy] > 0 or \
                   gx < matrix.shape[0] - 1 and g_islands[gx + 1, gy] > 0 or \
                   gy > 0 and g_islands[gx, gy - 1] > 0 or \
                   gy < matrix.shape[1] - 1 and g_islands[gx, gy + 1] > 0:
                    length = abs(wx - gx) + abs(wy - gy) - 1
                    if length < min_length:
                        min_length = length
    return min_length

# Read matrix
matrix = load_matrix('insule.in')

# Count islands
r_islands, nr = count_islands(matrix, 1)
g_islands, ng = count_islands(matrix, 2)
b_islands, nb = count_islands(matrix, 3)

# Find bridge
bridge_length = find_bridge(matrix, r_islands, g_islands)

# Write the result to the file
with open('insule.out', 'w') as f:
    f.write(f"{nr} {ng} {nb} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, generate_binary_structure
from scipy.spatial import distance

# Read the input from the file
def read_input(file_path):
    with open(file_path, 'r') as file:
        n, m = map(int, file.readline().split())
        matrix = np.array([list(map(int, file.readline().strip())) for _ in range(n)], dtype=np.int8)
    return matrix

# Label the islands for each country
def label_islands(matrix, land_id):
    struct = generate_binary_structure(2, 2)
    return label(matrix == land_id, structure=struct)

# Find the coordinates of water adjacent to land
def adjacent_water_coords(matrix, labels, land_id):
    water_coords = np.argwhere(matrix == 0)
    adj_coords = []
    for coord in water_coords:
        r, c = coord
        if (r > 0 and labels[r-1, c] == land_id) or \
           (r < labels.shape[0]-1 and labels[r+1, c] == land_id) or \
           (c > 0 and labels[r, c-1] == land_id) or \
           (c < labels.shape[1]-1 and labels[r, c+1] == land_id):
            adj_coords.append(coord)
    return adj_coords

# Find the minimum bridge length
def bridge_length(matrix, r_labels, g_labels):
    r_water = adjacent_water_coords(matrix, r_labels, 1)
    g_water = adjacent_water_coords(matrix, g_labels, 2)

    min_length = np.inf
    for rw in r_water:
        for gw in g_water:
            # Manhattan distance - 1 because the end points are adjacent to land
            dist = distance.cityblock(rw, gw) - 1
            if dist < min_length:
                min_length = dist
    return min_length

# Write the output to the file
def write_output(file_path, nr, ng, nb, lg):
    with open(file_path, 'w') as file:
        file.write(f"{nr} {ng} {nb} {lg}\n")

# Main logic
matrix = read_input('insule.in')
r_labels, nr = label_islands(matrix, 1)
g_labels, ng = label_islands(matrix, 2)
b_labels, nb = label_islands(matrix, 3)

lg = bridge_length(matrix, r_labels, g_labels)
write_output('insule.out', nr, ng, nb, lg)
```
```
