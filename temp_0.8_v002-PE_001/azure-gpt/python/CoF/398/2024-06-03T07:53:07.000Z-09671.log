---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Function to calculate the minimum bridge length
def min_bridge_length(land_map, n, m, lands_r, lands_g):
    min_length = np.inf
    for land_r in lands_r:
        for land_g in lands_g:
            # Compute manhattan distance between each pair
            distances = cdist(land_r, land_g, metric='cityblock') - 1
            min_length = min(min_length, distances.min())
    return min_length

# Function to label islands and find land coordinates
def label_and_coords(land_map, label_value):
    labeled, num_features = label(land_map == label_value)
    coords = []
    for i in range(1, num_features + 1):
        coords.append(np.argwhere(labeled == i))
    return num_features, coords

# Read input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    land_map = np.array([list(map(int, line.strip())) for line in file])

# Label islands and find coordinates for R and G
num_r, lands_r = label_and_coords(land_map, 1)
num_g, lands_g = label_and_coords(land_map, 2)
num_b, _ = label_and_coords(land_map, 3)

# Compute the minimum bridge length
bridge_length = min_bridge_length(land_map, n, m, lands_r, lands_g)

# Write output file
with open('insule.out', 'w') as file:
    file.write(f"{num_r} {num_g} {num_b} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Function to calculate the minimum bridge length
def min_bridge_length(land_map, lands_r, lands_g):
    water_map = (land_map == 0)
    min_length = np.inf
    for land_r in lands_r:
        for dr, dc in land_r:
            for land_g in lands_g:
                for dg, dc in land_g:
                    if water_map[dr, dc] and water_map[dg, dc]:
                        dist = abs(dg - dr) + abs(dc - dc) - 1
                        min_length = min(min_length, dist)
    return min_length

# Function to label islands and find land coordinates
def label_and_coords(land_map, label_value):
    labeled, num_features = label(land_map == label_value)
    coords = []
    for i in range(1, num_features + 1):
        coords.append(np.argwhere(labeled == i))
    return num_features, coords

# Read input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    land_map = np.array([list(map(int, list(line.strip()))) for line in file])

# Label islands and find coordinates for R, G, and B
num_r, lands_r = label_and_coords(land_map, 1)
num_g, lands_g = label_and_coords(land_map, 2)
num_b, _ = label_and_coords(land_map, 3)

# Convert lands_r and lands_g to list of coordinates for water adjacency checks
lands_r_coords = [tuple(coord) for land in lands_r for coord in land]
lands_g_coords = [tuple(coord) for land in lands_g for coord in land]

# Compute the minimum bridge length
bridge_length = min_bridge_length(land_map, lands_r_coords, lands_g_coords)

# Write output file
with open('insule.out', 'w') as file:
    file.write(f"{num_r} {num_g} {num_b} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.sparse.csgraph import shortest_path
from scipy.sparse import csr_matrix

# Function to extract the border coordinates of islands
def get_border_coords(labeled_map, label_num, n, m):
    borders = []
    for i in range(n):
        for j in range(m):
            if labeled_map[i, j] == label_num:
                for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                    if 0 <= i + di < n and 0 <= j + dj < m and labeled_map[i + di, j + dj] == 0:
                        borders.append((i, j))
                        break
    return borders

# Read input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    land_map = np.array([list(map(int, list(line.strip()))) for line in file])

# Label islands and count them
labeled, num_features = label(land_map > 0)
islands_r = np.sum(labeled == 1)
islands_g = np.sum(labeled == 2)
islands_b = np.sum(labeled == 3)

# Extract border coordinates of islands R and G
borders_r = get_border_coords(land_map, 1, n, m)
borders_g = get_border_coords(land_map, 2, n, m)

# Build graph for R and G border points
num_vertices = len(borders_r) + len(borders_g)
graph = np.zeros((num_vertices, num_vertices))
for i, (r1, c1) in enumerate(borders_r):
    for j, (r2, c2) in enumerate(borders_g, start=len(borders_r)):
        graph[i, j] = graph[j, i] = abs(r1 - r2) + abs(c1 - c2) - 1

# Compute shortest path
graph = csr_matrix(graph)
dist_matrix = shortest_path(csgraph=graph, directed=False)
bridge_length = int(dist_matrix[:len(borders_r), len(borders_r):].min())

# Write output file
with open('insule.out', 'w') as file:
    file.write(f"{islands_r} {islands_g} {islands_b} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Function to find the bordering water coordinates of a given island
def find_border_water(land_map, coords):
    border_water_coords = set()
    for x, y in coords:
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < land_map.shape[0] and 0 <= ny < land_map.shape[1] and land_map[nx, ny] == 0:
                border_water_coords.add((nx, ny))
    return border_water_coords

# Function to perform a breadth-first search to find the minimum bridge length
def bfs_min_bridge_length(land_map, water_coords_r, water_coords_g):
    visited = np.zeros_like(land_map, dtype=bool)
    queue = [(x, y, 0) for x, y in water_coords_r]  # (x, y, distance)
    for x, y in water_coords_r:
        visited[x, y] = True

    while queue:
        x, y, dist = queue.pop(0)
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if (nx, ny) in water_coords_g:
                return dist
            if 0 <= nx < land_map.shape[0] and 0 <= ny < land_map.shape[1]:
                if not visited[nx, ny] and land_map[nx, ny] == 0:
                    visited[nx, ny] = True
                    queue.append((nx, ny, dist + 1))
    return -1

# Read input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    land_map = np.array([[int(char) for char in line.strip()] for line in file])

# Label islands and count them per country
labeled_map, _ = label(land_map > 0)
islands_r = np.sum(labeled_map == 1)
islands_g = np.sum(labeled_map == 2)
islands_b = np.sum(labeled_map == 3)

# Find the bordering water coordinates for islands R and G
water_coords_r = find_border_water(land_map, np.argwhere(land_map == 1))
water_coords_g = find_border_water(land_map, np.argwhere(land_map == 2))

# Calculate the minimum bridge length
bridge_length = bfs_min_bridge_length(land_map, water_coords_r, water_coords_g)

# Write output file
with open('insule.out', 'w') as file:
    file.write(f"{islands_r} {islands_g} {islands_b} {bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
