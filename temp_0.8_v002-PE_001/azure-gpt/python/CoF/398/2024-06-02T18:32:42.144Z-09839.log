---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from scipy.ndimage import label
from scipy.ndimage import distance_transform_edt

# Read the map from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    archipelago = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])

# Function to find islands for a given country code
def find_islands(country_code):
    return label(archipelago == country_code)[1]

# Function to calculate the minimum bridge length
def min_bridge_length():
    # Create a binary map for water, R and G countries
    water_map = (archipelago == 0)
    r_map = (archipelago == 1)
    g_map = (archipelago == 2)
    
    # Calculate distance transform for R and G
    distance_r = distance_transform_edt(~r_map)
    distance_g = distance_transform_edt(~g_map)
    
    # Potential bridge locations are where water is present
    potential_bridges = water_map * (distance_r + distance_g)
    
    # The minimum length is the smallest sum of distances minus 2 (because we double-count the bridge start and end)
    bridge_length = potential_bridges[potential_bridges > 0].min() - 2
    return int(bridge_length)

# Find the number of islands for each country
nr = find_islands(1)
ng = find_islands(2)
nb = find_islands(3)

# Calculate the minimum length of the bridge
lg = min_bridge_length()

# Write the results to the output file
with open('insule.out', 'w') as file:
    file.write(f"{nr} {ng} {nb} {lg}\n")
```

This code reads the data from `insule.in`, processes the data to find the number of islands for each country, computes the minimum bridge length using the distance transform, and writes the results to `insule.out`. It uses NumPy and SciPy, which are efficient libraries for numerical computing in Python.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available. Since the instructions require using efficient libraries like numpy but the environment doesn't seem to support it, it's likely necessary to implement the logic without using numpy or scipy.

Given the memory constraints, I have to be careful about not creating large data structures. I will use standard Python lists to represent the matrix and perform the necessary operations.

Here's a rewritten solution that doesn't rely on external libraries:

```python
from collections import deque

# Function to perform BFS and count islands
def bfs_count_islands(matrix, rows, cols, land_value):
    visited = [[False]*cols for _ in range(rows)]
    islands = 0
    
    def bfs(r, c):
        q = deque([(r, c)])
        visited[r][c] = True
        while q:
            x, y = q.popleft()
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < rows and 0 <= ny < cols and not visited[nx][ny] and matrix[nx][ny] == land_value:
                    visited[nx][ny] = True
                    q.append((nx, ny))

    for i in range(rows):
        for j in range(cols):
            if matrix[i][j] == land_value and not visited[i][j]:
                bfs(i, j)
                islands += 1
    
    return islands

# Function to calculate the minimum bridge length
def min_bridge_length(matrix, rows, cols):
    r_border = [(i, j) for i in range(rows) for j in range(cols) if matrix[i][j] == 1]
    g_border = [(i, j) for i in range(rows) for j in range(cols) if matrix[i][j] == 2]
    
    min_length = rows + cols
    
    for rx, ry in r_border:
        for gx, gy in g_border:
            if matrix[rx][ry] == 1 and matrix[gx][gy] == 2:
                distance = abs(rx - gx) + abs(ry - gy) - 1
                min_length = min(min_length, distance)
    
    return min_length

# Read the map from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    archipelago = [list(map(int, list(file.readline().strip()))) for _ in range(n)]

# Find the number of islands for each country
nr = bfs_count_islands(archipelago, n, m, 1)
ng = bfs_count_islands(archipelago, n, m, 2)
nb = bfs_count_islands(archipelago, n, m, 3)

# Calculate the minimum length of the bridge
lg = min_bridge_length(archipelago, n, m)

# Write the results to the output file
with open('insule.out', 'w') as file:
    file.write(f"{nr} {ng} {nb} {lg}\n")
```

This solution should work within the constraints provided, using only standard Python libraries and ensuring that we stay within the memory limit. It uses breadth-first search (BFS) to count the number of islands and a double loop to calculate the minimum bridge length.
---------- user ----------


Program result did not match expected result.
Input data:
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```
Expected output:
```
4 2 3 4
```
Found output:
```
4 2 3 0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
