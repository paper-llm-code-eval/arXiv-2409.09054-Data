---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.sparse.csgraph import dijkstra
from scipy.sparse import csr_matrix

# Load the data
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().split())
    data = np.array([list(map(int, list(f.readline().strip()))) for _ in range(n)])

# Label the islands for countries R, G, B
labeled_R, num_R = label(data == 1)
labeled_G, num_G = label(data == 2)
labeled_B, num_B = label(data == 3)

# Create adjacency matrix for finding shortest path
adj_matrix = np.ones((n * m, n * m)) * np.inf

# Map 2D grid to 1D for adjacency matrix
def grid_to_id(row, col):
    return row * m + col

# Add edges for water cells
for row in range(n):
    for col in range(m):
        if data[row, col] == 0:
            node_id = grid_to_id(row, col)
            for drow, dcol in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nrow, ncol = row + drow, col + dcol
                if 0 <= nrow < n and 0 <= ncol < m and data[nrow, ncol] == 0:
                    neighbor_id = grid_to_id(nrow, ncol)
                    adj_matrix[node_id][neighbor_id] = 1

# Sparse matrix for memory efficiency
sparse_matrix = csr_matrix(adj_matrix)

# Find minimum distance from R to G using Dijkstra's algorithm
min_dist = np.inf
for row in range(n):
    for col in range(m):
        if data[row, col] == 0:
            for drow, dcol in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nrow, ncol = row + drow, col + dcol
                if 0 <= nrow < n and 0 <= ncol < m:
                    if labeled_R[nrow, ncol] > 0:
                        distances = dijkstra(sparse_matrix, indices=grid_to_id(row, col))
                        for g_row in range(n):
                            for g_col in range(m):
                                if labeled_G[g_row, g_col] > 0 and data[g_row][g_col] == 2:
                                    g_id = grid_to_id(g_row, g_col)
                                    dist = distances[g_id]
                                    if dist != np.inf:
                                        min_dist = min(min_dist, int(dist))

# Write the output
with open('insule.out', 'w') as f:
    f.write('{} {} {} {}\n'.format(num_R, num_G, num_B, min_dist))
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from scipy.ndimage import label
from queue import Queue

# Function to perform BFS and find shortest bridge length
def bfs(data, start_nodes, target):
    visited = set(start_nodes)
    queue = Queue()
    for node in start_nodes:
        queue.put((node, 0))  # (position, distance)

    while not queue.empty():
        (row, col), dist = queue.get()
        if data[row, col] == target:
            return dist - 1  # Subtract one because we don't count the starting water cell
        for drow, dcol in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nrow, ncol = row + drow, col + dcol
            if 0 <= nrow < n and 0 <= ncol < m and (nrow, ncol) not in visited:
                if data[nrow, ncol] == 0 or data[nrow, ncol] == target:
                    visited.add((nrow, ncol))
                    queue.put(((nrow, ncol), dist + 1))
    return np.inf

# Load the data
with open('insule.in', 'r') as f:
    n, m = map(int, f.readline().split())
    data = np.array([list(map(int, list(f.readline().strip()))) for _ in range(n)])

# Label the islands for countries R, G, B
labeled_R, num_R = label(data == 1)
labeled_G, num_G = label(data == 2)
labeled_B, num_B = label(data == 3)

# Find all starting positions next to country R and country G
start_R = [(row, col) for row in range(n) for col in range(m) if data[row, col] == 0 and any(labeled_R[max(row+drow, 0), max(col+dcol, 0)] for drow, dcol in [(-1, 0), (1, 0), (0, -1), (0, 1)])]
start_G = [(row, col) for row in range(n) for col in range(m) if data[row, col] == 0 and any(labeled_G[max(row+drow, 0), max(col+dcol, 0)] for drow, dcol in [(-1, 0), (1, 0), (0, -1), (0, 1)])]

# Compute the bridge length using BFS
bridge_length = bfs(data, start_R, 2)

# Write the output
with open('insule.out', 'w') as f:
    f.write('{} {} {} {}\n'.format(num_R, num_G, num_B, bridge_length))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly, I'll provide a solution that does not rely on external libraries such as NumPy or SciPy, since it seems that these libraries are not available in the current execution environment.

Here's the solution using only the Python Standard Library:

```python
from collections import deque

# Read the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    grid = [list(map(int, file.readline().strip())) for _ in range(n)]

# Helper function to mark the islands and count their numbers
def bfs_mark_islands(x, y, mark):
    if grid[x][y] != mark:
        return 0
    queue = deque([(x, y)])
    grid[x][y] = -1
    while queue:
        cx, cy = queue.popleft()
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = cx + dx, cy + dy
            if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == mark:
                queue.append((nx, ny))
                grid[nx][ny] = -1
    return 1

# Helper function to find the minimum bridge length using BFS
def find_bridge_length():
    queue = deque()
    visited = [[False] * m for _ in range(n)]
    for x in range(n):
        for y in range(m):
            if grid[x][y] == 1:
                queue.append((x, y, 0))
                visited[x][y] = True

    while queue:
        cx, cy, dist = queue.popleft()
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = cx + dx, cy + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:
                if grid[nx][ny] == 2:
                    return dist
                elif grid[nx][ny] == 0:
                    queue.append((nx, ny, dist + 1))
                    visited[nx][ny] = True
    return -1

# Count the islands for each country and mark them
islands_R = islands_G = islands_B = 0
for i in range(n):
    for j in range(m):
        islands_R += bfs_mark_islands(i, j, 1)
        islands_G += bfs_mark_islands(i, j, 2)
        islands_B += bfs_mark_islands(i, j, 3)

# Find the minimum bridge length
bridge_length = find_bridge_length()

# Write the output file
with open('insule.out', 'w') as file:
    file.write(f'{islands_R} {islands_G} {islands_B} {bridge_length}\n')
```

This code uses breadth-first search (BFS) to count the islands for each country and to find the minimum bridge length between countries R and G. The grid is updated in-place to mark visited land blocks, which avoids using extra memory for a separate visited structure for the island counting part. A separate visited structure is used for the bridge length finding part to keep track of visited water cells.
---------- user ----------


Program result did not match expected result.
Input data:
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```
Expected output:
```
4 2 3 4
```
Found output:
```
4 2 3 -1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
