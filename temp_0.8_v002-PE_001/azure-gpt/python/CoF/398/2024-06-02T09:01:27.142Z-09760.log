---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Load the map from the input file
with open("insule.in", "r") as file:
    n, m = map(int, file.readline().split())
    grid = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])

# Labeling the islands for each country
island_labels_r, num_islands_r = label(grid == 1)
island_labels_g, num_islands_g = label(grid == 2)
island_labels_b, num_islands_b = label(grid == 3)

# Find the coordinates of the land for countries R and G
land_r = np.argwhere(grid == 1)
land_g = np.argwhere(grid == 2)

# Calculate the pairwise Manhattan distances between land R and land G
distances = cdist(land_r, land_g, metric='cityblock') - 1

# Find the minimum bridge length
min_bridge_length = np.min(distances)

# Save the results to the output file
with open("insule.out", "w") as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {min_bridge_length}\n")
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Function to find the shortest bridge length
def shortest_bridge_length(water_grid, land_r, land_g):
    shortest_length = np.inf
    for r in land_r:
        for g in land_g:
            # Check if r and g are adjacent to water
            if water_grid[r[0], r[1]] or water_grid[g[0], g[1]]:
                # Check if the path between r and g is over water
                delta = abs(r[0] - g[0]) + abs(r[1] - g[1]) - 1
                if delta < shortest_length:
                    shortest_length = delta
    return shortest_length

# Load the map from the input file
with open("insule.in", "r") as file:
    n, m = map(int, file.readline().split())
    grid = np.array([[int(char) for char in line.strip()] for line in file])

# Label the islands for each country and find the number of islands
_, num_islands_r = label(grid == 1)
_, num_islands_g = label(grid == 2)
_, num_islands_b = label(grid == 3)

# Coordinates of land and water
land_r = np.argwhere(grid == 1)
land_g = np.argwhere(grid == 2)
water_grid = grid == 0

# Find the shortest bridge length
bridge_length = shortest_bridge_length(water_grid, land_r, land_g)

# Write the results to the output file
with open("insule.out", "w") as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {bridge_length}\n")
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

def find_islands_and_distances(grid):
    # Label the islands for each country
    island_labels_r, num_islands_r = label(grid == 1)
    island_labels_g, num_islands_g = label(grid == 2)
    island_labels_b, num_islands_b = label(grid == 3)
    
    # Find the border coordinates of islands for R and G
    border_r = np.argwhere((grid == 0) & (np.roll(grid, 1, axis=0) == 1 | np.roll(grid, -1, axis=0) == 1 | np.roll(grid, 1, axis=1) == 1 | np.roll(grid, -1, axis=1) == 1))
    border_g = np.argwhere((grid == 0) & (np.roll(grid, 1, axis=0) == 2 | np.roll(grid, -1, axis=0) == 2 | np.roll(grid, 1, axis=1) == 2 | np.roll(grid, -1, axis=1) == 2))
    
    # Calculate the pairwise Manhattan distances between borders R and G
    distances = cdist(border_r, border_g, metric='cityblock')
    
    # Find the minimum bridge length
    min_bridge_length = np.min(distances) - 1
    
    return num_islands_r, num_islands_g, num_islands_b, int(min_bridge_length)

# Read the grid from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    grid = np.array([list(map(int, line.strip())) for line in file])

# Find the number of islands for each country and the minimum bridge length
num_islands_r, num_islands_g, num_islands_b, min_bridge_length = find_islands_and_distances(grid)

# Write the results to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {min_bridge_length}\n")
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Read the input data
with open('insule.in', 'r') as fin:
    n, m = map(int, fin.readline().split())
    matrix = np.array([list(map(int, list(fin.readline().strip()))) for _ in range(n)], dtype=np.int8)

# Label the islands of each country
labels_r, num_r = label(matrix == 1)
labels_g, num_g = label(matrix == 2)
labels_b, num_b = label(matrix == 3)

# Initialize the minimum bridge length to a very large number
min_bridge_length = n * m

# Extract the border coordinates of R and G
border_r = np.argwhere((matrix == 0) & (np.roll(matrix == 1, 1, axis=0) | np.roll(matrix == 1, -1, axis=0) | np.roll(matrix == 1, 1, axis=1) | np.roll(matrix == 1, -1, axis=1)))
border_g = np.argwhere((matrix == 0) & (np.roll(matrix == 2, 1, axis=0) | np.roll(matrix == 2, -1, axis=0) | np.roll(matrix == 2, 1, axis=1) | np.roll(matrix == 2, -1, axis=1)))

# Compute the minimum bridge length
for br in border_r:
    for bg in border_g:
        dist = abs(br[0] - bg[0]) + abs(br[1] - bg[1]) - 1
        if dist < min_bridge_length:
            min_bridge_length = dist

# Write the output data
with open('insule.out', 'w') as fout:
    fout.write(f"{num_r} {num_g} {num_b} {min_bridge_length}\n")
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input data from file
def read_input(filename):
    with open(filename, 'r') as f:
        n, m = map(int, f.readline().split())
        grid = np.array([list(map(int, f.readline().strip())) for _ in range(n)])
    return n, m, grid

# A function to find the connected components and their sizes
def find_islands(grid, land_value):
    visited = np.zeros_like(grid, dtype=bool)
    islands = 0

    def dfs(i, j):
        if i < 0 or i >= n or j < 0 or j >= m or visited[i, j] or grid[i, j] != land_value:
            return
        visited[i, j] = True
        dfs(i+1, j)
        dfs(i-1, j)
        dfs(i, j+1)
        dfs(i, j-1)

    for i in range(n):
        for j in range(m):
            if grid[i, j] == land_value and not visited[i, j]:
                islands += 1
                dfs(i, j)
    return islands

# A function to calculate the minimum bridge length
def min_bridge_length(grid, n, m):
    water_adj_r = np.zeros_like(grid, dtype=bool)
    water_adj_g = np.zeros_like(grid, dtype=bool)

    # Find water cells adjacent to land R and land G
    for i in range(n):
        for j in range(m):
            if grid[i, j] == 0:
                if i > 0 and grid[i-1, j] == 1 or i < n-1 and grid[i+1, j] == 1 or j > 0 and grid[i, j-1] == 1 or j < m-1 and grid[i, j+1] == 1:
                    water_adj_r[i, j] = True
                if i > 0 and grid[i-1, j] == 2 or i < n-1 and grid[i+1, j] == 2 or j > 0 and grid[i, j-1] == 2 or j < m-1 and grid[i, j+1] == 2:
                    water_adj_g[i, j] = True

    # Calculate the minimum bridge length
    min_length = n*m
    for i in range(n):
        for j in range(m):
            if water_adj_r[i, j]:
                for ii in range(n):
                    for jj in range(m):
                        if water_adj_g[ii, jj]:
                            length = abs(ii - i) + abs(jj - j) - 1
                            if length < min_length:
                                min_length = length
    return min_length

# Read the input
n, m, grid = read_input('insule.in')

# Count the islands for each country
islands_r = find_islands(grid, 1)
islands_g = find_islands(grid, 2)
islands_b = find_islands(grid, 3)

# Calculate the minimum bridge length
bridge_length = min_bridge_length(grid, n, m)

# Write the results to the output file
with open('insule.out', 'w') as f:
    f.write(f"{islands_r} {islands_g} {islands_b} {bridge_length}\n")
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label, find_objects

# Read the input data
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, line.strip())) for line in file], dtype=np.int8)

# Functions to label islands and calculate distances
def label_islands(matrix, value):
    return label(matrix == value)

def min_distance(matrix, label1, label2):
    coords1 = np.column_stack(np.where(matrix == label1))
    coords2 = np.column_stack(np.where(matrix == label2))
    min_dist = np.inf
    for c1 in coords1:
        for c2 in coords2:
            dist = abs(c1[0] - c2[0]) + abs(c1[1] - c2[1]) - 1
            if dist < min_dist:
                min_dist = dist
    return min_dist

# Label the islands for R, G, and B
labeled_matrix_r, num_features_r = label_islands(matrix, 1)
labeled_matrix_g, num_features_g = label_islands(matrix, 2)
labeled_matrix_b, num_features_b = label_islands(matrix, 3)

# Find the slices for R and G islands
slices_r = find_objects(labeled_matrix_r)
slices_g = find_objects(labeled_matrix_g)

# Extend slices to include water
def extend_slices(slices, shape):
    extended = []
    for slice_pair in slices:
        if slice_pair is not None:
            start_row, stop_row = max(slice_pair[0].start-1, 0), min(slice_pair[0].stop+1, shape[0])
            start_col, stop_col = max(slice_pair[1].start-1, 0), min(slice_pair[1].stop+1, shape[1])
            extended.append((slice(start_row, stop_row), slice(start_col, stop_col)))
    return extended

ext_slices_r = extend_slices(slices_r, matrix.shape)
ext_slices_g = extend_slices(slices_g, matrix.shape)

# Calculate minimum bridge length
bridge_len = np.inf
for slice_r in ext_slices_r:
    for slice_g in ext_slices_g:
        if slice_r and slice_g:  # Ensure slices are not None
            submat_r = labeled_matrix_r[slice_r]
            submat_g = labeled_matrix_g[slice_g]
            bridge_len = min(bridge_len, min_distance(matrix, submat_r.max(), submat_g.max()))

# Write the output data
with open('insule.out', 'w') as file:
    file.write(f"{num_features_r} {num_features_g} {num_features_b} {bridge_len}\n")
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.ndimage import label

# Function to check the adjacency of cells in the grid
def adjacents(x, y, label):
    return ((x > 0 and grid[x - 1, y] == label) or
            (x < n - 1 and grid[x + 1, y] == label) or
            (y > 0 and grid[x, y - 1] == label) or
            (y < m - 1 and grid[x, y + 1] == label))

# Function to perform BFS and find the minimum bridge length
def bfs(grid, source, target_label):
    visited = np.zeros_like(grid, dtype=bool)
    queue = [(x, y, 0) for x, y in source]  # queue of (x, y, distance)
    for x, y, distance in queue:
        visited[x, y] = True

    while queue:
        x, y, distance = queue.pop(0)
        if adjacents(x, y, target_label):
            return distance  # Return the distance when we reach the target label
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and grid[nx, ny] == 0 and not visited[nx, ny]:
                visited[nx, ny] = True
                queue.append((nx, ny, distance + 1))
    return np.inf  # Return infinity if no path found

# Read the grid from the input file
with open('insule.in', 'r') as file:
    n, m = map(int, file.readline().split())
    grid = np.array([list(map(int, file.readline().strip())) for _ in range(n)], dtype=np.int8)

# Label the islands for each country
_, num_islands_r = label(grid == 1)
_, num_islands_g = label(grid == 2)
_, num_islands_b = label(grid == 3)

# Find points adjacent to water for R and G
adjacent_r_points = [(i, j) for i in range(n) for j in range(m) if grid[i, j] == 1 and adjacents(i, j, 0)]
adjacent_g_points = [(i, j) for i in range(n) for j in range(m) if grid[i, j] == 2 and adjacents(i, j, 0)]

# Compute the minimum bridge length using BFS
min_bridge_length = min(bfs(grid, [p], 2) for p in adjacent_r_points)

# Write the results to the output file
with open('insule.out', 'w') as file:
    file.write(f"{num_islands_r} {num_islands_g} {num_islands_b} {min_bridge_length}\n")
```
