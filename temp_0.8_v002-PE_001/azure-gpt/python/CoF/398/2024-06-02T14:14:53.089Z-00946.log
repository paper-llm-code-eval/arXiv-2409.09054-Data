---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `insule.in` and write to `insule.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arhipelagul RGB este format din insule care aparţin ţărilor $R$, $G$ şi $B$. Putem reprezenta harta arhipelagului ca o matrice cu $n$ linii şi $m$ coloane cu elemente din mulţimea $\{0, 1, 2, 3\}$. Un element egal cu $0$ reprezintă o zonă acoperită de apă; un element egal cu $1$ reprezintă o zonă de pământ aparţinând unei insule din ţara $R$, iar un element egal cu $2$ reprezintă o zonă de pământ aparţinând unei insule din ţara $G$, iar un element egal cu $3$ reprezintă o zonă de pământ aparţinând unei insule din ţara $B$.

Se consideră că două elemente ale matricei sunt vecine dacă ele au aceeaşi valoare şi fie sunt consecutive pe linie, fie sunt consecutive pe coloană. Două elemente aparţin aceleiaşi insule dacă ele sunt vecine sau dacă se poate ajunge de la un element la celălalt pe un drum de-a lungul căruia oricare două elemente consecutive sunt vecine.

Pentru a încuraja relaţiile de colaborare dintre ţările $R$ şi $G$, se doreşte construirea unui pod care să unească o insulă aparţinând ţării R de o insulă aparţinând ţării G. Podul trebuie să respecte următoarele condiţii:

* Să înceapă pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $R$;
* Să se termine pe o zonă cu apă consecutivă pe linie sau coloană cu o zonă aparţinând ţării $G$;
* Să traverseze numai zone acoperite cu apă;
* Oricare două elemente consecutive ale podului trebuie să fie vecine;
* Lungimea podului să fie minimă (lungimea podului este egală cu numărul de elemente traversate de pod).

# Cerinţă

Dată fiind harta arhipelagului să se determine câte insule aparţin fiecărei ţări, precum şi lungimea minimă a unui pod care să satisfacă condiţiile din enunț.

# Date de intrare

Fişierul de intrare `insule.in` conţine pe prima linie numerele naturale $n$ şi $m$, separate prin spaţiu. Pe următoarele $n$ linii este descrisă harta arhipelagului. Pe fiecare dintre aceste $n$ linii sunt scrise câte m valori din mulţimea $\{0, 1, 2, 3\}$; valorile nu sunt separate prin spaţii.

# Date de ieşire

Fişierul de ieşire `insule.out` va conţine o singură linie pe care vor fi scrise patru numere naturale separate prin spaţii `NR` `NG` `NB` `Lg`, unde `NR` reprezintă numărul de insule aparţinând ţării $R$, `NG` numărul de insule aparţinând ţării $G$, `NB` numărul de insule aparţinând ţării $B$, iar `Lg` lungimea minimă a podului.

# Restricţii şi precizări

* $1 \lt n, m \leq 100$;
* Se garantează că pe hartă există cel puţin un element $1$, un element $2$ şi un element $0$;
* Se acordă 40% din punctaj pentru determinarea corectă a numărului de insule din fiecare ţară; se acordă punctaj integral pentru rezolvarea corectă a tuturor cerinţelor;
* Începutul şi sfârşitul podului pot să coincidă;
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`insule.in`
```
6 7
1000320
0110313
3333000
2033000
2203011
2000010
```

`insule.out`
```
4 2 3 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial.distance import cdist

# Define a function to read the map from the input file
def read_map(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        map_data = np.array([[int(x) for x in line.strip()] for line in file.readlines()])
    return n, m, map_data

# Define a function to identify islands and calculate island counts by label
def find_islands(map_data):
    islands_R, num_R = label(map_data == 1)
    islands_G, num_G = label(map_data == 2)
    islands_B, num_B = label(map_data == 3)
    return num_R, num_G, num_B, islands_R, islands_G

# Define a function to find the shortest bridge length
def find_shortest_bridge(islands_R, islands_G, map_data):
    # Identify the coordinates of the border points for R and G islands
    border_R = np.argwhere((islands_R > 0) & (np.roll(map_data, 1, axis=0) == 0 | np.roll(map_data, -1, axis=0) == 0 | np.roll(map_data, 1, axis=1) == 0 | np.roll(map_data, -1, axis=1) == 0))
    border_G = np.argwhere((islands_G > 0) & (np.roll(map_data, 1, axis=0) == 0 | np.roll(map_data, -1, axis=0) == 0 | np.roll(map_data, 1, axis=1) == 0 | np.roll(map_data, -1, axis=1) == 0))
    
    # Compute the pairwise Manhattan distance between border points of R and G islands
    distances = cdist(border_R, border_G, metric='cityblock') - 1
    
    # Return the minimum distance found
    return np.min(distances)

# Define a function to write the results to the output file
def write_results(filename, num_R, num_G, num_B, bridge_length):
    with open(filename, 'w') as file:
        file.write(f"{num_R} {num_G} {num_B} {bridge_length}\n")

# Main function to solve the problem
def solve_problem(input_file, output_file):
    n, m, map_data = read_map(input_file)
    num_R, num_G, num_B, islands_R, islands_G = find_islands(map_data)
    bridge_length = find_shortest_bridge(islands_R, islands_G, map_data) if num_R > 0 and num_G > 0 else 0
    write_results(output_file, num_R, num_G, num_B, bridge_length)

# Call the main function with the input and output file names
solve_problem('insule.in', 'insule.out')
```
```
---------- user ----------


Expected program to write result to `insule.out` and read from `insule.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from scipy.ndimage import label
from scipy.spatial import cKDTree

def read_map(filename):
    with open(filename, 'r') as file:
        n, m = map(int, file.readline().split())
        grid = np.array([list(map(int, list(file.readline().strip()))) for _ in range(n)])
    return grid

def find_islands(grid):
    structure = np.array([[0, 1, 0], [1, 1, 1], [0, 1, 0]])
    labels_R, num_R = label(grid == 1, structure=structure)
    labels_G, num_G = label(grid == 2, structure=structure)
    labels_B, num_B = label(grid == 3, structure=structure)
    return num_R, num_G, num_B, labels_R, labels_G

def find_shore_points(labels, grid, land_value):
    return np.argwhere((labels > 0) & (
        (np.roll(grid, 1, 0) == 0) |
        (np.roll(grid, -1, 0) == 0) |
        (np.roll(grid, 1, 1) == 0) |
        (np.roll(grid, -1, 1) == 0) 
    )) 

def find_shortest_bridge(labels_R, labels_G, grid):
    shore_points_R = find_shore_points(labels_R, grid, 1)
    shore_points_G = find_shore_points(labels_G, grid, 2)
    if shore_points_R.size == 0 or shore_points_G.size == 0: # No shore points found
        return -1
    
    tree_R = cKDTree(shore_points_R)
    tree_G = cKDTree(shore_points_G)
    
    min_distance = np.inf
    for point in shore_points_G:
        distance, _ = tree_R.query(point)
        if distance < min_distance:
            min_distance = distance
    
    # We subtract 1 because the distance includes both shore points,
    # but the bridge is between the water next to each shore point.
    return int(min_distance) - 1

def write_output(filename, num_R, num_G, num_B, bridge_length):
    with open(filename, 'w') as file:
        file.write(f"{num_R} {num_G} {num_B} {bridge_length}\n")

def solve(filename_in, filename_out):
    grid = read_map(filename_in)
    num_R, num_G, num_B, labels_R, labels_G = find_islands(grid)
    bridge_length = find_shortest_bridge(labels_R, labels_G, grid)
    write_output(filename_out, num_R, num_G, num_B, bridge_length)

solve('insule.in', 'insule.out')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
