---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block
import numpy as np
import re

def parse_equation(equation):
    # Split equation into left and right parts
    left, right = equation.split('=')
    
    # Function to parse each side of the equation
    def parse_side(side):
        # Replace all - with +- and then split on + to get all terms
        terms = re.sub(r'-', r'+-', side).split('+')
        x_coefficient = 0
        constant = 0
        for term in terms:
            if 'x' in term:
                # If term is just 'x', it's equivalent to 1x
                num = term[:-1] if term != 'x' else '1'
                x_coefficient += int(num) if num != '' else 1
            elif term:
                constant += int(term)
        return x_coefficient, constant

    # Parse both sides
    left_x, left_const = parse_side(left)
    right_x, right_const = parse_side(right)
    
    # Return the coefficients and constants separately
    return left_x - right_x, right_const - left_const

def solve_equation(x_coefficient, constant):
    if x_coefficient == 0:
        if constant == 0:
            return 'infinit'
        else:
            return 'imposibil'
    else:
        # Solving for x
        return f'{constant / x_coefficient:.4f}'


# Read the input file
with open('ecuatii.in', 'r') as file:
    n = int(file.readline().strip())
    equations = [file.readline().strip() for _ in range(n)]

# Solve each equation and write to output file
with open('ecuatii.out', 'w') as file:
    for equation in equations:
        x_coeff, const = parse_equation(equation)
        solution = solve_equation(x_coeff, const)
        file.write(solution + '\n')
```

Ensure that you place the `ecuatii.in` file with the correct content in the same directory before running this code, and it will generate an `ecuatii.out` file with the solutions as per the description.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not found, which means it is not installed or the environment where the code is running does not have access to `numpy`. However, looking at the solution I provided earlier, we actually do not need to use `numpy` at all, since the problem does not involve any operations for which `numpy` is required.

Let's rewrite the solution without importing `numpy`:

```python
# markdown code block
import re

def parse_equation(equation):
    # Split equation into left and right parts
    left, right = equation.split('=')
    
    # Function to parse each side of the equation
    def parse_side(side):
        # Replace all - with +- and then split on + to get all terms
        terms = re.sub(r'-', r'+-', side).split('+')
        x_coefficient = 0
        constant = 0
        for term in terms:
            if 'x' in term:
                # If term is just 'x', it's equivalent to 1x
                num = term[:-1] if term != 'x' else '1'
                x_coefficient += int(num) if num else 1
            elif term:
                constant += int(term)
        return x_coefficient, constant

    # Parse both sides
    left_x, left_const = parse_side(left)
    right_x, right_const = parse_side(right)
    
    # Return the coefficients and constants separately
    return left_x - right_x, right_const - left_const

def solve_equation(x_coefficient, constant):
    if x_coefficient == 0:
        if constant == 0:
            return 'infinit'
        else:
            return 'imposibil'
    else:
        # Solving for x
        return f'{constant / x_coefficient:.4f}'


# Read the input file
with open('ecuatii.in', 'r') as file:
    n = int(file.readline().strip())
    equations = [file.readline().strip() for _ in range(n)]

# Solve each equation and write to output file
with open('ecuatii.out', 'w') as file:
    for equation in equations:
        x_coeff, const = parse_equation(equation)
        solution = solve_equation(x_coeff, const)
        file.write(solution + '\n')
```

This solution omits the unnecessary `numpy` import and should work fine given the problem constraints and requirements. Make sure to save the code in a `.py` file and execute it in an environment where the `ecuatii.in` file is present in the same directory. It will produce an `ecuatii.out` file with the expected output.
