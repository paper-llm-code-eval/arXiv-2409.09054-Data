---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def count_prime_factors(n, k):
    count = 0
    for i in range(2, n + 1):
        while i % k == 0:
            i //= k
            count += 1
    return count

def main():
    with open('exponent.in', 'r') as file:
        n, k = map(int, file.readline().split())

    exponent = count_prime_factors(n, k)

    with open('exponent.out', 'w') as file:
        file.write(str(exponent))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy is not required as we are not using any of its features in the solution.
def count_prime_factors(n, k):
    count = 0
    for i in range(1, n + 1):
        temp = i
        while temp % k == 0:
            count += 1
            temp //= k
    return count

def main():
    with open('exponent.in', 'r') as file:
        n, k = map(int, file.readline().split())

    exponent = count_prime_factors(n, k)

    with open('exponent.out', 'w') as file:
        file.write(str(exponent))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_prime_factors(n, k):
    exponent = 0
    while n:
        n //= k
        exponent += n
    return exponent

def main():
    with open('exponent.in', 'r') as file:
        n, k = map(int, file.readline().split())

    exponent = count_prime_factors(n, k)

    with open('exponent.out', 'w') as file:
        file.write(str(exponent))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    # Read n and k from 'exponent.in'
    with open('exponent.in', 'r') as file:
        n, k = map(int, file.readline().split())
    
    # Calculate the exponent of k in the factorial of n
    exponent = 0
    while n >= k:
        n //= k
        exponent += n
    
    # Write the result to 'exponent.out'
    with open('exponent.out', 'w') as file:
        file.write(str(exponent))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_exponent(n, k):
    exponent = 0
    divisor = k
    while divisor <= n:
        exponent += n // divisor
        divisor *= k
    return exponent

def main():
    with open('exponent.in', 'r') as file:
        n, k = map(int, file.readline().split())

    exponent = calculate_exponent(n, k)

    with open('exponent.out', 'w') as file:
        file.write(str(exponent))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read n and k from 'exponent.in'
with open('exponent.in', 'r') as file:
    n, k = map(int, file.readline().split())

# Calculate the exponent of k in the prime factorization of n!
exponent = 0
while n > 0:
    n //= k
    exponent += n

# Write the result to 'exponent.out'
with open('exponent.out', 'w') as file:
    file.write(str(exponent))
```
```
---------- user ----------


Expected program to write result to `exponent.out` and read from `exponent.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read n and k from 'exponent.in'
with open('exponent.in', 'r') as file:
    n, k = map(int, file.readline().split())

# Calculate the exponent of k in the prime factorization of n!
exponent = 0
while n > 0:
    n //= k
    exponent += n

# Write the result to 'exponent.out'
with open('exponent.out', 'w') as file:
    file.write(str(exponent))
```
```
