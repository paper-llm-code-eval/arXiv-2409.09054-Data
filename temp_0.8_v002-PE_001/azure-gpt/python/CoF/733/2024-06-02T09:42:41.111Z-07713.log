---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `perle.in` and write to `perle.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Graniţa nu se trece uşor. Asta pentru că Balaurul Arhirel (mare pasionat de informatică) nu lasă pe nimeni să treacă decât după ce răspunde la nişte întrebări...

În acea ţară există $3$ tipuri de perle normale (le vom nota cu $1$, $2$ şi $3$) şi $3$ tipuri de perle magice (le vom nota cu $A$, $B$ şi $C$). Perlele magice sunt deosebite prin faptul că se pot transforma în alte perle (una sau mai multe, normale sau magice):
- Perla magică de tipul $A$ se poate transforma în orice perlă normală (una singură);
- Perla magică de tipul $B$ se poate transforma într-o perlă normală de tipul $2$ şi una magică de tipul $B$, sau într-o perlă normală de tipul $1$, una magică de tipul $A$, una normală de tipul $3$, una magică de tipul $A$ şi una magică de tipul $C$;
- Perla magică de tipul $C$ se poate transforma într-o perlă normală de tipul $2$ sau într-o perlă normală de tipul $3$, una magică de tipul $B$ şi una magică de tipul $C$ sau într-o perlă normală de tipul $1$, una normală de tipul $2$ şi una magică de tipul $A$.

Ca să rezumăm cele de mai sus putem scrie:
```
A -> 1  | 2     | 3
B -> 2B | 1A3AC
C -> 2  | 3BC   | 12A
```

Balaurul Arhirel ne lasă la început să ne alegem o perlă magică (una singură), iar apoi folosind numai transformările de mai sus trebuie să obţinem un anumit şir de perle normale. Când o perlă magică se transformă, perlele din stânga şi din dreapta ei rămân la fel (şi în aceeaşi ordine). De asemenea ordinea perlelor rezultate din transformare este chiar cea prezentată mai sus.

De exemplu, dacă balaurul ne cere să facem şirul de perle `21132123`, putem alege o perlă magică de tipul $B$ şi următorul şir de transformări: `B -> 2B -> 21A3AC -> 21A3A12A -> 21132123`.

Întrucât Balaurul nu are prea multă răbdare, el nu ne cere decât să spunem dacă se poate sau nu obţine şirul respectiv de perle.

# Cerință

Să se determine pentru fiecare şir de intrare dacă se poate obţine prin transformările de mai sus sau nu (alegând orice primă perlă magică, la fiecare şir).

# Date de intrare

Fişierul de intrare `perle.in` are următoarea structură:
* Pe prima linie numărul $N$, reprezentând numărul de şiruri din fişierul de intrare;
* Urmează $N$ linii; a $i$-a linie dintre cele $N$ descrie şirul $i$, printr-o succesiune de numere naturale despărţite de câte un spaţiu. Primul număr reprezintă lungimea şirului $L_i$, iar următoarele $L_i$ numere sunt tipurile de perle normale, în ordine, de la stânga la dreapta.

# Date de ieșire

Fişierul `perle.out` va conţine $N$ linii. Pe linia $i$ se va scrie un singur număr $1$ sau $0$ ($1$ dacă se poate obţine şirul respectiv (al $i$-lea) şi $0$ dacă nu se poate).

# Restricții și precizări

* $1 \leq N \leq 10$;
* $1 \leq L_i \leq 10 \ 000$, pentru oricare $i$;

---

Example:
`perle.in`
```
3
8 2 1 1 3 2 1 2 3
2 2 2
1 3
```

`perle.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Instead of working with strings, let's define magic pearls transformations
# in terms of the number of 1s, 2s, and 3s.

# Define the transformation rules
# A -> 1 | 2 | 3
# B -> 2B | 1A3AC
# C -> 2 | 3BC | 12A

# Transformation rules for A, B, C represented as (num_1s, num_2s, num_3s, num_As, num_Bs, num_Cs)
transform_A = np.array([(1, 0, 0, 0, 0, 0), (0, 1, 0, 0, 0, 0), (0, 0, 1, 0, 0, 0)])
transform_B = np.array([(0, 1, 0, 0, 1, 0), (1, 0, 1, 2, 0, 1)])
transform_C = np.array([(0, 1, 0, 0, 0, 0), (0, 0, 1, 0, 1, 1), (1, 1, 0, 1, 0, 0)])

# Read from perle.in
with open('perle.in', 'r') as file:
    N = int(file.readline().strip())
    sequences = [list(map(int, file.readline().strip().split()[1:])) for _ in range(N)]

def can_be_obtained(sequence):
    # Count the number of 1s, 2s, and 3s
    counts = np.array([sequence.count(1), sequence.count(2), sequence.count(3)])
    
    # Check if the sequence can be obtained starting from magic pearl A
    for transformation in transform_A:
        counts_from_A = counts - transformation[:3]
        if np.all(counts_from_A >= 0) and counts_from_A[1] % 2 == 0:
            return True

    # Check if the sequence can be obtained starting from magic pearl B
    # A B transformation always generates an even number of 2's
    if counts[0] >= counts[2] and (counts[0] - counts[2]) % 2 == 0 and counts[1] % 2 == 0:
        return True

    # Check if the sequence can be obtained starting from magic pearl C
    counts_from_C = counts - np.array([0, 0, 1])
    if counts_from_C[2] >= 0 and counts_from_C[1] % 2 == 0 and counts_from_C[0] >= counts_from_C[2]:
        return True

    # If none of the above checks returned True, the sequence is not obtainable
    return False

# Process the sequences and write to perle.out
with open('perle.out', 'w') as file:
    for sequence in sequences:
        file.write(f"{int(can_be_obtained(sequence))}\n")
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the input file
with open('perle.in', 'r') as f:
    lines = f.readlines()

# Number of sequences to process
N = int(lines[0].strip())

# Function that tries to match the sequence with the transformations
def is_possible(seq):
    # Count the number of 1's, 2's, and 3's in the sequence
    ones = seq.count(1)
    twos = seq.count(2)
    threes = seq.count(3)

    # Check possibility by each type of magic pearl
    # Using the fact that any sequence must have an even number of 2's
    # Since B -> 2B and C -> 12A both produce an even number of 2's
    if twos % 2 != 0:
        return False

    # A can turn into any single normal pearl, so we can always match the number of 1's or 3's
    # If the remaining count of 1's and 3's is even (including 0), it can be generated by B or C
    remaining_13 = abs(ones - threes)
    if remaining_13 % 2 == 0:
        return True

    # If the sequence cannot be formed by the above rules, it's not possible
    return False

# Process the sequences
results = []
for i in range(1, N + 1):
    # Parse the sequence, excluding the first element which is the length of the sequence
    seq = list(map(int, lines[i].strip().split()))[1:]
    results.append(is_possible(seq))

# Write the output file
with open('perle.out', 'w') as f:
    for result in results:
        f.write(f"{int(result)}\n")
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Utilize numpy for efficient array operations
import numpy as np

# Define transformation rules for magic pearls
# Maps a magic pearl to a transformation represented as an array of counts for 1s, 2s, 3s
transformation_rules = {
    'A': np.array([1, 1, 1]),  # A -> 1  | 2  | 3
    'B': np.array([1, 2, 0]),  # B -> 2B | 1A3AC (for simplicity, just consider 1 and 2)
    'C': np.array([1, 1, 1]),  # C -> 2  | 3BC | 12A (for simplicity, just consider 1, 2, and 3)
}

# Read sequences from file
with open('perle.in', 'r') as file:
    N = int(file.readline().strip())
    sequences = [np.array(list(map(int, file.readline().strip().split()[1:]))) for _ in range(N)]

# Function to determine if a sequence can be obtained
def can_obtain_sequence(sequence):
    # Count the number of 1s, 2s, and 3s in the sequence
    counts = np.array([np.count_nonzero(sequence == i) for i in range(1, 4)])

    # If the counts of 2s are odd, it's impossible to obtain the sequence
    if counts[1] % 2 == 1:
        return 0

    # For pearls A and C, if counts of 1s and 3s are equal, it's possible
    # For pearl B, it's always possible since it can produce any number of 1s and 3s
    if counts[0] == counts[2] or counts[1] % 2 == 0:
        return 1

    # Otherwise, it's not possible to obtain the sequence
    return 0

# Write results to file
with open('perle.out', 'w') as file:
    for sequence in sequences:
        file.write(f"{can_obtain_sequence(sequence)}\n")
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read sequences from file
sequences = []
with open('perle.in', 'r') as file:
    N = int(file.readline().strip())
    for _ in range(N):
        seq_len, *seq = map(int, file.readline().strip().split())
        sequences.append(seq)

# Function to determine if a sequence can be obtained
def can_obtain_sequence(sequence):
    # Count occurrences of each pearl type
    count_1 = sequence.count(1)
    count_2 = sequence.count(2)
    count_3 = sequence.count(3)
    
    # For a sequence to be obtainable:
    # 1. The number of 2's must be even (since B->2B)
    if count_2 % 2 != 0:
        return 0
    
    # 2. The difference between the number of 1's and 3's must be even
    #    (since each transformation A or C leads to an even amount when combined)
    if (count_1 - count_3) % 2 != 0:
        return 0

    # If both conditions are met, the sequence can be obtained
    return 1

# Compute results
results = [can_obtain_sequence(seq) for seq in sequences]

# Write results to file
with open('perle.out', 'w') as file:
    file.writelines(['{}\n'.format(res) for res in results])
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input data from 'perle.in'
with open('perle.in', 'r') as file:
    data = file.readlines()

# Extract the number of sequences
N = int(data[0].strip())

# Function to determine if we can obtain the sequence
def obtainable(sequence):
    ones = sequence.count(1)
    twos = sequence.count(2)
    threes = sequence.count(3)

    # Conditions for a sequence being obtainable:
    # 1. There must be an even number of 2s.
    # 2. The difference between the number of 1s and 3s must be even.
    # 3. There can't be more 3s than 1s because we can't create 3s from 1s.
    if twos % 2 == 0 and (ones - threes) % 2 == 0 and threes <= ones:
        return 1
    return 0

# Process each sequence and store the results
results = []
for i in range(1, N + 1):
    # Parse the sequence into integers, ignoring the first number which is the length
    sequence = list(map(int, data[i].split()[1:]))
    results.append(obtainable(sequence))

# Write the output data to 'perle.out'
with open('perle.out', 'w') as file:
    for result in results:
        file.write(f"{result}\n")
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input data from 'perle.in'
with open('perle.in', 'r') as file:
    N = int(file.readline().strip())  # Read the number of sequences
    sequences = [list(map(int, file.readline().strip().split())) for _ in range(N)]

# Function to determine if we can obtain the sequence using the perle rules
def sequence_obtainable(sequence):
    # Count the occurrences of 1, 2, and 3 in the sequence
    count_1, count_2, count_3 = sequence.count(1), sequence.count(2), sequence.count(3)

    # Since every transformation involving B produces 2s and since B can double itself,
    # the number of 2s should be even in the obtainable sequence.
    if count_2 % 2 != 0:
        return 0

    # The number of 3s should be less than or equal to the number of 1s because
    # we can replace A with 1 but not with 3. So, any extra 3s would not be obtainable.
    if count_3 > count_1:
        return 0

    # After handling all the 3s, if there is an odd number of 1s left,
    # it means we cannot obtain the sequence since A can only become one pearl.
    if (count_1 - count_3) % 2 != 0:
        return 0

    # If we passed all checks, the sequence is obtainable
    return 1

# Write the output data to 'perle.out'
with open('perle.out', 'w') as file:
    for seq in sequences:
        # The actual sequence starts from the second number because the first one is the length of the sequence
        file.write(f"{sequence_obtainable(seq[1:])}\n")
```
```
---------- user ----------


Expected program to write result to `perle.out` and read from `perle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input data from 'perle.in'
with open('perle.in', 'r') as file:
    N = int(file.readline().strip())  # Read the number of sequences
    sequences = [[int(x) for x in file.readline().strip().split()[1:]] for _ in range(N)]

# Function to check if a sequence is obtainable
def is_sequence_obtainable(sequence):
    count_1 = sequence.count(1)
    count_2 = sequence.count(2)
    count_3 = sequence.count(3)
    
    # There must be an even number of 2's.
    if count_2 % 2 != 0:
        return 0
    
    # The difference between the number of 1's and 3's must also be even.
    # Also, there cannot be more 3's than 1's because transforming C to 1's would leave excess 3's.
    if (count_1 - count_3) % 2 != 0 or count_3 > count_1:
        return 0
    
    return 1

# Write the output data to 'perle.out'
with open('perle.out', 'w') as file:
    for sequence in sequences:
        file.write(f"{is_sequence_obtainable(sequence)}\n")
```
```
