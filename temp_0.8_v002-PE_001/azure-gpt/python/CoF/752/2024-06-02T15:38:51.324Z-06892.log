---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def count_digit_occurrences(n, digit):
    occurrences = 0
    pow_of_10 = 1
    while n // pow_of_10 > 0:
        higher = n // (pow_of_10 * 10)
        current = (n // pow_of_10) % 10
        lower = n % pow_of_10
        
        if current > digit:
            occurrences += (higher + 1) * pow_of_10
        elif current == digit:
            occurrences += higher * pow_of_10 + lower + 1
        else:
            occurrences += higher * pow_of_10
            
        if digit == 0:
            occurrences -= pow_of_10
            
        pow_of_10 *= 10
        
    return occurrences

def main():
    with open('cifre.in', 'r') as infile:
        n, c = [int(x) for x in infile.readline().split()]

    count = count_digit_occurrences(n, c)

    with open('cifre.out', 'w') as outfile:
        outfile.write(str(count))

if __name__ == "__main__":
    main()
```
```
This code reads the input from the file `cifre.in`, which contains the numbers `n` and `c`. It calculates the number of times the digit `c` appears in the numbers from `1` to `n` using an efficient approach that does not require iterating through all the numbers or storing them, which would not be feasible for large `n`. The result is then written to the file `cifre.out`. The function `count_digit_occurrences` performs the counting in a time-efficient manner by leveraging the patterns in which digits appear within number ranges, respecting the memory constraints.
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Python code to solve the problem described above.
# This code is optimized for memory and does not use input() or print() functions.
# It reads the input from 'cifre.in' and writes the output to 'cifre.out'.

def main():
    # Read the input values from 'cifre.in'
    with open('cifre.in', 'r') as infile:
        n, c = map(int, infile.readline().split())
    
    # Initialize variables to count the occurrences
    occurrences = 0
    c = str(c)
    for i in range(1, n + 1):
        occurrences += str(i).count(c)

    # Write the result to 'cifre.out'
    with open('cifre.out', 'w') as outfile:
        outfile.write(str(occurrences))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Python code to solve the problem described above,
# optimized for both time and memory usage and respecting the constraints.

def count_digit_occurrences(n, digit):
    occurrences = 0
    length = len(str(n))
    for i in range(length):
        pow10_i = 10 ** i
        next_pow10_i = pow10_i * 10
        down = n % pow10_i
        up = n // next_pow10_i
        current = (n // pow10_i) % 10

        if current > digit:
            occurrences += (up + 1) * pow10_i
        elif current < digit:
            occurrences += up * pow10_i
        else:
            occurrences += up * pow10_i + down + 1

        # Compensate for the case where 'up' was zero padded
        if i < length - 1:
            if digit == 0:
                occurrences -= pow10_i
            if digit > 0 or i > 0:
                occurrences += max(0, digit * up * pow10_i)
    return occurrences

# Read the input values from 'cifre.in'
with open('cifre.in', 'r') as infile:
    n, c = map(int, infile.readline().split())

# Count the occurrences of the digit
count = count_digit_occurrences(n, c)

# Write the result to 'cifre.out'
with open('cifre.out', 'w') as outfile:
    outfile.write(str(count))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Python code to solve the problem described above,
# optimized for both time and memory usage.

def count_digits(n, digit):
    occurrence = 0
    d = 1
    while True:
        q, r = divmod(n, d)
        occurrence += (q + 8) // 10 * d + (r + 1 if q % 10 == digit else 0)
        if q == 0:
            break
        d *= 10
    return occurrence

# Read the input values from 'cifre.in'
with open('cifre.in', 'r') as infile:
    n, c = map(int, infile.readline().split())

# Count the number of occurrences of the digit c from 1 to n
count = count_digits(n, c) - (count_digits(0, c) if c > 0 else 0)

# Write the result to 'cifre.out'
with open('cifre.out', 'w') as outfile:
    outfile.write(str(count))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_digit_occurrences(n, digit):
    occurrences, factor, count = 0, 1, 0
    while factor <= n:
        higher = n // (factor * 10)
        current = (n // factor) % 10
        lower = n - (n // factor) * factor
        
        if current > digit:
            count = higher + 1
        elif current == digit:
            count = higher
        else:
            count = higher
        
        occurrences += count * factor
        
        if current == digit:
            occurrences += lower + 1
        
        factor *= 10
    
    return occurrences

# Main function to execute the logic.
def main():
    with open('cifre.in', 'r') as file:
        n, c = map(int, file.readline().split())
    
    result = count_digit_occurrences(n, c)
    
    with open('cifre.out', 'w') as file:
        file.write(str(result))

# Call the main function.
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficiently count occurrences of a digit in the range [1, n]

def count_digit_occurrences(n, digit):
    occurrences = 0
    factor = 1

    while factor <= n:
        higher = n // (factor * 10)
        current = (n // factor) % 10
        lower = n % factor

        if current > digit:
            occurrences += (higher + 1) * factor
        elif current == digit:
            occurrences += higher * factor + lower + 1
        else: # current < digit
            occurrences += higher * factor

        factor *= 10

    return occurrences

# Read input from file
with open('cifre.in', 'r') as file:
    n, digit = map(int, file.readline().split())

# Count occurrences and write output to file
occs = count_digit_occurrences(n, digit)
with open('cifre.out', 'w') as file:
    file.write(str(occs))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def count_occurrences(n, digit):
    count = 0
    for i in range(1, n + 1):
        count += str(i).count(str(digit))
    return count

# Open the input file
with open('cifre.in', 'r') as infile:
    n, digit = map(int, infile.read().split())

# Calculate the number of occurrences
occurrences = count_occurrences(n, digit)

# Open the output file and write the result
with open('cifre.out', 'w') as outfile:
    outfile.write(str(occurrences))
```
```
