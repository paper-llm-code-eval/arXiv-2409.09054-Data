---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the Python solution optimized for both time and memory usage to solve the described challenge. The solution makes use of the math to calculate the frequency of the digit c from 1 to n without iterating through each number and storing unnecessary data in memory. This should keep the memory usage within the 8MB limit.

```python
# cifre.py
import os

def count_digit_occurrences(n, c):
    count = 0
    factor = 1
    while factor <= n:
        next_factor = factor * 10
        count += (n // next_factor) * factor
        current_digit = (n % next_factor) // factor
        if current_digit > c:
            count += factor
        elif current_digit == c:
            count += (n % factor) + 1
        factor *= 10
    return count

if __name__ == '__main__':
    # Read from 'cifre.in'
    with open('cifre.in', 'r') as file:
        n, c = map(int, file.readline().split())

    # Calculate the occurrences
    occurrences = count_digit_occurrences(n, c)

    # Write to 'cifre.out'
    with open('cifre.out', 'w') as file:
        file.write(str(occurrences) + '\n')
```

Please save this script as `cifre.py` and make sure the `cifre.in` file exists with the appropriate content. The script will create or overwrite the `cifre.out` file with the correct output.

To ensure the code runs within the given memory constraints, avoid reading large chunks of data into memory and refrain from storing unnecessary data in complex data structures. The provided solution adheres to these guidelines.
