---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `excel.in` and write to `excel.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel, elev în clasa a VII-a, pasionat de aplicațiile informatice, s-a gândit să-și facă un program care să simuleze cunoscutul produs Excel. Zis și făcut, s-a pus pe treabă și într-o oră a reușit să realizeze un program asemănător Excel-ului, dar care, spre deosebire de original, nu poate face decât o singură operație în celulele sale: suma. Încercați și dumneavoastră să realizați isprava lui Gigel!
Reamintim că o foaie de calcul în Excel se prezintă sub forma unei suprafețe liniate cu linii orizontale și verticale. Prin intersecția lor rezultă dreptunghiuri (numite celule), fiecare celulă având un nume format dintr-o literă și un număr, reprezentând coloana, respectiv linia pe care se află.

~[excel.png|align=center|width=45em]

De exemplu, celula din stânga sus este $A1$, urmată, pe linie, de $B1, C1$, etc. Introducerea unei formule într-o celulă începe întotdeauna cu semnul `=`. De exemplu dacă în celula `C2` scriem `=A2+B2` înseamnă că în această celulă se va scrie rezultatul adunării valorilor din celulele $A2$ și $B2$. Pot exista și celule cu formula `=A5` ceea ce înseamnă că în celula respectivă vom avea un rezultat egal cu cel din celula $A5$. Fiind abia la început și în ceea ce privește programarea și în ceea ce privește aplicația Excel, Gigel se gândește ca programul său să completeze celulele începând cu prima coloană, apoi a doua etc., astfel că formulele care pot apărea în celula ($col$, $lin$) pot folosi datele din coloanele $1$ până la $col-1$ și din celulele aflate pe liniile $1$ până la $lin-1$ din coloana $col$.

# Cerință

Dându-se o foaie de calcul să se înlocuiască toate formulele care apar, prin rezultatele obținute respectând cerințele date în text.

# Date de intrare

Fișierul `excel.in` are pe prima linie două valori $m \ n$, separate printr-un spațiu, reprezentând numărul de coloane, respectiv de linii ale foii de calcul. Pe următoarele $n$ linii se descriu cele $m$ coloane ale foii. O descriere poate fi formată din valori întregi pozitive sau formule separate printr-un singur spațiu. Formulele sunt șiruri de caractere care încep întotdeauna cu semnul `=`. Fișierul de intrare se consideră corect, în sensul că operațiile care apar se pot executa, iar foaia de calcul se poate completa.

# Date de ieșire

Fișierul `excel.out` va conține $n$ linii, pe fiecare linie câte $m$ valori reprezentând rezultatul final al operațiilor realizate în foaia de calcul.

# Restricții și precizări

* $0$ < numărul de coloane $\leq 26$, notate de la `A` la `Z`;
* $0$ < numărul de linii $\leq 50$;
* fiecare linie ce descrie foaia Excel are o lungime maximă $< 256$;
* fiecare valoare numerică din foaia de calcul inițială este un număr pozitiv $\leq 100$;
* formulele care pot să apară în celule se referă doar la operația de adunare.

---

Example:
`excel.in`
```
4 3
11 21 =A1+A2 =A3
10 15 =B1+B2 =A2+B1
=A1+A2 14 21 3
```

`excel.out`
```
11 21 21 21
10 15 36 31
21 14 21 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Helper function to convert Excel-like column letter to index (A -> 0, B -> 1, ...)
def col_to_index(col):
    return ord(col.upper()) - ord('A')

# Parses the cell value, which can be a formula or a number
def parse_cell(cell, grid):
    if cell.startswith('='):
        # Split the formula into parts and add the corresponding values from the grid
        parts = cell[1:].split('+')
        value = sum(grid[col_to_index(part[0])][int(part[1:]) - 1] for part in parts)
        return value
    else:
        # Return the value as an integer if it's not a formula
        return int(cell)

# Reads the input file, processes the data, and writes the output
def process_excel(input_file, output_file):
    with open(input_file, 'r') as f:
        # Read the dimensions of the grid
        cols, rows = map(int, f.readline().split())

        # Initialize the grid with zeros
        grid = np.zeros((cols, rows), dtype=int)

        # Process each row of the input
        for row_idx in range(rows):
            # Read the row data
            row_data = f.readline().split()
            
            # Parse each cell in the row, updating the grid
            for col_idx, cell in enumerate(row_data):
                grid[col_idx][row_idx] = parse_cell(cell, grid)

    # Write the output grid to the file
    with open(output_file, 'w') as f:
        for row_idx in range(rows):
            # Join the row's values into a space-separated string and write to the file
            f.write(' '.join(str(grid[col_idx][row_idx]) for col_idx in range(cols)) + '\n')

# Run the process_excel function with the specified input and output file names
process_excel('excel.in', 'excel.out')
```
```
---------- user ----------


Expected program to write result to `excel.out` and read from `excel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Helper function to convert Excel-like column letter to index (A -> 0, B -> 1, ...)
def col_to_index(col):
    return ord(col.upper()) - ord('A')

# Parses the cell value, which can be a formula or a number
def parse_cell(cell, grid):
    if cell.startswith('='):
        # Split the formula into parts and add the corresponding values from the grid
        parts = cell[1:].split('+')
        value = sum(grid[int(part[1:]) - 1, col_to_index(part[0])] for part in parts)
        return value
    else:
        # Return the value as an integer if it's not a formula
        return int(cell)

# Reads the input file, processes the data, and writes the output
def process_excel(input_file, output_file):
    with open(input_file, 'r') as f:
        # Read the dimensions of the grid
        cols, rows = map(int, f.readline().split())

        # Initialize an empty list to store rows of the grid
        grid_list = []

        # Process each row of the input
        for _ in range(rows):
            # Read the row data
            row_data = f.readline().split()
            # Parse each cell in the row, updating the row values
            row_values = [parse_cell(cell, grid_list) if cell.startswith('=') else int(cell) for cell in row_data]
            # Append the parsed row to the grid list
            grid_list.append(row_values)

        # Convert the grid list to a NumPy array
        grid = np.array(grid_list, dtype=int)

    # Write the output grid to the file
    with open(output_file, 'w') as f:
        for row in grid:
            # Join the row's values into a space-separated string and write to the file
            f.write(' '.join(str(val) for val in row) + '\n')

# Run the process_excel function with the specified input and output file names
process_excel('excel.in', 'excel.out')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
