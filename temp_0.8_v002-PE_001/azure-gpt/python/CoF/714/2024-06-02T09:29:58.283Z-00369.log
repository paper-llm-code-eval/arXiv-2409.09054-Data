---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read data from file
with open('pinochio.in', 'r') as file:
    n, p, k = map(int, file.readline().split())

# Calculate the size of the nose after k days
days_until_weekend = 5
nasal_growth_per_week = (days_until_weekend * p) - 2 # Growth in 5 days and reduction in 2 days

# Compute full weeks
full_weeks = k // 7
nose_size = n + full_weeks * nasal_growth_per_week

# Remaining days after full weeks
remaining_days = k % 7

# Compute the nose size for the remaining days
for i in range(remaining_days):
    if i < 5: # Weekday
        nose_size += p
    else: # Weekend
        nose_size -= 1

# Write the result to the output file
with open('pinochio.out', 'w') as file:
    file.write(str(nose_size))
```

This code reads the initial nose size, growth per day, and the number of days from "pinochio.in", calculates the nose size after k days by first calculating the weekly growth and then considering the remaining days, then writes the final nose size to "pinochio.out". It does not use `input()` or `print()` for I/O and optimizes memory usage by avoiding unnecessary data structures or large arrays.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Based on the standard error, the program exited because the `numpy` module is not available. However, considering the problem's constraints and the nature of the task, we do not actually need `numpy` for this computation. Therefore, the solution to fix the program is to remove the `numpy` import and implement the logic using plain Python.

Here is the corrected solution without `numpy`:

```python
# Read data from file
with open('pinochio.in', 'r') as file:
    n, p, k = map(int, file.readline().split())

# Calculate the size of the nose after k days
days_until_weekend = 5
nasal_growth_per_week = (days_until_weekend * p) - 2  # Growth in 5 days and reduction in 2 days

# Compute full weeks
full_weeks = k // 7
nose_size = n + full_weeks * nasal_growth_per_week

# Remaining days after full weeks
remaining_days = k % 7

# Compute the nose size for the remaining days
for i in range(remaining_days):
    if i < 5:  # Weekday
        nose_size += p
    else:  # Weekend
        nose_size -= 1

# Ensure the nose size does not go below initial length
nose_size = max(nose_size, n)

# Write the result to the output file
with open('pinochio.out', 'w') as file:
    file.write(str(nose_size))
```

This code no longer imports `numpy` and accomplishes the same task using standard Python operations. The code is optimized for both memory and time usage and adheres to the specified input and output file requirements.
