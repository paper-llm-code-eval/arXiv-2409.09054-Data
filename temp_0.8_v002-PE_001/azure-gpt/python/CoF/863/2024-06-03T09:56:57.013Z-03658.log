---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `panda.in` and write to `panda.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O rezervație de urși panda, privită de sus, are formă dreptunghiulară și este compusă din $n$ rânduri identice, iar pe fiecare rând sunt $m$ țarcuri identice cu baza pătrată. Țarcurile sunt îngrădite și sunt prevăzute cu uși către toate cele $4$ țarcuri vecine. Ușile sunt prevăzute cu câte un cod de acces, ca atare acestea se închid și se deschid automat. Prin acest sistem, unele ţarcuri sunt accesibile ursuleților, iar altele le sunt interzise acestora. În $T$ țarcuri se găsește mâncare pentru ursuleți.

Ursuleții din rezervație poartă câte un microcip care le deschide automat ușile țarcurilor unde pot intra și închide automat uşile țarcurilor interzise. Un țarc este **accesibil** ursulețului dacă ultimele $S$ cifre ale reprezentărilor binare ale codului țarcului și ale codului $k$ de pe microcip sunt complementare. (Exemplu: pentru $S=8$, `11101011` și `00010100` sunt complementare).

Într-un țarc este un ursuleț căruia i s-a făcut foame. Ursulețul se deplasează doar paralel cu laturile dreptunghiului. Trecerea dintr-un țarc în altul vecin cu el se face într-o secundă.

# Cerinţă

Cunoscând $n$ și $m$ dimensiunile rezervației, codurile de acces de la fiecare dintre cele $n \cdot m$ țarcuri, coordonatele celor $T$ țarcuri cu mâncare, coordonatele țarcului $L$ și $C$ unde se află inițial  ursulețul, codul $k$ al microcipului său și numărul $S$, determinați:

1. Numărul $X$ de țarcuri care îndeplinesc proprietatea că ultimele $S$ cifre din reprezentarea binară a codului lor sunt complementare cu ultimele $S$ cifre din reprezentarea binară a codului $k$ purtat de ursuleț, cu excepția țarcului în care se află acesta inițial. 
2. Numărul minim de secunde $Smin$ în care poate ajunge la un țarc cu mâncare precum și numărul de țarcuri cu mâncare $nt$ la care poate ajunge în acest timp minim.


# Date de intrare


Fişierul de intrare `panda.in` conţine:

- pe prima linie un număr natural $p$. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea  $2$ 
- pe a doua  linie trei numere naturale $n$, $m$ și $T$ separate prin câte un spațiu, cu semnificațiile din enunț
- pe linia a treia patru numere naturale nenule $L$, $C$, $k$ și $S$, separate prin câte un spațiu, cu semnificațiile din enunț
- pe următoarele $T$ linii câte două numere naturale reprezentând coordonatele țarcurilor cu mâncare
- pe următoarele $n$ linii câte $m$ numere naturale, separate prin câte un spațiu, reprezentând codurile de acces la ușile din cele $n \cdot m$ țarcuri ale rezervației.  


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai punctul 1 din cerință**. 

În acest caz, în fişierul de ieşire `panda.out` se va scrie un singur număr natural $X$, reprezentând numărul total de țarcuri pe care le poate accesa ursulețul, cu excepția țarcului în care se află acesta inițial.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai punctul 2 din cerință**. 

În acest caz, fişierul de ieşire `panda.out` va conține numerele naturale naturale $Smin$ și $nt$, în această ordine, separate printr-un spațiu. 


# Restricții și precizări

* $2 \leq n, m \leq 500$
* $1 \leq S \leq 8$
* $1 \leq T < n \cdot m$
* $0 \leq k < 10\ 000$
* $0 \leq$ valorile codurilor $< 10 \ 000$
* Pentru toate testele problemei există soluție, adică ursulețul poate ajunge la cel puțin unul dintre țarcurile cu mâncare.
* Mâncarea se poate găsi și în zone inaccesibile.
* Pentru rezolvarea corectă a primei cerinţe se acordă $20$ de puncte, iar pentru cerința a doua se acordă $80$ de puncte.
* Pentru $24\%$ dintre teste, se garantează  $m \leq 50$  și $n \leq 50$.
* Pentru $20\%$ dintre teste, se garantează  $S=1$.
* Pentru determinarea corectă a numărului $Smin$ se acordă $75\%$ din punctajul testului, iar pentru determinarea corectă a numărului $nt$ se acordă $25\%$ din punctajul testului.

---

Example:
`panda.in`
```
1
5 6 4
3 5 1 1
1 2 
5 1 
2 1
4 3
15 1278 3 1278 1278 1 
16 17 18 19 254 20
21 25 26 254 254 254
27 28 29 3 2 254
2 254 4 254 254 254
```

`panda.out`
```
19
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as f:
        p = int(f.readline().strip())
        n, m, T = map(int, f.readline().strip().split())
        L, C, k, S = map(int, f.readline().strip().split())
        food_coords = [tuple(map(int, f.readline().strip().split())) for _ in range(T)]
        codes = [list(map(int, f.readline().strip().split())) for _ in range(n)]
    return p, n, m, T, L, C, k, S, food_coords, codes

def write_output(filename, result):
    with open(filename, 'w') as f:
        if isinstance(result, tuple):
            f.write(' '.join(map(str, result)))
        else:
            f.write(str(result))

def get_accessible_pens(n, m, k, S, codes, L, C):
    accessible = 0
    mask = (1 << S) - 1  # Mask to get the last S bits
    k_last_S_bits = k & mask
    complement = mask ^ k_last_S_bits
    for i in range(n):
        for j in range(m):
            if (codes[i][j] & mask) == complement and (i != L-1 or j != C-1):
                accessible += 1
    return accessible

def bfs_shortest_path(n, m, k, S, codes, L, C, food_coords):
    from collections import deque

    mask = (1 << S) - 1
    k_last_S_bits = k & mask
    complement = mask ^ k_last_S_bits
    visited = np.zeros((n, m), dtype=bool)
    queue = deque([(L-1, C-1, 0)])  # (row, column, distance)
    visited[L-1, C-1] = True

    food_pens = set(food_coords)
    min_distance = np.inf
    num_food_pens = 0

    while queue:
        x, y, dist = queue.popleft()
        if (x+1, y+1) in food_pens:
            if dist < min_distance:
                min_distance = dist
                num_food_pens = 1
            elif dist == min_distance:
                num_food_pens += 1

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx, ny]:
                if (codes[nx][ny] & mask) == complement:
                    queue.append((nx, ny, dist + 1))
                    visited[nx, ny] = True

    return min_distance, num_food_pens

def solve(p, n, m, T, L, C, k, S, food_coords, codes):
    if p == 1:
        return get_accessible_pens(n, m, k, S, codes, L, C)
    elif p == 2:
        return bfs_shortest_path(n, m, k, S, codes, L, C, food_coords)

# Entry point for the solution
if __name__ == "__main__":
    p, n, m, T, L, C, k, S, food_coords, codes = read_input('panda.in')
    result = solve(p, n, m, T, L, C, k, S, food_coords, codes)
    write_output('panda.out', result)
```

This solution first reads the input from `panda.in`, then either computes the number of accessible pens or the shortest path to a pen with food, depending on the value of `p`. It finally writes the result to `panda.out`. The use of numpy is kept to a minimum (only for creating a 2D array of visited flags), and memory usage is carefully considered. The BFS algorithm is used for the shortest path calculation, which is suitable for problems with unweighted edges like this one.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the `numpy` library is not available, which caused the program to exit with code 1. As we are optimizing for memory usage and cannot rely on external libraries like `numpy`, we should refactor the code to use standard Python data structures only.

Here is the entire solution with the necessary fixes:

```python
from collections import deque

def read_input(filename):
    with open(filename, 'r') as f:
        p = int(f.readline().strip())
        n, m, T = map(int, f.readline().strip().split())
        L, C, k, S = map(int, f.readline().strip().split())
        food_coords = [tuple(map(int, f.readline().strip().split())) for _ in range(T)]
        codes = [list(map(int, f.readline().strip().split())) for _ in range(n)]
    return p, n, m, T, L, C, k, S, food_coords, codes

def write_output(filename, result):
    with open(filename, 'w') as f:
        if isinstance(result, tuple):
            f.write(' '.join(map(str, result)))
        else:
            f.write(str(result))

def get_accessible_pens(n, m, k, S, codes, L, C):
    accessible = 0
    mask = (1 << S) - 1  # Mask to get the last S bits
    k_last_S_bits = k & mask
    complement = mask ^ k_last_S_bits
    for i in range(n):
        for j in range(m):
            if (codes[i][j] & mask) == complement and (i != L-1 or j != C-1):
                accessible += 1
    return accessible

def bfs_shortest_path(n, m, k, S, codes, L, C, food_coords):
    mask = (1 << S) - 1
    k_last_S_bits = k & mask
    complement = mask ^ k_last_S_bits
    visited = [[False] * m for _ in range(n)]
    queue = deque([(L-1, C-1, 0)])  # (row, column, distance)
    visited[L-1][C-1] = True

    food_pens = set(food_coords)
    min_distance = float('inf')
    num_food_pens = 0

    while queue:
        x, y, dist = queue.popleft()
        if (x+1, y+1) in food_pens:
            if dist < min_distance:
                min_distance = dist
                num_food_pens = 1
            elif dist == min_distance:
                num_food_pens += 1

        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny]:
                if (codes[nx][ny] & mask) == complement:
                    queue.append((nx, ny, dist + 1))
                    visited[nx][ny] = True

    return min_distance, num_food_pens

def solve(p, n, m, T, L, C, k, S, food_coords, codes):
    if p == 1:
        return get_accessible_pens(n, m, k, S, codes, L, C)
    elif p == 2:
        return bfs_shortest_path(n, m, k, S, codes, L, C, food_coords)

# Entry point for the solution
if __name__ == "__main__":
    p, n, m, T, L, C, k, S, food_coords, codes = read_input('panda.in')
    result = solve(p, n, m, T, L, C, k, S, food_coords, codes)
    write_output('panda.out', result)
```

This updated solution no longer relies on `numpy` and should work with a standard Python installation. It uses a list of lists to create the 2D array for visited cells during the BFS algorithm. The rest of the logic remains the same.
