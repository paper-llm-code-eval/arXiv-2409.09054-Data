---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm următorul şir:

`a`$,$ `b`$,$ `ba`$,$ `bab`$,$ `babba`$,$ `babbabab`$, \dots$

# Cerință

Scrieţi un program care să determine care este cel de-al $n$-lea termen al şirului

# Date de intrare

Fişierul de intrare `sir.in` conţine o singură linie pe care se află numărul natural $n$.

# Date de ieșire

Fişierul de ieşire `sir.out` va conţine o singură linie pe care se află al $n$-lea termen din şir

# Restricții și precizări

* $1 \leq n \leq 20$;

---

Example:
`sir.in`
```
4
```

`sir.out`
```
bab
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Define the function to generate the n-th term of the sequence
def generate_nth_term(n):
    # The initial terms of the sequence
    a, b = "a", "b"
    if n == 1:
        return a
    elif n == 2:
        return b
    
    # Generate terms iteratively
    for i in range(3, n + 1):
        # Next term is constructed by concatenation of the previous two terms
        a, b = b, b + a
        
    return b

# Read n from the file sir.in
with open('sir.in', 'r') as file:
    n = int(file.readline().strip())

# Generate the n-th term of the sequence
nth_term = generate_nth_term(n)

# Write the n-th term to the file sir.out
with open('sir.out', 'w') as file:
    file.write(nth_term)
```
```
---------- user ----------


Expected program to write result to `sir.out` and read from `sir.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Here is the corrected solution that reads from `sir.in` and writes to `sir.out` as required:

```python
# Define the function to generate the n-th term of the sequence efficiently
def generate_nth_term(n):
    terms = ['a', 'b']
    # Start from the third term to generate the sequence
    for _ in range(2, n):
        terms.append(terms[-1] + terms[-2])
    return terms[n-1]

# Read n from the file sir.in
with open('sir.in', 'r') as file:
    n = int(file.readline().strip())

# Generate the n-th term of the sequence
nth_term = generate_nth_term(n)

# Write the n-th term to the file sir.out
with open('sir.out', 'w') as file:
    file.write(nth_term)
```
