---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `compar.in` and write to `compar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ana şi Bogdan au inventat jocul "Compar". Ana scrie pe tablă o secvenţă formată din $N$ numere naturale distincte cuprinse între $1$ şi $N$, apoi compară fiecare două numere învecinate din secvenţă scriind între ele semnul `<` sau semnul `>`, după caz.

De exemplu, dacă secvenţa de pe tablă este $6 \ 4 \ 2 \ 1 \ 3 \ 5$, după compararea elementelor învecinate şi inserarea semnelor în secvenţă, Ana obţine: $6>4>2>1<3<5$.
După aceea Ana şterge cele $N$ elemente ale secvenţei şi păstrează numai semnele, astfel: `>>><<`.
La final, Ana îi arată lui Bogdan şirul semnelor şi îi cere să reconstituie secvenţa de numere naturale scrisă iniţial pe tablă.

# Cerință

Cunoscând şirul semnelor construit de Ana, scrieţi un program care să îl ajute pe Bogdan să reconstituie secvenţa de numere naturale distincte scrisă iniţial pe tablă.

# Date de intrare

Fişierul de intrare `compar.in` conţine pe prima linie o secvenţă de caractere din mulţimea $\{$`<`$,$ `>`$\}$, reprezentând şirul semnelor obţinut de Ana după compararea elementelor vecine din secvenţa iniţială.

# Date de ieșire

Fişierul de ieşire `compar.out` va conţine pe prima linie numărul natural $N$, reprezentând lungimea secvenţei iniţiale. Pe a doua linie vor fi scrise $N$ numere naturale distincte cuprinse între $1$ şi $N$, separate prin câte un spaţiu, reprezentând elementele secvenţei iniţiale, reconstituită pe baza semnelor din fişierul de intrare. 

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Dacă există mai multe soluţii, afişaţi oricare dintre acestea.
* Pentru determinarea corectă a lungimii secvenţei se acordă $10\%$ din punctajul pe test.

---

Example:
`compar.in`
```
>>><<
```

`compar.out`
```
6
6 4 2 1 3 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input file
with open("compar.in", "r") as file:
    signs = file.readline().strip()

# Initialize the output list with zeros and placeholders for the sequence
N = len(signs) + 1
sequence = np.zeros(N, dtype=int)
desc_stack = []

# Assign numbers based on the signs, using a stack to handle decreasing sequences
next_number = 1
for i, sign in enumerate(signs):
    if sign == '<':
        sequence[i] = next_number
        # Assign all numbers in the stack as we found a '<'
        while desc_stack:
            sequence[desc_stack.pop()] = next_number
            next_number += 1
        next_number += 1
    else:
        # Push the index onto the descending stack
        desc_stack.append(i)

# Assign the remaining numbers in the stack, if any
sequence[desc_stack.pop()] = next_number
while desc_stack:
    next_number += 1
    sequence[desc_stack.pop()] = next_number

# Assign the last number
sequence[-1] = next_number

# Write to the output file
with open("compar.out", "w") as file:
    file.write(f"{N}\n")
    file.write(' '.join(map(str, sequence.tolist())) + '\n')
```
```
---------- user ----------


Expected program to write result to `compar.out` and read from `compar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def solve_sequence(signs):
    N = len(signs) + 1
    sequence = np.zeros(N, dtype=int)
    desc_stack = []

    next_number = 1
    for i, sign in enumerate(signs):
        if sign == '<':
            sequence[i] = next_number
            while desc_stack:
                sequence[desc_stack.pop()] = next_number
                next_number += 1
            next_number += 1
        else:
            desc_stack.append(i)

    sequence[desc_stack.pop()] = next_number
    while desc_stack:
        next_number += 1
        sequence[desc_stack.pop()] = next_number

    sequence[-1] = next_number
    return sequence

# Read the input file
with open("compar.in", "r") as file:
    signs = file.readline().strip()

# Solve the problem
sequence = solve_sequence(signs)

# Write to the output file
with open("compar.out", "w") as file:
    file.write(f"{len(sequence)}\n")
    file.write(' '.join(map(str, sequence)) + '\n')
```
```
---------- user ----------


Expected program to write result to `compar.out` and read from `compar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
