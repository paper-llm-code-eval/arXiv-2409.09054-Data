---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `compar.in` and write to `compar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ana şi Bogdan au inventat jocul "Compar". Ana scrie pe tablă o secvenţă formată din $N$ numere naturale distincte cuprinse între $1$ şi $N$, apoi compară fiecare două numere învecinate din secvenţă scriind între ele semnul `<` sau semnul `>`, după caz.

De exemplu, dacă secvenţa de pe tablă este $6 \ 4 \ 2 \ 1 \ 3 \ 5$, după compararea elementelor învecinate şi inserarea semnelor în secvenţă, Ana obţine: $6>4>2>1<3<5$.
După aceea Ana şterge cele $N$ elemente ale secvenţei şi păstrează numai semnele, astfel: `>>><<`.
La final, Ana îi arată lui Bogdan şirul semnelor şi îi cere să reconstituie secvenţa de numere naturale scrisă iniţial pe tablă.

# Cerință

Cunoscând şirul semnelor construit de Ana, scrieţi un program care să îl ajute pe Bogdan să reconstituie secvenţa de numere naturale distincte scrisă iniţial pe tablă.

# Date de intrare

Fişierul de intrare `compar.in` conţine pe prima linie o secvenţă de caractere din mulţimea $\{$`<`$,$ `>`$\}$, reprezentând şirul semnelor obţinut de Ana după compararea elementelor vecine din secvenţa iniţială.

# Date de ieșire

Fişierul de ieşire `compar.out` va conţine pe prima linie numărul natural $N$, reprezentând lungimea secvenţei iniţiale. Pe a doua linie vor fi scrise $N$ numere naturale distincte cuprinse între $1$ şi $N$, separate prin câte un spaţiu, reprezentând elementele secvenţei iniţiale, reconstituită pe baza semnelor din fişierul de intrare. 

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Dacă există mai multe soluţii, afişaţi oricare dintre acestea.
* Pentru determinarea corectă a lungimii secvenţei se acordă $10\%$ din punctajul pe test.

---

Example:
`compar.in`
```
>>><<
```

`compar.out`
```
6
6 4 2 1 3 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_and_solve(input_file):
    # Read the input signs from file
    with open(input_file, 'r') as file:
        signs = file.readline().strip()

    # Calculate the length of the initial sequence
    N = len(signs) + 1

    # Initialize an empty list to store the sequence
    sequence = np.empty(N, dtype=int)

    # Initialize variables for ascending and descending sequences
    min_val, max_val = 1, N

    # Reconstruct the sequence
    for i, sign in enumerate(signs):
        if sign == '<':
            sequence[i] = min_val
            min_val += 1
        else:
            sequence[i] = max_val
            max_val -= 1

    # Fill the last number in the sequence
    sequence[-1] = min_val  # Now, min_val equals max_val

    return N, sequence

def write_output(output_file, N, sequence):
    # Write the output to a file
    with open(output_file, 'w') as file:
        file.write(f"{N}\n")
        file.write(' '.join(map(str, sequence.tolist())))

# Read, solve, and write the output
N, sequence = read_and_solve('compar.in')
write_output('compar.out', N, sequence)
```
```
---------- user ----------


Expected program to write result to `compar.out` and read from `compar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_and_solve(input_file):
    with open(input_file, 'r') as file:
        signs = file.readline().strip()

    N = len(signs) + 1
    sequence = np.empty(N, dtype=int)
    asc_start, desc_start = 1, N

    asc_index = 0
    desc_index = -1

    for sign in signs:
        if sign == '<':
            sequence[asc_index] = asc_start
            asc_index += 1
            asc_start += 1
        else:
            sequence[desc_index] = desc_start
            desc_index -= 1
            desc_start -= 1

    sequence[asc_index] = asc_start  # Place the last number

    return N, sequence

def write_output(output_file, N, sequence):
    with open(output_file, 'w') as file:
        file.write(f"{N}\n")
        file.write(' '.join(map(str, sequence)))

N, sequence = read_and_solve('compar.in')
write_output('compar.out', N, sequence)
```
```
---------- user ----------


Expected program to write result to `compar.out` and read from `compar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy as np
import numpy as np

# Function to read and solve the problem
def read_and_solve(input_file):
    with open(input_file, 'r') as file:
        signs = file.readline().strip()

    # Calculate the length of the initial sequence
    N = len(signs) + 1

    # Initialize the output sequence using numpy for memory efficiency
    sequence = np.zeros(N, dtype=int)

    # The current_value is set to the maximum possible value N
    current_value = N

    # Iterate over the signs in reverse order
    for i in range(N - 2, -1, -1):
        sequence[i + 1] = current_value
        if signs[i] == '>':
            current_value -= 1
        else:
            # Find the smallest value that can be placed here
            min_possible_value = sequence[i + 2] - 1
            for j in range(i, -1, -1):
                if signs[j] == '<':
                    min_possible_value -= 1
                else:
                    break
            current_value = min_possible_value

    # Assign the last value for the first position
    sequence[0] = current_value

    return N, sequence

# Function to write output to file
def write_output(output_file, N, sequence):
    with open(output_file, 'w') as file:
        file.write(f"{N}\n")
        # Use ' '.join with map to convert integers to strings efficiently
        file.write(' '.join(map(str, sequence)))

# Main function to coordinate the read, solve, and write operations
def main():
    # Call the read_and_solve function
    N, sequence = read_and_solve('compar.in')

    # Call the write_output function
    write_output('compar.out', N, sequence)

# Run the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `compar.out` and read from `compar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
