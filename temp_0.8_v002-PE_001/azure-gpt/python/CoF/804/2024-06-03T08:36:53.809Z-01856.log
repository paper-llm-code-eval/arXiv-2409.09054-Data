---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ion Petre, ca oricare adolescent, este pasionat atât de jocuri, cât şi de informatică. Ultimul astfel de joc este acela de a elimina dintr-un text cuvinte astfel încât fiecare cuvânt rămas să fie urmat de un cuvânt care începe cu aceeaşi literă cu care se termină cuvântul precedent. Face excepţie de la această regulă numai ultimul cuvânt.

# Cerinţă

Pentru un text dat:
1) afișați numărul **minim** de cuvinte ce pot fi eliminate astfel încât în textul rămas orice cuvânt (cu excepţia ultimului) să se termine cu aceeaşi literă cu care începe cuvântul următor;
2) afișați numărul de cuvinte din text;
3) afișați cuvintele din text rămase după eliminarea de la prima cerință, fiecare cuvânt fiind afişat pe câte o linie.


# Date de intrare


Fişierul `text.in` conţine un text scris pe mai multe linii. Pe fiecare linie se află cuvinte formate din litere mici ale alfabetului latin. Cuvintele sunt despărţite între ele prin exact câte un spaţiu.

# Date de ieșire


Fişierul `text.out` va conţine pe primele doua linii două numerele $x$ şi $y$, unde $x$ va fi numărul minim de cuvinte ce trebuie eliminate, iar $y$ numărul de cuvinte din text. Pe liniile următoare se vor afişa, în ordine, cuvintele rămase după eliminarea celor $y$ cuvinte, câte un cuvant pe o linie.

# Restricții și precizări

*	Numărul de cuvinte din text este maximum $20 \ 000$.
*	Lungimea maximă a unui cuvânt este $20$.
*	Fiecare linie de text din fişierul de intrare are cel mult $200$ de caractere.
*	În fişierul de intrare pot exista rânduri goale.
*	Se acordă $30\%$ din punctaj pentru rezolvarea corectă a primei cerințe.
*	Se acordă $40\%$ din punctaj pentru rezolvarea corectă a primelor două cerinţe.
*	Pentru rezolvarea corectă a tuturor cerinţelor se acordă tot punctajul.
*   **Notă**: exemplul de pe PDF este afișat în mod invers față de cum este afișat în teste.

---

Example:
`text.in`
```
pentru ca nu are 

timp ion spune ca nu urmareste nici
emisiuni interesante si evident nici altfel
de

emisiuni
```

`text.out`
```
13
19
ion
nu
urmareste
emisiuni
interesante
evident
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Efficiently read words from file and get the first and last character
def read_words_from_file(file_path):
    with open(file_path, 'r') as file:
        words = []
        for line in file:
            words.extend(line.strip().split())
    return np.array([(word[0], word[-1], word) for word in words if word], dtype='U21')

# Write results to file
def write_results_to_file(file_path, words_to_remove, total_words, remaining_words):
    with open(file_path, 'w') as file:
        file.write(f"{words_to_remove}\n{total_words}\n")
        for word in remaining_words:
            file.write(f"{word}\n")

# Main function to find the chain of words
def find_word_chain(words_info):
    graph = {}
    in_degree = {}
    out_degree = {}
    
    # Build the graph and keep track of the in-degree and out-degree of each node
    for first_char, last_char, word in words_info:
        if first_char not in graph:
            graph[first_char] = []
        graph[first_char].append((last_char, word))
        in_degree.setdefault(first_char, 0)
        out_degree[first_char] = out_degree.get(first_char, 0) + 1
        in_degree[last_char] = in_degree.get(last_char, 0) + 1
        out_degree.setdefault(last_char, 0)

    # Eulerian path - Hierholzer's Algorithm adapted for the problem
    def dfs(current_char):
        while out_degree[current_char] > 0:
            out_degree[current_char] -= 1
            next_char, next_word = graph[current_char].pop()
            dfs(next_char)
            remaining_words.append(next_word)
    
    # Start from any node with a non-zero out-degree
    start_char = next((char for char in out_degree if out_degree[char] > 0), None)
    remaining_words = []
    dfs(start_char)
    
    # The words to remove are the ones not included in the remaining words
    words_to_remove = len(words_info) - len(remaining_words)
    return words_to_remove, [word for _, _, word in reversed(remaining_words)]

# Read the words from input file
words_info = read_words_from_file('text.in')

# Find the chain of words and calculate the words to remove
words_to_remove, remaining_words = find_word_chain(words_info)

# Write the results to output file
write_results_to_file('text.out', words_to_remove, len(words_info), remaining_words)
```
```
---------- user ----------


Expected program to write result to `text.out` and read from `text.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
