---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.

# Cerință

Dându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.

# Date de intrare
Fișierul de intrare `poarta.in` are următorul format:
- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.
- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).

# Date de ieşire
Pe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.

# Restricții și precizări
- $1 < p < 5\ 000$
- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.
- **Atenție la cazurile când poziția inițială este identică cu cea finală!**
- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.
- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.

---

Example:
`poarta.in`
```
3
1 2 3 4
6 5 3 9
3 4 1 2
```

`poarta.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read from the input file
with open('poarta.in', 'r') as file:
    p = int(file.readline())
    initial_final_positions = np.array([list(map(int, line.split())) for line in file.readlines()])

# If the initial position is the same as the final, then no move is needed for that crew
no_move_needed = np.sum((initial_final_positions[:, :2] == initial_final_positions[:, 2:]).all(axis=1))

# To get the minimum moves, we need to match each initial position with a final position
# Since each crew can teleport instantly to any other gate, we just need to find
# the number of crews not already at their final destination and subtract those
# who don't need to move at all.
moves_needed = p - no_move_needed

# Write to the output file
with open('poarta.out', 'w') as file:
    file.write(str(moves_needed) + '\n')
```
```
This code assumes that all crews can teleport instantly to their final destinations without interfering with each other, and that the only limitation is that no two crews can occupy the same gate at the same time. Since the initial and final positions are all distinct, the number of moves needed is simply the number of crews that need to move. If a crew is already at its final destination, it does not need to move at all. The code calculates this and subtracts it from the total number of crews to get the final result.
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read from the input file
    with open('poarta.in', 'r') as file:
        p = int(file.readline())
        initial_final_positions = np.array([list(map(int, line.split())) for line in file.readlines()])

    # If the initial position is the same as the final, then no move is needed for that crew
    no_move_needed = np.sum((initial_final_positions[:, :2] == initial_final_positions[:, 2:]).all(axis=1))

    # To get the minimum moves, we need to match each initial position with a final position.
    # Since crews can instantly teleport to any gate, we just need to find the number of crews
    # that are not initially at their final destination. Those who are already at their destinations
    # do not need to move.
    moves_needed = p - no_move_needed

    # Write to the output file
    with open('poarta.out', 'w') as file:
        file.write(str(moves_needed))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input file, read the number of teams and their positions
with open('poarta.in', 'r') as f:
    p = int(f.readline().strip())
    # Store the initial and final positions in separate lists
    initial_positions = set()
    final_positions = set()
    for _ in range(p):
        x1, y1, x2, y2 = map(int, f.readline().split())
        # Skip if initial and final positions are the same
        if (x1, y1) != (x2, y2):
            initial_positions.add((x1, y1))
            final_positions.add((x2, y2))

# The minimum number of moves is the number of teams not already at their destination.
min_moves = len(initial_positions)

# Write the result to the output file
with open('poarta.out', 'w') as f:
    f.write(str(min_moves))
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# First, read the data from poarta.in file
with open('poarta.in', 'r') as file:
    p = int(file.readline().strip())  # Read the number of teams
    moves = 0
    for _ in range(p):
        x1, y1, x2, y2 = map(int, file.readline().split())
        # Increase move count if initial and final positions are different
        if (x1, y1) != (x2, y2):
            moves += 1

# Now, write the result to poarta.out file
with open('poarta.out', 'w') as file:
    file.write(str(moves))
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the data from "poarta.in"
with open('poarta.in', 'r') as file:
    # Read the number of crews
    p = int(file.readline())
    # Initialize a counter for the minimum number of moves
    min_moves = p
    for _ in range(p):
        # Read the initial and final positions for each crew
        x1, y1, x2, y2 = map(int, file.readline().split())
        # If the initial position is the same as the final position,
        # decrement the counter as no move is needed
        if (x1, y1) == (x2, y2):
            min_moves -= 1

# Write the result to "poarta.out"
with open('poarta.out', 'w') as file:
    file.write(str(min_moves))
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# This code will read from 'poarta.in' and write the result to 'poarta.out'.

# Reading from 'poarta.in'
with open('poarta.in', 'r') as input_file:
    p = int(input_file.readline().strip())  # The number of crews
    # Initialize an array to keep track of whether a crew has to move
    # We use False to indicate no movement needed (initial == final)
    move_required = [False] * p
    for i in range(p):
        x1, y1, x2, y2 = map(int, input_file.readline().strip().split())
        # If initial position is not equal to final position, set to True
        if (x1, y1) != (x2, y2):
            move_required[i] = True

# The minimum number of moves needed is the count of True values in move_required
min_moves = sum(move_required)

# Writing to 'poarta.out'
with open('poarta.out', 'w') as output_file:
    output_file.write(f'{min_moves}\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input file and read the number of teams and their positions
with open('poarta.in', 'r') as f:
    p = int(f.readline().strip())
    teams = [tuple(map(int, f.readline().split())) for _ in range(p)]

# Calculate the number of teams that need to move
# (i.e., teams whose initial position differs from the final position)
moves_needed = sum(1 for x1, y1, x2, y2 in teams if (x1, y1) != (x2, y2))

# Write the result to the output file
with open('poarta.out', 'w') as f:
    f.write(str(moves_needed) + '\n')
```
```
