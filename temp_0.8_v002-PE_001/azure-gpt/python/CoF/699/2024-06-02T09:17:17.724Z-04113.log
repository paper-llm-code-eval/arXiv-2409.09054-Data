---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.

# Cerință

Dându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.

# Date de intrare
Fișierul de intrare `poarta.in` are următorul format:
- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.
- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).

# Date de ieşire
Pe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.

# Restricții și precizări
- $1 < p < 5\ 000$
- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.
- **Atenție la cazurile când poziția inițială este identică cu cea finală!**
- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.
- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.

---

Example:
`poarta.in`
```
3
1 2 3 4
6 5 3 9
3 4 1 2
```

`poarta.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Define the path to the input and output files
input_file_path = 'poarta.in'
output_file_path = 'poarta.out'

# Read the data from the input file
with open(input_file_path, 'r') as file:
    p = int(file.readline().strip())
    # Initialize two arrays to store the initial and final positions
    initial_positions = np.zeros((p, 2), dtype=np.int64)
    final_positions = np.zeros((p, 2), dtype=np.int64)
    # Fill the arrays with the data from the file
    for i in range(p):
        line = file.readline().strip().split()
        initial_positions[i] = int(line[0]), int(line[1])
        final_positions[i] = int(line[2]), int(line[3])

# Since we can go from any gate to any other gate in one move, the problem reduces to a bipartite matching
# We can use a greedy algorithm to match initial positions to final positions
# For each initial position, we find an unmatched final position and match them
# If the initial and final position of an element are the same, it's already matched and doesn't require a move

# Count unmatched positions, this will be the number of moves
unmatched_initials = {tuple(pos) for pos in initial_positions}
unmatched_finals = {tuple(pos) for pos in final_positions}

# Remove those positions that do not need to move (where initial and final positions are the same)
already_matched = unmatched_initials.intersection(unmatched_finals)
unmatched_initials -= already_matched
unmatched_finals -= already_matched

# The minimum number of moves is the number of unmatched positions after removing already matched positions
min_moves = len(unmatched_initials)

# Write the result to the output file
with open(output_file_path, 'w') as file:
    file.write(str(min_moves) + '\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
