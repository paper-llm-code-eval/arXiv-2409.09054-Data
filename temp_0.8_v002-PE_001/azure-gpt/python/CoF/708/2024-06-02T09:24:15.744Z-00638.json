{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/708/2024-06-02T09:24:15.744Z-00638.log",
  "attemptStart": 1717320255.744,
  "attemptEnd": 1717320281.844,
  "attemptDuration": 26.100000143051147,
  "code": "from itertools import permutations\n\n# Efficient function to write to file without storing all anagrams in memory\ndef write_anagrams_to_file(word, file_path):\n    # Create a sorted list of characters from the word\n    char_list = sorted(word)\n    num_chars = len(char_list)\n    \n    # Create a boolean list to keep track of used characters\n    used = [False] * num_chars\n    \n    # Create a list to hold the current anagram\n    current = [''] * num_chars\n    \n    # Open the file in write mode\n    with open(file_path, 'w') as f:\n        # Recursive function to generate anagrams\n        def generate_anagram(index):\n            if index == num_chars:\n                # Join the characters to form the anagram and write to file\n                f.write(''.join(current) + '\\n')\n                return\n            \n            for i in range(num_chars):\n                if not used[i]:\n                    # If the same character is repeated, skip generating duplicates\n                    if i > 0 and char_list[i] == char_list[i - 1] and not used[i - 1]:\n                        continue\n                    used[i] = True\n                    current[index] = char_list[i]\n                    generate_anagram(index + 1)\n                    used[i] = False\n        \n        generate_anagram(0)\n\n# Read the input word\nwith open('anagrame.in', 'r') as file:\n    word_to_anagram = file.readline().strip()\n\n# Generate and write the anagrams\nwrite_anagrams_to_file(word_to_anagram, 'anagrame.out')\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1546,
  "metadata": {
    "id": 708,
    "examples": [
      {
        "in": "ana",
        "out": "aan\nana\nnaa",
        "explainer": ""
      }
    ],
    "body": "Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.\n\n# Cerință\n\nScrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.\n\n# Date de intrare\n\nFişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.\n\n\n# Date de ieșire\n\nFişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.\n\n# Restricții și precizări\n\n* Cuvântul dat are cel mult $10$ litere mici.\n* Cuvântul $x = x_1 \\ x_2 \\dots x_n$ precede cuvântul $y = y_1 \\ y_2 \\dots y_n$ dacă există un indice $k \\in {1, 2, \\dots, n}$ astfel încât $x_i = y_i$, $i \\in {1, 2, \\dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.",
    "header": {
      "problem_id": 708,
      "problem_name": "anagrame",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "anagrame.in",
      "output_filename": "anagrame.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 VIII: Problema 2 (Modificată)"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "anagrame.in",
      "output": "anagrame.out"
    },
    "consoleInteraction": false
  }
}