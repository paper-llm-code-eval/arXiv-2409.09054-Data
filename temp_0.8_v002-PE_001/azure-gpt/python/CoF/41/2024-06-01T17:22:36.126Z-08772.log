---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Constants for the deltas when jumping over another immortal.
DELTAS = [(-2, 0), (2, 0), (0, -2), (0, 2)]

def read_input(filename):
    with open(filename, 'r') as file:
        n, m, I = map(int, file.readline().strip().split())
        immortals = [tuple(map(int, line.strip().split())) for line in file]
    return n, m, I, immortals

def write_output(filename, fights):
    with open(filename, 'w') as file:
        for fight in fights:
            file.write(" ".join(map(str, fight)) + '\n')

def is_valid_position(n, m, position):
    x, y = position
    return 1 <= x <= n and 1 <= y <= m

def can_jump(board, start, end):
    # A jump is valid if the end position is valid and empty and the middle position has an immortal.
    mid = ((start[0] + end[0]) // 2, (start[1] + end[1]) // 2)
    return (is_valid_position(*board.shape, end) and board[end] == 0 and board[mid] == 1)

def find_fights(board, current, path):
    if np.sum(board) == 1:
        return True  # Only one immortal left, the goal is reached.

    for delta in DELTAS:
        next_pos = (current[0] + delta[0], current[1] + delta[1])
        if can_jump(board, current, next_pos):
            board[current] = 0
            board[(current[0] + next_pos[0]) // 2, (current[1] + next_pos[1]) // 2] = 0
            board[next_pos] = 1
            path.append(current + next_pos)
            if find_fights(board, next_pos, path):
                return True
            path.pop()
            board[next_pos] = 0
            board[(current[0] + next_pos[0]) // 2, (current[1] + next_pos[1]) // 2] = 1
            board[current] = 1
    return False

def solve_immortal_problem(n, m, I, immortals):
    board = np.zeros((n + 1, m + 1), dtype=int)
    for immortal in immortals:
        board[immortal] = 1
    fights = []
    for start in immortals:
        if find_fights(board, start, fights):
            return fights
    return None

# Main
n, m, I, immortals = read_input('immortal.in')
fights = solve_immortal_problem(n, m, I, immortals)
if fights:
    write_output('immortal.out', fights)
```
```
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Constants for the deltas when jumping over another immortal.
DELTAS = [(-2, 0), (2, 0), (0, -2), (0, 2)]

def read_input(filename):
    with open(filename, 'r') as file:
        n, m, I = map(int, file.readline().strip().split())
        immortals = [tuple(map(int, line.strip().split())) for line in file]
    return n, m, I, immortals

def write_output(filename, fights):
    with open(filename, 'w') as file:
        for fight in fights:
            file.write(" ".join(map(str, fight)) + '\n')

def is_valid_position(n, m, position):
    x, y = position
    return 1 <= x <= n and 1 <= y <= m

def can_jump(board, start, end):
    # A jump is valid if the end position is valid and empty and the middle position has an immortal.
    mid = ((start[0] + end[0]) // 2, (start[1] + end[1]) // 2)
    return (is_valid_position(*board.shape, end) and board[end] == 0 and board[mid] == 1)

def find_fights(board, current, path):
    if np.sum(board) == 1:
        return True  # Only one immortal left, the goal is reached.

    for delta in DELTAS:
        next_pos = (current[0] + delta[0], current[1] + delta[1])
        if can_jump(board, current, next_pos):
            board[current] = 0
            board[(current[0] + next_pos[0]) // 2, (current[1] + next_pos[1]) // 2] = 0
            board[next_pos] = 1
            path.append(current + next_pos)
            if find_fights(board, next_pos, path):
                return True
            path.pop()
            board[next_pos] = 0
            board[(current[0] + next_pos[0]) // 2, (current[1] + next_pos[1]) // 2] = 1
            board[current] = 1
    return False

def solve_immortal_problem(n, m, I, immortals):
    board = np.zeros((n + 1, m + 1), dtype=int)
    for immortal in immortals:
        board[immortal] = 1
    fights = []
    for start in immortals:
        if find_fights(board, start, fights):
            return fights
    return None

# Main
n, m, I, immortals = read_input('immortal.in')
fights = solve_immortal_problem(n, m, I, immortals)
if fights:
    write_output('immortal.out', fights)
```
```
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Constants for the deltas when jumping over another immortal.
DELTAS = [(-2, 0), (2, 0), (0, -2), (0, 2)]

# Read input from the file immortal.in
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().strip().split())
    immortals = [tuple(map(int, line.strip().split())) for line in file]

# Initialize the board
board = np.zeros((n + 1, m + 1), dtype=int)
for immortal in immortals:
    board[immortal] = 1

# Recursive function to find the sequence of fights
def find_sequence(board, sequence):
    if np.sum(board) == 1:
        return True  # Only one immortal left

    for immortal in np.argwhere(board == 1):
        immortal = tuple(immortal)
        for delta in DELTAS:
            next_pos = (immortal[0] + delta[0], immortal[1] + delta[1])
            mid_pos = (immortal[0] + delta[0] // 2, immortal[1] + delta[1] // 2)
            if can_jump(immortal, mid_pos, next_pos):
                board[immortal] = board[mid_pos] = 0
                board[next_pos] = 1
                sequence.append(immortal + next_pos)
                if find_sequence(board, sequence):
                    return True
                sequence.pop()
                board[next_pos] = 0
                board[mid_pos] = board[immortal] = 1

    return False

# Helper function to check if a jump is valid
def can_jump(start, mid, end):
    return is_valid(start) and is_valid(mid) and is_valid(end) and board[mid] == 1 and board[end] == 0

# Helper function to check if a position is within the board
def is_valid(pos):
    return 1 <= pos[0] <= n and 1 <= pos[1] <= m

# Find the sequence of fights
sequence = []
if find_sequence(board, sequence):
    # Write the result to the file immortal.out
    with open('immortal.out', 'w') as file:
        for fight in sequence:
            file.write(f"{fight[0]} {fight[1]} {fight[2]} {fight[3]}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the numpy module is not available in the environment where the program is running. I will rewrite the solution without using numpy so that it doesn't depend on any external libraries.

```python
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, I = map(int, file.readline().strip().split())
        immortals = [tuple(map(int, line.strip().split())) for line in file]
    return n, m, I, immortals

def write_output(filename, fights):
    with open(filename, 'w') as file:
        for fight in fights:
            file.write(" ".join(map(str, fight)) + '\n')

def can_jump(board, start, end, n, m):
    if not (1 <= end[0] <= n and 1 <= end[1] <= m):
        return False
    mid = ((start[0] + end[0]) // 2, (start[1] + end[1]) // 2)
    return board[mid[0]][mid[1]] and not board[end[0]][end[1]]

def find_fights(board, n, m, I, fights, x, y):
    if len(fights) == I - 1:
        return True

    for dx, dy in [(-2, 0), (2, 0), (0, -2), (0, 2)]:
        nx, ny = x + dx, y + dy
        if can_jump(board, (x, y), (nx, ny), n, m):
            board[x][y] = board[(x + nx) // 2][(y + ny) // 2] = 0
            board[nx][ny] = 1
            fights.append((x, y, nx, ny))
            if find_fights(board, n, m, I, fights, nx, ny):
                return True
            fights.pop()
            board[x][y] = board[(x + nx) // 2][(y + ny) // 2] = 1
            board[nx][ny] = 0
    return False

# Read input
n, m, I, immortals_positions = read_input('immortal.in')
board = [[0] * (m + 1) for _ in range(n + 1)]

for x, y in immortals_positions:
    board[x][y] = 1

# Find a valid sequence of fights
fights = []
for x, y in immortals_positions:
    if find_fights(board, n, m, I, fights, x, y):
        break

# Write output
write_output('immortal.out', fights)
```
