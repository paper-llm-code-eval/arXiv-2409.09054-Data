---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Directions for 'jumps' (up, down, left, right)
DIRECTIONS = [(-2, 0), (2, 0), (0, -2), (0, 2)]
# Offsets for 'midpoints' corresponding to each direction
MIDPOINTS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Read the input from the file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(int, line.split())) for line in file]

# Convert immortals' positions to a grid
grid = np.zeros((n + 2, m + 2), dtype=np.uint8)  # Padded to simplify boundary checks
for x, y in immortals:
    grid[x, y] = 1

def valid_move(x, y, dx, dy):
    """Check if a move is valid."""
    nx, ny = x + dx, y + dy
    mx, my = x + dx // 2, y + dy // 2
    return grid[nx, ny] == 0 and grid[mx, my] == 1

def solve(x, y, moves_left):
    """Backtracking algorithm to find a sequence of moves."""
    if moves_left == 1:
        return [(x, y, x, y)]
    
    grid[x, y] = 0  # Mark current immortal as 'in combat'
    for (dx, dy), (mx, my) in zip(DIRECTIONS, MIDPOINTS):
        if valid_move(x, y, dx, dy):
            # Make the move
            grid[x + mx, y + my] = 0  # Remove the defeated immortal
            nx, ny = x + dx, y + dy
            grid[nx, ny] = 1  # Move the attacker to the new position
            
            # Continue with the next move
            result = solve(nx, ny, moves_left - 1)
            if result:
                return [(x, y, nx, ny)] + result
            
            # Undo the move
            grid[x + mx, y + my] = 1
            grid[nx, ny] = 0
    grid[x, y] = 1  # Mark current immortal as 'alive' again
    return []

# Find a sequence of moves for each immortal
for x, y in immortals:
    sequence = solve(x, y, I)
    if sequence:
        with open('immortal.out', 'w') as file:
            for move in sequence[:-1]:  # Exclude the last move (it has the same start and end)
                file.write(f"{move[0]} {move[1]} {move[2]} {move[3]}\n")
        break
```

This solution assumes that there is always a valid sequence of moves to leave only one immortal (as per the problem's statement). It finds such a sequence using backtracking, starting with each immortal until a valid sequence is found. It uses NumPy for grid representation, but mainly relies on list manipulation and recursion. The recursive function `solve` tries all possible moves, backtracks if a sequence of moves does not lead to a solution, and records the correct sequence when found.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not installed in the environment where the script is trying to run. However, since we have a memory constraint and we're looking to minimize memory usage, we might choose not to use `numpy` and instead work with built-in Python data structures, which would also solve the module not found error.

Let's rewrite the solution without using `numpy`. We will use a dictionary to represent the grid and store the positions of the immortals.

```python
# Read the input from the file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(int, line.split())) for line in file]

# Directions for 'jumps' (up, down, left, right)
DIRECTIONS = [(-2, 0), (2, 0), (0, -2), (0, 2)]
# Offsets for 'midpoints' corresponding to each direction
MIDPOINTS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Initialize the grid with immortal positions
grid = {(x, y): True for x, y in immortals}

def valid_move(x, y, dx, dy):
    """Check if a move is valid."""
    nx, ny = x + dx, y + dy
    mx, my = x + dx // 2, y + dy // 2
    return (nx, ny) not in grid and (mx, my) in grid

def solve(x, y, moves_left):
    """Backtracking algorithm to find a sequence of moves."""
    if moves_left == 1:
        return [(x, y, x, y)]
    
    grid.pop((x, y))  # Mark current immortal as 'in combat'
    for (dx, dy), (mx, my) in zip(DIRECTIONS, MIDPOINTS):
        if valid_move(x, y, dx, dy):
            # Make the move
            grid.pop((x + mx, y + my))  # Remove the defeated immortal
            nx, ny = x + dx, y + dy
            grid[(nx, ny)] = True  # Move the attacker to the new position
            
            # Continue with the next move
            result = solve(nx, ny, moves_left - 1)
            if result:
                return [(x, y, nx, ny)] + result
            
            # Undo the move
            grid[(x + mx, y + my)] = True
            grid.pop((nx, ny))
    grid[(x, y)] = True  # Mark current immortal as 'alive' again
    return []

# Find a sequence of moves for each immortal
for x, y in immortals:
    sequence = solve(x, y, I)
    if sequence:
        with open('immortal.out', 'w') as file:
            for move in sequence[:-1]:  # Exclude the last move (it has the same start and end)
                file.write(f"{move[0]} {move[1]} {move[2]} {move[3]}\n")
        break
```

This version of the code should work with the Python standard library and respect the memory limit as it uses a dictionary to manage the positions of the immortals, which is more memory-efficient than a full grid representation. Moreover, it doesn't rely on any third-party libraries, which ensures that it will run in any standard Python environment.
