---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Constants for move directions
MOVES = [(-2, 0), (2, 0), (0, -2), (0, 2)]
MID_MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Check if a move is valid within the board boundaries and if the target cell is empty
def is_valid_move(board, start, direction, n, m):
    end = (start[0] + direction[0], start[1] + direction[1])
    mid = (start[0] + MID_MOVES[MOVES.index(direction)][0], start[1] + MID_MOVES[MOVES.index(direction)][1])
    if 0 <= end[0] < n and 0 <= end[1] < m and board[end] == 0 and board[mid] == 1:
        return True, end, mid
    return False, None, None

# Recursive function to find a sequence of moves leading to one immortal left
def find_sequence(board, immortals, seq, n, m):
    if len(immortals) == 1:
        return True
    for i, imm in enumerate(immortals):
        for move in MOVES:
            valid, end, mid = is_valid_move(board, imm, move, n, m)
            if valid:
                board[imm] = 0
                board[mid] = 0
                board[end] = 1
                new_seq = seq + [(imm[0] + 1, imm[1] + 1, end[0] + 1, end[1] + 1)]
                if find_sequence(board, immortals[:i] + immortals[i + 1:] + [end], new_seq, n, m):
                    return True
                board[imm] = 1
                board[mid] = 1
                board[end] = 0
    return False

# Read the input file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(I)]

# Create the board
board = np.zeros((n, m), dtype=int)
for immortal in immortals:
    board[immortal] = 1

# Find the sequence of moves
sequence = []
if find_sequence(board, immortals, sequence, n, m):
    with open('immortal.out', 'w') as file:
        for move in sequence:
            file.write(' '.join(map(str, move)) + '\n')
else:
    with open('immortal.out', 'w') as file:
        file.write('No solution\n')
```
```
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Constants for move directions
MOVES = [(-2, 0), (2, 0), (0, -2), (0, 2)]
MID_MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Check if a move is valid within the board boundaries and if the target cell is empty
def is_valid_move(board, start, direction, n, m):
    end = (start[0] + direction[0], start[1] + direction[1])
    mid = (start[0] + MID_MOVES[MOVES.index(direction)][0], start[1] + MID_MOVES[MOVES.index(direction)][1])
    if 0 <= end[0] < n and 0 <= end[1] < m and board[end] == 0 and board[mid] == 1:
        return True, end, mid
    return False, None, None

# Recursive function to find a sequence of moves leading to one immortal left
def find_sequence(board, immortals, seq, n, m):
    if len(immortals) == 1:
        return True
    for i, imm in enumerate(immortals):
        for move in MOVES:
            valid, end, mid = is_valid_move(board, imm, move, n, m)
            if valid:
                board[imm] = 0
                board[mid] = 0
                board[end] = 1
                new_seq = seq + [(imm[0] + 1, imm[1] + 1, end[0] + 1, end[1] + 1)]
                if find_sequence(board, immortals[:i] + immortals[i + 1:] + [end], new_seq, n, m):
                    return True
                board[imm] = 1
                board[mid] = 1
                board[end] = 0
    return False

# Read the input file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(I)]

# Create the board
board = np.zeros((n, m), dtype=int)
for immortal in immortals:
    board[immortal] = 1

# Find the sequence of moves
sequence = []
if find_sequence(board, immortals, sequence, n, m):
    with open('immortal.out', 'w') as file:
        for move in sequence:
            file.write(' '.join(map(str, move)) + '\n')
else:
    with open('immortal.out', 'w') as file:
        file.write('No solution\n')
```
```
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Constants for move directions
MOVES = [(-2, 0), (2, 0), (0, -2), (0, 2)]
MID_MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Check if a move is valid within the board boundaries and if the target cell is empty
def is_valid_move(board, start, direction):
    end = (start[0] + direction[0], start[1] + direction[1])
    mid = (start[0] + direction[0] // 2, start[1] + direction[1] // 2)
    if 0 <= end[0] < board.shape[0] and 0 <= end[1] < board.shape[1] and board[end] == 0 and board[mid] == 1:
        return True, end, mid
    return False, None, None

# Recursive function to find a sequence of moves leading to one immortal left
def find_sequence(board, immortals, seq):
    if len(immortals) == 1:
        return True
    for i, imm in enumerate(immortals):
        for move in MOVES:
            valid, end, mid = is_valid_move(board, imm, move)
            if valid:
                board[imm] = 0
                board[mid] = 0
                board[end] = 1
                new_seq = seq + [(imm[0] + 1, imm[1] + 1, end[0] + 1, end[1] + 1)]
                if find_sequence(board, immortals[:i] + immortals[i + 1:] + [end], new_seq):
                    return True
                board[imm] = 1
                board[mid] = 1
                board[end] = 0
    return False

# Read the input file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(I)]

# Create the board
board = np.zeros((n, m), dtype=int)
for immortal in immortals:
    board[immortal] = 1

# Find the sequence of moves
sequence = []
if find_sequence(board, immortals, sequence):
    with open('immortal.out', 'w') as file:
        for move in sequence:
            file.write(' '.join(map(str, move)) + '\n')
else:
    with open('immortal.out', 'w') as file:
        file.write('No solution\n')
```
```
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I apologize for the confusion. Below is the corrected Python code that reads from `immortal.in` and writes to `immortal.out`, avoiding the use of `input()` and `print()`. It is designed to minimize memory usage and should fit within the ~8MB limit.

```python
# Constants for move directions
MOVES = [(-2, 0), (2, 0), (0, -2), (0, 2)]
MID_MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# Read the input file
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortals = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(I)]

# Initialize the board
board = [[0] * m for _ in range(n)]
for immortal in immortals:
    board[immortal[0]][immortal[1]] = 1

# Function to check if the move is valid
def is_valid_move(x, y, dx, dy):
    nx, ny = x + dx, y + dy
    mx, my = x + dx // 2, y + dy // 2
    if 0 <= nx < n and 0 <= ny < m and board[nx][ny] == 0 and board[mx][my] == 1:
        return True
    return False

# Recursive function to find the sequence of battles
def find_sequence(x, y, remaining):
    if remaining == 1:
        return True
    for dx, dy in MOVES:
        if is_valid_move(x, y, dx, dy):
            nx, ny = x + dx, y + dy
            mx, my = x + dx // 2, y + dy // 2
            board[x][y] = board[mx][my] = 0
            board[nx][ny] = 1
            if find_sequence(nx, ny, remaining - 1):
                battles.append((x + 1, y + 1, nx + 1, ny + 1))
                return True
            board[x][y] = board[mx][my] = 1
            board[nx][ny] = 0
    return False

# Find the battles sequence starting from each immortal
for immortal in immortals:
    battles = []
    if find_sequence(immortal[0], immortal[1], I):
        with open('immortal.out', 'w') as file:
            for battle in reversed(battles):
                file.write(' '.join(map(str, battle)) + '\n')
        break
```
