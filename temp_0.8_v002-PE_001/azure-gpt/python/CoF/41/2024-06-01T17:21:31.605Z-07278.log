---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the Python solution for the given problem:

```python
# immortal.py

import numpy as np

# Directions to check for a valid jump. (dx, dy) pairs.
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def read_input(filename):
    with open(filename, 'r') as file:
        n, m, I = map(int, file.readline().split())
        immortals = [tuple(map(int, line.split())) for line in file]
    return n, m, I, immortals

def write_output(filename, battles):
    with open(filename, 'w') as file:
        for battle in battles:
            file.write(' '.join(map(str, battle)) + '\n')

def is_valid_position(x, y, n, m):
    return 1 <= x <= n and 1 <= y <= m

def find_solution(n, m, I, immortals):
    grid = np.zeros((n + 2, m + 2), dtype=int)
    for x, y in immortals:
        grid[x, y] = 1
    battles = []

    def backtrack(x, y, remaining):
        if remaining == 1:
            return True
        for dx, dy in directions:
            nx, ny = x + 2*dx, y + 2*dy
            mx, my = x + dx, y + dy
            if is_valid_position(nx, ny, n, m) and grid[mx, my] == 1 and grid[nx, ny] == 0:
                # Perform the jump
                grid[x, y] = grid[mx, my] = 0
                grid[nx, ny] = 1
                battles.append((x, y, nx, ny))
                # Recurse to next state
                if backtrack(nx, ny, remaining - 1):
                    return True
                # Backtrack
                grid[x, y] = grid[mx, my] = 1
                grid[nx, ny] = 0
                battles.pop()
        return False

    for x, y in immortals:
        if backtrack(x, y, I):
            return battles
    return None

def main():
    n, m, I, immortals = read_input('immortal.in')
    solution = find_solution(n, m, I, immortals)
    if solution is not None:
        write_output('immortal.out', solution)
    else:
        write_output('immortal.out', [('No solution found')])

if __name__ == "__main__":
    main()
```

This code should be run as a Python script, not inside a Jupyter notebook or other interactive environment, as it expects to read from and write to files named `immortal.in` and `immortal.out`, respectively.

Please save this code in a `.py` file and place the input file `immortal.in` in the same directory before executing it. The output will be saved to `immortal.out` in the same directory. The solution uses NumPy for a more efficient matrix representation and backtracking to find a sequence of battles that leaves only one immortal standing.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the numpy module is not available in the current environment where the script is being executed. Since the problem statement requires us to optimize both time and memory usage and also specifies a memory limit of ~8MB, it's likely that the environment is constrained and may not allow the installation of numpy or other external libraries.

Given this, I will rewrite the solution to not use numpy or any other external libraries, relying only on Python's standard library. Below is the revised solution.

```python
# immortal_no_numpy.py

# Directions to check for a valid jump. (dx, dy) pairs.
directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def read_input(filename):
    with open(filename, 'r') as file:
        n, m, I = map(int, file.readline().split())
        immortals = [tuple(map(int, line.split())) for line in file]
    return n, m, I, immortals

def write_output(filename, battles):
    with open(filename, 'w') as file:
        for battle in battles:
            file.write(' '.join(map(str, battle)) + '\n')

def is_valid_position(x, y, n, m):
    return 1 <= x <= n and 1 <= y <= m

def find_solution(n, m, I, immortals):
    grid = [[0] * (m + 2) for _ in range(n + 2)]
    for x, y in immortals:
        grid[x][y] = 1
    battles = []

    def backtrack(x, y, remaining):
        if remaining == 1:
            return True
        for dx, dy in directions:
            nx, ny = x + 2*dx, y + 2*dy
            mx, my = x + dx, y + dy
            if is_valid_position(nx, ny, n, m) and grid[mx][my] == 1 and grid[nx][ny] == 0:
                # Perform the jump
                grid[x][y] = grid[mx][my] = 0
                grid[nx][ny] = 1
                battles.append((x, y, nx, ny))
                # Recurse to next state
                if backtrack(nx, ny, remaining - 1):
                    return True
                # Backtrack
                grid[x][y] = grid[mx][my] = 1
                grid[nx][ny] = 0
                battles.pop()
        return False

    for x, y in immortals:
        if backtrack(x, y, I):
            return battles
    return None

def main():
    n, m, I, immortals = read_input('immortal.in')
    solution = find_solution(n, m, I, immortals)
    if solution is not None:
        write_output('immortal.out', solution)
    else:
        write_output('immortal.out', [('No solution found')])

if __name__ == "__main__":
    main()
```

To run this code, save it to a Python file (e.g., `immortal_no_numpy.py`), place it in the same directory as the `immortal.in` file, and execute it in an environment where you have Python installed. The output will be written to `immortal.out` in the same directory.
