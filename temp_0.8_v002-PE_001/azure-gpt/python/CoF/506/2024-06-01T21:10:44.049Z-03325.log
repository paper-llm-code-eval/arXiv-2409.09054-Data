---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Precompute Fibonacci numbers up to the maximum possible value in 32-bit integer range
def generate_fibonacci(limit):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib >= limit:
            break
        fibs.append(next_fib)
    return fibs

# Efficiently generate a set of Fibonacci numbers for quick lookup
fib_set = set(generate_fibonacci(2**31))

# Reads the matrix from file and returns it as a NumPy array
def read_matrix(filename):
    with open(filename, 'r') as file:
        c, n, m = map(int, file.readline().split())
        matrix = np.array([list(map(int, line.split())) for line in file], dtype=np.int32)
    return c, matrix

# Finds the closest Fibonacci number for a given number
def closest_fib(num):
    global fib_set
    if num in fib_set:
        return num
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if abs(a - num) <= abs(b - num) else b

# Writes the result to the output file
def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def solve_problem(c, matrix):
    if c == 1:
        return np.sum(np.isin(matrix, list(fib_set)))

    elif c == 2:
        # Flatten the matrix to get the 'snek' sequence
        snek_seq = matrix.flatten()
        max_fibosnek_sum = 0
        current_sum = 0
        max_non_fibosnek_len = 0
        current_non_fibosnek_len = 0
        for num in snek_seq:
            if num in fib_set:
                current_sum += num
                if current_non_fibosnek_len > max_non_fibosnek_len:
                    max_non_fibosnek_len = current_non_fibosnek_len
                    max_fibosnek_sum = current_sum
                current_non_fibosnek_len = 0
            else:
                if current_non_fibosnek_len == 0:
                    current_sum += closest_fib(num)
                else:
                    current_sum = 0
                current_non_fibosnek_len += 1
        if current_non_fibosnek_len > max_non_fibosnek_len:
            max_fibosnek_sum = current_sum
        return max_fibosnek_sum

# Main function
def main():
    c, matrix = read_matrix('fibosnek.in')
    result = solve_problem(c, matrix)
    write_output('fibosnek.out', result)

# Execute the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Define the maximum possible value based on the problem's constraints
MAX_VALUE = 2**31 - 1

# Efficiently generate a set of Fibonacci numbers up to the given limit
def generate_fibonacci():
    fibs = [0, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib > MAX_VALUE:
            break
        fibs.append(next_fib)
    return set(fibs[2:])  # Exclude 0 and 1

# Precompute the Fibonacci set
fib_set = generate_fibonacci()

# Efficiently read the input matrix from the file
def read_input(file_path):
    with open(file_path, 'r') as file:
        c, n, m = map(int, file.readline().split())
        matrix = np.loadtxt(file, dtype=np.int32, ndmin=2)
    return c, matrix

# Write the result to the output file
def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(str(result) + '\n')

# Solve the first requirement
def count_fibonacci_numbers(matrix):
    return np.isin(matrix, list(fib_set)).sum()

# Solve the second requirement
def longest_fibosnek_sum(matrix):
    flat_matrix = matrix.flatten()
    max_sum = 0
    current_sum = 0
    max_length = 0
    nonfib_start = 0
    for i, value in enumerate(flat_matrix):
        if value in fib_set:
            current_sum += value
        else:
            nonfib_end = i
            nonfib_len = nonfib_end - nonfib_start
            if nonfib_len > max_length:
                max_length = nonfib_len
                max_sum = current_sum + value  # Include the non-fib number
            current_sum = 0
            nonfib_start = i + 1
    return max_sum

# Main function to process the input and write the output
def main():
    c, matrix = read_input('fibosnek.in')
    if c == 1:
        result = count_fibonacci_numbers(matrix)
    else:
        result = longest_fibosnek_sum(matrix)
    write_output('fibosnek.out', result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently generate a set of Fibonacci numbers for quick lookup
def generate_fibonacci(limit):
    fibs, a, b = [0, 1], 0, 1
    while b < limit:
        a, b = b, a + b
        fibs.append(b)
    return set(fibs[2:])  # Starting from the third Fibonacci number

# Precompute Fibonacci numbers up to the maximum value of a 32-bit integer
fib_set = generate_fibonacci(2**31)

# Reads the matrix from file and returns it as a NumPy array
def read_matrix(filename):
    with open(filename, 'r') as file:
        c, n, m = map(int, file.readline().split())
        matrix = np.array([list(map(int, line.split())) for line in file.readlines()], dtype=np.int32)
    return c, matrix

# Finds the closest Fibonacci number for a given number
def closest_fib(num):
    global fib_set
    a, b = 1, 1
    while b < num:
        a, b = b, a + b
    return a if (num - a) <= (b - num) else b

# Solve the first requirement
def count_fibonacci_numbers(matrix):
    return np.isin(matrix, list(fib_set)).sum()

# Solve the second requirement
def longest_fibosnek_sum(matrix):
    snek_seq = matrix.flatten()
    max_sum, current_sum = 0, 0
    max_len, current_len = 0, 0
    for num in snek_seq:
        if num in fib_set:
            current_sum += num
            current_len += 1
        else:
            if current_len > max_len:
                max_len, max_sum = current_len, current_sum
            current_sum += closest_fib(num)
            current_len = 1
    if current_len > max_len:
        max_len, max_sum = current_len, current_sum
    return max_sum + (closest_fib(snek_seq[-1]) if snek_seq[-1] not in fib_set else 0)

# Main function
def main():
    c, matrix = read_matrix('fibosnek.in')
    result = count_fibonacci_numbers(matrix) if c == 1 else longest_fibosnek_sum(matrix)
    with open('fibosnek.out', 'w') as file:
        file.write(str(result) + '\n')

# Execute the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to generate Fibonacci numbers up to a certain limit
def generate_fib(limit):
    fibs = [1, 1]
    while fibs[-1] <= limit:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs

# Generate all Fibonacci numbers within the 32-bit integer range
fib_numbers = generate_fib(2**31 - 1)
fib_set = set(fib_numbers)

# Function to determine if a number is a Fibonacci number and find the closest one
def closest_fib(num):
    if num in fib_set:
        return num, True
    for i in range(len(fib_numbers)):
        if fib_numbers[i] > num:
            if i == 0:
                return fib_numbers[i], False
            # Return the closest Fibonacci number (default to the smaller one if equidistant)
            return (fib_numbers[i] if fib_numbers[i] - num < num - fib_numbers[i-1] 
                    else fib_numbers[i-1]), False
    return fib_numbers[-1], False

# Function to process the matrix and solve the problem
def process_matrix(matrix, c):
    fib_count = 0
    max_sequence_sum = 0
    current_sequence_sum = 0
    max_non_fib_sequence_length = 0
    current_non_fib_sequence_length = 0
    start_new_sequence = True

    for num in matrix.flatten():
        is_fib, closest = closest_fib(num)
        if is_fib:
            fib_count += 1
            current_sequence_sum += num
            if current_non_fib_sequence_length > max_non_fib_sequence_length:
                max_non_fib_sequence_length = current_non_fib_sequence_length
                max_sequence_sum = current_sequence_sum
            current_non_fib_sequence_length = 0
        else:
            if start_new_sequence:
                current_sequence_sum += closest
                start_new_sequence = False
            current_non_fib_sequence_length += 1
        if current_non_fib_sequence_length > max_non_fib_sequence_length:
            max_sequence_sum = current_sequence_sum

    if c == 1:
        return fib_count
    else:
        return max_sequence_sum

# Read the matrix from the file, process it and write the result to another file
def main():
    with open('fibosnek.in', 'r') as fin:
        c, n, m = map(int, fin.readline().split())
        matrix = np.array([list(map(int, fin.readline().split())) for _ in range(n)], dtype=int)

    result = process_matrix(matrix, c)
    
    with open('fibosnek.out', 'w') as fout:
        fout.write(f"{result}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently generate a list of Fibonacci numbers for quick lookup
def generate_fibonacci():
    fibs = [0, 1]
    next_fib = 1
    while next_fib < 2**31:
        fibs.append(next_fib)
        next_fib = fibs[-1] + fibs[-2]
    return fibs

# Precomputed Fibonacci numbers up to the maximum value of a 32-bit integer
fibonacci_numbers = generate_fibonacci()
fibonacci_set = set(fibonacci_numbers)

# Function to find the closest Fibonacci number
def closest_fib(num):
    for i in range(len(fibonacci_numbers)):
        if fibonacci_numbers[i] >= num:
            return fibonacci_numbers[i-1] if i > 0 and num - fibonacci_numbers[i-1] <= fibonacci_numbers[i] - num else fibonacci_numbers[i]

# Function to process the matrix for requirement 1
def process_matrix_for_count(matrix):
    return np.sum(np.isin(matrix, list(fibonacci_set)))

# Function to process the matrix for requirement 2
def process_matrix_for_sum(matrix):
    flat_matrix = matrix.flatten()
    max_sum = 0
    seq_sum = 0
    for i in range(len(flat_matrix)):
        if flat_matrix[i] in fibonacci_set:
            seq_sum += flat_matrix[i]
        else:
            seq_sum += closest_fib(flat_matrix[i])
            # Check if the new sequence can potentially be longer than the max_sum
            if i + 1 < len(flat_matrix) and flat_matrix[i + 1] not in fibonacci_set:
                seq_sum = 0
        max_sum = max(max_sum, seq_sum)
    return max_sum

# Main function to read the input file, process the data, and write the output file
def main():
    with open('fibosnek.in', 'r') as infile:
        c, n, m = map(int, infile.readline().split())
        matrix = np.array([list(map(int, infile.readline().split())) for _ in range(n)], dtype=int)

    result = process_matrix_for_count(matrix) if c == 1 else process_matrix_for_sum(matrix)
    
    with open('fibosnek.out', 'w') as outfile:
        outfile.write(f'{result}\n')

# Execute the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if a number is a Fibonacci number and get the closest Fibonacci number
def is_fibo(num, fibo_set, fibo_list):
    if num in fibo_set:
        return True, num
    else:
        left, right = 0, len(fibo_list) - 1
        while right - left > 1:
            mid = (left + right) // 2
            if fibo_list[mid] == num:
                return True, num
            elif fibo_list[mid] < num:
                left = mid
            else:
                right = mid
        return False, fibo_list[left]

# Function to generate all Fibonacci numbers up to the given limit
def generate_fibos_upto(limit):
    fibos = [1, 1]
    while fibos[-1] < limit:
        fibos.append(fibos[-1] + fibos[-2])
    return fibos

# Read matrix from the input file
def read_matrix_from_file(file_path):
    with open(file_path, 'r') as file:
        c, n, m = map(int, file.readline().strip().split())
        matrix = np.array([list(map(int, file.readline().strip().split())) for _ in range(n)])
    return c, matrix

# Main function to solve the problem
def main():
    # Generate Fibonacci numbers and store them in a set for fast look-up
    fibo_list = generate_fibos_upto(2**31)
    fibo_set = set(fibo_list)
    
    # Read the matrix from the input file
    task, matrix = read_matrix_from_file('fibosnek.in')
    
    # Solve the problem according to the task
    if task == 1:
        fib_count = sum(matrix.flatten() in fibo_set)
        output = fib_count
    else:
        # Flatten the matrix and find the longest fibosnek sum
        snek_sequence = matrix.flatten()
        longest_fibosnek_sum = 0
        current_sum = 0
        for number in snek_sequence:
            if number in fibo_set:
                current_sum += number
            else:
                is_fibo_num, closest_fibo_num = is_fibo(number, fibo_set, fibo_list)
                current_sum += closest_fibo_num
                if current_sum > longest_fibosnek_sum:
                    longest_fibosnek_sum = current_sum
                current_sum = 0
        output = longest_fibosnek_sum
    
    # Write the result to the output file
    with open('fibosnek.out', 'w') as file:
        file.write(str(output))

# Run the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficiently generate all Fibonacci numbers within the 32-bit integer range
def generate_fibonacci(limit=2**31):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib >= limit:
            break
        fibs.append(next_fib)
    return fibs, set(fibs)

fib_list, fib_set = generate_fibonacci()

# Function to find the closest Fibonacci number to a non-Fibonacci number
def closest_fib(num):
    for i in range(len(fib_list)):
        if fib_list[i] > num:
            if i == 0 or num - fib_list[i - 1] <= fib_list[i] - num:
                return fib_list[i - 1]
            else:
                return fib_list[i]

# Function to solve the first requirement
def count_fibonacci(matrix):
    return np.sum(np.isin(matrix, fib_set))

# Function to solve the second requirement
def longest_fibosnek_sum(matrix):
    flat_matrix = matrix.flatten()
    max_sum = 0
    current_sum = 0
    current_non_fib_sum = 0
    current_non_fib_length = 0
    longest_non_fib_length = 0
    for num in flat_matrix:
        if num in fib_set:
            current_sum += num
            # Reset the non-fibonacci sequence
            if current_non_fib_length > longest_non_fib_length:
                longest_non_fib_length = current_non_fib_length
                max_sum = current_sum
            current_non_fib_sum = 0
            current_non_fib_length = 0
        else:
            if current_non_fib_length == 0:
                current_sum += closest_fib(num)
            else:
                current_sum -= current_non_fib_sum
                current_sum += closest_fib(num)
            current_non_fib_sum = num
            current_non_fib_length += 1
    return max_sum if longest_non_fib_length > current_non_fib_length else current_sum

# Main function to read input, process data, and write output
def main():
    with open('fibosnek.in', 'r') as f:
        c, n, m = [int(x) for x in f.readline().strip().split()]
        matrix = np.array([list(map(int, f.readline().strip().split())) for _ in range(n)])

    if c == 1:
        result = count_fibonacci(matrix)
    else:
        result = longest_fibosnek_sum(matrix)

    with open('fibosnek.out', 'w') as f:
        f.write(str(result))

# Execute the program
if __name__ == '__main__':
    main()
```
```
