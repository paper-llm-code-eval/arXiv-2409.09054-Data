---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Efficient Fibonacci sequence generator up to a given limit
def generate_fibonacci(limit):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib > limit:
            break
        fibs.append(next_fib)
    return set(fibs)

# Find the closest Fibonacci number
def closest_fib(num, fibs):
    if num in fibs:
        return num
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if abs(a - num) <= abs(b - num) else b

# Main functionality
def solve_challenge(c, n, m, matrix, fibs):
    fib_count = 0
    max_fibosnek_sum = 0
    current_non_fibosnek_sum = 0
    max_non_fibosnek_sum = 0
    is_fibosnek = False
    
    # Process the matrix
    for j in range(m):
        for i in range(n):
            num = matrix[i, j]
            if num in fibs:
                fib_count += 1
                if not is_fibosnek:
                    is_fibosnek = True
                    max_fibosnek_sum += num
                else:
                    max_fibosnek_sum += num
            else:
                if is_fibosnek:
                    is_fibosnek = False
                    current_non_fibosnek_sum = closest_fib(num, fibs)
                else:
                    current_non_fibosnek_sum += closest_fib(num, fibs)
                max_non_fibosnek_sum = max(max_non_fibosnek_sum, current_non_fibosnek_sum)
    
    # Handle the requirements
    if c == 1:
        return fib_count
    else:
        return max(max_fibosnek_sum, max_fibosnek_sum + max_non_fibosnek_sum)

# Read input
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Generate Fibonacci set
limit = 2 ** 31 - 1
fibs = generate_fibonacci(limit)

# Solve the challenge based on the requirements
result = solve_challenge(c, n, m, matrix, fibs)

# Write output
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient Fibonacci sequence generator up to a given limit
def generate_fibonacci(limit):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib > limit:
            break
        fibs.append(next_fib)
    return set(fibs)

# Find the closest Fibonacci number
def closest_fib(num, fibs):
    if num in fibs:
        return num
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if abs(a - num) <= abs(b - num) else b

# Main functionality
def solve_challenge(c, n, m, matrix, fibs):
    fib_count = 0
    max_fibosnek_sum = 0
    current_non_fibosnek_sum = 0
    max_non_fibosnek_sum = 0
    is_fibosnek = False
    
    # Process the matrix
    for j in range(m):
        for i in range(n):
            num = matrix[i, j]
            if num in fibs:
                fib_count += 1
                if not is_fibosnek:
                    is_fibosnek = True
                    max_fibosnek_sum += num
                else:
                    max_fibosnek_sum += num
            else:
                if is_fibosnek:
                    is_fibosnek = False
                    current_non_fibosnek_sum = closest_fib(num, fibs)
                else:
                    current_non_fibosnek_sum += closest_fib(num, fibs)
                max_non_fibosnek_sum = max(max_non_fibosnek_sum, current_non_fibosnek_sum)
    
    # Handle the requirements
    if c == 1:
        return fib_count
    else:
        return max(max_fibosnek_sum, max_fibosnek_sum + max_non_fibosnek_sum)

# Read input from 'fibosnek.in'
with open('fibosnek.in', 'r') as file:
    lines = file.readlines()
    c, n, m = map(int, lines[0].split())
    matrix = np.array([list(map(int, line.split())) for line in lines[1:]])

# Generate Fibonacci set
limit = 2 ** 31 - 1
fibs = generate_fibonacci(limit)

# Solve the challenge based on the requirements
result = solve_challenge(c, n, m, matrix, fibs)

# Write output to 'fibosnek.out'
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient Fibonacci sequence generator up to a given limit
def generate_fibonacci(limit):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib > limit:
            break
        fibs.append(next_fib)
    return set(fibs)

# Find the closest Fibonacci number
def closest_fib(num, fibs):
    if num in fibs:
        return num
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if abs(a - num) <= abs(b - num) else b

# Main functionality
def solve_challenge(c, n, m, matrix, fibs):
    fib_count = 0
    max_fibosnek_sum = 0
    current_non_fibosnek_sum = 0
    max_non_fibosnek_sum = 0
    current_fibosnek_sum = 0
    max_fibosnek_length = 0
    current_fibosnek_length = 0
    
    # Process the matrix
    for j in range(m):
        for i in range(n):
            num = matrix[i, j]
            if num in fibs:
                fib_count += 1
                current_non_fibosnek_sum = 0
                current_fibosnek_length += 1
                current_fibosnek_sum += num
                if current_fibosnek_length > max_fibosnek_length:
                    max_fibosnek_length = current_fibosnek_length
                    max_fibosnek_sum = current_fibosnek_sum
                elif current_fibosnek_length == max_fibosnek_length:
                    max_fibosnek_sum = max(max_fibosnek_sum, current_fibosnek_sum)
            else:
                closest_fib_num = closest_fib(num, fibs)
                if current_non_fibosnek_sum + closest_fib_num > max_non_fibosnek_sum:
                    max_non_fibosnek_sum = current_non_fibosnek_sum + closest_fib_num
                current_non_fibosnek_sum = 0
                current_fibosnek_length = 0
                current_fibosnek_sum = 0
    
    # Handle the requirements
    if c == 1:
        return fib_count
    else:
        return max_fibosnek_sum + max_non_fibosnek_sum

# Read input from 'fibosnek.in'
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix_elements = []
    for _ in range(n):
        matrix_elements.extend(map(int, file.readline().split()))
    matrix = np.array(matrix_elements).reshape(n, m)

# Generate Fibonacci set
limit = max(matrix.flatten())
fibs = generate_fibonacci(limit)

# Solve the challenge based on the requirements
result = solve_challenge(c, n, m, matrix, fibs)

# Write output to 'fibosnek.out'
with open('fibosnek.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read input from 'fibosnek.in'
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.loadtxt(file, dtype=int)

# Function to check if a number is a Fibonacci number
def is_fib(num, computed_fibs, max_fib):
    if num > max_fib:
        return False
    return num in computed_fibs

# Function to generate Fibonacci sequence up to the maximum number in the matrix
def generate_fibs(max_num):
    fibs = {1}
    a, b = 1, 1
    while b <= max_num:
        fibs.add(b)
        a, b = b, a + b
    return fibs, a

# Pre-compute the Fibonacci numbers and maximum Fibonacci number less than max in matrix
computed_fibs, max_fib = generate_fibs(np.amax(matrix))

# Solve the challenge
if c == 1:
    fib_count = np.sum([is_fib(num, computed_fibs, max_fib) for num in matrix.flatten()])
    result = fib_count
else:
    max_non_fib_sum = 0
    max_fib_sum = 0
    current_fib_sum = 0
    current_non_fib_sum = 0
    fib_sequence_found = False

    for num in matrix.flatten():
        if is_fib(num, computed_fibs, max_fib):
            if fib_sequence_found:
                current_fib_sum += num
            else:
                fib_sequence_found = True
                current_fib_sum = num
            current_non_fib_sum = 0
        else:
            if fib_sequence_found:
                fib_sequence_found = False
                max_fib_sum = max(max_fib_sum, current_fib_sum)
                current_fib_sum = 0
            current_non_fib_sum += min(
                num - max_fib, 
                computed_fibs.bisect_right(num) - num, 
                key=abs)
            max_non_fib_sum = max(max_non_fib_sum, current_non_fib_sum)
    
    result = max(max_fib_sum, max_fib_sum + max_non_fib_sum)

# Write output to 'fibosnek.out'
with open('fibosnek.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient Fibonacci checker and generator
def generate_fibonacci(max_value):
    fibs = {0, 1}
    a, b = 0, 1
    while b <= max_value:
        a, b = b, a + b
        fibs.add(b)
    return fibs

# Find the closest Fibonacci number
def closest_fib(num, fibs):
    if num in fibs:
        return num, True
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return (a if abs(a - num) <= abs(b - num) else b, False)

def process_matrix(c, n, m, matrix, fibs):
    fib_count = 0
    longest_fibosnek_sum = 0
    current_sum = 0
    longest_seq_length = 0
    current_seq_length = 0
    transformable_sum = 0

    for value in matrix.reshape(-1):
        closest_fib_num, is_fib = closest_fib(value, fibs)
        if is_fib:
            fib_count += 1
            current_sum += value
            current_seq_length += 1
            if current_seq_length > longest_seq_length:
                longest_seq_length = current_seq_length
                longest_fibosnek_sum = current_sum
        else:
            if current_seq_length > longest_seq_length:
                longest_seq_length = current_seq_length
                longest_fibosnek_sum = current_sum
            current_sum = 0
            current_seq_length = 0
            transformable_sum += closest_fib_num

    if c == 1:
        return fib_count
    else:
        return max(longest_fibosnek_sum, longest_fibosnek_sum + transformable_sum)

# Read input data from file
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = []
    for _ in range(n):
        matrix.extend(map(int, file.readline().split()))

# Convert list to numpy array to optimize operations
matrix = np.array(matrix).reshape(n, m)

# Generate all Fibonacci numbers up to the maximum value in the matrix
fibs = generate_fibonacci(matrix.max())

# Process the matrix and get the result
result = process_matrix(c, n, m, matrix, fibs)

# Write the result to the file
with open('fibosnek.out', 'w') as file:
    file.write(f'{result}\n')
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array manipulation
import numpy as np

# Function to generate Fibonacci numbers up to a maximum value
def generate_fibonacci(max_value):
    fibs = [0, 1]
    while fibs[-1] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return set(fibs[:-1])

# Function to find the closest Fibonacci number to a given number
def closest_fib(num, fibs):
    if num in fibs:
        return num
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if (num - a) <= (b - num) else b

# Function to solve the problem based on the given task number c
def solve(c, n, m, matrix, fibs):
    if c == 1:
        # Count the Fibonacci numbers in the matrix
        return np.sum(np.isin(matrix, list(fibs)))

    elif c == 2:
        # Find the sum of the longest fibosnek sequence
        max_sum = 0
        current_sum = 0
        max_length = 0
        current_length = 0
        for num in matrix.flatten():
            if num in fibs:
                current_sum += num
                current_length += 1
            else:
                if current_length > max_length:
                    max_length = current_length
                    max_sum = current_sum
                elif current_length == max_length:
                    max_sum = max(max_sum, current_sum)
                current_sum = closest_fib(num, fibs)
                current_length = 1
        # Check the last sequence
        if current_length > max_length:
            max_length = current_length
            max_sum = current_sum
        elif current_length == max_length:
            max_sum = max(max_sum, current_sum)
        return max_sum

# Read the input from 'fibosnek.in'
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().strip().split())
    matrix = np.array([list(map(int, file.readline().strip().split())) for _ in range(n)])

# Generate the set of Fibonacci numbers up to the maximum element in the matrix
fibs = generate_fibonacci(np.max(matrix))

# Solve the problem for the given task number c
result = solve(c, n, m, matrix, fibs)

# Write the output to 'fibosnek.out'
with open('fibosnek.out', 'w') as file:
    file.write(f'{result}\n')
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import bisect

# Function to read the matrix from the input file
def read_matrix(file_path):
    with open(file_path, 'r') as file:
        c, n, m = map(int, file.readline().split())
        matrix = [list(map(int, file.readline().split())) for _ in range(n)]
    return c, n, m, matrix

# Function to generate Fibonacci numbers up to a maximum value
def generate_fibonacci(max_value):
    fibs = [1, 1]
    while fibs[-1] + fibs[-2] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs

# Function to find the closest Fibonacci number
def closest_fib(num, fibs):
    pos = bisect.bisect_left(fibs, num)
    if pos == len(fibs):
        return fibs[-1]
    elif fibs[pos] == num:
        return num
    elif pos == 0:
        return fibs[0]
    else:
        if fibs[pos] - num < num - fibs[pos - 1]:
            return fibs[pos]
        else:
            return fibs[pos - 1]

# Function to solve the problem
def solve_fibosnek(c, n, m, matrix):
    fibs = generate_fibonacci(max(max(row) for row in matrix))
    fib_set = set(fibs)
    if c == 1:
        # Count the total number of Fibonacci numbers in the matrix
        return sum(cell in fib_set for row in matrix for cell in row)
    else:
        # Find the longest sequence sum
        max_fibosnek_sum = 0
        current_sum = 0
        fibosnek = []
        for row in matrix:
            fibosnek.extend(row)
        fibosnek_sum = 0
        non_fibosnek_sum = 0
        for num in fibosnek:
            if num in fib_set:
                fibosnek_sum += num
                current_sum += num
            else:
                non_fibosnek_sum += closest_fib(num, fibs)
                max_fibosnek_sum = max(max_fibosnek_sum, current_sum)
                current_sum = 0
        max_fibosnek_sum = max(max_fibosnek_sum, current_sum)
        return max(max_fibosnek_sum, fibosnek_sum + non_fibosnek_sum - max_fibosnek_sum)

# Read from 'fibosnek.in', solve the problem, and write to 'fibosnek.out'
c, n, m, matrix = read_matrix('fibosnek.in')
result = solve_fibosnek(c, n, m, matrix)
with open('fibosnek.out', 'w') as file:
    file.write(f'{result}\n')
```
```
