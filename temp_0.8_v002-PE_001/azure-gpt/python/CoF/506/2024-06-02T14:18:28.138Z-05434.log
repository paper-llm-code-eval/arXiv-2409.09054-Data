---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Load the data from the input file
with open('fibosnek.in', 'r') as infile:
    c, n, m = map(int, infile.readline().split())
    matrix = np.loadtxt(infile, dtype=np.uint32, ndmin=2)

# Pre-calculate Fibonacci numbers up to the 2^31-1 using memoization
fib_cache = {0: 0, 1: 1}
max_value = 2**31 - 1
a, b = 0, 1
while b <= max_value:
    fib_cache[b] = len(fib_cache)
    a, b = b, a + b

# Function to find the closest Fibonacci number for a given number
def closest_fib(num):
    a, b = 0, 1
    while b <= num:
        a, b = b, a + b
    return a if b - num >= num - a else b

# Function to compute the required output based on c value
def compute_output(matrix, c):
    fib_nums = 0  # To count Fibonacci numbers in the matrix
    max_length, max_sum = 0, 0  # To determine the longest fibosnek sequence
    current_length, current_sum = 0, 0  # For current sequence tracking
    non_fibo_length, non_fibo_sum = 0, 0  # For current non-fibonacci sequence tracking
    was_non_fibo_transformed = False  # To check if the non-fibosnek sequence was already transformed

    for num in matrix.flat:
        if num in fib_cache:
            fib_nums += 1
            current_length += 1
            current_sum += num
        else:
            if c == 2 and not was_non_fibo_transformed:
                non_fibo_length += 1
                non_fibo_sum += closest_fib(num)
            else:
                if c == 2 and current_length + non_fibo_length > max_length:
                    max_length = current_length + non_fibo_length
                    max_sum = current_sum + non_fibo_sum
                current_length, current_sum = 0, 0
                non_fibo_length, non_fibo_sum = 0, 0
                was_non_fibo_transformed = True

    if c == 2:
        if current_length + non_fibo_length > max_length:
            max_length = current_length + non_fibo_length
            max_sum = current_sum + non_fibo_sum

    return fib_nums if c == 1 else max_sum

# Compute the output and write to the output file
result = compute_output(matrix, c)
with open('fibosnek.out', 'w') as outfile:
    outfile.write(str(result))
```
This code should solve the challenge while optimizing time and memory usage, considering the memory limit. It uses numpy for efficient array processing and calculates the closest Fibonacci number without storing all of them. The solution writes the answer to `fibosnek.out` as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
