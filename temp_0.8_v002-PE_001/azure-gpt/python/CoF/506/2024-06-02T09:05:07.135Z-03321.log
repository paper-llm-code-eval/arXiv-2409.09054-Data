---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Load input data from file
with open('fibosnek.in') as f:
    c, n, m = map(int, f.readline().split())
    matrix = np.array([list(map(int, line.split())) for line in f], dtype=np.int32)

def fibonacci_numbers(limit):
    fibs = [1, 1]
    while fibs[-1] <= limit:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs[:-1]

def closest_fibonacci(number, fibs):
    left = 0
    right = len(fibs) - 1
    while right - left > 1:
        mid = (left + right) // 2
        if fibs[mid] > number:
            right = mid
        else:
            left = mid
    return fibs[left] if abs(fibs[left] - number) <= abs(fibs[right] - number) else fibs[right]

def task1():
    fibs_set = set(fibonacci_numbers(np.max(matrix)))
    fib_count = np.isin(matrix, list(fibs_set)).sum()
    return fib_count

def task2():
    fibs = fibonacci_numbers(np.max(matrix))
    snek = matrix.flatten()
    fibs_set = set(fibs)

    max_sum = 0
    current_sum = 0
    max_length = 0
    current_length = 0
    non_fib_index = -1

    for i, number in enumerate(snek):
        if number in fibs_set:
            current_sum += number
            current_length += 1
            max_sum = max(max_sum, current_sum)
            max_length = max(max_length, current_length)
        else:
            if non_fib_index == -1:
                non_fib_index = i
                replacement = closest_fibonacci(number, fibs)
                current_sum += replacement
                current_length += 1
            else:
                current_sum = closest_fibonacci(number, fibs)
                current_length = 1
                non_fib_index = i
        if current_length > max_length or (current_length == max_length and current_sum > max_sum):
            max_length = current_length
            max_sum = current_sum

    return max_sum

# Calculate and write the output to file
with open('fibosnek.out', 'w') as f:
    if c == 1:
        f.write(str(task1()))
    elif c == 2:
        f.write(str(task2()))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to generate fibonacci numbers up to a certain limit
def generate_fibonacci(limit):
    fibs = [0, 1]
    while fibs[-1] < limit:
        fibs.append(fibs[-1] + fibs[-2])
    return set(fibs[:-1])  # Exclude the last one because it exceeds the limit

# Function to find the closest fibonacci number for a non-fibonacci number
def closest_fibonacci(number, fib_set):
    a, b = 0, 1
    while b <= number:
        a, b = b, a + b
    return a if (number - a) <= (b - number) else b

# Function to solve task 1: Counting fibonacci numbers in the matrix
def count_fibonacci_numbers(matrix, fib_set):
    return sum([1 for x in np.nditer(matrix) if x in fib_set])

# Function to solve task 2: Finding the maximal sum of the longest fibosnek sequence
def longest_fibosnek_sequence(matrix, fib_set):
    snek = matrix.flatten()
    max_length = max_sum = 0
    length = sum_ = 0
    changed = False

    for num in snek:
        if num in fib_set:
            length += 1
            sum_ += num
        else:
            if not changed:
                length += 1
                sum_ += closest_fibonacci(num, fib_set)
                changed = True
            else:
                if length > max_length or (length == max_length and sum_ > max_sum):
                    max_length = length
                    max_sum = sum_

                length = sum_ = 0
                changed = False
    
    if length > max_length or (length == max_length and sum_ > max_sum):
        max_length = length
        max_sum = sum_

    return max_sum

# Read the input data
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.loadtxt(file, dtype=np.int32)

# Solve the problem
fib_set = generate_fibonacci(np.amax(matrix) + 1)
result = count_fibonacci_numbers(matrix, fib_set) if c == 1 else longest_fibosnek_sequence(matrix, fib_set)

# Write the output data
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def fibonacci_up_to(limit):
    # Generates all Fibonacci numbers up to the limit, returned as a set for quick lookup
    fibs = [0, 1]
    while fibs[-1] <= limit:
        fibs.append(fibs[-1] + fibs[-2])
    return set(fibs[:-1])  # Excludes the last number which is above the limit

def closest_fib(num, fibs):
    # Find the closest Fibonacci number to 'num'
    a, b = 0, 1
    while b < num:
        a, b = b, a + b
    return a if (num - a) <= (b - num) else b

def read_matrix(filepath):
    with open(filepath, 'r') as file:
        task, n, m = map(int, file.readline().split())
        matrix = np.fromfile(file, dtype=np.int32, count=n*m, sep=' ').reshape((n, m))
    return task, matrix

def write_result(filepath, result):
    with open(filepath, 'w') as file:
        file.write(str(result) + '\n')

def solve_task1(matrix, fibs):
    return np.isin(matrix, list(fibs)).sum()

def solve_task2(matrix, fibs):
    snek = matrix.flatten()
    longest_sum = 0
    current_sum = 0
    current_length = 0
    non_fibo_replaced = False
    max_length = 0
    for num in snek:
        if num in fibs:
            current_sum += num
            current_length += 1
        else:
            if not non_fibo_replaced:
                current_sum += closest_fib(num, fibs)
                current_length += 1
                non_fibo_replaced = True
            else:
                if current_length > max_length:
                    max_length = current_length
                    longest_sum = current_sum
                current_sum = closest_fib(num, fibs)
                current_length = 1
                non_fibo_replaced = True
    return max(longest_sum, current_sum)

def main():
    task, matrix = read_matrix('fibosnek.in')
    fibs = fibonacci_up_to(np.max(matrix))
    result = solve_task1(matrix, fibs) if task == 1 else solve_task2(matrix, fibs)
    write_result('fibosnek.out', result)

main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient Fibonacci check using a generator
def is_fibonacci(num, generated_fibs, max_fib):
    while max_fib < num:
        generated_fibs.append(max_fib)
        max_fib = generated_fibs[-1] + generated_fibs[-2]
    return num in generated_fibs

# Calculate the nearest Fibonacci number (smaller or equal)
def nearest_fib(num, generated_fibs):
    idx = np.searchsorted(generated_fibs, num)
    if idx == 0:
        return generated_fibs[0]
    elif generated_fibs[idx-1] == num or idx == len(generated_fibs):
        return generated_fibs[idx-1]
    else:
        return generated_fibs[idx] if generated_fibs[idx] - num < num - generated_fibs[idx-1] else generated_fibs[idx-1]

# Task 1: Counting the Fibonacci numbers in the matrix
def count_fibs(matrix, generated_fibs):
    count = 0
    max_fib = generated_fibs[-1]
    for num in np.nditer(matrix):
        if is_fibonacci(num, generated_fibs, max_fib):
            count += 1
    return count

# Task 2: Finding the sum of the longest fibosnek sequence with at most one non-fibonacci number changed
def max_fibosnek_sum(matrix, generated_fibs):
    max_fib = generated_fibs[-1]
    matrix_flat = matrix.flatten()
    max_sequence_sum = 0
    current_sequence_sum = 0
    current_sequence_length = 0
    changed = False
    for num in matrix_flat:
        if is_fibonacci(num, generated_fibs, max_fib):
            current_sequence_sum += num
            current_sequence_length += 1
        elif not changed:
            nearest_fib_num = nearest_fib(num, generated_fibs)
            current_sequence_sum += nearest_fib_num
            current_sequence_length += 1
            changed = True
        else:
            max_sequence_sum = max(max_sequence_sum, current_sequence_sum)
            current_sequence_sum = nearest_fib(num, generated_fibs)
            current_sequence_length = 1
            changed = True
    return max(max_sequence_sum, current_sequence_sum)

# Main entry point
def main():
    with open('fibosnek.in', 'r') as file:
        task, n, m = map(int, next(file).split())
        data = [list(map(int, line.split())) for line in file]
    matrix = np.array(data, dtype=np.int64)

    generated_fibs = [0, 1]

    if task == 1:
        result = count_fibs(matrix, generated_fibs)
    else:  # task == 2
        result = max_fibosnek_sum(matrix, generated_fibs)
    
    with open('fibosnek.out', 'w') as file:
        file.write(str(result))

main()
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if a number is a Fibonacci number and generate necessary Fibonacci numbers
def is_fibonacci(num, fibs):
    while fibs[-1] < num:
        fibs.append(fibs[-1] + fibs[-2])
    return num in fibs

# Function to find the closest Fibonacci number to a given number
def closest_fib(num, fibs):
    idx = np.searchsorted(fibs, num)
    if idx == 0:
        return fibs[0]
    elif fibs[idx-1] == num or idx == len(fibs):
        return fibs[idx-1]
    else:
        return fibs[idx] if fibs[idx] - num < num - fibs[idx-1] else fibs[idx-1]

# Solve task 1
def solve_task1(matrix, fibs):
    count = sum(is_fibonacci(num, fibs) for num in np.nditer(matrix))
    return count

# Solve task 2
def solve_task2(matrix, fibs):
    flat_matrix = matrix.flatten()
    max_sum = 0
    current_sum = 0
    longest_seq = 0
    current_seq = 0
    for num in flat_matrix:
        if is_fibonacci(num, fibs):
            current_sum += num
            current_seq += 1
        else:
            if current_seq > longest_seq or (current_seq == longest_seq and current_sum > max_sum):
                longest_seq = current_seq
                max_sum = current_sum
            next_fib = closest_fib(num, fibs)
            current_sum = next_fib
            current_seq = 1
    if current_seq > longest_seq or (current_seq == longest_seq and current_sum > max_sum):
        max_sum = current_sum
    return max_sum

# Read the input file
with open('fibosnek.in', 'r') as fin:
    task, n, m = map(int, fin.readline().split())
    matrix = np.array([list(map(int, fin.readline().split())) for _ in range(n)], dtype=int)

# Generate the initial list of Fibonacci numbers
fibs = [0, 1]

# Perform the required task
if task == 1:
    result = solve_task1(matrix, fibs)
elif task == 2:
    result = solve_task2(matrix, fibs)

# Write the result to the output file
with open('fibosnek.out', 'w') as fout:
    fout.write(f"{result}\n")
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
