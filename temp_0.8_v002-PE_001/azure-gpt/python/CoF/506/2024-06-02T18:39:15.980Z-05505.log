---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Import numpy for efficient array operations
import numpy as np

# Function to generate all Fibonacci numbers up to the largest number in the matrix
def generate_fibonacci(max_value):
    fibs = [1, 1]
    while fibs[-1] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs[:-1]  # Exclude the last one as it is greater than max_value

# Function to check if a number is a Fibonacci number
def is_fibonacci(fibs, num):
    return num in fibs

# Function to find the closest Fibonacci number
def closest_fibonacci(fibs, num):
    index = np.searchsorted(fibs, num)
    if index == 0:
        return fibs[0]
    elif index == len(fibs) or fibs[index] - num >= num - fibs[index - 1]:
        return fibs[index - 1]
    else:
        return fibs[index]

# Read input
with open('fibosnek.in', 'r') as file:
    lines = file.readlines()
    c, n, m = map(int, lines[0].strip().split())
    matrix = np.array([list(map(int, line.strip().split())) for line in lines[1:]])

# Flatten the matrix column-wise to get the snek traversal
snek = matrix.flatten('F')

# Generate Fibonacci numbers up to the maximum value in the matrix
max_value = np.max(matrix)
fibs = generate_fibonacci(max_value)

# Solve for requirement 1
if c == 1:
    fib_count = sum(is_fibonacci(fibs, num) for num in snek)
    with open('fibosnek.out', 'w') as file:
        file.write(str(fib_count))
else:
    # Solve for requirement 2
    longest_sum = 0
    current_sum = 0
    longest_len = 0
    current_len = 0
    transformed = False
    candidate_sum = 0
    candidate_len = 0

    # Traverse the snek and find the longest fibosnek sequence
    for num in snek:
        if is_fibonacci(fibs, num):
            current_sum += num
            current_len += 1
        else:
            if not transformed:
                # Consider transforming this non-fibonacci number
                transformed_num = closest_fibonacci(fibs, num)
                candidate_sum = current_sum + transformed_num
                candidate_len = current_len + 1
            else:
                # Check if we have a new longest sequence
                if candidate_len > longest_len or (candidate_len == longest_len and candidate_sum > longest_sum):
                    longest_sum = candidate_sum
                    longest_len = candidate_len

                # Reset tracking for the next sequence
                current_sum = 0
                current_len = 0
                transformed = True
                candidate_sum = transformed_num
                candidate_len = 1

    # Check the last sequence
    if candidate_len > longest_len or (candidate_len == longest_len and candidate_sum > longest_sum):
        longest_sum = candidate_sum
        longest_len = candidate_len

    # Write the output
    with open('fibosnek.out', 'w') as file:
        file.write(str(longest_sum))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
