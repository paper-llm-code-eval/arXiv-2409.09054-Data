---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Importing the required libraries
import numpy as np

# Function to generate a dictionary of Fibonacci numbers up to the maximum possible input value
def generate_fibonacci(max_value):
    fib = {0: 0, 1: 1}
    a, b = 0, 1
    while b <= max_value:
        a, b = b, a + b
        fib[b] = b
    return fib

# Function to calculate the closest Fibonacci number to a given number
def closest_fibonacci(num, fib_dict):
    if num in fib_dict:
        return num
    a, b = 0, 1
    while b <= num:
        a, b = b, a + b
    return a if num - a < b - num else b

# Read input from file
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)], dtype=np.int32)

# Flatten the matrix to create the 'snek' array
snek = matrix.flatten()

# Generate Fibonacci numbers up to the maximum possible value in the input
max_value = (2 ** 31) - 1
fib_dict = generate_fibonacci(max_value)

# Solve for c = 1 (count Fibonacci numbers in the matrix)
if c == 1:
    fib_count = sum(1 for num in snek if num in fib_dict)
    with open('fibosnek.out', 'w') as file:
        file.write(str(fib_count))

# Solve for c = 2 (find the sum of the longest fibosnek sequence)
elif c == 2:
    longest_sum = 0
    current_sum = 0
    longest_len = 0
    current_len = 0
    was_non_fib = False
    for num in snek:
        if num in fib_dict:
            current_sum += num
            current_len += 1
        else:
            if not was_non_fib:
                # Attempt to convert current non-fibosnek to fibosnek
                was_non_fib = True
                current_sum += closest_fibonacci(num, fib_dict)
                current_len += 1
            else:
                # Previous sequence ended, check if it's the longest
                if current_len > longest_len or (current_len == longest_len and current_sum > longest_sum):
                    longest_len = current_len
                    longest_sum = current_sum
                # Reset sequence
                current_sum = 0
                current_len = 0
                was_non_fib = False

    # Check the last sequence in case the input ends with a fibosnek sequence
    if current_len > longest_len or (current_len == longest_len and current_sum > longest_sum):
        longest_sum = current_sum

    with open('fibosnek.out', 'w') as file:
        file.write(str(longest_sum))
```

This solution takes into account the memory limit by using efficient data structures and algorithms. The input matrix is converted into a Numpy array which is memory efficient. The Fibonacci numbers are stored in a dictionary that provides constant time look-up. When finding the closest Fibonacci number for a non-fibonacci number, the algorithm stops early if the number is found in the precomputed Fibonacci dictionary, avoiding unnecessary calculations. The 'snek' sequence is only stored as a flattened array, avoiding the creation of any additional large data structures, and the input file is only read once, line by line, minimizing memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Since numpy cannot be used, we will use Python's standard array to manage memory efficiently
import array

# Function to generate a list of Fibonacci numbers up to the maximum possible input value
def generate_fibonacci(max_value):
    fibs = [0, 1]
    while fibs[-1] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs[:-1]  # The last value is beyond max_value, so we exclude it

# Function to calculate the closest Fibonacci number to a given number
def closest_fibonacci(num, fib_list):
    for i in range(len(fib_list)):
        if fib_list[i] > num:
            return fib_list[i-1] if num - fib_list[i-1] <= fib_list[i] - num else fib_list[i]
    return fib_list[-1]

# Read input from file
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = []
    for _ in range(n):
        row = array.array('I', map(int, file.readline().split()))
        matrix.extend(row)

# Generate Fibonacci numbers up to the maximum possible value in the input
max_value = (2 ** 31) - 1
fib_list = generate_fibonacci(max_value)
fib_set = set(fib_list)  # For faster look-up

# Solve for c = 1 (count Fibonacci numbers in the matrix)
if c == 1:
    fib_count = sum(1 for num in matrix if num in fib_set)
    with open('fibosnek.out', 'w') as file:
        file.write(str(fib_count))

# Solve for c = 2 (find the sum of the longest fibosnek sequence)
elif c == 2:
    longest_sum = 0
    current_sum = 0
    longest_len = 0
    current_len = 0
    non_fib_sum = None
    for num in matrix:
        if num in fib_set:
            current_sum += num
            current_len += 1
            if non_fib_sum is not None:
                current_sum += non_fib_sum
                non_fib_sum = None
        else:
            if non_fib_sum is None:
                non_fib_sum = closest_fibonacci(num, fib_list)
            else:
                if current_len > longest_len or (current_len == longest_len and current_sum > longest_sum):
                    longest_len = current_len
                    longest_sum = current_sum
                current_sum = closest_fibonacci(num, fib_list)
                current_len = 1

    # Check the last sequence in case the input ends with a fibosnek sequence
    if current_len > longest_len or (current_len == longest_len and current_sum > longest_sum):
        longest_sum = current_sum

    with open('fibosnek.out', 'w') as file:
        file.write(str(longest_sum))
```
---------- user ----------


Program result did not match expected result.
Input data:
```
2 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```
Expected output:
```
61
```
Found output:
```
67
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
