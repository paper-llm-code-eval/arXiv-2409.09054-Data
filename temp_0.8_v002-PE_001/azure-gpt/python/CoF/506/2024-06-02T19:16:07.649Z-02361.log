---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Required Libraries
import numpy as np
from bisect import bisect_left

# Generate and store Fibonacci numbers up to the highest possible value in the matrix
def generate_fibonacci(max_value):
    fibs = [1, 1]
    while True:
        next_fib = fibs[-1] + fibs[-2]
        if next_fib > max_value:
            break
        fibs.append(next_fib)
    return fibs

# Check if a number is in the fibonacci sequence
def is_fibonacci(fibs, num):
    index = bisect_left(fibs, num)
    return index < len(fibs) and fibs[index] == num

# Calculate the closest Fibonacci number to the given value
def closest_fib(fibs, num):
    index = bisect_left(fibs, num)
    if index == 0:
        return fibs[0]
    if index == len(fibs):
        return fibs[-1]
    if fibs[index] - num < num - fibs[index - 1]:
        return fibs[index]
    else:
        return fibs[index - 1]

# Read matrix from file
def read_matrix(file_name):
    with open(file_name, 'r') as f:
        c, n, m = map(int, f.readline().split())
        matrix = np.array([list(map(int, f.readline().split())) for _ in range(n)])
    return c, matrix

# Write the result to the file
def write_result(file_name, result):
    with open(file_name, 'w') as f:
        f.write(str(result))

# Solution for challenge 1
def count_fibonacci_numbers(matrix, fibs):
    return np.sum(np.isin(matrix, fibs))

# Solution for challenge 2
def max_fibosnek_sum(matrix, fibs):
    snaked_matrix = matrix.flatten()
    max_sum = 0
    temp_sum = 0
    prev_was_fib = False
    for num in snaked_matrix:
        if is_fibonacci(fibs, num):
            temp_sum += num
            prev_was_fib = True
        else:
            if not prev_was_fib:
                temp_sum += closest_fib(fibs, num)
            max_sum = max(max_sum, temp_sum)
            temp_sum = 0
            prev_was_fib = False
    return max(max_sum, temp_sum)

# Main function to solve the problem
def solve_problem(input_file, output_file):
    c, matrix = read_matrix(input_file)
    max_value = np.amax(matrix)
    fibs = generate_fibonacci(max_value)
    
    if c == 1:
        result = count_fibonacci_numbers(matrix, fibs)
    elif c == 2:
        result = max_fibosnek_sum(matrix, fibs)
    
    write_result(output_file, result)

# Run the solution
solve_problem('fibosnek.in', 'fibosnek.out')
```

This code reads from the `fibosnek.in` file, processes the matrix as per the challenge requirements, and writes the result to the `fibosnek.out` file. It uses NumPy for matrix operations and efficient search in the Fibonacci list with `bisect_left`. The Fibonacci numbers are generated once and used throughout the solution. The memory usage of this solution is optimized by storing only the necessary Fibonacci numbers and transforming the matrix into a flattened array for the snaked traversal.

Please note that this code should be run in an environment where `fibosnek.in` and `fibosnek.out` are located in the same directory as the script.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
