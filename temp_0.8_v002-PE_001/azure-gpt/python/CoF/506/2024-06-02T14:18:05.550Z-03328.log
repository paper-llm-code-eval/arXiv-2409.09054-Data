---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to check if x is a Fibonacci number using the perfect square property
def is_fibonacci(x, fib_set):
    return x in fib_set

# Function to generate Fibonacci numbers up to the largest element in the matrix
def generate_fibonacci(max_value):
    fib_numbers = [1, 1]
    while fib_numbers[-1] <= max_value:
        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])
    return set(fib_numbers[:-1])

# Function to calculate the task 1: count the number of Fibonacci numbers in the matrix
def count_fibonacci(matrix, fib_set):
    return np.sum(np.isin(matrix, list(fib_set)))

# Function to calculate the task 2: find the sum of the longest fibosnek sequence
def longest_fibosnek_sum(matrix, fib_set, fib_list):
    # Variables to keep track of the longest sequence and its sum
    longest_seq_sum = 0
    current_seq_sum = 0
    in_fibo_seq = False

    # Helper function to calculate the closest Fibonacci number
    def closest_fib_num(num, fib_list):
        idx = np.searchsorted(fib_list, num)
        if idx == 0:
            return fib_list[0]
        elif idx == len(fib_list):
            return fib_list[-1]
        else:
            before = fib_list[idx - 1]
            after = fib_list[idx]
            return before if num - before <= after - num else after

    # Transpose the matrix to parse by columns
    matrix_t = matrix.T
    for value in matrix_t.flatten():
        if is_fibonacci(value, fib_set):
            if in_fibo_seq:
                current_seq_sum += value
            else:
                in_fibo_seq = True
                current_seq_sum = value
        else:
            if in_fibo_seq:
                longest_seq_sum = max(longest_seq_sum, current_seq_sum)
                current_seq_sum = 0
                in_fibo_seq = False

    # Account for the last sequence if it was not ended
    longest_seq_sum = max(longest_seq_sum, current_seq_sum)

    return longest_seq_sum

# Read input
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Precompute Fibonacci set and list
max_value = matrix.max()
fib_set = generate_fibonacci(max_value)
fib_list = sorted(list(fib_set))

# Solve based on the task
if c == 1:
    result = count_fibonacci(matrix, fib_set)
elif c == 2:
    result = longest_fibosnek_sum(matrix, fib_set, fib_list)

# Write output
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if x is a Fibonacci number using binary search
def is_fibonacci(x, fib_list):
    left, right = 0, len(fib_list) - 1
    while left <= right:
        mid = (left + right) // 2
        if fib_list[mid] == x:
            return True
        elif fib_list[mid] < x:
            left = mid + 1
        else:
            right = mid - 1
    return False

# Function to generate Fibonacci numbers up to the largest element in the matrix
def generate_fibonacci(max_value):
    fib_numbers = [1, 1]
    while fib_numbers[-1] < max_value:
        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])
    return fib_numbers

# Function to calculate the task 1: count the number of Fibonacci numbers in the matrix
def count_fibonacci(matrix, fib_list):
    return np.sum(np.isin(matrix, fib_list))

# Function to calculate the task 2: find the sum of the longest fibosnek sequence
def longest_fibosnek_sum(matrix, fib_list):
    max_non_fibo = 0
    max_seq = 0
    current_seq = 0
    for value in matrix.flatten():
        if is_fibonacci(value, fib_list):
            current_seq += value
        else:
            max_non_fibo = max(max_non_fibo, closest_fibonacci(value, fib_list))
            if current_seq > 0:
                max_seq = max(max_seq, current_seq)
                current_seq = 0
    max_seq = max(max_seq, current_seq)
    return max_seq + max_non_fibo

# Function to find the closest Fibonacci number to a non-Fibonacci number
def closest_fibonacci(num, fib_list):
    idx = np.searchsorted(fib_list, num)
    if idx == 0:
        return fib_list[0]
    elif idx == len(fib_list):
        return fib_list[-1]
    else:
        before = fib_list[idx - 1]
        after = fib_list[idx]
        return before if num - before <= after - num else after

# Read input
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.array([list(map(int, file.readline().split())) for _ in range(n)])

# Precompute Fibonacci list
max_value = matrix.max()
fib_list = generate_fibonacci(max_value)

# Solve based on the task
if c == 1:
    result = count_fibonacci(matrix, fib_list)
elif c == 2:
    result = longest_fibosnek_sum(matrix, fib_list)

# Write output
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to check if x is a Fibonacci number
def is_fibonacci(num, fib_set):
    return num in fib_set

# Function to generate Fibonacci numbers up to the largest element in the matrix
def generate_fibonacci_set(max_value):
    fib_set = set()
    a, b = 0, 1
    while a <= max_value:
        fib_set.add(a)
        a, b = b, a + b
    return fib_set

# Function to find the closest Fibonacci number to a non-Fibonacci number
def closest_fibonacci(num, fib_set):
    fib_list = sorted(fib_set)
    idx = np.searchsorted(fib_list, num)
    if idx == 0:
        return fib_list[0]
    elif idx >= len(fib_list):
        return fib_list[-1]
    before = fib_list[idx - 1]
    after = fib_list[idx]
    return before if num - before < after - num else after

# Function to calculate the task 1 and task 2
def fibosnek(matrix, fib_set, task):
    fibo_count = 0
    max_non_fibo_sum = 0
    max_fibo_sum = 0
    current_fibo_sum = 0
    current_non_fibo_sum = 0
    in_non_fibo = False
    for value in matrix.flatten():
        if is_fibonacci(value, fib_set):
            fibo_count += 1
            current_fibo_sum += value
            if in_non_fibo:
                current_non_fibo_sum = 0
                in_non_fibo = False
        else:
            current_fibo_sum += closest_fibonacci(value, fib_set)
            if in_non_fibo:
                current_non_fibo_sum += value
            else:
                in_non_fibo = True
                current_non_fibo_sum = value
            max_non_fibo_sum = max(max_non_fibo_sum, current_non_fibo_sum)
            current_fibo_sum -= value
        max_fibo_sum = max(max_fibo_sum, current_fibo_sum)
    if task == 1:
        return fibo_count
    elif task == 2:
        return max_fibo_sum + closest_fibonacci(max_non_fibo_sum, fib_set)

# Read input
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, file.readline().split())
    matrix = np.fromfile(file, dtype=int, sep=' ', count=n*m).reshape(n, m)

# Precompute Fibonacci set
max_value = np.max(matrix)
fib_set = generate_fibonacci_set(max_value)

# Solve the task
result = fibosnek(matrix, fib_set, c)

# Write output
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Apologies for the confusion earlier. Here is the updated solution that strictly adheres to the requirements specified in the challenge. It reads from `fibosnek.in` and writes to `fibosnek.out` without using `input()` or `print()`.

```markdown
```python
import numpy as np

# Function to generate all Fibonacci numbers up to a given limit using a set for efficient lookup
def generate_fib_set(limit):
    fib_set = set()
    a, b = 0, 1
    while a <= limit:
        fib_set.add(a)
        a, b = b, a + b
    return fib_set

# Function to find the closest Fibonacci number
def closest_fib(num, fib_set, fib_list):
    if num in fib_set:
        return num
    idx = np.searchsorted(fib_list, num)
    if idx == 0:
        return fib_list[0]
    elif idx == len(fib_list):
        return fib_list[-1]
    before = fib_list[idx - 1]
    after = fib_list[idx]
    return before if num - before <= after - num else after

# Process the matrix to solve the challenge
def process_matrix(matrix, fib_set, fib_list, task):
    count_fib = 0
    longest_sum = 0
    current_sum = 0
    longest_non_fib = 0
    current_non_fib = 0
    for num in matrix:
        if num in fib_set:
            count_fib += 1
            current_sum += num
            if current_non_fib > 0:
                longest_non_fib = max(longest_non_fib, current_non_fib)
                current_non_fib = 0
        else:
            fib_num = closest_fib(num, fib_set, fib_list)
            current_sum += fib_num
            current_non_fib += num
    
    if current_non_fib > 0:
        longest_non_fib = max(longest_non_fib, current_non_fib)
    
    longest_sum = max(longest_sum, current_sum)
    if task == 1:
        return count_fib
    else:
        return longest_sum + closest_fib(longest_non_fib, fib_set, fib_list) - longest_non_fib

# Read the input
with open('fibosnek.in', 'r') as f:
    c, n, m = map(int, f.readline().split())
    matrix = np.array([list(map(int, f.readline().split())) for _ in range(n)]).flatten()

# Generate Fibonacci set and list
max_num = np.max(matrix)
fib_set = generate_fib_set(max_num)
fib_list = sorted(list(fib_set))

# Solve the problem based on the task
result = process_matrix(matrix, fib_set, fib_list, c)

# Write the output
with open('fibosnek.out', 'w') as f:
    f.write(str(result))
```
```
---------- user ----------


Expected program to write result to `fibosnek.out` and read from `fibosnek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
