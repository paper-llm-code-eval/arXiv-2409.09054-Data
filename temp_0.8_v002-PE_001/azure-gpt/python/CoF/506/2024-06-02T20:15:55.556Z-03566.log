---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `fibosnek.in` and write to `fibosnek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[fibosnek.png|align=right|width=25%]

Se consideră o matrice cu $n$ linii și $m$ coloane ce conține numere naturale nenule.
\
Se definește o parcurgere ***snek*** a matricei un șir de valori obținut astfel: se parcurg elementele matricei coloană cu coloană, de la prima până la ultima, și, în cadrul fiecărei coloane, de sus în jos de la elementul aflat pe prima linie, până la cel aflat pe ultima linie, ca în exemplu.
\
Șirul numerelor Fibonacci este definit mai jos unde $\text{fib}[k]$ reprezintă al $k$-lea număr Fibonacci:
* $fib[1] = 1, fib[2] = 1$;
* $fib[k] = fib[k - 1] + fib[k - 2]$, pentru orice $k \gt 2$;

Se numește secvență ***fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că fiecare dintre ei este număr Fibonacci. Similar, se numește secvență ***non-fibosnek*** un termen sau o succesiune de termeni aflați pe poziții consecutive în parcurgerea *snek*, cu proprietatea că niciunul dintre ei nu este număr Fibonacci. Lungimea secvenței este egală cu numărul termenilor săi. Suma secvenței este egală cu suma termenilor săi.

O secvență *non-fibosnek* poate fi transformată în una *fibosnek* prin înlocuirea fiecărui număr din secvență cu un număr Fibonacci aflat cel mai aproape de el în șirul numerelor Fibonacci. Dacă există două numere Fibonacci la fel de apropiate de numărul dat se va alege mereu cel mai mic. De exemplu, secvența ($4$) se transformă în secvența ($3$), iar secvența ($9, 11$) în secvența ($8, 13$).

# Cerințe

Fiind date elementele matricei cu $n$ linii și $m$ coloane să se determine:
1. numărul de numere Fibonacci din matricea dată inițial;
2. suma celei mai lungi secvențe *fibosnek* ce poate fi obținută, știind că se poate transforma **cel mult o secvență** *non-fibosnek* în una *fibosnek* folosind procedeul explicat mai sus. Dacă se pot obține mai multe astfel de secvențe de lungime maximă, se va alege prima întâlnită în parcurgerea *snek* a matricei.

# Date de intrare
Fișierul de intrare `fibosnek.in` conține pe prima linie numerele naturale $c$, $n$ și $m$, unde $c$ reprezintă cerința care trebuie rezolvată ($1$ sau $2$), iar $n$ și $m$ au semnificația din enunț, pe următoarele $n$ linii conține elementele matricei, parcurse în ordine, linie cu linie și în cadrul fiecărei linii, de la stânga la dreapta. Valorile aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `fibosnek.out` conține fie doar numărul determinat pentru cerința $1$ (dacă $c = 1$), fie doar suma determinată pentru cerința $2$ (dacă $c = 2$).

# Restricții și precizări
* $c \in \{1, 2\}$;
* $1 \leq n, m \leq 1 \ 500$;
* Elementele matricei au valori în intervalul $[1, 2^{31}-1]$;
* Pentru $21$ de puncte, $c = 1$ și $n, m \leq 1 \ 000$;
* Pentru $20$ de puncte, $c = 2$ și $n, m \leq 100$;
* Pentru $44$ de puncte, $c = 2$ și $n, m \leq 1 \ 000$;
* Pentru $15$ puncte, $c = 2$ și nu există restricții suplimentare.

---

Example:
`fibosnek.in`
```
1 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```

`fibosnek.out`
```
9
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Importing the required libraries
import numpy as np

# Read the input data
with open('fibosnek.in', 'r') as file:
    lines = file.readlines()
c, n, m = map(int, lines[0].split())
matrix = np.array([list(map(int, line.split())) for line in lines[1:]])

# Function to generate a list of Fibonacci numbers up to a maximum value
def generate_fibonacci(max_value):
    fibs = [1, 1]
    while fibs[-1] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs[:-1]

# Generate a list of Fibonacci numbers up to the maximum value in the matrix
max_value = np.amax(matrix)
fibonacci_numbers = generate_fibonacci(max_value)
fib_set = set(fibonacci_numbers)

# Function to find the closest Fibonacci number to a given number
def closest_fib(num):
    global fibonacci_numbers
    idx = np.searchsorted(fibonacci_numbers, num)
    if idx == 0:
        return fibonacci_numbers[0]
    if idx == len(fibonacci_numbers) or fibonacci_numbers[idx] - num >= num - fibonacci_numbers[idx - 1]:
        return fibonacci_numbers[idx - 1]
    else:
        return fibonacci_numbers[idx]

# Function to solve the first requirement
def count_fibonacci_numbers(matrix, fib_set):
    return np.sum(np.isin(matrix, list(fib_set)))

# Function to solve the second requirement
def max_fibosnek_sum(matrix, fib_set):
    snek = matrix.flatten('F')
    max_sum = 0
    current_sum = 0
    non_fib_sum = 0
    max_non_fib_sum = 0
    for num in snek:
        if num in fib_set:
            current_sum += num
            max_sum = max(max_sum, current_sum + max_non_fib_sum)
        else:
            non_fib_sum += closest_fib(num)
            if current_sum > 0:
                max_non_fib_sum = max(max_non_fib_sum, non_fib_sum)
                non_fib_sum = 0
            current_sum = 0
    max_sum = max(max_sum, current_sum + max_non_fib_sum)
    return max_sum

# Solve the challenge for the given requirement
if c == 1:
    result = count_fibonacci_numbers(matrix, fib_set)
else:
    result = max_fibosnek_sum(matrix, fib_set)

# Write the output data
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```

This solution calculates the list of Fibonacci numbers up to the maximum value in the input matrix to avoid unnecessary checks on large numbers. It then either counts the number of Fibonacci numbers in the matrix or finds the maximum sum of a fibosnek sequence according to the challenge specifications. The solution uses a flattened version of the matrix to treat it as a single sequence, iterating over it to find the maximum sum.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 1 and the error message indicate that the Python environment where the solution is being executed does not have the `numpy` library installed. Since the challenge specifies using highly efficient libraries and optimizing both time and memory usage, it is important to have `numpy` available.

However, since we cannot install `numpy` and must comply with the memory constraints, I will rewrite the solution to avoid using `numpy` and any other third-party libraries, relying only on standard Python libraries to ensure the code executes without errors.

Here's the revised solution without `numpy`:

```python
# Function to generate a list of Fibonacci numbers up to a maximum value
def generate_fibonacci(max_value):
    fibs = [1, 1]
    while fibs[-1] <= max_value:
        fibs.append(fibs[-1] + fibs[-2])
    return fibs[:-1]

# Function to find the closest Fibonacci number to a given number
def closest_fib(num, fibonacci_numbers):
    closest = fibonacci_numbers[0]
    for fib in fibonacci_numbers:
        if fib > num:
            break
        closest = fib
    return closest

# Function to solve the first requirement
def count_fibonacci_numbers(matrix, fib_set):
    return sum(1 for row in matrix for num in row if num in fib_set)

# Function to solve the second requirement
def max_fibosnek_sum(matrix, fib_set, fibonacci_numbers):
    snek = [matrix[i][j] for j in range(len(matrix[0])) for i in range(len(matrix))]
    max_sum = 0
    current_sum = 0
    non_fib_sum = 0
    max_non_fib_sum = 0
    for num in snek:
        if num in fib_set:
            current_sum += num
            max_sum = max(max_sum, current_sum + max_non_fib_sum)
        else:
            non_fib_sum += closest_fib(num, fibonacci_numbers)
            if current_sum > 0:
                max_non_fib_sum = max(max_non_fib_sum, non_fib_sum)
                non_fib_sum = 0
            current_sum = 0
    max_sum = max(max_sum, current_sum + max_non_fib_sum)
    return max_sum

# Read the input data
with open('fibosnek.in', 'r') as file:
    c, n, m = map(int, next(file).split())
    matrix = [[int(num) for num in line.split()] for line in file]

# Generate a list of Fibonacci numbers up to the maximum value in the matrix
max_value = max(max(row) for row in matrix)
fibonacci_numbers = generate_fibonacci(max_value)
fib_set = set(fibonacci_numbers)

# Solve the challenge for the given requirement
if c == 1:
    result = count_fibonacci_numbers(matrix, fib_set)
else:
    result = max_fibosnek_sum(matrix, fib_set, fibonacci_numbers)

# Write the output data
with open('fibosnek.out', 'w') as file:
    file.write(str(result))
```

This updated solution should now work without relying on numpy or any other third-party library. It reads the input, computes the solution using pure Python code, and writes the output to the specified file.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 3 4
1 5 3 11
2 8 1 13
4 2 9 8
```
Expected output:
```
61
```
Found output:
```
29
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
