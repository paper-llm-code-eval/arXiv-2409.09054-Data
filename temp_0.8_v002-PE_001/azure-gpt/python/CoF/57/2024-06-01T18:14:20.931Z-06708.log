---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from queue import PriorityQueue

def read_input(filename):
    with open(filename, 'r') as file:
        N, M, K = map(int, file.readline().split())
        roads = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, M, K, roads

def write_output(filename, severity, removed_roads):
    with open(filename, 'w') as file:
        file.write(f"{severity}\n")
        file.write(f"{len(removed_roads)}\n")
        for road in removed_roads:
            file.write(f"{road[0]} {road[1]}\n")

def compute_max_severity(N, M, K, roads):
    # Create graph adjacency list
    graph = {i: [] for i in range(1, N + 1)}
    for i, j, p in roads:
        graph[i].append((j, p))
        graph[j].append((i, p))

    # Sort edges by priority (descending)
    edges_priority_queue = PriorityQueue()
    for i, j, p in roads:
        edges_priority_queue.put((-p, (i, j)))

    # Kruskal's algorithm to find the maximum spanning tree
    parent = list(range(N + 1))  # Union-Find structure for disjoint sets

    def find(i):
        if parent[i] != i:
            parent[i] = find(parent[i])
        return parent[i]

    def union(i, j):
        pi = find(i)
        pj = find(j)
        if pi != pj:
            parent[pj] = pi

    # Keep edges that are in the maximum spanning tree
    MST_edges = set()
    while not edges_priority_queue.empty():
        p, edge = edges_priority_queue.get()
        i, j = edge
        if find(i) != find(j):
            union(i, j)
            MST_edges.add(edge)

    # Determine which edges to remove to form K groups
    removed_edges = []
    severity = 0
    edges_priority_queue = PriorityQueue()
    for i, j, p in roads:
        if (i, j) not in MST_edges and (j, i) not in MST_edges:
            edges_priority_queue.put((-p, (i, j)))

    for _ in range(K - 1):
        if edges_priority_queue.empty():
            break
        p, edge = edges_priority_queue.get()
        removed_edges.append(edge)
        severity -= p

    return severity, removed_edges

# Read input, compute severity, and write output
N, M, K, roads = read_input('urgenta.in')
severity, removed_edges = compute_max_severity(N, M, K, roads)
write_output('urgenta.out', severity, removed_edges)
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np
from queue import PriorityQueue

def read_input(filename):
    with open(filename, 'r') as file:
        N, M, K = map(int, file.readline().split())
        roads = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, M, K, roads

def write_output(filename, severity, removed_roads):
    with open(filename, 'w') as file:
        file.write(f"{severity}\n")
        file.write(f"{len(removed_roads)}\n")
        for road in sorted(removed_roads):
            file.write(f"{road[0]} {road[1]}\n")

def compute_max_severity(N, M, K, roads):
    # Initialize parent and rank for Union-Find structure
    parent = np.arange(N + 1)
    rank = np.zeros(N + 1, dtype=int)

    def find(i):
        while i != parent[i]:
            i = parent[i]
        return i

    def union(i, j):
        root_i = find(i)
        root_j = find(j)
        if root_i != root_j:
            if rank[root_i] > rank[root_j]:
                parent[root_j] = root_i
            else:
                parent[root_i] = root_j
                if rank[root_i] == rank[root_j]:
                    rank[root_j] += 1

    # Sort roads by priority in descending order
    roads.sort(key=lambda x: -x[2])

    # Kruskal's algorithm to find the maximum spanning tree
    MST = set()
    for i, j, p in roads:
        if find(i) != find(j):
            union(i, j)
            MST.add((min(i, j), max(i, j)))

    # Select K-1 highest priority roads not in the MST to remove
    removed_roads = []
    severity = 0
    for i, j, p in roads:
        if (min(i, j), max(i, j)) not in MST and K > 1:
            removed_roads.append((i, j))
            severity += p
            K -= 1

    return severity, removed_roads

N, M, K, roads = read_input('urgenta.in')
severity, removed_roads = compute_max_severity(N, M, K, roads)
write_output('urgenta.out', severity, removed_roads)
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` library is not available in the execution environment. Since we have a memory limit of ~8MB and `numpy` could potentially exceed this limit, plus it's not available, we have to implement the solution without using `numpy` or any other external libraries that are not part of the standard Python distribution. Here is the updated solution written in pure Python, without `numpy`.

```python
from queue import PriorityQueue

def read_input(filename):
    with open(filename, 'r') as file:
        N, M, K = map(int, file.readline().split())
        roads = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, M, K, roads

def write_output(filename, severity, removed_roads):
    with open(filename, 'w') as file:
        file.write(f"{severity}\n")
        file.write(f"{len(removed_roads)}\n")
        for road in sorted(removed_roads):
            file.write(f"{road[0]} {road[1]}\n")

def compute_max_severity(N, M, K, roads):
    parent = list(range(N + 1))
    rank = [0] * (N + 1)

    def find(i):
        if parent[i] != i:
            parent[i] = find(parent[i])
        return parent[i]

    def union(i, j):
        root_i = find(i)
        root_j = find(j)
        if root_i != root_j:
            if rank[root_i] > rank[root_j]:
                parent[root_j] = root_i
            else:
                parent[root_i] = root_j
                if rank[root_i] == rank[root_j]:
                    rank[root_j] += 1

    roads.sort(key=lambda x: -x[2])
    MST = set()
    for i, j, p in roads:
        if find(i) != find(j):
            union(i, j)
            MST.add((min(i, j), max(i, j)))

    removed_roads = []
    severity = 0
    for i, j, p in roads:
        if (min(i, j), max(i, j)) not in MST and K > 1:
            removed_roads.append((i, j))
            severity += p
            K -= 1

    return severity, removed_roads

N, M, K, roads = read_input('urgenta.in')
severity, removed_roads = compute_max_severity(N, M, K, roads)
write_output('urgenta.out', severity, removed_roads)
```
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
5
3
1 2
1 3
3 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the code is that it was incorrectly removing the highest priority roads not in the maximum spanning tree (MST) instead of removing the highest priority roads in the MST to maximize the severity. To create K distinct groups, we must remove K-1 edges from the MST, and we should start by removing the edges with the highest priorities.

I will rewrite the solution to correct this logic. We will find the MST first and then remove the K-1 highest priority edges from the MST to form K groups.

Here is the fixed solution:

```python
def read_input(filename):
    with open(filename, 'r') as file:
        N, M, K = map(int, file.readline().split())
        roads = [tuple(map(int, file.readline().split())) for _ in range(M)]
    return N, M, K, roads

def write_output(filename, severity, removed_roads):
    with open(filename, 'w') as file:
        file.write(f"{severity}\n")
        file.write(f"{len(removed_roads)}\n")
        for road in removed_roads:
            file.write(f"{road[0]} {road[1]}\n")

def compute_max_severity(N, M, K, roads):
    parent = list(range(N + 1))
    rank = [0] * (N + 1)

    def find(i):
        if parent[i] != i:
            parent[i] = find(parent[i])
        return parent[i]

    def union(i, j):
        root_i = find(i)
        root_j = find(j)
        if root_i != root_j:
            if rank[root_i] > rank[root_j]:
                parent[root_j] = root_i
            else:
                parent[root_i] = root_j
                if rank[root_i] == rank[root_j]:
                    rank[root_j] += 1

    # Sort roads by priority in descending order
    roads.sort(key=lambda x: -x[2])
    MST_edges = []
    for i, j, p in roads:
        if find(i) != find(j):
            union(i, j)
            MST_edges.append((i, j, p))

    # If we need to form K groups, we need to remove K-1 highest priority edges from the MST
    removed_roads = MST_edges[:K-1]
    severity = sum(p for _, _, p in removed_roads)

    # Format the removed roads in the required format (i < j)
    formatted_removed_roads = [(min(i, j), max(i, j)) for i, j, _ in removed_roads]

    return severity, formatted_removed_roads

N, M, K, roads = read_input('urgenta.in')
severity, removed_roads = compute_max_severity(N, M, K, roads)
write_output('urgenta.out', severity, removed_roads)
```

This corrected solution will now find the MST and then remove the K-1 highest priority edges from the MST, which will result in the formation of K groups. The severity is then calculated as the sum of the priorities of the removed roads. The output is formatted so that for each road (i, j), i is less than j.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
14
3
3 7
4 5
5 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
