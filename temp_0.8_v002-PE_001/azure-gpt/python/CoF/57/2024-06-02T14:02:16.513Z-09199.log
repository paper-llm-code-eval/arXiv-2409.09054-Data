---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read input from file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Convert edges to numpy array for efficient processing
edges_np = np.array(edges, dtype=np.int32)

# Sort edges based on priority in descending order
edges_sorted = edges_np[edges_np[:, 2].argsort()][::-1]

# Disjoint-set (Union-Find) data structure for efficient cycle detection
parents = np.arange(N + 1, dtype=np.int32)

def find(x):
    if parents[x] != x:
        parents[x] = find(parents[x])
    return parents[x]

def union(x, y):
    x_root = find(x)
    y_root = find(y)
    parents[x_root] = y_root

# Cut edges until we have K clusters
removed_edges = []
gravmax = 0
for i in range(M):
    u, v, w = edges_sorted[i]
    if find(u) != find(v):
        union(u, v)
    else:
        removed_edges.append(edges_sorted[i])
        gravmax += w
    # If we have reached the desired number of clusters, stop the loop
    if len(removed_edges) == N - K:
        break

# Write output to file
with open('urgenta.out', 'w') as file:
    file.write(str(gravmax) + '\n')
    file.write(str(len(removed_edges)) + '\n')
    for u, v, w in removed_edges:
        file.write(f'{u} {v}\n')
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the entire solution with the necessary fixes to read from `urgenta.in` and write to `urgenta.out`, making sure not to use `input()` and `print()`:

```python
import numpy as np

# Read input from file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Convert edges to numpy array for efficient processing
edges_np = np.array(edges, dtype=np.int32)

# Sort edges based on priority in descending order
edges_sorted = edges_np[edges_np[:, 2].argsort()][::-1]

# Disjoint-set (Union-Find) data structure for efficient cycle detection
parents = np.arange(N + 1, dtype=np.int32)

def find(x):
    if parents[x] != x:
        parents[x] = find(parents[x])
    return parents[x]

def union(x, y):
    x_root = find(x)
    y_root = find(y)
    if x_root != y_root:
        parents[x_root] = y_root

# Cut edges until we have K clusters
removed_edges = []
gravmax = 0
clusters = N

# Traverse sorted edges and use a union-find data structure to build clusters
for i in range(M):
    u, v, w = edges_sorted[i]
    if find(u) != find(v):
        # Only merge clusters if it doesn't exceed K clusters
        if clusters > K:
            union(u, v)
            clusters -= 1
    else:
        removed_edges.append(edges_sorted[i])
        gravmax += w
    # If we have reached the desired number of clusters, stop the loop
    if clusters == K:
        break

# Write output to file
with open('urgenta.out', 'w') as file:
    file.write(str(gravmax) + '\n')
    file.write(str(len(removed_edges)) + '\n')
    for u, v, w in removed_edges:
        file.write(f'{u} {v}\n')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the given environment does not have the 'numpy' library installed. Since the memory limit is quite strict and the constraint on the number of edges and vertices is not large, we can avoid using numpy and refactor the solution to use standard Python data structures and algorithms to stay within the memory limits.

Here is the rewritten solution without numpy:

```python
# Disjoint-set (Union-Find) data structure for efficient cycle detection
def find(x, parents):
    if parents[x] != x:
        parents[x] = find(parents[x], parents)
    return parents[x]

def union(x, y, parents):
    x_root = find(x, parents)
    y_root = find(y, parents)
    if x_root != y_root:
        parents[x_root] = y_root

# Read input from file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Sort edges based on priority in descending order
edges_sorted = sorted(edges, key=lambda x: x[2], reverse=True)

# Initialize parent pointers for union-find
parents = list(range(N + 1))

# Initialize variables for removed edges and maximum gravity
removed_edges = []
gravmax = 0

# Traverse sorted edges and use a union-find data structure to build clusters
for edge in edges_sorted:
    u, v, priority = edge
    if find(u, parents) != find(v, parents):
        union(u, v, parents)
    else:
        removed_edges.append(edge)
        gravmax += priority
    # Only keep the N-K highest priority edges as removed edges to ensure K clusters
    if len(removed_edges) == N - K:
        break

# Write output to file
with open('urgenta.out', 'w') as file:
    file.write(f"{gravmax}\n{len(removed_edges)}\n")
    for u, v, priority in removed_edges:
        file.write(f"{u} {v}\n")
```

This solution should work within the standard Python environment without numpy, and the memory usage should be within the required limits. The union-find data structure is used to track connected components, and we only remove the N-K highest priority edges to ensure that K clusters are formed. The edges are sorted in descending order by their priority so that we remove the most important edges first.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
5
3
1 3
3 4
1 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
