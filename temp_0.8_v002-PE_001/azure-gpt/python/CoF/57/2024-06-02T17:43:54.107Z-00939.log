---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from queue import PriorityQueue


def read_input(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [list(map(int, line.split())) for line in file]
    return n, m, k, edges


def write_output(filename, max_gravity, removed_edges):
    with open(filename, 'w') as file:
        file.write(f"{max_gravity}\n{len(removed_edges)}\n")
        for edge in removed_edges:
            file.write(f"{edge[0]} {edge[1]}\n")


def find_set(parents, x):
    if parents[x] != x:
        parents[x] = find_set(parents, parents[x])
    return parents[x]


def union_sets(parents, ranks, a, b):
    a_root = find_set(parents, a)
    b_root = find_set(parents, b)
    if a_root != b_root:
        if ranks[a_root] < ranks[b_root]:
            a_root, b_root = b_root, a_root
        parents[b_root] = a_root
        if ranks[a_root] == ranks[b_root]:
            ranks[a_root] += 1


def kruskal(n, edges, k):
    parents = np.arange(n + 1)
    ranks = np.zeros(n + 1, dtype=int)
    max_gravity = 0
    removed_edges = []
    edges_queue = PriorityQueue()
    for edge in edges:
        edges_queue.put((-edge[2], edge[0], edge[1]))

    components = n

    while not edges_queue.empty() and components > k:
        weight, u, v = edges_queue.get()
        weight = -weight
        if find_set(parents, u) != find_set(parents, v):
            union_sets(parents, ranks, u, v)
            components -= 1
        else:
            max_gravity += weight
            removed_edges.append((min(u, v), max(u, v)))

    return max_gravity, removed_edges


def main():
    n, m, k, edges = read_input('urgenta.in')
    max_gravity, removed_edges = kruskal(n, edges, k)
    write_output('urgenta.out', max_gravity, removed_edges)


if __name__ == "__main__":
    main()
```
```
This Python solution uses the Kruskal's algorithm to find the maximum gravity of a calamity by removing the highest priority edges until there are exactly K components. The algorithm uses a union-find data structure with path compression and union by rank to maintain a forest of trees representing the connected components. The edges are stored in a priority queue to ensure we always remove the highest priority edge that would not disconnect an already valid component. The solution reads from `urgenta.in` and writes to `urgenta.out` as required.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [list(map(int, line.split())) for line in file]
    return n, m, k, np.array(edges)


def write_output(filename, max_gravity, removed_edges):
    with open(filename, 'w') as file:
        file.write(f"{max_gravity}\n{len(removed_edges)}\n")
        for edge in sorted(removed_edges):
            file.write(f"{edge[0]} {edge[1]}\n")


def find_set(parents, x):
    if parents[x] != x:
        parents[x] = find_set(parents, parents[x])
    return parents[x]


def union_sets(parents, ranks, a, b):
    a_root = find_set(parents, a)
    b_root = find_set(parents, b)
    if a_root != b_root:
        if ranks[a_root] < ranks[b_root]:
            a_root, b_root = b_root, a_root
        parents[b_root] = a_root
        if ranks[a_root] == ranks[b_root]:
            ranks[a_root] += 1


def main():
    n, m, k, edges = read_input('urgenta.in')
    # Sort edges based on priority in decreasing order so we can break the most important ones
    edges = edges[edges[:, 2].argsort()[::-1]]
    parents = np.arange(n + 1)
    ranks = np.zeros(n + 1, dtype=int)
    max_gravity = 0
    removed_edges = []

    # Initially, all nodes are in separate sets
    components = n
    for edge in edges:
        if components <= k:
            break
        u, v, weight = edge
        set_u = find_set(parents, u)
        set_v = find_set(parents, v)
        # If u and v are already connected, we remove the edge
        if set_u == set_v:
            max_gravity += weight
            removed_edges.append((min(u, v), max(u, v)))
        else:
            # If u and v are in different sets, we join them
            union_sets(parents, ranks, set_u, set_v)
            components -= 1

    write_output('urgenta.out', max_gravity, removed_edges)


if __name__ == "__main__":
    main()
```
```
This Python solution uses a modified Kruskal's algorithm, which is a greedy algorithm for finding a Minimum Spanning Tree (MST) of a graph. However, in this case, we are interested in removing the highest priority edges without disconnecting the graph into more than K components. This solution reads from `urgenta.in` and writes to `urgenta.out` as required, avoiding the use of `input()` and `print()`. It also sorts the removed_edges before writing the output to ensure the edges are listed in ascending order.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Custom Union-Find (Disjoint Set Union) data structure with path compression
class UnionFind:
    def __init__(self, n):
        self.parent = np.arange(n)
        self.rank = np.zeros(n, dtype=int)
    
    def find(self, i):
        if self.parent[i] != i:
            self.parent[i] = self.find(self.parent[i])
        return self.parent[i]
    
    def union(self, i, j):
        root_i = self.find(i)
        root_j = self.find(j)
        if root_i != root_j:
            if self.rank[root_i] < self.rank[root_j]:
                root_i, root_j = root_j, root_i
            self.parent[root_j] = root_i
            if self.rank[root_i] == self.rank[root_j]:
                self.rank[root_i] += 1

# Function to read input data from a file
def read_data(input_file):
    with open(input_file, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return n, m, k, edges

# Function to write output data to a file
def write_data(output_file, max_danger, cut_edges):
    with open(output_file, 'w') as file:
        file.write(str(max_danger) + '\n')
        file.write(str(len(cut_edges)) + '\n')
        for edge in cut_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

# Main function to compute the maximum danger and output the result
def main():
    n, m, k, edges = read_data('urgenta.in')

    # Sort edges by weight in descending order
    edges.sort(key=lambda x: x[2], reverse=True)
    
    uf = UnionFind(n)
    cut_edges = []
    max_danger = 0
    num_components = n

    for u, v, w in edges:
        if uf.find(u - 1) != uf.find(v - 1):
            if num_components <= k:
                continue  # Skip if already have k components
            uf.union(u - 1, v - 1)
            num_components -= 1
        else:
            max_danger += w
            cut_edges.append((min(u, v), max(u, v)))
    
    # Write the results to the output file
    write_data('urgenta.out', max_danger, cut_edges)

if __name__ == '__main__':
    main()
```
```

The provided solution uses a modified version of Kruskal's algorithm to find a Maximum Spanning Tree while ensuring that the graph is divided into `k` components. It uses a Union-Find data structure with path compression to manage the connected components. The edges are sorted in descending order by their weights (priorities), and the algorithm cuts edges that do not reduce the number of components below `k`. The sum of the weights of these cut edges represents the maximum danger. The result is written to the output file `urgenta.out`. The solution avoids using `input()` and `print()` for data I/O, as per the restrictions.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

class DisjointSetUnion:
    def __init__(self, size):
        self.parent = np.arange(size)
        self.rank = np.zeros(size, dtype=np.int)

    def find(self, node):
        if self.parent[node] != node:
            self.parent[node] = self.find(self.parent[node])
        return self.parent[node]

    def union(self, node1, node2):
        root1 = self.find(node1)
        root2 = self.find(node2)
        if root1 != root2:
            if self.rank[root1] < self.rank[root2]:
                root1, root2 = root2, root1
            self.parent[root2] = root1
            if self.rank[root1] == self.rank[root2]:
                self.rank[root1] += 1

# Read data from file
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return n, m, k, edges

# Write output to file
def write_output(filename, severity, cut_edges):
    with open(filename, 'w') as file:
        file.write(f"{severity}\n{len(cut_edges)}\n")
        for edge in cut_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

def main():
    n, m, k, edges = read_input('urgenta.in')
    
    # Sort edges by priority in descending order
    edges = sorted(edges, key=lambda x: -x[2])
    
    dsu = DisjointSetUnion(n + 1)  # Initialize Disjoint Set Union structure
    num_components = n
    total_severity = 0
    cut_edges = []
    
    for u, v, priority in edges:
        if dsu.find(u) != dsu.find(v):
            if num_components <= k:  # Do not cut if it would create more than k components
                dsu.union(u, v)
                num_components -= 1
        else:
            # If the edge is redundant, it can be cut
            total_severity += priority
            cut_edges.append((min(u, v), max(u, v)))  # Store edges in the required format

    # Write severity and cut edges to the output file
    write_output('urgenta.out', total_severity, cut_edges)

if __name__ == '__main__':
    main()
```
```

This code snippet provides a complete solution following the challenge requirements. It defines a `DisjointSetUnion` class, which is used to find and union components efficiently with path compression. The main function reads input data from `urgenta.in`, processes it to find the maximum severity of the disaster scenario, and writes the results to `urgenta.out`. The edges are sorted in descending order by priority to ensure the correct edges are chosen to be cut. The output is formatted according to the specified format.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

class UnionFind:
    def __init__(self, n):
        self.parent = np.arange(n)
        self.rank = np.zeros(n, dtype=int)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            if self.rank[x_root] < self.rank[y_root]:
                self.parent[x_root] = y_root
            elif self.rank[x_root] > self.rank[y_root]:
                self.parent[y_root] = x_root
            else:
                self.parent[y_root] = x_root
                self.rank[x_root] += 1

def kruskal(n, edges, k):
    edges = sorted(edges, key=lambda x: -x[2])  # Sort edges by priority in descending order
    disjoint_set = UnionFind(n)
    max_gravity = 0
    selected_edges = []
    num_groups = n

    for edge in edges:
        u, v, p = edge
        if disjoint_set.find(u) != disjoint_set.find(v):
            if num_groups > k:
                disjoint_set.union(u, v)
                num_groups -= 1
            else:
                selected_edges.append(edge)

    if num_groups == k:
        max_gravity = sum(p for u, v, p in selected_edges)
        return max_gravity, [(u, v) for u, v, p in selected_edges]
    else:
        return 0, []

def main():
    with open('urgenta.in', 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [tuple(map(int, file.readline().split())) for _ in range(m)]

    max_gravity, removed_edges = kruskal(n, edges, k)

    with open('urgenta.out', 'w') as file:
        file.write(f"{max_gravity}\n{len(removed_edges)}\n")
        for edge in sorted(removed_edges):
            file.write(f"{edge[0]} {edge[1]}\n")

if __name__ == "__main__":
    main()
```
```

The fixed solution implements the Kruskal algorithm with a Union-Find data structure with path compression, ensuring efficient time complexity. The edges are first sorted in descending order of priority (weight), and the algorithm iteratively joins components of the graph until only `k` components remain. The sum of the weights of the edges that would have been added after this point is the maximum gravity, provided the graph is still connected into `k` groups. The results are then written to the output file `urgenta.out` without using `print()`. The input is read from the file `urgenta.in` without using `input()`. The removed edges are also sorted before writing, to ensure they are output in increasing order by the node numbers.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
