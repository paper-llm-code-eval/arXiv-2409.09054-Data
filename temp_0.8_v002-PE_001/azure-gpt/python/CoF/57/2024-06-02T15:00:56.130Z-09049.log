---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Sort edges based on weight in descending order
edges_sorted = sorted(edges, key=lambda x: -x[2])

# Initialize necessary structures
parents = np.arange(N + 1)
rank = np.zeros(N + 1)
selected_edges = []

# Define find and union functions for Disjoint Set Union (DSU)
def find_set(v):
    if v == parents[v]:
        return v
    parents[v] = find_set(parents[v])
    return parents[v]

def union_sets(a, b):
    a = find_set(a)
    b = find_set(b)
    if a != b:
        if rank[a] < rank[b]:
            a, b = b, a
        parents[b] = a
        if rank[a] == rank[b]:
            rank[a] += 1

# Kruskal-like algorithm to remove M - N + K - 1 heaviest edges to form K groups
num_edges_removed = 0
total_weight_removed = 0
for i, j, w in edges_sorted:
    if find_set(i) != find_set(j):
        union_sets(i, j)
    else:
        selected_edges.append((i, j))
        total_weight_removed += w
        num_edges_removed += 1
    if num_edges_removed == M - N + K - 1:
        break

# Write output file
with open('urgenta.out', 'w') as file:
    file.write(f"{total_weight_removed}\n")
    file.write(f"{num_edges_removed}\n")
    for edge in selected_edges:
        file.write(f"{edge[0]} {edge[1]}\n")
```
This solution uses the Kruskal-like algorithm to find the maximum calamity scenario by sorting the edges based on their weights in descending order and then trying to form `K` groups by removing the heaviest edges that do not disconnect the graph into more than `K` components. We use Disjoint Set Union (DSU) to efficiently manage the groups and check if removing an edge is possible without exceeding the number of groups we need to form.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Based on the error messages, it seems that the `numpy` module is not available in the runtime environment where the script is executed. Since we have to optimize both time and memory usage, and we have a strict memory limit, we'll need to avoid using `numpy` and use the standard Python data structures to manage the memory effectively.

I will rewrite the solution without using the `numpy` library.

```python
# Read input file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Sort edges based on weight in descending order
edges_sorted = sorted(edges, key=lambda x: -x[2])

# Initialize necessary structures
parents = list(range(N + 1))
rank = [0] * (N + 1)
selected_edges = []

# Define find and union functions for Disjoint Set Union (DSU)
def find_set(v):
    if v != parents[v]:
        parents[v] = find_set(parents[v])
    return parents[v]

def union_sets(a, b):
    a = find_set(a)
    b = find_set(b)
    if a != b:
        if rank[a] < rank[b]:
            a, b = b, a
        parents[b] = a
        if rank[a] == rank[b]:
            rank[a] += 1

# Kruskal-like algorithm to remove M - N + K - 1 heaviest edges to form K groups
num_edges_removed = 0
total_weight_removed = 0
for i, j, w in edges_sorted:
    if find_set(i) != find_set(j):
        union_sets(i, j)
    else:
        selected_edges.append((i, j))
        total_weight_removed += w
        num_edges_removed += 1
    if num_edges_removed == M - N + K - 1:
        break

# Write output file
with open('urgenta.out', 'w') as file:
    file.write(f"{total_weight_removed}\n")
    file.write(f"{num_edges_removed}\n")
    for edge in selected_edges:
        file.write(f"{edge[0]} {edge[1]}\n")
```

This solution uses Python's built-in list data structure to implement the DSU (Disjoint Set Union) instead of `numpy`. It should satisfy the memory constraints while still being efficient enough for the given problem size.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
7
5
1 3
3 4
1 2
3 5
3 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution incorrectly calculates the number of edges that need to be removed. The idea was to remove the M - N + K - 1 heaviest edges, but that calculation is not correct for this problem. Instead, we need to minimize the number of edges that connect different clusters while maximizing the total weight of these edges. The algorithm needs to ensure that after removing edges, we end up with exactly K connected components.

To fix the solution, we should start by connecting all the nodes with the lightest edges to form a minimum spanning forest that contains K trees (clusters). After that, we can iteratively remove edges that connect vertices within the same cluster, starting with the heaviest ones, until we have K separate clusters. The edges removed in this process are the ones that would be destroyed in the gravest calamity scenario.

Here is the corrected code:

```python
# Read input file
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [list(map(int, line.split())) for line in file]

# Sort edges based on weight in ascending order to build the minimum spanning forest initially
edges_sorted = sorted(edges, key=lambda x: x[2])

# Initialize necessary structures
parents = list(range(N + 1))
rank = [0] * (N + 1)
components = N  # start with N components and reduce to K
selected_edges = []

# Define find and union functions for Disjoint Set Union (DSU)
def find_set(v):
    if v != parents[v]:
        parents[v] = find_set(parents[v])
    return parents[v]

def union_sets(a, b):
    a = find_set(a)
    b = find_set(b)
    if a != b:
        if rank[a] < rank[b]:
            a, b = b, a
        parents[b] = a
        if rank[a] == rank[b]:
            rank[a] += 1
        return True
    return False

# Build the minimum spanning forest with K clusters
for i, j, w in edges_sorted:
    if union_sets(i, j):
        components -= 1
    if components == K:
        break

# Reset DSU for the next phase
parents = list(range(N + 1))
rank = [0] * (N + 1)

# Sort edges based on weight in descending order to remove the heaviest ones
edges_sorted = sorted(edges, key=lambda x: -x[2])

# Now, try to remove the heaviest edges while ensuring the number of components remains K
total_weight_removed = 0
for i, j, w in edges_sorted:
    if find_set(i) == find_set(j):
        selected_edges.append((i, j))
        total_weight_removed += w
    else:
        union_sets(i, j)

# Write output file
with open('urgenta.out', 'w') as file:
    file.write(f"{total_weight_removed}\n")
    file.write(f"{len(selected_edges)}\n")
    for edge in selected_edges:
        file.write(f"{edge[0]} {edge[1]}\n")
```

This new solution first constructs a minimum spanning forest with K trees using Kruskal's algorithm. Then, it sorts the edges in descending order of weight and removes the heaviest edges that do not cause the number of clusters to exceed K. This ensures we are removing the heaviest edges while maintaining exactly K clusters, which corresponds to the gravest calamity scenario.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
7
5
1 3
3 4
1 2
3 5
3 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
