---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to find the parent of a node in the disjoint set
def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

# Function to perform the union of two sets
def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1

# Read data from file
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return n, m, k, edges

# Write output data to file
def write_output(filename, max_gravity, removed_edges):
    with open(filename, 'w') as file:
        file.write(f"{max_gravity}\n{len(removed_edges)}\n")
        for edge in removed_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

# Main function to solve the problem
def solve_urgenta(n, m, k, edges):
    # Sort edges based on priority in descending order
    edges.sort(key=lambda x: x[2], reverse=True)
    
    # Initialize disjoint set for Kruskal's algorithm
    parent = np.arange(n+1)
    rank = np.zeros(n+1, dtype=int)
    
    num_groups = n
    max_gravity = 0
    removed_edges = []
    
    for i in range(m):
        u, v, w = edges[i]
        if num_groups == k:
            break
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            num_groups -= 1
        else:
            max_gravity += w
            removed_edges.append((u, v))
    
    return max_gravity, removed_edges

# Read input, solve the problem, and write the output
n, m, k, edges = read_input('urgenta.in')
max_gravity, removed_edges = solve_urgenta(n, m, k, edges)
write_output('urgenta.out', max_gravity, removed_edges)
```

This code should be saved in a `.py` file and executed in a Python environment with access to the `numpy` library and the required input file `urgenta.in`. The output will be written to `urgenta.out`. Please note that this solution respects the memory constraint by using efficient data structures and prioritizes the heaviest edges for removal to maximize gravity.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the `numpy` library is not installed in the Python environment. Since the challenge specifies that we need to optimize for memory and we cannot use `numpy`, let's rewrite the solution without using any external libraries.

Here is the solution without `numpy`:

```python
# Function to find the parent of a node in the disjoint set
def find(parent, i):
    if parent[i] == i:
        return i
    return find(parent, parent[i])

# Function to perform the union of two sets
def union(parent, rank, x, y):
    xroot = find(parent, x)
    yroot = find(parent, y)
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1

# Read data from file
def read_input(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return n, m, k, edges

# Write output data to file
def write_output(filename, max_gravity, removed_edges):
    with open(filename, 'w') as file:
        file.write(f"{max_gravity}\n{len(removed_edges)}\n")
        for edge in removed_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

# Main function to solve the problem
def solve_urgenta(n, m, k, edges):
    # Sort edges based on priority in descending order
    edges.sort(key=lambda x: x[2], reverse=True)
    
    # Initialize disjoint set for Kruskal's algorithm
    parent = list(range(n+1))
    rank = [0] * (n+1)
    
    num_groups = n
    max_gravity = 0
    removed_edges = []
    
    for i in range(m):
        u, v, w = edges[i]
        if num_groups == k:
            break
        if find(parent, u) != find(parent, v):
            union(parent, rank, u, v)
            num_groups -= 1
        else:
            max_gravity += w
            removed_edges.append((u, v))
    
    return max_gravity, removed_edges

# Read input, solve the problem, and write the output
n, m, k, edges = read_input('urgenta.in')
max_gravity, removed_edges = solve_urgenta(n, m, k, edges)
write_output('urgenta.out', max_gravity, removed_edges)
```

This code should now work without `numpy` and adhere to the memory limitations. It reads data from `urgenta.in`, processes the input to find the maximum gravity scenario, and writes the results to `urgenta.out`. The algorithm uses Kruskal's algorithm idea with a disjoint-set data structure but stops when the desired number of groups is reached.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
0
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
