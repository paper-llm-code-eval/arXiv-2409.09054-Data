---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read from 'urgenta.in'
with open('urgenta.in') as f:
    N, M, K = map(int, f.readline().split())
    edges = np.array([list(map(int, line.split())) for line in f], dtype=int)

# Sort the edges by priority in descending order
edges_sorted = edges[edges[:, 2].argsort(kind='heapsort')[::-1]]

# Using Union-Find data structure to keep track of the connected components
parent = np.arange(N + 1)
rank = np.zeros(N + 1, dtype=int)

def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    root_x = find(x)
    root_y = find(y)
    if root_x != root_y:
        if rank[root_x] < rank[root_y]:
            parent[root_x] = root_y
        elif rank[root_x] > rank[root_y]:
            parent[root_y] = root_x
        else:
            parent[root_y] = root_x
            rank[root_x] += 1

# Cut the highest-priority edges until there are exactly K connected components
num_components = N
cut_edges = []
gravmax = 0
for i, j, p in edges_sorted:
    if find(i) != find(j):
        union(i, j)
    elif num_components > K:
        cut_edges.append((i, j))
        gravmax += p
        num_components -= 1

cut_edges.sort()

# Write to 'urgenta.out'
with open('urgenta.out', 'w') as f:
    f.write(f"{gravmax}\n{len(cut_edges)}\n")
    for i, j in cut_edges:
        f.write(f"{i} {j}\n")
```

This solution assumes that the input file `urgenta.in` is formatted correctly according to the problem statement. It sorts the edges by priority and uses a Union-Find data structure to keep track of connected components while removing the most critical edges to obtain K groups. The output is then written to `urgenta.out`, which contains the maximum gravity and the cut edges that lead to this scenario. The memory consumption is kept low by using numpy arrays and by careful management of the Union-Find data structure. The time complexity is dominated by the sort operation, which is O(M log M), where M is the number of edges.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available. Since the challenge description emphasizes the importance of memory efficiency, I will rewrite the solution without using `numpy` or any other external library that is not part of the Python Standard Library. This will ensure that the solution does not rely on packages that might not be installed in the environment where the code is executed.

Here is the revised solution using only the Python Standard Library:

```python
# Read from 'urgenta.in'
with open('urgenta.in') as f:
    N, M, K = map(int, f.readline().split())
    edges = [tuple(map(int, line.split())) for line in f]

# Sort the edges by priority in descending order
edges_sorted = sorted(edges, key=lambda x: x[2], reverse=True)

# Using Union-Find data structure to keep track of the connected components
parent = list(range(N + 1))
rank = [0] * (N + 1)

def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    root_x = find(x)
    root_y = find(y)
    if root_x != root_y:
        if rank[root_x] < rank[root_y]:
            parent[root_x] = root_y
        elif rank[root_x] > rank[root_y]:
            parent[root_y] = root_x
        else:
            parent[root_y] = root_x
            rank[root_x] += 1

# Cut the highest-priority edges until there are exactly K connected components
num_components = N
cut_edges = []
gravmax = 0
for i, j, p in edges_sorted:
    if find(i) != find(j):
        union(i, j)
    elif num_components > K:
        cut_edges.append((i, j))
        gravmax += p
        num_components -= 1

cut_edges.sort()

# Write to 'urgenta.out'
with open('urgenta.out', 'w') as f:
    f.write(f"{gravmax}\n{len(cut_edges)}\n")
    for i, j in cut_edges:
        f.write(f"{i} {j}\n")
```

This revised solution does not use `numpy` and instead takes advantage of built-in Python data structures and functions. It should now run correctly in environments where `numpy` is not installed. The sorting, union-find operations, and file I/O are all performed using standard Python features. The memory usage is also carefully managed to adhere to the constraints of the problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
5
3
1 2
1 3
3 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
