---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input data
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = []
    for _ in range(M):
        i, j, p = map(int, file.readline().split())
        # Store edges as tuples (priority, node1, node2)
        edges.append((p, i, j))

# Sort the edges in descending order based on priority
edges.sort(reverse=True)

# Use a disjoint set (union-find) data structure to efficiently manage the connected components.
parent = np.arange(N + 1)
rank = np.zeros(N + 1, dtype=int)

def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    xroot = find(x)
    yroot = find(y)
    if xroot == yroot:
        return False
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1
    return True

# Keep track of the removed edges
removed_edges = []
total_priority = 0

# Iterate over the edges (starting with the highest priority) and remove edges until we have K groups
for priority, node1, node2 in edges:
    if find(node1) != find(node2):
        if K == 1:
            total_priority += priority
            removed_edges.append((node1, node2))
        else:
            union(node1, node2)
            K -= 1

# Write the output data
with open('urgenta.out', 'w') as file:
    file.write(f"{total_priority}\n")
    file.write(f"{len(removed_edges)}\n")
    for edge in removed_edges:
        file.write(f"{edge[0]} {edge[1]}\n")
```
```

**Note**: This solution assumes that the input file `urgenta.in` and the output file `urgenta.out` are present in the same directory as the script. The solution uses the Union-Find algorithm to manage connected components efficiently while iterating over the sorted edges. The edges are sorted in descending order by their priority, so we can remove the highest priority edges first to maximize the total priority of the removed edges while dividing the graph into $K$ components. The use of numpy is minimized in this solution to stay within the memory limit.
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def find(x, parent):
    if parent[x] != x:
        parent[x] = find(parent[x], parent)
    return parent[x]

def union(x, y, parent, rank):
    xroot = find(x, parent)
    yroot = find(y, parent)
    if xroot == yroot:
        return False
    if rank[xroot] < rank[yroot]:
        parent[xroot] = yroot
    elif rank[xroot] > rank[yroot]:
        parent[yroot] = xroot
    else:
        parent[yroot] = xroot
        rank[xroot] += 1
    return True

def max_gravity(N, M, K, edges):
    # Sort the edges in descending order based on priority
    edges.sort(reverse=True, key=lambda edge: edge[2])
    
    # Initialize union-find structure
    parent = np.arange(N + 1)
    rank = np.zeros(N + 1, dtype=int)
    
    # Variables to store the result
    removed_edges = []
    total_priority = 0
    
    # Process edges
    for i, j, p in edges:
        if find(i, parent) != find(j, parent):
            if K > 1:
                union(i, j, parent, rank)
                K -= 1
            else:
                total_priority += p
                removed_edges.append((i, j))
    
    return total_priority, removed_edges

# Read the input data
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [tuple(map(int, file.readline().split())) for _ in range(M)]

# Compute the result
total_priority, removed_edges = max_gravity(N, M, K, edges)

# Write the output data
with open('urgenta.out', 'w') as file:
    file.write(f"{total_priority}\n")
    file.write(f"{len(removed_edges)}\n")
    for edge in removed_edges:
        file.write(f"{edge[0]} {edge[1]}\n")
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

class UnionFind:
    def __init__(self, n):
        self.parent = np.arange(n + 1)
        self.rank = np.zeros(n + 1, dtype=int)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        xroot = self.find(x)
        yroot = self.find(y)
        if xroot == yroot:
            return False
        if self.rank[xroot] < self.rank[yroot]:
            self.parent[xroot] = yroot
        elif self.rank[xroot] > self.rank[yroot]:
            self.parent[yroot] = xroot
        else:
            self.parent[yroot] = xroot
            self.rank[xroot] += 1
        return True

# Read the input data
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [tuple(map(int, line.split())) for line in file]

# Sort the edges based on priority in descending order
edges.sort(key=lambda x: x[2], reverse=True)

# Initialize Union-Find
uf = UnionFind(N)

# Initialize the list of removed edges and the total priority
removed_edges = []
total_priority = 0

# Remove edges until we have K groups
for edge in edges:
    u, v, priority = edge
    if uf.find(u) != uf.find(v):
        uf.union(u, v)
    else:
        # If u and v are already connected, we can remove the edge
        removed_edges.append((u, v))
        total_priority += priority
        K -= 1
    if K == 0:
        break

# Write the output data
with open('urgenta.out', 'w') as file:
    file.write(f"{total_priority}\n")
    file.write(f"{len(removed_edges)}\n")
    for u, v in removed_edges:
        file.write(f"{u} {v}\n")
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import heapq

# Custom implementation of Union-Find to avoid memory overhead of numpy
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n + 1))
        self.rank = [0] * (n + 1)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            if self.rank[x_root] < self.rank[y_root]:
                self.parent[x_root] = y_root
            elif self.rank[x_root] > self.rank[y_root]:
                self.parent[y_root] = x_root
            else:
                self.parent[y_root] = x_root
                self.rank[x_root] += 1
            return True
        return False


# Read the input data from "urgenta.in"
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = []
    for _ in range(M):
        i, j, p = map(int, file.readline().split())
        heapq.heappush(edges, (-p, i, j))  # Use a min-heap with negative priorities

# Initialize Union-Find for N elements
uf = UnionFind(N)

# Determine the maximum sum of weights of edges to remove to get K connected components
num_components = N
removed_edges = []
max_gravity = 0

while num_components > K and edges:
    p, i, j = heapq.heappop(edges)
    if not uf.union(i, j):
        removed_edges.append((i, j))
        max_gravity -= p  # Negative because we stored negative weights
        num_components -= 1

# Write the output data to "urgenta.out"
with open('urgenta.out', 'w') as file:
    file.write(f"{max_gravity}\n")
    file.write(f"{len(removed_edges)}\n")
    for i, j in removed_edges:
        file.write(f"{i} {j}\n")
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# We're going to need heapq to create a min-heap of edges based on their weights (priorities).
import heapq

# Define the Union-Find data structure without using numpy to save memory.
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            if self.rank[x_root] < self.rank[y_root]:
                self.parent[x_root] = y_root
            elif self.rank[x_root] > self.rank[y_root]:
                self.parent[y_root] = x_root
            else:
                self.parent[y_root] = x_root
                self.rank[x_root] += 1
            return True
        return False

# Read the input data from "urgenta.in"
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = []
    for _ in range(M):
        i, j, p = map(int, file.readline().split())
        # We push a tuple (negative priority, node a, node b) onto the heap.
        heapq.heappush(edges, (-p, i-1, j-1))  # We use zero-based indexing for the Union-Find

# Initialize Union-Find for N elements
uf = UnionFind(N)

# Determine the maximum sum of weights of edges to remove to get K connected components
num_components = N
removed_edges = []
max_gravity = 0

# We keep removing the highest priority edges until we have K components.
while num_components > K and edges:
    p, i, j = heapq.heappop(edges)
    # If the nodes are already connected, we can consider this edge for removal.
    if uf.find(i) == uf.find(j):
        removed_edges.append((i+1, j+1))  # Adjust back to one-based indexing
        max_gravity -= p  # Invert the priority back to its positive value
    else:
        # Otherwise, we join the components.
        uf.union(i, j)

# Write the output data to "urgenta.out"
with open('urgenta.out', 'w') as file:
    # The first line contains the maximum gravity.
    file.write(f"{max_gravity}\n")
    # The second line contains the number of removed edges.
    file.write(f"{len(removed_edges)}\n")
    # The subsequent lines contain the removed edges.
    for i, j in removed_edges:
        file.write(f"{i} {j}\n")
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Importing heapq for priority queue operations
import heapq

# Define the Union-Find data structure (without numpy to conserve memory)
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            if self.rank[x_root] < self.rank[y_root]:
                self.parent[x_root] = y_root
            elif self.rank[x_root] > self.rank[y_root]:
                self.parent[y_root] = x_root
            else:
                self.parent[y_root] = x_root
                self.rank[x_root] += 1
            return True
        return False

# Reading from "urgenta.in"
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [tuple(map(int, line.split())) for line in file]

# Using a heap queue to maintain the edges sorted by priority
heapq.heapify(edges)

# Initializing Union-Find for component tracking
uf = UnionFind(N)

# Algorithm to find the max gravity scenario
chosen_edges = []
while edges and N > K:
    # Pop the lowest priority edge (heapq is a min-heap, hence we negate the priorities)
    p, u, v = heapq.heappop(edges)
    if uf.find(u - 1) != uf.find(v - 1):
        uf.union(u - 1, v - 1)
        N -= 1
    else:
        # If already in the same component, then this edge can be removed
        chosen_edges.append((u, v, p))

# Sort the chosen edges by the initial node order
chosen_edges.sort()

# Writing to "urgenta.out"
with open('urgenta.out', 'w') as file:
    # Write the total gravity sum of the chosen edges
    file.write(f"{sum(p for u, v, p in chosen_edges)}\n")
    # Write the count of edges that will be removed
    file.write(f"{len(chosen_edges)}\n")
    # Write each removed edge
    for u, v, p in chosen_edges:
        file.write(f"{u} {v}\n")
```
```
---------- user ----------


Expected program to write result to `urgenta.out` and read from `urgenta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# No additional imports required for this approach

class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n + 1))
        self.rank = [0] * (n + 1)

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        x_root = self.find(x)
        y_root = self.find(y)
        if x_root != y_root:
            if self.rank[x_root] < self.rank[y_root]:
                self.parent[x_root] = y_root
            elif self.rank[x_root] > self.rank[y_root]:
                self.parent[y_root] = x_root
            else:
                self.parent[y_root] = x_root
                self.rank[x_root] += 1
            return True
        return False

# Read the input data from "urgenta.in"
with open('urgenta.in', 'r') as file:
    N, M, K = map(int, file.readline().split())
    edges = [tuple(map(int, file.readline().split())) for _ in range(M)]

# Sort the edges based on priority in descending order
edges.sort(key=lambda x: x[2], reverse=True)

# Initialize Union-Find
uf = UnionFind(N)

# Determine the maximum sum of weights of edges to remove to get K connected components
removed_edges = []
max_gravity = 0

# Keep a counter of the current number of components
components = N

# Remove edges until we have K groups
for i, j, p in edges:
    if uf.find(i) != uf.find(j):
        uf.union(i, j)
        components -= 1
        if components <= K:
            break
    else:
        # If i and j are already in the same component, include this edge as removed
        removed_edges.append((i, j))
        max_gravity += p

# Write the output data to "urgenta.out"
with open('urgenta.out', 'w') as file:
    file.write(f"{max_gravity}\n")
    file.write(f"{len(removed_edges)}\n")
    for i, j in removed_edges:
        file.write(f"{i} {j}\n")
```
```
