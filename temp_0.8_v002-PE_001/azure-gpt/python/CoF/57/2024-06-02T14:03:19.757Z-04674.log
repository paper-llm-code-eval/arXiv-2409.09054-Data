---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_data(file_name):
    with open(file_name, 'r') as file:
        N, M, K = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return N, M, K, edges

def write_data(file_name, max_grav, num_interrupted, interrupted_edges):
    with open(file_name, 'w') as file:
        file.write(f"{max_grav}\n{num_interrupted}\n")
        for edge in interrupted_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

def kruskal(N, edges, K):
    parent = np.arange(N+1, dtype=int)
    rank = np.zeros(N+1, dtype=int)
    
    def find(node):
        if parent[node] != node:
            parent[node] = find(parent[node])
        return parent[node]
    
    def union(node1, node2):
        root1 = find(node1)
        root2 = find(node2)
        if root1 != root2:
            if rank[root1] < rank[root2]:
                parent[root1] = root2
            elif rank[root1] > rank[root2]:
                parent[root2] = root1
            else:
                parent[root2] = root1
                rank[root1] += 1
    
    edges.sort(key=lambda x: x[2], reverse=True)
    num_groups = N
    max_grav = 0
    interrupted_edges = []
    
    for edge in edges:
        if find(edge[0]) != find(edge[1]):
            if num_groups <= K:  # If already enough groups, don't merge
                max_grav += edge[2]
                interrupted_edges.append(edge[:2])
            else:
                union(edge[0], edge[1])
                num_groups -= 1
        else:
            max_grav += edge[2]
            interrupted_edges.append(edge[:2])
    
    return max_grav, len(interrupted_edges), interrupted_edges

def main():
    N, M, K, edges = read_data('urgenta.in')
    max_grav, num_interrupted, interrupted_edges = kruskal(N, edges, K)
    write_data('urgenta.out', max_grav, num_interrupted, interrupted_edges)

if __name__ == '__main__':
    main()
```

Explanation:
- `read_data` reads the input file and returns the number of points (N), the number of pathways (M), the number of groups (K), and the list of pathways (edges).
- `write_data` writes the output to the file, including the max gravity, the number of interrupted pathways, and the list of interrupted edges.
- `kruskal` is an adaptation of Kruskal's algorithm to find the maximum possible sum of priorities of edges that, when removed, divide the graph into K groups. Edges are sorted in decreasing order, and we use union-find data structure to track the connected components.
- The `main` function orchestrates reading the data, processing it, and writing the output.
- Memory usage is optimized by using NumPy arrays with fixed data types for the union-find structure. The algorithm is designed to minimize additional memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the code is being executed in an environment where the `numpy` module is not installed, resulting in a `ModuleNotFoundError`. Since the challenge requires optimizing for both time and memory and encourages the use of efficient libraries like `numpy`, we need to work around the problem while assuming a standard Python environment without additional modules.

Given the constraints and the limited available memory, I will modify the solution to not use `numpy` and use standard Python data structures, functions, and algorithms instead. Here is the revised solution without the `numpy` dependency:

```python
def read_data(file_name):
    with open(file_name, 'r') as file:
        N, M, K = map(int, file.readline().split())
        edges = [tuple(map(int, line.split())) for line in file]
    return N, M, K, edges

def write_data(file_name, max_grav, num_interrupted, interrupted_edges):
    with open(file_name, 'w') as file:
        file.write(f"{max_grav}\n{num_interrupted}\n")
        for edge in interrupted_edges:
            file.write(f"{edge[0]} {edge[1]}\n")

def find(parent, node):
    if parent[node] != node:
        parent[node] = find(parent, parent[node])
    return parent[node]

def union(parent, rank, node1, node2):
    root1 = find(parent, node1)
    root2 = find(parent, node2)
    if root1 != root2:
        if rank[root1] < rank[root2]:
            parent[root1] = root2
        elif rank[root1] > rank[root2]:
            parent[root2] = root1
        else:
            parent[root2] = root1
            rank[root1] += 1

def kruskal(N, edges, K):
    parent = list(range(N+1))
    rank = [0] * (N+1)
    
    edges.sort(key=lambda x: x[2], reverse=True)
    num_groups = N
    max_grav = 0
    interrupted_edges = []
    
    for edge in edges:
        if find(parent, edge[0]) != find(parent, edge[1]):
            if num_groups <= K:  # If already enough groups, don't merge
                max_grav += edge[2]
                interrupted_edges.append(edge[:2])
            else:
                union(parent, rank, edge[0], edge[1])
                num_groups -= 1
        else:
            max_grav += edge[2]
            interrupted_edges.append(edge[:2])
    
    return max_grav, len(interrupted_edges), interrupted_edges

def main():
    N, M, K, edges = read_data('urgenta.in')
    max_grav, num_interrupted, interrupted_edges = kruskal(N, edges, K)
    write_data('urgenta.out', max_grav, num_interrupted, interrupted_edges)

if __name__ == '__main__':
    main()
```

This code uses standard Python lists and functions to manage the union-find data structure and leverages Python's built-in sorting function. It should work in a standard Python environment without needing any additional modules and keep memory usage within the specified limits.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
16
8
1 7
2 4
6 7
1 3
3 4
1 2
3 5
3 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
