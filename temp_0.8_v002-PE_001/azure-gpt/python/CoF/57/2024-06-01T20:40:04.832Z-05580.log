---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `urgenta.in` and write to `urgenta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Autorităţile dintr-o zonă de munte intenţionează să stabilească un plan de urgenţă, pentru a reacţiona mai eficient la frecventele calamităţi naturale din zonă. În acest scop au identificat $N$ puncte de interes strategic şi le-au numerotat distinct de la $1$ la $N$. Punctele de interes strategic sunt conectate prin $M$ căi de acces având priorităţi în funcţie de importanţă. Între oricare două puncte de interes strategic există cel mult o cale de acces ce poate fi parcursă în ambele sensuri şi cel puţin un drum (format din una sau mai multe căi de acces) ce le conectează. 

În cazul unei calamităţi unele căi de acces pot fi temporar întrerupte şi astfel între anumite puncte de interes nu mai există legătură. Ca urmare pot rezulta mai multe grupuri de puncte în aşa fel încât între oricare două puncte din acelaşi grup să existe măcar un drum şi între oricare două puncte din grupuri diferite să nu existe drum. 

Autorităţile estimează gravitatea unei calamităţi ca fiind suma priorităţilor căilor de acces distruse de aceasta şi doresc să determine un scenariu de gravitate maximă, în care punctele de interes strategic să fie împărţite într-un număr de $K$ grupuri.

# Date de intrare
Fişierul de intrare `urgenta.in` are următorul format:
$N\ M\ K$
$i_1 \; j_1 \; p_1 $ – între punctele $i_1$ şi $j_1$ există o cale de acces de prioritate $p_1$
$i_2 \; j_2 \; p_2 $ – între punctele $i_2$ şi $j_2$ există o cale de acces de prioritate $p_2$
...
$i_M \; j_M \; p_M $ – între punctele $i_M$ şi $j_M$ există o cale de acces de prioritate $p_M$

# Date de ieşire
Fişierul de ieşire `urgenta.out` va avea următorul format:
$\text{gravmax}$ – gravitatea maximă
$C$	– numărul de căi de acces întrerupte de calamitate
$k_1 \; h_1$ – între punctele $k_1$ şi $h_1$ a fost întreruptă calea de acces
$k_2 \; h_2$ – între punctele $k_2$ şi $h_2$ a fost întreruptă calea de acces
...
$k_C \; h_C$ – între punctele $k_C$ şi $h_C$ a fost întreruptă calea de acces

# Restricţii şi precizări
* $1 \leq N \leq 255$
* $N - 1 \leq M \leq 32 \ 384$
* $1 \leq K \leq N$
* Priorităţile căilor de acces sunt întregi strict pozitivi mai mici decât $256$.
* Un grup de puncte poate conţine între $1$ şi $N$ puncte inclusiv.
* Dacă există mai multe soluţii, programul va determina una singură.

---

Example:
`urgenta.in`
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```

`urgenta.out`
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# This function will load the graph from the input file
def load_graph(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [list(map(int, line.split())) for line in file]
    return n, m, k, edges

# This function will compute the maximum calamity scenario
def max_calamity_scenario(n, m, k, edges):
    # Sort edges by priority in descending order
    edges.sort(key=lambda x: x[2], reverse=True)

    # Kruskal's algorithm with a modified union-find to form exactly K groups
    parent = list(range(n + 1))
    rank = [0] * (n + 1)
    num_groups = n
    calamity_edges = []
    calamity_weight = 0

    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]

    for i, j, p in edges:
        if num_groups <= k:  # Already have K groups, all edges from now are calamity edges
            calamity_edges.append((i, j))
            calamity_weight += p
        else:  # Perform union-find steps
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:  # If in different sets, join them
                if rank[root_i] < rank[root_j]:
                    parent[root_i] = root_j
                elif rank[root_i] > rank[root_j]:
                    parent[root_j] = root_i
                else:
                    parent[root_j] = root_i
                    rank[root_i] += 1
                num_groups -= 1
            else:  # Same set, this edge will cause a calamity
                calamity_edges.append((i, j))
                calamity_weight += p

    return calamity_weight, calamity_edges

# This function will save the result to the output file
def save_result(filename, calamity_weight, calamity_edges):
    with open(filename, 'w') as file:
        file.write(f"{calamity_weight}\n")
        file.write(f"{len(calamity_edges)}\n")
        for i, j in calamity_edges:
            file.write(f"{i} {j}\n")

# Main execution
if __name__ == "__main__":
    n, m, k, edges = load_graph('urgenta.in')
    calamity_weight, calamity_edges = max_calamity_scenario(n, m, k, edges)
    save_result('urgenta.out', calamity_weight, calamity_edges)
```

This code reads from `urgenta.in`, processes the input to find the maximum calamity scenario using a modified Kruskal's algorithm, and writes the result to `urgenta.out`. The algorithm sorts the edges by priority and then uses a union-find data structure to keep track of groups. Once there are exactly `K` groups, the remaining edges are considered calamity edges, and their weights are added to the total calamity weight. The solution is designed to be memory efficient within the ~8MB limit.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found because it is not installed or the environment in which the program is running does not support it. Given the constraints of the challenge and the error message, it's clear that we cannot use `numpy` or any other third-party libraries that are not part of the Python Standard Library. We can modify the solution to use only the built-in libraries and data structures.

Let's rewrite the entire solution without using `numpy`:

```python
# This function will load the graph from the input file
def load_graph(filename):
    with open(filename, 'r') as file:
        n, m, k = map(int, file.readline().split())
        edges = [list(map(int, line.split())) for line in file]
    return n, m, k, edges

# This function will compute the maximum calamity scenario
def max_calamity_scenario(n, m, k, edges):
    # Sort edges by priority in descending order
    edges.sort(key=lambda x: x[2], reverse=True)

    # Kruskal's algorithm with a modified union-find to form exactly K groups
    parent = list(range(n + 1))
    rank = [0] * (n + 1)
    num_groups = n
    calamity_edges = []
    calamity_weight = 0

    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]

    for i, j, p in edges:
        if num_groups <= k:  # Already have K groups, all edges from now are calamity edges
            calamity_edges.append((i, j))
            calamity_weight += p
        else:  # Perform union-find steps
            root_i = find(i)
            root_j = find(j)
            if root_i != root_j:  # If in different sets, join them
                if rank[root_i] < rank[root_j]:
                    parent[root_i] = root_j
                elif rank[root_i] > rank[root_j]:
                    parent[root_j] = root_i
                else:
                    parent[root_j] = root_i
                    rank[root_i] += 1
                num_groups -= 1
            else:  # Same set, this edge will cause a calamity
                calamity_edges.append((i, j))
                calamity_weight += p

    return calamity_weight, calamity_edges

# This function will save the result to the output file
def save_result(filename, calamity_weight, calamity_edges):
    with open(filename, 'w') as file:
        file.write(f"{calamity_weight}\n")
        file.write(f"{len(calamity_edges)}\n")
        for i, j in calamity_edges:
            file.write(f"{i} {j}\n")

# Main execution
if __name__ == "__main__":
    n, m, k, edges = load_graph('urgenta.in')
    calamity_weight, calamity_edges = max_calamity_scenario(n, m, k, edges)
    save_result('urgenta.out', calamity_weight, calamity_edges)
```

This revised solution should solve the problem within the constraints specified, using only built-in libraries and avoiding any third-party libraries or modules. This should prevent the `ModuleNotFoundError` and other import-related issues.
---------- user ----------


Program result did not match expected result.
Input data:
```
7 11 4
1 2 1
1 3 2
1 7 3
2 4 3
3 4 2
3 5 1
3 6 1
3 7 5
4 5 5
5 6 4
6 7 3
```
Expected output:
```
27
8
1 3
1 7
2 4
3 4
3 7
4 5
5 6
6 7
```
Found output:
```
16
8
1 7
2 4
6 7
1 3
3 4
1 2
3 5
3 6
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
