---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `aur.in` and write to `aur.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

După ce au mers împreună prin lume, Păcală şi Tândală au strâns o căruţă plină de bănuţi de aur, iar acum îi răstoarnă pe toţi în curtea casei şi îi împart în $N$ grămezi. Păcală numără bănuţii din fiecare grămadă şi îi dictează lui Tândală $N$ numere naturale pe care acesta trebuie să le scrie în ordine pe o tăbliţă. După ore bune de muncă, Păcală constată că Tândală a scris pe un singur rând, în ordine, de la stânga la dreapta, toate numerele dictate de el, dar lipite unul de altul. Acum pe tăbliţă e doar un şir lung de cifre. Ce să facă Păcală acum?

# Cerință

Cunoscând cele $N$ numere naturale dictate de Păcală, scrieţi un program care să determine:

1. Numărul cifrelor scrise pe tăbliţă de Tândală;
2. Ce-a de-a $K$-a cifră de pe tăbliţă, în ordine de la stânga la dreapta;
3. Cel mai mare număr ce se poate forma cu exact P cifre alăturate de pe tăbliţă, considerate în ordine de la stânga la dreapta.

# Date de intrare

Fişierul `aur.in` conţine:

* Pe prima linie un număr natural $C$ care reprezintă numărul cerinţei şi poate avea valorile $1$, $2$ sau $3$.
* Pe cea de-a doua linie un număr natural $N$ dacă cerinţa este $1$, sau două numere naturale $N$ şi $K$ (despărţite printr-un spaţiu) dacă cerinţa este $2$, sau două numere naturale $N$ şi $P$ (despărţite printr-un spaţiu) dacă cerinţa este $3$.
* Pe cea de-a treia linie, $N$ numere naturale despărţite prin câte un spaţiu, ce reprezintă, în ordine, numerele pe care Păcală i le dictează lui Tândală.

# Date de ieșire

Fişierul `aur.out` va conţine pe prima linie un singur număr natural ce reprezintă rezultatul determinat conform fiecărei cerinţe.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $1 \leq K \leq 900 \ 000$;
* Se garantează ca există cel puţin K cifre scrise pe tăbliţă.
* $1 \leq P \leq 18$;
* Se garantează ca există cel puţin $P$ cifre scrise pe tăbliţă.
* Toate numere dictate de Păcală sunt nenule şi au cel mult $9$ cifre fiecare.
* Pentru rezolvarea corectă a primei cerinţe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de-a doua cerinţe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de-a treia cerinţe se acordă $40$ de puncte.
* Se dau $10$ puncte din oficiu (testele corespunzatoare sunt identice cu primul exemplu)

---

Example:
`aur.in`
```
1
7
25 9 13 459 2 79 9
```

`aur.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Load data from file
with open('aur.in', 'r') as file:
    lines = file.readlines()

# Parse input data
C = int(lines[0].strip())
N, K_or_P = map(int, lines[1].split())
numbers = list(map(int, lines[2].split()))

# Function to solve task 1
def task1(numbers):
    # Count the number of digits by transforming each number to a string
    # and counting the length of each string
    return sum(len(str(num)) for num in numbers)

# Function to solve task 2
def task2(numbers, K):
    # Concatenate all numbers into a single string
    concatenated = ''.join(map(str, numbers))
    # Return the K-th digit
    return int(concatenated[K - 1])

# Function to solve task 3
def task3(numbers, P):
    # Convert numbers to strings and concatenate them
    concatenated = ''.join(map(str, numbers))
    # Initialize max number to 0
    max_number = 0
    # Slide a window of P digits across the concatenated string
    for i in range(len(concatenated) - P + 1):
        # Extract the current window and convert to integer
        current_number = int(concatenated[i:i + P])
        # Check if the current number is larger than the max number
        if current_number > max_number:
            max_number = current_number
    # Return the max number
    return max_number

# Choose the task to perform
if C == 1:
    result = task1(numbers)
elif C == 2:
    result = task2(numbers, K_or_P)
else:  # C == 3
    result = task3(numbers, K_or_P)

# Write result to file
with open('aur.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `aur.out` and read from `aur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def task1(numbers):
    # Calculate the total number of digits by summing the lengths of the number strings
    return sum(len(str(num)) for num in numbers)

def task2(numbers, K):
    # Initialize digit counter and index
    digit_counter, index = 0, 0
    # Loop through numbers until the K-th digit is found
    while digit_counter < K:
        num_str = str(numbers[index])
        num_len = len(num_str)
        # Check if the K-th digit is within the current number
        if digit_counter + num_len >= K:
            return int(num_str[K - digit_counter - 1])
        digit_counter += num_len
        index += 1

def task3(numbers, P):
    # Convert numbers to strings and concatenate them to form the full number string
    concatenated = ''.join(map(str, numbers))
    max_number = 0
    # Loop through possible starting positions for a substring of length P
    for i in range(len(concatenated) - P + 1):
        # Extract substring and convert to integer
        current_number = int(concatenated[i:i + P])
        # Update max_number if the current_number is larger
        if current_number > max_number:
            max_number = current_number
    return max_number

def main():
    # Read data from input file
    with open('aur.in', 'r') as file:
        lines = file.readlines()

    # Parse input data
    C = int(lines[0].strip())
    N, K_or_P = map(int, lines[1].split())
    numbers = list(map(int, lines[2].split()))

    # Perform the specified task
    if C == 1:
        result = task1(numbers)
    elif C == 2:
        result = task2(numbers, K_or_P)
    else:  # C == 3
        result = task3(numbers, K_or_P)

    # Write result to output file
    with open('aur.out', 'w') as file:
        file.write(str(result) + '\n')

# Call main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `aur.out` and read from `aur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def read_input(file_path):
    with open(file_path, 'r') as file:
        C = int(file.readline())
        N, K_or_P = map(int, file.readline().split())
        numbers = np.array(file.readline().split(), dtype=np.int64)
    return C, N, K_or_P, numbers

def solve_task_1(numbers):
    return np.sum(np.floor(np.log10(numbers)).astype(np.int64) + 1)

def solve_task_2(numbers, K):
    lengths = np.floor(np.log10(numbers)).astype(np.int64) + 1
    cum_lengths = np.cumsum(lengths)
    idx = np.where(cum_lengths >= K)[0][0]
    if idx > 0:
        K -= cum_lengths[idx - 1]
    return int(str(numbers[idx])[K - 1])

def solve_task_3(numbers, P):
    number_str = ''.join(map(str, numbers))
    max_number = -1
    for i in range(len(number_str) - P + 1):
        current_number = int(number_str[i:i + P])
        if current_number > max_number:
            max_number = current_number
    return max_number

def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(f"{result}\n")

def main():
    C, N, K_or_P, numbers = read_input('aur.in')
    if C == 1:
        result = solve_task_1(numbers)
    elif C == 2:
        result = solve_task_2(numbers, K_or_P)
    elif C == 3:
        result = solve_task_3(numbers, K_or_P)
    write_output('aur.out', result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `aur.out` and read from `aur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def solve_task_1(numbers):
    return np.sum(np.floor(np.log10(numbers)).astype(np.int32) + 1)

def solve_task_2(numbers, digit_lengths, K):
    idx = np.searchsorted(np.cumsum(digit_lengths), K, side='right')
    if idx > 0:
        K -= np.cumsum(digit_lengths)[idx - 1]
    return int(str(numbers[idx])[K - 1])

def solve_task_3(numbers, P):
    concatenated = ''.join(map(str, numbers))
    return max(int(concatenated[i:i+P]) for i in range(len(concatenated) - P + 1))

def main():
    with open('aur.in', 'r') as file:
        C = int(file.readline().strip())
        N, K_or_P = map(int, file.readline().split())
        numbers = np.array(file.readline().split(), dtype=np.object)

    digit_lengths = np.vectorize(len)(numbers)
    
    if C == 1:
        result = solve_task_1(numbers)
    elif C == 2:
        result = solve_task_2(numbers, digit_lengths, K_or_P)
    elif C == 3:
        result = solve_task_3(numbers, K_or_P)

    with open('aur.out', 'w') as file:
        file.write(str(result) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `aur.out` and read from `aur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
