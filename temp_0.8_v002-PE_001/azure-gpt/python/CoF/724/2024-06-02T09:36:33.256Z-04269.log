---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        data = file.readlines()
    N = int(data[0].strip())
    intervals = np.zeros((N, 2), dtype=int)
    for i, line in enumerate(data[1:]):
        intervals[i] = list(map(int, line.strip().split()))
    return intervals

def write_result(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def find_min_fridges(intervals):
    intervals.sort(key=lambda x: x[1])  # Sort by maximum temperature
    fridges = 1
    current_max_temp = intervals[0][1]
    
    for interval in intervals:
        if interval[0] > current_max_temp:
            # Need a new fridge since this reagent's min temp is higher than
            # the current fridge's max temp
            fridges += 1
            current_max_temp = interval[1]
    return fridges

# Main execution
intervals = read_data('reactivi.in')
min_fridges_required = find_min_fridges(intervals)
write_result('reactivi.out', min_fridges_required)
```

This solution reads the input intervals from the file `reactivi.in`, computes the minimum number of fridges required, and writes the result to `reactivi.out`. It sorts the intervals by their maximum temperature because this will allow the algorithm to go through the intervals once and decide when a new fridge is needed. If a reagent's minimum temperature is higher than the current fridge's maximum temperature, a new fridge is required. This ensures that the minimum number of fridges is used. The sorting and iteration through the intervals are both efficient in time complexity. The memory usage is also optimized by only storing the intervals and a few variables for tracking the state.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
