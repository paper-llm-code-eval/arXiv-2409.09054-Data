---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read the input data from reactivi.in
with open('reactivi.in') as f:
    N = int(f.readline().strip())
    intervals = [tuple(map(int, f.readline().split())) for _ in range(N)]

# Sort the intervals by their maximum value (end of interval)
intervals.sort(key=lambda x: x[1])

# Initialize the counter for the number of fridges needed
fridges = 0
# Initialize the temperature the current fridge can handle to the lowest possible
current_max_temp = -101

for min_temp, max_temp in intervals:
    # Check if the current reagent can be stored in the current fridge
    if min_temp > current_max_temp:
        # If not, we need a new fridge
        fridges += 1
        current_max_temp = max_temp

# Write the output to reactivi.out
with open('reactivi.out', 'w') as f:
    f.write(str(fridges))
```

This solution will work on the given constraints of N, min, and max temperatures while also optimizing for both time and memory usage. The sort operation is the most costly in terms of time complexity with O(N log N), but the overall space complexity remains low because we only store the intervals and a few integer variables. The output will be written to `reactivi.out` as required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that `numpy` is not installed or not properly recognized in the environment where the code is running. Since the task explicitly requires optimizing for memory and the use of highly efficient libraries "whenever possible", and my initial solution does not actually utilize any `numpy` functionality, the best course of action is to remove the unnecessary import of `numpy`.

Here is the corrected version of the code without the `numpy` import:

```python
# Read the input data from reactivi.in
with open('reactivi.in') as f:
    N = int(f.readline().strip())
    intervals = [tuple(map(int, f.readline().split())) for _ in range(N)]

# Sort the intervals by their maximum value (end of interval)
intervals.sort(key=lambda x: x[1])

# Initialize the counter for the number of fridges needed
fridges = 0
# Initialize the temperature the current fridge can handle to the lowest possible
current_max_temp = -101

for min_temp, max_temp in intervals:
    # Check if the current reagent can be stored in the current fridge
    if min_temp > current_max_temp:
        # If not, we need a new fridge
        fridges += 1
        current_max_temp = max_temp

# Write the output to reactivi.out
with open('reactivi.out', 'w') as f:
    f.write(str(fridges))
```

This code will work as intended, efficiently sorting the intervals and counting the minimum number of fridges required without using `numpy` or any other external library. The memory limit should not be exceeded since we are only storing the bare minimum data required to solve the problem.
