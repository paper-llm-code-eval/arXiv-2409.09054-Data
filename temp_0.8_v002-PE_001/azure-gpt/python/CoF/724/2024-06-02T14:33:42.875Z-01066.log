---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Importing numpy for efficient array handling
import numpy as np

# We will first read the data from reactivi.in and parse it
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    # Initialize an empty array with proper size and data type to save memory
    reagents = np.empty((N, 2), dtype=np.int32)
    for i in range(N):
        reagents[i] = list(map(int, file.readline().split()))

# Now we need to sort the array by the maximum temperature
# This will ensure that we always place reagents in the most 'restrictive' fridge available
reagents = reagents[np.argsort(reagents[:, 1])]

# We will store the minimum number of fridges required
# We start with one fridge for the first reagent
fridges = 1
# We set the current maximum temperature of the first fridge to the max temp of the first reagent
current_max = reagents[0][1]

# We will iterate through the reagents to decide how many fridges we need
for min_temp, max_temp in reagents:
    # If the minimum temperature of the current reagent is higher than the current maximum,
    # it means this reagent cannot be stored in the current fridge and we need a new one
    if min_temp > current_max:
        fridges += 1
        current_max = max_temp

# Finally, we write the result to reactivi.out
with open('reactivi.out', 'w') as file:
    file.write(str(fridges))
```

In this solution, we first read and parse the data from `reactivi.in`, then sort the reagents by their maximum temperature in ascending order. We iterate over the sorted reagents to determine the number of required fridges. For each reagent, if its minimum temperature is greater than the current maximum temperature of the fridge, we need an additional fridge. At the end, we write the number of fridges to `reactivi.out`. The use of NumPy allows us to handle the data efficiently and sorting with argsort() utilizes a time-efficient algorithm. The data type specified for the NumPy array ensures that memory use is kept to a minimum.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the NumPy module is not available in the environment where the code is being executed. Since the challenge specifically requires optimizing for both time and memory and suggests using NumPy, it seems like an environment issue rather than a code issue. However, since we have a strict memory limit and NumPy is not available, we can implement the solution using Python's built-in functions and data types to manage memory more carefully.

I will rewrite the entire solution without using NumPy:

```python
# Define a function to read and parse the input file
def read_input(filename):
    with open(filename, 'r') as file:
        N = int(file.readline().strip())
        reagents = [tuple(map(int, file.readline().split())) for _ in range(N)]
    return reagents

# Define a function to write the output to a file
def write_output(filename, fridges):
    with open(filename, 'w') as file:
        file.write(str(fridges))

# Define a function to compute the minimum number of fridges
def compute_fridges(reagents):
    # Sort reagents by the maximum temperature
    reagents.sort(key=lambda x: x[1])

    # Initialize the count of fridges and the current maximum temperature
    fridges = 1
    current_max = reagents[0][1]

    # Iterate over the sorted reagents
    for min_temp, max_temp in reagents:
        # If the minimum temperature is higher than the current maximum, a new fridge is needed
        if min_temp > current_max:
            fridges += 1
            current_max = max_temp
    return fridges

# Read the input data
reagents = read_input('reactivi.in')

# Calculate the number of fridges needed
fridges_needed = compute_fridges(reagents)

# Write the output data
write_output('reactivi.out', fridges_needed)
```

This solution first reads the reagents from the input file and sorts them according to their maximum temperature. It then computes the minimum number of fridges by comparing the minimum temperature of each reagent with the current maximum temperature of the fridge in use. Finally, the solution writes the computed number of fridges to the output file. The functions are structured to be memory-efficient, not using any additional libraries, and the storage for reagents is a list of tuples, which is space-efficient in Python.
