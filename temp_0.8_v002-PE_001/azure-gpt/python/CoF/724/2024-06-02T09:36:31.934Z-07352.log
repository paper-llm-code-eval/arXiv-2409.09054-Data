---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read the input file
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    intervals = []
    for _ in range(N):
        min_temp, max_temp = map(int, file.readline().split())
        intervals.append((min_temp, max_temp))

# Sort intervals by their end points
intervals.sort(key=lambda x: x[1])

# Determine the minimum number of fridges
fridges_count = 0
current_end = -np.inf
for min_temp, max_temp in intervals:
    if min_temp > current_end:
        fridges_count += 1
        current_end = max_temp

# Write the output file
with open('reactivi.out', 'w') as file:
    file.write(str(fridges_count))
```

This solution sorts the intervals by the maximum temperature to minimize the overlap, then it iterates through them to count the number of fridges needed. If the current minimum temperature is greater than the previous maximum temperature, it requires a new fridge. The `numpy` library is not really needed, but it could be useful if the temperature ranges were large enough to require optimization for memory usage. However, in this case, the use of `numpy` is more about following the instructions to use highly efficient libraries. The solution respects the memory limit and is optimized for both time and memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not found. This might be because the `numpy` library is not installed in the environment where the program is being executed. However, since our memory limit is strict and `numpy` is not essential for this task, we can remove it from the solution and use only built-in Python functionalities.

Below is the updated solution without the use of `numpy`:

```python
# Read the input file
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    intervals = []
    for _ in range(N):
        min_temp, max_temp = map(int, file.readline().split())
        intervals.append((min_temp, max_temp))

# Sort intervals by their end points
intervals.sort(key=lambda x: x[1])

# Determine the minimum number of fridges
fridges_count = 0
current_end = float('-inf')
for min_temp, max_temp in intervals:
    if min_temp > current_end:
        fridges_count += 1
        current_end = max_temp

# Write the output file
with open('reactivi.out', 'w') as file:
    file.write(str(fridges_count))
```

I have replaced `-np.inf` with `float('-inf')` which is the built-in Python representation for negative infinity. The rest of the code logic remains unchanged as it efficiently solves the problem within the memory constraints specified. This solution will read the input data from `reactivi.in`, process it to determine the minimum number of fridges needed, and then write the output to `reactivi.out` as required.
