---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `lascoala.in` and write to `lascoala.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Directorul unei școli dorește să premieze la sfârșitul anului școlar pe cei mai buni elevi la învățătură. Pentru acest lucru el are de rezolvat două probleme:

1. Să determine câți elevi vor fi premiați dintre cei $n$ elevi ai școlii. După discuții aprinse cu ceilalți profesori se hotărăște în Consiliul Profesoral ca numărul premianților să fie $n - k$, unde $k$ este cel mai mare număr pătrat perfect mai mic strict decât $n$. De exemplu, pentru $n = 150$, $k$ este $144$ (pentru că $144$ = $12^2$), deci vor fi premiați $150 - 144 = 6$ elevi.
2. Pentru a fi cât mai multă liniște la premiere, în Consiliul Profesoral se ia decizia ca elevii care nu vor fi premiați să fie așezați pe terenul de sport pe rânduri de câte $p$ elevi (unde $p^2 = k$). În acest scop, directorul a numerotat elevii nepremiați de la $1$ la $k$ și a hotărât ca elevii să fie așezați în ordinea descrescătoare a numerelor asociate.

# Cerință

Scrieți un program care citește $n$, numărul de elevi din școală și calculează numărul de elevi premiați precum și modul de așezare a elevilor nepremiați.

# Date de intrare


Fișierul de intrare `lascoala.in` va conține numărul $n$.


# Date de ieșire

Fișierul de ieșire `lascoala.out` va conține pe prima linie numărul de elevi premiați, iar pe următoarele linii așezarea elevilor nepremiați.


# Restricții și precizări

* $2 \leq n \leq 700$;

---

Example:
`lascoala.in`
```
35
```

`lascoala.out`
```
10
25 24 23 22 21
20 19 18 17 16
15 14 13 12 11
10 9 8 7 6
5 4 3 2 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read n from "lascoala.in"
with open('lascoala.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate k as the largest perfect square less than n
k = int(np.floor(np.sqrt(n-1))) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Create an array of non-awarded students and reshape it
non_awarded_students = np.arange(k, 0, -1).reshape(int(np.sqrt(k)), -1)

# Write the number of awarded students and the arrangement of non-awarded students to "lascoala.out"
with open('lascoala.out', 'w') as file:
    file.write(f"{awarded_students}\n")
    for row in non_awarded_students:
        file.write(' '.join(map(str, row)) + '\n')
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Open "lascoala.in" for reading the number of students
with open('lascoala.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate k as the largest perfect square less than n
k = int(np.sqrt(n - 1)) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Create an array of non-awarded students
non_awarded_students = np.arange(k, 0, -1)

# Reshape the array to a 2D array with rows and columns equal to the square root of k
p = int(np.sqrt(k))
non_awarded_students = non_awarded_students.reshape((p, p))

# Write the results to "lascoala.out"
with open('lascoala.out', 'w') as file:
    # Write the number of awarded students on the first line
    file.write(f"{awarded_students}\n")

    # Write the arrangement of non-awarded students on the following lines
    for row in non_awarded_students:
        file.write(' '.join(map(str, row.tolist())) + '\n')
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read n from "lascoala.in"
with open('lascoala.in', 'r') as file:
    n = int(file.readline())

# Calculate k as the largest perfect square less than n
k = int(np.sqrt(n - 1)) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Calculate p, the number of students per row for the non-awarded students
p = int(np.sqrt(k))

# Create an array of non-awarded students and reshape it
non_awarded_students = np.arange(k, 0, -1).reshape(p, p)

# Write the number of awarded students and the arrangement of non-awarded students to "lascoala.out"
with open('lascoala.out', 'w') as file:
    # Write the number of awarded students on the first line
    file.write(f"{awarded_students}\n")

    # Write the arrangement of non-awarded students on the following lines
    for row in non_awarded_students:
        file.write(' '.join(map(str, row)) + '\n')
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Open "lascoala.in" for reading the number of students
with open('lascoala.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate k as the largest perfect square less than n
k = int(np.sqrt(n - 1)) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Create an array of non-awarded students
non_awarded_students = np.arange(k, 0, -1)

# Reshape the array to a 2D array with rows and columns equal to the square root of k
p = int(np.sqrt(k))
non_awarded_students = non_awarded_students.reshape((p, p))

# Write the results to "lascoala.out"
with open('lascoala.out', 'w') as file:
    # Write the number of awarded students on the first line
    file.write(f"{awarded_students}\n")

    # Write the arrangement of non-awarded students on the following lines
    for row in non_awarded_students:
        file.write(' '.join(map(str, row)) + '\n')
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read n from "lascoala.in"
with open('lascoala.in', 'r') as file:
    n = int(file.readline())

# Calculate k as the largest perfect square less than n
k = int(np.sqrt(n - 1)) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Calculate p, the number of students per row for the non-awarded students
p = int(np.sqrt(k))

# Initialize an empty list to store rows of non-awarded students' arrangement
non_awarded_rows = []

# Generate the arrangement of non-awarded students
for i in range(p, 0, -1):
    row = ' '.join(str(i * p - j) for j in range(p))
    non_awarded_rows.append(row)

# Write the number of awarded students and the arrangement of non-awarded students to "lascoala.out"
with open('lascoala.out', 'w') as file:
    # Write the number of awarded students on the first line
    file.write(f"{awarded_students}\n")
    # Write the arrangement of non-awarded students on the following lines
    file.write('\n'.join(non_awarded_rows))
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array operations
import numpy as np

# Read n from "lascoala.in"
with open('lascoala.in', 'r') as file:
    n = int(file.read().strip())

# Calculate k as the largest perfect square less than n
k = int(np.sqrt(n - 1)) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Calculate the number of students per row (p)
p = int(np.sqrt(k))

# Generate the arrangement of non-awarded students
arrangement = np.arange(1, k + 1).reshape((p, p))[::-1, ::-1]

# Write the number of awarded students and the arrangement to "lascoala.out"
with open('lascoala.out', 'w') as file:
    file.write(f"{awarded_students}\n")
    for row in arrangement:
        file.write(' '.join(map(str, row)) + '\n')
```
```
---------- user ----------


Expected program to write result to `lascoala.out` and read from `lascoala.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array operations
import numpy as np

# Read n from "lascoala.in"
with open('lascoala.in', 'r') as file:
    n = int(file.read().strip())

# Calculate k as the largest perfect square less than n
k = (int(np.sqrt(n - 1))) ** 2

# Calculate the number of awarded students
awarded_students = n - k

# Calculate the number of students per row (p)
p = int(np.sqrt(k))

# Generate the arrangement of non-awarded students
arrangement = np.arange(k, 0, -1).reshape(p, p)

# Write the number of awarded students and the arrangement to "lascoala.out"
with open('lascoala.out', 'w') as file:
    file.write(f"{awarded_students}\n")
    for row in arrangement:
        file.write(' '.join(str(num) for num in row) + '\n')
```
```
