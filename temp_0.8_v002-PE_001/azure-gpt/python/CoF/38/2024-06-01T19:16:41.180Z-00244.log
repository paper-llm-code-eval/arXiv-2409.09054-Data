---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_tracks = [list(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_tracks = [list(map(int, file.readline().split())) for _ in range(n)]

# Prepare track ranges for easier checking
vertical_ranges = [sorted(track) for track in vertical_tracks]
horizontal_ranges = [sorted(track) for track in horizontal_tracks]

# Function to check if position is in a bike lane range
def in_bike_lane_range(pos, ranges):
    for r in ranges:
        if r[0] <= pos < r[1]:
            return True
    return False

# Calculate Manhattan distance as the minimum path length
min_path_length = abs(xG - xpr) + abs(yG - ypr)

# Function to calculate the number of distinct minimum paths
def count_paths(xG, yG, xpr, ypr, vertical_ranges, horizontal_ranges):
    if xG == xpr and yG == ypr:
        return 1

    paths = 0
    if xG < xpr:
        if not in_bike_lane_range(xG + 0.5, vertical_ranges):
            paths += count_paths(xG + 1, yG, xpr, ypr, vertical_ranges, horizontal_ranges)
    elif xG > xpr:
        if not in_bike_lane_range(xG - 0.5, vertical_ranges):
            paths += count_paths(xG - 1, yG, xpr, ypr, vertical_ranges, horizontal_ranges)

    if yG < ypr:
        if not in_bike_lane_range(yG + 0.5, horizontal_ranges):
            paths += count_paths(xG, yG + 1, xpr, ypr, vertical_ranges, horizontal_ranges)
    elif yG > ypr:
        if not in_bike_lane_range(yG - 0.5, horizontal_ranges):
            paths += count_paths(xG, yG - 1, xpr, ypr, vertical_ranges, horizontal_ranges)

    return paths

# Since we have constraints on memory usage, we'll use a memoization technique to reduce the memory footprint
memo = {}

def count_paths_memo(xG, yG, xpr, ypr, vertical_ranges, horizontal_ranges, memo):
    if (xG, yG) in memo:
        return memo[(xG, yG)]

    paths = count_paths(xG, yG, xpr, ypr, vertical_ranges, horizontal_ranges)

    memo[(xG, yG)] = paths
    return paths

# Call the function with memoization to count the distinct minimum paths
number_of_paths = count_paths_memo(xG, yG, xpr, ypr, vertical_ranges, horizontal_ranges, memo)

# Write output to file
with open('parc.out', 'w') as file:
    file.write(f"{min_path_length:.8f}\n")
    file.write(f"{number_of_paths}\n")
```

This code snippet solves the challenge by reading the park dimensions, coordinates, and bike lanes from a file, using a recursive function to calculate the number of distinct minimum-length paths, and then writing the results to an output file. Please note that due to memory constraints, the recursive function uses memoization to avoid redundant calculations and reduce memory usage.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the current environment. Since using `numpy` is not strictly necessary for this problem, we can remove the import and rewrite the solution without it, ensuring we stay within the memory constraints using a pure Python approach.

Here is the rewritten solution without `numpy`:

```python
# Function to check if position is in a bike lane range
def is_in_bike_lane(coord, bike_lanes):
    return any(start < coord < end for start, end in bike_lanes)

# Function to calculate the number of distinct minimum paths with memoization
def count_paths(xG, yG, xpr, ypr, vertical_lanes, horizontal_lanes, memo):
    if (xG, yG) == (xpr, ypr):
        return 1
    if (xG, yG) in memo:
        return memo[(xG, yG)]

    paths = 0
    if xG < xpr and not is_in_bike_lane(xG + 0.5, vertical_lanes):
        paths += count_paths(xG + 1, yG, xpr, ypr, vertical_lanes, horizontal_lanes, memo)
    if xG > xpr and not is_in_bike_lane(xG - 0.5, vertical_lanes):
        paths += count_paths(xG - 1, yG, xpr, ypr, vertical_lanes, horizontal_lanes, memo)
    if yG < ypr and not is_in_bike_lane(yG + 0.5, horizontal_lanes):
        paths += count_paths(xG, yG + 1, xpr, ypr, vertical_lanes, horizontal_lanes, memo)
    if yG > ypr and not is_in_bike_lane(yG - 0.5, horizontal_lanes):
        paths += count_paths(xG, yG - 1, xpr, ypr, vertical_lanes, horizontal_lanes, memo)

    memo[(xG, yG)] = paths
    return paths

# Read input from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_lanes = [tuple(sorted(map(int, file.readline().split()))) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_lanes = [tuple(sorted(map(int, file.readline().split()))) for _ in range(n)]

# Calculate Manhattan distance as the initial min path length
min_path_length = abs(xG - xpr) + abs(yG - ypr)

# Call the function with memoization to count the distinct minimum paths
memo = {}
number_of_paths = count_paths(xG, yG, xpr, ypr, vertical_lanes, horizontal_lanes, memo)

# Write output to file
with open('parc.out', 'w') as file:
    file.write(f"{min_path_length:.8f}\n")
    file.write(f"{number_of_paths}\n")
```

This solution reads input from a file and writes output to a file as per the original requirements. It uses memoization within the `count_paths` function to optimize the calculation of the number of distinct minimum-length paths. 
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.00000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
