---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Please save this code to a .py file and run it, as it is designed to read from and write to files.
import numpy as np

# Function to calculate the minimum distance and number of distinct minimum length paths
def calculate_min_path_and_count(xG, yG, xpr, ypr, vertical, horizontal):
    # Calculate Manhattan distance (shortest distance in the grid, without diagonals)
    manhattan_distance = abs(xpr - xG) + abs(ypr - yG)
    
    # Define the function dynamically based on the given coordinates and obstacles
    def count_paths(x, y, x_dest, y_dest, obstacles):
        # Initialize a matrix to store the number of ways to reach each cell
        dp = np.zeros((x_dest + 1, y_dest + 1), dtype=np.int64)
        dp[x, y] = 1  # Starting point
        
        # Check for obstacles in horizontal paths
        for oy in range(y_dest + 1):
            for o_start, o_end in obstacles['horizontal']:
                dp[:, oy] = np.where(np.logical_and(np.arange(x_dest + 1) > o_start, 
                                                    np.arange(x_dest + 1) <= o_end), 0, dp[:, oy])
        
        # Check for obstacles in vertical paths
        for ox in range(x_dest + 1):
            for o_start, o_end in obstacles['vertical']:
                dp[ox, :] = np.where(np.logical_and(np.arange(y_dest + 1) > o_start, 
                                                    np.arange(y_dest + 1) <= o_end), 0, dp[ox, :])
        
        # Compute number of paths to each cell
        for i in range(x + 1, x_dest + 1):
            for j in range(y + 1, y_dest + 1):
                dp[i, j] = dp[i - 1, j] + dp[i, j - 1] if dp[i, j] != 0 else 0
        
        return dp[x_dest, y_dest]

    # Obstacles dictionary with both vertical and horizontal lists
    obstacles = {
        'vertical': sorted([(min(a, b), max(a, b)) for a, b in vertical]),
        'horizontal': sorted([(min(a, b), max(a, b)) for a, b in horizontal])
    }
    
    # Calculate number of paths
    path_count = count_paths(xG, yG, xpr, ypr, obstacles)
    
    return manhattan_distance, path_count

# Reading from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline())
    horizontal = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Calculate minimum path and count
min_path, count = calculate_min_path_and_count(xG, yG, xpr, ypr, vertical, horizontal)

# Writing to file
with open('parc.out', 'w') as file:
    file.write(f"{min_path:.8f}\n{count}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
