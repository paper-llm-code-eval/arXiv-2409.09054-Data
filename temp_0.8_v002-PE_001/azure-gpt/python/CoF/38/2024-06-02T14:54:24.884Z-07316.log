---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# parc.py
import numpy as np

# Read input data from file
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort the bike paths and prepare arrays for efficient lookup
vertical_bike_paths.sort(key=lambda x: x[0])
horizontal_bike_paths.sort(key=lambda x: x[0])
vertical_bike_paths_arr = np.array(vertical_bike_paths, dtype=np.int32)
horizontal_bike_paths_arr = np.array(horizontal_bike_paths, dtype=np.int32)

# Function to find the path length and count of shortest paths
def find_shortest_path_and_count(xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths):
    # Count shortest distances horizontally and vertically
    horiz_dist = np.abs(vertical_bike_paths_arr[:, 0] - xG)
    horiz_paths = np.count_nonzero(horiz_dist == horiz_dist.min())
    vert_dist = np.abs(horizontal_bike_paths_arr[:, 0] - yG)
    vert_paths = np.count_nonzero(vert_dist == vert_dist.min())

    # Calculate the actual minimal distance
    min_horiz_dist = horiz_dist.min() if vertical_bike_paths else 0
    min_vert_dist = vert_dist.min() if horizontal_bike_paths else 0
    path_length = np.hypot(xpr - xG + min_horiz_dist, ypr - yG + min_vert_dist)

    # Calculate the number of shortest paths
    num_paths = horiz_paths * vert_paths

    return path_length, num_paths

# Call the function to get the shortest path length and count
path_length, num_paths = find_shortest_path_and_count(
    xG, yG, xpr, ypr,
    vertical_bike_paths_arr,
    horizontal_bike_paths_arr
)

# Write output data to file
with open('parc.out', 'w') as f:
    f.write(f"{path_length:.8f}\n")
    f.write(f"{num_paths}\n")
```

Please save this script as `parc.py`. This script assumes the existence of a file named `parc.in` and will produce an output file named `parc.out`. The script efficiently calculates the shortest path length and the number of distinct shortest paths between Gigel and his friend's positions, respecting the constraints imposed by the bike paths and the memory limit. It uses NumPy for efficient computation and array handling, but be mindful that complex problems like this can have edge cases or require additional optimizations not captured in this example.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the NumPy module is not installed in the environment where the code is being executed. Since the challenge requires optimizing both time and memory usage and suggests utilizing NumPy for efficient solutions, it is essential to have NumPy available.

However, if we cannot use NumPy due to the environment restrictions, we must implement a solution without relying on external libraries. Here is a pure Python solution that does not use NumPy or any other external library:

```python
# parc.py

# Function to find the path length and count of shortest paths
def find_shortest_path_and_count(xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths):
    # Find the closest vertical bike path to the starting point
    min_vert_dist = min([abs(x - xG) for x, _ in vertical_bike_paths], default=0)
    min_vert_paths = sum(1 for x, _ in vertical_bike_paths if abs(x - xG) == min_vert_dist)

    # Find the closest horizontal bike path to the starting point
    min_horiz_dist = min([abs(y - yG) for _, y in horizontal_bike_paths], default=0)
    min_horiz_paths = sum(1 for _, y in horizontal_bike_paths if abs(y - yG) == min_horiz_dist)

    # Calculate the actual minimal distance
    path_length = ((xpr - xG + min_vert_dist)**2 + (ypr - yG + min_horiz_dist)**2)**0.5

    # Calculate the number of shortest paths
    num_paths = min_vert_paths * min_horiz_paths

    return path_length, num_paths

# Read input data from file
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Call the function to get the shortest path length and count
path_length, num_paths = find_shortest_path_and_count(
    xG, yG, xpr, ypr, 
    vertical_bike_paths, 
    horizontal_bike_paths
)

# Write output data to file
with open('parc.out', 'w') as f:
    f.write(f"{path_length:.8f}\n")
    f.write(f"{num_paths}\n")
```

This solution uses only built-in Python functions and types, which ensures that it will work in an environment without external libraries like NumPy. It follows the same logic as the previous solution but replaces NumPy operations with pure Python equivalents. This version should work within the memory constraints provided for the challenge.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
10.00000000
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
