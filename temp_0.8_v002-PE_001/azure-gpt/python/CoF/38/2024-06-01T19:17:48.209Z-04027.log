---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read the input from the file parc.in
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_tracks = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_tracks = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Create a 2D numpy array to represent the parc
# 1 represents pedestrian areas, 0 represents bike tracks
parc = np.ones((Yparc + 1, Xparc + 1), dtype=np.int)

# Mark the bike tracks on the parc array
for start, end in vertical_tracks:
    parc[:, min(start, end): max(start, end) + 1] = 0
for start, end in horizontal_tracks:
    parc[min(start, end): max(start, end) + 1, :] = 0

# Calculate shortest path length
shortest_length = abs(xG - xpr) + abs(yG - ypr)

# Calculate number of distinct shortest paths
# Initialize a 2D numpy array for holding counts of paths to arrive at each cell
paths_count = np.zeros((Yparc + 1, Xparc + 1), dtype=np.int)
paths_count[yG, xG] = 1  # Start from Gigel's position

# Dynamic programming to calculate paths
for y in range(yG, ypr + 1):
    for x in range(xG, xpr + 1):
        if parc[y, x] == 1:  # Only consider pedestrian areas
            if y > 0:
                paths_count[y, x] += paths_count[y - 1, x]  # From the cell below
            if x > 0:
                paths_count[y, x] += paths_count[y, x - 1]  # From the cell to the left

# Write the output to the file parc.out
with open('parc.out', 'w') as file:
    file.write(f"{shortest_length:.6f}\n")
    file.write(f"{paths_count[ypr, xpr]}\n")
```

This solution involves initializing a grid for the parc and marking the bike tracks as impassable. The dynamic programming part calculates the number of ways to reach each cell in the grid by using the values from the left and lower neighboring cells, which takes into account the restriction that movement should be parallel to the axes. The memory usage remains low by only using 2D numpy arrays of size `(Yparc + 1) x (Xparc + 1)`, and no other substantial data structures. The output is written to `parc.out` with the required precision.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not found, which means that `numpy` is not installed in the environment where the code is being run. However, since the task requires optimizing memory and `numpy` is a common library used for numerical computations, it's surprising that it's not available.

Given the memory constraints and the restrictions on external libraries, we'll need to re-implement the solution without using `numpy` or any other external libraries, and rely purely on Python's built-in data structures to manage memory efficiently.

Here is the revised solution:

```python
# Read the input from the file parc.in
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_tracks = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_tracks = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Function to check if a point is on a pedestrian area
def is_pedestrian(x, y, vertical_tracks, horizontal_tracks):
    for vt in vertical_tracks:
        if vt[0] <= x <= vt[1] or vt[1] <= x <= vt[0]:
            return False
    for ht in horizontal_tracks:
        if ht[0] <= y <= ht[1] or ht[1] <= y <= ht[0]:
            return False
    return True

# Calculate the shortest path length
shortest_length = abs(xG - xpr) + abs(yG - ypr)

# Initialize a 2D list for holding counts of paths to arrive at each cell
paths_count = [[0] * (Xparc + 1) for _ in range(Yparc + 1)]
paths_count[yG][xG] = 1  # Start from Gigel's position

# Dynamic programming to calculate paths
for y in range(min(yG, ypr), max(yG, ypr) + 1):
    for x in range(min(xG, xpr), max(xG, xpr) + 1):
        if is_pedestrian(x, y, vertical_tracks, horizontal_tracks):
            if y > 0:
                paths_count[y][x] += paths_count[y - 1][x]  # From the cell below
            if x > 0:
                paths_count[y][x] += paths_count[y][x - 1]  # From the cell to the left

# Write the output to the file parc.out
with open('parc.out', 'w') as file:
    file.write(f"{shortest_length:.6f}\n")
    file.write(f"{paths_count[ypr][xpr]}\n")
```

This version of the solution uses pure Python lists instead of `numpy` arrays. It checks whether a point is part of a pedestrian area by iterating through the bike tracks, and the dynamic programming approach is used to compute the number of distinct shortest paths. The output is written with the required precision to `parc.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
