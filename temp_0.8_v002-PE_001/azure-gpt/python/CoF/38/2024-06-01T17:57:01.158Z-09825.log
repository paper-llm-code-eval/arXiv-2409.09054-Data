---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Helper function to calculate number of distinct paths using Dynamic Programming
def distinct_paths(dp, x1, y1, x2, y2):
    for i in range(x1, x2 + 1):
        for j in range(y1, y2 + 1):
            if i == x1 and j == y1:
                dp[i][j] = 1
            else:
                dp[i][j] = 0
                if i > x1:
                    dp[i][j] += dp[i - 1][j]
                if j > y1:
                    dp[i][j] += dp[i][j - 1]
    return dp[x2][y2]

# Read data from file
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline().strip())
    vertical_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline().strip())
    horizontal_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort bike paths
vertical_bike_paths.sort()
horizontal_bike_paths.sort()

# Initialize DP matrix for distinct paths
dp = np.zeros((Xparc + 1, Yparc + 1), dtype=np.int64)

# Calculate distinct paths around vertical bike paths
paths_vertical = 1
prev_x = 0
for path in vertical_bike_paths:
    x1, x2 = sorted(path)
    paths_vertical *= distinct_paths(dp, prev_x, 0, x1 - 1, Yparc)
    prev_x = x2
paths_vertical *= distinct_paths(dp, prev_x, 0, Xparc, Yparc)

# Calculate distinct paths around horizontal bike paths
paths_horizontal = 1
prev_y = 0
for path in horizontal_bike_paths:
    y1, y2 = sorted(path)
    paths_horizontal *= distinct_paths(dp, 0, prev_y, Xparc, y1 - 1)
    prev_y = y2
paths_horizontal *= distinct_paths(dp, 0, prev_y, Xparc, Yparc)

# Calculate total distinct paths
total_paths = paths_vertical * paths_horizontal

# Calculate minimum path length
min_path_length = np.sqrt((xG - xpr) ** 2 + (yG - ypr) ** 2)

# Write data to file
with open('parc.out', 'w') as f:
    f.write(f'{min_path_length:.8f}\n')
    f.write(f'{total_paths}\n')
```
```
---------- user ----------


Expected program to write result to `parc.out` and read from `parc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to normalize bike paths and ensure they do not overlap
def normalize_bike_paths(bike_paths, max_coordinate):
    normalized = np.zeros(max_coordinate + 1, dtype=bool)
    for path_start, path_end in bike_paths:
        normalized[min(path_start, path_end): max(path_start, path_end) + 1] = True
    return normalized

def main():
    with open('parc.in', 'r') as f:
        Xparc, Yparc = map(int, f.readline().split())
        xG, yG, xpr, ypr = map(int, f.readline().split())
        m = int(f.readline().strip())
        vertical_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
        n = int(f.readline().strip())
        horizontal_bike_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]

    # Normalize bike paths to arrays marking blocked coordinates
    blocked_columns = normalize_bike_paths(vertical_bike_paths, Xparc)
    blocked_rows = normalize_bike_paths(horizontal_bike_paths, Yparc)

    # Calculate distances in both directions while avoiding bike paths
    x_distance = np.sum(~blocked_columns[min(xG, xpr):max(xG, xpr) + 1])
    y_distance = np.sum(~blocked_rows[min(yG, ypr):max(yG, ypr) + 1])

    # Calculate the minimum path length
    min_path_length = x_distance + y_distance

    # Calculate the number of distinct paths
    # Initialize DP matrices for paths along x-axis and y-axis
    dp_x = np.ones(Xparc + 1, dtype=int)
    dp_y = np.ones(Yparc + 1, dtype=int)
    
    # Update the DP matrices to count paths avoiding bike paths
    for i in range(1, Xparc + 1):
        if blocked_columns[i]:
            dp_x[i] = 0
        else:
            dp_x[i] = dp_x[i - 1] + dp_x[i]

    for j in range(1, Yparc + 1):
        if blocked_rows[j]:
            dp_y[j] = 0
        else:
            dp_y[j] = dp_y[j - 1] + dp_y[j]

    # Multiply the paths along x-axis and y-axis to get total paths
    total_paths = dp_x[xpr] * dp_y[ypr]

    with open('parc.out', 'w') as f:
        f.write(f'{min_path_length:.8f}\n')
        f.write(f'{total_paths}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `parc.out` and read from `parc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def calculate_min_length_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical, horizontal):
    # Initialize matrix for the park with 1's for walkable paths
    park = np.ones((Xparc + 1, Yparc + 1), dtype=int)

    # Block bike paths in the park matrix
    for x1, x2 in vertical:
        park[min(x1, x2):max(x1, x2) + 1, :] = 0
    for y1, y2 in horizontal:
        park[:, min(y1, y2):max(y1, y2) + 1] = 0

    # Start dynamic programming from Gigel's position
    dp = np.zeros_like(park)
    dp[xG, yG] = 1

    # Directions for right and up movements
    directions = [(1, 0), (0, 1)]

    # Calculate the number of paths using dynamic programming
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if park[x, y]:
                for dx, dy in directions:
                    nx, ny = x + dx, y + dy
                    if 0 <= nx <= Xparc and 0 <= ny <= Yparc and park[nx, ny]:
                        dp[nx, ny] += dp[x, y]

    # The min length is simply the Manhattan distance since Gigel can only move right/up
    min_length = abs(xpr - xG) + abs(ypr - yG)

    # The number of distinct paths to friend's position
    num_paths = dp[xpr, ypr]

    return min_length, num_paths

# Read data from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline())
    horizontal_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Calculate the minimum path length and the number of distinct paths
min_length, num_paths = calculate_min_length_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths)

# Write output data to file
with open('parc.out', 'w') as file:
    file.write("{:.8f}\n".format(min_length))
    file.write(str(num_paths) + '\n')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Apologies for the confusion. Since `numpy` is not available, I will write a solution without using it. Here is the updated code that will use only built-in Python data structures and functions.

```python
def read_input(filename):
    with open(filename, 'r') as file:
        Xparc, Yparc = map(int, file.readline().split())
        xG, yG, xpr, ypr = map(int, file.readline().split())
        m = int(file.readline())
        vertical_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(m)]
        n = int(file.readline())
        horizontal_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths

def calculate_min_length_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths):
    # Calculate the minimum path length using Manhattan distance
    min_length = abs(xpr - xG) + abs(ypr - yG)

    # Initialize DP array for counting paths
    dp = [[0] * (Yparc + 1) for _ in range(Xparc + 1)]
    dp[xG][yG] = 1

    # Block the bike paths
    for x1, x2 in vertical_bike_paths:
        for x in range(min(x1, x2), max(x1, x2) + 1):
            for y in range(Yparc + 1):
                dp[x][y] = 0
    for y1, y2 in horizontal_bike_paths:
        for y in range(min(y1, y2), max(y1, y2) + 1):
            for x in range(Xparc + 1):
                dp[x][y] = 0

    # Calculate number of paths using DP, considering blockages
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if dp[x][y] != 0:
                if x + 1 <= Xparc and dp[x + 1][y] != 0:
                    dp[x + 1][y] += dp[x][y]
                if y + 1 <= Yparc and dp[x][y + 1] != 0:
                    dp[x][y + 1] += dp[x][y]

    # Get the number of distinct paths to friend's position
    num_paths = dp[xpr][ypr]

    return min_length, num_paths

def write_output(filename, min_length, num_paths):
    with open(filename, 'w') as file:
        file.write("{:.8f}\n".format(min_length))
        file.write(str(num_paths) + '\n')

# Main execution
Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths = read_input('parc.in')
min_length, num_paths = calculate_min_length_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths)
write_output('parc.out', min_length, num_paths)
```
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.00000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
