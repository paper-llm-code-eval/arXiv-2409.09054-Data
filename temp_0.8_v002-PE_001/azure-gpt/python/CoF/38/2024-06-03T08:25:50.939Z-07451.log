---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Helper function to calculate the distance between two points using Euclidean distance
def distance(x1, y1, x2, y2):
    return np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# Helper function to find the number of unique paths from start to end
def unique_paths(m, n):
    # Using dynamic programming to calculate the number of unique paths
    # Initialise the grid with 1's as there is 1 way to reach any cell in the first row or column
    grid = np.ones((m, n), dtype=np.int64)
    for i in range(1, m):
        for j in range(1, n):
            grid[i, j] = grid[i - 1, j] + grid[i, j - 1]
    return grid[m - 1, n - 1]

# Read input data
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline().strip())
    vertical_tracks = [list(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline().strip())
    horizontal_tracks = [list(map(int, f.readline().split())) for _ in range(n)]

# Sort the bike tracks in increasing order
vertical_tracks.sort()
horizontal_tracks.sort()

# Determine the cells Gigel and his friend are in
Gx_cell = sum(1 for x1, x2 in vertical_tracks if x1 < xG < x2)
Gy_cell = sum(1 for y1, y2 in horizontal_tracks if y1 < yG < y2)
Fx_cell = sum(1 for x1, x2 in vertical_tracks if x1 < xpr < x2)
Fy_cell = sum(1 for y1, y2 in horizontal_tracks if y1 < ypr < y2)

# Calculate the minimum distance using Manhattan distance + Euclidean distance for diagonal paths
min_dist = distance(Gx_cell, Gy_cell, Fx_cell, Fy_cell)

# Calculate number of unique paths
num_paths = unique_paths(abs(Fx_cell - Gx_cell) + 1, abs(Fy_cell - Gy_cell) + 1)

# Write output data
with open('parc.out', 'w') as f:
    f.write(f"{min_dist:.8f}\n{num_paths}\n")
```

This solution assumes that the number of unique paths can be calculated with a simple combinatorial formula without considering the bike tracks. If the bike tracks make some paths unavailable, a more complex pathfinding algorithm would be needed, which would potentially involve graph traversal or dynamic programming while considering the bike tracks as obstacles.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the numpy module is not found; however, considering the restrictions and memory limits of the problem, it would be better to avoid using numpy or any other third-party libraries that may consume additional memory. I will rewrite the solution to use only built-in Python data structures and functions.

Below is the python code without numpy or other third-party libraries:

```python
from math import sqrt

# Helper function to calculate the distance between two points using Euclidean distance
def distance(x1, y1, x2, y2):
    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# Read input data
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline().strip())
    vertical_tracks = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline().strip())
    horizontal_tracks = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Determine the cells Gigel and his friend are in (assuming each track adds one cell)
Gx_cell = len([1 for x1, x2 in vertical_tracks if x1 < xG < x2])
Gy_cell = len([1 for y1, y2 in horizontal_tracks if y1 < yG < y2])
Fx_cell = len([1 for x1, x2 in vertical_tracks if x1 < xpr < x2])
Fy_cell = len([1 for y1, y2 in horizontal_tracks if y1 < ypr < y2])

# Calculate the minimum distance (Manhattan distance)
min_dist = distance(Gx_cell, Gy_cell, Fx_cell, Fy_cell)

# Calculate number of unique paths (combinatorial formula)
def unique_paths(m, n):
    if m == 0 or n == 0:
        return 1
    if m < n:
        m, n = n, m
    total = 1
    for i in range(1, n + 1):
        total *= m + i
        total //= i
    return total

num_paths = unique_paths(abs(Fx_cell - Gx_cell), abs(Fy_cell - Gy_cell))

# Write output data
with open('parc.out', 'w') as f:
    f.write(f"{min_dist:.8f}\n{num_paths}\n")
```

This solution calculates the minimum distance between points A and B using the Euclidean distance formula. It also calculates the number of unique paths using a combinatorial formula, which is efficient and does not require any library beyond Python's math module. The paths calculation assumes that the bike tracks do not restrict movement between pedestrian zones and that Gigel and his friend are not standing on the same bike track. If bike tracks need to be considered as obstacles, the unique_paths calculation would need to be significantly altered.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
0.00000000
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
