---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# parc.py
import numpy as np

def read_input(filename):
    with open(filename, 'r') as f:
        Xparc, Yparc = map(int, f.readline().split())
        xG, yG, xpr, ypr = map(int, f.readline().split())
        m = int(f.readline().strip())
        vertical_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
        n = int(f.readline().strip())
        horizontal_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths

def write_output(filename, min_length, num_ways):
    with open(filename, 'w') as f:
        f.write(f"{min_length:.9f}\n")
        f.write(f"{num_ways}\n")

def main():
    Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths = read_input('parc.in')
    
    # Create the array of zeros that represent the park
    park = np.zeros((Xparc + 1, Yparc + 1), dtype=np.int64)
    
    # Mark vertical bike paths by setting the corresponding cells to -1
    for x1, x2 in vertical_paths:
        park[min(x1, x2):max(x1, x2) + 1, :] = -1
    
    # Mark horizontal bike paths by setting the corresponding cells to -1
    for y1, y2 in horizontal_paths:
        park[:, min(y1, y2):max(y1, y2) + 1] = -1

    # Calculate the Manhattan distance
    min_length = abs(xG - xpr) + abs(yG - ypr)
    
    # Dynamic programming approach to count the number of shortest paths
    # Initialize Gigel's starting point
    park[xG, yG] = 1
    
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if park[x, y] != -1:
                if x > 0 and park[x - 1, y] > 0:
                    park[x, y] += park[x - 1, y]
                if y > 0 and park[x, y - 1] > 0:
                    park[x, y] += park[x, y - 1]
            park[x, y] %= 1000000000  # Take modulo to prevent overflow

    num_ways = park[xpr, ypr]

    write_output('parc.out', min_length, num_ways)

if __name__ == "__main__":
    main()
```

This solution reads the input from `parc.in`, performs the necessary calculations, and writes the output to `parc.out`. The script is designed to use numpy for efficient array manipulation and to stay within the memory constraints. The dynamic programming approach is used to count the number of shortest paths from Gigel's starting point to his friend's location.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed, which means we cannot use it. We need to rewrite the solution to solve the problem without using any external libraries, relying only on standard Python data structures. Here is the corrected solution:

```python
# parc.py

def read_input(filename):
    with open(filename, 'r') as f:
        Xparc, Yparc = map(int, f.readline().split())
        xG, yG, xpr, ypr = map(int, f.readline().split())
        m = int(f.readline().strip())
        vertical_paths = [tuple(map(int, f.readline().split())) for _ in range(m)]
        n = int(f.readline().strip())
        horizontal_paths = [tuple(map(int, f.readline().split())) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths

def write_output(filename, min_length, num_ways):
    with open(filename, 'w') as f:
        f.write(f"{min_length:.9f}\n")
        f.write(f"{num_ways}\n")

def calculate_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths):
    min_length = abs(xG - xpr) + abs(yG - ypr)
    park = [[0 for _ in range(Yparc + 1)] for _ in range(Xparc + 1)]
    park[xG][yG] = 1

    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if not any(x1 <= x <= x2 for x1, x2 in vertical_paths) and not any(y1 <= y <= y2 for y1, y2 in horizontal_paths):
                if x > xG:
                    park[x][y] += park[x - 1][y]
                if y > yG:
                    park[x][y] += park[x][y - 1]
                park[x][y] %= 1000000000

    return min_length, park[xpr][ypr]

def main():
    Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths = read_input('parc.in')
    min_length, num_ways = calculate_paths(Xparc, Yparc, xG, yG, xpr, ypr, vertical_paths, horizontal_paths)
    write_output('parc.out', min_length, num_ways)

if __name__ == "__main__":
    main()
```

This solution no longer depends on numpy or any other external library. It uses lists to represent the park and calculate the number of shortest paths. The calculation of the paths avoids the bike paths by not updating the path counts for cells that fall within the bike path ranges. We perform a modulo operation to keep the path count within the limits of a 32-bit signed integer to avoid overflow.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.000000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
