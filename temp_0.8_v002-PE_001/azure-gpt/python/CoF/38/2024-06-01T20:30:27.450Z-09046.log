---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Core library imports
import numpy as np

# Function to read bike paths from file and convert to dictionary
def read_paths(file, num_paths):
    paths = {}
    for _ in range(num_paths):
        start, end = map(int, file.readline().split())
        for pos in range(min(start, end), max(start, end) + 1):
            paths[pos] = paths.get(pos, 0) + 1
    return paths

# Function to calculate the minimum distance and number of shortest paths
def calculate_min_distance_and_paths(xG, yG, xpr, ypr, vertical_paths, horizontal_paths):
    # Calculate the minimum distance based on the Manhattan distance and bike path penalties
    dist_x = abs(xG - xpr)
    dist_y = abs(yG - ypr)
    min_distance = dist_x + dist_y  # Start with Manhattan distance
    
    # Add penalties for each bike path crossed
    penalty_x = sum(1 for x in range(min(xG, xpr), max(xG, xpr)) if x in vertical_paths)
    penalty_y = sum(1 for y in range(min(yG, ypr), max(yG, ypr)) if y in horizontal_paths)
    min_distance += (np.sqrt(2) - 1) * (penalty_x + penalty_y)
    
    # Calculate the number of shortest paths
    num_paths = 1  # There's always at least one path (straight line)
    
    # Calculate paths considering bike path penalties
    num_paths *= np.math.comb(dist_x + penalty_x, penalty_x) * np.math.comb(dist_y + penalty_y, penalty_y)
    
    # Return the minimum distance and number of shortest paths
    return min_distance, num_paths

# Read from 'parc.in'
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_paths = read_paths(file, m)
    n = int(file.readline())
    horizontal_paths = read_paths(file, n)

# Calculate the minimum distance and number of shortest paths
min_distance, num_paths = calculate_min_distance_and_paths(xG, yG, xpr, ypr, vertical_paths, horizontal_paths)

# Write to 'parc.out'
with open('parc.out', 'w') as file:
    file.write(f"{min_distance:.8f}\n")
    file.write(f"{num_paths}\n")
```

This is the code I've created to solve the given problem. It takes into account the Manhattan distance between two points and adjusts for the penalties incurred when crossing bike paths, which can increase the travel distance. The number of distinct shortest paths is calculated using combinatorics, considering the additional distance due to bike paths. The code is designed to be memory efficient, avoiding the creation of large data structures, and uses NumPy and Python's built-in mathematics functions to perform calculations. It reads from a file called `parc.in` and writes the output to a file called `parc.out`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that NumPy is not installed in the environment where the code is being executed. Since the challenge states that we should optimize for both time and memory and specifies the use of NumPy, it's expected that NumPy is available for use. However, if NumPy is not available and cannot be installed, we can attempt to solve the problem without NumPy.

Here is how you could rewrite the solution without NumPy, using only Python's standard library:

```python
from math import sqrt, comb

def read_paths(file, num_paths):
    paths = {}
    for _ in range(num_paths):
        start, end = map(int, file.readline().split())
        for pos in range(min(start, end), max(start, end) + 1):
            paths[pos] = paths.get(pos, 0) + 1
    return paths

def calculate_min_distance_and_paths(xG, yG, xpr, ypr, vertical_paths, horizontal_paths):
    dist_x = abs(xG - xpr)
    dist_y = abs(yG - ypr)
    min_distance = dist_x + dist_y
    
    penalty_x = sum(1 for x in range(min(xG, xpr), max(xG, xpr)) if x in vertical_paths)
    penalty_y = sum(1 for y in range(min(yG, ypr), max(yG, ypr)) if y in horizontal_paths)
    min_distance += (sqrt(2) - 1) * (penalty_x + penalty_y)
    
    num_paths = 1
    num_paths *= comb(dist_x + penalty_x, penalty_x) * comb(dist_y + penalty_y, penalty_y)
    
    return min_distance, num_paths

with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_paths = read_paths(file, m)
    n = int(file.readline())
    horizontal_paths = read_paths(file, n)

min_distance, num_paths = calculate_min_distance_and_paths(xG, yG, xpr, ypr, vertical_paths, horizontal_paths)

with open('parc.out', 'w') as file:
    file.write(f"{min_distance:.8f}\n")
    file.write(f"{num_paths}\n")
```

This updated implementation removes the dependency on NumPy and uses the `math` module from Python's standard library. It still optimizes for memory usage by avoiding large data structures and calculates the required values efficiently. The `math.comb` function is used instead of `numpy.math.comb` to calculate combinations for the number of paths.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
17.14213562
360360
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
