---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Function to calculate the Manhattan distance between two points.
def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# Function to calculate number of shortest paths for lattice grid.
def count_paths(width, height):
    # Using combinatorics, choose 'width+height' choose 'width'
    return np.math.factorial(width + height) // (np.math.factorial(width) * np.math.factorial(height))

# Read data from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline())
    horizontal_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Initialize the min length to the Manhattan distance between points
min_length = manhattan_distance(xG, yG, xpr, ypr)

# Calculate additional length due to bike paths
# For each vertical bike path, if the path is between Gigel and his friend, add 0.5 to the min length.
for bike_path in vertical_bike_paths:
    if (xG < min(bike_path) <= xpr) or (xG > min(bike_path) >= xpr):
        min_length += 0.5

# For each horizontal bike path, if the path is between Gigel and his friend, add 0.5 to the min length.
for bike_path in horizontal_bike_paths:
    if (yG < min(bike_path) <= ypr) or (yG > min(bike_path) >= ypr):
        min_length += 0.5

# Calculate the number of paths
paths = count_paths(abs(xpr - xG), abs(ypr - yG))

# Write result to file
with open('parc.out', 'w') as file:
    file.write(f"{min_length:.6f}\n{paths}\n")
```
Please make sure to run this code in a local environment where you have the `parc.in` file with the example input provided in the same directory where this script is being executed. The output will be written to the `parc.out` file according to the specifications.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the code is being run in an environment where the `numpy` library is not available and we have memory constraints, I need to rewrite the solution without using `numpy` or other external libraries that might be missing or not permitted due to memory constraints. Instead, I will use pure Python to handle the calculations.

Here is the rewritten solution:

```python
# Function to calculate the combinatorial number C(n, k)
def comb(n, k):
    if k > n:
        return 0
    if k == 0 or k == n:
        return 1
    k = min(k, n - k)  # Take advantage of symmetry
    c = 1
    for i in range(k):
        c = c * (n - i) // (i + 1)
    return c

# Read data from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_bike_paths = [tuple(sorted(map(int, file.readline().split()))) for _ in range(m)]
    n = int(file.readline())
    horizontal_bike_paths = [tuple(sorted(map(int, file.readline().split()))) for _ in range(n)]

# Calculate the number of paths
x_diff = abs(xpr - xG)
y_diff = abs(ypr - yG)
num_paths = comb(x_diff + y_diff, x_diff)

# Initialize the min length to the Manhattan distance between points Gigel and his friend
min_length = x_diff + y_diff

# Check if Gigel has to cross bike paths and add 0.5 for each path crossed
for x1, x2 in vertical_bike_paths:
    if xG < x1 <= xpr or xG > x1 >= xpr:
        min_length += 0.5
for y1, y2 in horizontal_bike_paths:
    if yG < y1 <= ypr or yG > y1 >= ypr:
        min_length += 0.5

# Write result to file
with open('parc.out', 'w') as file:
    file.write(f"{min_length:.9f}\n{num_paths}\n")
```

This solution uses combinatorics to calculate the number of distinct shortest paths and manually checks each bike path to see if it needs to be crossed, adjusting the minimum length accordingly. The output is formatted to nine decimal places to ensure that the precision requirement is met, which should not exceed 0.01. Make sure to run this code in a local environment where the `parc.in` file with the example input provided is in the same directory where this script is being executed. The output will be written to `parc.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
14.500000000
1716
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
