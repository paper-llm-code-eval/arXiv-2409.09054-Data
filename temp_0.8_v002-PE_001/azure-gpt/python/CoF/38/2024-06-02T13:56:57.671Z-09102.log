---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read input data
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline().strip())
    vertical_tracks = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline().strip())
    horizontal_tracks = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort tracks and convert to numpy array for fast operations
vertical_tracks = sorted([sorted(track) for track in vertical_tracks], key=lambda x: x[0])
horizontal_tracks = sorted([sorted(track) for track in horizontal_tracks], key=lambda x: x[0])

# Function to calculate the Manhattan distance between two points
def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# Calculate the minimum path length using Manhattan distance taking into account bike lanes
min_path_len = manhattan_distance(xG, yG, xpr, ypr)
for vx1, vx2 in vertical_tracks:
    if (xG < vx1 < xpr) or (xpr < vx1 < xG):
        min_path_len += 2
for hy1, hy2 in horizontal_tracks:
    if (yG < hy1 < ypr) or (ypr < hy1 < yG):
        min_path_len += 2

# Function to calculate the number of distinct minimal paths
def count_paths(x1, y1, x2, y2, vertical_tracks, horizontal_tracks):
    paths = 1
    vert_cross = sum(vx1 < x1 < vx2 or vx1 < x2 < vx2 for vx1, vx2 in vertical_tracks)
    horiz_cross = sum(hy1 < y1 < hy2 or hy1 < y2 < hy2 for hy1, hy2 in horizontal_tracks)
    x_dist = abs(x1 - x2)
    y_dist = abs(y1 - y2)

    for i in range(vert_cross):
        paths *= (x_dist + i)
        paths //= (i + 1)
    for i in range(horiz_cross):
        paths *= (y_dist + i)
        paths //= (i + 1)
    return paths

# Calculate the number of distinct minimal paths
num_paths = count_paths(xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks)

# Write output data
with open('parc.out', 'w') as f:
    f.write(f"{min_path_len:.8f}\n{num_paths}\n")
```

This solution reads the input file, calculates the Manhattan distance while considering bike lanes, computes the number of distinct minimal paths by combining paths between each obstacle, and writes the output to a file. The solution is designed to minimize memory usage by using built-in types, list comprehensions, and in-place sorting, which are all optimized in Python. NumPy is not used in this case because the problem can be solved without it, and using it could potentially increase the memory footprint due to the overhead of creating arrays.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not found. However, since the original solution did not actually use `numpy`, we can simply remove the import statement. Let's rewrite the solution without `numpy`.

Here is the revised code:

```python
# Read input data
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline().strip())
    vertical_tracks = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline().strip())
    horizontal_tracks = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort tracks for easier processing
vertical_tracks.sort(key=lambda x: x[0])
horizontal_tracks.sort(key=lambda x: x[0])

# Function to calculate the Manhattan distance between two points
def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# Calculate the minimum path length using Manhattan distance taking into account bike lanes
min_path_len = manhattan_distance(xG, yG, xpr, ypr)
for vx1, vx2 in vertical_tracks:
    if (xG < vx1 < xpr) or (xpr < vx1 < xG):
        min_path_len += 2 * min(abs(vx1 - xG), abs(vx1 - xpr))
for hy1, hy2 in horizontal_tracks:
    if (yG < hy1 < ypr) or (ypr < hy1 < yG):
        min_path_len += 2 * min(abs(hy1 - yG), abs(hy1 - ypr))

# Function to count paths that avoid the tracks
def nCr(n, r):
    if n < r:
        return 0
    r = min(r, n - r)
    result = 1
    for i in range(r):
        result *= n - i
        result //= i + 1
    return result

def count_paths(x1, y1, x2, y2, vertical_tracks, horizontal_tracks):
    vertical_crossings = [vx1 for vx1, vx2 in vertical_tracks if (x1 < vx1 < x2) or (x2 < vx1 < x1)]
    horizontal_crossings = [hy1 for hy1, hy2 in horizontal_tracks if (y1 < hy1 < y2) or (y2 < hy1 < y1)]
    total_x_dist = abs(x1 - x2)
    total_y_dist = abs(y1 - y2)
    paths = nCr(total_x_dist + len(vertical_crossings), total_x_dist) * nCr(total_y_dist + len(horizontal_crossings), total_y_dist)
    return paths

# Calculate the number of distinct minimal paths
num_paths = count_paths(xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks)

# Write output data
with open('parc.out', 'w') as f:
    f.write(f"{min_path_len:.8f}\n{num_paths}\n")
```

This solution should work correctly within the memory limit and without using any additional libraries. It reads from `parc.in`, computes the required values, and writes them to `parc.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
27.00000000
252
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
