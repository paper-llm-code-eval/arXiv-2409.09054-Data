---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np


def read_input(filename):
    with open(filename, 'r') as file:
        park_dims = list(map(int, file.readline().split()))
        gigel_coords, friend_coords = list(map(int, file.readline().split())), list(map(int, file.readline().split()))
        m = int(file.readline())
        vertical_tracks = [list(map(int, file.readline().split())) for _ in range(m)]
        n = int(file.readline())
        horizontal_tracks = [list(map(int, file.readline().split())) for _ in range(n)]
    return park_dims, gigel_coords, friend_coords, vertical_tracks, horizontal_tracks


def distance(a, b):
    return np.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)


def main():
    park_dims, gigel_coords, friend_coords, vertical_tracks, horizontal_tracks = read_input('parc.in')

    # The grid size is bounded by the park dimensions.
    grid_size = (park_dims[0]+1, park_dims[1]+1)

    # Preprocess tracks to create a blocked grid representation.
    # Initialize all cells as unblocked (0).
    blocked = np.zeros(grid_size, dtype=int)

    # Block the tracks (assign 1 to blocked cells).
    for x1, x2 in vertical_tracks:
        blocked[min(x1, x2):max(x1, x2)+1, :] = 1
    for y1, y2 in horizontal_tracks:
        blocked[:, min(y1, y2):max(y1, y2)+1] = 1

    # Calculate the shortest distance.
    shortest_distance = distance(gigel_coords, friend_coords)

    # Count the number of distinct minimum paths.
    # We will use dynamic programming to count paths.
    paths = np.zeros(grid_size, dtype=int)
    mod = 1000000000
    paths[gigel_coords[1], gigel_coords[0]] = 1

    for y in range(gigel_coords[1], friend_coords[1]+1):
        for x in range(gigel_coords[0], friend_coords[0]+1):
            if not blocked[y, x]:
                if x > gigel_coords[0]:
                    paths[y, x] += paths[y, x-1]
                if y > gigel_coords[1]:
                    paths[y, x] += paths[y-1, x]
                paths[y, x] %= mod

    distinct_paths = paths[friend_coords[1], friend_coords[0]]

    # Write results to the output file.
    with open('parc.out', 'w') as file:
        file.write(f'{shortest_distance:.9f}\n')
        file.write(f'{distinct_paths}\n')


if __name__ == '__main__':
    main()
```

Please note that the provided solution is designed to be memory-efficient by only creating necessary representations of the input data and using in-place updates for path counting. The dynamic programming matrix `paths` is limited by the park dimensions, respecting the memory constraints.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed in the environment where the program is being executed. However, in the initial problem description, there is a requirement to use `numpy` for efficiency reasons. In a real-world scenario, you would ensure `numpy` is installed in your environment before running the code.

Given that the code should optimize for both time and memory usage, and that `numpy` is not available, I will have to provide an alternative solution without using `numpy`. This means I'll have to implement the required functionality (such as calculating distances and handling matrices) using pure Python.

Here is the revised solution without `numpy`:

```python
from math import sqrt

def read_input(filename):
    with open(filename, 'r') as file:
        park_dims = list(map(int, file.readline().split()))
        gigel_coords = list(map(int, file.readline().split()))
        friend_coords = list(map(int, file.readline().split()))
        m = int(file.readline())
        vertical_tracks = [list(map(int, file.readline().split())) for _ in range(m)]
        n = int(file.readline())
        horizontal_tracks = [list(map(int, file.readline().split())) for _ in range(n)]
    return park_dims, gigel_coords, friend_coords, vertical_tracks, horizontal_tracks

def distance(a, b):
    return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)

def main():
    park_dims, gigel_coords, friend_coords, vertical_tracks, horizontal_tracks = read_input('parc.in')
    
    # Calculate the shortest distance.
    shortest_distance = distance(gigel_coords, friend_coords)
    
    # Initialize the matrix to count the number of paths.
    grid_size = (park_dims[1] + 1, park_dims[0] + 1)
    paths = [[0 for _ in range(grid_size[1])] for _ in range(grid_size[0])]
    paths[gigel_coords[1]][gigel_coords[0]] = 1

    mod = 1000000000

    # Calculate the number of distinct minimum paths.
    for y in range(gigel_coords[1], friend_coords[1] + 1):
        for x in range(gigel_coords[0], friend_coords[0] + 1):
            if not any(min(x1, x2) <= x <= max(x1, x2) for x1, x2 in vertical_tracks) and \
               not any(min(y1, y2) <= y <= max(y1, y2) for y1, y2 in horizontal_tracks):
                if x > gigel_coords[0]:
                    paths[y][x] = (paths[y][x] + paths[y][x - 1]) % mod
                if y > gigel_coords[1]:
                    paths[y][x] = (paths[y][x] + paths[y - 1][x]) % mod

    distinct_paths = paths[friend_coords[1]][friend_coords[0]]
    
    # Write results to the output file.
    with open('parc.out', 'w') as file:
        file.write(f'{shortest_distance:.9f}\n')
        file.write(f'{distinct_paths}\n')


if __name__ == '__main__':
    main()
```
This solution uses standard Python data structures (lists) and the math module to calculate the square root. It should be more memory-efficient due to the lack of numpy's overhead and should work given the memory restrictions specified in the problem.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 49, in <module>
    main()
  File "/app/app.py", line 18, in main
    park_dims, gigel_coords, friend_coords, vertical_tracks, horizontal_tracks = read_input('parc.in')
                                                                                 ^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 8, in read_input
    m = int(file.readline())
        ^^^^^^^^^^^^^^^^^^^^
ValueError: invalid literal for int() with base 10: '5 8 \n'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
