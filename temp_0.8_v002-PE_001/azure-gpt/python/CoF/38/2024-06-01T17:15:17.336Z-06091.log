---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# parc.py

import numpy as np

def read_input(filename):
    with open(filename, 'r') as file:
        Xparc, Yparc = map(int, file.readline().split())
        xG, yG, xpr, ypr = map(int, file.readline().split())
        m = int(file.readline().strip())
        vertical_tracks = [tuple(map(int, file.readline().split())) for _ in range(m)]
        n = int(file.readline().strip())
        horizontal_tracks = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks

def write_output(filename, shortest_length, distinct_paths):
    with open(filename, 'w') as file:
        file.write(f"{shortest_length:.9f}\n")
        file.write(f"{distinct_paths}\n")

def solve(Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks):
    # Sort the tracks for easy processing
    vertical_tracks.sort(key=lambda x: x[0])
    horizontal_tracks.sort(key=lambda x: x[0])

    # Initialize the DP grid
    dp = np.zeros((Xparc + 1, Yparc + 1), dtype=np.uint64)
    dp[xG, yG] = 1

    # Populate the grid with the number of distinct paths
    for x in range(xG + 1, Xparc + 1):
        for y in range(yG + 1, Yparc + 1):
            if not any(lx <= x <= rx for lx, rx in vertical_tracks) and \
               not any(ly <= y <= ry for ly, ry in horizontal_tracks):
                dp[x, y] = dp[x - 1, y] + dp[x, y - 1]

    distinct_paths = dp[xpr, ypr]

    # Calculate the shortest length
    x_dist = xpr - xG
    y_dist = ypr - yG
    shortest_length = np.sqrt(x_dist**2 + y_dist**2)

    return shortest_length, distinct_paths

def main():
    Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks = read_input('parc.in')
    shortest_length, distinct_paths = solve(Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks)
    write_output('parc.out', shortest_length, distinct_paths)

if __name__ == "__main__":
    main()
```

The above Python solution reads the input from `parc.in`, computes the shortest path and the number of distinct shortest paths, and then writes the output to `parc.out`. It uses `numpy` to optimize memory usage and speed up the process. The dynamic programming grid is initialized as a 2D NumPy array of unsigned 64-bit integers which is suitable for the problem constraints and helps to keep memory usage low.

Please note that this code should be run in an environment with the NumPy library installed and with sufficient memory to accommodate the dynamic programming grid.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 3, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message `ModuleNotFoundError: No module named 'numpy'` indicates that the NumPy library, which the program relies on, is not installed in the execution environment.

However, since we have a memory constraint and we need to optimize for both time and memory usage, using NumPy may not be the best approach. Instead, we can solve the problem without using additional libraries that may not be installed or might use more memory than allowed.

Here is a rewritten solution without NumPy and any external libraries, optimizing memory usage:

```python
# parc.py

def read_input(filename):
    with open(filename, 'r') as file:
        Xparc, Yparc = map(int, file.readline().split())
        xG, yG, xpr, ypr = map(int, file.readline().split())
        m = int(file.readline().strip())
        vertical_tracks = [tuple(map(int, file.readline().split())) for _ in range(m)]
        n = int(file.readline().strip())
        horizontal_tracks = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks

def write_output(filename, shortest_length, distinct_paths):
    with open(filename, 'w') as file:
        file.write(f"{shortest_length:.9f}\n")
        file.write(f"{distinct_paths}\n")

def calculate_distance(x1, y1, x2, y2):
    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5

def solve(Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks):
    # Calculate the shortest path length (straight line)
    shortest_length = calculate_distance(xG, yG, xpr, ypr)

    # Initialize the DP grid
    dp = [[0] * (Yparc + 1) for _ in range(Xparc + 1)]
    dp[xG][yG] = 1

    # Populate the grid with the number of distinct paths
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if not any(lx <= x <= rx for lx, rx in vertical_tracks) and \
               not any(ly <= y <= ry for ly, ry in horizontal_tracks):
                if x > xG:
                    dp[x][y] += dp[x - 1][y]
                if y > yG:
                    dp[x][y] += dp[x][y - 1]

    distinct_paths = dp[xpr][ypr]

    return shortest_length, distinct_paths

def main():
    Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks = read_input('parc.in')
    shortest_length, distinct_paths = solve(Xparc, Yparc, xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks)
    write_output('parc.out', shortest_length, distinct_paths)

if __name__ == "__main__":
    main()
```

This version of the solution uses only built-in Python features and should not encounter the ModuleNotFoundError issue. It uses a 2D list for dynamic programming (DP) to calculate the number of distinct paths, and it calculates the shortest path length using the straight-line distance between the two points.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
9.219544457
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
