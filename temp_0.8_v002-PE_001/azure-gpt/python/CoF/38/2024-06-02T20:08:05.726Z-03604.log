---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Define a function to calculate the minimum distance using Manhattan distance
def manhattan_distance(x1, y1, x2, y2):
    return abs(x1 - x2) + abs(y1 - y2)

# Read data from file
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    vertical_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline())
    horizontal_bike_paths = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Process vertical and horizontal bike paths
vertical_bike_paths.sort()
horizontal_bike_paths.sort()

# Initialize grid with manhattan distances from Gigel's position
grid = np.zeros((Xparc + 1, Yparc + 1), dtype=int)
for i in range(Xparc + 1):
    for j in range(Yparc + 1):
        grid[i, j] = manhattan_distance(xG, yG, i, j)

# Mark bike paths in the grid as impassable (with -1)
for x1, x2 in vertical_bike_paths:
    grid[min(x1, x2):max(x1, x2) + 1, :] = -1
for y1, y2 in horizontal_bike_paths:
    grid[:, min(y1, y2):max(y1, y2) + 1] = -1

# Calculate the shortest path using Dynamic Programming
num_paths = np.zeros_like(grid)
num_paths[xG, yG] = 1
for i in range(xG, Xparc + 1):
    for j in range(yG, Yparc + 1):
        if grid[i, j] == -1:
            continue
        if i > 0 and grid[i - 1, j] != -1:
            num_paths[i, j] += num_paths[i - 1, j]
        if j > 0 and grid[i, j - 1] != -1:
            num_paths[i, j] += num_paths[i, j - 1]

# Calculate the minimum distance
min_distance = manhattan_distance(xG, yG, xpr, ypr)

# Get the number of minimum paths
min_paths = num_paths[xpr, ypr]

# Write data to output file
with open('parc.out', 'w') as file:
    file.write(f"{min_distance:.9f}\n")
    file.write(f"{min_paths}\n")
```
```
---------- user ----------


Expected program to write result to `parc.out` and read from `parc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def read_input(file_path):
    with open(file_path, 'r') as file:
        Xparc, Yparc = map(int, file.readline().split())
        xG, yG, xpr, ypr = map(int, file.readline().split())
        m = int(file.readline())
        verticals = [tuple(sorted(map(int, file.readline().split()))) for _ in range(m)]
        n = int(file.readline())
        horizontals = [tuple(sorted(map(int, file.readline().split()))) for _ in range(n)]
    return Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals

def write_output(file_path, distance, paths):
    with open(file_path, 'w') as file:
        file.write(f"{distance:.9f}\n{paths}\n")

def min_path_and_count(Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals):
    # Initialize the grid with zeros
    grid = np.zeros((Yparc + 1, Xparc + 1), dtype=np.int64)
    paths = np.zeros((Yparc + 1, Xparc + 1), dtype=np.int64)
    paths[yG, xG] = 1

    # Block bike paths on the grid
    for x1, x2 in verticals:
        grid[:, x1:x2+1] = -1
    for y1, y2 in horizontals:
        grid[y1:y2+1, :] = -1

    # Iterate over each cell to calculate the number of paths
    for y in range(yG+1, Yparc+1):
        for x in range(xG+1, Xparc+1):
            if grid[y, x] == 0:
                if grid[y-1, x] != -1:
                    paths[y, x] += paths[y-1, x]
                if grid[y, x-1] != -1:
                    paths[y, x] += paths[y, x-1]

    # Calculate the minimum distance using Manhattan distance
    min_distance = abs(xG - xpr) + abs(yG - ypr)

    # Retrieve the number of minimum paths to the destination
    min_paths = paths[ypr, xpr] if paths[ypr, xpr] > 0 else 0

    return min_distance, min_paths

# Main execution
if __name__ == "__main__":
    # Read input and process the data
    Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals = read_input('parc.in')
    min_distance, min_paths = min_path_and_count(Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals)

    # Write output
    write_output('parc.out', min_distance, min_paths)
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the environment where this code is being run does not have the `numpy` library installed. Given the memory constraints and the need to optimize for both time and memory usage, we should avoid using `numpy` and instead use plain Python to solve the problem.

I will rewrite the solution using only built-in Python tools.

```python
# Function to calculate the minimum path distance from Gigel to his friend
def calculate_distance_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals):
    # Initialize the matrix for storing path counts
    paths = [[0] * (Xparc + 1) for _ in range(Yparc + 1)]
    paths[yG][xG] = 1

    # Block the bike paths
    for x1, x2 in verticals:
        for x in range(x1, x2 + 1):
            for y in range(Yparc + 1):
                paths[y][x] = -1
    for y1, y2 in horizontals:
        for y in range(y1, y2 + 1):
            for x in range(Xparc + 1):
                paths[y][x] = -1

    # Fill the matrix with the number of possible paths
    for x in range(Xparc + 1):
        for y in range(Yparc + 1):
            if paths[y][x] >= 0:
                if x > 0 and paths[y][x-1] > 0:
                    paths[y][x] += paths[y][x-1]
                if y > 0 and paths[y-1][x] > 0:
                    paths[y][x] += paths[y-1][x]

    # Calculate the minimum path distance using Manhattan distance
    distance = abs(xG - xpr) + abs(yG - ypr)

    # Get the number of distinct minimum paths to the friend's position
    distinct_paths = paths[ypr][xpr] if paths[ypr][xpr] != -1 else 0

    return distance, distinct_paths

# Read from parc.in
with open('parc.in', 'r') as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline())
    verticals = [tuple(sorted(map(int, file.readline().split()))) for _ in range(m)]
    n = int(file.readline())
    horizontals = [tuple(sorted(map(int, file.readline().split()))) for _ in range(n)]

# Calculate the results
distance, distinct_paths = calculate_distance_and_paths(Xparc, Yparc, xG, yG, xpr, ypr, verticals, horizontals)

# Write to parc.out
with open('parc.out', 'w') as file:
    file.write(f"{distance:.9f}\n{distinct_paths}\n")
```
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.000000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
