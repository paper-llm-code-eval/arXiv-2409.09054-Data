---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Function to calculate the Manhattan distance between two points
def calculate_distance(start, end):
    return abs(start[0] - end[0]) + abs(start[1] - end[1])

# Function to compute the number of distinct shortest paths using dynamic programming
# on a grid accounting for bike lane constraints
def count_paths(grid, start, end):
    mod = 1000000000
    # Initialize a matrix for dynamic programming
    count_matrix = np.zeros(grid.shape, dtype=np.int64)
    count_matrix[start[1], start[0]] = 1  # Starting point

    for x in range(start[0], end[0] + 1):
        for y in range(start[1], end[1] + 1):
            if grid[y, x] == 1:  # If it's a bike lane, continue
                continue
            if x > start[0]:
                count_matrix[y, x] += count_matrix[y, x - 1] % mod
            if y > start[1]:
                count_matrix[y, x] += count_matrix[y - 1, x] % mod

    return count_matrix[end[1], end[0]]

# Read data from file
with open("parc.in", "r") as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_bike_lanes = [list(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_bike_lanes = [list(map(int, file.readline().split())) for _ in range(n)]

# Create grid and mark bike lanes
grid = np.zeros((Yparc + 1, Xparc + 1), dtype=np.int8)
for x1, x2 in vertical_bike_lanes:
    grid[:, min(x1, x2):max(x1, x2) + 1] = 1
for y1, y2 in horizontal_bike_lanes:
    grid[min(y1, y2):max(y1, y2) + 1, :] = 1

# Calculate shortest distance
shortest_distance = calculate_distance((xG, yG), (xpr, ypr))

# Calculate the number of distinct shortest paths
if xG > xpr:
    xG, xpr = xpr, xG
    yG, ypr = ypr, yG
path_count = count_paths(grid, (xG, yG), (xpr, ypr))

# Write the results to the output file
with open("parc.out", "w") as file:
    file.write(f"{shortest_distance:.8f}\n")
    file.write(f"{path_count}\n")
```
```
This solution initializes a grid of the park, marks the bike lanes, calculates the Manhattan distance, and uses dynamic programming to count the number of shortest paths. It reads data from "parc.in" and writes the result to "parc.out". Please be aware that the actual implementation might need some minor adjustments to handle corner cases or optimizations to meet the strict memory limitations.
---------- user ----------


Expected program to write result to `parc.out` and read from `parc.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to calculate the Manhattan distance between two points
def calculate_distance(start, end):
    return abs(start[0] - end[0]) + abs(start[1] - end[1])

# Function to compute the number of distinct shortest paths using dynamic programming
# on a grid accounting for bike lane constraints
def count_paths(grid, start, end, Xparc, Yparc):
    mod = 1000000000
    count_matrix = np.zeros((Yparc + 1, Xparc + 1), np.int64)
    count_matrix[start[1], start[0]] = 1  # Starting point
    
    for x in range(start[0], end[0] + 1):
        for y in range(start[1], end[1] + 1):
            if grid[y, x] == 1:  # If it's a bike lane, continue
                continue
            if x > start[0]:
                count_matrix[y, x] += count_matrix[y, x - 1] % mod
            if y > start[1]:
                count_matrix[y, x] += count_matrix[y - 1, x] % mod

    return count_matrix[end[1], end[0]] % mod

# Function to create grid and mark bike lanes
def create_grid(Xparc, Yparc, vertical_bike_lanes, horizontal_bike_lanes):
    grid = np.zeros((Yparc + 1, Xparc + 1), dtype=np.int8)
    for x1, x2 in vertical_bike_lanes:
        x_low, x_high = sorted((x1, x2))
        grid[:, x_low:x_high+1] = 1
    for y1, y2 in horizontal_bike_lanes:
        y_low, y_high = sorted((y1, y2))
        grid[y_low:y_high+1, :] = 1
    return grid

# Read data from file
with open("parc.in", "r") as file:
    Xparc, Yparc = map(int, file.readline().split())
    xG, yG, xpr, ypr = map(int, file.readline().split())
    m = int(file.readline().strip())
    vertical_bike_lanes = [list(map(int, file.readline().split())) for _ in range(m)]
    n = int(file.readline().strip())
    horizontal_bike_lanes = [list(map(int, file.readline().split())) for _ in range(n)]

# Swap points if necessary to simplify path counting
if xG > xpr:
    xG, xpr = xpr, xG
    yG, ypr = ypr, yG

# Create grid with bike lanes
grid = create_grid(Xparc, Yparc, vertical_bike_lanes, horizontal_bike_lanes)

# Calculate shortest distance
shortest_distance = calculate_distance((xG, yG), (xpr, ypr))

# Calculate the number of distinct shortest paths
path_count = count_paths(grid, (xG, yG), (xpr, ypr), Xparc, Yparc)

# Write the results to the output file
with open("parc.out", "w") as file:
    file.write(f"{shortest_distance:.8f}\n")
    file.write(f"{path_count}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
