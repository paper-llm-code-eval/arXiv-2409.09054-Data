---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read data from file
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_strips = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_strips = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort bike strips to make calculation easier
vertical_strips.sort(key=lambda x: x[0])
horizontal_strips.sort(key=lambda x: x[0])

# Calculate minimal path length using Manhattan distance and adjust for bike paths
min_path_length = abs(xG - xpr) + abs(yG - ypr)
for x1, x2 in vertical_strips:
    if xG <= x1 < xpr or xpr <= x1 < xG:
        min_path_length += 2 * (x2 - x1)
for y1, y2 in horizontal_strips:
    if yG <= y1 < ypr or ypr <= y1 < yG:
        min_path_length += 2 * (y2 - y1)

# Dynamic programming to count the number of minimal paths
def count_paths():
    grid = np.zeros((Xparc + 1, Yparc + 1), dtype=np.int64)
    grid[xG, yG] = 1  # Start position

    for x in range(xG, xpr, 1 if xpr > xG else -1):
        for y in range(yG, ypr, 1 if ypr > yG else -1):
            if not any(x1 <= x < x2 for x1, x2 in vertical_strips) and \
               not any(y1 <= y < y2 for y1, y2 in horizontal_strips):
                grid[x + 1, y] += grid[x, y]
                grid[x, y + 1] += grid[x, y]

    return grid[xpr, ypr]

num_of_min_paths = count_paths()

# Write output to file
with open('parc.out', 'w') as f:
    f.write(f"{min_path_length:.9f}\n")
    f.write(f"{num_of_min_paths}\n")
```

This code attempts to read the input from a file `parc.in`, then processes the data to compute the length of the shortest path and the number of distinct shortest paths, and writes the output to `parc.out`. It uses numpy for efficient array manipulation during the calculation of the number of paths. However, note that due to the constraints of the task (e.g., memory limit), further optimization may be required.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not installed in the environment where the code is being executed. Since the assignment constraints specify a strict memory limit and the necessity of an efficient solution, it's possible that the environment is meant to be minimal, without external libraries like `numpy`.

To address this, I need to remove the dependency on `numpy` and implement the solution using only Python's standard library, while still being mindful of memory usage to avoid exceeding the ~8MB limit. Below is the rewritten solution without `numpy`:

```python
# Read data from file
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_strips = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_strips = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort bike strips to make calculation easier
vertical_strips.sort(key=lambda x: x[0])
horizontal_strips.sort(key=lambda x: x[0])

# Calculate minimal path length using Manhattan distance and adjust for bike paths
min_path_length = abs(xG - xpr) + abs(yG - ypr)
for x1, x2 in vertical_strips:
    if xG <= x1 < xpr or xpr <= x1 < xG:
        min_path_length += 2 * (x2 - x1)
for y1, y2 in horizontal_strips:
    if yG <= y1 < ypr or ypr <= y1 < yG:
        min_path_length += 2 * (y2 - y1)

# Dynamic programming to count the number of minimal paths
def count_paths():
    grid = [[0] * (Yparc + 1) for _ in range(Xparc + 1)]
    grid[xG][yG] = 1  # Start position

    for x in range(Xparc + 1):
        for y in range(Yparc + 1):
            if not any(x1 <= x < x2 for x1, x2 in vertical_strips) and \
               not any(y1 <= y < y2 for y1, y2 in horizontal_strips):
                if x + 1 <= Xparc:
                    grid[x + 1][y] += grid[x][y]
                if y + 1 <= Yparc:
                    grid[x][y + 1] += grid[x][y]

    return grid[xpr][ypr]

num_of_min_paths = count_paths()

# Write output to file
with open('parc.out', 'w') as f:
    f.write(f"{min_path_length:.9f}\n")
    f.write(f"{num_of_min_paths}\n")
```

This solution uses plain Python lists to implement the dynamic programming approach instead of `numpy` arrays. The memory usage should remain lower due to the size of the grid being bounded by the dimensions of the park and the limited number of bike paths. The sorting of bike paths and the calculations for the shortest path and number of distinct minimal paths should also be efficient.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
19.000000000
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
