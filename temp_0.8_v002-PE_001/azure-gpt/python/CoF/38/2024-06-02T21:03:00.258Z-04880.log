---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# markdown code block for the solution
import numpy as np

# Load data from parc.in
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_tracks = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_tracks = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Preprocess bike tracks for efficient searching
vertical_tracks.sort()
horizontal_tracks.sort()

def min_path_length(xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks):
    # Calculate the Manhattan distance as the minimum possible path length
    return abs(xG - xpr) + abs(yG - ypr)

def count_paths(xG, yG, xpr, ypr, Xparc, Yparc, vertical_tracks, horizontal_tracks):
    # Initialize a 2D grid to store the number of paths to each cell
    grid = np.zeros((Xparc + 1, Yparc + 1), dtype=np.int64)
    grid[xG, yG] = 1
    
    # Function to check if a track exists between two x or y coordinates
    def is_track_between(tracks, start, end, coord):
        for track_start, track_end in tracks:
            if start < track_start <= end or start < track_end <= end or (track_start <= start and track_end >= end):
                if coord >= track_start and coord <= track_end:
                    return True
        return False
    
    # Calculate the number of paths from Gigel to each cell
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if x == xG and y == yG:
                continue
            paths_from_left = grid[x-1, y] if x-1 >= 0 and not is_track_between(vertical_tracks, x-1, x, y) else 0
            paths_from_below = grid[x, y-1] if y-1 >= 0 and not is_track_between(horizontal_tracks, y-1, y, x) else 0
            grid[x, y] = (paths_from_left + paths_from_below) % 1_000_000_000
    
    return grid[xpr, ypr]

# Calculate the minimum path length
min_length = min_path_length(xG, yG, xpr, ypr, vertical_tracks, horizontal_tracks)

# Calculate the number of distinct minimum length paths
num_paths = count_paths(xG, yG, xpr, ypr, Xparc, Yparc, vertical_tracks, horizontal_tracks)

# Write data to parc.out
with open('parc.out', 'w') as f:
    # Writing the length with a precision of 2 decimal points to match the constraint.
    f.write(f"{min_length:.2f}\n")
    f.write(f"{num_paths}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since the use of external libraries like numpy is not allowed, we need to refactor the solution to only use built-in Python libraries. Here is the revised solution without numpy:

```python
# markdown code block for the solution
def is_track_between(tracks, start, end, coord):
    return any(start < min(track) <= end or start < max(track) <= end for track in tracks if min(track) <= coord <= max(track))

def count_paths(xG, yG, xpr, ypr, Xparc, Yparc, vertical_tracks, horizontal_tracks):
    # Initialize a 2D grid to store the number of paths to each cell
    grid = [[0] * (Yparc + 1) for _ in range(Xparc + 1)]
    grid[xG][yG] = 1
    
    # Calculate the number of paths from Gigel to each cell
    for x in range(xG, Xparc + 1):
        for y in range(yG, Yparc + 1):
            if x == xG and y == yG:
                continue
            paths_from_left = grid[x-1][y] if x-1 >= 0 and not is_track_between(vertical_tracks, x-1, x, y) else 0
            paths_from_below = grid[x][y-1] if y-1 >= 0 and not is_track_between(horizontal_tracks, y-1, y, x) else 0
            grid[x][y] = (paths_from_left + paths_from_below) % 1_000_000_000
    
    return grid[xpr][ypr]

def min_path_length(xG, yG, xpr, ypr):
    # Calculate the Manhattan distance as the minimum possible path length
    return abs(xG - xpr) + abs(yG - ypr)

# Load data from parc.in
with open('parc.in', 'r') as f:
    Xparc, Yparc = map(int, f.readline().split())
    xG, yG, xpr, ypr = map(int, f.readline().split())
    m = int(f.readline())
    vertical_tracks = [tuple(map(int, f.readline().split())) for _ in range(m)]
    n = int(f.readline())
    horizontal_tracks = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Sort bike tracks for efficient searching
vertical_tracks.sort(key=lambda x: (min(x), max(x)))
horizontal_tracks.sort(key=lambda x: (min(x), max(x)))

# Calculate the minimum path length
min_length = min_path_length(xG, yG, xpr, ypr)

# Calculate the number of distinct minimum length paths
num_paths = count_paths(xG, yG, xpr, ypr, Xparc, Yparc, vertical_tracks, horizontal_tracks)

# Write data to parc.out
with open('parc.out', 'w') as f:
    # Writing the length with a precision of 2 decimal points to match the constraint.
    f.write(f"{min_length:.2f}\n")
    f.write(f"{num_paths}\n")
```
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
13.00
20
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
