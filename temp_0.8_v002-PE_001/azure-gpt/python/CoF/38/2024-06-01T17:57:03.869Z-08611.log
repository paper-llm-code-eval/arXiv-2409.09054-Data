---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient solution for the park problem in Python, using NumPy and other optimized libraries.
import numpy as np

# Read the input from the file parc.in
with open('parc.in', 'r') as infile:
    Xparc, Yparc = map(int, infile.readline().split())
    xG, yG, xpr, ypr = map(int, infile.readline().split())
    m = int(infile.readline().strip())
    vertical_bike_paths = [list(map(int, infile.readline().split())) for _ in range(m)]
    n = int(infile.readline().strip())
    horizontal_bike_paths = [list(map(int, infile.readline().split())) for _ in range(n)]

# Function to find the shortest path and count of distinct shortest paths
def find_shortest_path_and_count(Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths):
    # Calculate the shortest path length as a Manhattan distance
    shortest_path_length = abs(xG - xpr) + abs(yG - ypr)
    for x1, x2 in vertical_bike_paths:
        if min(x1, x2) <= xG <= max(x1, x2) or min(x1, x2) <= xpr <= max(x1, x2):
            shortest_path_length += 2 * (max(x1, x2) - min(x1, x2))
    for y1, y2 in horizontal_bike_paths:
        if min(y1, y2) <= yG <= max(y1, y2) or min(y1, y2) <= ypr <= max(y1, y2):
            shortest_path_length += 2 * (max(y1, y2) - min(y1, y2))

    # Calculate the number of distinct shortest paths using combinatorics
    x_dist = abs(xG - xpr)
    y_dist = abs(yG - ypr)
    total_steps = x_dist + y_dist
    path_count = np.math.factorial(total_steps) // (np.math.factorial(x_dist) * np.math.factorial(y_dist))

    return shortest_path_length, path_count

# Calculate the shortest path length and the number of distinct shortest paths
shortest_path_length, path_count = find_shortest_path_and_count(Xparc, Yparc, xG, yG, xpr, ypr, vertical_bike_paths, horizontal_bike_paths)

# Write the output to the file parc.out
with open('parc.out', 'w') as outfile:
    outfile.write(f"{shortest_path_length:.9f}\n{path_count}\n")
```

Note: This code is a prototype and assumes that the bike paths do not overlap or intersect in a way that requires additional logic for the visitor to navigate. If such cases are possible, the problem becomes significantly more complex and would require additional data structures and algorithms to solve, potentially including graph traversal algorithms like A* or Dijkstra's Algorithm.

---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

As per the error message, the NumPy module was not found which indicates it is not installed or not available in the current environment. Given the constraints of the challenge, it's important to note that we must not rely on external libraries such as NumPy, and we should only use standard Python libraries to solve the problem.

In the updated solution, I will avoid using NumPy and will instead use built-in Python functions to calculate the factorial for the number of distinct shortest paths.

Here is the revised solution in a markdown code block:

```python
# Efficient solution for the park problem in Python, using standard libraries.
from math import factorial as fact

# Function to calculate the number of distinct paths using combinatorics
def count_paths(x_diff, y_diff):
    return fact(x_diff + y_diff) // (fact(x_diff) * fact(y_diff))

# Read the input from the file parc.in
with open('parc.in', 'r') as infile:
    Xparc, Yparc = map(int, infile.readline().split())
    xG, yG, xpr, ypr = map(int, infile.readline().split())
    m = int(infile.readline().strip())
    v_bike_paths = [tuple(map(int, infile.readline().split())) for _ in range(m)]
    n = int(infile.readline().strip())
    h_bike_paths = [tuple(map(int, infile.readline().split())) for _ in range(n)]

# Calculate the shortest path as the Manhattan distance
shortest_path_length = abs(xG - xpr) + abs(yG - ypr)

# Adjust the length for bike paths crossed
for x1, x2 in v_bike_paths:
    if (x1 <= xG <= x2 or x2 <= xG <= x1) and not (x1 <= xpr <= x2 or x2 <= xpr <= x1):
        shortest_path_length += 2 * abs(x2 - x1)
for y1, y2 in h_bike_paths:
    if (y1 <= yG <= y2 or y2 <= yG <= y1) and not (y1 <= ypr <= y2 or y2 <= ypr <= y1):
        shortest_path_length += 2 * abs(y2 - y1)

# Calculate the number of distinct paths
x_diff = abs(xpr - xG)
y_diff = abs(ypr - yG)
distinct_paths = count_paths(x_diff, y_diff)

# Write the output to the file parc.out
with open('parc.out', 'w') as outfile:
    outfile.write(f"{shortest_path_length:.9f}\n{distinct_paths}\n")
```

This solution should meet the memory and time efficiency requirements, as it uses only basic arithmetic operations and combinatorial logic, avoiding any heavy data structures or libraries. It also appropriately writes the output to a file without using `input()` or `print()`.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```
Expected output:
```
11.472136
1
```
Found output:
```
15.000000000
1716
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
