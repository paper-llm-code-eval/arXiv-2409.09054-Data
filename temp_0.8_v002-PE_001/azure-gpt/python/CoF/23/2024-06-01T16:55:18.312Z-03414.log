---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `galeti.in` and write to `galeti.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem `n` găleți, numerotate de la stânga la dreapta cu numere de la `1` la `n`. Fiecare găleată conține inițial `1` litru de apă. Capacitatea fiecărei găleți este nelimitată. Vărsăm gălețile una în alta, respectând o anumită regulă, până când toată apa ajunge în prima găleată din stânga. Vărsarea unei găleți presupune un anumit efort.

Regula după care se răstoarnă gălețile este următoarea: se aleg două găleți astfel încât orice găleată situată între ele să fie goală. Se varsă apa din găleata din dreapta în găleata din stânga. Efortul depus este egal cu volumul de apă din găleata din dreapta ( cea care se varsă).

Formal, dacă notăm ai volumul de apă conținut în găleata cu numărul `i`, regula de vărsare a acestei găleți în găleata cu numărul `j` poate fi descrisă astfel:
1. `j<i`
2. $a_k=0$ pentru orice `k` astfel încât `j<k<i`
3. efortul depus este $a_i$
4. după vărsare $a_j=a_j+a_i$ și $a_i=0$

# Cerinţe
Cunoscând numărul de găleți `n` și un număr natural `e`, să se determine o succesiune de vărsări în urma căreia toată apa ajunge în găleata cea mai din stânga și efortul total depus este **exact** `e`.

# Date de intrare
Fișierul de intrare `galeti.in` conține pe prima linie două numere naturale, `n` și `e`, în această ordine, separate prin spațiu. Primul număr `n` reprezintă numărul de găleți. Al doilea număr `e` reprezintă efortul care trebuie depus pentru a vărsa toată apa în găleata din stânga.

# Date de ieşire
Fișierul de ieșire `galeti.out` trebuie să conțină `n-1` linii care descriu vărsările, în ordinea în care acestea se efectuează, pentru a vărsa toată apa în găleata din stânga cu efortul total `e`. Fiecare dintre aceste linii trebuie să conțină două numere `i` și `j`, separate prin spațiu, cu semnificația că apa din găleata cu numărul `i` se varsă în găleata cu numărul `j`.

# Restricţii și precizări
* `1 ≤ n ≤ 100 000`
* `1 ≤ e ≤ 5 000 000 000`
* Se asigură că pentru datele de test există cel puțin o soluție posibilă,
* Dacă există mai multe soluții se poate afișa oricare dintre acestea.
* Punctajul maxim al problemei este de `100` de puncte dintre care `10` puncte din oficiu.
* Pentru teste in valoare de `18` puncte datele de intrare sunt cunoscute. Mai precis:
Testul 0 : `n = 91, e = 90`
Testul 1 : `n = 30, e = 435`
Testul 2 : `n = 7, e = 16`
* Pentru alte teste in valoare de `15` puncte `n≤9`.

---

Example:
`galeti.in`
```
4 4
```

`galeti.out`
```
2 1
4 3
3 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the input file
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the array representing the buckets
buckets = np.ones(n, dtype=np.int64)

# List to store the pouring operations
operations = []

# Function to simulate the pouring operation
def pour(i, j):
    global e
    operations.append((i, j))
    buckets[j-1] += buckets[i-1]
    e -= buckets[i-1]
    buckets[i-1] = 0

# Main logic to find the sequence of pouring operations
if n == 1:
    pour(1, 1)  # If there's only one bucket, pour into itself
else:
    # Start from the rightmost bucket and work backwards
    for i in range(n, 1, -1):
        # Find the bucket to pour into
        j = i - 1
        while j > 0 and buckets[j-1] == 0:
            j -= 1
        # Pour into the leftmost non-empty bucket
        if j > 0:
            pour(i, j)
        # If the leftmost bucket is empty, pour into the first bucket
        else:
            pour(i, 1)
        # If the effort has already been reached, stop the process
        if e <= 0:
            break

# Check if the required effort is reached
if e != 0:
    with open('galeti.out', 'w') as file:
        file.write("impossible\n")
else:
    # Write the output file
    with open('galeti.out', 'w') as file:
        for op in operations:
            file.write(f"{op[0]} {op[1]}\n")
```
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to perform the pouring and record the operations
def pour(from_bucket, to_bucket, volume):
    operations.append((from_bucket, to_bucket))
    buckets[to_bucket - 1] += volume
    buckets[from_bucket - 1] = 0

# Read the input file
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the array representing the buckets
buckets = np.ones(n, dtype=np.int64)

# List to store the pouring operations
operations = []

# Calculate the sequence of pourings
current_bucket = n

while e > 0 and current_bucket > 1:
    next_bucket = current_bucket - 1

    # Find the closest non-empty bucket to the left
    while next_bucket > 0 and buckets[next_bucket - 1] == 0:
        next_bucket -= 1

    if next_bucket == 0:
        # No non-empty buckets to the left, pour directly into the first bucket
        next_bucket = 1

    # Calculate the effort for this pouring
    effort = buckets[current_bucket - 1] * (current_bucket - next_bucket)

    # If the effort exceeds the remaining effort, we need to split the water
    if effort > e:
        # Calculate the amount of water to pour to match the exact effort
        amount_to_pour = e // (current_bucket - next_bucket)
        # Pour the calculated amount
        pour(current_bucket, next_bucket, amount_to_pour)
        e -= amount_to_pour * (current_bucket - next_bucket)
    else:
        # Pour all water from the current bucket
        pour(current_bucket, next_bucket, buckets[current_bucket - 1])
        e -= effort

    # Move to the next bucket
    current_bucket -= 1

# Check if the exact effort was reached
if e != 0:
    with open('galeti.out', 'w') as file:
        file.write("imposibil\n")
else:
    # Write the pouring operations to the output file
    with open('galeti.out', 'w') as file:
        for op in operations:
            file.write(f"{op[0]} {op[1]}\n")
```
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def find_pouring_order(buckets, effort):
    operations = []
    total_water = buckets

    # Work backwards from the last bucket
    for i in range(buckets, 0, -1):
        if effort >= i - 1:
            # Pour bucket i into bucket 1
            operations.append((i, 1))
            effort -= i - 1
        else:
            # Pour bucket i into a bucket that makes up the remaining effort
            operations.append((i, i - effort))
            break  # The effort is now zero and we are done

    return operations if effort == 0 else None

# Read from galeti.in
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Process the buckets and effort
operations = find_pouring_order(n, e)

# Write to galeti.out
with open('galeti.out', 'w') as file:
    if operations is None:
        file.write('imposibil\n')
    else:
        for op in operations:
            file.write(f'{op[0]} {op[1]}\n')
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read from galeti.in
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the list to store operations
operations = []

# Find the sequence of pourings
for i in range(n, 0, -1):
    if i == n:
        # Skip the last bucket as it can't be poured into another bucket
        continue
    # Calculate the amount of effort needed to pour from bucket i to i+1
    effort_needed = (n - i) * 1
    if e >= effort_needed:
        # Record the operation
        operations.append((i, i + 1))
        # Subtract the effort
        e -= effort_needed
    else:
        # If we don't have enough effort, pour into the bucket that will exactly
        # use the remaining effort (e.g., if e is 1, pour into bucket n-1)
        operations.append((i, n - e))
        e = 0
        break

# Check if the exact amount of effort was used
if e != 0:
    operations.clear()  # Not possible to use the exact amount of effort

# Write to galeti.out
with open('galeti.out', 'w') as file:
    if not operations:
        file.write('imposibil\n')
    else:
        for op in operations:
            file.write(f'{op[0]} {op[1]}\n')
```
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to recursively find a solution
def pour_buckets(n, e, current, operations):
    if current == 1:
        # If we reach the first bucket, we're done
        if e == 0:
            return True
        else:
            return False
    elif e < current - 1:
        # Not enough effort to move the current bucket to the first one
        return False
    else:
        # Try to pour the current bucket into the first one
        if pour_buckets(n, e - (current - 1), current - 1, operations):
            operations.append((current, 1))
            return True
        # Try to pour the current bucket into each other bucket to the left
        for j in range(current - 1, 0, -1):
            if e >= (current - j):
                if pour_buckets(n, e - (current - j), j, operations):
                    operations.append((current, j))
                    return True
    return False

# Read the input file
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the list to store the operations
operations = []

# Call the function to find a solution
has_solution = pour_buckets(n, e, n, operations)

# Write the output file
with open('galeti.out', 'w') as file:
    if not has_solution:
        file.write('imposibil\n')
    else:
        for i, j in reversed(operations):
            file.write(f'{i} {j}\n')
```
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to perform the pouring operations
def pour_water(n, e, buckets):
    # Starting from the second bucket, pour the water into the first bucket
    # until all the water is in the first bucket or we run out of effort
    for i in range(2, n + 1):
        if e <= 0:
            break  # Stop if we have no effort left
        # Calculate the effort for pouring from the current bucket to the first bucket
        curr_effort = (i - 1) * buckets[i - 1]
        if curr_effort <= e:
            # If we have enough effort, pour all water from the current bucket
            operations.append((i, 1))
            e -= curr_effort
        else:
            # If we don't have enough effort, pour as much as we can
            partial_pour = e // (i - 1)
            if partial_pour > 0:
                buckets[0] += partial_pour
                buckets[i - 1] -= partial_pour
                operations.append((i, 1))
                e -= partial_pour * (i - 1)
            break  # We can't pour any more water

    return e == 0  # Return True if we've used exactly 'e' effort

# Read the input file
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the buckets with 1 liter of water each
buckets = [1] * n

# List to store the pouring operations
operations = []

# Attempt to pour the water with the given effort
success = pour_water(n, e, buckets)

# Write the output file
with open('galeti.out', 'w') as file:
    if not success:
        file.write('imposibil\n')
    else:
        for op in operations:
            file.write(f'{op[0]} {op[1]}\n')
```
```
---------- user ----------


Expected program to write result to `galeti.out` and read from `galeti.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input file
with open('galeti.in', 'r') as file:
    n, e = map(int, file.readline().split())

# Initialize the list to store operations
operations = []

# Calculate the sequence of pourings
current_bucket = n
while e > 0 and current_bucket > 1:
    if e >= current_bucket - 1:
        operations.append((current_bucket, 1))
        e -= current_bucket - 1
        current_bucket -= 1
    else:
        operations.append((current_bucket, current_bucket - e))
        e = 0

# Reverse the list to start pouring from the rightmost bucket
operations.reverse()

# Write to galeti.out
with open('galeti.out', 'w') as file:
    if e == 0:
        for op in operations:
            file.write(f'{op[0]} {op[1]}\n')
    else:
        file.write('imposibil\n')
```
```
