{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/45/2024-06-01T17:30:17.321Z-05758.log",
  "attemptStart": 1717263017.321,
  "attemptEnd": 1717263045.876,
  "attemptDuration": 28.554999828338623,
  "code": "MOD = 30011\n\n# Read input data\nwith open('iepuri.in', 'r') as file:\n    N, K = map(int, file.readline().split())\n    edges = [tuple(map(int, line.split())) for line in file.readlines()]\n\n# Initialize a tree structure using adjacency list representation\ntree = [[] for _ in range(N + 1)]\nfor a, b in edges:\n    tree[a].append(b)\n\n# Initialize dp array to store number of ways given a number of carrots and a node\ndp = [[0 for _ in range(K + 1)] for _ in range(N + 1)]\nfor i in range(N + 1):\n    dp[i][0] = 1  # Base case, 0 carrots can be distributed in 1 way\n\n# Recursive function to fill dp array\ndef dfs(node):\n    # Leaf nodes can have any number between 1 and K carrots\n    if not tree[node]:\n        for carrots in range(1, K + 1):\n            dp[node][carrots] = 1\n        return\n\n    # Fill dp for children first\n    for child in tree[node]:\n        dfs(child)\n    \n    # Calculate the dp for the current node based on its children\n    for carrots_node in range(1, K + 1):\n        ways = 1\n        for child in tree[node]:\n            sum_ways = sum(dp[child][carrots_child] for carrots_child in range(carrots_node + 1, K + 1))\n            ways *= sum_ways\n            ways %= MOD\n        dp[node][carrots_node] = ways\n\n# Find the root node (node with no parent)\nroot = 1\nparent = [0] * (N + 1)\nfor a, b in edges:\n    parent[b] = a\nwhile parent[root]:\n    root = parent[root]\n\n# Start DFS traversal from the root\ndfs(root)\n\n# Write the output\nwith open('iepuri.out', 'w') as file:\n    # The answer is the sum of ways for the root node having 1 to K carrots\n    result = sum(dp[root][carrots] for carrots in range(1, K + 1)) % MOD\n    file.write(str(result))\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1960,
  "metadata": {
    "id": 45,
    "examples": [
      {
        "in": "9 4\n7 2\n7 3\n7 4\n3 5\n3 6\n5 8\n5 9\n6 1",
        "out": "9",
        "explainer": ""
      }
    ],
    "body": "Un gospodar are $N$ iepuri (pe care i-a numerotat de la $1$ la $N$) şi foarte mulţi morcovi. Ce e mai deosebit în această gospodărie este că iepurii sunt organizaţi ierarhic, în funcţie de vârstă, autoritate şi nevoile nutriţionale. Astfel, fiecare iepure are exact un şef direct (exceptându-l pe Rilă Iepurilă, care este şeful cel mare, şeful tuturor iepurilor). Orice iepure poate avea 0, 1 sau mai mulţi subordonaţi direcţi. Orice iepure-şef va mânca cel puţin un morcov mai puţin decât fiecare dintre subordonaţii săi direcţi.\n\nGospodarul nu se poate hotărî câţi morcovi să dea fiecărui iepure şi ar vrea să ştie în câte moduri poate împărţi morcovi la iepuri ştiind că fiecare iepure poate să mănânce minim un morcov şi maxim $K$ morcovi.\n\n# Cerinţă\nScrieţi un program care calculează numărul de posibilităţi modulo $30 \\ 011$ de a împărţi morcovi la cei $N$ iepuri ştiind că orice iepure poate mânca între $1$ şi $K$ morcovi şi trebuie să mănânce cu cel puţin un morcov mai puţin decât fiecare dintre iepurii care îi sunt subordonaţi direcţi. \n\n# Date de intrare\nFişierul de intrare `iepuri.in` conţine: \n- pe prima linie două numere naturale $N$ şi $K$, separate printr-un spaţiu, reprezentând numărul de iepuri, respectiv numărul maxim de morcovi ce pot fi mâncaţi de un iepure.\n- pe fiecare din următoarele $N-1$ linii se află câte două numere naturale distincte $a$ şi $b$, cuprinse între $1$ şi $N$, separate printr-un spaţiu, cu semnificaţia că iepurele $a$ este şeful direct al iepurelui $b$.\n\n# Date de ieşire\nFişierul  de ieşiere `iepuri.out` va conţine numărul de moduri de a împărţi morcovii conform condiţiilor specificate în enunţ, modulo $30 \\ 011$.\n\n# Restricţii şi precizări\n* $1 ≤ N, K ≤ 100$\n* Numărul ce trebuie scris în fişierul de ieşire va fi afişat modulo $30 \\ 011$.",
    "header": {
      "problem_id": 45,
      "problem_name": "iepuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.02,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "iepuri.in",
      "output_filename": "iepuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2008 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "iepuri.in",
      "output": "iepuri.out"
    },
    "consoleInteraction": false
  }
}