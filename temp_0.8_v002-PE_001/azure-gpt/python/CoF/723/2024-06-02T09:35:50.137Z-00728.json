{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/723/2024-06-02T09:35:50.137Z-00728.log",
  "attemptStart": 1717320950.137,
  "attemptEnd": 1717320975.793,
  "attemptDuration": 25.655999898910522,
  "code": "from collections import defaultdict\nfrom math import prod, isqrt\n\n# Efficient prime factorization function\ndef prime_factors(n):\n    factors = defaultdict(int)\n    # Count the number of 2s\n    while n % 2 == 0:\n        factors[2] += 1\n        n //= 2\n    # n must be odd at this point, skip even numbers\n    for i in range(3, isqrt(n) + 1, 2):\n        while n % i == 0:\n            factors[i] += 1\n            n //= i\n    # If n is a prime number greater than 2\n    if n > 2:\n        factors[n] += 1\n    return factors\n\n# Function to check if a number is a perfect power\ndef is_perfect_power(x, m):\n    root = int(round(x**(1/m)))\n    return root**m == x\n\n# Reading from expresie.in\nwith open('expresie.in', 'r') as fin:\n    m = int(fin.readline().strip())\n    n = int(fin.readline().strip())\n    x = list(map(int, fin.readline().strip().split()))\n\n# Calculating the product\nproduct = prod(x)\n\n# Checking if the product is a perfect m-th power\nif is_perfect_power(product, m):\n    root = int(product ** (1/m))\n    factors = prime_factors(root)\n    # Writing to expresie.out\n    with open('expresie.out', 'w') as fout:\n        fout.write('1\\n')\n        for factor in sorted(factors):\n            fout.write(f'{factor} {factors[factor]}\\n')\nelse:\n    with open('expresie.out', 'w') as fout:\n        fout.write('0\\n')\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1552,
  "metadata": {
    "id": 723,
    "examples": [
      {
        "in": "2\n4\n32 81 100 19",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2\n4\n32 81 100 18",
        "out": "1\n2 4\n3 3\n5 1",
        "explainer": ""
      }
    ],
    "body": "Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \\dots, x_n$ și un număr natural $m$.\n\n# Cerință\nSă se verifice dacă valoarea expresiei $\\sqrt[m]{x_1 x_2 x_3 \\dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.\n\n# Date de intrare\nÎn fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\\dots$, $x_n$ separate între ele prin câte un spațiu.\n\n# Date de ieșire\nÎn fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. \nDacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma \"$p\\ e$\" ($p$ este factor prim care apare în descompunere la puterea $e \\geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).\n\n# Restricții\n- $n$ este un număr natural nenul mai mic strict decât $5\\ 000$.\n- $x_i$ este un număr natural nenul mai mic strict decât $30\\ 000$, $i \\in \\{1, 2, \\dots, n\\}$.\n- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**",
    "header": {
      "problem_id": 723,
      "problem_name": "expresie",
      "tags": "[Divisibility]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.04,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "expresie.in",
      "output_filename": "expresie.out",
      "multiple_solutions": false,
      "original_source": "OJI 2004 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "expresie.in",
      "output": "expresie.out"
    },
    "consoleInteraction": false
  }
}