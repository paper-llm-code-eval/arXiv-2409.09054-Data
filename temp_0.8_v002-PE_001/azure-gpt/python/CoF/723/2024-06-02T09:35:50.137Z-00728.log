---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np
from collections import defaultdict
from sympy import isprime

# Efficient prime factorization function
def prime_factors(n):
    factors = defaultdict(int)
    # Count the number of 2s
    while n % 2 == 0:
        factors[2] += 1
        n //= 2
    # n must be odd at this point, skip even numbers
    for i in range(3, int(np.sqrt(n)) + 1, 2):
        while n % i == 0:
            factors[i] += 1
            n //= i
    # If n is a prime number greater than 2
    if n > 2:
        factors[n] += 1
    return factors

# Reading from expresie.in
with open('expresie.in', 'r') as fin:
    m = int(fin.readline().strip())
    n = int(fin.readline().strip())
    x = np.array(fin.readline().strip().split(), dtype=np.int64)

# Calculating the product and its m-th root
product = np.prod(x)
root = product**(1/m)

# Checking if the m-th root is a natural number
if root.is_integer():
    root = int(root)
    factors = prime_factors(root)
    # Writing to expresie.out
    with open('expresie.out', 'w') as fout:
        fout.write('1\n')
        for factor, power in sorted(factors.items()):
            fout.write(f'{factor} {power}\n')
else:
    with open('expresie.out', 'w') as fout:
        fout.write('0\n')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the environment in which the program is running does not have the `numpy` module installed. Given that we have a memory limit and that we cannot assume that any specific third-party library is available, we should rewrite the solution without using `numpy` or any other external libraries that aren't available in the standard Python library.

Here's the updated program without using `numpy` or `sympy`:

```python
from collections import defaultdict
from math import prod, isqrt

# Efficient prime factorization function
def prime_factors(n):
    factors = defaultdict(int)
    # Count the number of 2s
    while n % 2 == 0:
        factors[2] += 1
        n //= 2
    # n must be odd at this point, skip even numbers
    for i in range(3, isqrt(n) + 1, 2):
        while n % i == 0:
            factors[i] += 1
            n //= i
    # If n is a prime number greater than 2
    if n > 2:
        factors[n] += 1
    return factors

# Function to check if a number is a perfect power
def is_perfect_power(x, m):
    root = int(round(x**(1/m)))
    return root**m == x

# Reading from expresie.in
with open('expresie.in', 'r') as fin:
    m = int(fin.readline().strip())
    n = int(fin.readline().strip())
    x = list(map(int, fin.readline().strip().split()))

# Calculating the product
product = prod(x)

# Checking if the product is a perfect m-th power
if is_perfect_power(product, m):
    root = int(product ** (1/m))
    factors = prime_factors(root)
    # Writing to expresie.out
    with open('expresie.out', 'w') as fout:
        fout.write('1\n')
        for factor in sorted(factors):
            fout.write(f'{factor} {factors[factor]}\n')
else:
    with open('expresie.out', 'w') as fout:
        fout.write('0\n')
```
