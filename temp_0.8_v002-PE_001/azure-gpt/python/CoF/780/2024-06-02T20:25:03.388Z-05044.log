---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def fill_rectangle(grid, x1, y1, x2, y2):
    grid[x1:x2, y1:y2] = 1

def find_white_regions(grid):
    regions = 0
    m, p = grid.shape
    for x in range(m):
        for y in range(p):
            if grid[x, y] == 0:
                dfs(grid, x, y, m, p)
                regions += 1
    return regions

def dfs(grid, x, y, m, p):
    if x < 0 or x >= m or y < 0 or y >= p or grid[x, y] != 0:
        return
    grid[x, y] = 2
    dfs(grid, x+1, y, m, p)
    dfs(grid, x-1, y, m, p)
    dfs(grid, x, y+1, m, p)
    dfs(grid, x, y-1, m, p)

def main():
    with open('colaj.in', 'r') as file:
        n = int(file.readline().strip())
        m, p = map(int, file.readline().split())
        rectangles = [tuple(map(int, file.readline().split())) for _ in range(n)]

    # Create a grid of size m x p, initialize with zeros (white)
    grid = np.zeros((m, p), dtype=np.uint8)

    # Fill rectangles (black) in the grid
    for x1, y1, x2, y2 in rectangles:
        fill_rectangle(grid, x1, y1, x2, y2)

    # Find white regions
    white_regions = find_white_regions(grid)

    with open('colaj.out', 'w') as file:
        file.write(str(white_regions))

if __name__ == '__main__':
    main()
```

Please note that this code is written assuming a file called `colaj.in` exists in the same directory from which this Python script is executed, and it will output the results to `colaj.out` in the same directory. The file should be formatted as specified in the problem statement. The `numpy` library is used for creating and manipulating the grid, but the DFS function operates on the numpy array without creating additional arrays that would significantly increase memory usage. The grid is assumed to have integer coordinates starting from 0 up to m-1 and p-1 (zero-indexed), which is common in programming and different from the one-based indexing in the problem description. Adjustments to the coordinates are made if necessary.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the current environment where the code is being executed. Since the problem requires optimizing for both time and memory, and the memory limit is ~8MB, it's actually better to avoid using `numpy` or any other third-party libraries that may not be available or may consume extra memory.

Let's rewrite the solution without `numpy`, using only built-in Python data structures. I'll use a list of lists to represent the grid and implement the depth-first search (DFS) manually to find the white regions.

Here's the complete rewritten solution:

```python
def fill_rectangle(grid, x1, y1, x2, y2):
    for x in range(x1, x2):
        for y in range(y1, y2):
            grid[x][y] = 1

def find_white_regions(grid):
    regions = 0
    m, p = len(grid), len(grid[0])
    for x in range(m):
        for y in range(p):
            if grid[x][y] == 0:
                dfs(grid, x, y, m, p)
                regions += 1
    return regions

def dfs(grid, x, y, m, p):
    if x < 0 or x >= m or y < 0 or y >= p or grid[x][y] != 0:
        return
    grid[x][y] = 2  # Mark visited
    dfs(grid, x+1, y, m, p)
    dfs(grid, x-1, y, m, p)
    dfs(grid, x, y+1, m, p)
    dfs(grid, x, y-1, m, p)

def main():
    with open('colaj.in', 'r') as file:
        n = int(file.readline().strip())
        m, p = map(int, file.readline().split())
        rectangles = [tuple(map(int, file.readline().split())) for _ in range(n)]

    # Create a grid of size m x p, initialize with zeros (white)
    grid = [[0 for _ in range(p)] for _ in range(m)]

    # Fill rectangles (black) in the grid
    for a, b, c, d in rectangles:
        fill_rectangle(grid, a, b, c, d)

    # Find white regions
    white_regions = find_white_regions(grid)

    with open('colaj.out', 'w') as file:
        file.write(str(white_regions))

if __name__ == '__main__':
    main()
```

This solution uses only built-in Python features and should work within the memory constraints provided. It reads from `colaj.in` and writes to `colaj.out` as required, and does not use `numpy` or any other external libraries.
