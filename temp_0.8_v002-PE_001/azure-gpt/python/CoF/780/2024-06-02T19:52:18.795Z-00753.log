---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def mark_rectangle(grid, x1, y1, x2, y2):
    grid[x1:x2, y1:y2] = 1

def find_white_areas(grid):
    visited = np.zeros_like(grid, dtype=bool)
    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    m, p = grid.shape
    white_areas = 0

    def dfs(x, y):
        if visited[x, y] or grid[x, y] == 1:
            return
        visited[x, y] = True
        for dx, dy in directions:
            if 0 <= x + dx < m and 0 <= y + dy < p:
                dfs(x + dx, y + dy)

    for i in range(m):
        for j in range(p):
            if grid[i, j] == 0 and not visited[i, j]:
                white_areas += 1
                dfs(i, j)

    return white_areas

# Read input data
with open('colaj.in', 'r') as file:
    n = int(file.readline().strip())
    m, p = map(int, file.readline().strip().split())
    rectangles = [tuple(map(int, file.readline().strip().split())) for _ in range(n)]

# Initialize a grid with all white spaces
grid = np.zeros((m, p), dtype=np.int8)

# Mark the black rectangles on the grid
for x1, y1, x2, y2 in rectangles:
    mark_rectangle(grid, x1, y1, x2, y2)

# Find the number of continuous maximal white areas
white_areas_count = find_white_areas(grid)

# Write output data
with open('colaj.out', 'w') as file:
    file.write(str(white_areas_count))
```
```
---------- user ----------


Expected program to write result to `colaj.out` and read from `colaj.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Function to mark rectangles on the grid
def mark_rectangle(grid, x1, y1, x2, y2):
    grid[y1:y2, x1:x2] = 1

# Function to find and count the white areas
def find_white_areas(grid):
    visited = np.zeros_like(grid, dtype=bool)
    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    m, p = grid.shape
    white_areas = 0

    def dfs(x, y):
        if visited[y, x] or grid[y, x] == 1:
            return
        visited[y, x] = True
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < p and 0 <= ny < m and not visited[ny, nx] and grid[ny, nx] == 0:
                dfs(nx, ny)

    for i in range(m):
        for j in range(p):
            if grid[i, j] == 0 and not visited[i, j]:
                white_areas += 1
                dfs(j, i)

    return white_areas

# Read input data from 'colaj.in'
with open('colaj.in', 'r') as file:
    n = int(file.readline().strip())
    m, p = map(int, file.readline().strip().split())
    rectangles = [tuple(map(int, file.readline().strip().split())) for _ in range(n)]

# Initialize a grid with all white spaces
grid = np.zeros((m, p), dtype=np.int8)

# Mark the black rectangles on the grid
for x1, y1, x2, y2 in rectangles:
    mark_rectangle(grid, x1, y1, x2, y2)

# Find the number of continuous maximal white areas
white_areas_count = find_white_areas(grid)

# Write output data to 'colaj.out'
with open('colaj.out', 'w') as file:
    file.write(str(white_areas_count))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Since `numpy` is not available and considering the memory constraints, we will need to implement our own solution without the use of `numpy` or other external libraries that may not be available in the environment or may exceed the memory limit. We will use Python standard libraries to handle the file input/output and implement our own grid manipulation and search logic.

Here's the revised solution:

```python
# Function to mark rectangles on the grid
def mark_rectangle(grid, x1, y1, x2, y2):
    for i in range(y1, y2):
        for j in range(x1, x2):
            grid[i][j] = 1

# Function to find and count the white areas using DFS
def find_white_areas(grid, m, p):
    visited = [[False for _ in range(p)] for _ in range(m)]
    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    white_areas = 0

    def dfs(x, y):
        if visited[y][x] or grid[y][x] == 1:
            return
        visited[y][x] = True
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < p and 0 <= ny < m and not visited[ny][nx] and grid[ny][nx] == 0:
                dfs(nx, ny)

    for i in range(m):
        for j in range(p):
            if grid[i][j] == 0 and not visited[i][j]:
                white_areas += 1
                dfs(j, i)

    return white_areas

# Read input data from 'colaj.in'
with open('colaj.in', 'r') as file:
    n = int(file.readline().strip())
    m, p = map(int, file.readline().strip().split())
    rectangles = [list(map(int, file.readline().strip().split())) for _ in range(n)]

# Initialize a grid with all white spaces
grid = [[0 for _ in range(p)] for _ in range(m)]

# Mark the black rectangles on the grid
for rect in rectangles:
    mark_rectangle(grid, *rect)

# Find the number of continuous maximal white areas
white_areas_count = find_white_areas(grid, m, p)

# Write output data to 'colaj.out'
with open('colaj.out', 'w') as file:
    file.write(str(white_areas_count))
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 41, in <module>
    mark_rectangle(grid, *rect)
  File "/app/app.py", line 5, in mark_rectangle
    grid[i][j] = 1
    ~~~~~~~^^^
IndexError: list assignment index out of range

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates an "IndexError: list assignment index out of range", which suggests that the indices used to access the grid are out of the valid range. This could be due to a mistake in either the grid initialization or in the way the mark_rectangle function interprets the coordinates of the rectangles.

In the given problem, the coordinates are given with respect to the bottom-left corner being (0, 0), but in the grid array, the top-left corner is considered (0, 0) in typical matrix notation. Therefore, we need to adjust the rectangle coordinates when marking them on the grid.

Let's fix this by adjusting the coordinates and rewrite the solution:

```python
# Function to mark rectangles on the grid
def mark_rectangle(grid, m, x1, y1, x2, y2):
    for i in range(m-y2, m-y1):
        for j in range(x1, x2):
            grid[i][j] = 1

# Function to find and count the white areas using DFS
def find_white_areas(grid, m, p):
    visited = [[False for _ in range(p)] for _ in range(m)]
    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]
    white_areas = 0

    def dfs(x, y):
        if visited[y][x] or grid[y][x] == 1:
            return
        visited[y][x] = True
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < p and 0 <= ny < m and not visited[ny][nx] and grid[ny][nx] == 0:
                dfs(nx, ny)

    for i in range(m):
        for j in range(p):
            if grid[i][j] == 0 and not visited[i][j]:
                white_areas += 1
                dfs(j, i)

    return white_areas

# Read input data from 'colaj.in'
with open('colaj.in', 'r') as file:
    n = int(file.readline().strip())
    m, p = map(int, file.readline().strip().split())
    rectangles = [list(map(int, file.readline().strip().split())) for _ in range(n)]

# Initialize a grid with all white spaces
grid = [[0 for _ in range(p)] for _ in range(m)]

# Mark the black rectangles on the grid
for rect in rectangles:
    mark_rectangle(grid, m, *rect)

# Find the number of continuous maximal white areas
white_areas_count = find_white_areas(grid, m, p)

# Write output data to 'colaj.out'
with open('colaj.out', 'w') as file:
    file.write(str(white_areas_count))
```

This solution assumes that the y-coordinates are inverted when marking the rectangles on the grid to match the way they are represented in the input file (with the bottom-left corner as the reference point). When accessing the grid, the y-coordinate is inverted by subtracting from the height `m` of the grid to align with the typical matrix indexing in programming.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 41, in <module>
    mark_rectangle(grid, m, *rect)
  File "/app/app.py", line 5, in mark_rectangle
    grid[i][j] = 1
    ~~~~~~~^^^
IndexError: list assignment index out of range

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
