---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# colaj.py
import numpy as np

def flood_fill(matrix, x, y, new_color):
    max_x, max_y = matrix.shape
    orig_color = matrix[x, y]
    stack = [(x, y)]

    while stack:
        x, y = stack.pop()
        if matrix[x, y] != orig_color:
            continue
        matrix[x, y] = new_color
        if x > 0:
            stack.append((x - 1, y))
        if x < (max_x - 1):
            stack.append((x + 1, y))
        if y > 0:
            stack.append((x, y - 1))
        if y < (max_y - 1):
            stack.append((x, y + 1))

def count_white_areas(matrix):
    max_x, max_y = matrix.shape
    white_areas = 0
    for i in range(max_x):
        for j in range(max_y):
            if matrix[i, j] == 0:
                flood_fill(matrix, i, j, 1)
                white_areas += 1
    return white_areas

def read_and_process_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        m, p = map(int, file.readline().strip().split())
        rectangles = [tuple(map(int, file.readline().strip().split())) for _ in range(n)]
    matrix = np.zeros((m, p), dtype=np.uint8)
    for a, b, c, d in rectangles:
        matrix[a:c, b:d] = 1
    return matrix

def main():
    matrix = read_and_process_input('colaj.in')
    num_white_areas = count_white_areas(matrix)

    with open('colaj.out', 'w') as file:
        file.write(str(num_white_areas) + '\n')

if __name__ == '__main__':
    main()
```

This script reads in the rectangles from `colaj.in`, constructs a matrix to represent the placement of black rectangles on the canvas, and uses a flood fill algorithm to count the number of white areas. The result is then written to `colaj.out`. The use of NumPy ensures the matrix operations are memory-efficient, but if the board size is too large, the script may fail due to stack limitations in the flood fill algorithm. In such a case, an alternative stack-less flood fill method or disjoint-set data structure would be needed.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that there is a module import error indicating that `numpy` is not installed in the runtime environment. Since `numpy` is not an option, we must avoid using it and use standard Python data structures instead.

We can implement the flood fill algorithm using a standard Python list to represent the board as a 2D array, where each cell in the list corresponds to a pixel on the canvas. We can use a list of lists to represent the 2D array and use a depth-first search (DFS) implementation for the flood fill algorithm.

Here is the complete Python solution without using `numpy`:

```python
# colaj.py
def flood_fill(matrix, x, y, new_color, orig_color):
    max_x, max_y = len(matrix), len(matrix[0])
    if x < 0 or x >= max_x or y < 0 or y >= max_y or matrix[x][y] != orig_color:
        return
    matrix[x][y] = new_color
    flood_fill(matrix, x - 1, y, new_color, orig_color)
    flood_fill(matrix, x + 1, y, new_color, orig_color)
    flood_fill(matrix, x, y - 1, new_color, orig_color)
    flood_fill(matrix, x, y + 1, new_color, orig_color)

def count_white_areas(matrix):
    max_x, max_y = len(matrix), len(matrix[0])
    white_areas = 0
    for i in range(max_x):
        for j in range(max_y):
            if matrix[i][j] == 0:
                flood_fill(matrix, i, j, 2, 0)
                white_areas += 1
    return white_areas

def read_and_process_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        m, p = map(int, file.readline().strip().split())
        rectangles = [tuple(map(int, file.readline().strip().split())) for _ in range(n)]
    matrix = [[0 for _ in range(p)] for _ in range(m)]
    for a, b, c, d in rectangles:
        for i in range(a, c):
            for j in range(b, d):
                matrix[i][j] = 1
    return matrix

def main():
    matrix = read_and_process_input('colaj.in')
    num_white_areas = count_white_areas(matrix)

    with open('colaj.out', 'w') as file:
        file.write(str(num_white_areas) + '\n')

if __name__ == '__main__':
    main()
```

This script will now use a native Python list of lists to represent the 2D matrix and avoid using any external libraries such as `numpy`. It performs the flood fill to count the white areas and then writes the output to `colaj.out`.
