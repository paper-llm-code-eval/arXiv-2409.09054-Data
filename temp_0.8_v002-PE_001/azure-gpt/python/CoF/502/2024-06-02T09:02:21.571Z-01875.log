---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `veri.in` and write to `veri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un graf **orientat** cu $n$ noduri și $m$ muchii. Fiecare muchie are costul $1$ (poate fi parcursă într-un minut). Doi „prieteni” (veri) pornesc din nodul $S$. Unul dintre ei vrea să ajungă în nodul $A$, iar celălalt vrea să ajungă în nodul $B$.
\
Cei doi prieteni se vor plimba împreună până când ciclează, adică până când vor ajunge în același nod a doua oară, notat cu $Z$. După ciclare, ei își pot continua drumurile separat. Totuși, dacă vor, pot să meargă amândoi în continuare pe același drum: doar dispare obligația de a merge împreună.

Fiecare dintre ei trebuie să-și termine drumul doar după ciclare, adică după ce nu mai sunt obligați să meargă împreună. Totuși, este în regulă dacă drumul unuia se termină exact în nodul în care au ciclat (adică ciclează în $A$ sau $B$).
\
Care este numărul minim de minute necesar astfel încât să fie posibil ca amândoi să ajungă la destinațiile lor, în timpul alocat, în $A$, respectiv $B$?

Cu alte cuvinte, dacă cei doi veri ciclează pentru prima oară după exact $t$ minute, apoi își continuă drumurile pentru alte $t_A$, respectiv $t_B$ minute, vrem să aflăm valoarea minimă a lui $max(t + t_A, t + t_B)$.
\
Există două tipuri de cerințe, reprezentate printr-un număr $c$:
- Dacă $c = 1$, trebuie calculată valoarea minimă a lui $max(t + t_A, t + t_B)$.
- Dacă $c = 2$, trebuie afișat un triplet de drumuri care poate fi urmat de cei doi veri (drumul comun din $S$ până în $Z$, drum urmat ulterior de primul văr din $Z$ până în $A$, drum urmat ulterior de al doilea văr din $Z$ până în $B$), astfel încât valoarea asociată drumurilor, adică $max(t + t_A, t + t_B)$ să fie minimă. Orice triplet corect cu valoarea asociată minimă poate fi afișat.

# Date de intrare
Pe prima linie se găsește $c$. Pe a doua linie se găsesc doi întregi $n$ și $m$. Pe a treia linie se găsesc trei întregi $S$, $A$ și $B$.

Pe următoarele $m$ linii se găsesc câte doi întregi $X$ și $Y$, reprezentând că există o muchie direcționată de la nodul $X$ la nodul $Y$, care poate fi parcursă într-un minut (de cost $1$).

# Date de ieșire
Dacă $c = 1$, afișați un singur număr, valoarea minimă a lui $max(t + t_A, t + t_B)$.

Dacă $c = 2$, afișati trei drumuri. Primul drum este format de la $S$ până la $Z$. Al doilea drum este format de la $Z$ până la $A$. Al treilea drum este format de la $Z$ până la $B$, unde $S$, $A$, $B$, $Z$ sunt definite anterior.

Fiecare drum se va tipări pe două linii separate:
- Pe prima linie va apărea lungimea drumului, adică numărul de muchii.
- Pe a doua linie vor apărea nodurile drumului, separate prin câte un spațiu.

Valorea asociată drumurilor, adică $max(t + t_A, t + t_B)$, trebuie să fie minimă.

# Restricții și precizări
- $1 \leq S, A, B, Z \leq n \leq 5\ 000$
- Nodurile sunt numerotate de la $1$ la $n$.
- $A \neq B$
- $1 \leq m \leq n \times (n-1)$.
- Se garantează că pentru orice test dat spre rezolvare există cel puțin o soluție.
- Nu există muchii de la un nod la el însuși. Există maxim o muchie orientată între oricare două noduri distincte.
- Dacă verii se despart în $A$, primul văr poate să nu mai facă nimic (drumul lui ulterior ar avea $0$ muchii și l-ar conține doar pe $A$; vezi exemplul 3). Analog pentru $B$.
- Pentru fiecare subtask, testele cu $c = 1$ vor conta pentru $60\%$ din punctaj.
- Pentru 30 de puncte, $n \leq 500$, $m = n$ și toate muchiile sunt de forma $i \rightarrow (i\ mod\ n) + 1$, unde $i \in \{1, ..., n\}$.
- Pentru 50 de puncte, $n \leq 500$.
- Pentru 20 de puncte, $n \leq 5\ 000$ și $m \leq 4 \times n$.

---

Example:
`veri.in`
```
2
7 8
1 3 4
1 2
2 5
5 7
7 6
6 7
6 5
5 3
7 4
```

`veri.out`
```
5
1 2 5 7 6 5
1
5 3
2
5 7 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import deque

# Read data
with open('veri.in', 'r') as file:
    c, data = int(file.readline()), [list(map(int, line.split())) for line in file]

n, m = data[0]
S, A, B = data[1]
edges = data[2:]

# Create adjacency matrix
adj_matrix = np.zeros((n + 1, n + 1), dtype=int)
for edge in edges:
    adj_matrix[edge[0], edge[1]] = 1

# BFS to find shortest paths
def bfs(start, end):
    queue = deque([[start]])
    visited = set()
    while queue:
        path = queue.popleft()
        node = path[-1]
        if node == end:
            return path
        elif node not in visited:
            visited.add(node)
            for i in range(1, n + 1):
                if adj_matrix[node][i] == 1:
                    new_path = list(path)
                    new_path.append(i)
                    queue.append(new_path)
    return None

# Find common path to Z
path_to_Z_A = bfs(S, A)
path_to_Z_B = bfs(S, B)
common_path_length = min(len(path_to_Z_A), len(path_to_Z_B))
common_path = path_to_Z_A[:common_path_length]

# Find paths from Z to A and Z to B
path_from_Z_to_A = bfs(common_path[-1], A)[common_path_length - 1:]
path_from_Z_to_B = bfs(common_path[-1], B)[common_path_length - 1:]

# Calculate the value of max(t + t_A, t + t_B)
max_time = max(common_path_length + len(path_from_Z_to_A) - 1, common_path_length + len(path_from_Z_to_B) - 1)

# Output the results
with open('veri.out', 'w') as file:
    if c == 1:
        file.write(f"{max_time}\n")
    elif c == 2:
        file.write(f"{len(common_path) - 1}\n")
        file.write(' '.join(map(str, common_path)) + '\n')
        file.write(f"{len(path_from_Z_to_A) - 1}\n")
        file.write(' '.join(map(str, path_from_Z_to_A)) + '\n')
        file.write(f"{len(path_from_Z_to_B) - 1}\n")
        file.write(' '.join(map(str, path_from_Z_to_B)) + '\n')
```
```
Please note that the provided solution assumes that the maximum memory limit is not exceeded and that the input data fits within the given constraints. Depending on the actual memory usage, further optimization might be needed to ensure the limit is respected.
---------- user ----------


Expected program to write result to `veri.out` and read from `veri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.sparse import csr_matrix
from scipy.sparse.csgraph import shortest_path

# Helper function to write shortest paths to file.
def write_paths_to_file(file, paths):
    for path in paths:
        file.write(f"{len(path) - 1}\n{' '.join(map(str, path))}\n")

# Read data from file
with open('veri.in', 'r') as file:
    c = int(file.readline().strip())
    n, m = map(int, file.readline().strip().split())
    S, A, B = map(int, file.readline().strip().split())
    edges = np.array([list(map(int, line.strip().split())) for line in file], dtype=int)

# Create sparse adjacency matrix
adj_matrix = csr_matrix((np.ones(m, dtype=int), (edges[:, 0] - 1, edges[:, 1] - 1)), shape=(n, n))

# Find shortest paths using Dijkstra's algorithm
dist_matrix, predecessors = shortest_path(csgraph=adj_matrix, directed=True, indices=[S-1, A-1, B-1], return_predecessors=True)

# Find the shortest common path to A and B from S
common_path_length = int(max(dist_matrix[1, A-1], dist_matrix[2, B-1]))
common_path_to_Z = []

# Reconstruct the paths from predecessors matrix
def reconstruct_path(predecessors, start, end):
    node = end
    path = [node + 1]
    while predecessors[start, node] != -9999:
        node = predecessors[start, node]
        path.append(node + 1)
    return path[::-1]

path_S_to_A = reconstruct_path(predecessors[0], S-1, A-1)
path_S_to_B = reconstruct_path(predecessors[0], S-1, B-1)
path_Z_to_A = []
path_Z_to_B = []

# Find the common path to Z and separate paths from Z to A and Z to B
Z = -1
for i in range(min(len(path_S_to_A), len(path_S_to_B))):
    if path_S_to_A[i] == path_S_to_B[i]:
        Z = path_S_to_A[i]
        common_path_to_Z.append(Z)
    else:
        path_Z_to_A = path_S_to_A[i:]
        path_Z_to_B = path_S_to_B[i:]
        break

# Write results to file
with open('veri.out', 'w') as file:
    if c == 1:
        file.write(f"{common_path_length}\n")
    elif c == 2:
        write_paths_to_file(file, [common_path_to_Z, path_Z_to_A, path_Z_to_B])
```
```
This solution uses SciPy's sparse matrices and graph algorithms to find the shortest paths, which is memory-efficient and suitable for the constraints given. The output is written to 'veri.out' as specified, without using `input()` or `print()`.
---------- user ----------


Expected program to write result to `veri.out` and read from `veri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
