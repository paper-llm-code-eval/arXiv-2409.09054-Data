---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `veri.in` and write to `veri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un graf **orientat** cu $n$ noduri și $m$ muchii. Fiecare muchie are costul $1$ (poate fi parcursă într-un minut). Doi „prieteni” (veri) pornesc din nodul $S$. Unul dintre ei vrea să ajungă în nodul $A$, iar celălalt vrea să ajungă în nodul $B$.
\
Cei doi prieteni se vor plimba împreună până când ciclează, adică până când vor ajunge în același nod a doua oară, notat cu $Z$. După ciclare, ei își pot continua drumurile separat. Totuși, dacă vor, pot să meargă amândoi în continuare pe același drum: doar dispare obligația de a merge împreună.

Fiecare dintre ei trebuie să-și termine drumul doar după ciclare, adică după ce nu mai sunt obligați să meargă împreună. Totuși, este în regulă dacă drumul unuia se termină exact în nodul în care au ciclat (adică ciclează în $A$ sau $B$).
\
Care este numărul minim de minute necesar astfel încât să fie posibil ca amândoi să ajungă la destinațiile lor, în timpul alocat, în $A$, respectiv $B$?

Cu alte cuvinte, dacă cei doi veri ciclează pentru prima oară după exact $t$ minute, apoi își continuă drumurile pentru alte $t_A$, respectiv $t_B$ minute, vrem să aflăm valoarea minimă a lui $max(t + t_A, t + t_B)$.
\
Există două tipuri de cerințe, reprezentate printr-un număr $c$:
- Dacă $c = 1$, trebuie calculată valoarea minimă a lui $max(t + t_A, t + t_B)$.
- Dacă $c = 2$, trebuie afișat un triplet de drumuri care poate fi urmat de cei doi veri (drumul comun din $S$ până în $Z$, drum urmat ulterior de primul văr din $Z$ până în $A$, drum urmat ulterior de al doilea văr din $Z$ până în $B$), astfel încât valoarea asociată drumurilor, adică $max(t + t_A, t + t_B)$ să fie minimă. Orice triplet corect cu valoarea asociată minimă poate fi afișat.

# Date de intrare
Pe prima linie se găsește $c$. Pe a doua linie se găsesc doi întregi $n$ și $m$. Pe a treia linie se găsesc trei întregi $S$, $A$ și $B$.

Pe următoarele $m$ linii se găsesc câte doi întregi $X$ și $Y$, reprezentând că există o muchie direcționată de la nodul $X$ la nodul $Y$, care poate fi parcursă într-un minut (de cost $1$).

# Date de ieșire
Dacă $c = 1$, afișați un singur număr, valoarea minimă a lui $max(t + t_A, t + t_B)$.

Dacă $c = 2$, afișati trei drumuri. Primul drum este format de la $S$ până la $Z$. Al doilea drum este format de la $Z$ până la $A$. Al treilea drum este format de la $Z$ până la $B$, unde $S$, $A$, $B$, $Z$ sunt definite anterior.

Fiecare drum se va tipări pe două linii separate:
- Pe prima linie va apărea lungimea drumului, adică numărul de muchii.
- Pe a doua linie vor apărea nodurile drumului, separate prin câte un spațiu.

Valorea asociată drumurilor, adică $max(t + t_A, t + t_B)$, trebuie să fie minimă.

# Restricții și precizări
- $1 \leq S, A, B, Z \leq n \leq 5\ 000$
- Nodurile sunt numerotate de la $1$ la $n$.
- $A \neq B$
- $1 \leq m \leq n \times (n-1)$.
- Se garantează că pentru orice test dat spre rezolvare există cel puțin o soluție.
- Nu există muchii de la un nod la el însuși. Există maxim o muchie orientată între oricare două noduri distincte.
- Dacă verii se despart în $A$, primul văr poate să nu mai facă nimic (drumul lui ulterior ar avea $0$ muchii și l-ar conține doar pe $A$; vezi exemplul 3). Analog pentru $B$.
- Pentru fiecare subtask, testele cu $c = 1$ vor conta pentru $60\%$ din punctaj.
- Pentru 30 de puncte, $n \leq 500$, $m = n$ și toate muchiile sunt de forma $i \rightarrow (i\ mod\ n) + 1$, unde $i \in \{1, ..., n\}$.
- Pentru 50 de puncte, $n \leq 500$.
- Pentru 20 de puncte, $n \leq 5\ 000$ și $m \leq 4 \times n$.

---

Example:
`veri.in`
```
2
7 8
1 3 4
1 2
2 5
5 7
7 6
6 7
6 5
5 3
7 4
```

`veri.out`
```
5
1 2 5 7 6 5
1
5 3
2
5 7 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np
from collections import deque
from itertools import islice

# I/O file names
input_file = 'veri.in'
output_file = 'veri.out'

# Read input from file
with open(input_file, 'r') as f:
    c = int(f.readline().strip())
    n, m = map(int, f.readline().strip().split())
    S, A, B = map(int, f.readline().strip().split())
    edges = [tuple(map(int, line.strip().split())) for line in islice(f, m)]

# Initialize adjacency matrix with zeros and a very large number for non-existing edges
adj_matrix = np.full((n+1, n+1), np.inf)
np.fill_diagonal(adj_matrix, 0)

# Fill in the adjacency matrix with edges
for x, y in edges:
    adj_matrix[x][y] = 1

# Use Floyd-Warshall algorithm to find the shortest paths between all pairs of vertices
for k in range(1, n+1):
    for i in range(1, n+1):
        for j in range(1, n+1):
            adj_matrix[i][j] = min(adj_matrix[i][j], adj_matrix[i][k] + adj_matrix[k][j])

# Function to find the minimum time after cycling
def min_time_after_cycling(S, A, B):
    min_time = np.inf
    cycle_node = -1
    for Z in range(1, n+1):
        time = max(adj_matrix[S][Z] + adj_matrix[Z][A], adj_matrix[S][Z] + adj_matrix[Z][B])
        if time < min_time:
            min_time = time
            cycle_node = Z
    return min_time, cycle_node

# Find the shortest paths from S to A and from S to B
min_time, cycle_node = min_time_after_cycling(S, A, B)

# Write the minimum time to the output file
with open(output_file, 'w') as f:
    if c == 1:
        f.write(f"{min_time}\n")
    elif c == 2:
        # Reconstruct the path by backtracking the Floyd-Warshall predecessors
        def reconstruct_path(start, end):
            path = deque()
            while end != start:
                path.appendleft(end)
                for i in range(1, n+1):
                    if adj_matrix[start][i] + adj_matrix[i][end] == adj_matrix[start][end]:
                        end = i
                        break
            path.appendleft(start)
            return list(path)
        
        # Reconstruct the paths
        path_SZ = reconstruct_path(S, cycle_node)
        path_ZA = reconstruct_path(cycle_node, A)
        path_ZB = reconstruct_path(cycle_node, B)
        
        # Write the paths to the output file
        f.write(f"{len(path_SZ)-1}\n")
        f.write(' '.join(map(str, path_SZ)) + "\n")
        f.write(f"{len(path_ZA)-1}\n")
        f.write(' '.join(map(str, path_ZA)) + "\n")
        f.write(f"{len(path_ZB)-1}\n")
        f.write(' '.join(map(str, path_ZB)) + "\n")
```
```
Please note that this code may not run within the memory limit of ~8MB, as the adjacency matrix and Floyd-Warshall algorithm used here can be memory-intensive for larger graphs. In such cases, a more memory-efficient approach like using adjacency lists and BFS/Dijkstra’s algorithm for shortest paths should be considered. The code requires further optimization to fit within the specified memory constraints.
---------- user ----------


Expected program to write result to `veri.out` and read from `veri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np
from scipy.sparse.csgraph import shortest_path
from scipy.sparse import csr_matrix
from collections import deque

def write_output(filename, content):
    with open(filename, 'w') as f:
        f.write(content)

def reconstruct_path(predecessors, start, end):
    path = deque()
    while end != start and end >= 0:
        path.appendleft(end)
        end = predecessors[start, end]
    path.appendleft(start)
    return list(path)

with open('veri.in', 'r') as f:
    c = int(f.readline().strip())
    n, m = map(int, f.readline().strip().split())
    S, A, B = map(int, f.readline().strip().split())
    edges = np.array([list(map(int, f.readline().split())) for _ in range(m)])

# Build the sparse adjacency matrix
adj_matrix = csr_matrix((np.ones(m), (edges[:, 0] - 1, edges[:, 1] - 1)), shape=(n, n))

# Run Floyd-Warshall algorithm to find shortest paths and their predecessors
dist_matrix, predecessors = shortest_path(csgraph=adj_matrix, directed=True, return_predecessors=True)

# Find the optimal meeting node Z after cycling
min_time = np.inf
cycle_node = -1
for Z in range(n):
    time_A = dist_matrix[S-1, Z] + dist_matrix[Z, A-1]
    time_B = dist_matrix[S-1, Z] + dist_matrix[Z, B-1]
    max_time = max(time_A, time_B)
    if max_time < min_time:
        min_time = max_time
        cycle_node = Z

if c == 1:
    write_output('veri.out', f"{int(min_time)}\n")
else:
    # Reconstruct the paths
    path_SZ = reconstruct_path(predecessors, S-1, cycle_node)
    path_ZA = reconstruct_path(predecessors, cycle_node, A-1)
    path_ZB = reconstruct_path(predecessors, cycle_node, B-1)
    
    # Prepare the output
    output = f"{len(path_SZ) - 1}\n{' '.join(map(str, path_SZ))}\n"
    output += f"{len(path_ZA) - 1}\n{' '.join(map(str, path_ZA))}\n"
    output += f"{len(path_ZB) - 1}\n{' '.join(map(str, path_ZB))}\n"
    
    write_output('veri.out', output)
```
```
---------- user ----------


Expected program to write result to `veri.out` and read from `veri.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
