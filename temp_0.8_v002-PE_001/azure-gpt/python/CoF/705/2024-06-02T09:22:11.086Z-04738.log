---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def find_optimal_cut(colors):
    max_length = 0
    color_at_ends = -1
    cut_from_start = 0
    cut_from_end = 0

    start_indices = {}
    for i, color in enumerate(colors):
        if color not in start_indices:
            start_indices[color] = i
        length = i - start_indices[color] + 1
        if length > max_length or (length == max_length and start_indices[color] < cut_from_start):
            max_length = length
            color_at_ends = color
            cut_from_start = start_indices[color]
            cut_from_end = len(colors) - i - 1

    return max_length, color_at_ends, cut_from_start, cut_from_end

# Read from panglica.in
with open('panglica.in', 'r') as file:
    N, C = map(int, file.readline().split())
    colors = np.array([int(file.readline().strip()) for _ in range(N)], dtype=np.int32)

# Compute the solution
result = find_optimal_cut(colors)

# Write to panglica.out
with open('panglica.out', 'w') as file:
    file.write('\n'.join(map(str, result)) + '\n')
```
Please note that this code assumes the `panglica.in` file exists and is correctly formatted in the same directory as the script. The output will be written to `panglica.out` in the same directory. The code is optimized for both time and memory usage, using numpy arrays to handle the input data efficiently.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `numpy` module is not available in the environment where the script is running. Since the challenge specifies that we should optimize both time and memory usage and we have a very strict memory limit, we should avoid using external libraries such as `numpy` that may not be available or could potentially cause large memory overhead.

Moreover, we can achieve efficient memory usage by using built-in Python structures that are already optimized for memory, such as lists and dictionaries.

Here's the rewritten solution without the use of `numpy`:

```python
def find_optimal_cut(colors):
    max_length = 0
    color_at_ends = -1
    cut_from_start = 0
    cut_from_end = 0
    
    start_indices = {}
    for i, color in enumerate(colors):
        if color not in start_indices:
            start_indices[color] = i
        length = i - start_indices[color] + 1
        if length > max_length or (length == max_length and start_indices[color] < cut_from_start):
            max_length = length
            color_at_ends = color
            cut_from_start = start_indices[color]
            cut_from_end = len(colors) - i - 1
    
    return max_length, color_at_ends, cut_from_start, cut_from_end

# Read from panglica.in
with open('panglica.in', 'r') as file:
    N, C = map(int, file.readline().split())
    colors = [int(file.readline().strip()) for _ in range(N)]

# Compute the solution
result = find_optimal_cut(colors)

# Write to panglica.out
with open('panglica.out', 'w') as file:
    file.write('\n'.join(map(str, result)) + '\n')
```

This code should work correctly in environments where `numpy` is not installed, as it only uses built-in Python functionalities. It reads from `panglica.in` and writes to `panglica.out` as required. The memory usage should stay within the limit since it uses lists and iterates through them only once.
