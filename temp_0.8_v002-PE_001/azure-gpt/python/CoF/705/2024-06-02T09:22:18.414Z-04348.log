---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

# Read the input file
with open('panglica.in', 'r') as fin:
    N, C = map(int, fin.readline().strip().split())
    colors = np.array([int(fin.readline().strip()) for _ in range(N)], dtype=np.int32)

# Initialize variables to track the maximum length and corresponding cuts
max_length = 0
max_color = -1
cut_start = 0
cut_end = 0

# Use two pointers to identify the longest sequence with the same color at both ends
left = 0
right = N - 1

while left < right:
    if colors[left] == colors[right]:
        # Calculate current sequence length
        length = right - left + 1
        if length > max_length:
            max_length = length
            max_color = colors[left]
            cut_start = left
            cut_end = N - right - 1
            
        left += 1
        right -= 1
    else:
        if colors[left] == colors[left + 1]:
            right -= 1
        elif colors[right] == colors[right - 1]:
            left += 1
        else:
            left += 1
            right -= 1

# Write the output file
with open('panglica.out', 'w') as fout:
    fout.write(f"{max_length}\n")
    fout.write(f"{max_color}\n")
    fout.write(f"{cut_start}\n")
    fout.write(f"{cut_end}\n")
```

This solution uses NumPy to efficiently manage arrays and their operations, and it reads from and writes to files according to the problem's specifications. The two-pointer approach minimizes memory usage and computation time, ensuring that the solution adheres to the memory constraint provided.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the NumPy module is not available in the current environment. Since the challenge specifies using highly efficient libraries whenever possible, but also needs to adhere to a strict memory limit, we might want to revise the solution to not use NumPy to avoid any potential issues with the environment.

Here's the revised solution without using NumPy:

```python
# Read the input file
with open('panglica.in', 'r') as fin:
    N, C = map(int, fin.readline().strip().split())
    colors = [int(fin.readline().strip()) for _ in range(N)]

# Initialize variables to track the maximum length and corresponding cuts
max_length = 0
max_color = -1
cut_start = 0
cut_end = 0

# Use two pointers to identify the longest sequence with the same color at both ends
left = 0
right = N - 1

while left < right:
    if colors[left] == colors[right]:
        # Calculate current sequence length
        length = right - left + 1
        if length > max_length:
            max_length = length
            max_color = colors[left]
            cut_start = left
            cut_end = N - right - 1
        
        # Move pointers inward
        left += 1
        right -= 1
    else:
        # If there are matching colors inward, keep those and move the opposite pointer
        if left < N - 1 and colors[left] == colors[left + 1]:
            right -= 1
        elif right > 0 and colors[right] == colors[right - 1]:
            left += 1
        else:
            # If no matches, move both pointers inward
            left += 1
            right -= 1

# Write the output file
with open('panglica.out', 'w') as fout:
    fout.write(f"{max_length}\n")
    fout.write(f"{max_color}\n")
    fout.write(f"{cut_start}\n")
    fout.write(f"{cut_end}\n")
```

Now the code does not rely on NumPy or any other external libraries, so it should run correctly in an environment where only the standard Python library is available. This should resolve the `ModuleNotFoundError`.
