---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `armonica.in` and write to `armonica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Spunem că trei numere `a, b, c` sunt în progresie armonică dacă `b` este media armonică a numerelor `a` și `c`, adică 

$$
b=\frac{2}{\frac{1}{a}+\frac{1}{c}}=\frac{2ac}{a+c}
$$

# Cerinţe
Cunoscând un număr natural `b` să se determine toate perechile de numere naturale `(a, c)` pentru care `a, b, c` sunt în progresie armonică.

# Date de intrare
Fișierul de intrare `armonica.in` conține pe prima linie un număr natural `b`. 

# Date de ieşire
Fișierul de iesire `armonica.out` va conține pe prima linie un număr natural `n` reprezentând numărul de perechi de numere naturale `(a,c)` pentru care `b` este media armonică. Pe următoarele `n` linii se vor afișa perechile de numere cerute. Astfel fiecare dintre următoarele `n` linii vor conține căte două numere `a` și `c` separate printr-un spațiu cu semnificația că `b` este medie armonică a numerelor `a` și `c`. 

# Restricţii și precizări
* `1 ≤ b ≤ 1 000 000 000`;
* Pentru teste în valoare de `40` de puncte avem `b ≤ 1 000 000`;
* Perechile de numere din fișierul de ieșire pot fi afișate în orice ordine;
* Dacă `b` este medie armonică între două numere diferite `a` și `c` atunci perechile `(a,c)` și `(c,a)` sunt considerate soluții distincte.
* Problema va fi evaluată pe teste în valoare de `90` de puncte.
* Se vor acorda `10` puncte din oficiu.

---

Example:
`armonica.in`
```
3
```

`armonica.out`
```
3
3 3
2 6
6 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def harmonic_pairs(b):
    # Given b, we need to find a and c such that b = 2ac / (a + c)
    # Which implies that ab + bc = 2ac, and thus (a - b)(b - c) = b^2
    pairs = []
    # Loop through all factors of b^2
    for a in range(1, int(np.sqrt(b**2)) + 1):
        if (b**2) % a == 0:
            c = (b**2) // a
            # Ensure a and c are not equal to b and are greater than 0
            if a != b and c != b and a > 0 and c > 0:
                pairs.append((a, c))
    return pairs

def main():
    with open('armonica.in', 'r') as fin:
        b = int(fin.readline().strip())
        
    pairs = harmonic_pairs(b)
    
    with open('armonica.out', 'w') as fout:
        fout.write(f"{len(pairs)}\n")
        for a, c in pairs:
            fout.write(f"{a} {c}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def harmonic_pairs(b):
    # List to store pairs
    pairs = []
    # Loop through all possible a values until b (since a and c are symmetric around b)
    # This will find all pairs (a, c) where a <= b <= c
    for a in range(1, b + 1):
        # Calculate the corresponding c using the equation derived from the definition of harmonic mean
        c = (a * b) / (2 * a - b)
        # Check if c is a natural number and a is different from c
        if c.is_integer() and a != c:
            c = int(c)
            # Add both (a, c) and (c, a) since they are distinct solutions
            pairs.append((a, c))
            if a != b:  # Avoid duplicating the case where a = b
                pairs.append((c, a))
    return pairs

def main():
    with open('armonica.in', 'r') as fin:
        b = int(fin.readline().strip())
        
    pairs = harmonic_pairs(b)
    
    # Sort pairs by the first element
    pairs.sort(key=lambda x: x[0])
    
    with open('armonica.out', 'w') as fout:
        fout.write(f"{len(pairs)}\n")
        for a, c in pairs:
            fout.write(f"{a} {c}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def harmonic_pairs(b):
    # We need to find all pairs (a, c) for which b is the harmonic mean
    # This translates to the equation: b = 2ac / (a + c)
    # Rearranging the terms, we get: a * c = b * (a + c) / 2
    # Simplifying, we find: a * c = b^2 / 2
    # Since a and c are natural numbers, (a - b) * (c - b) = b^2 - 2ac + ab + bc = ab + bc - 2ac = b^2
    # We need to find the pairs of factors of b^2 and check the above condition.
    pairs = []
    for a in range(1, int(b**2 // b) + 1):
        if (b**2) % a == 0:
            c = b**2 // a
            # Ensure a and c are natural numbers and not equal to b
            if a != b and c != b and c >= a:
                pairs.append((a, c))
                if a != c:
                    pairs.append((c, a))
    return pairs

def main():
    with open('armonica.in', 'r') as fin:
        b = int(fin.readline().strip())

    pairs = harmonic_pairs(b)
    
    with open('armonica.out', 'w') as fout:
        fout.write(f"{len(pairs)}\n")
        for pair in sorted(pairs):  # Write out the sorted pairs
            fout.write(f"{pair[0]} {pair[1]}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def write_harmonic_pairs(b):
    with open('armonica.out', 'w') as fout:
        # The number of pairs is initially unknown, so we'll write them to a list first.
        pairs = []

        # To find a and c, we iterate over all possible divisor pairs of b^2
        # Since b is the harmonic mean, when (a-b)(b-c) = b^2, it implies a and c are in harmonic progression with b.
        for a in range(1, b * 2):
            # Check if (a - b) is a divisor of b^2
            if (b * b) % (a - b) == 0:
                # Calculate c
                c = (b * b) // (a - b) + b
                if a < c:  # We want a < c to avoid duplicate pairs
                    # Add the pair to the list
                    pairs.append(f'{a} {c}\n')

        # Write the number of pairs and the pairs themselves to the output file.
        fout.write(f"{len(pairs)}\n")
        for pair in pairs:
            fout.write(pair)

# Read the input from 'armonica.in'
with open('armonica.in', 'r') as fin:
    b = int(fin.readline().strip())

# Generate and write the harmonic pairs to 'armonica.out'
write_harmonic_pairs(b)
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array operations
import numpy as np

# Open the input file
with open("armonica.in", "r") as file:
    # Read the value of b
    b = int(file.readline().strip())

# Initialize an empty list to store the pairs (a, c)
pairs = []

# We iterate over possible values of a
# Since a * c = b^2 and a <= c, the maximum value for a is sqrt(b^2) = b
for a in range(1, b + 1):
    # Calculate the potential c using the harmonic mean formula
    # We rearrange the formula to c = 2ab / (a + b)
    c = 2 * a * b // (a + b)
    
    # Check if c is a natural number and not equal to b
    # Additionally, check if c is greater than or equal to a to avoid duplicate pairs
    if c >= a and (c * (a + b) == 2 * a * b):
        # If conditions are met, append the pair (a, c) to pairs
        pairs.append((a, c))

# Sort pairs by the first element (a)
pairs.sort(key=lambda x: x[0])

# Open the output file
with open("armonica.out", "w") as file:
    # Write the number of pairs to the file
    file.write(f"{len(pairs)}\n")
    
    # Write each pair to the file
    for a, c in pairs:
        file.write(f"{a} {c}\n")
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Since we are optimizing for memory, we will avoid using numpy or any other
# libraries that might increase the memory footprint of the solution.

def find_harmonic_pairs(b):
    pairs = []
    for i in range(1, b):
        # Calculate the corresponding c for each a=i, using the harmonic mean formula rearranged for c
        if b * (b + i) % i == 0:  # Check for integer c
            c = b * (b + i) // i
            if c > b:  # Ensure c > b to avoid repeating (b, b) and (b, b) as pairs
                pairs.append((i, c)) # Add pair (a, c)
    return pairs

def write_output(filename, pairs):
    with open(filename, 'w') as f:
        f.write(f"{len(pairs)}\n")  # Number of pairs
        for a, c in pairs:
            f.write(f"{a} {c}\n")  # Each pair on a new line

# Read input from file
with open('armonica.in', 'r') as f:
    b = int(f.readline())

pairs = find_harmonic_pairs(b)
write_output('armonica.out', pairs)
```
```
---------- user ----------


Expected program to write result to `armonica.out` and read from `armonica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# The task is to find all pairs (a, c) such that b is the harmonic mean of a and c
# b = 2ac / (a + c), which simplifies to (a - b)(b - c) = b^2

# Read b from 'armonica.in'
with open('armonica.in', 'r') as infile:
    b = int(infile.readline())

# Prepare to write the pairs to 'armonica.out'
with open('armonica.out', 'w') as outfile:
    # Keep track of the count of pairs
    count = 0
    
    # This will hold the formatted output to be written to the file
    output = []
    
    # Start by finding all factors of b^2. 
    # Since (a - b)(b - c) = b^2, a and c are symmetrical around b and we only need to check up to b
    for a in range(1, b + 1):
        # Check if a is a factor of b^2
        if b * b % a == 0:
            c = b * b // a + b
            if a != b and c != b:  # Ensure a and c are not equal to b
                count += 1  # Increment the count for each pair
                output.append(f"{a} {c}\n")  # Append formatted pair to the output list
    
    # Write the count and the pairs to the file
    outfile.write(f"{count}\n")
    for line in output:
        outfile.write(line)
```
```
