---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read input data
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    numbers = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Count occurrences of each number in range [0, 99]
counts = np.zeros(100, dtype=int)
for number in numbers:
    counts[number] += 1

# Find numbers with odd occurrences (unsettled pairs)
odd_occurrences = np.where(counts % 2 == 1)[0]

# Create the access code from numbers with odd occurrences, sorted
access_code = ''.join(map(str, np.sort(odd_occurrences)))

# Write output data
with open('cod.out', 'w') as file:
    file.write(access_code)
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

# Read input data
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    numbers = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Use counting sort approach as we know the range is 0 to 99
# Create an array to hold the count of each number, initialized to zero
count_array = np.zeros(100, dtype=int)

# Count each number's occurrences
for number in numbers:
    count_array[number] += 1

# Find the numbers with an odd count, these will be part of the access code
odd_counts = np.nonzero(count_array % 2 == 1)[0]

# Convert the numbers to strings and concatenate them to form the access code
access_code = ''.join(map(str, odd_counts))

# Write output data
with open('cod.out', 'w') as file:
    file.write(access_code)
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It seems that the execution environment does not have the `numpy` library installed, which is why it's throwing a `ModuleNotFoundError`. Since the challenge specifies using highly efficient libraries, not having access to `numpy` is a significant limitation, but we can still solve the problem efficiently using standard Python data structures.

Here's a solution that doesn't use `numpy` and is still efficient in terms of both time and memory usage, as it uses a dictionary to count the occurrences of the numbers, which is a common technique for problems like this:

```python
# Read input data from 'cod.in'
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    ticket_numbers = list(map(int, file.readline().strip().split()))

# Count occurrences of each number using a dictionary
counter = {}
for number in ticket_numbers:
    counter[number] = counter.get(number, 0) + 1

# Find numbers with odd occurrences (unsettled pairs)
# and sort them to form the access code
access_code_numbers = sorted([number for number, count in counter.items() if count % 2 == 1])

# Convert the numbers to a string to form the access code
access_code = ''.join(map(str, access_code_numbers))

# Write output data to 'cod.out'
with open('cod.out', 'w') as file:
    file.write(access_code)
```
