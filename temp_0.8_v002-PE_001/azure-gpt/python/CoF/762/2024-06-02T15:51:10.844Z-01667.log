---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def read_data(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        tickets = np.array(file.readline().strip().split(), dtype=np.int32)
    return tickets

def write_to_file(filename, data):
    with open(filename, 'w') as file:
        file.write(data)

def find_unpaired_numbers(tickets):
    counts = np.zeros(100, dtype=np.int32)
    for number in tickets:
        counts[number] += 1
    unpaired_numbers = np.where(counts % 2 == 1)[0]
    return unpaired_numbers

def main():
    tickets = read_data('cod.in')
    unpaired_numbers = find_unpaired_numbers(tickets)
    code = ''.join(map(str, unpaired_numbers))
    write_to_file('cod.out', code)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    with open('cod.in', 'r') as file:
        next(file)  # Skip the first line with the count of the numbers
        tickets = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    
    counts = np.bincount(tickets, minlength=100)
    unpaired_numbers = np.nonzero(counts % 2)[0]
    code = ''.join(map(str, unpaired_numbers))

    with open('cod.out', 'w') as file:
        file.write(code)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the ticket numbers from the file and count their occurrences
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())  # Read the number of tickets (unused)
    tickets = np.fromfile(file, dtype=int, count=-1, sep=' ')

# Find the tickets that occur an odd number of times
counts = np.bincount(tickets, minlength=100)
unpaired_numbers = np.where(counts % 2 == 1)[0]

# Convert the unpaired numbers to a single string with no spaces
code = ''.join(map(str, unpaired_numbers))

# Write the access code to the output file
with open('cod.out', 'w') as file:
    file.write(code)
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Reading data from 'cod.in'
with open('cod.in', 'r') as f:
    n = int(f.readline().strip())
    numbers = np.fromstring(f.readline().strip(), dtype=int, sep=' ')

# Counting occurrences of each number and finding numbers with odd counts
counts = np.bincount(numbers, minlength=100)
odd_numbered_counts = np.where(counts % 2 == 1)[0]

# Creating the access code by concatenating numbers with odd occurrences
access_code = ''.join(map(str, odd_numbered_counts))

# Writing the access code to 'cod.out'
with open('cod.out', 'w') as f:
    f.write(access_code)
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import numpy for efficient array processing
import numpy as np

# Read the ticket numbers from 'cod.in'
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())  # The total count of tickets is read
    tickets = np.fromfile(file, dtype=int, count=n, sep=' ')  # Read n ticket numbers

# Count the occurrences of each number using bincount which is more memory efficient
counts = np.bincount(tickets)
unpaired_numbers = np.nonzero(counts % 2 == 1)[0]

# Create the access code as a string with the unpaired numbers in ascending order
access_code = ''.join(map(str, unpaired_numbers))

# Write the access code to 'cod.out'
with open('cod.out', 'w') as file:
    file.write(access_code)
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read data from 'cod.in'
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    ticket_numbers = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Count the occurrences of each number
counts = np.bincount(ticket_numbers, minlength=100)

# Find the numbers that appear an odd number of times
unpaired_numbers = np.where(counts % 2 == 1)[0]

# Convert the unpaired numbers to a string with no spaces in between
code = ''.join(map(str, unpaired_numbers))

# Write the result to 'cod.out'
with open('cod.out', 'w') as file:
    file.write(code)
```
```
---------- user ----------


Expected program to write result to `cod.out` and read from `cod.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Function to process the ticket numbers and generate the access code
def process_tickets(numbers):
    counts = np.bincount(numbers)
    unpaired_numbers = np.flatnonzero(counts % 2 == 1)
    return ''.join(map(str, unpaired_numbers))

# Read data from 'cod.in'
with open('cod.in', 'rb') as file:
    n = int(file.readline())
    ticket_numbers = np.fromfile(file, dtype=np.int32, count=n, sep=' ')

# Generate the access code
access_code = process_tickets(ticket_numbers)

# Write the access code to 'cod.out'
with open('cod.out', 'w') as file:
    file.write(access_code)
```
```
