{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/850/2024-06-03T09:18:58.564Z-04170.log",
  "attemptStart": 1717406338.564,
  "attemptEnd": 1717406389.303,
  "attemptDuration": 50.73900008201599,
  "code": "from collections import deque, defaultdict\n\ndef parse_input(filename):\n    with open(filename, 'r') as file:\n        v = int(file.readline().strip())\n        m, n = map(int, file.readline().strip().split())\n        farm = [list(file.readline().strip()) for _ in range(m)]\n    return v, m, n, farm\n\ndef write_output(filename, result):\n    with open(filename, 'w') as file:\n        if isinstance(result, int):\n            file.write(f'{result}\\n')\n        else:\n            line, col, color = result\n            file.write(f'{line} {col}\\n{color}\\n')\n\ndef bfs(farm, start, visited):\n    queue = deque([start])\n    area = 0\n    color = farm[start[0]][start[1]]\n    while queue:\n        row, col = queue.popleft()\n        if visited[row][col]:\n            continue\n        visited[row][col] = True\n        area += 1\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        for dr, dc in directions:\n            r, c = row + dr, col + dc\n            if 0 <= r < len(farm) and 0 <= c < len(farm[0]) and not visited[r][c] and farm[r][c] == color:\n                queue.append((r, c))\n    return area\n\ndef variant_one(m, n, farm):\n    visited = [[False]*n for _ in range(m)]\n    max_area = 0\n    for row in range(m):\n        for col in range(n):\n            if not visited[row][col]:\n                area = bfs(farm, (row, col), visited)\n                max_area = max(max_area, area)\n    return max_area\n\ndef variant_two(m, n, farm):\n    visited = [[False]*n for _ in range(m)]\n    parcel_sizes = defaultdict(int)\n    best_cell = (0, 0)\n    best_color = ''\n    best_increase = 0\n\n    for row in range(m):\n        for col in range(n):\n            if not visited[row][col]:\n                color = farm[row][col]\n                area = bfs(farm, (row, col), visited)\n                parcel_sizes[color] = max(parcel_sizes[color], area)\n\n    original_farm = [row[:] for row in farm]\n    for row in range(m):\n        for col in range(n):\n            original_color = farm[row][col]\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                r, c = row + dr, col + dc\n                if 0 <= r < m and 0 <= c < n and farm[r][c] != original_color:\n                    farm[row][col] = farm[r][c]\n                    visited = [[False]*n for _ in range(m)]\n                    new_area = bfs(farm, (r, c), visited)\n                    increase = new_area - parcel_sizes[original_color]\n                    if increase > best_increase:\n                        best_increase = increase\n                        best_cell = (row+1, col+1)  # Convert to 1-index\n                        best_color = farm[r][c]\n                    farm = [row[:] for row in original_farm]  # Reset farm to original state\n    return best_cell + (best_color,)\n\ndef solve_problem():\n    v, m, n, farm = parse_input('ferma.in')\n    if v == 1:\n        max_area = variant_one(m, n, farm)\n        write_output('ferma.out', max_area)\n    elif v == 2:\n        line_col_color = variant_two(m, n, farm)\n        write_output('ferma.out', line_col_color)\n\n# Running the actual solution\nsolve_problem()\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3064,
  "metadata": {
    "id": 850,
    "examples": [
      {
        "in": "1\n7 8\nrmmgggaa\nmvvgggaa\nmvvgvvvv\nvvvrvvvv\nvvrrrgga\nvvrrrggg\naaaaaaag",
        "out": "11",
        "explainer": ""
      },
      {
        "in": "2\n7 8\nrmmgggaa\nmvvgggaa\nmvvgvvvv\nvvvrvvvv\nvvrrrgga\nvvrrrggg\naaaaaaag",
        "out": "3 4\nv",
        "explainer": ""
      }
    ],
    "body": "Un fermier deține o fermă de formă dreptunghiulară cu lungimea $m$ metri și lățimea $n$ metri. Respectând principiul rotației culturilor, fermierul și a realizat un plan pentru semănarea culturilor în noul an. Astfel, el a desenat un dreptunghi pe care l-a împărțit în $m \\cdot n$ celule, fiecare corespunzând unui metru pătrat, și a colorat în culori diferite zonele care corespund unor culturi diferite. O cultură poate fi semănată pe mai multe parcele. Două celule care au o latură comună aparțin aceleiași parcele dacă au aceeași culoare (sunt însămânțate cu aceeași cultură).  Fermierul are posibilitatea să irige o sigură parcelă și dorește să aleagă parcela cu cea mai mare suprafață. Nefiind mulțumit de suprafața rezultată, s-a întrebat dacă ar putea schimba cultura de pe o singură celulă, astfel încât să obțină o parcelă de suprafață mai mare.\n\nExemplu de fermă (_imagine 1_):\n\n~[0.png]\n\n# Cerință\n\nDându-se dimensiunile fermei și pentru fiecare celulă culoarea corespunzătoare culturii semănate, determinați:\n\n1. **Varianta 1:** Suprafața maximă a unei parcele în planul inițial.\n2. **Varianta 2:** Numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură și culoarea corespunzătoare noii culturi în vederea obţinerii celei mai mari parcele posibile.\n\n\n# Date de intrare\n\n\nFișierul de intrare `ferma.in` va conține:]\n\n* pe prima linie un număr natural $v$ ($1 ≤ v ≤ 2$) indicând varianta cerinței de rezolvare\n* pe a doua linie două numere naturale $m$ şi $n$ separate printr-un spațiu, cu semnificația din enunț\n* pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ caractere (litere mici), reprezentând codurile culturilor ce vor fi semănate pe cele $n$ celule corespunzătoare fiecărei linii. \n\n\n# Date de ieșire\n\n\nFișierul de ieșire `ferma.out` va conține:\n**Varianta 1** – pentru $v=1$: \n* pe prima linie numărul natural $s$, reprezentând suprafața maximă a unei parcele.\n\n**Varianta 2** – pentru $v=2$: \n* pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură, în vederea obținerii unei parcele cu suprafața maximă; \n* pe a doua linie un caracter reprezentând codul culorii corespunzătoare noii culturi din celula determinată.\n\n\n# Restricții și precizări\n\n* $2 \\leq n, m \\leq 400$\n* Numărul de culturi distincte este cel puţin $2$ şi cel mult $26$.\n* $30\\%$ din teste vor avea pe prima linie valoarea $1$, iar restul de $70\\%$ din teste vor avea pe prima linie valoarea $2$.\n* Pentru varianta $2$ se punctează orice soluție care conduce la obținerea unei parcele cu suprafața maximă. Nu se acordă punctaje parțiale.",
    "header": {
      "problem_id": 850,
      "problem_name": "Ferma",
      "tags": "[Flood Fill]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.06,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "ferma.in",
      "output_filename": "ferma.out",
      "multiple_solutions": true,
      "original_source": "OJI 2014 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "ferma.in",
      "output": "ferma.out"
    },
    "consoleInteraction": false
  }
}