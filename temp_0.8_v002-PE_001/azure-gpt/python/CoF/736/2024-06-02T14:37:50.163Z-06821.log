---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# maxd.py
import numpy as np

# Function to calculate number of divisors of all numbers in a range
def count_divisors(start, end):
    divisors = np.ones(end - start + 1, dtype=np.int32)
    for i in range(2, end - start + 2):
        divisors[(start % i):(end - start + 1):i] += 1
    return divisors

# Read input data
with open('maxd.in', 'r') as fin:
    a, b = map(int, fin.readline().split())

# Count divisors
div_counts = count_divisors(a, b)

# Find the maximum number of divisors and related information
max_divisors = np.max(div_counts)
min_val_with_max_div = a + np.argmin(div_counts != max_divisors)
count_of_max_div = np.sum(div_counts == max_divisors)

# Write output data
with open('maxd.out', 'w') as fout:
    fout.write(f"{min_val_with_max_div} {max_divisors} {count_of_max_div}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 2, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the exit code 1 is the result of the `numpy` module not being installed or accessible in the environment where the code was executed. However, since this is a programming challenge and the environment does not have `numpy`, I will rewrite the solution without using `numpy` or any other external libraries. The solution should efficiently calculate the number of divisors for each number in the range and determine the minimum number with the maximum number of divisors.

Here's the updated solution:

```python
# maxd.py

# Function to calculate the number of divisors for a given number
def number_of_divisors(n):
    divisors = 0
    sqrt_n = int(n ** 0.5)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            divisors += 2 if n // i != i else 1
    return divisors

# Read input data from file
with open('maxd.in', 'r') as fin:
    a, b = map(int, fin.readline().split())

# Initialize variables
max_divisors = 0
min_val_with_max_div = 0
count_of_max_div = 0

# Iterate over the range to find the number with the maximum divisors
for number in range(a, b + 1):
    div_count = number_of_divisors(number)
    if div_count > max_divisors:
        max_divisors = div_count
        min_val_with_max_div = number
        count_of_max_div = 1
    elif div_count == max_divisors:
        count_of_max_div += 1

# Write output data to file
with open('maxd.out', 'w') as fout:
    fout.write(f"{min_val_with_max_div} {max_divisors} {count_of_max_div}\n")
```

This solution ensures that we stay within the memory limit by not creating large arrays or utilizing external libraries. We simply iterate through each number, calculate its divisors, and keep track of the number with the most divisors and how many numbers have that number of divisors.
