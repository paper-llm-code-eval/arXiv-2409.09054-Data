---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def calculate_divisors(n):
    divisors = np.ones((n + 1,), dtype=np.int32)
    for i in range(2, int(np.sqrt(n)) + 1):
        if divisors[i] == 1:
            divisors[i * i:n + 1:i] += 1
    return divisors

def write_output(filename, min_num, max_div, count):
    with open(filename, 'w') as f:
        f.write(f"{min_num} {max_div} {count}\n")

def main():
    with open('maxd.in', 'r') as f:
        a, b = map(int, f.readline().split())

    num_range = b - a + 1

    # Calculate number of divisors for each number in the range
    divisors = calculate_divisors(b)
    max_div = np.max(divisors[a:b + 1])
    min_num = np.where(divisors == max_div)[0][0]
    count = np.count_nonzero(divisors[a:b + 1] == max_div)

    # Write results to output file
    write_output('maxd.out', min_num, max_div, count)

if __name__ == '__main__':
    main()
```

This code represents an efficient solution using numpy, which is highly optimized for numerical computations and should meet the memory limitations. The `calculate_divisors` function precalculates the number of divisors for each number up to `b`, and `np.where` is used to find the smallest number with the maximum number of divisors. The `np.count_nonzero` function is used to count how many numbers have this same maximum number of divisors. The results are then written to an output file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error indicates that the `numpy` module is not available in the current environment. Since the use of `numpy` is not possible due to this ModuleNotFoundError, I will implement a solution without using external libraries, relying only on built-in Python functionality to ensure compatibility and to meet the memory limitations. Here is the rewritten solution:

```python
def count_divisors(n):
    count = 0
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            count += 2 if i != n // i else 1
    return count

def main():
    # Read input
    with open('maxd.in', 'r') as file:
        a, b = map(int, file.readline().split())

    # Find the number with the maximum number of divisors
    max_divisors = 0
    min_number = 0
    counter = 0
    for i in range(a, b + 1):
        divisors = count_divisors(i)
        if divisors > max_divisors:
            max_divisors = divisors
            min_number = i
            counter = 1
        elif divisors == max_divisors:
            counter += 1

    # Write output
    with open('maxd.out', 'w') as file:
        file.write(f"{min_number} {max_divisors} {counter}\n")

if __name__ == '__main__':
    main()
```

This implementation uses a function `count_divisors` to calculate the number of divisors for a given number `n`. The main function then iterates through the range `[a, b]`, counting divisors for each number and keeping track of the number with the maximum number of divisors, as well as how many numbers have that maximum count. It writes the output to `maxd.out` as specified.
