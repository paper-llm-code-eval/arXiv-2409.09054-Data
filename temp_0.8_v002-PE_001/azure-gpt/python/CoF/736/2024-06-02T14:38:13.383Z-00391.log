---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

def number_of_divisors(n):
    sqrt_n = int(np.sqrt(n))
    divisors = np.zeros(sqrt_n + 1, dtype=np.int32)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            divisors[i] = 1
            if i != n // i:
                divisors[n // i] = 1
    return np.sum(divisors)

def main():
    with open('maxd.in', 'r') as file:
        a, b = map(int, file.readline().split())

    max_divisors = 0
    min_value = 0
    counter = 0

    for number in range(a, b + 1):
        divisors = number_of_divisors(number)
        if divisors > max_divisors:
            max_divisors = divisors
            min_value = number
            counter = 1
        elif divisors == max_divisors:
            counter += 1

    with open('maxd.out', 'w') as file:
        file.write(f"{min_value} {max_divisors} {counter}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `maxd.out` and read from `maxd.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Efficient function to count divisors using prime factorization
def count_divisors(n):
    divisors = 1
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            cnt = 0
            while n % i == 0:
                cnt += 1
                n //= i
            divisors *= (cnt + 1)
    if n > 1:
        divisors *= 2
    return divisors

# Main function to find the minimum number with the maximum number of divisors
def main():
    # Read the interval from the 'maxd.in' file
    with open('maxd.in', 'r') as infile:
        a, b = map(int, infile.readline().split())
        
    max_div = 0
    min_num = 0
    count = 0
    
    # Iterate over each number in the interval to find the one with the maximum divisors
    for num in range(a, b + 1):
        # Count the number of divisors for the current number
        div = count_divisors(num)
        
        # If this is the new maximum, update the variables
        if div > max_div:
            max_div = div
            min_num = num
            count = 1
        # If this number has the same number of divisors as the current maximum, increment the counter
        elif div == max_div:
            count += 1
            
    # Write the result to the 'maxd.out' file
    with open('maxd.out', 'w') as outfile:
        outfile.write(f"{min_num} {max_div} {count}\n")

# Execute the main function
if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `maxd.out` and read from `maxd.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
import numpy as np

def sieve_of_eratosthenes(max_number):
    # Create a boolean array "prime[0..n]" and initialize all entries it as true.
    # A value in prime[i] will finally be false if i is Not a prime, else true.
    prime = np.ones(max_number+1, dtype=bool)
    prime[0] = prime[1] = False
    p = 2
    while (p * p <= max_number):
        # If prime[p] is not changed, then it is a prime
        if prime[p]:
            # Update all multiples of p
            for i in range(p * p, max_number+1, p):
                prime[i] = False
        p += 1
    return prime

def count_divisors(n, primes):
    divisors = 1
    for p in primes:
        if p*p > n:
            break
        count = 1
        while n % p == 0:
            n //= p
            count += 1
        divisors *= count
    if n > 1:
        divisors *= 2
    return divisors

# Read the interval from the 'maxd.in' file
with open('maxd.in', 'r') as infile:
    a, b = map(int, infile.readline().split())

# Generate all prime numbers up to the square root of b using Sieve of Eratosthenes
primes = np.nonzero(sieve_of_eratosthenes(int(b**0.5)))[0]

max_div = 0
min_num = 0
counter = 0

# Iterate over each number in the interval to find the one with the most divisors
for num in range(a, b + 1):
    divisors = count_divisors(num, primes)
    if divisors > max_div:
        max_div = divisors
        min_num = num
        counter = 1
    elif divisors == max_div:
        counter += 1

# Write the result to the 'maxd.out' file
with open('maxd.out', 'w') as outfile:
    outfile.write(f"{min_num} {max_div} {counter}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error output indicates that the `numpy` module is not found. This means that the `numpy` library is not installed in the environment where the code is being executed, or the code execution environment does not allow external libraries.

Since we have a memory constraint for the problem and must optimize the solution without `numpy`, we can rewrite the solution using the Python Standard Library only. Let's remove the `numpy` dependency and implement the program using pure Python:

```python
def count_divisors(n):
    divisors = 0
    sqrt_n = int(n**0.5)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            divisors += 2 if i != n // i else 1
    return divisors

# Read the interval from the 'maxd.in' file
with open('maxd.in', 'r') as infile:
    a, b = map(int, infile.readline().split())

max_div = 0
min_num = 0
counter = 0

# Iterate over each number in the interval to find the one with the most divisors
for num in range(a, b + 1):
    divisors = count_divisors(num)
    if divisors > max_div:
        max_div = divisors
        min_num = num
        counter = 1
    elif divisors == max_div:
        counter += 1

# Write the result to the 'maxd.out' file
with open('maxd.out', 'w') as outfile:
    outfile.write(f"{min_num} {max_div} {counter}\n")
```
