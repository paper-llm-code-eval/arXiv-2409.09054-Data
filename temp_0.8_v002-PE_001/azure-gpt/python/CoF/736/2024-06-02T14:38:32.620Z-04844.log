---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory. Using too much memory may result in OOM.
The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import numpy as np

def count_divisors(n):
    sqrt_n = int(np.sqrt(n))
    divisors = 2 * np.sum(n % np.arange(1, sqrt_n + 1) == 0) - (sqrt_n * sqrt_n == n)
    return divisors if n > 1 else 1

# Read input interval from file
with open('maxd.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Initialize max number of divisors found, its associated number, and counter
max_divisors = 0
min_number_with_max_divisors = 0
counter = 0

# Find the minimum number with the maximum number of divisors
for number in range(a, b + 1):
    num_divisors = count_divisors(number)
    if num_divisors > max_divisors:
        max_divisors = num_divisors
        min_number_with_max_divisors = number
        counter = 1
    elif num_divisors == max_divisors:
        counter += 1

# Write the result to file
with open('maxd.out', 'w') as file:
    file.write(f'{min_number_with_max_divisors} {max_divisors} {counter}\n')
```

This solution calculates the number of divisors for each number in the given interval, iterating only once from `a` to `b`. It keeps track of the maximum number of divisors found so far, the number associated with that maximum, and a counter for how many numbers have that many divisors. The `count_divisors` function uses NumPy for efficient computation. When writing and reading files, it follows the requirements to read from `maxd.in` and write to `maxd.out`. Please note that since the problem states a strict memory limit, the `count_divisors` function is optimized to avoid creating large arrays in memory and instead uses a summation approach.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 1, in <module>
    import numpy as np
ModuleNotFoundError: No module named 'numpy'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the program exited with code 1 due to the `numpy` module not being found. This indicates that the `numpy` library is not installed in the environment where the program was executed. 

However, since we're constrained by a memory limit, we should avoid using libraries like `numpy` that could potentially use more memory than allowed. Instead, we can implement the divisor counting logic without relying on additional libraries.

Below is the revised solution, which removes the dependency on `numpy` and instead uses pure Python to solve the problem:

```python
def count_divisors(n):
    divisors = 0
    sqrt_n = int(n**0.5)
    for i in range(1, sqrt_n + 1):
        if n % i == 0:
            divisors += 2 if i != n // i else 1
    return divisors

# Read input interval from file
with open('maxd.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Initialize max number of divisors found, its associated number, and counter
max_divisors = 0
min_number_with_max_divisors = 0
counter = 0

# Find the minimum number with the maximum number of divisors
for number in range(a, b + 1):
    num_divisors = count_divisors(number)
    if num_divisors > max_divisors:
        max_divisors = num_divisors
        min_number_with_max_divisors = number
        counter = 1
    elif num_divisors == max_divisors:
        counter += 1

# Write the result to file
with open('maxd.out', 'w') as file:
    file.write(f'{min_number_with_max_divisors} {max_divisors} {counter}\n')
```

This code will run in an environment without the `numpy` module and should still remain within the memory limit constraints. The function `count_divisors` efficiently counts the divisors of a given number by checking divisibility up to the square root of the number. If a divisor is found, it increments the count by 2 to account for both the divisor and its complement, except when the divisor is the square root itself, in which case it increments by 1. The rest of the logic remains the same as in the previous solution.
