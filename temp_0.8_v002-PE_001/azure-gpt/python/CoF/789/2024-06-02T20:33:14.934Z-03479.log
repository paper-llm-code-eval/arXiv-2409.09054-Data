---------- user ----------

Here is a programming challenge.
Please solve this problem efficiently, optimizing both time and memory usage.
Create the most efficient solution for this challenge in python. Utilize numpy and other highly efficient libraries whenever possible.
This problem has a memory limit of ~8MB so please be sensitive on using memory.Using unavoided memory may result in OOM.
The code must compile and be correct.
The solution must read from `startrek.in` and write to `startrek.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jean-Luc Picard, căpitanul navei spațiale Enterprise, a constatat că în vecinătatea navei sale au apărut $n$ nave borgiene. Distanțele dintre acestea și nava Enterprise sunt $d_1, d_2, \dots, d_n$. Navele borgiene nu se deplasează unele în raport cu altele și nici în raport cu nava Enterprise. Pozițiile în spațiu ale celor $n$ nave borgiene și poziția navei Enterprise sunt distincte două câte două (nu există două nave care să ocupe același punct în spațiul tridimensional).

La un moment dat, toate cele $n$ nave borgiene declanșează simultan atacul, lansând câte un proiectil în direcția navei Enterprise. Pereții navei Enterprise sunt rezistenți la asemenea atacuri, însă căpitanul decide să distrugă un număr maxim de proiectile cu ajutorul armei laser. Cele n proiectile se deplasează cu vitezele constante $v_1, v_2, \dots, v_n$ exprimate în metri pe secundă. Căpitanul Jean-Luc Picard are la dispoziție o armă laser cu care poate distruge pe rând câte un proiectil. Arma poate fi orientată instantaneu spre oricare navă borgiană. Arma laser poate executa oricâte trageri începând cu momentul declanșării atacului, dar după fiecare tragere are nevoie de $t$ secunde pentru a se reîncărca cu energie. În acest interval de timp nu se poate efectua o altă tragere. Orientarea armei laser spre un anumit proiectil nu consumă timp. De asemenea, timpul scurs între momentul tragerii și distrugerea proiectilului vizat este zero. Căpitanul nu ratează ținta niciodată, iar proiectilele care reușesc să lovească nava Enterprise nu-l pot împiedica pe căpitanul Picard să continue să tragă asupra altor proiectile aflate în mișcare.

# Cerință

Să se găsească numărul maxim de proiectile care pot fi distruse cu arma laser.

# Date de intrare

Fișierul de intrare `startrek.in` conține pe prima linie numerele naturale $n$ și $t$, reprezentând numărul de nave borgiene, respectiv timpul de reîncărcare a armei laser cu energie. Pe linia a doua, sunt $n$ numere naturale $d_1 \ d_2 \ \dots \ d_n$ reprezentând distanțele la care se găsesc navele borgiene față de nava Enterprise. Pe linia a treia se găsesc $n$ numere naturale $v_1, v_2, \dots, v_n$ reprezentând vitezele de deplasare ale celor $n$ proiectile.

# Date de ieșire

În fișierul de ieșire `startrek.out` va conține un număr natural $p$, reprezentând numărul maxim de proiectile distruse.

# Restricții și precizări

* $2 \leq n \leq 4 \ 000$;
* $1 \leq d_1, d_2, \dots, d_n \leq 10 \ 000$;
* $1 \leq v_1, v_2, \dots, v_n$;
* $t \leq 1 \ 000$;
* Dacă momentul în care un proiectil ar trebui să lovească nava coincide cu momentul în care se trage cu arma laser asupra lui, se consideră că Enterprise distruge acel proiectil.
* Dacă viteza unui proiectil este $v$, atunci în timpul $t$, acesta străbate distanța $d = v \cdot t$

---

Example:
`startrek.in`
```
3 4
4 3 6
2 1 1
```

`startrek.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
import numpy as np

# Read the data from the file
with open('startrek.in', 'r') as file:
    n, t = map(int, file.readline().split())
    distances = np.array(file.readline().split(), dtype=int)
    velocities = np.array(file.readline().split(), dtype=int)

# Calculate the time it would take each projectile to reach the Enterprise
times_to_reach = distances / velocities

# Sort the times to reach in ascending order
sorted_indices = np.argsort(times_to_reach)
sorted_times_to_reach = times_to_reach[sorted_indices]

# Calculate the maximum number of projectiles that can be destroyed
num_destroyed = 0
current_time = 0
for time in sorted_times_to_reach:
    if time >= current_time:
        num_destroyed += 1
        current_time = time + t

# Write the result to the file
with open('startrek.out', 'w') as file:
    file.write(str(num_destroyed))
```
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the file
with open('startrek.in', 'r') as file:
    n, t = map(int, file.readline().split())
    distances = np.array(file.readline().split(), dtype=np.float64)
    velocities = np.array(file.readline().split(), dtype=np.float64)

# Calculate the time it would take each projectile to reach the Enterprise
times_to_reach = distances / velocities

# Sort the times to reach in ascending order
sorted_indices = np.argsort(times_to_reach)
sorted_times_to_reach = times_to_reach[sorted_indices]

# Calculate the maximum number of projectiles that can be destroyed
num_destroyed = 0
current_time = 0
for time in sorted_times_to_reach:
    if time >= current_time:
        num_destroyed += 1
        current_time = time + t

# Write the result to the file
with open('startrek.out', 'w') as file:
    file.write(str(num_destroyed))
```
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the data from the file
    with open('startrek.in', 'r') as file:
        n, t = map(int, file.readline().split())
        distances = np.fromstring(file.readline(), dtype=int, sep=' ')
        velocities = np.fromstring(file.readline(), dtype=int, sep=' ')

    # Calculate the time it would take each projectile to reach the Enterprise
    times_to_reach = distances / velocities

    # Sort the times to reach in ascending order
    sorted_indices = np.argsort(times_to_reach)
    sorted_times_to_reach = times_to_reach[sorted_indices]

    # Calculate the maximum number of projectiles that can be destroyed
    num_destroyed = 0
    current_time = 0
    for time in sorted_times_to_reach:
        if time >= current_time:
            num_destroyed += 1
            current_time = time + t

    # Write the result to the file
    with open('startrek.out', 'w') as file:
        file.write(str(num_destroyed))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the file
with open('startrek.in', 'r') as file:
    n, t = map(int, file.readline().split())
    distances = np.array(file.readline().split(), dtype=np.float64)
    velocities = np.array(file.readline().split(), dtype=np.float64)

# Calculate the time it would take each projectile to reach the Enterprise
times_to_reach = distances / velocities

# Sort the times to reach in ascending order
sorted_indices = np.argsort(times_to_reach)
sorted_times_to_reach = times_to_reach[sorted_indices]

# Calculate the maximum number of projectiles that can be destroyed
num_destroyed = 0
current_time = 0
for time in sorted_times_to_reach:
    if time >= current_time:
        num_destroyed += 1
        current_time = time + t

# Write the result to the file
with open('startrek.out', 'w') as file:
    file.write(str(num_destroyed))
```
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

# Read the data from the file
with open('startrek.in', 'r') as file:
    n, t = map(int, file.readline().split())
    distances = np.fromstring(file.readline().strip(), dtype=int, sep=' ')
    velocities = np.fromstring(file.readline().strip(), dtype=int, sep=' ')

# Calculate the time it would take each projectile to reach the Enterprise
times_to_reach = distances / velocities

# Sort the times to reach in ascending order
sorted_indices = np.argsort(times_to_reach)
sorted_times_to_reach = times_to_reach[sorted_indices]

# Calculate the maximum number of projectiles that can be destroyed
num_destroyed = 0
current_time = 0
for time in sorted_times_to_reach:
    if time >= current_time:
        num_destroyed += 1
        current_time = time + t

# Write the result to the file
with open('startrek.out', 'w') as file:
    file.write(str(num_destroyed))
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
import numpy as np

def main():
    # Read the data from the file
    with open('startrek.in', 'r') as file:
        n, t = map(int, file.readline().split())
        distances = np.array(file.readline().split(), dtype=np.int32)
        velocities = np.array(file.readline().split(), dtype=np.int32)

    # Calculate the time it would take each projectile to reach the Enterprise
    times_to_reach = distances / velocities

    # Sort the times to reach in ascending order
    sorted_indices = np.argsort(times_to_reach)
    sorted_times_to_reach = times_to_reach[sorted_indices]

    # Calculate the maximum number of projectiles that can be destroyed
    num_destroyed = 0
    current_time = 0
    for time in sorted_times_to_reach:
        if time >= current_time:
            num_destroyed += 1
            current_time = time + t

    # Write the result to the file
    with open('startrek.out', 'w') as file:
        file.write(str(num_destroyed))

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `startrek.out` and read from `startrek.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Import the numpy library
import numpy as np

# Open the input file and read the input data
with open('startrek.in', 'r') as file:
    n, t = map(int, file.readline().split())
    distances = np.array(file.readline().split(), dtype=np.int32)
    velocities = np.array(file.readline().split(), dtype=np.int32)

# Compute the arrival times for each projectile
arrival_times = distances / velocities

# Sort the projectiles by their arrival times
sorted_indices = np.argsort(arrival_times)
sorted_arrival_times = arrival_times[sorted_indices]

# Initialize the number of destroyed projectiles and the time of the last shot
destroyed = 0
last_shot_time = 0

# Loop through the sorted projectiles
for arrival_time in sorted_arrival_times:
    # If the current projectile arrives after the last shot time plus recharge time
    if arrival_time >= last_shot_time:
        # Destroy the projectile
        destroyed += 1
        # Update the last shot time to the current projectile's arrival time plus the recharge time
        last_shot_time = arrival_time + t

# Open the output file and write the number of destroyed projectiles
with open('startrek.out', 'w') as file:
    file.write(str(destroyed))
```
```
