{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/26/2024-09-15T19:27:37.931Z-02712.log",
  "attemptStart": 1726428457.931,
  "attemptEnd": 1726428515.002,
  "attemptDuration": 57.07100009918213,
  "code": "#include <fstream>\n#include <vector>\n#include <utility>\n#include <algorithm>\n\nint main() {\n    std::ifstream input(\"armonica.in\");\n    std::ofstream output(\"armonica.out\");\n\n    long long b;\n    input >> b;\n\n    std::vector<std::pair<long long, long long>> pairs;\n    \n    for (long long a = 1; a <= 2 * b; ++a) {\n        if ((2 * a - b) > 0 && (a * b) % (2 * a - b) == 0) {\n            long long c = (a * b) / (2 * a - b);\n            pairs.emplace_back(a, c);\n        }\n    }\n\n    // Custom sorting to match the expected output order\n    std::sort(pairs.begin(), pairs.end(), [](const std::pair<long long, long long>& p1, const std::pair<long long, long long>& p2) {\n        long long sum1 = p1.first + p1.second;\n        long long sum2 = p2.first + p2.second;\n        if (sum1 == sum2) {\n            if (p1.first == p2.first) return p1.second < p2.second;\n            return p1.first < p2.first;\n        }\n        return sum1 < sum2;\n    });\n\n    output << pairs.size() << \"\\n\";\n    for (const auto& pair : pairs) {\n        output << pair.first << \" \" << pair.second << \"\\n\";\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4713,
  "metadata": {
    "id": 26,
    "examples": [
      {
        "in": "3",
        "out": "3\n3 3\n2 6\n6 2",
        "explainer": ""
      }
    ],
    "body": "Spunem că trei numere `a, b, c` sunt în progresie armonică dacă `b` este media armonică a numerelor `a` și `c`, adică \n\n$$\nb=\\frac{2}{\\frac{1}{a}+\\frac{1}{c}}=\\frac{2ac}{a+c}\n$$\n\n# Cerinţe\nCunoscând un număr natural `b` să se determine toate perechile de numere naturale `(a, c)` pentru care `a, b, c` sunt în progresie armonică.\n\n# Date de intrare\nFișierul de intrare `armonica.in` conține pe prima linie un număr natural `b`. \n\n# Date de ieşire\nFișierul de iesire `armonica.out` va conține pe prima linie un număr natural `n` reprezentând numărul de perechi de numere naturale `(a,c)` pentru care `b` este media armonică. Pe următoarele `n` linii se vor afișa perechile de numere cerute. Astfel fiecare dintre următoarele `n` linii vor conține căte două numere `a` și `c` separate printr-un spațiu cu semnificația că `b` este medie armonică a numerelor `a` și `c`. \n\n# Restricţii și precizări\n* `1 ≤ b ≤ 1 000 000 000`;\n* Pentru teste în valoare de `40` de puncte avem `b ≤ 1 000 000`;\n* Perechile de numere din fișierul de ieșire pot fi afișate în orice ordine;\n* Dacă `b` este medie armonică între două numere diferite `a` și `c` atunci perechile `(a,c)` și `(c,a)` sunt considerate soluții distincte.\n* Problema va fi evaluată pe teste în valoare de `90` de puncte.\n* Se vor acorda `10` puncte din oficiu.",
    "header": {
      "problem_id": 26,
      "problem_name": "armonica",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "armonica.in",
      "output_filename": "armonica.out",
      "multiple_solutions": true,
      "original_source": "OJI 2017 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "armonica.in",
      "output": "armonica.out"
    },
    "consoleInteraction": false
  }
}