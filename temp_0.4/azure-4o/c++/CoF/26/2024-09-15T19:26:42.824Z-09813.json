{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/26/2024-09-15T19:26:42.824Z-09813.log",
  "attemptStart": 1726428402.824,
  "attemptEnd": 1726428549.315,
  "attemptDuration": 146.49100017547607,
  "code": "#include <fstream>\n#include <vector>\n#include <utility>\n#include <algorithm>\n\nint main() {\n    // Open input and output files\n    std::ifstream inFile(\"armonica.in\");\n    std::ofstream outFile(\"armonica.out\");\n\n    // Read the value of b from the input file\n    unsigned int b;\n    inFile >> b;\n\n    // Vectors to store the pairs of (a, c)\n    std::vector<std::pair<unsigned int, unsigned int>> equalPairs;\n    std::vector<std::pair<unsigned int, unsigned int>> unequalPairs;\n\n    // Iterate over possible values of a\n    for (unsigned int a = 1; a <= 2 * b; ++a) {\n        // Calculate c using the rearranged harmonic mean formula\n        if ((2 * a - b) > 0 && (b * a) % (2 * a - b) == 0) {\n            unsigned int c = (b * a) / (2 * a - b);\n            if (c > 0) {\n                if (a == c) {\n                    equalPairs.emplace_back(a, c);\n                } else {\n                    unequalPairs.emplace_back(a, c);\n                }\n            }\n        }\n    }\n\n    // Sort the unequal pairs to match the expected output order\n    std::sort(unequalPairs.begin(), unequalPairs.end());\n\n    // Write the number of pairs to the output file\n    outFile << equalPairs.size() + unequalPairs.size() << \"\\n\";\n\n    // Write each equal pair to the output file\n    for (const auto& pair : equalPairs) {\n        outFile << pair.first << \" \" << pair.second << \"\\n\";\n    }\n\n    // Write each unequal pair to the output file\n    for (const auto& pair : unequalPairs) {\n        outFile << pair.first << \" \" << pair.second << \"\\n\";\n    }\n\n    // Close the files\n    inFile.close();\n    outFile.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 11818,
  "metadata": {
    "id": 26,
    "examples": [
      {
        "in": "3",
        "out": "3\n3 3\n2 6\n6 2",
        "explainer": ""
      }
    ],
    "body": "Spunem că trei numere `a, b, c` sunt în progresie armonică dacă `b` este media armonică a numerelor `a` și `c`, adică \n\n$$\nb=\\frac{2}{\\frac{1}{a}+\\frac{1}{c}}=\\frac{2ac}{a+c}\n$$\n\n# Cerinţe\nCunoscând un număr natural `b` să se determine toate perechile de numere naturale `(a, c)` pentru care `a, b, c` sunt în progresie armonică.\n\n# Date de intrare\nFișierul de intrare `armonica.in` conține pe prima linie un număr natural `b`. \n\n# Date de ieşire\nFișierul de iesire `armonica.out` va conține pe prima linie un număr natural `n` reprezentând numărul de perechi de numere naturale `(a,c)` pentru care `b` este media armonică. Pe următoarele `n` linii se vor afișa perechile de numere cerute. Astfel fiecare dintre următoarele `n` linii vor conține căte două numere `a` și `c` separate printr-un spațiu cu semnificația că `b` este medie armonică a numerelor `a` și `c`. \n\n# Restricţii și precizări\n* `1 ≤ b ≤ 1 000 000 000`;\n* Pentru teste în valoare de `40` de puncte avem `b ≤ 1 000 000`;\n* Perechile de numere din fișierul de ieșire pot fi afișate în orice ordine;\n* Dacă `b` este medie armonică între două numere diferite `a` și `c` atunci perechile `(a,c)` și `(c,a)` sunt considerate soluții distincte.\n* Problema va fi evaluată pe teste în valoare de `90` de puncte.\n* Se vor acorda `10` puncte din oficiu.",
    "header": {
      "problem_id": 26,
      "problem_name": "armonica",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "armonica.in",
      "output_filename": "armonica.out",
      "multiple_solutions": true,
      "original_source": "OJI 2017 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "armonica.in",
      "output": "armonica.out"
    },
    "consoleInteraction": false
  }
}