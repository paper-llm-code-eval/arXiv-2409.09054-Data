{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/26/2024-09-15T19:26:59.125Z-00658.log",
  "attemptStart": 1726428419.125,
  "attemptEnd": 1726428457.931,
  "attemptDuration": 38.805999994277954,
  "code": "#include <fstream>\n#include <vector>\n#include <utility>\n#include <algorithm>\n\nint main() {\n    std::ifstream input(\"armonica.in\");\n    std::ofstream output(\"armonica.out\");\n\n    long long b;\n    input >> b;\n\n    std::vector<std::pair<long long, long long>> pairs;\n\n    for (long long a = 1; a <= 2 * b; ++a) {\n        long long numerator = b * a;\n        long long denominator = 2 * a - b;\n\n        if (denominator > 0 && numerator % denominator == 0) {\n            long long c = numerator / denominator;\n            pairs.emplace_back(a, c);\n        }\n    }\n\n    // Separate the pairs into three categories\n    std::vector<std::pair<long long, long long>> equal_pairs;\n    std::vector<std::pair<long long, long long>> ascending_pairs;\n    std::vector<std::pair<long long, long long>> descending_pairs;\n\n    for (const auto& pair : pairs) {\n        if (pair.first == pair.second) {\n            equal_pairs.push_back(pair);\n        } else if (pair.first < pair.second) {\n            ascending_pairs.push_back(pair);\n        } else {\n            descending_pairs.push_back(pair);\n        }\n    }\n\n    // Sort the pairs within each category\n    std::sort(equal_pairs.begin(), equal_pairs.end());\n    std::sort(ascending_pairs.begin(), ascending_pairs.end());\n    std::sort(descending_pairs.begin(), descending_pairs.end());\n\n    // Output the results in the required order\n    output << pairs.size() << \"\\n\";\n    for (const auto& pair : equal_pairs) {\n        output << pair.first << \" \" << pair.second << \"\\n\";\n    }\n    for (const auto& pair : ascending_pairs) {\n        output << pair.first << \" \" << pair.second << \"\\n\";\n    }\n    for (const auto& pair : descending_pairs) {\n        output << pair.first << \" \" << pair.second << \"\\n\";\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3201,
  "metadata": {
    "id": 26,
    "examples": [
      {
        "in": "3",
        "out": "3\n3 3\n2 6\n6 2",
        "explainer": ""
      }
    ],
    "body": "Spunem că trei numere `a, b, c` sunt în progresie armonică dacă `b` este media armonică a numerelor `a` și `c`, adică \n\n$$\nb=\\frac{2}{\\frac{1}{a}+\\frac{1}{c}}=\\frac{2ac}{a+c}\n$$\n\n# Cerinţe\nCunoscând un număr natural `b` să se determine toate perechile de numere naturale `(a, c)` pentru care `a, b, c` sunt în progresie armonică.\n\n# Date de intrare\nFișierul de intrare `armonica.in` conține pe prima linie un număr natural `b`. \n\n# Date de ieşire\nFișierul de iesire `armonica.out` va conține pe prima linie un număr natural `n` reprezentând numărul de perechi de numere naturale `(a,c)` pentru care `b` este media armonică. Pe următoarele `n` linii se vor afișa perechile de numere cerute. Astfel fiecare dintre următoarele `n` linii vor conține căte două numere `a` și `c` separate printr-un spațiu cu semnificația că `b` este medie armonică a numerelor `a` și `c`. \n\n# Restricţii și precizări\n* `1 ≤ b ≤ 1 000 000 000`;\n* Pentru teste în valoare de `40` de puncte avem `b ≤ 1 000 000`;\n* Perechile de numere din fișierul de ieșire pot fi afișate în orice ordine;\n* Dacă `b` este medie armonică între două numere diferite `a` și `c` atunci perechile `(a,c)` și `(c,a)` sunt considerate soluții distincte.\n* Problema va fi evaluată pe teste în valoare de `90` de puncte.\n* Se vor acorda `10` puncte din oficiu.",
    "header": {
      "problem_id": 26,
      "problem_name": "armonica",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "armonica.in",
      "output_filename": "armonica.out",
      "multiple_solutions": true,
      "original_source": "OJI 2017 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "armonica.in",
      "output": "armonica.out"
    },
    "consoleInteraction": false
  }
}