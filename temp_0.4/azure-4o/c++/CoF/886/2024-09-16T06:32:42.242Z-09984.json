{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/886/2024-09-16T06:32:42.242Z-09984.log",
  "attemptStart": 1726468362.242,
  "attemptEnd": 1726468393.592,
  "attemptDuration": 31.34999990463257,
  "code": "#include <iostream>\n#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MOD = 1000003;\n\nint main() {\n    ifstream fin(\"triunghiuri.in\");\n    ofstream fout(\"triunghiuri.out\");\n\n    int p, N;\n    fin >> p >> N;\n\n    vector<pair<int, int>> points(N);\n    unordered_map<int, int> x_count;\n    unordered_map<int, vector<int>> y_to_x;\n\n    for (int i = 0; i < N; ++i) {\n        int x, y;\n        fin >> x >> y;\n        points[i] = {x, y};\n        x_count[x]++;\n        y_to_x[y].push_back(x);\n    }\n\n    if (p == 1) {\n        int max_count = 0;\n        for (const auto& entry : x_count) {\n            max_count = max(max_count, entry.second);\n        }\n        fout << max_count << endl;\n    } else if (p == 2) {\n        long long triangle_count = 0;\n\n        for (const auto& entry : y_to_x) {\n            const vector<int>& x_coords = entry.second;\n            int m = x_coords.size();\n            if (m < 2) continue;\n\n            // Count pairs of points on the same y-coordinate\n            for (int i = 0; i < m; ++i) {\n                for (int j = i + 1; j < m; ++j) {\n                    int x1 = x_coords[i];\n                    int x2 = x_coords[j];\n                    int base_length = abs(x1 - x2);\n\n                    // Count valid third vertices\n                    for (const auto& point : points) {\n                        if (point.second != entry.first && abs(point.first - x1) != 0 && abs(point.first - x2) != 0) {\n                            triangle_count++;\n                            if (triangle_count >= MOD) {\n                                triangle_count %= MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        fout << triangle_count << endl;\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2810,
  "metadata": {
    "id": 886,
    "examples": [
      {
        "in": "1\n5\n2 1\n1 4\n3 4\n3 2\n6 4",
        "out": "2",
        "explainer": ""
      },
      {
        "in": "2\n5\n2 1\n1 4\n3 4\n3 2\n6 4",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte din plan, având coordonate numere naturale, relativ la un reper cartezian XOY, oricare două puncte fiind distincte.\n\n~[triunghiuri.png]\n\n# Cerință\n\nCunoscând $N$ și coordonatele celor $N$ puncte, să se determine:\n\n1. Numărul maxim de puncte care au aceeași abscisă.\n2. Numărul triunghiurilor care se pot desena respectând următoarele condiții:\n\t* au toate vârfurile în puncte dintre cele date;\n\t* au o latură paralelă cu OX;\n\t* **nu** au laturi paralele cu OY;\n\n# Date de intrare\n\nDatele de intrare se citesc din fișierul `triunghiuri.in`, care are următoarea structură:\n\nPe prima linie se află numărul $p$, care indică cerința ce trebuie rezolvată ($p$ are valoarea $1$ sau $2$);\nPe a doua linie se află numărul natural $N$, reprezentând numărul punctelor date;\nPe următoarele $N$ linii se găsesc câte două valori naturale $x \\ y$, separate prin câte un spațiu, reprezentând coordonatele punctelor date.\n\n# Date de ieșire\n\nFișierul `triunghiuri.out` va avea următoarea structură:\n\nDacă $p = 1$ se va scrie în fișier, pe prima linie, numărul maxim de puncte care au aceeași abscisă (cerința $1$).\nDacă $p = 2$ se va scrie în fișier, pe prima linie, numărul triunghiurilor care se pot desena respectând condițiile date, modulo $1 \\ 000 \\ 003$, adică restul împărțirii numărului de triunghiuri la $1 \\ 000 \\ 003$ (cerința $2$).\n\n# Restricții și precizări\n\n* $3 \\leq N \\leq 100 \\ 000$;\n* $0 \\leq x, y \\leq 1 000$;\n* Se acordă $25$ de puncte pentru rezolvarea corectă a cerinței $1$ și $65$ de puncte pentru rezolvarea corectă a cerinței $2$.",
    "header": {
      "problem_id": 886,
      "problem_name": "triunghiuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.3,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "triunghiuri.in",
      "output_filename": "triunghiuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "triunghiuri.in",
      "output": "triunghiuri.out"
    },
    "consoleInteraction": false
  }
}