---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of counting the number of maximal continuous white regions on the board, we can use a flood-fill algorithm (similar to Depth-First Search (DFS) or Breadth-First Search (BFS)) to identify the white regions. Here's a step-by-step approach:

1. **Input Reading**: Read the input values from the file `colaj.in`.
2. **Board Initialization**: Initialize a 2D board to represent the white and black regions.
3. **Mark Black Rectangles**: Mark the cells covered by the black rectangles as occupied.
4. **Flood-Fill Algorithm**: Use a flood-fill algorithm to count the number of distinct white regions.
5. **Output the Result**: Write the result to the file `colaj.out`.

Given the constraints, the solution needs to be efficient in terms of both time and space. Here's the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>
#include <stack>

using namespace std;

struct Rectangle {
    int x1, y1, x2, y2;
};

void floodFill(vector<vector<bool>>& board, int x, int y, int m, int p) {
    stack<pair<int, int>> s;
    s.push({x, y});
    board[y][x] = true; // Mark as visited

    int dx[] = {1, -1, 0, 0};
    int dy[] = {0, 0, 1, -1};

    while (!s.empty()) {
        int cx = s.top().first;
        int cy = s.top().second;
        s.pop();

        for (int i = 0; i < 4; ++i) {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (nx >= 0 && nx < m && ny >= 0 && ny < p && !board[ny][nx]) {
                board[ny][nx] = true;
                s.push({nx, ny});
            }
        }
    }
}

int main() {
    ifstream fin("colaj.in");
    ofstream fout("colaj.out");

    int n, m, p;
    fin >> n >> m >> p;

    vector<Rectangle> rectangles(n);
    for (int i = 0; i < n; ++i) {
        fin >> rectangles[i].x1 >> rectangles[i].y1 >> rectangles[i].x2 >> rectangles[i].y2;
    }

    // Initialize the board
    vector<vector<bool>> board(p, vector<bool>(m, false));

    // Mark black rectangles
    for (const auto& rect : rectangles) {
        for (int y = rect.y1; y < rect.y2; ++y) {
            for (int x = rect.x1; x < rect.x2; ++x) {
                board[y][x] = true;
            }
        }
    }

    // Count white regions using flood fill
    int whiteRegions = 0;
    for (int y = 0; y < p; ++y) {
        for (int x = 0; x < m; ++x) {
            if (!board[y][x]) {
                ++whiteRegions;
                floodFill(board, x, y, m, p);
            }
        }
    }

    fout << whiteRegions << endl;

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Input Reading**: The input is read from `colaj.in` using `ifstream`.
2. **Board Initialization**: A 2D vector `board` is initialized to `false` indicating all cells are initially white.
3. **Mark Black Rectangles**: For each rectangle, the corresponding cells in the `board` are marked as `true` indicating they are black.
4. **Flood-Fill Algorithm**: The `floodFill` function uses a stack to perform a DFS to mark all connected white cells starting from an unvisited white cell.
5. **Counting Regions**: The main loop iterates over all cells, and for each unvisited white cell, it starts a new flood-fill, increments the count of white regions, and marks all connected cells as visited.
6. **Output**: The result is written to `colaj.out`.

This approach ensures that the solution is efficient and adheres to the problem constraints.
