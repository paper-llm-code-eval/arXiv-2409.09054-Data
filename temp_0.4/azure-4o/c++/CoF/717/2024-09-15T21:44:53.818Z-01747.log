---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm următorul şir:

`a`$,$ `b`$,$ `ba`$,$ `bab`$,$ `babba`$,$ `babbabab`$, \dots$

# Cerință

Scrieţi un program care să determine care este cel de-al $n$-lea termen al şirului

# Date de intrare

Fişierul de intrare `sir.in` conţine o singură linie pe care se află numărul natural $n$.

# Date de ieșire

Fişierul de ieşire `sir.out` va conţine o singură linie pe care se află al $n$-lea termen din şir

# Restricții și precizări

* $1 \leq n \leq 20$;

---

Example:
`sir.in`
```
4
```

`sir.out`
```
bab
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream infile("sir.in");
    std::ofstream outfile("sir.out");

    int n;
    infile >> n;

    std::vector<std::string> sequence;
    sequence.push_back("a");
    sequence.push_back("b");

    for (int i = 2; i < n; ++i) {
        sequence.push_back(sequence[i-1] + sequence[i-2]);
    }

    outfile << sequence[n-1] << std::endl;

    infile.close();
    outfile.close();
    return 0;
}
```

This C++ program reads an integer `n` from the file `sir.in`, generates the sequence according to the given rules, and writes the `n`-th term of the sequence to the file `sir.out`. The sequence is generated iteratively, ensuring efficient memory usage and fast execution.
