---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm următorul şir:

`a`$,$ `b`$,$ `ba`$,$ `bab`$,$ `babba`$,$ `babbabab`$, \dots$

# Cerință

Scrieţi un program care să determine care este cel de-al $n$-lea termen al şirului

# Date de intrare

Fişierul de intrare `sir.in` conţine o singură linie pe care se află numărul natural $n$.

# Date de ieșire

Fişierul de ieşire `sir.out` va conţine o singură linie pe care se află al $n$-lea termen din şir

# Restricții și precizări

* $1 \leq n \leq 20$;

---

Example:
`sir.in`
```
4
```

`sir.out`
```
bab
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

// Function to generate the sequence up to the nth term
std::string generateNthTerm(int n) {
    std::vector<std::string> sequence{"a", "b"};
    for (int i = 2; i < n; ++i) {
        sequence.push_back(sequence[i - 1] + sequence[i - 2]);
    }
    return sequence[n - 1];
}

int main() {
    std::ifstream inFile("sir.in");
    std::ofstream outFile("sir.out");

    int n;
    inFile >> n;

    std::string nthTerm = generateNthTerm(n);
    outFile << nthTerm;

    return 0;
}
```

Explanation:
1. **Reading Input**: The program reads the input from the file `sir.in`.
2. **Generating the Sequence**: The sequence is generated iteratively using a vector to store the terms. Each new term is the concatenation of the previous term and the term before that.
3. **Writing Output**: The nth term is written to the file `sir.out`.

This solution ensures efficient generation of the sequence up to the 20th term, which is sufficient given the problem constraints.
