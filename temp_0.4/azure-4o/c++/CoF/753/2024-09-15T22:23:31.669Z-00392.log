---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `harry.in` and write to `harry.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Tânărul Harry Potter a descoperit într-una din camerele castelului Hogwarts, o hartă, care în urma unei vrăji a făcut să apară un text secret. Textul scris doar cu litere mici ale alfabetului englez, constituie o cheie spre o vrajă nouă folositoare la meciurile de vâjhaț. Cheia nouă se obține astfel:

* din textul secret se formează toate cuvintele posibile din litere aflate pe poziții consecutive
* dintre cuvintele formate se alege cel care este cel mai mare din punct de vedere lexicografic.

Se consideră că două cuvinte $a_1 a_2 a_3 \dots a_k$ < $b_1 b_2 b_3 \dots b_l$, cuvintele fiind date prin caracterele ce le compun, sunt în ordine lexicografică dacă există un indice $i \leq k$ sau $i \leq l$ astfel încât $a_i < b_i$ iar $a_j = b_j$ oricare ar fi $j < i$.

Exemplu: dacă textul găsit de Harry este `abcd` atunci din el se vor obține cuvintele: `a`, `b`, `c`, `d`, `ab`, `bc`, `cd`, `abc`, `bcd`, `abcd`, iar soluția este `d` fiind cel mai mare din punct de vedere lexicografic.

# Cerință

Scrieți un program care, citind textul inițial, determină cuvântul cel mai mare din punct de vedere lexicografic dintre toate cuvintele formate în modul explicat mai sus.

# Date de intrare

Fișierul de intrare `harry.in` conține o singură linie pe care este scris textul inițial.

# Date de ieșire

Fișierul de ieșire `harry.out` va conține pe prima linie cuvântul ce constituie soluție.

# Restricții și precizări

* $1 \leq$ lungime text $\leq 255$;

---

Example:
`harry.in`
```
tatep
```

`harry.out`
```
tep
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the lexicographically largest substring of the given string. Instead of generating all possible substrings (which would be computationally expensive), we can take advantage of the properties of lexicographical order to find the solution in linear time.

Here's a step-by-step breakdown of the approach:
1. Read the input string from the file.
2. Iterate through the string and keep track of the largest substring found so far.
3. Compare each possible starting substring with the current largest substring and update if a larger one is found.
4. Write the result to the output file.

This approach ensures that we only traverse the string a limited number of times, making it efficient.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>
#include <string>

int main() {
    std::ifstream infile("harry.in");
    std::ofstream outfile("harry.out");

    std::string text;
    infile >> text;

    std::string largest = "";
    for (size_t i = 0; i < text.size(); ++i) {
        std::string current = text.substr(i);
        if (current > largest) {
            largest = current;
        }
    }

    outfile << largest;

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the input string from the file `harry.in`.
2. **Finding the Largest Substring**:
   - We initialize an empty string `largest` to keep track of the largest substring found.
   - We iterate through each position in the string, extract the substring starting at that position, and compare it with the current largest substring.
   - If the current substring is larger, we update the `largest` variable.
3. **Writing Output**: Finally, we write the largest substring to the file `harry.out`.

This solution is efficient with a time complexity of O(n^2) in the worst case due to the substring extraction and comparison, but it performs well within the given constraints (string length up to 255).
