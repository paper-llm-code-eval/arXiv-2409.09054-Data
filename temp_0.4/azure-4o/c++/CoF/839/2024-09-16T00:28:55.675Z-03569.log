---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `zona.in` and write to `zona.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionuţ pleacă în drumeţie într-o porţiune de teren de formă pătratică cu latura de $N$ metri. O hartă a zonei are trasat un caroiaj care împarte zona în $N \cdot N$ pătrate unitate, cu latura de $1$ metru. Astfel harta zonei are aspectul unui tablou pătratic cu $N$ linii şi $N$ coloane. Liniile şi coloanele sunt numerotate de la $1$ la $N$. Elementele tabloului bidimensional corespund pătratelor unitate. Zona poate fi parcursă străbătând oricare dintre laturile pătratelor unitate **cel mult o singură dată**.

~[55bdc2f5c84ca3f4b5a80867350d0328.png]

Ionuţ pleacă din punctul aflat în colţul din dreapta jos al pătratului unitate din linia $X$, coloana $Y$ şi se deplasează făcând **un pas** (parcurgând o latură a unui pătrat unitate) în una din direcţiile $Nord$, $Est$, $Sud$, $Vest$. Pentru a reţine mai uşor traseul foloseşte următoarea codificare pentru cele $4$ direcţii: $1$ pentru deplasarea spre $Nord$, $2$ pentru deplasarea spre $Est$, $3$ pentru deplasarea spre $Sud$, respectiv $4$ pentru deplasarea spre $Vest$. Ajuns într-alt punct (colţ de pătrat unitate), Ionuţ continuă să se deplaseze fără a trece de mai multe ori pe aceeaşi latură a unui pătrat unitate. 

Ionuţ se opreşte în momentul în care ajunge într-un punct prin care a mai trecut. Traseul străbătut între cele două treceri prin acelaşi punct delimitează o zonă de teren formată din pătrate unitate.

# Cerinţă

Dându-se linia $X$ şi coloana $Y$ corespunzătoare poziţiei de plecare a lui Ionuţ, dimensiunea zonei $N$, lungimea traseului $L$ şi traseul determinaţi:

$a)$ Numărul de paşi parcurşi între prima şi a doua trecere prin punctul de oprire.
$b)$ Numărul de pătrate unitate interioare zonei delimitată de traseul străbătut între cele două treceri prin acelaşi punct.  


# Date de intrare


Pe prima linie a fişierului `zona.in` se află valorile $X$, $Y$, $N$ şi $L$ despărţite prin câte un spaţiu, reprezentând coordonatele punctului de plecare, dimensiunea terenului şi lungimea traseului parcurs. Pe următoarea linie se află $L$ valori din mulţimea $\{1, 2, 3, 4\}$ despărţite prin câte un spaţiu, reprezentând codificarea întregului traseu.


# Date de ieșire


Fişierul `zona.out` va conţine **două** linii, pe prima linie un număr natural reprezentând răspunsul la cerinţa $a)$, iar pe linia a doua, un număr natural reprezentând răspunsul la cerinţa $b)$. **Pentru a putea primi punctaje parțiale, fiecare linie trebuie să conțină un număr!**

# Restricții și precizări

* $0 < N < 51$
* $0 < X, Y < N$
* $0 < L < 2501$
* Se garantează faptul că traseul trece de două ori prin acelaşi punct şi nu parcurge de două ori aceeaşi latură.
* Pentru determinarea corectă a numărului de la punctul $a)$ se acordă $20\%$ din punctaj.
* Pentru determinarea corectă a numărului de la punctul $b)$ se acordă $80\%$ din punctaj.

---

Example:
`zona.in`
```
2 3 7 18
2 3 3 3 4 3 4 1 1 1 1 1 2 2 2 3 3 4
```

`zona.out`
```
16
11
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to simulate the path taken by Ionuţ on the grid and keep track of the points he visits. We will use a set to detect when he revisits a point. Once he revisits a point, we can determine the number of steps between the first and second visit to that point. Additionally, we will need to count the number of unit squares enclosed by the path.

Here is the step-by-step approach:

1. **Read Input**: Read the values of \(X\), \(Y\), \(N\), and \(L\) from the input file `zona.in`.
2. **Initialize Data Structures**:
   - Use a set to keep track of visited points.
   - Use an array to store the directions.
   - Use a vector to keep track of the path.
3. **Simulate the Path**:
   - Start from the initial point \((X, Y)\).
   - For each direction, move to the next point and check if it has been visited before.
   - If a point is revisited, record the number of steps taken between the first and second visit.
4. **Calculate Enclosed Area**:
   - Use the Shoelace formula to calculate the area enclosed by the path.

Here is the C++ code implementing the above logic:

```cpp
#include <fstream>
#include <vector>
#include <set>
#include <map>

using namespace std;

int main() {
    ifstream fin("zona.in");
    ofstream fout("zona.out");

    int X, Y, N, L;
    fin >> X >> Y >> N >> L;

    vector<int> directions(L);
    for (int i = 0; i < L; ++i) {
        fin >> directions[i];
    }

    // Direction vectors for North, East, South, West
    int dx[] = {0, -1, 0, 1, 0};
    int dy[] = {0, 0, 1, 0, -1};

    // Initial position (adjusted for 0-based indexing)
    int startX = X - 1;
    int startY = Y - 1;

    // To store the path
    vector<pair<int, int>> path;
    path.emplace_back(startX, startY);

    // To track visited points
    map<pair<int, int>, int> visited;
    visited[{startX, startY}] = 0;

    int steps = 0;
    int loopStart = -1;
    int loopEnd = -1;

    // Simulate the path
    for (int i = 0; i < L; ++i) {
        startX += dx[directions[i]];
        startY += dy[directions[i]];
        path.emplace_back(startX, startY);
        steps++;

        if (visited.find({startX, startY}) != visited.end()) {
            loopStart = visited[{startX, startY}];
            loopEnd = steps;
            break;
        } else {
            visited[{startX, startY}] = steps;
        }
    }

    // Number of steps in the loop
    int loopSteps = loopEnd - loopStart;

    // Calculate the area using Shoelace formula
    int area = 0;
    for (int i = loopStart; i < loopEnd; ++i) {
        int x1 = path[i].first;
        int y1 = path[i].second;
        int x2 = path[i + 1].first;
        int y2 = path[i + 1].second;
        area += (x1 * y2 - y1 * x2);
    }
    area = abs(area) / 2;

    fout << loopSteps << endl;
    fout << area << endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
- **Reading Input**: We read the starting coordinates, grid size, path length, and the path directions from `zona.in`.
- **Simulating the Path**: We use direction vectors to move in the grid based on the directions provided. We track the path and use a map to detect when a point is revisited.
- **Calculating Steps**: We determine the number of steps taken between the first and second visit to the same point.
- **Calculating Area**: We use the Shoelace formula to calculate the area enclosed by the path.

This solution ensures efficient simulation and detection of the loop, and it calculates the enclosed area accurately.
