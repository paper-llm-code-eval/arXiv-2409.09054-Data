---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `zona.in` and write to `zona.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionuţ pleacă în drumeţie într-o porţiune de teren de formă pătratică cu latura de $N$ metri. O hartă a zonei are trasat un caroiaj care împarte zona în $N \cdot N$ pătrate unitate, cu latura de $1$ metru. Astfel harta zonei are aspectul unui tablou pătratic cu $N$ linii şi $N$ coloane. Liniile şi coloanele sunt numerotate de la $1$ la $N$. Elementele tabloului bidimensional corespund pătratelor unitate. Zona poate fi parcursă străbătând oricare dintre laturile pătratelor unitate **cel mult o singură dată**.

~[55bdc2f5c84ca3f4b5a80867350d0328.png]

Ionuţ pleacă din punctul aflat în colţul din dreapta jos al pătratului unitate din linia $X$, coloana $Y$ şi se deplasează făcând **un pas** (parcurgând o latură a unui pătrat unitate) în una din direcţiile $Nord$, $Est$, $Sud$, $Vest$. Pentru a reţine mai uşor traseul foloseşte următoarea codificare pentru cele $4$ direcţii: $1$ pentru deplasarea spre $Nord$, $2$ pentru deplasarea spre $Est$, $3$ pentru deplasarea spre $Sud$, respectiv $4$ pentru deplasarea spre $Vest$. Ajuns într-alt punct (colţ de pătrat unitate), Ionuţ continuă să se deplaseze fără a trece de mai multe ori pe aceeaşi latură a unui pătrat unitate. 

Ionuţ se opreşte în momentul în care ajunge într-un punct prin care a mai trecut. Traseul străbătut între cele două treceri prin acelaşi punct delimitează o zonă de teren formată din pătrate unitate.

# Cerinţă

Dându-se linia $X$ şi coloana $Y$ corespunzătoare poziţiei de plecare a lui Ionuţ, dimensiunea zonei $N$, lungimea traseului $L$ şi traseul determinaţi:

$a)$ Numărul de paşi parcurşi între prima şi a doua trecere prin punctul de oprire.
$b)$ Numărul de pătrate unitate interioare zonei delimitată de traseul străbătut între cele două treceri prin acelaşi punct.  


# Date de intrare


Pe prima linie a fişierului `zona.in` se află valorile $X$, $Y$, $N$ şi $L$ despărţite prin câte un spaţiu, reprezentând coordonatele punctului de plecare, dimensiunea terenului şi lungimea traseului parcurs. Pe următoarea linie se află $L$ valori din mulţimea $\{1, 2, 3, 4\}$ despărţite prin câte un spaţiu, reprezentând codificarea întregului traseu.


# Date de ieșire


Fişierul `zona.out` va conţine **două** linii, pe prima linie un număr natural reprezentând răspunsul la cerinţa $a)$, iar pe linia a doua, un număr natural reprezentând răspunsul la cerinţa $b)$. **Pentru a putea primi punctaje parțiale, fiecare linie trebuie să conțină un număr!**

# Restricții și precizări

* $0 < N < 51$
* $0 < X, Y < N$
* $0 < L < 2501$
* Se garantează faptul că traseul trece de două ori prin acelaşi punct şi nu parcurge de două ori aceeaşi latură.
* Pentru determinarea corectă a numărului de la punctul $a)$ se acordă $20\%$ din punctaj.
* Pentru determinarea corectă a numărului de la punctul $b)$ se acordă $80\%$ din punctaj.

---

Example:
`zona.in`
```
2 3 7 18
2 3 3 3 4 3 4 1 1 1 1 1 2 2 2 3 3 4
```

`zona.out`
```
16
11
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to simulate the path taken by Ionuț and detect when he revisits a point. We'll use a set to keep track of the visited points and a map to store the first occurrence of each point for calculating the number of steps between the first and second visits. Once we detect a revisit, we'll calculate the enclosed area using a simple geometric approach.

Here is the efficient solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <unordered_set>

using namespace std;

struct Point {
    int x, y;
    bool operator==(const Point& other) const {
        return x == other.x && y == other.y;
    }
};

struct PointHash {
    size_t operator()(const Point& p) const {
        return hash<int>()(p.x) ^ hash<int>()(p.y);
    }
};

int main() {
    ifstream fin("zona.in");
    ofstream fout("zona.out");

    int X, Y, N, L;
    fin >> X >> Y >> N >> L;

    vector<int> path(L);
    for (int i = 0; i < L; ++i) {
        fin >> path[i];
    }

    unordered_map<Point, int, PointHash> first_occurrence;
    unordered_set<Point, PointHash> visited;
    vector<Point> points;
    
    Point start = {X, Y};
    points.push_back(start);
    first_occurrence[start] = 0;
    visited.insert(start);

    int dx[5] = {0, -1, 0, 1, 0}; // 1: North, 2: East, 3: South, 4: West
    int dy[5] = {0, 0, 1, 0, -1};

    Point current = start;
    int steps = 0;
    int loop_start = 0;
    int loop_end = 0;

    for (int i = 0; i < L; ++i) {
        current.x += dx[path[i]];
        current.y += dy[path[i]];
        points.push_back(current);
        steps++;

        if (visited.count(current)) {
            loop_start = first_occurrence[current];
            loop_end = steps;
            break;
        } else {
            visited.insert(current);
            first_occurrence[current] = steps;
        }
    }

    int loop_length = loop_end - loop_start;

    // Calculate the area enclosed by the loop
    int area = 0;
    for (int i = loop_start; i < loop_end; ++i) {
        Point p1 = points[i];
        Point p2 = points[i + 1];
        area += p1.x * p2.y - p1.y * p2.x;
    }
    area = abs(area) / 2;

    fout << loop_length << endl;
    fout << area << endl;

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:

1. **Reading Input:** We read the input values from `zona.in` using `ifstream` and store the path in a vector.

2. **Tracking Path:** We use a `unordered_map` to track the first occurrence of each point and a `unordered_set` to quickly check if a point has been visited. We also store all points in a vector for easy access.

3. **Simulating Movement:** We simulate the movement based on the given directions and update the current position accordingly. If a point is revisited, we record the loop start and end positions.

4. **Calculating Loop Length:** The loop length is simply the difference between the steps at the second visit and the first visit to the repeated point.

5. **Calculating Enclosed Area:** We use the Shoelace formula to calculate the area enclosed by the loop. This involves summing up the cross products of consecutive points in the loop and taking the absolute value divided by 2.

6. **Writing Output:** Finally, we write the loop length and the enclosed area to `zona.out`.

This solution is efficient and should work well within the given constraints.
