---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Sindbad a descoperit un recipient care conține o poțiune magică și o inscripție care descrie cum se poate deschide poarta unui templu. Urmând instrucțiunile din inscripție, Sindbad a ajuns la un tunel acoperit cu dale pătrate, aliniate astfel încât formează linii și coloane. Tunelul are mai multe linii, iar pe fiecare linie sunt câte $N$ dale. Dalele din tunel sunt numerotate începând cu $1$, astfel încât, parcurgându-le linie cu linie și fiecare linie de la stânga la dreapta, se obține un șir strict crescător de numere naturale consecutive.
\
Sindbad se află la intrare, înaintea primei linii. Pentru a deschide poarta templului, el trebuie să ajungă pe dala numerotată cu $P$, călcând pe un număr minim de dale. Dacă există mai multe astfel de soluții, o va alege pe cea pentru care consumul total de picături de poțiune magică este minim. Pe parcursul deplasării el trebuie să respecte următoarele reguli:

* de la intrare, poate sări pe orice dală aflată pe prima line, fără a consuma poțiune magică;
* de pe o dală numerotată cu $X$, Sindbad poate sări fie pe dala numerotată cu $X + 1$, consumând **o picătură** de poțiune magică, fie pe dala numerotată cu $2 \cdot X$, consumând **două picături** de poțiune magică.

# Cerință

Scrieți un program care citește valorile $N$ și $P$ cu semnificația din enunț și rezolvă următoarele cerințe:
1. afișează numărul minim de dale pe care trebuie să calce pentru a deschide poarta;
2. afișează numărul natural $T$, reprezentând numărul minim de picături de poțiune magică necesare pentru deschiderea porții.

# Date de intrare

Fișierul de intrare `poarta.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află numărul natural $N$, iar pe a treia linie se află numărul natural $P$ cu semnificația din enunț.

# Date de ieșire

Fișierul de ieșire `poarta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $C$.

# Restricții și precizări

* $2 \leq N < 10 \ 000$;
* $P$ este număr natural nenul cu cel mult $1 \ 000$ de cifre; pentru o parte dintre teste, valorând în total $60$ de puncte, $P$ are cel mult $18$ cifre.
* Recipientul conține o cantitate suficientă de poțiune magică.
* Pentru rezolvarea cerinței $1$ se acordă maximum $60$ de puncte, iar pentru rezolvarea cerinței $2$ se acordă maximum $30$ de puncte.

---

Example:
`poarta.in`
```
1
5
9
```

`poarta.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to use a breadth-first search (BFS) approach to find the shortest path in terms of the number of tiles and the minimal potion drops required to reach the tile numbered \( P \). Here is the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <queue>
#include <unordered_map>
#include <vector>
#include <climits>

struct State {
    long long position;
    int steps;
    int potions;
};

int main() {
    std::ifstream infile("poarta.in");
    std::ofstream outfile("poarta.out");

    int C, N;
    long long P;
    infile >> C >> N >> P;

    std::queue<State> q;
    std::unordered_map<long long, std::pair<int, int>> visited; // position -> (steps, potions)

    // Initialize the queue with all positions in the first row
    for (int i = 1; i <= N; ++i) {
        q.push({i, 1, 0});
        visited[i] = {1, 0};
    }

    while (!q.empty()) {
        State current = q.front();
        q.pop();

        if (current.position == P) {
            if (C == 1) {
                outfile << current.steps << "\n";
            } else {
                outfile << current.potions << "\n";
            }
            return 0;
        }

        // Move to position X + 1
        if (current.position + 1 <= P) {
            auto next = std::make_pair(current.steps + 1, current.potions + 1);
            if (!visited.count(current.position + 1) || visited[current.position + 1] > next) {
                visited[current.position + 1] = next;
                q.push({current.position + 1, current.steps + 1, current.potions + 1});
            }
        }

        // Move to position 2 * X
        if (current.position * 2 <= P) {
            auto next = std::make_pair(current.steps + 1, current.potions + 2);
            if (!visited.count(current.position * 2) || visited[current.position * 2] > next) {
                visited[current.position * 2] = next;
                q.push({current.position * 2, current.steps + 1, current.potions + 2});
            }
        }
    }

    return 0;
}
```

### Explanation:
1. **Input Reading**: We read the input values from `poarta.in`.
2. **BFS Initialization**: We initialize a queue for BFS and a map to keep track of the minimum steps and potions required to reach each position.
3. **Queue Initialization**: We start by pushing all positions in the first row into the queue with 1 step and 0 potions.
4. **BFS Execution**: We process each state in the queue:
   - If the current position is \( P \), we output the result based on the requirement \( C \).
   - Otherwise, we calculate the next possible positions \( X + 1 \) and \( 2 \times X \) and push them into the queue if they haven't been visited with fewer steps or potions.
5. **Output**: The result is written to `poarta.out`.

This approach ensures that we find the shortest path in terms of the number of tiles and the minimal potion drops required efficiently.
