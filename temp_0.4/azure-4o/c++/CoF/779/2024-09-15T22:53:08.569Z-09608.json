{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/779/2024-09-15T22:53:08.569Z-09608.log",
  "attemptStart": 1726440788.569,
  "attemptEnd": 1726440801.23,
  "attemptDuration": 12.66100001335144,
  "code": "#include <iostream>\n#include <fstream>\n#include <unordered_set>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nusing namespace std;\n\nstruct City {\n    int x, y;\n    bool operator==(const City &other) const {\n        return x == other.x && y == other.y;\n    }\n};\n\nstruct CityHash {\n    size_t operator()(const City &city) const {\n        return hash<int>()(city.x) ^ hash<int>()(city.y);\n    }\n};\n\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nint main() {\n    ifstream inFile(\"turist.in\");\n    ofstream outFile(\"turist.out\");\n\n    int M, N, l, c, k;\n    inFile >> M >> N >> l >> c >> k;\n\n    unordered_set<City, CityHash> cities;\n    for (int i = 0; i < k; ++i) {\n        int x, y;\n        inFile >> x >> y;\n        cities.insert({x, y});\n    }\n\n    vector<pair<int, int>> directions;\n    for (int dx = -M; dx <= M; ++dx) {\n        for (int dy = -N; dy <= N; ++dy) {\n            if (dx == 0 && dy == 0) continue;\n            if (gcd(abs(dx), abs(dy)) == 1) {\n                directions.emplace_back(dx, dy);\n            }\n        }\n    }\n\n    int maxCities = 0;\n    for (const auto& [dx, dy] : directions) {\n        int x = l, y = c;\n        int count = 0;\n        while (x >= 0 && x <= M && y >= 0 && y <= N) {\n            if (cities.count({x, y})) {\n                ++count;\n            }\n            x += dx;\n            y += dy;\n        }\n        maxCities = max(maxCities, count);\n    }\n\n    outFile << maxCities << endl;\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1695,
  "metadata": {
    "id": 779,
    "examples": [
      {
        "in": "5 10\n3 2\n7\n0 0\n0 8\n1 6\n2 2\n2 4\n3 7\n4 5",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \\leq l \\leq M$, reprezentând  linia şi $0 \\leq c \\leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.\n\n# Cerință\n\nDându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.\n\n# Date de intrare\n\nPe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \\ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. \n\nPe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.\n\n# Date de ieșire\n\nFişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. \n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 1 \\ 000$;\n* $1 \\leq K \\leq 2 \\ 000$;",
    "header": {
      "problem_id": 779,
      "problem_name": "turist",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "turist.in",
      "output_filename": "turist.out",
      "multiple_solutions": false,
      "original_source": "OJI 2008 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "turist.in",
      "output": "turist.out"
    },
    "consoleInteraction": false
  }
}