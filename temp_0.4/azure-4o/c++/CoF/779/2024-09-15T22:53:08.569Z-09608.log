---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider all possible directions the tourist can travel and count the number of cities he will pass through in each direction. The directions can be represented as vectors in the form of `(dx, dy)`, where `dx` and `dy` are the changes in the x and y coordinates, respectively.

Here is the step-by-step approach:

1. **Read Input Data**: Read the dimensions of the map, the initial position of the tourist, and the coordinates of all cities.
2. **Store Cities in a Set**: Use a set to store the coordinates of cities for quick lookup.
3. **Generate Directions**: Generate all possible directions the tourist can travel. This includes all integer vectors `(dx, dy)` where `dx` and `dy` are coprime (i.e., their greatest common divisor is 1).
4. **Simulate Travel**: For each direction, simulate the tourist's travel from the initial position to the edge of the map, counting the number of cities passed.
5. **Find Maximum**: Track the maximum number of cities passed through in any direction.

Here's the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <unordered_set>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

struct City {
    int x, y;
    bool operator==(const City &other) const {
        return x == other.x && y == other.y;
    }
};

struct CityHash {
    size_t operator()(const City &city) const {
        return hash<int>()(city.x) ^ hash<int>()(city.y);
    }
};

int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

int main() {
    ifstream inFile("turist.in");
    ofstream outFile("turist.out");

    int M, N, l, c, k;
    inFile >> M >> N >> l >> c >> k;

    unordered_set<City, CityHash> cities;
    for (int i = 0; i < k; ++i) {
        int x, y;
        inFile >> x >> y;
        cities.insert({x, y});
    }

    vector<pair<int, int>> directions;
    for (int dx = -M; dx <= M; ++dx) {
        for (int dy = -N; dy <= N; ++dy) {
            if (dx == 0 && dy == 0) continue;
            if (gcd(abs(dx), abs(dy)) == 1) {
                directions.emplace_back(dx, dy);
            }
        }
    }

    int maxCities = 0;
    for (const auto& [dx, dy] : directions) {
        int x = l, y = c;
        int count = 0;
        while (x >= 0 && x <= M && y >= 0 && y <= N) {
            if (cities.count({x, y})) {
                ++count;
            }
            x += dx;
            y += dy;
        }
        maxCities = max(maxCities, count);
    }

    outFile << maxCities << endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `turist.in` using `ifstream`.
2. **Storing Cities**: Cities are stored in an `unordered_set` for O(1) average-time complexity lookups.
3. **Generating Directions**: All possible directions are generated by iterating over all pairs `(dx, dy)` and keeping those where `gcd(dx, dy) == 1`.
4. **Simulating Travel**: For each direction, the tourist's travel is simulated by incrementing the coordinates by `(dx, dy)` until the edge of the map is reached.
5. **Counting Cities**: The number of cities passed through is counted and the maximum is tracked.
6. **Output**: The result is written to `turist.out`.

This approach ensures that the solution is both correct and efficient.
