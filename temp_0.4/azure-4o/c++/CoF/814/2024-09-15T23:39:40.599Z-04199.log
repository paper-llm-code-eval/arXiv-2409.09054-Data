---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cctype>
#include <map>

using namespace std;

// Function to parse a eudorian number string into its integer value
long long parseEudorianNumber(const string &expr) {
    long long total = 0;
    long long current = 0;
    char lastType = 'u';
    map<char, int> multiplier = {{'u', 1}, {'z', 10}, {'s', 100}, {'m', 1000}};

    for (char ch : expr) {
        if (isdigit(ch)) {
            current = current * 10 + (ch - '0');
        } else {
            total += current * multiplier[ch];
            current = 0;
            lastType = ch;
        }
    }
    return total;
}

// Function to evaluate an expression containing eudorian numbers and '+'
long long evaluateExpression(const string &expr) {
    stringstream ss(expr);
    string token;
    long long sum = 0;

    while (getline(ss, token, '+')) {
        sum += parseEudorianNumber(token);
    }

    return sum;
}

int main() {
    ifstream inFile("comp.in");
    ofstream outFile("comp.out");

    int N;
    inFile >> N;
    inFile.ignore(); // Ignore the newline after the number

    vector<int> results;
    int lessThanCount = 0;

    for (int i = 0; i < N; ++i) {
        string line;
        getline(inFile, line);

        size_t pos = line.find('<');
        bool isLessThan = (pos != string::npos);

        if (!isLessThan) {
            pos = line.find('>');
        }

        string expr1 = line.substr(0, pos);
        string expr2 = line.substr(pos + 1);

        long long value1 = evaluateExpression(expr1);
        long long value2 = evaluateExpression(expr2);

        if (isLessThan) {
            lessThanCount++;
            results.push_back(value1 < value2 ? 1 : 0);
        } else {
            results.push_back(value1 > value2 ? 1 : 0);
        }
    }

    outFile << lessThanCount << endl;
    for (int result : results) {
        outFile << result << endl;
    }

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: The code reads the input from the file `comp.in`. It first reads the number of comparisons, `N`.

2. **Parsing Eudorian Numbers**: The function `parseEudorianNumber` converts a eudorian number string into its integer value by iterating through the string and accumulating the total value based on the multiplier for each unit (units, tens, hundreds, thousands).

3. **Evaluating Expressions**: The function `evaluateExpression` splits the expression by the `+` character and sums up the values of the individual eudorian numbers.

4. **Processing Comparisons**: The code processes each comparison, determines if it is a `<` or `>`, evaluates both sides of the comparison, and stores the result. It also counts the number of `<` comparisons.

5. **Writing Output**: The code writes the count of `<` comparisons and the results of each comparison to the file `comp.out`.

This solution ensures that the operations are efficient and the code is easy to understand and maintain.
