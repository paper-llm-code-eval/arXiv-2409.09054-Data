---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <cctype>

using namespace std;

struct EudorianNumber {
    int m = 0, s = 0, z = 0, u = 0;

    void add(const EudorianNumber& other) {
        m += other.m;
        s += other.s;
        z += other.z;
        u += other.u;
    }

    bool operator<(const EudorianNumber& other) const {
        if (m != other.m) return m < other.m;
        if (s != other.s) return s < other.s;
        if (z != other.z) return z < other.z;
        return u < other.u;
    }

    bool operator>(const EudorianNumber& other) const {
        if (m != other.m) return m > other.m;
        if (s != other.s) return s > other.s;
        if (z != other.z) return z > other.z;
        return u > other.u;
    }
};

EudorianNumber parseEudorianNumber(const string& str) {
    EudorianNumber num;
    int value = 0;
    for (char ch : str) {
        if (isdigit(ch)) {
            value = value * 10 + (ch - '0');
        } else {
            switch (ch) {
                case 'm': num.m += value; break;
                case 's': num.s += value; break;
                case 'z': num.z += value; break;
                case 'u': num.u += value; break;
            }
            value = 0;
        }
    }
    return num;
}

EudorianNumber evaluateExpression(const string& expr) {
    EudorianNumber result;
    stringstream ss(expr);
    string term;
    while (getline(ss, term, '+')) {
        result.add(parseEudorianNumber(term));
    }
    return result;
}

int main() {
    ifstream fin("comp.in");
    ofstream fout("comp.out");

    int N;
    fin >> N;
    fin.ignore();

    vector<int> results;
    int lessThanCount = 0;

    for (int i = 0; i < N; ++i) {
        string line;
        getline(fin, line);

        size_t pos = line.find('<');
        bool isLessThan = (pos != string::npos);
        if (isLessThan) {
            lessThanCount++;
        } else {
            pos = line.find('>');
        }

        string expr1 = line.substr(0, pos);
        string expr2 = line.substr(pos + 1);

        EudorianNumber num1 = evaluateExpression(expr1);
        EudorianNumber num2 = evaluateExpression(expr2);

        if (isLessThan) {
            results.push_back(num1 < num2 ? 1 : 0);
        } else {
            results.push_back(num1 > num2 ? 1 : 0);
        }
    }

    fout << lessThanCount << endl;
    for (int result : results) {
        fout << result << endl;
    }

    return 0;
}
```

### Explanation:
1. **Struct Definition**:
   - `EudorianNumber` struct is defined to represent a number in Eudorian format with thousands (`m`), hundreds (`s`), tens (`z`), and units (`u`).
   - Methods for addition and comparison (`<`, `>`) are defined for this struct to facilitate arithmetic and logical operations.

2. **Parsing Functions**:
   - `parseEudorianNumber` function parses a string representation of a Eudorian number and converts it into an `EudorianNumber` struct.
   - `evaluateExpression` function evaluates an expression that might contain multiple Eudorian numbers separated by `+`.

3. **Main Function**:
   - Reads the input from `comp.in`.
   - For each comparison line, it determines whether the comparison is `<` or `>`.
   - Parses the two expressions on either side of the comparison operator.
   - Evaluates the expressions and compares them.
   - Writes the results to `comp.out`.

This solution ensures efficient parsing and evaluation of the Eudorian numbers while adhering to the constraints and requirements provided.
