---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the longest possible subarray of the ribbon where the first and last elements are the same color. Here's a step-by-step approach to achieve this:

1. **Read Input**: Read the number of strips \( N \) and the number of colors \( C \). Then, read the sequence of colors for the strips.
2. **Identify Possible Colors**: Identify all unique colors that appear in the ribbon.
3. **Find Longest Subarray**: For each unique color, find the maximum length subarray that starts and ends with that color.
4. **Select Optimal Solution**: Among all the possible subarrays, select the one with the maximum length. If there are multiple with the same length, prefer the one with fewer cuts from the beginning.

Here's the C++ code implementing the above logic:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream infile("panglica.in");
    std::ofstream outfile("panglica.out");

    int N, C;
    infile >> N >> C;

    std::vector<int> ribbon(N);
    for (int i = 0; i < N; ++i) {
        infile >> ribbon[i];
    }

    std::unordered_map<int, std::pair<int, int>> color_positions;
    for (int i = 0; i < N; ++i) {
        if (color_positions.find(ribbon[i]) == color_positions.end()) {
            color_positions[ribbon[i]] = {i, i};
        } else {
            color_positions[ribbon[i]].second = i;
        }
    }

    int max_length = 0;
    int best_color = 0;
    int cuts_from_start = 0;
    int cuts_from_end = 0;

    for (const auto& entry : color_positions) {
        int color = entry.first;
        int start = entry.second.first;
        int end = entry.second.second;
        int length = end - start + 1;

        if (length > max_length) {
            max_length = length;
            best_color = color;
            cuts_from_start = start;
            cuts_from_end = N - end - 1;
        } else if (length == max_length && start < cuts_from_start) {
            best_color = color;
            cuts_from_start = start;
            cuts_from_end = N - end - 1;
        }
    }

    outfile << max_length << "\n";
    outfile << best_color << "\n";
    outfile << cuts_from_start << "\n";
    outfile << cuts_from_end << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the input values from `panglica.in` using `ifstream`.
2. **Storing Ribbon Colors**: We store the colors of the ribbon in a vector.
3. **Tracking Color Positions**: We use an unordered map to track the first and last positions of each color in the ribbon.
4. **Finding the Longest Subarray**: We iterate over the map to find the color that gives the longest subarray. If multiple colors have the same length, we prefer the one with fewer cuts from the start.
5. **Writing Output**: Finally, we write the results to `panglica.out`.

This approach ensures that we efficiently find the optimal solution with a time complexity of \( O(N) \).
