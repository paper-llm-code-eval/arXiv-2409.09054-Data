---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the maximum length of the ribbon such that the colors at both ends are the same. Here's a step-by-step approach to achieve this:

1. **Read Input**: We will read the input from the file `panglica.in`.
2. **Initialize Variables**: We will store the number of strips (`N`) and the number of colors (`C`). We will also store the colors of each strip in a vector.
3. **Determine the Maximum Length**: We will iterate from both ends of the ribbon to find the maximum length where the colors at both ends match.
4. **Output the Result**: We will write the results to the file `panglica.out`.

Here's the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream fin("panglica.in");
    std::ofstream fout("panglica.out");

    int N, C;
    fin >> N >> C;

    std::vector<int> colors(N);
    for (int i = 0; i < N; ++i) {
        fin >> colors[i];
    }

    int max_length = 0;
    int start_cuts = 0;
    int end_cuts = 0;
    int color = 0;

    for (int i = 0; i < N; ++i) {
        for (int j = N - 1; j > i; --j) {
            if (colors[i] == colors[j]) {
                int length = j - i + 1;
                if (length > max_length) {
                    max_length = length;
                    start_cuts = i;
                    end_cuts = N - j - 1;
                    color = colors[i];
                }
                break; // No need to check further since we found a match
            }
        }
    }

    fout << max_length << "\n";
    fout << color << "\n";
    fout << start_cuts << "\n";
    fout << end_cuts << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of strips `N` and the number of colors `C` from the file. Then we read the colors of each strip into a vector.
2. **Finding the Maximum Length**: We use two nested loops to iterate through the colors from both ends. For each pair of indices `(i, j)` where `colors[i] == colors[j]`, we calculate the length of the ribbon that can be formed. If this length is greater than the previously found maximum length, we update our variables.
3. **Output the Result**: Finally, we write the results to the output file `panglica.out`.

This approach ensures that we find the longest possible ribbon with the same color at both ends while minimizing the cuts from the start of the ribbon. The time complexity is O(N^2) in the worst case, which is efficient enough given the constraints.
