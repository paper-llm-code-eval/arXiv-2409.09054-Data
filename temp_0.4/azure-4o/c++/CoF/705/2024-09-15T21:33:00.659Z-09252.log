---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the longest subarray where the first and last elements are the same. Here's a step-by-step breakdown of how to achieve this:

1. **Read the input data**: We need to read the number of strips `N` and the number of colors `C`, followed by the color of each strip.
2. **Find the longest subarray with matching ends**: We need to determine the longest subarray where the first and last elements are the same color.
3. **Output the results**: We need to output the number of strips in the longest subarray, the color of the strips at the ends, and the number of strips to cut from the beginning and the end of the original array to obtain this subarray.

Here is the C++ code to achieve this:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>

int main() {
    std::ifstream fin("panglica.in");
    std::ofstream fout("panglica.out");

    int N, C;
    fin >> N >> C;
    
    std::vector<int> colors(N);
    for (int i = 0; i < N; ++i) {
        fin >> colors[i];
    }

    int max_length = 0;
    int best_color = -1;
    int cut_start = 0;
    int cut_end = 0;

    std::unordered_map<int, int> first_occurrence;
    for (int i = 0; i < N; ++i) {
        if (first_occurrence.find(colors[i]) == first_occurrence.end()) {
            first_occurrence[colors[i]] = i;
        }
        int length = i - first_occurrence[colors[i]] + 1;
        if (colors[first_occurrence[colors[i]]] == colors[i] && length > max_length) {
            max_length = length;
            best_color = colors[i];
            cut_start = first_occurrence[colors[i]];
            cut_end = N - i - 1;
        }
    }

    fout << max_length << "\n";
    fout << best_color << "\n";
    fout << cut_start << "\n";
    fout << cut_end << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `std::ifstream` to read from `panglica.in` and `std::ofstream` to write to `panglica.out`. We read `N` and `C`, followed by the colors of the strips.
2. **Finding the Longest Subarray**:
   - We maintain a map (`first_occurrence`) to store the first occurrence index of each color.
   - We iterate through the list of colors. For each color, we check if it has appeared before using the map.
   - If it has appeared before, we calculate the length of the subarray from the first occurrence to the current index.
   - If this subarray is longer than the previously found subarray, we update our best solution.
3. **Outputting the Results**: We output the length of the longest subarray, the color at the ends, and the number of strips to cut from the start and end.

This approach ensures that we find the optimal solution efficiently with a time complexity of O(N), which is suitable given the constraints.
