---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator cibernetic se fac experimente cu roboți. Pe o bandă de lucru se află așezate unul lângă altul, $N$ cuburi galbene și albastre, numeroate în ordine cu valori de la $1$ la $N$. Pentru fiecare cub se cunoaște latura acestuia, exprimată în centimetri, și culoarea, codificată prin simbolul $g$ (pentru galben) sau $a$ (pentru albastru).


~[turnuri-1.png|align=right|width=30%]

Un robot inteligent este programat să construiască turnuri prin așezarea cuburilor unul peste altul. El se află în fața benzii de lucru, analizează fiecare cub în ordine, de la primul la ultimul, și procedează astfel:
* dacă este primul cub, îl lasă la locul lui pe bandă;
* așază cubul numerotat cu $K$ peste cubul numerotat cu $K-1$ doar dacă el are culoarea diferită și latura mai mică decât cubul $K-1$. Această operație se efectuează în cazul în care cubul $K-1$ se află deja într-un turn construit anterior sau dacă el a rămas în poziția inițială. În cazul în care cubul $K$ nu poate fi așezat peste cubul $K-1$, el rămâne la locul lui.


# Cerință

Știind că un turn poate fi format din cel puțin un cub, scrieți un program care să determine:

1. numărul final $T$ al turnurilor de pe bandă și $H$, înălțimea celui mai înalt turn care se poate forma, exprimată în centimetri;
2. cel mai mare număr de cuburi Nmax ce pot forma un turn, dacă cele $N$ cuburi ar putea fi rearanjate inițial pe bandă, unul lângă altul.

# Date de intrare

Fișierul de intrare `turnuri.in` conține:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinței și poate fi $1$ sau $2$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul cuburilor de pe bandă;
* pe fiecare dintre următoarele $N$ linii, câte un număr natural care reprezintă latura unui cub, urmat de un spațiu și simbolul $g$ sau $a$, pentru codificarea culorii cubului.

# Date de ieșire

În fișierul de ieșire `turnuri.out` va conține pentru cerința $1$ pe prima linie două valori, separate printr-un spațiu, ce reprezintă $T$ și $H$. Pentru cerința $2$ fișierul va conține pe prima linie numărul $Nmax$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$ și $1 \leq$ latura unui cub $\leq 500 \ 000$;
* nu există două cuburi cu laturi egale;
* se acordă $10$ puncte din oficiu. Pentru rezolvarea corectă a primei cerințe se acordă $30$ de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă $60$ de puncte.

---

Example:
`turnuri.in`
```
1
6
18 a
13 g
15 a
10 a
8 g
2 a
```

`turnuri.out`
```
3 31
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution to the given problem. This solution reads from `turnuri.in` and writes to `turnuri.out` without using `cin`, `cout`, `printf()`, or `scanf()`. The solution handles both requirements specified in the problem.

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Cube {
    int side;
    char color;
};

int main() {
    ifstream fin("turnuri.in");
    ofstream fout("turnuri.out");

    int C, N;
    fin >> C >> N;

    vector<Cube> cubes(N);
    for (int i = 0; i < N; ++i) {
        fin >> cubes[i].side >> cubes[i].color;
    }

    if (C == 1) {
        // Requirement 1: Calculate number of towers T and height H of the tallest tower
        int T = 1;
        int H = cubes[0].side;
        int currentHeight = cubes[0].side;

        for (int i = 1; i < N; ++i) {
            if (cubes[i].color != cubes[i-1].color && cubes[i].side < cubes[i-1].side) {
                currentHeight += cubes[i].side;
            } else {
                T++;
                currentHeight = cubes[i].side;
            }
            H = max(H, currentHeight);
        }

        fout << T << " " << H << "\n";
    } else if (C == 2) {
        // Requirement 2: Calculate the maximum number of cubes that can form a tower if rearranged
        vector<int> dp(N, 1);
        int Nmax = 1;

        for (int i = 1; i < N; ++i) {
            for (int j = 0; j < i; ++j) {
                if (cubes[i].color != cubes[j].color && cubes[i].side < cubes[j].side) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            Nmax = max(Nmax, dp[i]);
        }

        fout << Nmax << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The input is read from `turnuri.in` using `ifstream`.
   - The first line contains the requirement number `C` (1 or 2).
   - The second line contains the number of cubes `N`.
   - The next `N` lines contain the side length and color of each cube.

2. **Requirement 1:**
   - Initialize the number of towers `T` to 1 and the height of the tallest tower `H` to the side length of the first cube.
   - Iterate through the cubes, checking if the current cube can be placed on the previous cube (different color and smaller side).
   - If it can, add its side length to the current height.
   - If it can't, start a new tower and update the current height.
   - Update the maximum height `H` accordingly.

3. **Requirement 2:**
   - Use dynamic programming to find the longest sequence of cubes that can form a tower.
   - `dp[i]` stores the maximum number of cubes that can form a tower ending with the `i-th` cube.
   - Iterate through each pair of cubes and update the `dp` array based on whether the current cube can be placed on the previous one.
   - The result `Nmax` is the maximum value in the `dp` array.

4. **Output:**
   - The results are written to `turnuri.out` using `ofstream`.

This solution is designed to be efficient and should work within the constraints provided.
