---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to focus on counting the occurrences of each number and then determining which numbers have an odd count (since those will be the ones without pairs). Here's a step-by-step breakdown of the solution:

1. **Read the Input**: We'll read the input from the file `cod.in`. This includes the number of tickets and the numbers on the tickets.
2. **Count Occurrences**: We'll use an array to count occurrences of each number from 0 to 99.
3. **Identify Unpaired Numbers**: Numbers with an odd count are the ones that remain unpaired.
4. **Sort and Format Output**: We'll collect these unpaired numbers, sort them, and concatenate them into a single string without spaces.
5. **Write the Output**: Finally, we'll write the result to the file `cod.out`.

Here's the implementation in C++:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inFile("cod.in");
    std::ofstream outFile("cod.out");

    int n;
    inFile >> n;

    std::vector<int> count(100, 0);
    for (int i = 0; i < n; ++i) {
        int num;
        inFile >> num;
        count[num]++;
    }

    std::vector<int> unpaired;
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            unpaired.push_back(i);
        }
    }

    std::sort(unpaired.begin(), unpaired.end());

    for (int num : unpaired) {
        outFile << num;
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - We use `std::ifstream` to read from `cod.in`.
   - The first value read is `n`, the number of tickets.
   - We then read the next `n` numbers and count their occurrences in the `count` array.

2. **Counting Occurrences**:
   - We maintain an array `count` of size 100 (since numbers range from 0 to 99).
   - For each number read, we increment its corresponding index in the `count` array.

3. **Identifying Unpaired Numbers**:
   - We iterate over the `count` array to find numbers with an odd count.
   - These numbers are collected in the `unpaired` vector.

4. **Sorting and Formatting Output**:
   - We sort the `unpaired` vector to ensure the numbers are in ascending order.
   - We then write each number in the `unpaired` vector to the output file without spaces.

5. **Writing Output**:
   - We use `std::ofstream` to write the result to `cod.out`.

This solution is efficient with a time complexity of O(n + k log k), where `n` is the number of tickets and `k` is the number of distinct numbers that remain unpaired. Given the constraints, this approach will run efficiently within the limits.
