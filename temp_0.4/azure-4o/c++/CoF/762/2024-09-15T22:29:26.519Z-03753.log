---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to keep track of the frequency of each number and then identify the numbers that appear an odd number of times. These will be the numbers that remain unpaired and form the code to the safe.

Here is a step-by-step plan for the solution:
1. Read the input from the file `cod.in`.
2. Use an array to count the occurrences of each number from 0 to 99.
3. Identify the numbers that appear an odd number of times.
4. Sort these numbers in ascending order.
5. Write the resulting code to the file `cod.out` without spaces.

Here's the C++ code implementing this plan:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("cod.in");
    std::ofstream fout("cod.out");

    int n;
    fin >> n;

    std::vector<int> count(100, 0);
    for (int i = 0; i < n; ++i) {
        int num;
        fin >> num;
        count[num]++;
    }

    std::vector<int> result;
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            result.push_back(i);
        }
    }

    std::sort(result.begin(), result.end());

    for (int num : result) {
        fout << num;
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of tickets `n` and then the `n` numbers from the file `cod.in`.
2. **Counting Occurrences**: We use a vector `count` of size 100 to count the occurrences of each number (since the numbers are between 0 and 99).
3. **Finding Odd Occurrences**: We iterate through the `count` vector to find numbers that have an odd count.
4. **Sorting**: We sort the numbers with odd occurrences.
5. **Writing Output**: We write the sorted numbers to `cod.out` without spaces.

This solution is efficient with a time complexity of O(n + 100 log 100), which is effectively O(n) since n can be up to 90,000 and the sorting of up to 100 elements is very fast.
