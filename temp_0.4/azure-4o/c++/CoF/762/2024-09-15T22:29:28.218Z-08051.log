---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to follow these steps:

1. **Read Input**: Read the input from the file `cod.in`.
2. **Count Occurrences**: Use an array to count the occurrences of each number (since the numbers are in the range 0 to 99).
3. **Identify Unpaired Numbers**: Determine which numbers have an odd count (these will be the unpaired numbers).
4. **Sort and Concatenate**: Sort these unpaired numbers and concatenate them into a single output string.
5. **Write Output**: Write the result to the file `cod.out`.

Given the constraints, this approach will be efficient. We will use file I/O for reading and writing, and an array of fixed size (100) to count occurrences, ensuring both time and space efficiency.

Here is the C++ code that implements this solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("cod.in");
    std::ofstream outfile("cod.out");

    int n;
    infile >> n;

    // Array to count occurrences of numbers from 0 to 99
    int count[100] = {0};

    // Read all numbers and count their occurrences
    for (int i = 0; i < n; ++i) {
        int num;
        infile >> num;
        count[num]++;
    }

    // Vector to store numbers with odd occurrences
    std::vector<int> odd_count_numbers;

    // Find all numbers with odd occurrences
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            odd_count_numbers.push_back(i);
        }
    }

    // Sort the numbers with odd occurrences
    std::sort(odd_count_numbers.begin(), odd_count_numbers.end());

    // Write the result to the output file without spaces
    for (int num : odd_count_numbers) {
        outfile << num;
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**: We use `std::ifstream` to read from `cod.in`. The first value is `n`, the number of notes. We then read the next `n` numbers.
2. **Counting Occurrences**: We maintain an array `count` of size 100 to count occurrences of each number from 0 to 99.
3. **Identifying Unpaired Numbers**: We iterate through the `count` array and collect numbers that have an odd count into a vector `odd_count_numbers`.
4. **Sorting and Concatenating**: We sort the `odd_count_numbers` vector.
5. **Writing Output**: We use `std::ofstream` to write the sorted numbers to `cod.out` without spaces.

This solution is efficient with a time complexity of O(n + k log k), where `n` is the number of notes and `k` is the number of distinct numbers with odd occurrences (at most 100). The space complexity is O(1) for the count array and O(k) for the vector storing odd count numbers.
