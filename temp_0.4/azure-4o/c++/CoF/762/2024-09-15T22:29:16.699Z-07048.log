---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to keep track of the occurrences of each number on the slips. We can use an array to count the occurrences since the numbers are in the range [0, 99]. After counting, we will identify the numbers that have odd occurrences (since they can't be paired) and then output these numbers in ascending order without spaces.

Here is the C++ solution for the given problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("cod.in");
    std::ofstream outfile("cod.out");

    int n;
    infile >> n;

    std::vector<int> count(100, 0);
    int num;

    for (int i = 0; i < n; ++i) {
        infile >> num;
        count[num]++;
    }

    std::vector<int> result;
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            result.push_back(i);
        }
    }

    for (int i : result) {
        outfile << i;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read the input from `cod.in`.
2. **Counting Occurrences**: We use a vector `count` of size 100 initialized to 0 to keep track of the occurrences of each number.
3. **Processing Each Number**: We read each number from the input and increment its corresponding count in the `count` vector.
4. **Finding Unpaired Numbers**: We iterate through the `count` vector to find numbers with odd occurrences and store them in the `result` vector.
5. **Writing Output**: We write the numbers from the `result` vector to `cod.out` without spaces.

This solution is efficient with a time complexity of O(n) for reading and counting, and O(100) for processing the counts, making it suitable for the given constraints.
