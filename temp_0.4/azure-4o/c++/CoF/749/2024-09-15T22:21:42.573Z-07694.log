---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `case.in` and write to `case.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Păcală tocmai a fost ales primar în satul Păcălici. Cum în satul lui nu locuiesc decât familii care au o legătură de rudenie cu noul primar, Păcală s-a gândit să numeroteze casele astfel încât să știe ce legătură de rudenie are cu un membru al familiei ce locuiește în acea casă, și câți barbați, femei și copii locuiesc în fiecare casă.

Astfel toate casele au un număr format din $4$ cifre, unde prima cifră (de la stânga la dreapta) reprezintă gradul de rudenie cu Păcală (pot fi rude de gradul 1, 2 sau 3), a doua cifră reprezintă numărul de bărbați ce locuiesc în acea casă (pot fi maxim $6$ bărbați), a treia cifră reprezintă numărul de femei (pot fi maxim $6$ femei) și în fine ultima cifră a numărului reprezintă numărul de copii (maxim $9$) ce aparțin familiei din acea casă.

# Cerință

Știindu-se numărul de case din satul lui Păcală, precum și numerele caselor să se afișeze câte familii au legătură de rudenie de gradul 1, 2 și 3 cu Păcală, precum și numărul de bărbați, femei, respectiv copii care trăiesc în satul lui Păcală.

# Date de intrare

Fișierul de intrare `case.in` conține pe prima linie un număr natural $n$ reprezentând numărul de case. Pe următoarele $n$ linii sunt specificate numerele caselor, câte o casă pe o linie.


# Date de ieșire

Fișierul de ieșire `case.out` va conține pe prima linie numărul de rude de gradul 1, pe linia a doua numărul de rude de gradul 2, iar pe linia a treia numărul de rude de gradul 3. Pe cea de a patra linie va fi scris numărul de bărbați, pe a cincea numărul de femei, iar pe ultima linie numărul de copii.


# Restricții și precizări

* $1 \leq n \leq 50$

---

Example:
`case.in`
```
6
1232
3215
2345
1325
3459
1123
```

`case.out`
```
3
1
2
15
17
29
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream infile("case.in");
    std::ofstream outfile("case.out");

    int n;
    infile >> n;

    std::vector<int> degreeCount(4, 0); // Index 1, 2, 3 for degrees
    int totalMen = 0, totalWomen = 0, totalChildren = 0;

    for (int i = 0; i < n; ++i) {
        std::string houseNumber;
        infile >> houseNumber;

        int degree = houseNumber[0] - '0';
        int men = houseNumber[1] - '0';
        int women = houseNumber[2] - '0';
        int children = houseNumber[3] - '0';

        degreeCount[degree]++;
        totalMen += men;
        totalWomen += women;
        totalChildren += children;
    }

    outfile << degreeCount[1] << '\n';
    outfile << degreeCount[2] << '\n';
    outfile << degreeCount[3] << '\n';
    outfile << totalMen << '\n';
    outfile << totalWomen << '\n';
    outfile << totalChildren << '\n';

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We open `case.in` for reading and `case.out` for writing.
2. **Initialization**: We initialize a vector `degreeCount` to keep track of the number of houses with degrees 1, 2, and 3. We also initialize counters for the total number of men, women, and children.
3. **Processing Each House**: For each house, we read the house number as a string, extract the degree, number of men, women, and children from the respective characters, and update our counters.
4. **Writing Output**: Finally, we write the results to `case.out`.

This solution efficiently processes the input and outputs the required results, ensuring minimal overhead and fast execution.
