---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `startrek.in` and write to `startrek.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jean-Luc Picard, căpitanul navei spațiale Enterprise, a constatat că în vecinătatea navei sale au apărut $n$ nave borgiene. Distanțele dintre acestea și nava Enterprise sunt $d_1, d_2, \dots, d_n$. Navele borgiene nu se deplasează unele în raport cu altele și nici în raport cu nava Enterprise. Pozițiile în spațiu ale celor $n$ nave borgiene și poziția navei Enterprise sunt distincte două câte două (nu există două nave care să ocupe același punct în spațiul tridimensional).

La un moment dat, toate cele $n$ nave borgiene declanșează simultan atacul, lansând câte un proiectil în direcția navei Enterprise. Pereții navei Enterprise sunt rezistenți la asemenea atacuri, însă căpitanul decide să distrugă un număr maxim de proiectile cu ajutorul armei laser. Cele n proiectile se deplasează cu vitezele constante $v_1, v_2, \dots, v_n$ exprimate în metri pe secundă. Căpitanul Jean-Luc Picard are la dispoziție o armă laser cu care poate distruge pe rând câte un proiectil. Arma poate fi orientată instantaneu spre oricare navă borgiană. Arma laser poate executa oricâte trageri începând cu momentul declanșării atacului, dar după fiecare tragere are nevoie de $t$ secunde pentru a se reîncărca cu energie. În acest interval de timp nu se poate efectua o altă tragere. Orientarea armei laser spre un anumit proiectil nu consumă timp. De asemenea, timpul scurs între momentul tragerii și distrugerea proiectilului vizat este zero. Căpitanul nu ratează ținta niciodată, iar proiectilele care reușesc să lovească nava Enterprise nu-l pot împiedica pe căpitanul Picard să continue să tragă asupra altor proiectile aflate în mișcare.

# Cerință

Să se găsească numărul maxim de proiectile care pot fi distruse cu arma laser.

# Date de intrare

Fișierul de intrare `startrek.in` conține pe prima linie numerele naturale $n$ și $t$, reprezentând numărul de nave borgiene, respectiv timpul de reîncărcare a armei laser cu energie. Pe linia a doua, sunt $n$ numere naturale $d_1 \ d_2 \ \dots \ d_n$ reprezentând distanțele la care se găsesc navele borgiene față de nava Enterprise. Pe linia a treia se găsesc $n$ numere naturale $v_1, v_2, \dots, v_n$ reprezentând vitezele de deplasare ale celor $n$ proiectile.

# Date de ieșire

În fișierul de ieșire `startrek.out` va conține un număr natural $p$, reprezentând numărul maxim de proiectile distruse.

# Restricții și precizări

* $2 \leq n \leq 4 \ 000$;
* $1 \leq d_1, d_2, \dots, d_n \leq 10 \ 000$;
* $1 \leq v_1, v_2, \dots, v_n$;
* $t \leq 1 \ 000$;
* Dacă momentul în care un proiectil ar trebui să lovească nava coincide cu momentul în care se trage cu arma laser asupra lui, se consideră că Enterprise distruge acel proiectil.
* Dacă viteza unui proiectil este $v$, atunci în timpul $t$, acesta străbate distanța $d = v \cdot t$

---

Example:
`startrek.in`
```
3 4
4 3 6
2 1 1
```

`startrek.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to calculate the time each projectile will take to reach the Enterprise and then determine the maximum number of projectiles that can be destroyed given the reload time of the laser.

### Steps to Solve the Problem:

1. **Read Input**: Read the input values from the file `startrek.in`.
2. **Calculate Time to Impact**: For each projectile, calculate the time it will take to reach the Enterprise using the formula \( \text{time} = \frac{d_i}{v_i} \).
3. **Sort Projectiles by Time to Impact**: Sort the projectiles based on their time to impact in ascending order.
4. **Simulate the Laser Firing**: Use a greedy approach to simulate the laser firing. Start firing at the earliest time and then continue firing at intervals of `t` seconds, checking if the next projectile can be destroyed before it hits the Enterprise.
5. **Write Output**: Output the maximum number of projectiles that can be destroyed to the file `startrek.out`.

### C++ Implementation:

Below is the C++ code that implements the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Projectile {
    double time_to_impact;
};

bool compare(Projectile a, Projectile b) {
    return a.time_to_impact < b.time_to_impact;
}

int main() {
    std::ifstream infile("startrek.in");
    std::ofstream outfile("startrek.out");

    int n, t;
    infile >> n >> t;

    std::vector<int> distances(n);
    std::vector<int> velocities(n);

    for (int i = 0; i < n; ++i) {
        infile >> distances[i];
    }

    for (int i = 0; i < n; ++i) {
        infile >> velocities[i];
    }

    std::vector<Projectile> projectiles(n);
    for (int i = 0; i < n; ++i) {
        projectiles[i].time_to_impact = static_cast<double>(distances[i]) / velocities[i];
    }

    std::sort(projectiles.begin(), projectiles.end(), compare);

    int destroyed = 0;
    double current_time = 0.0;

    for (int i = 0; i < n; ++i) {
        if (current_time <= projectiles[i].time_to_impact) {
            ++destroyed;
            current_time += t;
        }
    }

    outfile << destroyed << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the number of projectiles `n` and the reload time `t`. Then we read the distances and velocities of the projectiles.
2. **Calculating Time to Impact**: We calculate the time each projectile will take to reach the Enterprise and store it in a vector of `Projectile` structures.
3. **Sorting**: We sort the projectiles based on their time to impact in ascending order.
4. **Simulating Laser Firing**: We iterate through the sorted projectiles and simulate firing the laser. We keep track of the current time and check if we can destroy the next projectile before it hits the Enterprise.
5. **Output**: Finally, we write the number of destroyed projectiles to the output file.

This approach ensures that we maximize the number of projectiles destroyed by always targeting the earliest arriving projectile that can still be intercepted given the reload time constraints.
