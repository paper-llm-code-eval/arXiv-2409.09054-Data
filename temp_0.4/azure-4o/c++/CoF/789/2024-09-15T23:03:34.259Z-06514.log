---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `startrek.in` and write to `startrek.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jean-Luc Picard, căpitanul navei spațiale Enterprise, a constatat că în vecinătatea navei sale au apărut $n$ nave borgiene. Distanțele dintre acestea și nava Enterprise sunt $d_1, d_2, \dots, d_n$. Navele borgiene nu se deplasează unele în raport cu altele și nici în raport cu nava Enterprise. Pozițiile în spațiu ale celor $n$ nave borgiene și poziția navei Enterprise sunt distincte două câte două (nu există două nave care să ocupe același punct în spațiul tridimensional).

La un moment dat, toate cele $n$ nave borgiene declanșează simultan atacul, lansând câte un proiectil în direcția navei Enterprise. Pereții navei Enterprise sunt rezistenți la asemenea atacuri, însă căpitanul decide să distrugă un număr maxim de proiectile cu ajutorul armei laser. Cele n proiectile se deplasează cu vitezele constante $v_1, v_2, \dots, v_n$ exprimate în metri pe secundă. Căpitanul Jean-Luc Picard are la dispoziție o armă laser cu care poate distruge pe rând câte un proiectil. Arma poate fi orientată instantaneu spre oricare navă borgiană. Arma laser poate executa oricâte trageri începând cu momentul declanșării atacului, dar după fiecare tragere are nevoie de $t$ secunde pentru a se reîncărca cu energie. În acest interval de timp nu se poate efectua o altă tragere. Orientarea armei laser spre un anumit proiectil nu consumă timp. De asemenea, timpul scurs între momentul tragerii și distrugerea proiectilului vizat este zero. Căpitanul nu ratează ținta niciodată, iar proiectilele care reușesc să lovească nava Enterprise nu-l pot împiedica pe căpitanul Picard să continue să tragă asupra altor proiectile aflate în mișcare.

# Cerință

Să se găsească numărul maxim de proiectile care pot fi distruse cu arma laser.

# Date de intrare

Fișierul de intrare `startrek.in` conține pe prima linie numerele naturale $n$ și $t$, reprezentând numărul de nave borgiene, respectiv timpul de reîncărcare a armei laser cu energie. Pe linia a doua, sunt $n$ numere naturale $d_1 \ d_2 \ \dots \ d_n$ reprezentând distanțele la care se găsesc navele borgiene față de nava Enterprise. Pe linia a treia se găsesc $n$ numere naturale $v_1, v_2, \dots, v_n$ reprezentând vitezele de deplasare ale celor $n$ proiectile.

# Date de ieșire

În fișierul de ieșire `startrek.out` va conține un număr natural $p$, reprezentând numărul maxim de proiectile distruse.

# Restricții și precizări

* $2 \leq n \leq 4 \ 000$;
* $1 \leq d_1, d_2, \dots, d_n \leq 10 \ 000$;
* $1 \leq v_1, v_2, \dots, v_n$;
* $t \leq 1 \ 000$;
* Dacă momentul în care un proiectil ar trebui să lovească nava coincide cu momentul în care se trage cu arma laser asupra lui, se consideră că Enterprise distruge acel proiectil.
* Dacă viteza unui proiectil este $v$, atunci în timpul $t$, acesta străbate distanța $d = v \cdot t$

---

Example:
`startrek.in`
```
3 4
4 3 6
2 1 1
```

`startrek.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the maximum number of projectiles that can be destroyed by the laser before they hit the Enterprise. The key to solving this problem is to prioritize shooting the projectiles that will hit the Enterprise the soonest.

Here's a step-by-step approach to solve the problem:

1. **Calculate the Time to Impact**: For each projectile, calculate the time it will take to reach the Enterprise. This can be done using the formula `time = distance / speed`.

2. **Sort Projectiles by Time to Impact**: Sort the projectiles based on their calculated time to impact in ascending order. This way, we can always target the projectile that will hit the Enterprise the soonest.

3. **Simulate the Shooting Process**: Use a loop to simulate the shooting process. Keep track of the last time a projectile was destroyed. If the current time plus the reload time is less than or equal to the time to impact of the next projectile, destroy it and update the current time.

4. **Output the Result**: The number of projectiles destroyed will be our result.

Here is the C++ code that implements this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Projectile {
    double timeToImpact;
};

bool compareProjectiles(const Projectile &a, const Projectile &b) {
    return a.timeToImpact < b.timeToImpact;
}

int main() {
    std::ifstream infile("startrek.in");
    std::ofstream outfile("startrek.out");

    int n, t;
    infile >> n >> t;

    std::vector<int> distances(n);
    std::vector<int> speeds(n);

    for (int i = 0; i < n; ++i) {
        infile >> distances[i];
    }

    for (int i = 0; i < n; ++i) {
        infile >> speeds[i];
    }

    std::vector<Projectile> projectiles(n);
    for (int i = 0; i < n; ++i) {
        projectiles[i].timeToImpact = static_cast<double>(distances[i]) / speeds[i];
    }

    std::sort(projectiles.begin(), projectiles.end(), compareProjectiles);

    int destroyed = 0;
    double currentTime = 0;

    for (const auto &projectile : projectiles) {
        if (currentTime <= projectile.timeToImpact) {
            ++destroyed;
            currentTime += t;
        }
    }

    outfile << destroyed << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: The code reads the number of projectiles `n` and the reload time `t` from the input file. It then reads the distances and speeds of the projectiles.
2. **Calculating Time to Impact**: For each projectile, the time to impact is calculated and stored in a vector of `Projectile` structs.
3. **Sorting**: The projectiles are sorted based on their time to impact using the `std::sort` function.
4. **Simulating the Shooting**: The code iterates through the sorted projectiles and simulates the shooting process. It keeps track of the current time and increments it by `t` seconds each time a projectile is destroyed.
5. **Outputting the Result**: The number of destroyed projectiles is written to the output file.

This solution efficiently handles the problem constraints and ensures that the maximum number of projectiles are destroyed before they can hit the Enterprise.
