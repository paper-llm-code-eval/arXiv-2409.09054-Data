---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to maximize the sum of the powers of the weapons Vasile has at his belt after potentially replacing some of them with more powerful weapons from the wall. Here's a step-by-step approach to achieve this:

1. **Read Input**: Read the values of N and M, the powers of the weapons at the belt, and the powers of the weapons on the wall.
2. **Sort Lists**: Sort the list of powers of the weapons at the belt in ascending order. Sort the list of powers of the weapons on the wall in descending order.
3. **Replace Weapons**: Iterate through the sorted lists and replace the weakest weapon at the belt with the strongest available weapon from the wall if the wall weapon is stronger.
4. **Compute Sum**: Compute the sum of the powers of the weapons at the belt after the replacements.

Here's the C++ code that implements this approach:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("arme.in");
    std::ofstream outfile("arme.out");

    int N, M;
    infile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        infile >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        infile >> pc[i];
    }

    // Sort pb in ascending order and pc in descending order
    std::sort(pb.begin(), pb.end());
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Replace weapons
    for (int i = 0; i < N && i < M; ++i) {
        if (pc[i] > pb[i]) {
            pb[i] = pc[i];
        } else {
            break;
        }
    }

    // Calculate the sum of the powers of the weapons at the belt
    int sum = 0;
    for (int i = 0; i < N; ++i) {
        sum += pb[i];
    }

    outfile << sum << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the values of N and M, followed by the powers of the weapons at the belt (`pb`) and on the wall (`pc`).
2. **Sorting**: We sort `pb` in ascending order to start replacing the weakest weapons first. We sort `pc` in descending order to use the strongest weapons first.
3. **Replacing Weapons**: We iterate through the sorted lists and replace the weapons at the belt with stronger weapons from the wall if available.
4. **Calculating the Sum**: Finally, we compute the sum of the powers of the weapons at the belt after the replacements and write the result to `arme.out`.

This approach ensures that we maximize the sum of the powers of the weapons at the belt efficiently.
