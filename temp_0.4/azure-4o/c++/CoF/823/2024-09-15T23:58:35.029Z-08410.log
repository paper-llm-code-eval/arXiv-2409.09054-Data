---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to maximize the sum of the powers of the weapons Vasile has at his belt after potentially replacing some of them with the weapons from the room. Here is the step-by-step approach to achieve this:

1. **Read Input**: We need to read the values of `N` and `M`, the arrays `pb` (powers of weapons at the belt) and `pc` (powers of weapons in the room).
2. **Sort Arrays**: Sort the `pb` array in ascending order and the `pc` array in descending order.
3. **Replace Weapons**: Iterate through the sorted `pb` array and replace the weapons with the weapons from the sorted `pc` array, as long as the weapon from `pc` is more powerful than the weapon from `pb`.
4. **Calculate Sum**: After performing the replacements, calculate the sum of the powers of the weapons at the belt.

This approach ensures that we are always replacing the least powerful weapon at the belt with the most powerful available weapon from the room, which maximizes the total power.

Here is the C++ code implementing this solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inFile("arme.in");
    std::ofstream outFile("arme.out");

    int N, M;
    inFile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        inFile >> pb[i];
    }
    for (int i = 0; i < M; ++i) {
        inFile >> pc[i];
    }

    // Sort pb in ascending order
    std::sort(pb.begin(), pb.end());
    // Sort pc in descending order
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    int i = 0, j = 0;
    while (i < N && j < M && pc[j] > pb[i]) {
        pb[i] = pc[j];
        ++i;
        ++j;
    }

    int sum = 0;
    for (int k = 0; k < N; ++k) {
        sum += pb[k];
    }

    outFile << sum << std::endl;

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `arme.in` using `ifstream`.
2. **Sorting**: The `pb` array is sorted in ascending order and the `pc` array in descending order.
3. **Replacement Logic**: We iterate through both arrays, replacing elements from `pb` with elements from `pc` as long as the element from `pc` is greater.
4. **Calculating Sum**: Finally, we calculate the sum of the elements in `pb` and write the result to `arme.out`.

This solution is efficient with a time complexity dominated by the sorting operations, which is `O(N log N + M log M)`. Given the constraints, this approach will run efficiently within the limits.
