---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to maximize the sum of the power of the weapons Vasile has at his belt after potentially replacing some of them with the weapons from the room. The steps to achieve this are as follows:

1. **Read Input**: Read the number of weapons on the belt (N) and in the room (M), followed by the power of each weapon on the belt and in the room.
2. **Sort Arrays**: Sort the array of weapons on the belt in ascending order and the array of weapons in the room in descending order.
3. **Replace Weapons**: Replace the weakest weapons on the belt with the strongest weapons from the room as long as the weapon from the room is stronger than the weapon on the belt.
4. **Calculate the Sum**: Calculate the sum of the powers of the weapons on the belt after the replacements.

Here is the C++ implementation of this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("arme.in");
    std::ofstream outfile("arme.out");

    int N, M;
    infile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        infile >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        infile >> pc[i];
    }

    // Sort pb in ascending order
    std::sort(pb.begin(), pb.end());

    // Sort pc in descending order
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Replace weapons
    int i = 0, j = 0;
    while (i < N && j < M && pc[j] > pb[i]) {
        pb[i] = pc[j];
        ++i;
        ++j;
    }

    // Calculate the sum of the powers
    int sum = 0;
    for (int i = 0; i < N; ++i) {
        sum += pb[i];
    }

    outfile << sum << std::endl;

    return 0;
}
```

### Explanation:

1. **Reading Input**: The input is read from the file `arme.in` into the variables `N` and `M`, and the arrays `pb` and `pc` which store the power of the weapons on the belt and in the room respectively.
2. **Sorting**: The array `pb` is sorted in ascending order to have the weakest weapons first, and the array `pc` is sorted in descending order to have the strongest weapons first.
3. **Replacing Weapons**: We iterate through both arrays, replacing the weakest weapon on the belt with the strongest weapon from the room if the latter is stronger.
4. **Calculating the Sum**: Finally, we sum up the powers of the weapons on the belt and write the result to the file `arme.out`.

This approach ensures that we maximize the total power of the weapons on the belt efficiently.
