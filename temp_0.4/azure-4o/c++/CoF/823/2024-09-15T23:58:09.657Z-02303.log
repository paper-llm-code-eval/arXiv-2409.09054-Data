---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to maximize the sum of the powers of the weapons Vasile has at his belt after potentially swapping some of them with the weapons from the wall. Here's a step-by-step approach to achieve this:

1. **Read Input Data**: We need to read the values from the input file `arme.in`.
2. **Sort the Arrays**: Sort both the arrays of weapon powers Vasile has at his belt and the powers of the weapons on the wall.
3. **Maximize the Power**: To maximize the sum of the powers, we should always try to replace the weakest weapon Vasile has with the strongest available weapon from the wall if it increases the total power.
4. **Write Output Data**: Write the result to the output file `arme.out`.

Here's the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inFile("arme.in");
    std::ofstream outFile("arme.out");

    int N, M;
    inFile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        inFile >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        inFile >> pc[i];
    }

    inFile.close();

    // Sort the arrays
    std::sort(pb.begin(), pb.end());
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Try to maximize the power by replacing weaker weapons with stronger ones
    for (int i = 0; i < N && i < M; ++i) {
        if (pc[i] > pb[i]) {
            pb[i] = pc[i];
        } else {
            break; // No need to continue if the current pc is not stronger than pb
        }
    }

    // Calculate the sum of the powers
    int sum = 0;
    for (int i = 0; i < N; ++i) {
        sum += pb[i];
    }

    outFile << sum << std::endl;
    outFile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the values from `arme.in` into vectors `pb` and `pc`.
2. **Sorting**: We sort `pb` in ascending order and `pc` in descending order to facilitate the replacement of weaker weapons with stronger ones.
3. **Maximizing Power**: We iterate through the sorted arrays and replace the weapon at the belt with the weapon from the wall if it is stronger.
4. **Calculating Sum**: Finally, we calculate the sum of the powers of the weapons at the belt and write it to `arme.out`.

This approach ensures that we get the maximum possible sum of the weapon powers after the optimal replacements.
