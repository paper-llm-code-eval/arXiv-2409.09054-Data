---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `joc.in` and write to `joc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Inspiraţi de clasicul joc Tic-Tac-Toe (`X` şi `0`), Teodora şi Ştefan îşi propun să joace ceva asemănător, adăugând jocului clasic câteva reguli noi:

~[joc.png|align=right|width=13em]

- tabla de joc este un pătrat de latură $N$, care este împărţit în $N \cdot N$ celule, aşezate pe $N$ linii şi $N$ coloane; celulele pătratului sunt numerotate de la $1$ la $N^2$ parcurgând liniile de sus în jos, și coloanele de la stânga la dreapta;
- Teodora va marca celulele cu `X` (litera `X`), iar Ştefan cu `0` (cifra `0`);
- în cadrul unei runde, copiii marchează alternativ câte o celulă din pătrat, nemarcată anterior;
- o rundă a jocului este descrisă printr-un șir format din exact $N^2$ numere naturale reprezentând celulele pătratului, în ordinea în care au fost marcate succesiv de cei doi copii;
- jocul are $K$ runde; prima este începută de Teodora, a doua de Ştefan, a treia Teodora, a patra Ştefan şi aşa mai departe;
- o rundă este câştigată de jucătorul care reuşeşte primul să marcheze complet o linie, o coloană, diagonala principală sau una din cele două semidiagonale paralele şi **alăturate** cu aceasta (figura $1$), diagonala secundară sau una din cele două semidiagonale paralele şi **alăturate** acesteia (figura $2$);
- o rundă se încheie fără un câştigător dacă după marcarea celor $N^2$ celule nu există pe tabla de joc nicio linie, coloană, diagonală sau semidiagonală marcate cu acelaşi simbol.

# Cerință

Cunoscând numerele $N, K$ şi cele $K$ şiruri de numere care reprezintă rundele jucate, scrieţi un program care să rezolve una dintre următoarele două cerinţe:
1. Să se determine câte runde a câştigat fiecare copil.
2. Să se determine care este cel mai mare număr de marcări efectuate până la câştigarea unei runde.

# Date de intrare

Fişierul de intrare `joc.in` conţine pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe a doua linie se află două numere naturale $N$ şi $K$, separate prin câte un spaţiu, reprezentând dimensiunea tablei de joc şi respectiv numărul de runde jucate. Pe următoarele $K$ linii sunt descrise rundele de joc, câte o rundă pe câte o linie a fișierului. În cadrul liniilor, numerele sunt separate prin câte un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie două numere naturale $t$ şi $s$, separate printr-un spaţiu, unde $t$ reprezintă numărul de runde câştigate de Teodora, iar $s$ numărul rundelor câştigate de Ştefan.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie numărul cel mai mare de marcări efectuate până la câştigarea unei runde.

# Restricții și precizări

* $3 \leq N \leq 100$;
* $1 \leq K \leq 25$;
* La fiecare joc se câştigă cel puţin o rundă.
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`joc.in`
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```

`joc.out`
```
2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem. The code reads input from `joc.in` and writes output to `joc.out` without using `cin`, `cout`, `printf()`, or `scanf()`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

bool checkWin(const vector<vector<char>>& board, int N, char player) {
    // Check rows and columns
    for (int i = 0; i < N; ++i) {
        bool rowWin = true, colWin = true;
        for (int j = 0; j < N; ++j) {
            if (board[i][j] != player) rowWin = false;
            if (board[j][i] != player) colWin = false;
        }
        if (rowWin || colWin) return true;
    }

    // Check main diagonal and its adjacent diagonals
    bool mainDiagWin = true, adjDiag1Win = true, adjDiag2Win = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][i] != player) mainDiagWin = false;
        if (i > 0 && board[i][i-1] != player) adjDiag1Win = false;
        if (i < N-1 && board[i][i+1] != player) adjDiag2Win = false;
    }
    if (mainDiagWin || adjDiag1Win || adjDiag2Win) return true;

    // Check secondary diagonal and its adjacent diagonals
    bool secDiagWin = true, adjSecDiag1Win = true, adjSecDiag2Win = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][N-1-i] != player) secDiagWin = false;
        if (i > 0 && board[i][N-i] != player) adjSecDiag1Win = false;
        if (i < N-1 && board[i][N-2-i] != player) adjSecDiag2Win = false;
    }
    if (secDiagWin || adjSecDiag1Win || adjSecDiag2Win) return true;

    return false;
}

int main() {
    ifstream fin("joc.in");
    ofstream fout("joc.out");

    int C, N, K;
    fin >> C >> N >> K;

    vector<vector<int>> rounds(K, vector<int>(N * N));
    for (int i = 0; i < K; ++i) {
        for (int j = 0; j < N * N; ++j) {
            fin >> rounds[i][j];
        }
    }

    if (C == 1) {
        int teodoraWins = 0, stefanWins = 0;

        for (int i = 0; i < K; ++i) {
            vector<vector<char>> board(N, vector<char>(N, ' '));
            bool teodoraTurn = (i % 2 == 0);
            for (int j = 0; j < N * N; ++j) {
                int cell = rounds[i][j] - 1;
                int row = cell / N;
                int col = cell % N;
                board[row][col] = teodoraTurn ? 'X' : '0';

                if (checkWin(board, N, teodoraTurn ? 'X' : '0')) {
                    if (teodoraTurn) {
                        teodoraWins++;
                    } else {
                        stefanWins++;
                    }
                    break;
                }
                teodoraTurn = !teodoraTurn;
            }
        }

        fout << teodoraWins << " " << stefanWins << endl;
    } else if (C == 2) {
        int maxMoves = 0;

        for (int i = 0; i < K; ++i) {
            vector<vector<char>> board(N, vector<char>(N, ' '));
            bool teodoraTurn = (i % 2 == 0);
            for (int j = 0; j < N * N; ++j) {
                int cell = rounds[i][j] - 1;
                int row = cell / N;
                int col = cell % N;
                board[row][col] = teodoraTurn ? 'X' : '0';

                if (checkWin(board, N, teodoraTurn ? 'X' : '0')) {
                    maxMoves = max(maxMoves, j + 1);
                    break;
                }
                teodoraTurn = !teodoraTurn;
            }
        }

        fout << maxMoves << endl;
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: The code reads the values of `C`, `N`, and `K` from `joc.in`. It also reads the rounds into a 2D vector.
2. **Check Win**: The `checkWin` function checks if a player has won by marking a row, column, main diagonal, or secondary diagonal, including adjacent diagonals.
3. **Main Logic**:
   - For `C == 1`, the code determines the number of rounds won by each player.
   - For `C == 2`, the code determines the maximum number of moves made until a win is achieved.
4. **Output**: The results are written to `joc.out`.

This solution ensures efficient checking of win conditions and handles the input/output as specified.
