---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to handle two main tasks based on the value of `p`:

1. **Task 1 (p = 1)**: Find the k-th prime divisor of a given number.
2. **Task 2 (p = 2)**: Calculate the sum of the k-th prime divisors for multiple numbers and output the digits of this sum.

### Steps to Solve the Problem

1. **Prime Sieve**: Use the Sieve of Eratosthenes to precompute all prime numbers up to the maximum possible value (1,000,000). This will help us quickly determine the prime divisors of any number.

2. **Prime Factorization**: For each number, find its prime divisors using the list of precomputed primes.

3. **Reading Input Efficiently**: Use file I/O to read the input and write the output, avoiding standard input/output functions like `cin` and `cout`.

4. **Handling Large Input Sizes**: Ensure the solution can handle the upper limit of input sizes efficiently.

### Implementation

Here is the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <string>

using namespace std;

const int MAX_N = 1000000;

vector<int> sieve() {
    vector<int> primes;
    vector<bool> is_prime(MAX_N + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= MAX_N; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = 2 * i; j <= MAX_N; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return primes;
}

int kth_prime_divisor(int number, int k, const vector<int>& primes) {
    int count = 0;
    for (int prime : primes) {
        if (number % prime == 0) {
            count++;
            if (count == k) {
                return prime;
            }
            while (number % prime == 0) {
                number /= prime;
            }
        }
        if (prime * prime > number) break;
    }
    if (number > 1) {
        count++;
        if (count == k) {
            return number;
        }
    }
    return -1; // Should not happen as per problem constraints
}

int main() {
    ifstream fin("cufar.in");
    ofstream fout("cufar.out");

    int p, n;
    fin >> p >> n;

    vector<int> primes = sieve();

    if (p == 1) {
        int number, k;
        fin >> number >> k;
        int result = kth_prime_divisor(number, k, primes);
        fout << result << endl;
    } else if (p == 2) {
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            int number, k;
            fin >> number >> k;
            sum += kth_prime_divisor(number, k, primes);
        }
        fout << sum << endl;
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation

1. **Sieve of Eratosthenes**: We generate all prime numbers up to 1,000,000. This allows us to quickly check for prime divisors.

2. **Prime Factorization**: For each number, we iterate through the list of primes and count the prime divisors until we reach the k-th one.

3. **File I/O**: We read from `cufar.in` and write to `cufar.out` using file streams, which is more efficient for large input sizes.

4. **Handling Large Input Sizes**: The solution is designed to handle up to 1,000,000 entries efficiently by precomputing primes and using efficient factorization.

This solution should meet the requirements of the problem and handle the input size constraints effectively.
