---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arrows.in` and write to `arrows.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

“Arrows” este un joc care se joacă pe o tablă dreptunghiulară a cărei suprafață este împărțită în $N \cdot M$ celule, aranjate pe $N$ linii și $M$ coloane. În fiecare celulă se află o săgeată (sus, jos, stânga sau dreapta), ca în figura de mai jos:

~[arrows.png]

Când este la mutare, un jucător poate alege o poziție de start pe care plasează un jeton, apoi deplasează jetonul la celula învecinată în sensul indicat de săgeată. Deplasarea continuă până când jetonul părăsește tabla de joc, caz în care jucătorul obține un punctaj egal cu numărul de celule parcurse de jetonul său.
Există însă poziții de start denumite favorabile, pentru care jetonul **nu** va părăsi niciodată tabla de joc. De exemplu, toate pozițiile din figură cu fundal gri sunt favorabile. Jucătorul care alege o poziție de start favorabilă obține un punctaj egal cu numărul de celule distincte vizitate înmulțit cu $1000$.

Scrieți un program care, cunoscând configurația tablei de joc, rezolvă una dintre următoarele cerințe:

1. determină punctajul pe care îl obține un jucător care plasează jetonul său pe o poziție de start specificată;
2. determină numărul de celule favorabile de pe tabla de joc;
3. determină punctajul maxim pe care jucătorul îl poate obține la o mutare, alegând convenabil poziția de start.

# Date de intrare

Fișierul de intrare `arrows.in` conține pe prima linie cerința care trebuie să fie rezolvată ($1, 2$ sau $3$). Pe a doua linie se află numerele naturale $N \ M$, care reprezintă numărul de linii și respectiv de coloane de pe tabla de joc. Pe următoarele $N$ linii se află câte $M$ numere din mulțimea {$1,2,3,4$} reprezentând săgețile aflate în celulele de pe tabla de joc ($1$ semnificând săgeata la dreapta, $2$ săgeata în sus, $3$ săgeata la stânga și $4$ săgeata în jos). Pe ultima linie sunt scrise numerele naturale $lin \ col$, reprezentând linia și coloana pe care se află poziția de start specificată. Valorile scrise pe aceeași linie în fișierul de intrare sunt separate prin spații.

# Date de ieșire

Fișierul de ieșire `arrows.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul pentru cerința specificată pe prima linie a fișierului de intrare.

# Restricții și precizări

* $1 \leq N, M \leq 500$;
* Liniile sunt numerotate de la $1$ la $N$, iar coloanele de la $1$ la $M$.
* Pentru teste valorând $20$ de puncte cerința este $1$. Pentru teste valorând $40$ de puncte cerința este $2$. Pentru celelalte teste, valorând de asemenea $40$ de puncte, cerința este $3$.

---

Example:
`arrows.in`
```
1
6 5
3 1 1 4 2
1 2 4 3 1
4 2 1 1 4
1 2 3 3 3
3 1 4 4 4
2 2 3 4 2
5 5
```

`arrows.out`
```
2000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

enum Direction { RIGHT = 1, UP, LEFT, DOWN };

struct Position {
    int row, col;
};

vector<Position> directions = { {0, 1}, {-1, 0}, {0, -1}, {1, 0} };

int main() {
    ifstream infile("arrows.in");
    ofstream outfile("arrows.out");

    int task;
    infile >> task;

    int N, M;
    infile >> N >> M;

    vector<vector<int>> board(N, vector<int>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            infile >> board[i][j];
        }
    }

    auto isInsideBoard = [&](int row, int col) {
        return row >= 0 && row < N && col >= 0 && col < M;
    };

    auto move = [&](int row, int col) {
        unordered_set<int> visited;
        int steps = 0;
        while (isInsideBoard(row, col)) {
            int pos = row * M + col;
            if (visited.count(pos)) {
                return steps * 1000; // Favorable position
            }
            visited.insert(pos);
            ++steps;
            int dir = board[row][col] - 1;
            row += directions[dir].row;
            col += directions[dir].col;
        }
        return steps; // Unfavorable position
    };

    if (task == 1) {
        int lin, col;
        infile >> lin >> col;
        lin--; col--; // Convert to 0-based indexing
        outfile << move(lin, col) << endl;
    } else if (task == 2) {
        int count = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (move(i, j) % 1000 == 0) {
                    ++count;
                }
            }
        }
        outfile << count << endl;
    } else if (task == 3) {
        int maxScore = 0;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                maxScore = max(maxScore, move(i, j));
            }
        }
        outfile << maxScore << endl;
    }

    return 0;
}
```

### Explanation:
1. **Reading Input:** The program reads the task number, board dimensions, and the board configuration from `arrows.in`.
2. **Utility Functions:**
   - `isInsideBoard`: Checks if a given position is within the board boundaries.
   - `move`: Simulates the movement of the token starting from a given position, returning the score based on the number of cells visited. If the token enters a loop, it returns the number of distinct cells visited multiplied by 1000.
3. **Task Handling:**
   - **Task 1:** Computes the score for a specific starting position.
   - **Task 2:** Counts the number of favorable positions on the board.
   - **Task 3:** Finds the maximum score possible by starting from any position on the board.
4. **Output:** The result is written to `arrows.out`.

This solution is designed to be efficient, leveraging simple simulations and checks to ensure it runs within acceptable time limits for the given constraints.
