---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `joc.in` and write to `joc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jocul “Nu te supăra, frate!” se joacă de către doi jucatori. Pe o pistă circulară cu $n$ căsuţe numerotate de la $1$ la $n$, în ordinea dată de sensul acelor de ceasornic, se află înscrise valorile $0, 1$ şi $10$. Cei doi jucători vor avea fiecare câte un pion şi vor porni pe rând, din căsuţa $1$. Începe jucătorul $1$. Fiecare jucător va muta pionul său conform cu valoarea obţinută prin aruncarea zarului, cumulând sau pierzând puncte în funcţie de căsuţa în care ajunge. Fiecare jucător citeşte valoarea zarului când îi vine rândul.

Jocul are urmatoarele reguli:
1. Câştigătorul poate fi:
	- jucătorul care ajunge primul din nou în căsuţa cu numărul $1$, indiferent de punctaj (exceptând cazul în care are punctaj $0$)
	- în cazul în care se termină şirul aruncărilor cu zarul, înseamnă că jucătorii s-au plictisit şi câştigă cel care a cumulat mai multe puncte, iar dacă au punctaje egale câştigă cel care se află în căsuţa cu număr de ordine mai mare.
2. După aruncarea zarului, jucătorul mută pionul cu atâtea căsuţe cât indică valoarea zarului, în ordinea acelor de ceasornic, începând numărătoarea cu căsuţa următoare poziţiei pe care se află. Prima căsuţă nu conţine valoarea $0$ (zero).
3. După mutare pot apare următoarele situaţii:
	- ajunge într-o căsuţă cu valoarea $0$ (zero) – jucătorul este penalizat, pierde toate punctele acumulate şi reia jocul din pozitia $1$
	- ajunge într-o căsuţă cu valoarea $10$ – primeşte un bonus de $10$ puncte
	- ajunge într-o căsuţă cu valoarea $1$ – primeşte $1$ punct
	- ajunge într-o căsuţă în care se află celălalt pion (cu excepţia căsuţei $1$, când câştigă) – jucătorul care ajunge ultimul este penalizat, pierde toate punctele şi reia jocul de la căsuţa $1$.

# Cerință

Determinaţi jucătorul câştigător, poziţiile fiecărui jucător pe cerc şi punctajul fiecărui jucător.

# Date de intrare

În fişierul `joc.in` se dau:
- Pe prima linie numărul $n$ al casutelor din cerc.
- Linia a doua conţine o succesiune de $n$ valori ($0, 1$ sau $10$), separate printr-un spaţiu, reprezentând valoarea fiecărei căsuţe.
- Linia a treia conţine numărul de aruncări cu zarul
- Linia a patra conţine o succesiune de valori întregi cuprinse între $1$ şi $6$, separate printr-un spaţiu, reprezentând aruncarea cu zarul. 

# Date de ieșire

Fişierul `joc.out` va conţine $3$ linii cu următoarele informaţii:
- pe prima linie: jucătorul câştigător
- pe a doua linie: poziţia şi punctajul jucătorului numărul $1$.
- pe a treia linie: poziţia şi punctajul jucătorului numărul $2$.

# Restricții și precizări

* $7 \leq n \leq 100$;

---

Example:
`joc.in`
```
10
1 1 1 1 1 10 0 1 1 0
8
3 6 2 4 1 3 5 3
```

`joc.out`
```
2
6 10
1 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int main() {
    ifstream fin("joc.in");
    ofstream fout("joc.out");

    int n;
    fin >> n;
    
    vector<int> board(n);
    for (int i = 0; i < n; ++i) {
        fin >> board[i];
    }
    
    int numRolls;
    fin >> numRolls;
    
    vector<int> rolls(numRolls);
    for (int i = 0; i < numRolls; ++i) {
        fin >> rolls[i];
    }
    
    int pos1 = 0, pos2 = 0;
    int score1 = 0, score2 = 0;
    bool player1Turn = true;

    for (int i = 0; i < numRolls; ++i) {
        if (player1Turn) {
            pos1 = (pos1 + rolls[i]) % n;
            if (pos1 == pos2 && pos1 != 0) {
                score1 = 0;
                pos1 = 0;
            } else if (board[pos1] == 0) {
                score1 = 0;
                pos1 = 0;
            } else if (board[pos1] == 10) {
                score1 += 10;
            } else if (board[pos1] == 1) {
                score1 += 1;
            }
            if (pos1 == 0 && score1 != 0) {
                fout << "1\n" << pos1 + 1 << " " << score1 << "\n" << pos2 + 1 << " " << score2 << "\n";
                return 0;
            }
        } else {
            pos2 = (pos2 + rolls[i]) % n;
            if (pos2 == pos1 && pos2 != 0) {
                score2 = 0;
                pos2 = 0;
            } else if (board[pos2] == 0) {
                score2 = 0;
                pos2 = 0;
            } else if (board[pos2] == 10) {
                score2 += 10;
            } else if (board[pos2] == 1) {
                score2 += 1;
            }
            if (pos2 == 0 && score2 != 0) {
                fout << "2\n" << pos1 + 1 << " " << score1 << "\n" << pos2 + 1 << " " << score2 << "\n";
                return 0;
            }
        }
        player1Turn = !player1Turn;
    }

    if (score1 > score2 || (score1 == score2 && pos1 > pos2)) {
        fout << "1\n";
    } else {
        fout << "2\n";
    }
    fout << pos1 + 1 << " " << score1 << "\n" << pos2 + 1 << " " << score2 << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `joc.in` using `ifstream`.
2. **Initialization**: Initialize positions and scores for both players.
3. **Game Simulation**:
   - Iterate through the dice rolls.
   - Update the position and score for the current player based on the dice roll.
   - Check for special conditions like landing on a `0`, `10`, or `1`, or landing on the same position as the other player.
   - Check if a player wins by reaching the start position with a non-zero score.
4. **Determine Winner**: If no player reaches the start position, determine the winner based on scores and positions.
5. **Output Results**: Write the results to `joc.out` using `ofstream`.

This approach ensures that the game rules are followed and the solution is efficient for the given constraints.
