---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paritate.in` and write to `paritate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În vederea asigurării unei transmiteri cât mai exacte a informaţiilor pe reţea, transmiterea se efectuează caracter cu caracter, fiecare caracter fiind dat prin codul său ASCII, adică o grupă de 8 biţi (octet). Pentru fiecare 8 biţi transmişi se calculează un bit de paritate care are valoarea $0$ (dacă codul ASCII al caracterului conţine un număr par de cifre binare $1$) sau $1$ (în caz contrar). Deoarece în problema noastră se transmit numai caractere ASCII standard, cu codul ASCII din intervalul $[32, 127]$, codul lor ASCII are bitul $7$ (primul bit din stânga) egal cu $0$. Pe această poziţie va fi pus bitul de paritate, economisind astfel câte un bit pentru fiecare caracter transmis. De exemplu, dacă mesajul care trebuie trasmis conţine caracterele `Paritate`, succesiunea de biţi transmisă va fi:
$\textcolor{red}{0}1010000\ \textcolor{red}{1}1100001\ \textcolor{red}{0}1110010\ \textcolor{red}{0}1101001\ \textcolor{red}{0}1110100\ \textcolor{red}{1}1100001\ \textcolor{red}{0}1110100\ \textcolor{red}{0}1100101$

În plus, pe lângă caracterele amintite, în mesaj mai poate să apară un caracter special, caracter care indică trecerea la începutul unui nou rând. Acest caracter are codul ASCII $10$.

# Cerinţă
Să se scrie un program care să verifice dacă un text a fost sau nu transmis corect.

# Date de intrare
Fişierul de intrare `paritate.in` are pe prima linie o succesiune de caractere `0` şi `1` care reprezintă mesajul transmis. Între caractere nu există spaţii. Linia se termină cu caracterul newline (`\n`).

# Date de ieşire
Fişierul de ieşire `paritate.out` are pe prima linie mesajul `DA` dacă textul a fost transmis corect sau `NU` în caz contrar. În cazul în care mesajul de pe prima linie este `DA`, liniile următoare vor conţine textul transmis în clar. În cazul în care mesajul de pe prima linie este `NU`, linia următoare va conţine numerele de ordine ale caracterelor care nu au fost transmise corect, în ordine strict crescătoare, separate prin câte un spaţiu.

# Restricţii şi precizări
- Cei 8 biţi ai codului ASCII a unui caracter se numerotează de la $0$ la $7$, de la dreapta la stânga, cel mai din stânga bit fiind bitul $7$ iar cel mai din dreapta bitul $0$.
- Textul transmis are cel mult $60\ 000$ de caractere.
- Numărul de caractere `0` şi `1` din prima linie a fişierului de intrare este multiplu de $8$.
- Codurile ASCII ale caracterelor din text aparţin mulţimii $\{10, 32, 33, 34, \dots, 127\}$, codul $10$ însemnând trecerea la începutul unui rând nou (newline).
- Nicio linie din fişierul de ieşire nu va avea mai mult de $255$ caractere.
- Caracterele din text sunt numerotate începând de la $0$.
- Mesajele `DA`/`NU` din prima linie a fişierului de ieşire se scriu cu majuscule.

---

Example:
`paritate.in`
```
0101000011100001011100100110100101110100111000010111010001100101
```

`paritate.out`
```
DA
Paritate
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the problem and then provide an efficient solution in C++.

### Steps to Solve the Problem

1. **Read the Input**: Read the sequence of bits from the file `paritate.in`.
2. **Process Each Character**:
   - Each character is represented by 8 bits.
   - The first bit is the parity bit, and the remaining 7 bits represent the ASCII value.
3. **Check Parity**:
   - Count the number of `1` bits in the 7 bits of the ASCII value.
   - If the count is even, the parity bit should be `0`; otherwise, it should be `1`.
4. **Validate the Message**:
   - If all characters have the correct parity, output `DA` followed by the decoded message.
   - If any character has incorrect parity, output `NU` followed by the indices of the incorrect characters.

### Example Analysis

Given the example input:
```
0101000011100001011100100110100101110100111000010111010001100101
```
- The first character is `01010000`:
  - Parity bit: `0`
  - ASCII bits: `1010000` (which is `P`)
  - Number of `1`s: 2 (even), so parity bit `0` is correct.
- Repeat for the remaining characters.

### Implementation in C++

Here is the implementation based on the above logic:

```cpp
#include <fstream>
#include <vector>
#include <string>

int countOnes(const std::string& bits) {
    int count = 0;
    for (char bit : bits) {
        if (bit == '1') count++;
    }
    return count;
}

int main() {
    std::ifstream input("paritate.in");
    std::ofstream output("paritate.out");

    std::string bitSequence;
    input >> bitSequence;

    std::vector<int> errorIndices;
    std::string decodedMessage;
    bool correctTransmission = true;

    for (size_t i = 0; i < bitSequence.size(); i += 8) {
        std::string byte = bitSequence.substr(i, 8);
        char parityBit = byte[0];
        std::string asciiBits = byte.substr(1, 7);

        int asciiValue = std::stoi(asciiBits, nullptr, 2);
        int onesCount = countOnes(asciiBits);

        if ((onesCount % 2 == 0 && parityBit != '0') || (onesCount % 2 == 1 && parityBit != '1')) {
            correctTransmission = false;
            errorIndices.push_back(i / 8);
        } else {
            decodedMessage += static_cast<char>(asciiValue);
        }
    }

    if (correctTransmission) {
        output << "DA\n" << decodedMessage << "\n";
    } else {
        output << "NU\n";
        for (size_t i = 0; i < errorIndices.size(); ++i) {
            if (i > 0) output << " ";
            output << errorIndices[i];
        }
        output << "\n";
    }

    return 0;
}
```

### Explanation

1. **Reading the Input**: We read the entire bit sequence from `paritate.in`.
2. **Processing Each Byte**:
   - We extract each 8-bit segment.
   - The first bit is the parity bit, and the remaining 7 bits are converted to an ASCII character.
3. **Checking Parity**:
   - We count the number of `1`s in the 7 bits.
   - We check if the parity bit matches the expected value (even or odd count of `1`s).
4. **Output the Result**:
   - If all characters have correct parity, we output `DA` and the decoded message.
   - If any character has incorrect parity, we output `NU` and the indices of the incorrect characters.

This solution should be efficient and correct, adhering to the constraints and requirements of the problem.
