---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to break down the task into several steps:

1. **Reading Input Efficiently**: We need to read the input numbers from the file `factori.in` until we encounter a `0`.
2. **Prime Factorization of Factorials**:
   - Compute the prime factorization of the factorial of each number.
   - Use the Sieve of Eratosthenes to find all prime numbers up to the maximum number in the input.
   - For each prime, determine its power in the factorial of the given number.
3. **Writing Output Efficiently**: Write the results to `factori.out` in the specified format.

### Steps in Detail:

1. **Sieve of Eratosthenes**: This algorithm helps to find all prime numbers up to a given number `n` efficiently.
2. **Prime Factorization of Factorials**:
   - For each prime `p`, the power of `p` in `n!` can be calculated by summing up the integer divisions of `n` by `p`, `p^2`, `p^3`, etc., until `p^k > n`.
3. **File I/O**: Use file streams to read from `factori.in` and write to `factori.out`.

Here is the C++ code implementing the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>

const int MAX_N = 60000;

std::vector<int> sieve(int max_n) {
    std::vector<bool> is_prime(max_n + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= max_n; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= max_n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    std::vector<int> primes;
    for (int i = 2; i <= max_n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}

std::vector<int> prime_factors_of_factorial(int n, const std::vector<int>& primes) {
    std::vector<int> factors;
    for (int prime : primes) {
        if (prime > n) break;
        int power = 0;
        for (int k = prime; k <= n; k *= prime) {
            power += n / k;
        }
        factors.push_back(power);
    }
    return factors;
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");
    
    std::vector<int> numbers;
    int num;
    while (infile >> num && num != 0) {
        numbers.push_back(num);
    }
    
    std::vector<int> primes = sieve(MAX_N);
    
    for (int n : numbers) {
        std::vector<int> factors = prime_factors_of_factorial(n, primes);
        for (size_t i = 0; i < factors.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << factors[i];
        }
        outfile << "\n";
    }
    
    return 0;
}
```

### Explanation of the Code:
1. **Sieve of Eratosthenes**:
   - We use a boolean array `is_prime` to mark non-prime numbers.
   - The `sieve` function returns a vector of all prime numbers up to `MAX_N`.

2. **Prime Factorization of Factorials**:
   - For each number `n` in the input, we calculate the power of each prime in its factorial.
   - The `prime_factors_of_factorial` function calculates the power of each prime in `n!` by summing up the integer divisions.

3. **File I/O**:
   - We read the input numbers from `factori.in` and store them in a vector.
   - After computing the prime factorization for each number, we write the results to `factori.out`.

This solution is efficient and should work within the constraints provided.
