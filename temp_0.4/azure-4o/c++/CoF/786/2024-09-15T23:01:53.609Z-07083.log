---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to compute the prime factorization of the factorial of each number in the input file. Given the constraints, we need to handle numbers up to 60,000 efficiently. The key steps are:

1. **Read Input Efficiently**: Read all numbers from the input file.
2. **Sieve of Eratosthenes**: Use this algorithm to find all prime numbers up to 60,000.
3. **Prime Factorization of Factorials**: For each number, compute the prime factorization of its factorial.
4. **Output the Results**: Write the results to the output file in the specified format.

Here's the C++ code implementing the solution:

```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>

// Function to generate all prime numbers up to maxN using Sieve of Eratosthenes
std::vector<int> sieve(int maxN) {
    std::vector<bool> is_prime(maxN + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= maxN; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= maxN; j += i) {
                is_prime[j] = false;
            }
        }
    }
    std::vector<int> primes;
    for (int i = 2; i <= maxN; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}

// Function to compute the prime factorization of n!
std::vector<int> primeFactorizationOfFactorial(int n, const std::vector<int>& primes) {
    std::vector<int> factorCount;
    for (int prime : primes) {
        if (prime > n) break;
        int count = 0;
        for (int k = prime; k <= n; k *= prime) {
            count += n / k;
        }
        factorCount.push_back(count);
    }
    return factorCount;
}

int main() {
    std::ifstream inFile("factori.in");
    std::ofstream outFile("factori.out");

    std::vector<int> numbers;
    int num;
    while (inFile >> num && num != 0) {
        numbers.push_back(num);
    }

    int maxN = *std::max_element(numbers.begin(), numbers.end());
    std::vector<int> primes = sieve(maxN);

    for (int n : numbers) {
        std::vector<int> factorization = primeFactorizationOfFactorial(n, primes);
        for (size_t i = 0; i < factorization.size(); ++i) {
            if (i > 0) outFile << " ";
            outFile << factorization[i];
        }
        outFile << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Sieve of Eratosthenes**: This function generates all prime numbers up to the maximum number in the input using the Sieve of Eratosthenes algorithm. This is efficient and ensures we have all necessary primes for factorization.
2. **Prime Factorization of Factorials**: For each number `n`, we compute the prime factorization of `n!` by counting the occurrences of each prime in the factorial. This is done by summing the integer divisions of `n` by powers of each prime.
3. **Input and Output Handling**: We read input numbers from `factori.in`, compute the required prime factorizations, and write the results to `factori.out`.

This approach ensures that the solution is both efficient and correct, handling the constraints and requirements specified in the problem.
