---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider the following steps:

1. **Read Input Efficiently**: Since we are not allowed to use standard input/output functions like `cin` or `cout`, we will use file I/O for reading and writing data.
2. **Prime Factorization of Factorials**: We need to compute the prime factorization of factorials up to the maximum possible number in the input (60,000). This involves:
   - Finding all prime numbers up to 60,000 using the Sieve of Eratosthenes.
   - Calculating the power of each prime in the factorial of a number.
3. **Output the Results**: Write the results to the output file in the specified format.

Let's break down the steps in the code:

1. **Sieve of Eratosthenes**: To find all prime numbers up to 60,000.
2. **Prime Factorization of Factorials**: For each number, compute the power of each prime in its factorial.
3. **File I/O**: Read from `factori.in` and write to `factori.out`.

Here is the complete C++ code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

const int MAX_N = 60000;

std::vector<int> sieve(int n) {
    std::vector<int> primes;
    std::vector<bool> is_prime(n + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = 2 * i; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return primes;
}

std::vector<int> prime_factorial_powers(int n, const std::vector<int>& primes) {
    std::vector<int> powers;
    for (int prime : primes) {
        if (prime > n) break;
        int power = 0;
        int p = prime;
        while (p <= n) {
            power += n / p;
            if (p > n / prime) break; // to prevent overflow
            p *= prime;
        }
        powers.push_back(power);
    }
    return powers;
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");

    if (!infile.is_open() || !outfile.is_open()) {
        return 1;
    }

    std::vector<int> primes = sieve(MAX_N);
    std::vector<int> numbers;
    int number;

    while (infile >> number && number != 0) {
        numbers.push_back(number);
    }

    for (int num : numbers) {
        std::vector<int> powers = prime_factorial_powers(num, primes);
        for (size_t i = 0; i < powers.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << powers[i];
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Sieve of Eratosthenes**:
   - We generate all prime numbers up to 60,000 and store them in a vector `primes`.
   
2. **Prime Factorization of Factorials**:
   - For each number, we calculate the power of each prime in its factorial by iterating through the primes and summing up the contributions from each power of the prime.

3. **File I/O**:
   - We read the input numbers from `factori.in` and store them in a vector `numbers`.
   - For each number, we compute the prime powers and write them to `factori.out` in the required format.

This approach ensures that we efficiently compute the prime factorizations and handle large inputs within the constraints.
