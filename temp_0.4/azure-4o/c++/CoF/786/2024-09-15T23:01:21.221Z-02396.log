---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to handle the following tasks:

1. **Read Input Efficiently**: We will read the input from the file `factori.in` and store the numbers.
2. **Prime Factorization of Factorials**: For each number, compute the prime factorization of its factorial.
3. **Output the Results Efficiently**: Write the results to the file `factori.out`.

### Steps to Approach:

1. **Reading Input**: Use file I/O to read all numbers from `factori.in`.
2. **Prime Factorization**:
   - Precompute all primes up to the maximum number using the Sieve of Eratosthenes.
   - For each number, compute the power of each prime in its factorial.
3. **Writing Output**: Use file I/O to write the results to `factori.out`.

### Detailed Implementation:

1. **Sieve of Eratosthenes**: This will help us get all prime numbers up to the maximum number in the input.
2. **Prime Factorization of Factorials**:
   - For each prime \( p \), the power of \( p \) in \( n! \) can be calculated by summing the integer division of \( n \) by \( p, p^2, p^3, \ldots \) until \( p^k \leq n \).

### Implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

const int MAXN = 60000;

std::vector<int> sieve(int n) {
    std::vector<bool> is_prime(n + 1, true);
    std::vector<int> primes;
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i <= n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * 2; j <= n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return primes;
}

std::vector<int> prime_factors_of_factorial(int n, const std::vector<int>& primes) {
    std::vector<int> factors;
    for (int prime : primes) {
        if (prime > n) break;
        int count = 0;
        int power = prime;
        while (power <= n) {
            count += n / power;
            if (power > n / prime) break; // to prevent overflow
            power *= prime;
        }
        factors.push_back(count);
    }
    return factors;
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");

    std::vector<int> numbers;
    int num;
    while (infile >> num && num != 0) {
        numbers.push_back(num);
    }

    std::vector<int> primes = sieve(MAXN);

    for (int n : numbers) {
        std::vector<int> factors = prime_factors_of_factorial(n, primes);
        bool first = true;
        for (int factor : factors) {
            if (factor > 0) {
                if (!first) outfile << " ";
                outfile << factor;
                first = false;
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Sieve of Eratosthenes**:
   - We generate all prime numbers up to 60,000.
2. **Prime Factorization**:
   - For each number \( n \), we calculate the power of each prime in its factorial by summing the integer divisions \( n / p, n / p^2, \ldots \).
3. **Input and Output**:
   - We read the input numbers from `factori.in` and store them in a vector.
   - For each number, we compute the prime factorization of its factorial and write the result to `factori.out`.

This approach ensures that the solution is efficient and handles the large input size constraints effectively.
