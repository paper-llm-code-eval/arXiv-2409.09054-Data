{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/845/2024-09-16T00:41:30.980Z-05265.log",
  "attemptStart": 1726447290.98,
  "attemptEnd": 1726447304.469,
  "attemptDuration": 13.489000082015991,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> readInput(const string& filename) {\n    ifstream infile(filename);\n    int n;\n    infile >> n;\n    vector<int> sequence(n);\n    for (int i = 0; i < n; ++i) {\n        infile >> sequence[i];\n    }\n    return sequence;\n}\n\nvoid writeOutput(const string& filename, int initialMountains, int totalMountains, int finalElements) {\n    ofstream outfile(filename);\n    outfile << initialMountains << \"\\n\";\n    outfile << totalMountains << \"\\n\";\n    outfile << finalElements << \"\\n\";\n}\n\nbool isMountain(const vector<int>& seq, int start, int peak, int end) {\n    for (int i = start; i < peak; ++i) {\n        if (seq[i] >= seq[i + 1]) return false;\n    }\n    for (int i = peak; i < end; ++i) {\n        if (seq[i] <= seq[i + 1]) return false;\n    }\n    return true;\n}\n\nvector<int> findMountains(vector<int>& seq) {\n    vector<int> peaks;\n    int n = seq.size();\n    for (int i = 1; i < n - 1; ++i) {\n        if (seq[i - 1] < seq[i] && seq[i] > seq[i + 1]) {\n            int start = i - 1;\n            int end = i + 1;\n            while (start > 0 && seq[start - 1] < seq[start]) --start;\n            while (end < n - 1 && seq[end] > seq[end + 1]) ++end;\n            if (isMountain(seq, start, i, end)) {\n                peaks.push_back(i);\n            }\n        }\n    }\n    return peaks;\n}\n\nint main() {\n    vector<int> sequence = readInput(\"munte.in\");\n    int initialMountains = 0, totalMountains = 0;\n\n    while (true) {\n        vector<int> peaks = findMountains(sequence);\n        if (peaks.empty()) break;\n        initialMountains += (totalMountains == 0) ? peaks.size() : 0;\n        totalMountains += peaks.size();\n        for (int peak : peaks) {\n            sequence[peak] = -1; // Mark the peak for removal\n        }\n        sequence.erase(remove(sequence.begin(), sequence.end(), -1), sequence.end());\n    }\n\n    writeOutput(\"munte.out\", initialMountains, totalMountains, sequence.size());\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1733,
  "metadata": {
    "id": 845,
    "examples": [
      {
        "in": "8\n1 2 5 0 6 9 3 4",
        "out": "2\n4\n4",
        "explainer": ""
      }
    ],
    "body": "Se consideră un șir $x_1, x_2, \\dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \\dots, x_{k-1}, x_k, x_{k+1}, \\dots, x_j$ ($1 \\leq i < k < j \\leq n$) cu proprietatea că $x_i < x_{i+1} < \\dots < x_{k-1} < x_k > x_{k+1} > \\dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \\ 4 \\ 6 \\ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \\ 4 \\ 8 \\ 1 \\ 2 \\ 5 \\ 0$ conține $2$ secvențe munte: $3 \\ 4 \\ 8 \\ 1$ și $1 \\ 2 \\ 5 \\ 0$.\n\nDupă determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.\n\n# Cerință\n\nScrieți un program care citește numerele $n, x_1, x_2, \\dots, x_n$ și apoi determină:\n\n1. numărul de secvențe munte din șirul inițial;\n2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;\n3. numărul de elemente din șirul final care nu mai conține secvențe munte.\n\n# Date de intrare\n\nFișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \\dots, x_n$ separate două câte două prin câte un spațiu.\n\n# Date de ieșire\n\nFișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.\n\n# Restricții și precizări\n\n* $3 \\leq n \\leq 100$;\n* $0 \\leq x_i \\leq 100 \\ 000$;\n* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.\n* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.\n* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.\n* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.",
    "header": {
      "problem_id": 845,
      "problem_name": "munte",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "munte.in",
      "output_filename": "munte.out",
      "multiple_solutions": true,
      "original_source": "OJI 2014 VI: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "munte.in",
      "output": "munte.out"
    },
    "consoleInteraction": false
  }
}