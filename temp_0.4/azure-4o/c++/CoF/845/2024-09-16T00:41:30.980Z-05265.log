---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `munte.in` and write to `munte.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \dots, x_{k-1}, x_k, x_{k+1}, \dots, x_j$ ($1 \leq i < k < j \leq n$) cu proprietatea că $x_i < x_{i+1} < \dots < x_{k-1} < x_k > x_{k+1} > \dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \ 4 \ 6 \ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \ 4 \ 8 \ 1 \ 2 \ 5 \ 0$ conține $2$ secvențe munte: $3 \ 4 \ 8 \ 1$ și $1 \ 2 \ 5 \ 0$.

După determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.

# Cerință

Scrieți un program care citește numerele $n, x_1, x_2, \dots, x_n$ și apoi determină:

1. numărul de secvențe munte din șirul inițial;
2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;
3. numărul de elemente din șirul final care nu mai conține secvențe munte.

# Date de intrare

Fișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \dots, x_n$ separate două câte două prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.

# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq x_i \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.
* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.
* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.
* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.

---

Example:
`munte.in`
```
8
1 2 5 0 6 9 3 4
```

`munte.out`
```
2
4
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> readInput(const string& filename) {
    ifstream infile(filename);
    int n;
    infile >> n;
    vector<int> sequence(n);
    for (int i = 0; i < n; ++i) {
        infile >> sequence[i];
    }
    return sequence;
}

void writeOutput(const string& filename, int initialMountains, int totalMountains, int finalElements) {
    ofstream outfile(filename);
    outfile << initialMountains << "\n";
    outfile << totalMountains << "\n";
    outfile << finalElements << "\n";
}

bool isMountain(const vector<int>& seq, int start, int peak, int end) {
    for (int i = start; i < peak; ++i) {
        if (seq[i] >= seq[i + 1]) return false;
    }
    for (int i = peak; i < end; ++i) {
        if (seq[i] <= seq[i + 1]) return false;
    }
    return true;
}

vector<int> findMountains(vector<int>& seq) {
    vector<int> peaks;
    int n = seq.size();
    for (int i = 1; i < n - 1; ++i) {
        if (seq[i - 1] < seq[i] && seq[i] > seq[i + 1]) {
            int start = i - 1;
            int end = i + 1;
            while (start > 0 && seq[start - 1] < seq[start]) --start;
            while (end < n - 1 && seq[end] > seq[end + 1]) ++end;
            if (isMountain(seq, start, i, end)) {
                peaks.push_back(i);
            }
        }
    }
    return peaks;
}

int main() {
    vector<int> sequence = readInput("munte.in");
    int initialMountains = 0, totalMountains = 0;

    while (true) {
        vector<int> peaks = findMountains(sequence);
        if (peaks.empty()) break;
        initialMountains += (totalMountains == 0) ? peaks.size() : 0;
        totalMountains += peaks.size();
        for (int peak : peaks) {
            sequence[peak] = -1; // Mark the peak for removal
        }
        sequence.erase(remove(sequence.begin(), sequence.end(), -1), sequence.end());
    }

    writeOutput("munte.out", initialMountains, totalMountains, sequence.size());
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The `readInput` function reads the input from `munte.in` and returns the sequence of numbers.

2. **Writing Output:**
   - The `writeOutput` function writes the results to `munte.out`.

3. **Checking Mountain Sequence:**
   - The `isMountain` function checks if a subsequence is a valid mountain sequence.

4. **Finding Mountain Peaks:**
   - The `findMountains` function identifies all the peaks in the current sequence that form valid mountain sequences.

5. **Main Logic:**
   - The main function reads the sequence, repeatedly finds and removes mountain peaks, and keeps track of the initial and total number of mountain sequences. It then writes the results to the output file.

This solution ensures efficient processing by removing peaks in each iteration and checking for new mountain sequences until no more can be found.
