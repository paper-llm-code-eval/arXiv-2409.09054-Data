---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to generate all possible arithmetic expressions using the given digits and check if any of these expressions evaluate to the target number \( N \). Given the constraints, a brute-force approach using backtracking is feasible.

Here's the step-by-step approach:

1. **Read Input**: Read the value of \( N \) and the sequence of digits from the input file.
2. **Generate Expressions**: Use backtracking to generate all possible expressions by inserting `+` or `-` between the digits.
3. **Evaluate Expressions**: Evaluate each generated expression to check if it equals \( N \).
4. **Output Result**: If a valid expression is found, output it. Otherwise, output `0`.

We'll implement this in C++ using file I/O for reading and writing, and a recursive function for generating the expressions.

Here is the C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

void generateExpressions(const vector<int>& digits, int target, int index, string currentExpr, int currentSum, ofstream& fout, bool& found) {
    if (index == digits.size()) {
        if (currentSum == target) {
            fout << currentExpr;
            found = true;
        }
        return;
    }
    
    // Try adding the next digit with a plus sign
    generateExpressions(digits, target, index + 1, currentExpr + "+" + to_string(digits[index]), currentSum + digits[index], fout, found);
    if (found) return;

    // Try adding the next digit with a minus sign
    generateExpressions(digits, target, index + 1, currentExpr + "-" + to_string(digits[index]), currentSum - digits[index], fout, found);
    if (found) return;
}

int main() {
    ifstream fin("adunscad.in");
    ofstream fout("adunscad.out");

    int N, M;
    fin >> N >> M;

    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }

    bool found = false;
    generateExpressions(digits, N, 1, to_string(digits[0]), digits[0], fout, found);

    if (!found) {
        fout << "0";
    }

    fin.close();
    fout.close();
    
    return 0;
}
```

### Explanation:

1. **Input Reading**:
   - Read \( N \) and \( M \) from the input file.
   - Read the sequence of digits into a vector.

2. **Backtracking Function**:
   - `generateExpressions` is a recursive function that generates all possible expressions.
   - It takes the current index in the digits vector, the current expression string, and the current sum of the expression.
   - It tries to add the next digit with both `+` and `-` operators and recursively calls itself.
   - If a valid expression is found (i.e., it evaluates to \( N \)), it writes the expression to the output file and sets `found` to `true` to stop further processing.

3. **Output**:
   - If no valid expression is found, output `0`.

This solution ensures that all possible expressions are checked, and it stops as soon as a valid expression is found, making it efficient within the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the initial solution lies in the way the recursive function generates and evaluates expressions. Specifically, the function does not handle the case where the first digit can be preceded by a `-` sign, which is necessary to handle negative results.

To address this, we need to modify the approach to include the possibility of starting the expression with a `-` sign. Additionally, we need to ensure that the function correctly handles all possible combinations of `+` and `-` operators.

Here's the corrected and improved solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

void generateExpressions(const vector<int>& digits, int target, int index, string currentExpr, int currentSum, ofstream& fout, bool& found) {
    if (index == digits.size()) {
        if (currentSum == target) {
            fout << currentExpr;
            found = true;
        }
        return;
    }
    
    // Try adding the next digit with a plus sign
    generateExpressions(digits, target, index + 1, currentExpr + "+" + to_string(digits[index]), currentSum + digits[index], fout, found);
    if (found) return;

    // Try adding the next digit with a minus sign
    generateExpressions(digits, target, index + 1, currentExpr + "-" + to_string(digits[index]), currentSum - digits[index], fout, found);
    if (found) return;
}

int main() {
    ifstream fin("adunscad.in");
    ofstream fout("adunscad.out");

    int N, M;
    fin >> N >> M;

    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }

    bool found = false;

    // Start by considering the first digit as positive
    generateExpressions(digits, N, 1, to_string(digits[0]), digits[0], fout, found);
    if (!found) {
        // If not found, consider the first digit as negative
        generateExpressions(digits, N, 1, "-" + to_string(digits[0]), -digits[0], fout, found);
    }

    if (!found) {
        fout << "0";
    }

    fin.close();
    fout.close();
    
    return 0;
}
```

### Explanation:

1. **Input Reading**:
   - Read \( N \) and \( M \) from the input file.
   - Read the sequence of digits into a vector.

2. **Backtracking Function**:
   - `generateExpressions` is a recursive function that generates all possible expressions.
   - It takes the current index in the digits vector, the current expression string, and the current sum of the expression.
   - It tries to add the next digit with both `+` and `-` operators and recursively calls itself.
   - If a valid expression is found (i.e., it evaluates to \( N \)), it writes the expression to the output file and sets `found` to `true` to stop further processing.

3. **Handling the First Digit**:
   - The main function now starts by considering the first digit as positive.
   - If no valid expression is found, it then considers the first digit as negative.
   - This ensures that all possible expressions are checked, including those where the first digit is negative.

4. **Output**:
   - If no valid expression is found, output `0`.

This solution ensures that all possible expressions are checked, including those starting with a negative sign, and it stops as soon as a valid expression is found, making it efficient within the given constraints.
