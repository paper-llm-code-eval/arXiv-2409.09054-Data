---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

using namespace std;

void findExpression(int N, const vector<int>& digits, string expr, int currentSum, int index, bool& found) {
    if (found) return;
    if (index == digits.size()) {
        if (currentSum == N) {
            ofstream fout("adunscad.out");
            fout << expr << endl;
            fout.close();
            found = true;
        }
        return;
    }

    // Try adding the next digit
    findExpression(N, digits, expr + "+" + to_string(digits[index]), currentSum + digits[index], index + 1, found);
    // Try subtracting the next digit
    findExpression(N, digits, expr + "-" + to_string(digits[index]), currentSum - digits[index], index + 1, found);
}

int main() {
    ifstream fin("adunscad.in");
    int N, M;
    fin >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    bool found = false;
    // Start the recursive search with the first digit
    findExpression(N, digits, to_string(digits[0]), digits[0], 1, found);

    if (!found) {
        ofstream fout("adunscad.out");
        fout << 0 << endl;
        fout.close();
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the input from `adunscad.in` file using `ifstream`. It reads the target number `N` and the number of digits `M`. Then, it reads the sequence of digits into a vector.

2. **Recursive Search**: The `findExpression` function is a recursive function that tries to build the expression by adding or subtracting each digit. It keeps track of the current sum and the expression built so far.

3. **Base Case**: If the index reaches the size of the digits vector, it checks if the current sum equals `N`. If it does, it writes the expression to `adunscad.out` and sets the `found` flag to true.

4. **Recursive Case**: The function recursively tries adding and subtracting the next digit. It appends the corresponding operator and digit to the expression string and updates the current sum accordingly.

5. **Starting the Search**: The main function initializes the search with the first digit and starts the recursive search.

6. **No Solution Case**: If no valid expression is found, the program writes `0` to the output file.

This solution ensures that all possible combinations of adding and subtracting the digits are explored efficiently using recursion. The use of the `found` flag helps to stop the search once a valid expression is found.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the initial solution is that it doesn't correctly handle cases where the first digit should be preceded by a minus sign to achieve the target result. The recursive function starts with the first digit as a positive number, which limits the possible expressions it can generate.

To fix this, we need to consider both positive and negative signs for the first digit. Additionally, we need to ensure that the recursive search correctly explores all possible combinations of adding and subtracting the digits.

Here is the corrected and optimized solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

using namespace std;

void findExpression(int N, const vector<int>& digits, string expr, int currentSum, int index, bool& found) {
    if (found) return;
    if (index == digits.size()) {
        if (currentSum == N) {
            ofstream fout("adunscad.out");
            fout << expr << endl;
            fout.close();
            found = true;
        }
        return;
    }

    // Try adding the next digit
    findExpression(N, digits, expr + "+" + to_string(digits[index]), currentSum + digits[index], index + 1, found);
    // Try subtracting the next digit
    findExpression(N, digits, expr + "-" + to_string(digits[index]), currentSum - digits[index], index + 1, found);
}

int main() {
    ifstream fin("adunscad.in");
    int N, M;
    fin >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    bool found = false;

    // Start the recursive search with the first digit as positive
    findExpression(N, digits, to_string(digits[0]), digits[0], 1, found);
    // Start the recursive search with the first digit as negative
    if (!found) {
        findExpression(N, digits, "-" + to_string(digits[0]), -digits[0], 1, found);
    }

    if (!found) {
        ofstream fout("adunscad.out");
        fout << 0 << endl;
        fout.close();
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the input from `adunscad.in` file using `ifstream`. It reads the target number `N` and the number of digits `M`. Then, it reads the sequence of digits into a vector.

2. **Recursive Search**: The `findExpression` function is a recursive function that tries to build the expression by adding or subtracting each digit. It keeps track of the current sum and the expression built so far.

3. **Base Case**: If the index reaches the size of the digits vector, it checks if the current sum equals `N`. If it does, it writes the expression to `adunscad.out` and sets the `found` flag to true.

4. **Recursive Case**: The function recursively tries adding and subtracting the next digit. It appends the corresponding operator and digit to the expression string and updates the current sum accordingly.

5. **Starting the Search**: The main function initializes the search with the first digit as both positive and negative, and starts the recursive search.

6. **No Solution Case**: If no valid expression is found, the program writes `0` to the output file.

This solution ensures that all possible combinations of adding and subtracting the digits are explored efficiently using recursion. The use of the `found` flag helps to stop the search once a valid expression is found. This approach also correctly handles cases where the first digit needs to be negative.
