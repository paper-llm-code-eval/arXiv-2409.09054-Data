---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently in C++, we need to explore all possible combinations of arithmetic expressions using the given digits and check if any of them evaluate to the target number \( N \). Given the constraints, a brute-force approach using backtracking is feasible.

Here is the C++ code to solve the problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

int N, M;
vector<int> digits;
bool found = false;
string result;

void backtrack(int index, int current_sum, string expression) {
    if (index == M) {
        if (current_sum == N) {
            result = expression;
            found = true;
        }
        return;
    }
    
    if (found) return;

    // Try adding the next digit
    backtrack(index + 1, current_sum + digits[index], expression + "+" + to_string(digits[index]));
    
    // Try subtracting the next digit
    backtrack(index + 1, current_sum - digits[index], expression + "-" + to_string(digits[index]));
}

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    infile >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    // Start backtracking from the first digit
    backtrack(1, digits[0], to_string(digits[0]));

    if (found) {
        outfile << result << endl;
    } else {
        outfile << 0 << endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the target number \( N \) and the number of digits \( M \). We then read the sequence of digits into a vector.
2. **Backtracking Function**: The `backtrack` function is used to explore all possible combinations of the digits with `+` and `-` operators.
   - It takes the current index, the current sum of the expression so far, and the expression string built so far.
   - If we have used all digits (i.e., `index == M`), we check if the current sum equals \( N \). If it does, we set the result and mark the solution as found.
   - If not, we recursively try adding and subtracting the next digit.
3. **Initial Call**: We start the backtracking with the first digit, initializing the current sum with the first digit and the expression string with the first digit.
4. **Output**: If a valid expression is found, it is written to the output file. Otherwise, `0` is written.

This solution ensures that all possible combinations are explored efficiently within the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous solution is that it does not handle the case where the first digit can be preceded by a `-` operator. This means the initial call to the backtracking function should also consider the possibility of starting with a negative first digit.

Let's reimplement the solution, ensuring we handle the case where the first digit can be either positive or negative. We'll also add checks to ensure the solution is correctly formed.

Here is the corrected C++ code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

int N, M;
vector<int> digits;
bool found = false;
string result;

void backtrack(int index, int current_sum, string expression) {
    if (index == M) {
        if (current_sum == N) {
            result = expression;
            found = true;
        }
        return;
    }
    
    if (found) return;

    // Try adding the next digit
    backtrack(index + 1, current_sum + digits[index], expression + "+" + to_string(digits[index]));
    
    // Try subtracting the next digit
    backtrack(index + 1, current_sum - digits[index], expression + "-" + to_string(digits[index]));
}

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    infile >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    // Start backtracking from the first digit as positive
    backtrack(1, digits[0], to_string(digits[0]));

    // If not found, start backtracking from the first digit as negative
    if (!found) {
        backtrack(1, -digits[0], "-" + to_string(digits[0]));
    }

    if (found) {
        outfile << result << endl;
    } else {
        outfile << 0 << endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the target number \( N \) and the number of digits \( M \). We then read the sequence of digits into a vector.
2. **Backtracking Function**: The `backtrack` function is used to explore all possible combinations of the digits with `+` and `-` operators.
   - It takes the current index, the current sum of the expression so far, and the expression string built so far.
   - If we have used all digits (i.e., `index == M`), we check if the current sum equals \( N \). If it does, we set the result and mark the solution as found.
   - If not, we recursively try adding and subtracting the next digit.
3. **Initial Calls**: We start the backtracking with two initial calls:
   - One considering the first digit as positive.
   - Another considering the first digit as negative.
4. **Output**: If a valid expression is found, it is written to the output file. Otherwise, `0` is written.

This approach ensures that we correctly handle the possibility of the first digit being negative and explores all valid expressions.
