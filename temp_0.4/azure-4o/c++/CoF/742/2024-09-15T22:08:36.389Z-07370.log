---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tabel.in` and write to `tabel.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

După cum probabil știți, contabilii își țin datele sub formă de tabele și calculează tot felul de sume pe linii și pe coloane. Contabilul nostru Atnoc și-a organizat valorile sub forma unui tabel cu $n$ linii (numerotate de la $1$ la $n$) și $m$ coloane (numerotate de la $1$ la $m$). Elementele de pe ultima coloană sunt sumele elementelor de pe linii (mai exact, elementul de pe linia $i$ și coloana $m$ este egal cu suma elementelor de pe linia $i$ aflate pe coloanele $1, 2, \dots, m-1$), iar elementele de pe ultima linie sunt sumele elementelor de pe coloane (mai exact, elementul de pe linia $n$ și coloana $i$ este egal cu suma elementelor de pe coloana $i$ aflate pe liniile $1, 2, \dots, n-1$). Un exemplu de astfel de tabel este dat în figura următoare.

Din păcate, Atnoc a stropit cu apă minunatul său tabel și astfel o parte dintre numerele din tabel au devenit ilizibile.

~[tabel.png|width=30em]

# Cerință

Scrieți un program care să reconstituie toate datele din tabel.

# Date de intrare

Pe prima linie a fișierului text de intrare `tabel.in` se află două numere naturale $n$ și $m$, separate printr-un spațiu, ce reprezintă numărul de linii și respectiv numărul de coloane ale tabelului. Pe cea de a doua linie a fișierului de intrare se află un număr natural $p$ care reprezintă numărul de valori nedeteriorate din tabel. Pe fiecare dintre următoarele $p$ linii se află câte trei numere naturale, separate prin câte un spațiu $l \ c \ v$, unde $l$ este numărul liniei, $c$ este numărul coloanei și $v$ este valoarea elementului de pe linia $l$ și coloana $c$ din tabel.

# Date de ieșire

În fișierul text de ieșire `tabel.out` se va scrie tabelul reconstituit, pe $n$ linii câte $m$ valori separate prin câte un spațiu.

# Restricții și precizări

* $1 < n, m \leq 50$
* Valorile din tabel sunt numere naturale $< 32 \ 000$.
* În toate testele datele din tabel pot fi reconstituite.

---

Example:
`tabel.in`
```
3 4
10
1 1 2
1 2 5
1 3 7
1 4 14
2 2 6
2 4 23
3 1 13
3 2 11
3 3 13
3 4 37
```

`tabel.out`
```
2 5 7 14
11 6 6 23
13 11 13 37
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to reconstruct the table based on the given constraints and known values. We'll use file I/O for reading the input and writing the output, and we'll avoid using standard I/O functions like `cin`, `cout`, `scanf`, and `printf`.

Here's the step-by-step approach:

1. **Read Input**: Read the dimensions of the table (n, m) and the number of known values (p).
2. **Initialize the Table**: Create a 2D vector to store the table values, initialized to -1 (or any sentinel value indicating unknown values).
3. **Fill Known Values**: Populate the table with the known values provided in the input.
4. **Reconstruct the Table**:
   - For each row, calculate the sum of known values and use it to infer unknown values.
   - For each column, calculate the sum of known values and use it to infer unknown values.
5. **Write Output**: Output the reconstructed table to the output file.

Here's the implementation in C++:

```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream infile("tabel.in");
    std::ofstream outfile("tabel.out");

    int n, m, p;
    infile >> n >> m >> p;

    std::vector<std::vector<int>> table(n, std::vector<int>(m, -1));

    for (int i = 0; i < p; ++i) {
        int l, c, v;
        infile >> l >> c >> v;
        table[l - 1][c - 1] = v;
    }

    // Reconstruct the table
    for (int i = 0; i < n - 1; ++i) {
        int row_sum = table[i][m - 1];
        int known_sum = 0, unknown_count = 0, unknown_index = -1;
        for (int j = 0; j < m - 1; ++j) {
            if (table[i][j] == -1) {
                unknown_count++;
                unknown_index = j;
            } else {
                known_sum += table[i][j];
            }
        }
        if (unknown_count == 1) {
            table[i][unknown_index] = row_sum - known_sum;
        }
    }

    for (int j = 0; j < m - 1; ++j) {
        int col_sum = table[n - 1][j];
        int known_sum = 0, unknown_count = 0, unknown_index = -1;
        for (int i = 0; i < n - 1; ++i) {
            if (table[i][j] == -1) {
                unknown_count++;
                unknown_index = i;
            } else {
                known_sum += table[i][j];
            }
        }
        if (unknown_count == 1) {
            table[unknown_index][j] = col_sum - known_sum;
        }
    }

    // Calculate the last row and column sums
    for (int i = 0; i < n - 1; ++i) {
        int row_sum = 0;
        for (int j = 0; j < m - 1; ++j) {
            row_sum += table[i][j];
        }
        table[i][m - 1] = row_sum;
    }

    for (int j = 0; j < m - 1; ++j) {
        int col_sum = 0;
        for (int i = 0; i < n - 1; ++i) {
            col_sum += table[i][j];
        }
        table[n - 1][j] = col_sum;
    }

    int total_sum = 0;
    for (int j = 0; j < m - 1; ++j) {
        total_sum += table[n - 1][j];
    }
    table[n - 1][m - 1] = total_sum;

    // Write the output
    for (const auto& row : table) {
        for (size_t j = 0; j < row.size(); ++j) {
            if (j > 0) outfile << " ";
            outfile << row[j];
        }
        outfile << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read from `tabel.in` and `ofstream` to write to `tabel.out`.
2. **Table Initialization**: We initialize a 2D vector `table` with dimensions `n x m`, filled with `-1` to indicate unknown values.
3. **Filling Known Values**: We populate the table with the known values provided in the input.
4. **Reconstructing the Table**:
   - For each row, we calculate the sum of known values and infer the unknown value if there's exactly one unknown value.
   - For each column, we do the same.
5. **Calculating Sums**: We calculate the sums for the last row and last column based on the reconstructed values.
6. **Writing Output**: We write the reconstructed table to `tabel.out`.

This solution efficiently reconstructs the table based on the given constraints and known values.
