---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's break down the problem and then provide the solution in C++.

### Steps to Solve the Problem

1. **Read Input**:
   - Read the start time (hour, minute, second).
   - Read the number of competitors.
   - Read the time taken by each competitor in minutes and seconds.

2. **Calculate Finish Times**:
   - For each competitor, calculate the finish time by adding their time to the start time.
   - Keep track of the earliest and latest finish times.

3. **Output Results**:
   - Write the earliest and latest finish times to the output file.

### Detailed Steps

1. **Reading the Input**:
   - Use file I/O to read from `schi.in`.
   - Parse the start time and the number of competitors.
   - Parse the times for each competitor.

2. **Time Calculation**:
   - Convert the start time and each competitor's time into total seconds since the start of the day.
   - Add the competitor's time to the start time to get the finish time.
   - Track the minimum and maximum finish times.

3. **Convert Back to Hours, Minutes, and Seconds**:
   - Convert the minimum and maximum finish times back to hours, minutes, and seconds.

4. **Writing the Output**:
   - Use file I/O to write the results to `schi.out`.

### C++ Solution

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

struct Time {
    int hour;
    int minute;
    int second;

    int toSeconds() const {
        return hour * 3600 + minute * 60 + second;
    }

    static Time fromSeconds(int totalSeconds) {
        Time t;
        t.hour = totalSeconds / 3600;
        totalSeconds %= 3600;
        t.minute = totalSeconds / 60;
        t.second = totalSeconds % 60;
        return t;
    }
};

int main() {
    std::ifstream inFile("schi.in");
    std::ofstream outFile("schi.out");

    Time startTime;
    inFile >> startTime.hour >> startTime.minute >> startTime.second;

    int n;
    inFile >> n;

    std::vector<int> finishTimes;
    finishTimes.reserve(n);

    int minutes, seconds;
    for (int i = 0; i < n; ++i) {
        inFile >> minutes >> seconds;
        int totalTime = minutes * 60 + seconds;
        int finishTime = startTime.toSeconds() + totalTime;
        finishTimes.push_back(finishTime);
    }

    auto minMaxFinishTimes = std::minmax_element(finishTimes.begin(), finishTimes.end());

    Time earliestFinish = Time::fromSeconds(*minMaxFinishTimes.first);
    Time latestFinish = Time::fromSeconds(*minMaxFinishTimes.second);

    outFile << earliestFinish.hour << " " << earliestFinish.minute << " " << earliestFinish.second << "\n";
    outFile << latestFinish.hour << " " << latestFinish.minute << " " << latestFinish.second << "\n";

    return 0;
}
```

### Explanation

- **Struct `Time`**: A helper struct to manage time conversions between hours, minutes, seconds, and total seconds.
- **Reading Input**: Using `ifstream` to read the start time and competitors' times.
- **Calculating Finish Times**: Converting times to total seconds for easy comparison and calculation.
- **Finding Earliest and Latest Finish Times**: Using `std::minmax_element` to find the minimum and maximum finish times.
- **Output**: Converting the finish times back to hours, minutes, and seconds and writing them to the output file using `ofstream`.

This approach ensures efficient time calculations and minimizes the complexity of managing time manually.
