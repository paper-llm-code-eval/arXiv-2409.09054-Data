---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Time {
    int hour;
    int minute;
    int second;

    void addTime(int m, int s) {
        second += s;
        minute += m + second / 60;
        second %= 60;
        hour += minute / 60;
        minute %= 60;
    }

    bool operator<(const Time& other) const {
        if (hour != other.hour) return hour < other.hour;
        if (minute != other.minute) return minute < other.minute;
        return second < other.second;
    }
};

int main() {
    std::ifstream inFile("schi.in");
    std::ofstream outFile("schi.out");

    int startHour, startMinute, startSecond;
    inFile >> startHour >> startMinute >> startSecond;

    int n;
    inFile >> n;

    Time startTime = {startHour, startMinute, startSecond};
    std::vector<Time> finishTimes(n);

    for (int i = 0; i < n; ++i) {
        int m, s;
        inFile >> m >> s;
        finishTimes[i] = startTime;
        finishTimes[i].addTime(m, s);
    }

    auto minMaxTimes = std::minmax_element(finishTimes.begin(), finishTimes.end());

    outFile << minMaxTimes.first->hour << " " << minMaxTimes.first->minute << " " << minMaxTimes.first->second << "\n";
    outFile << minMaxTimes.second->hour << " " << minMaxTimes.second->minute << " " << minMaxTimes.second->second << "\n";

    return 0;
}
```

### Explanation:
1. **Struct Definition**: A `Time` struct is defined to store the hour, minute, and second. It includes a method `addTime` to add minutes and seconds to the current time, taking care of overflow (e.g., seconds exceeding 60).
2. **Reading Input**: The input is read from `schi.in` using `ifstream`. The start time and the number of competitors are read first.
3. **Storing Finish Times**: For each competitor, the time taken to complete the course is read, and their finish time is calculated by adding this duration to the start time.
4. **Finding Min and Max Times**: The minimum and maximum finish times are found using `std::minmax_element`.
5. **Writing Output**: The earliest and latest finish times are written to `schi.out` using `ofstream`.

This approach ensures efficient reading, processing, and writing of data, adhering to the constraints and requirements of the problem.
