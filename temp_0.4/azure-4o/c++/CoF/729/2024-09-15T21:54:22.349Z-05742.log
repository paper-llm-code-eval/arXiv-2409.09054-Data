---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to construct the vector `y` such that the relative order of elements in `x` is preserved in `y` based on their sorted positions. Here's a step-by-step approach to achieve this:

1. **Read Input:** Read the number of elements `n` and the vector `x` from the input file `siruri.in`.
2. **Sort and Rank:** Sort the vector `x` while keeping track of the original indices. This helps in determining the rank of each element in the original vector.
3. **Construct Vector y:** Using the ranks obtained from the sorted vector, construct the vector `y` where each element represents the rank of the corresponding element in `x`.
4. **Write Output:** Write the vector `y` to the output file `siruri.out`.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("siruri.in");
    std::ofstream outfile("siruri.out");

    int n;
    infile >> n;

    std::vector<int> x(n);
    for (int i = 0; i < n; ++i) {
        infile >> x[i];
    }

    // Pair each element with its index
    std::vector<std::pair<int, int>> indexed_x(n);
    for (int i = 0; i < n; ++i) {
        indexed_x[i] = {x[i], i};
    }

    // Sort based on the value
    std::sort(indexed_x.begin(), indexed_x.end());

    // Create the result vector y
    std::vector<int> y(n);
    for (int i = 0; i < n; ++i) {
        y[indexed_x[i].second] = i + 1;
    }

    // Write the result to the output file
    for (int i = 0; i < n; ++i) {
        outfile << y[i] << (i == n - 1 ? "" : " ");
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We use `std::ifstream` to read from `siruri.in`.
   - The number of elements `n` and the vector `x` are read from the file.

2. **Pairing and Sorting:**
   - We create a vector of pairs where each pair consists of an element from `x` and its original index.
   - We sort this vector of pairs based on the element values. This helps us determine the rank of each element in the sorted order.

3. **Constructing Vector `y`:**
   - After sorting, the position of each element in the sorted vector gives its rank.
   - We populate the vector `y` such that `y[i]` is the rank of `x[i]`.

4. **Writing Output:**
   - We use `std::ofstream` to write the vector `y` to `siruri.out`.

This approach ensures that the solution is both efficient and correct, adhering to the constraints provided.
