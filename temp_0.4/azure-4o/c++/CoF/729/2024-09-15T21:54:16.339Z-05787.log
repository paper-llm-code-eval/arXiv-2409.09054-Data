---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to map the values of vector `x` to their ranks in a sorted version of `x`. This will ensure that the resulting vector `y` maintains the order property described in the problem statement.

Here's the step-by-step approach:

1. **Read the input**: Read the number of elements `n` and the vector `x` from the input file `siruri.in`.
2. **Sort the vector**: Create a sorted copy of the vector `x`.
3. **Map values to ranks**: Use a map to store the rank of each element in the sorted vector.
4. **Construct the vector `y`**: For each element in the original vector `x`, find its rank using the map and construct the vector `y`.
5. **Write the output**: Write the vector `y` to the output file `siruri.out`.

Here is the C++ code that implements the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

int main() {
    std::ifstream infile("siruri.in");
    std::ofstream outfile("siruri.out");

    int n;
    infile >> n;

    std::vector<int> x(n);
    for (int i = 0; i < n; ++i) {
        infile >> x[i];
    }

    // Create a sorted copy of x
    std::vector<int> sorted_x = x;
    std::sort(sorted_x.begin(), sorted_x.end());

    // Create a map to store the rank of each element in sorted_x
    std::unordered_map<int, int> rank_map;
    for (int i = 0; i < n; ++i) {
        rank_map[sorted_x[i]] = i + 1; // Ranks are 1-based
    }

    // Construct the vector y
    std::vector<int> y(n);
    for (int i = 0; i < n; ++i) {
        y[i] = rank_map[x[i]];
    }

    // Write the output
    for (int i = 0; i < n; ++i) {
        outfile << y[i] << (i == n - 1 ? "" : " ");
    }

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: The input is read from `siruri.in` using `ifstream`.
2. **Sorting**: A copy of the vector `x` is created and sorted.
3. **Mapping Ranks**: A map is created to store the rank of each element in the sorted vector.
4. **Constructing Vector `y`**: For each element in the original vector `x`, its rank is fetched from the map and stored in the vector `y`.
5. **Writing Output**: The vector `y` is written to `siruri.out` using `ofstream`.

This approach ensures that the solution is efficient and meets the problem requirements. The complexity is dominated by the sorting step, which is `O(n log n)`, making it suitable for the given constraints.
