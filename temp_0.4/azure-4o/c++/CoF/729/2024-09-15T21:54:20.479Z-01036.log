---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to create a vector `y` such that for any `i` and `j` where `x[i] < x[j]`, we have `y[i] < y[j]`. Essentially, `y` should represent the ranks of the elements in `x` when sorted in ascending order.

Here's a step-by-step approach to solve this:

1. **Read Input**: Read the number of elements `n` and the elements of vector `x` from the file `siruri.in`.
2. **Create a Sorted Copy**: Create a sorted copy of `x` to determine the ranks.
3. **Assign Ranks**: For each element in `x`, find its position in the sorted array to determine its rank.
4. **Write Output**: Write the ranks to the file `siruri.out`.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    // Open input and output files
    std::ifstream infile("siruri.in");
    std::ofstream outfile("siruri.out");

    // Read the number of elements
    int n;
    infile >> n;

    // Read the elements of vector x
    std::vector<int> x(n);
    for (int i = 0; i < n; ++i) {
        infile >> x[i];
    }

    // Create a sorted copy of x
    std::vector<int> sorted_x = x;
    std::sort(sorted_x.begin(), sorted_x.end());

    // Create a map to store the rank of each element
    std::vector<int> y(n);
    for (int i = 0; i < n; ++i) {
        y[i] = std::lower_bound(sorted_x.begin(), sorted_x.end(), x[i]) - sorted_x.begin() + 1;
    }

    // Write the ranks to the output file
    for (int i = 0; i < n; ++i) {
        outfile << y[i] << " ";
    }

    // Close the files
    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We use `std::ifstream` to read from `siruri.in`.
   - Read the number of elements `n`.
   - Read the elements of vector `x`.

2. **Sorting and Ranking**:
   - Create a sorted copy of `x` named `sorted_x`.
   - Use `std::sort` to sort `sorted_x`.
   - For each element in `x`, find its rank using `std::lower_bound`. This function returns an iterator to the first element not less than the given value, and the difference with the beginning of the vector gives the rank (1-based).

3. **Writing Output**:
   - Use `std::ofstream` to write the ranks to `siruri.out`.

This approach ensures that the solution is efficient and correct given the constraints.
