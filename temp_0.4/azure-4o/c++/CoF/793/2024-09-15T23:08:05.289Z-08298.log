---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given problem. The solution reads from `livada.in` and writes to `livada.out` without using `cin`, `cout`, `scanf`, or `printf`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream infile("livada.in");
    std::ofstream outfile("livada.out");

    int m, n, p;
    infile >> m >> n >> p;

    int majority_threshold = n / 2 + 1;
    int majority_count = 0;
    int max_consecutive = 0;

    for (int i = 0; i < m; ++i) {
        std::vector<int> row(n);
        std::unordered_map<int, int> count_map;
        for (int j = 0; j < n; ++j) {
            infile >> row[j];
            count_map[row[j]]++;
        }

        // Check for majority element
        bool has_majority = false;
        for (const auto& entry : count_map) {
            if (entry.second >= majority_threshold) {
                has_majority = true;
                break;
            }
        }
        if (has_majority) {
            ++majority_count;
        }

        // Find the maximum number of consecutive same elements
        int current_consecutive = 1;
        for (int j = 1; j < n; ++j) {
            if (row[j] == row[j - 1]) {
                ++current_consecutive;
            } else {
                max_consecutive = std::max(max_consecutive, current_consecutive);
                current_consecutive = 1;
            }
        }
        max_consecutive = std::max(max_consecutive, current_consecutive);
    }

    outfile << majority_count << "\n";
    outfile << max_consecutive << "\n";

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the values of `m`, `n`, and `p` from `livada.in`.
2. **Majority Threshold**: It calculates the threshold for a majority element on each row as `n / 2 + 1`.
3. **Iterating Rows**: For each row, it reads the elements and counts the occurrences of each element using an unordered map.
4. **Majority Check**: It checks if any element's count meets or exceeds the majority threshold.
5. **Consecutive Elements**: It tracks the maximum number of consecutive same elements in each row.
6. **Output Results**: Finally, it writes the results to `livada.out`.

This solution ensures efficient reading and processing of the input data, and handles the constraints effectively.
