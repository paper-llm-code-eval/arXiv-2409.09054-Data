---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `foto.in` and write to `foto.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O fotografie alb-negru a surprins imaginea fulgerelor pe cerul întunecat în timpul unei furtuni electrice. Mărită, fotografia arată ca un caroiaj format din mici pătrate identice, albe sau negre, dispuse alăturat pe $N$ rânduri și $M$ coloane, câte $M$ pe fiecare rând. **Pătratele albe** formează fulgerele din fotografie, iar **pătratele negre** reprezintă cerul. În fotografie, nu există două pătrate albe dispuse alăturat pe același rând. **Un fulger** este format din pătrate albe situate pe rânduri consecutive care respectă următoarele condiții:
- pătratele albe situate pe două rânduri consecutive au un vârf comun sau o latură comună;
- un fulger poate avea un singur pătrat alb pe un rând.

În fotografie, fulgerele sunt **distincte**, ele neavând pătrate albe cu laturi sau vârfuri comune. **Înălțimea unui fulger** este dată de numărul de pătrate albe ale acelui fulger.

\
~[foto.png|align=right|width=30em]
Pentru a putea fi analizată de către programatori, fotografia este codificată cu ajutorul unui tablou bidimensional cu $N$ linii și $M$ coloane, ale cărui elemente sunt $0$ și $1$. Valoarea $0$ este codificarea pătratului negru, iar valoarea $1$ este codificarea pătratului alb.

Având codificarea, programatorii trebuie să găsească numărul maxim $P$ de pătrate negre dispuse alăturat pe același rând, numărul de fulgere $F$ precum și înălțimea maximă $H$ a unui fulger din fotografie. De exemplu, fotografia alăturată este codificată de tabloul $T$ alăturat fotografiei.

# Cerință
Scrieţi un program care citeşte numerele $N$ și $M$, cele $N \cdot M$ elemente ale tabloului $T$ care codifică fotografia, și rezolvă următoarele cerințe:
1) afișează numărul maxim $P$ de pătrate negre dispuse alăturat pe un rând în fotografie;
2) afișează numărul $F$ de fulgere și înălțimea maximă $H$ a unui fulger din fotografie.

# Date de intrare
Fișierul de intrare `foto.in` conține pe prima linie un număr natural $C$ reprezentând cerința care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află cele două numere naturale $N$ și $M$, separate printr-un spațiu, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ valori $0$ sau $1$, separate prin câte un spațiu, reprezentând elementele tabloului care codifică fotografia, în ordinea parcurgerii lor pe rânduri, de sus în jos, și de la stânga la dreapta în cadrul unui rând.

# Date de ieșire
Fişierul de ieşire `foto.out` va conţine, pe o singură linie:
- dacă $C=1$, numărul $P$, reprezentând răspunsul la cerinţa $1$;
- dacă $C=2$, cele două numere $F$ și $H$, în această ordine, separate printr-un singur spațiu, reprezentând răspunsul la cerinţa $2$.

# Restricții și precizări
- $N$ număr natural, $4 \leq N \leq 100$.
- $M$ număr natural, $4 \leq M \leq 100$.
- Pentru rezolvarea cerinței 1:
	- Se acordă 20 de puncte.
	- Fiecare test este în valoare de 2 puncte.
- Pentru rezolvarea cerinței 2:
	- Se acordă 70 de puncte.
	- Fiecare test pentru această cerință este în valoare de 7 puncte:
		- 3 puncte pentru valoarea corectă a lui $F$;
		- 4 puncte pentru valoarea corectă a lui $H$.
	- Această cerință necesită ca **în fișierul de ieșire să existe exact 2 numere**.

---

Example:
`foto.in`
```
1
6 7
0 1 0 0 1 0 0
1 0 0 0 1 0 0
0 0 1 0 0 0 1
0 1 0 0 0 1 0
0 1 0 0 1 0 0
0 0 1 0 1 0 1
```

`foto.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("foto.in");
    ofstream outfile("foto.out");

    int C, N, M;
    infile >> C >> N >> M;

    vector<vector<int>> T(N, vector<int>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            infile >> T[i][j];
        }
    }

    if (C == 1) {
        int maxBlack = 0;
        for (int i = 0; i < N; ++i) {
            int currentBlack = 0;
            int maxRowBlack = 0;
            for (int j = 0; j < M; ++j) {
                if (T[i][j] == 0) {
                    currentBlack++;
                } else {
                    maxRowBlack = max(maxRowBlack, currentBlack);
                    currentBlack = 0;
                }
            }
            maxRowBlack = max(maxRowBlack, currentBlack);
            maxBlack = max(maxBlack, maxRowBlack);
        }
        outfile << maxBlack << endl;
    } else if (C == 2) {
        int F = 0, maxH = 0;
        vector<vector<bool>> visited(N, vector<bool>(M, false));

        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (T[i][j] == 1 && !visited[i][j]) {
                    int height = 0;
                    int x = i, y = j;

                    while (x < N && T[x][y] == 1 && !visited[x][y]) {
                        visited[x][y] = true;
                        height++;
                        if (x + 1 < N && y - 1 >= 0 && T[x + 1][y - 1] == 1 && !visited[x + 1][y - 1]) {
                            x++;
                            y--;
                        } else if (x + 1 < N && y + 1 < M && T[x + 1][y + 1] == 1 && !visited[x + 1][y + 1]) {
                            x++;
                            y++;
                        } else if (x + 1 < N && T[x + 1][y] == 1 && !visited[x + 1][y]) {
                            x++;
                        } else {
                            break;
                        }
                    }

                    F++;
                    maxH = max(maxH, height);
                }
            }
        }

        outfile << F << " " << maxH << endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
    - The first line of input is read to determine which task (C) we need to solve.
    - The next line contains the dimensions of the grid (N and M).
    - The subsequent lines contain the grid data (0s and 1s).

2. **Task 1:**
    - We need to find the maximum number of consecutive black squares (0s) in any row.
    - We iterate through each row, counting consecutive 0s and updating the maximum count found.

3. **Task 2:**
    - We need to find the number of distinct lightning bolts and the maximum height of any lightning bolt.
    - We use a `visited` matrix to keep track of which cells have been processed.
    - For each unvisited white square (1), we trace the lightning bolt by moving downwards and diagonally, marking cells as visited.
    - We count the height of each lightning bolt and update the maximum height found.

4. **Output:**
    - Depending on the task, we output the required values to `foto.out`.

This solution ensures efficient processing within the constraints provided.
