---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `foto.in` and write to `foto.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O fotografie alb-negru a surprins imaginea fulgerelor pe cerul întunecat în timpul unei furtuni electrice. Mărită, fotografia arată ca un caroiaj format din mici pătrate identice, albe sau negre, dispuse alăturat pe $N$ rânduri și $M$ coloane, câte $M$ pe fiecare rând. **Pătratele albe** formează fulgerele din fotografie, iar **pătratele negre** reprezintă cerul. În fotografie, nu există două pătrate albe dispuse alăturat pe același rând. **Un fulger** este format din pătrate albe situate pe rânduri consecutive care respectă următoarele condiții:
- pătratele albe situate pe două rânduri consecutive au un vârf comun sau o latură comună;
- un fulger poate avea un singur pătrat alb pe un rând.

În fotografie, fulgerele sunt **distincte**, ele neavând pătrate albe cu laturi sau vârfuri comune. **Înălțimea unui fulger** este dată de numărul de pătrate albe ale acelui fulger.

\
~[foto.png|align=right|width=30em]
Pentru a putea fi analizată de către programatori, fotografia este codificată cu ajutorul unui tablou bidimensional cu $N$ linii și $M$ coloane, ale cărui elemente sunt $0$ și $1$. Valoarea $0$ este codificarea pătratului negru, iar valoarea $1$ este codificarea pătratului alb.

Având codificarea, programatorii trebuie să găsească numărul maxim $P$ de pătrate negre dispuse alăturat pe același rând, numărul de fulgere $F$ precum și înălțimea maximă $H$ a unui fulger din fotografie. De exemplu, fotografia alăturată este codificată de tabloul $T$ alăturat fotografiei.

# Cerință
Scrieţi un program care citeşte numerele $N$ și $M$, cele $N \cdot M$ elemente ale tabloului $T$ care codifică fotografia, și rezolvă următoarele cerințe:
1) afișează numărul maxim $P$ de pătrate negre dispuse alăturat pe un rând în fotografie;
2) afișează numărul $F$ de fulgere și înălțimea maximă $H$ a unui fulger din fotografie.

# Date de intrare
Fișierul de intrare `foto.in` conține pe prima linie un număr natural $C$ reprezentând cerința care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află cele două numere naturale $N$ și $M$, separate printr-un spațiu, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ valori $0$ sau $1$, separate prin câte un spațiu, reprezentând elementele tabloului care codifică fotografia, în ordinea parcurgerii lor pe rânduri, de sus în jos, și de la stânga la dreapta în cadrul unui rând.

# Date de ieșire
Fişierul de ieşire `foto.out` va conţine, pe o singură linie:
- dacă $C=1$, numărul $P$, reprezentând răspunsul la cerinţa $1$;
- dacă $C=2$, cele două numere $F$ și $H$, în această ordine, separate printr-un singur spațiu, reprezentând răspunsul la cerinţa $2$.

# Restricții și precizări
- $N$ număr natural, $4 \leq N \leq 100$.
- $M$ număr natural, $4 \leq M \leq 100$.
- Pentru rezolvarea cerinței 1:
	- Se acordă 20 de puncte.
	- Fiecare test este în valoare de 2 puncte.
- Pentru rezolvarea cerinței 2:
	- Se acordă 70 de puncte.
	- Fiecare test pentru această cerință este în valoare de 7 puncte:
		- 3 puncte pentru valoarea corectă a lui $F$;
		- 4 puncte pentru valoarea corectă a lui $H$.
	- Această cerință necesită ca **în fișierul de ieșire să existe exact 2 numere**.

---

Example:
`foto.in`
```
1
6 7
0 1 0 0 1 0 0
1 0 0 0 1 0 0
0 0 1 0 0 0 1
0 1 0 0 0 1 0
0 1 0 0 1 0 0
0 0 1 0 1 0 1
```

`foto.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("foto.in");
    ofstream fout("foto.out");

    int C, N, M;
    fin >> C >> N >> M;

    vector<vector<int>> T(N, vector<int>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fin >> T[i][j];
        }
    }

    if (C == 1) {
        // Task 1: Find the maximum number of consecutive black squares in any row
        int maxBlack = 0;
        for (int i = 0; i < N; ++i) {
            int currentBlack = 0;
            int maxCurrentBlack = 0;
            for (int j = 0; j < M; ++j) {
                if (T[i][j] == 0) {
                    ++currentBlack;
                } else {
                    maxCurrentBlack = max(maxCurrentBlack, currentBlack);
                    currentBlack = 0;
                }
            }
            maxCurrentBlack = max(maxCurrentBlack, currentBlack);
            maxBlack = max(maxBlack, maxCurrentBlack);
        }
        fout << maxBlack << "\n";
    } else if (C == 2) {
        // Task 2: Find the number of lightning bolts and the maximum height of a lightning bolt
        int numLightning = 0;
        int maxHeight = 0;

        vector<vector<bool>> visited(N, vector<bool>(M, false));

        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                if (T[i][j] == 1 && !visited[i][j]) {
                    ++numLightning;
                    int height = 0;
                    int x = i, y = j;

                    while (x < N && T[x][y] == 1 && !visited[x][y]) {
                        visited[x][y] = true;
                        ++height;
                        if (x + 1 < N && y - 1 >= 0 && T[x + 1][y - 1] == 1 && !visited[x + 1][y - 1]) {
                            ++x;
                            --y;
                        } else if (x + 1 < N && T[x + 1][y] == 1 && !visited[x + 1][y]) {
                            ++x;
                        } else if (x + 1 < N && y + 1 < M && T[x + 1][y + 1] == 1 && !visited[x + 1][y + 1]) {
                            ++x;
                            ++y;
                        } else {
                            break;
                        }
                    }
                    maxHeight = max(maxHeight, height);
                }
            }
        }
        fout << numLightning << " " << maxHeight << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The program reads the input from `foto.in` file.
   - It reads the task type `C`, the dimensions `N` and `M`, and the matrix `T`.

2. **Task 1 (C == 1):**
   - The program calculates the maximum number of consecutive black squares (0s) in any row.
   - It iterates through each row, counting consecutive 0s and keeps track of the maximum count found.

3. **Task 2 (C == 2):**
   - The program finds the number of distinct lightning bolts and the maximum height of any lightning bolt.
   - It uses a `visited` matrix to track which cells have been processed.
   - For each unvisited white square (1), it starts a new lightning bolt and counts its height by traversing consecutive rows.
   - It checks for connections in the next row to the left, directly below, and to the right to maintain the lightning bolt structure.

4. **Output:**
   - The results are written to `foto.out` file based on the task type.

This solution efficiently handles the constraints and ensures correct results for both tasks.
