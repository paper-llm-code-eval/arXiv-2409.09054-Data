---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `patrat.in` and write to `patrat.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[patrat.jpg|align=right]

Cel mai mare observator astronomic din România și din Europa de Est, aflat la Galați, a captat o imagine a boltei cerești, ce surprinde toate stelele vizibile în acel moment. Imaginea este în format digital, codificată sub forma unui tablou bidimensional, cu $N$ linii și $M$ coloane. Fiecare element al tabloului conține un număr natural care reprezintă intensitatea luminoasă a unei stele.

Numim **stea strălucitoare** o stea care are intensitatea luminoasă mai mare decât a tuturor stelelor învecinate direct cu ea, pe orizontală, verticală sau diagonală. Numim **constelație pătrată** patru stele strălucitoare care se află plasate în colțurile unui pătrat cu laturile paralele cu marginile tabloului. Lungimea laturii unei constelații pătrate este egală cu numărul de stele din care este formată latura. O stea strălucitoare poate face parte din mai multe constelații pătrate.

# Cerință

Scrieți un program care să determine:
1. Numărul stelelelor strălucitoare;
2. Numărul constelațiilor pătrate;
3. Lungimea laturii pătratului care reprezintă cea mai mare constelație pătrată

# Date de intrare

Din fișierul `patrat.in` se citesc de pe prima linie, două numere naturale $N$ și $M$, separate printr-un spațiu, reprezentând dimensiunile tabloului bidimensional, iar de pe următoarele $N$ linii, câte $M$ numere naturale separate prin câte un spațiu, reprezentând intensitatea luminoasă a stelelor.

# Date de ieșire

În fișierul `patrat.out` se va scrie pe prima linie un număr natural reprezentând răspunsul la cerința $1$. Pe cea de-a doua linie se va scrie un număr natural reprezentând răspunsul la cerința $2$. Pe a treia linie se va scrie un număr natural reprezentând răspunsul la cerința $3$.

# Restricții și precizări

* $1 < N \leq 200$;
* $1 < M \leq 200$;
* $1 \leq$ intensitatea unei stele $\leq 1 \ 000$;
* pentru rezolvarea corectă a cerinţei $1$ se acordă $40\%$ din punctajul fiecărui test, pentru rezolvarea corectă a cerinţei $2$ se acordă $40\%$ din punctajul fiecărui test iar pentru rezolvarea corectă a cerinţei $3$ se acordă $20\%$ din punctajul fiecărui test.
* Respectaţi formatul fişierului de ieşire! Pentru a obţine punctajul acordat unei cerinţe, trebuie ca răspunsul din fişier să fie corect şi scris exact pe linia precizată în enunţ.

---

Example:
`patrat.in`
```
6 8
1 8 5 7 1 6 3 4
1 2 3 1 1 5 2 1
1 7 1 9 1 1 8 1
6 3 5 1 6 4 3 1
1 9 5 7 1 8 2 1
1 5 6 5 3 1 3 6
```

`patrat.out`
```
11
3
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given problem. This solution reads from `patrat.in` and writes to `patrat.out` without using `cin`, `cout`, `scanf`, or `printf`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("patrat.in");
    ofstream fout("patrat.out");

    int N, M;
    fin >> N >> M;

    vector<vector<int>> grid(N, vector<int>(M));
    vector<vector<bool>> isBrightStar(N, vector<bool>(M, false));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fin >> grid[i][j];
        }
    }

    int brightStarsCount = 0;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            bool isBright = true;
            for (int di = -1; di <= 1; ++di) {
                for (int dj = -1; dj <= 1; ++dj) {
                    if (di == 0 && dj == 0) continue;
                    int ni = i + di, nj = j + dj;
                    if (ni >= 0 && ni < N && nj >= 0 && nj < M) {
                        if (grid[i][j] <= grid[ni][nj]) {
                            isBright = false;
                            break;
                        }
                    }
                }
                if (!isBright) break;
            }
            if (isBright) {
                isBrightStar[i][j] = true;
                ++brightStarsCount;
            }
        }
    }

    int maxSquareSide = 0;
    int squareConstellationsCount = 0;

    for (int side = 1; side < min(N, M); ++side) {
        for (int i = 0; i <= N - side - 1; ++i) {
            for (int j = 0; j <= M - side - 1; ++j) {
                if (isBrightStar[i][j] && isBrightStar[i][j + side] &&
                    isBrightStar[i + side][j] && isBrightStar[i + side][j + side]) {
                    ++squareConstellationsCount;
                    maxSquareSide = max(maxSquareSide, side);
                }
            }
        }
    }

    fout << brightStarsCount << endl;
    fout << squareConstellationsCount << endl;
    fout << maxSquareSide + 1 << endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Reading Input**: The code reads the dimensions `N` and `M` and the grid values from `patrat.in`.
2. **Identifying Bright Stars**: It iterates through each cell in the grid and checks if it is a bright star by comparing it with its neighbors.
3. **Counting Bright Stars**: It maintains a count of bright stars.
4. **Finding Square Constellations**: For each possible side length of a square (from 1 to min(N, M) - 1), it checks all possible top-left corners of the square to see if all four corners are bright stars.
5. **Output Results**: It writes the number of bright stars, the number of square constellations, and the side length of the largest square constellation to `patrat.out`.

This solution is efficient given the constraints and ensures all the requirements are met.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 3
1 1 1
1 1 1
```
Expected output:
```
0
0
0
```
Found output:
```
0
0
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy in the output is due to a misunderstanding in the calculation of the side length of the largest square constellation. The side length should be zero if no constellations are found, but the current code incorrectly outputs one.

Let's rewrite the solution with the necessary fixes. Specifically, we need to ensure that the side length of the largest square constellation is correctly computed and output only if there are any constellations found.

Here is the corrected code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("patrat.in");
    ofstream fout("patrat.out");

    int N, M;
    fin >> N >> M;

    vector<vector<int>> grid(N, vector<int>(M));
    vector<vector<bool>> isBrightStar(N, vector<bool>(M, false));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fin >> grid[i][j];
        }
    }

    int brightStarsCount = 0;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            bool isBright = true;
            for (int di = -1; di <= 1; ++di) {
                for (int dj = -1; dj <= 1; ++dj) {
                    if (di == 0 && dj == 0) continue;
                    int ni = i + di, nj = j + dj;
                    if (ni >= 0 && ni < N && nj >= 0 && nj < M) {
                        if (grid[i][j] <= grid[ni][nj]) {
                            isBright = false;
                            break;
                        }
                    }
                }
                if (!isBright) break;
            }
            if (isBright) {
                isBrightStar[i][j] = true;
                ++brightStarsCount;
            }
        }
    }

    int maxSquareSide = 0;
    int squareConstellationsCount = 0;

    for (int side = 1; side < min(N, M); ++side) {
        for (int i = 0; i <= N - side - 1; ++i) {
            for (int j = 0; j <= M - side - 1; ++j) {
                if (isBrightStar[i][j] && isBrightStar[i][j + side] &&
                    isBrightStar[i + side][j] && isBrightStar[i + side][j + side]) {
                    ++squareConstellationsCount;
                    maxSquareSide = max(maxSquareSide, side + 1);
                }
            }
        }
    }

    fout << brightStarsCount << endl;
    fout << squareConstellationsCount << endl;
    fout << maxSquareSide << endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation of Fixes

1. **Correct Calculation of Largest Square Side**: The original code incorrectly set the side length of the largest square constellation to `side` instead of `side + 1`. This has been corrected.
2. **Output Zero for No Constellations**: The corrected code ensures that if no constellations are found, the side length of the largest square constellation is correctly output as zero.

### Testing

To verify the correctness of the solution, let's test it with the provided input:

**Input:**
```
2 3
1 1 1
1 1 1
```

**Expected Output:**
```
0
0
0
```

**Explanation:**
- There are no bright stars because all stars have the same intensity.
- Consequently, there are no square constellations.
- The side length of the largest square constellation is zero.

The corrected code should now produce the expected output for this and other test cases.
