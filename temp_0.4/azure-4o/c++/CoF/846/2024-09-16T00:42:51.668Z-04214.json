{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/846/2024-09-16T00:42:51.668Z-04214.log",
  "attemptStart": 1726447371.668,
  "attemptEnd": 1726447411.272,
  "attemptDuration": 39.604000091552734,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};\nconst int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};\n\nbool isBrightStar(const vector<vector<int>>& matrix, int x, int y, int N, int M) {\n    int intensity = matrix[x][y];\n    for (int i = 0; i < 8; ++i) {\n        int nx = x + dx[i];\n        int ny = y + dy[i];\n        if (nx >= 0 && nx < N && ny >= 0 && ny < M && matrix[nx][ny] >= intensity) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    ifstream fin(\"patrat.in\");\n    ofstream fout(\"patrat.out\");\n\n    int N, M;\n    fin >> N >> M;\n\n    vector<vector<int>> matrix(N, vector<int>(M));\n    vector<pair<int, int>> brightStars;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            fin >> matrix[i][j];\n        }\n    }\n\n    // Identify bright stars\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            if (isBrightStar(matrix, i, j, N, M)) {\n                brightStars.emplace_back(i, j);\n            }\n        }\n    }\n\n    int brightStarCount = brightStars.size();\n    int squareConstellationCount = 0;\n    int maxSquareSideLength = 0;\n\n    // Check for square constellations\n    for (const auto& star1 : brightStars) {\n        for (const auto& star2 : brightStars) {\n            if (star1 != star2) {\n                int x1 = star1.first, y1 = star1.second;\n                int x2 = star2.first, y2 = star2.second;\n\n                // Check if they can be diagonal corners of a square\n                if (x1 != x2 && y1 != y2 && abs(x1 - x2) == abs(y1 - y2)) {\n                    int x3 = x1, y3 = y2;\n                    int x4 = x2, y4 = y1;\n\n                    if (isBrightStar(matrix, x3, y3, N, M) && isBrightStar(matrix, x4, y4, N, M)) {\n                        ++squareConstellationCount;\n                        maxSquareSideLength = max(maxSquareSideLength, abs(x1 - x2));\n                    }\n                }\n            }\n        }\n    }\n\n    fout << brightStarCount << \"\\n\";\n    fout << squareConstellationCount / 4 << \"\\n\"; // Each square is counted 4 times\n    fout << (squareConstellationCount > 0 ? maxSquareSideLength + 1 : 0) << \"\\n\"; // Side length is number of stars\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3237,
  "metadata": {
    "id": 846,
    "examples": [
      {
        "in": "6 8\n1 8 5 7 1 6 3 4\n1 2 3 1 1 5 2 1\n1 7 1 9 1 1 8 1\n6 3 5 1 6 4 3 1\n1 9 5 7 1 8 2 1\n1 5 6 5 3 1 3 6",
        "out": "11\n3\n5",
        "explainer": ""
      },
      {
        "in": "2 3\n1 1 1\n1 1 1",
        "out": "0\n0\n0",
        "explainer": ""
      }
    ],
    "body": "~[patrat.jpg|align=right]\n\nCel mai mare observator astronomic din România și din Europa de Est, aflat la Galați, a captat o imagine a boltei cerești, ce surprinde toate stelele vizibile în acel moment. Imaginea este în format digital, codificată sub forma unui tablou bidimensional, cu $N$ linii și $M$ coloane. Fiecare element al tabloului conține un număr natural care reprezintă intensitatea luminoasă a unei stele.\n\nNumim **stea strălucitoare** o stea care are intensitatea luminoasă mai mare decât a tuturor stelelor învecinate direct cu ea, pe orizontală, verticală sau diagonală. Numim **constelație pătrată** patru stele strălucitoare care se află plasate în colțurile unui pătrat cu laturile paralele cu marginile tabloului. Lungimea laturii unei constelații pătrate este egală cu numărul de stele din care este formată latura. O stea strălucitoare poate face parte din mai multe constelații pătrate.\n\n# Cerință\n\nScrieți un program care să determine:\n1. Numărul stelelelor strălucitoare;\n2. Numărul constelațiilor pătrate;\n3. Lungimea laturii pătratului care reprezintă cea mai mare constelație pătrată\n\n# Date de intrare\n\nDin fișierul `patrat.in` se citesc de pe prima linie, două numere naturale $N$ și $M$, separate printr-un spațiu, reprezentând dimensiunile tabloului bidimensional, iar de pe următoarele $N$ linii, câte $M$ numere naturale separate prin câte un spațiu, reprezentând intensitatea luminoasă a stelelor.\n\n# Date de ieșire\n\nÎn fișierul `patrat.out` se va scrie pe prima linie un număr natural reprezentând răspunsul la cerința $1$. Pe cea de-a doua linie se va scrie un număr natural reprezentând răspunsul la cerința $2$. Pe a treia linie se va scrie un număr natural reprezentând răspunsul la cerința $3$.\n\n# Restricții și precizări\n\n* $1 < N \\leq 200$;\n* $1 < M \\leq 200$;\n* $1 \\leq$ intensitatea unei stele $\\leq 1 \\ 000$;\n* pentru rezolvarea corectă a cerinţei $1$ se acordă $40\\%$ din punctajul fiecărui test, pentru rezolvarea corectă a cerinţei $2$ se acordă $40\\%$ din punctajul fiecărui test iar pentru rezolvarea corectă a cerinţei $3$ se acordă $20\\%$ din punctajul fiecărui test.\n* Respectaţi formatul fişierului de ieşire! Pentru a obţine punctajul acordat unei cerinţe, trebuie ca răspunsul din fişier să fie corect şi scris exact pe linia precizată în enunţ.",
    "header": {
      "problem_id": 846,
      "problem_name": "patrat",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.6,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "patrat.in",
      "output_filename": "patrat.out",
      "multiple_solutions": true,
      "original_source": "OJI 2014 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "patrat.in",
      "output": "patrat.out"
    },
    "consoleInteraction": false
  }
}