---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the maximum height \( H \) such that the bulldozer can level the terrain to this height without running out of soil. Here's the step-by-step approach:

1. **Binary Search Approach**: Since the height \( H \) can vary from 0 to the maximum height in the input array, we can use binary search to find the optimal height \( H \). This will allow us to efficiently narrow down the possible values of \( H \).

2. **Validation Function**: For a given height \( H \), we need a function to check if it is possible to level the terrain to this height. This function will simulate the bulldozer's operation and ensure that at no point does the bulldozer run out of soil.

3. **Implementation**:
   - Read the input values from the file.
   - Implement the binary search to find the maximum valid \( H \).
   - Use the validation function within the binary search to check if a given \( H \) is feasible.

Here is the C++ code implementing the above logic:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

bool canLevelToHeight(const std::vector<int>& heights, int H) {
    long long soil = 0;
    for (int h : heights) {
        if (h >= H) {
            soil += h - H;
        } else {
            if (soil < H - h) {
                return false;
            }
            soil -= H - h;
        }
    }
    return true;
}

int main() {
    std::ifstream infile("buldo.in");
    std::ofstream outfile("buldo.out");

    int N;
    infile >> N;
    std::vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        infile >> heights[i];
    }

    int low = 0, high = *std::max_element(heights.begin(), heights.end());
    int bestH = 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (canLevelToHeight(heights, mid)) {
            bestH = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    outfile << bestH << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `buldo.in` file. The first number is `N`, the number of zones, followed by `N` heights.
2. **Binary Search**: We perform a binary search on the possible values of \( H \) (from 0 to the maximum height in the input).
3. **Validation Function**: The function `canLevelToHeight` checks if a given height \( H \) is feasible by simulating the bulldozer's operation.
4. **Output**: The result is written to `buldo.out` file, which contains the maximum height \( H \) to which the terrain can be leveled.

This solution ensures that we efficiently find the maximum height \( H \) using binary search, which is optimal for the given constraints.
