---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to determine the maximum height \( H \) at which the bulldozer's blade can be set such that the bulldozer can level the entire terrain without running out of soil. Here's a step-by-step breakdown of the approach:

1. **Binary Search for Optimal \( H \)**:
   - We can use binary search to find the maximum possible height \( H \). The reason binary search is suitable here is that if a certain height \( H \) is feasible, then any height less than \( H \) is also feasible.
   - The search range for \( H \) will be from 0 to the maximum height in the input array.

2. **Feasibility Check**:
   - For a given height \( H \), simulate the bulldozer's operation to check if it can level the terrain without running out of soil.
   - Traverse the array from left to right, maintaining the amount of soil on the bulldozer's blade.
   - If the current height is greater than \( H \), add the excess soil to the blade.
   - If the current height is less than \( H \), subtract the required soil from the blade. If at any point the blade runs out of soil, the height \( H \) is not feasible.

3. **Implementation**:
   - Read the input from `buldo.in`.
   - Implement the binary search to find the maximum feasible \( H \).
   - Write the result to `buldo.out`.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

bool canLevelAtHeight(const std::vector<int>& heights, int H) {
    long long soil = 0;
    for (int height : heights) {
        if (height >= H) {
            soil += height - H;
        } else {
            soil -= H - height;
            if (soil < 0) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    std::ifstream inFile("buldo.in");
    std::ofstream outFile("buldo.out");

    int N;
    inFile >> N;
    std::vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        inFile >> heights[i];
    }

    int left = 0, right = *std::max_element(heights.begin(), heights.end());
    int bestH = 0;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (canLevelAtHeight(heights, mid)) {
            bestH = mid;
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    outFile << bestH << "\n";

    return 0;
}
```

### Explanation:
- **canLevelAtHeight Function**: This function checks if the terrain can be leveled at a given height \( H \). It simulates the bulldozer's operation and returns `true` if feasible, otherwise `false`.
- **Binary Search**: The main function uses binary search to find the maximum feasible height \( H \). It reads the input, initializes the search range, and iteratively narrows down the range based on the feasibility check.
- **Input/Output**: The program reads from `buldo.in` and writes the result to `buldo.out`.

This approach ensures that the solution is both efficient and correct, leveraging binary search to handle the large input constraints effectively.
