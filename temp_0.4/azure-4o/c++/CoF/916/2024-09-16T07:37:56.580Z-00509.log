---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the maximum height \( H \) such that the bulldozer can level the terrain without running out of soil. This can be achieved by using a binary search approach on the possible values of \( H \).

### Steps to Solve the Problem:

1. **Binary Search on Height \( H \)**:
    - The possible range for \( H \) is from 0 to the maximum height in the input array.
    - Use binary search to find the maximum \( H \) that allows the bulldozer to level the terrain.

2. **Simulation of Bulldozer Operation**:
    - For each candidate height \( H \) during the binary search, simulate the bulldozer operation:
        - Traverse the terrain from left to right.
        - Maintain a running total of soil on the bulldozer's blade.
        - Adjust the soil count based on whether the current height is above or below \( H \).
        - Ensure that the soil count never goes negative.

3. **Validation Function**:
    - Create a function to check if a given height \( H \) is feasible by simulating the bulldozer's operation and ensuring it never runs out of soil.

### Implementation:

Below is the C++ implementation of the above approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

bool canLevelToHeight(const std::vector<int>& heights, int H) {
    long long soil = 0;
    for (int h : heights) {
        if (h >= H) {
            soil += (h - H);
        } else {
            soil -= (H - h);
            if (soil < 0) return false;
        }
    }
    return true;
}

int main() {
    std::ifstream inFile("buldo.in");
    std::ofstream outFile("buldo.out");

    int N;
    inFile >> N;
    std::vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        inFile >> heights[i];
    }

    int low = 0, high = *std::max_element(heights.begin(), heights.end());
    int bestH = 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (canLevelToHeight(heights, mid)) {
            bestH = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    outFile << bestH << std::endl;

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:

1. **Reading Input**:
    - Read the number of zones \( N \) and the heights of each zone from the input file `buldo.in`.

2. **Binary Search Initialization**:
    - Initialize the binary search range with `low` as 0 and `high` as the maximum height in the input array.

3. **Binary Search Loop**:
    - In each iteration, calculate the mid-point `mid` of the current range.
    - Use the `canLevelToHeight` function to check if it's possible to level the terrain to height `mid`.
    - If possible, update `bestH` and search in the higher range.
    - If not possible, search in the lower range.

4. **Validation Function**:
    - The `canLevelToHeight` function simulates the bulldozer operation for a given height \( H \).
    - It ensures that the soil count never goes negative by adjusting the soil based on the current height of the terrain.

5. **Output the Result**:
    - Write the maximum feasible height \( H \) to the output file `buldo.out`.

This approach ensures that the solution is efficient and works within the given constraints.
