---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the maximum height \( H \) at which the bulldozer can level the terrain without running out of soil. This requires a binary search approach to find the optimal \( H \).

Here's the step-by-step plan:

1. **Binary Search Initialization**: 
   - The minimum possible height \( H \) is 0.
   - The maximum possible height \( H \) is the maximum value in the array \( h \).

2. **Binary Search Execution**:
   - For each midpoint \( H \) in the binary search, simulate the bulldozer's operation.
   - Track the amount of soil on the blade \( C \) as it processes each section of the terrain.
   - If at any point \( C \) becomes negative, the current \( H \) is too high, and we need to lower it.
   - If \( C \) is non-negative after processing all sections, then the current \( H \) is feasible, and we can try a higher \( H \).

3. **Simulation Function**:
   - Iterate through each height \( h_i \).
   - Adjust \( C \) based on whether \( h_i \) is above or below \( H \).

4. **Output the Result**:
   - The highest feasible \( H \) found by the binary search is the result.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

bool canLevelToHeight(const std::vector<int>& heights, int H) {
    long long C = 0; // Use long long to avoid overflow
    for (int h : heights) {
        if (h >= H) {
            C += (h - H);
        } else {
            C -= (H - h);
            if (C < 0) return false;
        }
    }
    return true;
}

int main() {
    std::ifstream inFile("buldo.in");
    std::ofstream outFile("buldo.out");

    int N;
    inFile >> N;

    std::vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        inFile >> heights[i];
    }

    int low = 0;
    int high = *std::max_element(heights.begin(), heights.end());
    int bestH = 0;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (canLevelToHeight(heights, mid)) {
            bestH = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    outFile << bestH << std::endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
- **Binary Search**: We use binary search to efficiently find the maximum feasible \( H \).
- **Simulation**: The `canLevelToHeight` function simulates the bulldozer's operation for a given \( H \).
- **Input/Output**: We use file streams to read from `buldo.in` and write to `buldo.out`.

This approach ensures that the solution is both correct and efficient, with a time complexity of \( O(N \log \text{max}(h)) \). This is suitable given the constraints.
