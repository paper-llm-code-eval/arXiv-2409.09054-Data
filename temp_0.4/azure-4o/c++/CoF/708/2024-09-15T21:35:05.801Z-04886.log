---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for generating all lexicographically ordered anagrams of a given word from the input file `anagrame.in` and writing them to the output file `anagrame.out`.

```cpp
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream input("anagrame.in");
    std::ofstream output("anagrame.out");

    if (!input.is_open() || !output.is_open()) {
        return 1;
    }

    std::string word;
    input >> word;
    input.close();

    std::sort(word.begin(), word.end());
    std::vector<std::string> anagrams;

    do {
        anagrams.push_back(word);
    } while (std::next_permutation(word.begin(), word.end()));

    for (const auto& anagram : anagrams) {
        output << anagram << "\n";
    }

    output.close();
    return 0;
}
```

### Explanation:
1. **Reading the Input:**
   - The code reads the input word from the file `anagrame.in`.
   
2. **Generating Anagrams:**
   - The word is sorted lexicographically to start with the smallest permutation.
   - Using `std::next_permutation`, all possible permutations of the word are generated in lexicographical order.
   - Each permutation is stored in a vector `anagrams`.

3. **Writing the Output:**
   - The anagrams are written to the file `anagrame.out`, one per line.

This solution ensures that all anagrams are generated and written in lexicographical order efficiently. The use of `std::sort` and `std::next_permutation` ensures that the permutations are generated in the required order without needing additional sorting.
