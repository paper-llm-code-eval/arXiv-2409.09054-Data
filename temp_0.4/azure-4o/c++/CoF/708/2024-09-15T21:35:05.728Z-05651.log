---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a C++ solution for generating all anagrams of a given word in lexicographical order. The solution reads the input from `anagrame.in`, generates all unique permutations of the word, sorts them, and writes the results to `anagrame.out`.

```cpp
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream infile("anagrame.in");
    std::ofstream outfile("anagrame.out");

    std::string word;
    infile >> word;

    std::vector<std::string> anagrams;
    std::sort(word.begin(), word.end());

    do {
        anagrams.push_back(word);
    } while (std::next_permutation(word.begin(), word.end()));

    for (const auto& anagram : anagrams) {
        outfile << anagram << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We use `std::ifstream` to read from `anagrame.in`.
   - The input word is read into the `word` string.

2. **Generating Anagrams:**
   - We use `std::sort` to sort the word initially to ensure the permutations are generated in lexicographical order.
   - We use `std::next_permutation` to generate all permutations of the word. This function rearranges the string into the next lexicographically greater permutation.

3. **Storing and Writing Anagrams:**
   - Each permutation is stored in a vector `anagrams`.
   - Finally, we iterate through the vector and write each anagram to `anagrame.out` using `std::ofstream`.

This solution ensures that all anagrams are generated and output in lexicographical order as required by the problem statement. The use of `std::next_permutation` is efficient for generating permutations in the desired order.
