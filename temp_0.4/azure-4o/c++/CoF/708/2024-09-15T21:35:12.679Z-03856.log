---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a C++ solution that reads a word from `anagrame.in`, generates all its anagrams in lexicographical order, and writes them to `anagrame.out`. The solution uses file I/O for reading and writing, and the standard library's `next_permutation` function to generate permutations efficiently.

```cpp
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    // Open input and output files
    std::ifstream infile("anagrame.in");
    std::ofstream outfile("anagrame.out");

    // Read the input word
    std::string word;
    infile >> word;

    // Sort the word to start with the lexicographically smallest permutation
    std::sort(word.begin(), word.end());

    // Use a vector to store all unique permutations
    std::vector<std::string> permutations;

    // Generate all permutations in lexicographical order
    do {
        permutations.push_back(word);
    } while (std::next_permutation(word.begin(), word.end()));

    // Write all permutations to the output file
    for (const auto& perm : permutations) {
        outfile << perm << "\n";
    }

    // Close the files
    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **File I/O**: The program uses `std::ifstream` to read from `anagrame.in` and `std::ofstream` to write to `anagrame.out`.
2. **Reading Input**: The input word is read from the file.
3. **Sorting**: The word is sorted to ensure the permutations start from the lexicographically smallest permutation.
4. **Generating Permutations**: The `std::next_permutation` function is used to generate all permutations in lexicographical order.
5. **Storing Permutations**: Each permutation is stored in a vector to ensure uniqueness.
6. **Writing Output**: All unique permutations are written to the output file, each on a new line.

This solution is efficient given the constraints (word length of at most 10 characters) and ensures that the output is in the correct order.
