{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/708/2024-09-15T21:35:12.679Z-03856.log",
  "attemptStart": 1726436112.679,
  "attemptEnd": 1726436126.119,
  "attemptDuration": 13.440000057220459,
  "code": "#include <iostream>\n#include <fstream>\n#include <algorithm>\n#include <vector>\n\nint main() {\n    // Open input and output files\n    std::ifstream infile(\"anagrame.in\");\n    std::ofstream outfile(\"anagrame.out\");\n\n    // Read the input word\n    std::string word;\n    infile >> word;\n\n    // Sort the word to start with the lexicographically smallest permutation\n    std::sort(word.begin(), word.end());\n\n    // Use a vector to store all unique permutations\n    std::vector<std::string> permutations;\n\n    // Generate all permutations in lexicographical order\n    do {\n        permutations.push_back(word);\n    } while (std::next_permutation(word.begin(), word.end()));\n\n    // Write all permutations to the output file\n    for (const auto& perm : permutations) {\n        outfile << perm << \"\\n\";\n    }\n\n    // Close the files\n    infile.close();\n    outfile.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 955,
  "metadata": {
    "id": 708,
    "examples": [
      {
        "in": "ana",
        "out": "aan\nana\nnaa",
        "explainer": ""
      }
    ],
    "body": "Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.\n\n# Cerință\n\nScrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.\n\n# Date de intrare\n\nFişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.\n\n\n# Date de ieșire\n\nFişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.\n\n# Restricții și precizări\n\n* Cuvântul dat are cel mult $10$ litere mici.\n* Cuvântul $x = x_1 \\ x_2 \\dots x_n$ precede cuvântul $y = y_1 \\ y_2 \\dots y_n$ dacă există un indice $k \\in {1, 2, \\dots, n}$ astfel încât $x_i = y_i$, $i \\in {1, 2, \\dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.",
    "header": {
      "problem_id": 708,
      "problem_name": "anagrame",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "anagrame.in",
      "output_filename": "anagrame.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 VIII: Problema 2 (Modificată)"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "anagrame.in",
      "output": "anagrame.out"
    },
    "consoleInteraction": false
  }
}