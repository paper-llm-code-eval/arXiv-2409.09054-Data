---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pluricex.in` and write to `pluricex.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).

Directorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.

# Cerinţă
Scrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.

# Date de intrare
Fişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\dots$, $d_{nr}$.

Primul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieşire
Fişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.

# Restricţii şi precizări
- $0 < n \leq 22$
- $0 < k \leq 8$
- $0 < D \leq 10$
- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\ 000$.
- Spunem că vectorul $(x_1, x_2, \dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \leq j < i$, iar $x_i < y_i$.
- Pentru $20\%$ din teste soluţia este unică.

---

Example:
`pluricex.in`
```
6 3 5
1 2
2 1 4
3 2 4 3
1 5
2 3 1
1 3
```

`pluricex.out`
```
2 3 4
3 4 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <bitset>

using namespace std;

int n, k, D;
vector<vector<int>> students;
vector<vector<int>> results;

void generate_teams(int idx, vector<int>& team, bitset<10>& disciplines) {
    if (team.size() == k) {
        if (disciplines.count() == D) {
            results.push_back(team);
        }
        return;
    }
    if (idx >= n) return;
    
    // Include current student
    team.push_back(idx + 1);
    bitset<10> new_disciplines = disciplines;
    for (int d : students[idx]) {
        new_disciplines.set(d - 1);
    }
    generate_teams(idx + 1, team, new_disciplines);
    
    // Exclude current student
    team.pop_back();
    generate_teams(idx + 1, team, disciplines);
}

int main() {
    ifstream infile("pluricex.in");
    ofstream outfile("pluricex.out");
    
    infile >> n >> k >> D;
    students.resize(n);
    
    for (int i = 0; i < n; ++i) {
        int nr;
        infile >> nr;
        students[i].resize(nr);
        for (int j = 0; j < nr; ++j) {
            infile >> students[i][j];
        }
    }
    
    vector<int> team;
    bitset<10> disciplines;
    generate_teams(0, team, disciplines);
    
    sort(results.begin(), results.end());
    for (const auto& team : results) {
        for (int i = 0; i < team.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << team[i];
        }
        outfile << "\n";
    }
    
    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The input is read from `pluricex.in` using `ifstream`.
   - The first line contains `n`, `k`, and `D`.
   - The next `n` lines describe the disciplines each student participates in.

2. **Data Structures:**
   - `students`: A vector of vectors to store the disciplines each student participates in.
   - `results`: A vector of vectors to store all valid teams.
   - `bitset<10>`: Used to efficiently track which disciplines are covered by the current team.

3. **Generating Teams:**
   - The `generate_teams` function is a recursive function that tries to form teams by including or excluding the current student.
   - If the team size reaches `k` and all disciplines are covered, the team is added to the results.
   - The function uses a bitset to keep track of which disciplines are covered efficiently.

4. **Sorting and Output:**
   - The results are sorted lexicographically.
   - The results are written to `pluricex.out` using `ofstream`.

This approach ensures that all combinations are considered and only valid teams are output, while maintaining efficiency through the use of bitsets and recursion.
