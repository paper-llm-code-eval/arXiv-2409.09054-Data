---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pluricex.in` and write to `pluricex.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).

Directorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.

# Cerinţă
Scrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.

# Date de intrare
Fişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\dots$, $d_{nr}$.

Primul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieşire
Fişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.

# Restricţii şi precizări
- $0 < n \leq 22$
- $0 < k \leq 8$
- $0 < D \leq 10$
- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\ 000$.
- Spunem că vectorul $(x_1, x_2, \dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \leq j < i$, iar $x_i < y_i$.
- Pentru $20\%$ din teste soluţia este unică.

---

Example:
`pluricex.in`
```
6 3 5
1 2
2 1 4
3 2 4 3
1 5
2 3 1
1 3
```

`pluricex.out`
```
2 3 4
3 4 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given problem. This solution reads the input from `pluricex.in`, processes it to find all valid teams, and writes the output to `pluricex.out`. The solution uses efficient data structures and algorithms to ensure fast execution.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

// Function to check if a team covers all disciplines
bool isValidTeam(const vector<int>& team, const vector<set<int>>& studentDisciplines, int D) {
    vector<bool> covered(D + 1, false);
    for (int student : team) {
        for (int discipline : studentDisciplines[student]) {
            covered[discipline] = true;
        }
    }
    for (int i = 1; i <= D; ++i) {
        if (!covered[i]) return false;
    }
    return true;
}

// Function to generate all combinations of k elements out of n
void generateCombinations(int n, int k, int start, vector<int>& current, vector<vector<int>>& combinations) {
    if (current.size() == k) {
        combinations.push_back(current);
        return;
    }
    for (int i = start; i <= n; ++i) {
        current.push_back(i);
        generateCombinations(n, k, i + 1, current, combinations);
        current.pop_back();
    }
}

int main() {
    ifstream inFile("pluricex.in");
    ofstream outFile("pluricex.out");

    int n, k, D;
    inFile >> n >> k >> D;

    vector<set<int>> studentDisciplines(n + 1);
    for (int i = 1; i <= n; ++i) {
        int nr;
        inFile >> nr;
        for (int j = 0; j < nr; ++j) {
            int discipline;
            inFile >> discipline;
            studentDisciplines[i].insert(discipline);
        }
    }

    vector<vector<int>> combinations;
    vector<int> current;
    generateCombinations(n, k, 1, current, combinations);

    vector<vector<int>> validTeams;
    for (const auto& team : combinations) {
        if (isValidTeam(team, studentDisciplines, D)) {
            validTeams.push_back(team);
        }
    }

    sort(validTeams.begin(), validTeams.end());

    for (const auto& team : validTeams) {
        for (size_t i = 0; i < team.size(); ++i) {
            if (i > 0) outFile << " ";
            outFile << team[i];
        }
        outFile << "\n";
    }

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The input is read from `pluricex.in` using `ifstream`.
   - The number of students `n`, the team size `k`, and the number of disciplines `D` are read first.
   - For each student, the disciplines they participate in are stored in a vector of sets `studentDisciplines`.

2. **Generating Combinations:**
   - The function `generateCombinations` generates all possible combinations of `k` students out of `n` using backtracking.

3. **Validating Teams:**
   - For each combination, the function `isValidTeam` checks if the team covers all disciplines by marking the disciplines covered by the students in the team.

4. **Sorting and Outputting:**
   - The valid teams are sorted lexicographically.
   - The sorted teams are written to `pluricex.out` using `ofstream`.

This solution ensures that the problem constraints are met and the output is correct and efficient.
