---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `muzica.in` and write to `muzica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev la un liceu de artă, secţia muzică, Andrei îşi propune să studieze o gamă nouă formată din $10$ note muzicale. Pasionat şi de matematică îşi propune pornind de la două numere naturale $a$ şi $b$ ($a < b$) să compună o „Simfonie interminabilă”, generând un şir de note în gama cea nouă. Astfel, el generează fiecare notă a simfoniei înmulţind pe $a$ cu $10$ şi împărţind rezultatul la $b$ (împărţire întreagă). Pentru a nu genera aceeaşi notă, el modifică de fiecare dată pe $a$, înlocuindu-l cu restul împărţirii lui $a \cdot 10$ la $b$. Deci notele sunt generate după regula $a \cdot 10$ div $b$, unde după fiecare pas a se schimbă astfel: $a = a \cdot 10$ mod $b$ (operaţia div reprezintă câtul întreg al împărţirii, iar mod este întregul ce reprezintă restul împărţirii întregi a două numere).
Astfel, pornind de la $a = 42$ şi $b = 130$, el va genera notele: $3 \ 2 \ 3 \ 0 \ 7 \ 6 \ 9 \ 2 \ 3 \ 0 \ 7 \ 6 \ 9 \ 2$ etc.
 
* $3 = 42 \cdot 10$ div $130$, iar $a$ devine $a = 42 * 10$ mod $130$, deci $a = 30$;
* $2 = 30 \cdot 10$ div $130$, $a = 300$ mod $130$, $a = 40$;
* $3 = 40 \cdot 10$ div $130$, $a = 400$ mod $130$, $a = 10$;
* $0 = 10 \cdot 10$ div $130$, $a = 100$ mod $130$, $a = 100$;
* $7 = 100 \cdot 10$ div $130$, $a = 1000$ mod $130$, $a = 90$;
* $6 = 90 \cdot 10$ div $130$, $a = 900$ mod $130$, $a = 120$;
* $9 = 120 \cdot 10$ div $130$, $a = 1200$ mod $130$, $a = 30$;
* $2 = 30 \cdot 10$ div $130$, $a = 300$ mod $130$, $a = 40$;
etc.

Ascultând simfonia, Andrei constată că, de la un moment dat, o secvenţă începe să se repete identic de un număr infinit de ori. Andrei numeşte secvenţa formată de primele note, cele aflate înaintea secvenţei care se repetă, „tema”, iar secvenţa care se repetă, „refrenul” simfoniei. De exemplu, în secvenţa anterioară, $3$ este tema, iar $230769$ este refrenul. El consideră tema şi refrenul cu lungimi cât mai mici posibil. Astfel, în exemplul anterior, nu se pot considera temă respectiv refren nici $32$ şi $307692$, nici $3$ şi $230769230769$. Există şi cazul în care nu există temă, adică simfonia începe direct cu refrenul.

# Cerință

Scrieţi un program care, citind două numere naturale $a$ şi $b$ ($a < b$), va determina cifrele temei şi cifrele refrenului. Se vor afişa cifrele temei, în continuare cifrele refrenului apoi un spaţiu urmat de un număr reprezentând câte cifre are refrenul. 

# Date de intrare

Fişierul de intrare `muzica.in` conţine pe prima linie două valori: $a$ şi $b$ numere naturale, separate printr-un spaţiu.


# Date de ieșire

Fişierul de ieşire `muzica.out` va conţine o singură linie cu cifrele temei urmate în continuare de cifrele refrenului şi, după un spaţiu, numărul de cifre ale refrenului.

# Restricții și precizări

* $1 < a, b < 1 \ 000$;
* $a \neq b$;

---

Example:
`muzica.in`
```
164 824
```

`muzica.out`
```
19902912621359223300970873786407766 34
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>

int main() {
    std::ifstream infile("muzica.in");
    std::ofstream outfile("muzica.out");

    int a, b;
    infile >> a >> b;

    std::vector<int> notes;
    std::unordered_map<int, int> seen;

    int position = 0;
    while (seen.find(a) == seen.end()) {
        seen[a] = position++;
        int note = (a * 10) / b;
        notes.push_back(note);
        a = (a * 10) % b;
    }

    int repeat_start = seen[a];
    int theme_length = repeat_start;
    int refrain_length = notes.size() - repeat_start;

    for (int i = 0; i < theme_length; ++i) {
        outfile << notes[i];
    }
    for (int i = repeat_start; i < notes.size(); ++i) {
        outfile << notes[i];
    }
    outfile << " " << refrain_length << std::endl;

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - Read the input values `a` and `b` from `muzica.in`.

2. **Generating the Sequence:**
   - Use a vector `notes` to store the generated notes.
   - Use an unordered map `seen` to keep track of the positions where each value of `a` was first seen.

3. **Loop Until Repetition is Detected:**
   - While the current value of `a` has not been seen before, calculate the next note and update `a`.
   - Store the note in `notes` and the position of `a` in `seen`.

4. **Detect Repetition:**
   - Once a repetition is detected (i.e., `a` is already in `seen`), determine the starting position of the repetition.
   - Calculate the lengths of the theme and refrain.

5. **Output the Result:**
   - Output the theme followed by the refrain and the length of the refrain to `muzica.out`.

This solution efficiently detects the repeating sequence and outputs the required theme and refrain along with the refrain length.
