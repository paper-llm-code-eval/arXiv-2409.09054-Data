---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we can use dynamic programming to find the maximum amount of food the mouse can collect while traversing from the top-left corner to the bottom-right corner of the grid. The idea is to maintain a 2D array `dp` where `dp[i][j]` represents the maximum amount of food that can be collected when reaching cell `(i, j)`.

Here is the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("mouse.in");
    ofstream outfile("mouse.out");
    
    int m, n;
    infile >> m >> n;
    
    vector<vector<int>> food(m, vector<int>(n));
    for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
            infile >> food[i][j];
    
    vector<vector<int>> dp(m, vector<int>(n));
    vector<vector<pair<int, int>>> parent(m, vector<pair<int, int>>(n, {-1, -1}));
    
    dp[0][0] = food[0][0];
    
    for (int i = 1; i < m; ++i) {
        dp[i][0] = dp[i-1][0] + food[i][0];
        parent[i][0] = {i-1, 0};
    }
    
    for (int j = 1; j < n; ++j) {
        dp[0][j] = dp[0][j-1] + food[0][j];
        parent[0][j] = {0, j-1};
    }
    
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            if (dp[i-1][j] > dp[i][j-1]) {
                dp[i][j] = dp[i-1][j] + food[i][j];
                parent[i][j] = {i-1, j};
            } else {
                dp[i][j] = dp[i][j-1] + food[i][j];
                parent[i][j] = {i, j-1};
            }
        }
    }
    
    int max_food = dp[m-1][n-1];
    vector<pair<int, int>> path;
    
    int x = m-1, y = n-1;
    while (x != -1 && y != -1) {
        path.push_back({x+1, y+1});
        auto p = parent[x][y];
        x = p.first;
        y = p.second;
    }
    
    reverse(path.begin(), path.end());
    
    outfile << path.size() << " " << max_food << endl;
    for (const auto& p : path)
        outfile << p.first << " " << p.second << endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the dimensions `m` and `n` and the food quantities in each cell from `mouse.in`.
2. **Dynamic Programming Setup:** We initialize a `dp` array where `dp[i][j]` will store the maximum food collected to reach cell `(i, j)`. We also maintain a `parent` array to keep track of the path.
3. **Filling DP Table:**
   - Initialize the first row and first column since the mouse can only move right or down.
   - For each cell `(i, j)`, we choose the maximum food collected from either the cell above `(i-1, j)` or the cell to the left `(i, j-1)`.
4. **Reconstructing the Path:** We backtrack from the bottom-right corner `(m-1, n-1)` to the top-left corner `(0, 0)` using the `parent` array to reconstruct the path.
5. **Writing Output:** We write the number of cells visited, the maximum food collected, and the path to `mouse.out`.

This solution ensures that the mouse collects the maximum amount of food while traversing from the top-left to the bottom-right corner of the grid.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found output indicates that the current implementation does not explore all possible paths optimally. The current approach only considers moving right or down, which might not always yield the optimal path in certain grid configurations.

To fix this, we need to ensure that the mouse can move in all four possible directions (up, down, left, right) while ensuring it doesn't revisit any cell. This can be achieved using a depth-first search (DFS) with backtracking.

Here is the corrected solution using DFS with backtracking to explore all possible paths:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int m, n;
vector<vector<int>> food;
vector<vector<bool>> visited;
int maxFood = 0;
vector<pair<int, int>> bestPath;
vector<pair<int, int>> currentPath;

void dfs(int x, int y, int currentFood) {
    if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y]) {
        return;
    }
    
    currentFood += food[x][y];
    visited[x][y] = true;
    currentPath.push_back({x + 1, y + 1});
    
    if (x == m - 1 && y == n - 1) {
        if (currentFood > maxFood) {
            maxFood = currentFood;
            bestPath = currentPath;
        }
    } else {
        dfs(x + 1, y, currentFood); // Move down
        dfs(x - 1, y, currentFood); // Move up
        dfs(x, y + 1, currentFood); // Move right
        dfs(x, y - 1, currentFood); // Move left
    }
    
    visited[x][y] = false;
    currentPath.pop_back();
}

int main() {
    ifstream infile("mouse.in");
    ofstream outfile("mouse.out");
    
    infile >> m >> n;
    
    food.resize(m, vector<int>(n));
    visited.resize(m, vector<bool>(n, false));
    
    for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
            infile >> food[i][j];
    
    dfs(0, 0, 0);
    
    outfile << bestPath.size() << " " << maxFood << endl;
    for (const auto& p : bestPath)
        outfile << p.first << " " << p.second << endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the dimensions `m` and `n` and the food quantities in each cell from `mouse.in`.
2. **DFS with Backtracking:** We use a DFS approach to explore all possible paths from the top-left corner `(0, 0)` to the bottom-right corner `(m-1, n-1)`.
   - We maintain a `visited` matrix to ensure that the mouse does not revisit any cell.
   - We keep track of the current path and the maximum food collected so far.
3. **Updating Best Path:** Whenever we reach the bottom-right corner, we check if the current path yields more food than the previously recorded best path. If so, we update the best path and the maximum food collected.
4. **Writing Output:** We write the number of cells visited, the maximum food collected, and the path to `mouse.out`.

This approach ensures that we explore all possible paths and find the one that maximizes the food collected.
