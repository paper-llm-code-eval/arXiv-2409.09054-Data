---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `piata.in` and write to `piata.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionuţ pleacă la sfârşit de săptămână să se relaxeze într-un parc de distracţii. La intrarea în parc se află o piaţă mare, pavată cu plăci de marmură de aceeaşi dimensiune. Fiecare placă are scris pe ea un singur număr dintre $f(1), f(2), f(3), …, f(n)$, unde $f(k)$ este suma cifrelor lui $k$, pentru $k$ din mulţimea $\{1, 2, \dots, n\}$. Piaţa are forma unui tablou bidimensional cu $n$ linii şi $n$ coloane. Plăcile care alcătuiesc piaţa sunt aşezate astfel:

-	pe prima linie sunt plăci cu numerele $f(1), f(2), \dots, f(n-2), f(n-1), f(n)$ (în această ordine de la stânga la dreapta);
-	pe linia a doua sunt plăci cu numerele $f(n),f(1),f(2), f(3), \dots, f(n-1)$, (în această ordine de la stânga la dreapta);
-	pe linia a treia sunt plăci cu numerele $f(n-1),f(n),f(1),f(2), f(3), \dots, f(n-2)$ (în această ordine de la stânga la dreapta);
-	$\dots$
-	pe ultima linie sunt plăci cu numerele $f(2), \dots, f(n-2), f(n-1), f(n), f(1)$ (în această ordine de la stânga la dreapta).

Părinţii lui Ionuţ vor ca şi în această zi, fiul lor să rezolve măcar o problemă cu sume. Astfel aceştia îi propun lui Ionuţ să determine suma numerelor aflate pe porţiunea dreptunghiulară din piaţă având colţurile în poziţiile în care se găsesc aşezaţi ei. Tatăl se află pe linia $i_T$ şi coloana $j_T$ (colţul stânga-sus), iar mama pe linia $i_M$ şi coloana $j_M$ (colţul dreapta-jos). Porţiunea din piaţă pentru care se doreşte suma este în formă dreptunghiulară, cu laturile paralele cu marginile pieţei (vezi zona plină din exemplu). Dacă Ionuţ va calcula suma cerută, atunci el va fi recompensat în parcul de distracţii, de către părinţii lui.
  
# Cerinţă
Determinaţi suma cerută de părinţii lui Ionuţ.  

# Date de intrare


Fişierul de intrare `piata.in` conţine pe prima linie numărul natural n reprezentând dimensiunea pieţei. Pe linia a doua se află despărţite printr-un spaţiu numerele naturale $i_T$ şi $j_T$. Pe linia a treia se află despărţite printr-un spaţiu numerele naturale $i_M$ şi $j_M$.

# Date de ieșire


Fişierul de ieşire `piata.out`, va conţine pe prima linie suma cerută.

# Restricții și precizări

* $2 \leq n \leq 40 \ 000$
* $1 \leq i_T, j_T, i_M, j_M \leq n$
* $i_T \leq i_M$
* $j_T \leq j_M$
* Suma cerută de părinţii lui Ionuţ nu depăşeşte niciodată valoarea $2 \ 100 \ 000 \ 000$.
* $20\%$ din teste au $n \leq 250$
* $30\%$ din teste au $250 \leq n \leq 10 \ 000$
* $30\%$ din teste au $10 \ 001 \leq n \leq 28 \ 000$
* $20\%$ din teste au $28 \ 001 \leq n \leq 40 \ 000$

---

Example:
`piata.in`
```
6
2 3
6 5
```

`piata.out`
```
51
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider the following steps:

1. **Reading Input Efficiently**: Since the input size can be large, we need to read the input data efficiently from the file.
2. **Calculating Digit Sums**: We need to compute the digit sum for numbers from 1 to n.
3. **Constructing the Matrix**: Construct the matrix based on the given rules.
4. **Summing the Submatrix**: Efficiently sum the values in the specified submatrix.

Given the constraints, especially with `n` being as large as 40,000, constructing the entire matrix explicitly would be impractical due to memory constraints. Instead, we can leverage the cyclic nature of the rows in the matrix to compute the submatrix sum directly.

Here's the C++ solution that follows the above plan:

```cpp
#include <fstream>
#include <vector>
#include <numeric>

// Function to calculate the sum of digits of a number
int digitSum(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int main() {
    std::ifstream infile("piata.in");
    std::ofstream outfile("piata.out");

    int n, iT, jT, iM, jM;
    infile >> n >> iT >> jT >> iM >> jM;

    // Adjust indices to 0-based for easier handling in C++ arrays
    --iT; --jT; --iM; --jM;

    // Precompute the digit sums for numbers 1 to n
    std::vector<int> digitSums(n);
    for (int i = 1; i <= n; ++i) {
        digitSums[i - 1] = digitSum(i);
    }

    // Calculate the sum of the submatrix
    long long sum = 0;
    for (int i = iT; i <= iM; ++i) {
        for (int j = jT; j <= jM; ++j) {
            int index = (j - (i % n) + n) % n;
            sum += digitSums[index];
        }
    }

    outfile << sum << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input Efficiently**: We use `ifstream` to read from the input file and `ofstream` to write to the output file.
2. **Calculating Digit Sums**: We precompute the digit sums for all numbers from 1 to n and store them in a vector.
3. **Constructing the Matrix**: Instead of constructing the entire matrix, we use the cyclic property of the rows. For any element in row `i` and column `j`, the value can be found using the formula `(j - (i % n) + n) % n`.
4. **Summing the Submatrix**: We iterate over the submatrix defined by the corners `(iT, jT)` and `(iM, jM)` and sum the appropriate values from the precomputed digit sums.

This approach ensures that we handle the potentially large input size efficiently without constructing the entire matrix, thus saving both time and space.
