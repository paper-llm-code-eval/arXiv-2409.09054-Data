---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `piata.in` and write to `piata.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionuţ pleacă la sfârşit de săptămână să se relaxeze într-un parc de distracţii. La intrarea în parc se află o piaţă mare, pavată cu plăci de marmură de aceeaşi dimensiune. Fiecare placă are scris pe ea un singur număr dintre $f(1), f(2), f(3), …, f(n)$, unde $f(k)$ este suma cifrelor lui $k$, pentru $k$ din mulţimea $\{1, 2, \dots, n\}$. Piaţa are forma unui tablou bidimensional cu $n$ linii şi $n$ coloane. Plăcile care alcătuiesc piaţa sunt aşezate astfel:

-	pe prima linie sunt plăci cu numerele $f(1), f(2), \dots, f(n-2), f(n-1), f(n)$ (în această ordine de la stânga la dreapta);
-	pe linia a doua sunt plăci cu numerele $f(n),f(1),f(2), f(3), \dots, f(n-1)$, (în această ordine de la stânga la dreapta);
-	pe linia a treia sunt plăci cu numerele $f(n-1),f(n),f(1),f(2), f(3), \dots, f(n-2)$ (în această ordine de la stânga la dreapta);
-	$\dots$
-	pe ultima linie sunt plăci cu numerele $f(2), \dots, f(n-2), f(n-1), f(n), f(1)$ (în această ordine de la stânga la dreapta).

Părinţii lui Ionuţ vor ca şi în această zi, fiul lor să rezolve măcar o problemă cu sume. Astfel aceştia îi propun lui Ionuţ să determine suma numerelor aflate pe porţiunea dreptunghiulară din piaţă având colţurile în poziţiile în care se găsesc aşezaţi ei. Tatăl se află pe linia $i_T$ şi coloana $j_T$ (colţul stânga-sus), iar mama pe linia $i_M$ şi coloana $j_M$ (colţul dreapta-jos). Porţiunea din piaţă pentru care se doreşte suma este în formă dreptunghiulară, cu laturile paralele cu marginile pieţei (vezi zona plină din exemplu). Dacă Ionuţ va calcula suma cerută, atunci el va fi recompensat în parcul de distracţii, de către părinţii lui.
  
# Cerinţă
Determinaţi suma cerută de părinţii lui Ionuţ.  

# Date de intrare


Fişierul de intrare `piata.in` conţine pe prima linie numărul natural n reprezentând dimensiunea pieţei. Pe linia a doua se află despărţite printr-un spaţiu numerele naturale $i_T$ şi $j_T$. Pe linia a treia se află despărţite printr-un spaţiu numerele naturale $i_M$ şi $j_M$.

# Date de ieșire


Fişierul de ieşire `piata.out`, va conţine pe prima linie suma cerută.

# Restricții și precizări

* $2 \leq n \leq 40 \ 000$
* $1 \leq i_T, j_T, i_M, j_M \leq n$
* $i_T \leq i_M$
* $j_T \leq j_M$
* Suma cerută de părinţii lui Ionuţ nu depăşeşte niciodată valoarea $2 \ 100 \ 000 \ 000$.
* $20\%$ din teste au $n \leq 250$
* $30\%$ din teste au $250 \leq n \leq 10 \ 000$
* $30\%$ din teste au $10 \ 001 \leq n \leq 28 \ 000$
* $20\%$ din teste au $28 \ 001 \leq n \leq 40 \ 000$

---

Example:
`piata.in`
```
6
2 3
6 5
```

`piata.out`
```
51
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider the structure of the matrix and how the numbers are arranged. The key observations are:

1. The function `f(k)` is the sum of the digits of `k`.
2. The matrix has a cyclic pattern due to the way rows are shifted.

Given the constraints, a direct simulation of the matrix would be inefficient. Instead, we can compute the required sums by leveraging the cyclic nature of the rows.

Here's the step-by-step plan:
1. Precompute the sum of digits for all numbers from 1 to n.
2. Use the precomputed sums to efficiently calculate the sum for any submatrix defined by `(i_T, j_T)` and `(i_M, j_M)`.

Let's implement this in C++:

```cpp
#include <fstream>
#include <vector>
#include <numeric>

// Function to compute the sum of digits of a number
int sumOfDigits(int num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

int main() {
    std::ifstream fin("piata.in");
    std::ofstream fout("piata.out");

    int n, i_T, j_T, i_M, j_M;
    fin >> n >> i_T >> j_T >> i_M >> j_M;

    // Precompute the sum of digits for all numbers from 1 to n
    std::vector<int> digitSums(n + 1);
    for (int i = 1; i <= n; ++i) {
        digitSums[i] = sumOfDigits(i);
    }

    // Calculate the sum for the submatrix
    long long totalSum = 0;
    for (int i = i_T; i <= i_M; ++i) {
        for (int j = j_T; j <= j_M; ++j) {
            int rowShift = (i - 1) % n;
            int colIndex = (j + rowShift - 1) % n + 1;
            totalSum += digitSums[colIndex];
        }
    }

    fout << totalSum << "\n";

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **sumOfDigits Function**: This function computes the sum of the digits of a given number.
2. **Precompute Digit Sums**: We precompute the sum of digits for all numbers from 1 to n and store them in the `digitSums` vector.
3. **Reading Input**: We read the input values from `piata.in`.
4. **Calculate Submatrix Sum**: For each position in the submatrix defined by `(i_T, j_T)` and `(i_M, j_M)`, we determine the correct column index considering the cyclic shift and sum the corresponding digit sums.
5. **Output Result**: Finally, we write the result to `piata.out`.

This approach ensures that we avoid the inefficiency of constructing the entire matrix, and instead, we use the precomputed values to get the results efficiently.
