{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/51/2024-09-15T20:00:14.614Z-06414.log",
  "attemptStart": 1726430414.614,
  "attemptEnd": 1726430428.199,
  "attemptDuration": 13.584999799728394,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cctype>\n#include <unordered_map>\n\nusing namespace std;\n\n// Function to calculate the Levenshtein distance between two words\nint levenshteinDistance(const string &a, const string &b) {\n    int n = a.size(), m = b.size();\n    vector<vector<int>> dp(n + 1, vector<int>(m + 1));\n    for (int i = 0; i <= n; ++i) dp[i][0] = i;\n    for (int j = 0; j <= m; ++j) dp[0][j] = j;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= m; ++j) {\n            if (a[i - 1] == b[j - 1])\n                dp[i][j] = dp[i - 1][j - 1];\n            else\n                dp[i][j] = min({ dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + 1 });\n        }\n    }\n    return dp[n][m];\n}\n\n// Function to split text into words and remove punctuation\nvector<string> splitAndCleanText(const string &text) {\n    vector<string> words;\n    string word;\n    for (char ch : text) {\n        if (isalpha(ch)) {\n            word += ch;\n        } else if (!word.empty()) {\n            words.push_back(word);\n            word.clear();\n        }\n    }\n    if (!word.empty()) words.push_back(word);\n    return words;\n}\n\nint main() {\n    ifstream fin(\"lant.in\");\n    ofstream fout(\"lant.out\");\n\n    int k;\n    fin >> k;\n    fin.ignore();\n\n    string text, line;\n    while (getline(fin, line)) {\n        text += line + \" \";\n    }\n\n    vector<string> words = splitAndCleanText(text);\n    int n = words.size();\n    if (n == 0) {\n        fout << 0 << endl;\n        return 0;\n    }\n\n    vector<int> dp(n, 1);\n    unordered_map<string, int> lastOccurrence;\n    lastOccurrence[words[0]] = 0;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = i - 1; j >= 0; --j) {\n            if (levenshteinDistance(words[j], words[i]) <= k) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        lastOccurrence[words[i]] = i;\n    }\n\n    int maxChains = *max_element(dp.begin(), dp.end());\n    fout << maxChains << endl;\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1848,
  "metadata": {
    "id": 51,
    "examples": [
      {
        "in": "5\nana are mere, banane,\npere si castane.",
        "out": "6",
        "explainer": ""
      }
    ],
    "body": "Ion este un lingvist pasionat. Recent el a descoperit un text scris într-o limbă necunoscută. Textul este scris pe mai multe linii şi este format din cuvinte scrise cu litere mici din alfabetul latin, separate prin spaţii sau/şi semne de punctuaţie (`,:;.!?-`).\n\nIon a fost frapat că există multe similitudini între cuvintele din text. Fiind foarte riguros, Ion defineşte similitudinea a două cuvinte după cum urmează.\n\nFie $c_1$ şi $c_2$ două cuvinte. Cuvântul $c_1$ poate fi obţinut din cuvântul $c_2$ printr-o succesiune de operaţii elementare. Operaţiile elementare ce pot fi folosite sunt:\n* ștergerea unui caracter\n* inserarea unui caracter\n* modificarea unui caracter\n\nDefinim similitudinea dintre $c_1$ şi $c_2$ ca fiind numărul minim de operaţii aplicate cuvântului $c_1$ pentru a ajunge la cuvântul $c_2$.\n\nFie $c_0$ primul cuvânt din text. Începând cu $c_0$ putem construi lanţuri de $k$-similitudine. \n\nUn lanţ de $k$-similitudine este o succesiune de cuvinte distincte din text cu următoarele proprietăţi:\n- dacă cuvântul $x$ apare în lanţ înaintea cuvântului $y$, atunci prima apariţie a lui $x$ în text precedă prima apariţie a lui $y$ în text;\n- dacă $x$ şi $y$ sunt cuvinte consecutive în lanţ (în ordinea $x\\ y$) , atunci similitudinea dintre $x$ şi $y$ este $≤k$;\n- lanţul este maximal (adică nu putem adăuga încă un cuvânt la sfârşitul acestui lanţ, astfel încât să fie respectate proprietăţile precedente).\n\n# Cerinţă\nScrieţi un program care să determine numărul de lanţuri de $k$-similitudine care încep cu $c_0$.\n\n# Date de intrare\nFişierul de intrare `lant.in` conţine pe prima linie valoarea $k$. Pe următoarele linii se află textul dat.\n\n# Date de ieşire\nFişierul de ieşire `lant.out` va conţine o singură linie pe care va fi scris numărul de lanţuri de $k$-similitudine care încep cu $c_0$.\n\n# Restricţii\n* Lungimea unei linii din text nu depăşeşte $1\\ 000$ de caractere.\n* Lungimea unui cuvânt nu depăşeşte $30$ de caractere.\n* Numărul total de cuvinte $≤ 150$.\n* Pentru datele de test, numărul de lanţuri de $k$-similitudine care încep cu $c_0$ va fi $≤ 2\\ 000\\ 000\\ 000$.\n* Enunțul a fost modificat",
    "header": {
      "problem_id": 51,
      "problem_name": "lant",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.02,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "lant.in",
      "output_filename": "lant.out",
      "multiple_solutions": false,
      "original_source": "OJI 2005 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "lant.in",
      "output": "lant.out"
    },
    "consoleInteraction": false
  }
}