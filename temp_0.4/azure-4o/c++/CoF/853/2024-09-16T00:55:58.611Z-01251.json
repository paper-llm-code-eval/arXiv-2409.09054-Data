{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/853/2024-09-16T00:55:58.611Z-01251.log",
  "attemptStart": 1726448158.611,
  "attemptEnd": 1726448188.22,
  "attemptDuration": 29.608999967575073,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nint main() {\n    std::ifstream fin(\"defrag.in\");\n    std::ofstream fout(\"defrag.out\");\n\n    int V, P, S, C;\n    fin >> V >> P >> S >> C;\n\n    std::vector<std::vector<int>> clusters(P + 1);\n\n    for (int i = 0; i < C; ++i) {\n        int p, s;\n        fin >> p >> s;\n        clusters[p].push_back(s);\n    }\n\n    if (V == 1) {\n        int free_tracks = 0;\n        for (int i = 1; i <= P; ++i) {\n            if (clusters[i].empty()) {\n                ++free_tracks;\n            }\n        }\n        fout << free_tracks << \"\\n\";\n    } else if (V == 2) {\n        for (int i = 1; i <= P; ++i) {\n            if (clusters[i].empty()) {\n                fout << \"0 \";\n                continue;\n            }\n\n            std::sort(clusters[i].begin(), clusters[i].end());\n\n            int occupied = clusters[i].size();\n            int min_moves = S;\n\n            for (int j = 0; j < occupied; ++j) {\n                int end = clusters[i][j] + occupied - 1;\n                auto it = std::upper_bound(clusters[i].begin(), clusters[i].end(), end);\n                int moves = occupied - (it - clusters[i].begin() - j);\n                min_moves = std::min(min_moves, moves);\n            }\n\n            fout << min_moves << \" \";\n        }\n        fout << \"\\n\";\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2524,
  "metadata": {
    "id": 853,
    "examples": [
      {
        "in": "1\n4 8\n10\n1 1\n1 3\n1 5\n1 7\n4 5\n4 1\n4 6\n4 8\n2 2\n2 4",
        "out": "1",
        "explainer": ""
      },
      {
        "in": "2\n4 8\n10\n1 1\n1 3\n1 5\n1 7\n4 5\n4 1\n4 6\n4 8\n2 2\n2 4",
        "out": "2 1 0 1",
        "explainer": ""
      }
    ],
    "body": "Discul dur (hard disk) este un dispozitiv utilizat pentru stocarea datelor. Stocarea se face pe o suprafață magnetică dispusă pe platane rotunde metalice. Pe un platan, datele sunt organizate în **piste** și **sectoare**, iar zona aflată la intersecția dintre o pistă și un sector poartă denumirea de **cluster**.\n\nUn cluster poate avea două stări: **liber**, dacă nu conține date, sau **ocupat**, atunci când conține date.\n\nUn platan se numește **defragmentat** dacă toți clusterii ocupați de pe fiecare pistă sunt așezați în ordine consecutivă. Defragmentarea se realizează prin mutarea unor clusteri ocupați și are rolul de a micșora timpul de acces la date. Mutarea unui cluster reprezintă transferul datelor de la un cluster ocupat către un cluster liber de pe aceeași pistă.\n\n~[defrag.png|width=90em|align=center]\n\n# Cerință\nCunoscând numărul de piste $P$ și de sectoare $S$ al unui platan, numărul și poziția clusterilor ocupați, să se scrie un program care determină:\n1. numărul de piste care au toți clusterii liberi;\n2. numărul **minim** de mutări de clusteri, pentru fiecare pistă în parte, astfel încât platanul să devină defragmentat.\n\n# Date de intrare\nPe prima linie a fişierului de intrare `defrag.in` se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$.\nPe a doua linie a fișierului de intrare se găsesc două numere naturale $P$ și $S$, separate printr-un spaţiu, cu semnificaţia din enunţ.\nA treia linie conţine un număr natural $C$ reprezentând numărul total de clusteri ocupați de pe platan, iar pe fiecare din următoarele $C$ linii se găsește câte o pereche de valori $p_i$ şi $s_i$, $1 \\leq i \\leq C$, separate printr-un spaţiu, reprezentând pista, respectiv sectorul unde se află fiecare cluster ocupat.\n\n# Date de ieşire\nFișierul de ieșire este `defrag.out`.\nDacă valoarea lui $V$ este $1$ atunci fişierul de ieşire va conţine pe prima linie un număr natural ce reprezintă numărul de piste care au toți clusterii liberi.\nDacă valoarea lui $V$ este $2$ atunci fişierul de ieşire va conține pe prima linie $P$ numere naturale notate $M_i$, $1 \\leq i \\leq P$, separate prin câte un singur spațiu, unde $M_i$ reprezintă numărul minim de mutări de clusteri, dintre cei aflați pe pista $i$, astfel încât pe pista $i$ clusterii ocupați să se găsească într-o ordine consecutivă.\n\n# Restricţii şi precizări\n- $1 \\leq P \\leq 100$\n- $1 \\leq S \\leq 360$\n- $1 \\leq C \\leq P \\cdot S$\n- Pistele sunt numerotate de la $1$ la $P$ începând cu pista exterioară.\n- Sectoarele sunt numerotate de la $1$ la $S$ în sensul acelor de ceasornic începând cu sectorul $1$.\n- Dacă o pistă are toți clusterii liberi, atunci valoarea cerută la a doua cerință este $0$.\n- $20\\%$ din teste vor avea valoarea $V = 1$, iar $80\\%$ din teste vor avea valoarea $V = 2$.",
    "header": {
      "problem_id": 853,
      "problem_name": "defrag",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "defrag.in",
      "output_filename": "defrag.out",
      "multiple_solutions": false,
      "original_source": "OJI 2015 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "defrag.in",
      "output": "defrag.out"
    },
    "consoleInteraction": false
  }
}