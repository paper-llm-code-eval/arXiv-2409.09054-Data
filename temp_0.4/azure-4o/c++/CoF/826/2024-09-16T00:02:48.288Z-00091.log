---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ozn.in` and write to `ozn.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O invazie de $N$ farfurii zburătoare (denumite uzual OZN) dă bătăi de cap autorităților. În fiecare astfel de OZN se află extratereștri care au ca misiune distrugerea planetei noastre. Radarul care a detectat invazia are un ecran similar cu planul XOY. Fiecare OZN este reprezentat pe ecran printr-un segment de dreaptă.

Pentru anihilarea OZN-urilor, autoritățile dispun de $K$ arme laser. Armele sunt poziționate pe sol (ilustrat pe ecranul radarului prin axa OX). Fiecare armă emite o rază laser, ilustrată pe ecran printr-o paralelă cu axa OY. Dacă o rază laser intersectează segmentul de pe ecranul radarului corespunzător unui OZN, raza va omorî toți extratereștrii aflați în OZN-ul respectiv.

Din păcate, în preajmă se află doar un militar specializat în arme laser, așa că autoritățile doresc să știe exact ce armă trebuie să folosească acesta pentru a distruge cât mai mulți extratereștri.

# Cerință

Ajutați autoritățile să determine numărul de extratereștri care pot fi anihilați cu fiecare armă din dotare.

# Date de intrare

Fișierul de intrare `ozn.in` conține pe prima linie două numere naturale separate prin spațiu $N \ K$ reprezentând numărul de OZN-uri și respectiv numărul de arme laser. Pe următoarele $N$ linii sunt descrise cele $N$ OZN-uri, câte unul pe linie. Un OZN este descris prin $5$ numere naturale separate prin câte un spațiu $x1 \ y1 \ x2 \ y2 \ nr$, reprezentând în ordine coordonatele capetelor segmentului corespunzător ($x1, y1$), ($x2, y2$), iar $nr$ – numărul de extratereștri din el. Pe ultima linie se găsesc $K$ numere naturale $a_1, a_2, a_3, \dots , a_K$, separate prin câte un spațiu, reprezentând coordonatele pe axa OX (abscisele) unde sunt amplasate armele laser.

# Date de ieșire

Fișierul de ieșire `ozn.out` va conține $K$ linii. Pe linia $i$ va fi scris numărul total de extratereștri care pot fi distruși cu arma $i$, considerând armele numerotate în ordinea în care acestea apar în fișierul de intrare.

# Restricții și precizări

* $1 \leq N \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq$ orice coordonată din fișierul de intrare $\leq 2 \ 000 \ 000$;
* $1 \leq nr \leq 100$, pentru orice OZN
* $x1 < x2$, pentru orice OZN
* Pe ecranul radarului segmentele ce descriu navele se pot intersecta.
* Dacă raza laser trece prin unul dintre capetele unui OZN atunci acesta este distrus.
* Pentru $50$ % dintre testele de intrare $1 \leq N \cdot K \leq 10 \ 000 \ 000$;

---

Example:
`ozn.in`
```
5 3
1 1 3 2 2
2 3 4 1 3
6 5 8 5 8
5 1 7 1 6
6 2 7 4 1
3 7 5
```

`ozn.out`
```
5
15
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution to the problem. It reads from `ozn.in` and writes to `ozn.out` without using `cin`, `cout`, `scanf`, or `printf`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct OZN {
    int x1, y1, x2, y2, nr;
};

int main() {
    std::ifstream infile("ozn.in");
    std::ofstream outfile("ozn.out");

    int N, K;
    infile >> N >> K;

    std::vector<OZN> ozns(N);
    for (int i = 0; i < N; ++i) {
        infile >> ozns[i].x1 >> ozns[i].y1 >> ozns[i].x2 >> ozns[i].y2 >> ozns[i].nr;
    }

    std::vector<int> lasers(K);
    for (int i = 0; i < K; ++i) {
        infile >> lasers[i];
    }

    std::vector<int> results(K, 0);

    for (int i = 0; i < K; ++i) {
        int laserX = lasers[i];
        for (const auto& ozn : ozns) {
            if (laserX >= ozn.x1 && laserX <= ozn.x2) {
                results[i] += ozn.nr;
            }
        }
    }

    for (const auto& result : results) {
        outfile << result << "\n";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program starts by reading the input from the file `ozn.in`. The first line contains the number of OZN segments `N` and the number of laser positions `K`.
2. **Storing OZN Data**: It then reads the details of each OZN segment into a vector of structs. Each struct contains the coordinates of the segment ends and the number of aliens in the segment.
3. **Storing Laser Positions**: The positions of the lasers on the x-axis are read into a vector.
4. **Calculating Results**: For each laser position, the program checks which OZN segments the laser intersects and sums up the number of aliens in those segments.
5. **Writing Output**: Finally, the results are written to the file `ozn.out`.

This solution is efficient and should handle the upper limits of the problem's constraints effectively.
