---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to determine the exponent of a given prime number \( k \) in the prime factorization of the factorial of \( n \) (i.e., \( n! \)). The factorial of \( n \) is the product of all integers from 1 to \( n \), and the exponent of \( k \) in \( n! \) can be calculated using the formula:

\[ \text{exponent} = \left\lfloor \frac{n}{k} \right\rfloor + \left\lfloor \frac{n}{k^2} \right\rfloor + \left\lfloor \frac{n}{k^3} \right\rfloor + \ldots \]

This formula works because each division by \( k^i \) counts the multiples of \( k^i \) in the range from 1 to \( n \).

Here is the C++ code to solve the problem:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("exponent.in");
    std::ofstream outfile("exponent.out");

    int n, k;
    infile >> n >> k;

    int exponent = 0;
    for (int i = k; i <= n; i *= k) {
        exponent += n / i;
    }

    outfile << exponent << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the values of \( n \) and \( k \) from the file `exponent.in`.
2. **Calculating Exponent**: Using a loop, the program calculates the exponent of \( k \) in \( n! \) by summing up the integer divisions of \( n \) by \( k^i \) for increasing powers of \( k \).
3. **Writing Output**: The result is written to the file `exponent.out`.

### Example:

For the input:
```
6 3
```

The calculation would be:
\[ \left\lfloor \frac{6}{3} \right\rfloor + \left\lfloor \frac{6}{9} \right\rfloor = 2 + 0 = 2 \]

Thus, the output would be:
```
2
```

This solution is efficient and works within the given constraints \( 1 \leq n \leq 100 \) and \( k \in \{2, 3, 5, 7\} \).
