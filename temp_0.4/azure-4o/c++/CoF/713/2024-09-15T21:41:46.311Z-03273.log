---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the exponent of a prime number \( k \) in the prime factorization of the factorial of \( n \) (denoted as \( n! \)). The prime factorization of \( n! \) involves counting how many times \( k \) divides into the numbers from 1 to \( n \).

The exponent of \( k \) in \( n! \) can be computed using the following formula:
\[ \text{exponent} = \left\lfloor \frac{n}{k} \right\rfloor + \left\lfloor \frac{n}{k^2} \right\rfloor + \left\lfloor \frac{n}{k^3} \right\rfloor + \cdots \]
This formula works because each term counts the multiples of \( k, k^2, k^3, \ldots \) in the range from 1 to \( n \).

Let's implement this in C++:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream fin("exponent.in");
    std::ofstream fout("exponent.out");

    int n, k;
    fin >> n >> k;

    int exponent = 0;
    int power = k;

    while (power <= n) {
        exponent += n / power;
        if (power > n / k) break; // Prevent overflow
        power *= k;
    }

    fout << exponent << std::endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the values of \( n \) and \( k \) from the input file `exponent.in`.
2. **Calculating the Exponent**: We initialize `exponent` to 0 and start with `power` equal to \( k \). In a loop, we keep adding the integer division of \( n \) by `power` to `exponent`. We then multiply `power` by \( k \) to get the next power of \( k \). The loop continues until `power` exceeds \( n \).
3. **Preventing Overflow**: We include a check to prevent overflow when multiplying `power` by \( k \).
4. **Writing Output**: Finally, we write the computed exponent to the output file `exponent.out`.

This solution is efficient and handles the constraints given in the problem.
