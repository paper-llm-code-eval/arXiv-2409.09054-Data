---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to determine the exponent of a given prime number \( k \) in the prime factorization of the factorial \( n! \). The factorial \( n! \) is the product of all integers from 1 to \( n \). 

To find the exponent of \( k \) in \( n! \), we can use the formula:
\[ \text{exponent} = \left\lfloor \frac{n}{k} \right\rfloor + \left\lfloor \frac{n}{k^2} \right\rfloor + \left\lfloor \frac{n}{k^3} \right\rfloor + \ldots \]
This formula works because each term \( \left\lfloor \frac{n}{k^i} \right\rfloor \) counts the multiples of \( k^i \) in \( n! \).

Now, let's write the C++ code to solve this problem. We'll read from `exponent.in` and write to `exponent.out` without using `cin`, `cout`, `printf`, or `scanf`. Instead, we'll use file I/O operations.

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream input("exponent.in");
    std::ofstream output("exponent.out");

    int n, k;
    input >> n >> k;

    int exponent = 0;
    for (int power = k; power <= n; power *= k) {
        exponent += n / power;
    }

    output << exponent;

    input.close();
    output.close();
    return 0;
}
```

### Explanation of the Code:
1. **File I/O**: We use `std::ifstream` to read from `exponent.in` and `std::ofstream` to write to `exponent.out`.
2. **Reading Input**: We read the values of \( n \) and \( k \) from the input file.
3. **Calculating Exponent**: We initialize the exponent to 0. Then, for each power of \( k \) (starting from \( k \) and multiplying by \( k \) in each iteration), we add the integer division of \( n \) by that power to the exponent.
4. **Writing Output**: We write the calculated exponent to the output file.

This solution efficiently computes the exponent of \( k \) in the prime factorization of \( n! \) using logarithmic steps relative to \( n \).
