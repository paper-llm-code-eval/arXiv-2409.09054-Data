---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `submit.in` and write to `submit.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică se antrenează pe un site de probleme cu evaluare online. Când el trimite pe site soluţia la o problemă, aceasta este evaluată pe un anumit număr de teste. Punctajul obţinut la problema respectivă va fi egal cu suma punctajelor obţinute la fiecare test. Punctajele asociate testelor pot fi diferite. În plus, dacă problema a fost complet rezolvată (a obţinut punctaj maxim la toate testele), Vasilică primeşte şi un bonus. 

Vasilică poate trimite soluţia la o problemă de mai multe ori. Când trimite soluţia prima dată, punctajul se calculează în modul prezentat anterior. Când trimite soluţia a doua oară, Vasilică va fi penalizat cu două puncte (adică din punctajul total obţinut la problemă se scad două puncte). Când trimite soluţia a treia oară penalizarea este de $4$ puncte, a patra oară de $6$ puncte ş.a.m.d. Observaţi că la fiecare nouă încercare penalizarea creşte cu două puncte.

# Cerință

Date fiind rezultatele obţinute pe teste de Vasilică la fiecare soluţie trimisă, să se determine punctajul maxim pe care el l-a obţinut la problema respectivă.

# Date de intrare

Fișierul de intrare `submit.in` conține pe prima linie numărul natural $N$ reprezentând numărul de teste pe care este evaluată soluţia. 

Pe cea de a doua linie se află $N$ numere naturale separate prin spaţii $P_1, P_2, \dots, P_N$, reprezentând în ordine punctajul acordat pentru fiecare dintre cele $N$ teste. 

Pe cea de a treia linie se află numărul natural $B$ reprezentând bonusul (numărul de puncte acordate în cazul în care pentru toate testele soluţia obţine punctaj pe toate testele). 

Pe a patra linie este scris un număr natural $M$ reprezentând numărul de soluţii trimise de Vasilică la problemă. 

Urmează $M$ linii, fiecare linie conţinând rezultatele obţinute pe teste la cele $M$ soluţii trimise de Vasilică, în ordinea trimiterii lor. Pe cea de a $i$-a linie dintre cele $M$ sunt scrise $N$ valori din mulţimea $\{0, 1\}$, separate prin spaţii; a $j$-a valoare este $0$ dacă testul $j$ nu a fost rezolvat corect, respectiv $1$ dacă testul $j$ a fost corect rezolvat (obţinând punctajul maxim alocat pe test).

# Date de ieșire

Fișierul de ieșire `submit.out` va conţine o singură linie pe care va fi scris punctajul maxim obţinut de Vasilică la problema respectivă.

# Restricții și precizări

* $1 \leq N, M \leq 100$;
* $0 \leq P_i, B \leq 100$;

---

Example:
`submit.in`
```
4
10 5 5 20
13
3
0 0 0 0
1 1 1 1
0 1 0 1
```

`submit.out`
```
51
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("submit.in");
    std::ofstream outfile("submit.out");

    int N, B, M;
    infile >> N;
    std::vector<int> points(N);
    for (int i = 0; i < N; ++i) {
        infile >> points[i];
    }
    infile >> B;
    infile >> M;

    int max_score = 0;
    for (int i = 0; i < M; ++i) {
        int current_score = 0;
        bool all_correct = true;
        for (int j = 0; j < N; ++j) {
            int result;
            infile >> result;
            if (result == 1) {
                current_score += points[j];
            } else {
                all_correct = false;
            }
        }
        if (all_correct) {
            current_score += B;
        }
        current_score -= 2 * i; // Subtract penalty
        max_score = std::max(max_score, current_score);
    }

    outfile << max_score << "\n";

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The input is read from `submit.in` using `ifstream`.
   - The number of tests `N`, the points for each test, the bonus `B`, and the number of submissions `M` are read first.

2. **Processing Each Submission:**
   - For each submission, we initialize `current_score` to 0 and a flag `all_correct` to true.
   - We iterate through the results of the tests for the current submission. If a test is passed (`result == 1`), we add the corresponding points to `current_score`. If any test is failed (`result == 0`), we set `all_correct` to false.
   - If all tests are correct, we add the bonus `B` to `current_score`.

3. **Applying Penalty:**
   - The penalty for each submission is calculated as `2 * i` where `i` is the zero-based index of the submission.
   - We subtract this penalty from `current_score`.

4. **Tracking Maximum Score:**
   - We keep track of the maximum score obtained across all submissions using `max_score`.

5. **Writing Output:**
   - The maximum score is written to `submit.out` using `ofstream`.

This solution efficiently computes the maximum score by reading the input once and processing each submission in linear time relative to the number of tests, ensuring optimal performance.
