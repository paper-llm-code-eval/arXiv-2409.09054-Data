{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/938/2024-09-16T08:19:45.460Z-02109.log",
  "attemptStart": 1726474785.46,
  "attemptEnd": 1726474807.041,
  "attemptDuration": 21.580999851226807,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <queue>\n#include <climits>\n\nusing namespace std;\n\nconst int INF = INT_MAX;\nconst int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nvector<vector<int>> bfs(const vector<vector<int>>& matrix, int N, int M) {\n    vector<vector<int>> dist(N, vector<int>(M, INF));\n    queue<pair<int, int>> q;\n    q.push({0, 0});\n    dist[0][0] = 1;\n\n    while (!q.empty()) {\n        auto [x, y] = q.front();\n        q.pop();\n        for (const auto& dir : directions) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            if (nx >= 0 && nx < N && ny >= 0 && ny < M && matrix[nx][ny] == 0 && dist[nx][ny] == INF) {\n                dist[nx][ny] = dist[x][y] + 1;\n                q.push({nx, ny});\n            }\n        }\n    }\n    return dist;\n}\n\nint main() {\n    ifstream fin(\"labirint.in\");\n    ofstream fout(\"labirint.out\");\n\n    int N, M;\n    fin >> N >> M;\n\n    vector<vector<int>> matrix(N, vector<int>(M));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            char c;\n            fin >> c;\n            matrix[i][j] = c - '0';\n        }\n    }\n\n    vector<vector<int>> dist = bfs(matrix, N, M);\n    int d0 = dist[N-1][M-1];\n\n    vector<vector<int>> result(N, vector<int>(M, 0));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            if (matrix[i][j] == 1) {\n                matrix[i][j] = 0;\n                vector<vector<int>> new_dist = bfs(matrix, N, M);\n                if (new_dist[N-1][M-1] < d0) {\n                    result[i][j] = 1;\n                }\n                matrix[i][j] = 1;\n            }\n        }\n    }\n\n    for (const auto& row : result) {\n        for (int val : row) {\n            fout << val;\n        }\n        fout << '\\n';\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1948,
  "metadata": {
    "id": 938,
    "examples": [
      {
        "in": "5 6\n010001\n000101\n011001\n010010\n001000",
        "out": "010000\n000100\n001001\n010010\n001000",
        "explainer": ""
      }
    ],
    "body": "Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.\n\nNotăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.\n\n\n# Cerință\n\n\nPentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.\n\n\n# Date de intrare\n\n\nPe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.\n\n\n# Date de ieșire\n\n\nîn fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.\n\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 1 \\ 000$;\n* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.\n* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.\n\n\n| # | Punctaj | Restricții          |\n| - | ------- | ------------------- |\n| 1 | 10      | $1 \\leq N, M \\leq 50$, $d_0 = N + M - 1$ |\n| 2 | 30      | $1 \\leq N, M \\leq 50$      |\n| 3 | 60      | Fără restricții suplimentare.      |",
    "header": {
      "problem_id": 938,
      "problem_name": "Labirint",
      "tags": "[Grid, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "labirint.in",
      "output_filename": "labirint.out",
      "multiple_solutions": false,
      "original_source": "OJI 2021 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "labirint.in",
      "output": "labirint.out"
    },
    "consoleInteraction": false
  }
}