---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `labirint.in` and write to `labirint.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.

Notăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.


# Cerință


Pentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.


# Date de intrare


Pe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.


# Date de ieșire


în fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.


# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.
* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.


| # | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 10      | $1 \leq N, M \leq 50$, $d_0 = N + M - 1$ |
| 2 | 30      | $1 \leq N, M \leq 50$      |
| 3 | 60      | Fără restricții suplimentare.      |

---

Example:
`labirint.in`
```
5 6
010001
000101
011001
010010
001000
```

`labirint.out`
```
010000
000100
001001
010010
001000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a Breadth-First Search (BFS) algorithm to compute the shortest path from the start position (1, 1) to the end position (N, M). We will then use this information to determine if changing any position (i, j) from 1 to 0 results in a shorter path.

Here's the step-by-step approach:

1. **Read Input**: Read the matrix dimensions and the matrix itself from the input file.
2. **BFS for Shortest Path**: Use BFS to find the shortest path from (1, 1) to (N, M) in the given matrix and store this distance as `d0`.
3. **Check Each Position**: For each position (i, j) in the matrix:
   - If it's a wall (i.e., value is 1), temporarily change it to 0.
   - Use BFS to find the shortest path from (1, 1) to (N, M) with this modified matrix.
   - Compare this new path length with `d0`.
   - Restore the original value of the matrix.
4. **Output the Result**: Write the results to the output file.

Here's the C++ code implementing the above logic:

```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};

int bfs(const vector<vector<int>>& maze, int N, int M) {
    vector<vector<int>> dist(N, vector<int>(M, INT_MAX));
    queue<pair<int, int>> q;
    q.push({0, 0});
    dist[0][0] = 1;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i];
            int ny = y + dy[i];

            if (nx >= 0 && nx < N && ny >= 0 && ny < M && maze[nx][ny] == 0 && dist[nx][ny] == INT_MAX) {
                dist[nx][ny] = dist[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }

    return dist[N-1][M-1];
}

int main() {
    ifstream fin("labirint.in");
    ofstream fout("labirint.out");

    int N, M;
    fin >> N >> M;
    vector<vector<int>> maze(N, vector<int>(M));

    for (int i = 0; i < N; ++i) {
        string row;
        fin >> row;
        for (int j = 0; j < M; ++j) {
            maze[i][j] = row[j] - '0';
        }
    }

    int d0 = bfs(maze, N, M);
    vector<vector<int>> result(N, vector<int>(M, 0));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            if (maze[i][j] == 1) {
                maze[i][j] = 0;
                int new_d = bfs(maze, N, M);
                if (new_d < d0) {
                    result[i][j] = 1;
                }
                maze[i][j] = 1;
            }
        }
    }

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fout << result[i][j];
        }
        fout << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the matrix dimensions and the matrix itself from the input file.
2. **BFS Function**: This function computes the shortest path from the top-left to the bottom-right of the matrix using BFS.
3. **Initial Shortest Path**: We compute the shortest path in the original matrix and store it in `d0`.
4. **Checking Each Position**: For each position that is a wall, we temporarily change it to 0, compute the new shortest path, and compare it with `d0`. If the new path is shorter, we mark the position in the result matrix.
5. **Writing Output**: Finally, we write the result matrix to the output file.

This approach ensures that we efficiently compute the required information while adhering to the constraints.
