---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `labirint.in` and write to `labirint.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.

Notăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.


# Cerință


Pentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.


# Date de intrare


Pe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.


# Date de ieșire


în fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.


# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.
* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.


| # | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 10      | $1 \leq N, M \leq 50$, $d_0 = N + M - 1$ |
| 2 | 30      | $1 \leq N, M \leq 50$      |
| 3 | 60      | Fără restricții suplimentare.      |

---

Example:
`labirint.in`
```
5 6
010001
000101
011001
010010
001000
```

`labirint.out`
```
010000
000100
001001
010010
001000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use the Breadth-First Search (BFS) algorithm to find the shortest path in the binary matrix from the starting point (1, 1) to the ending point (N, M). BFS is well-suited for this task because it explores all nodes at the present depth level before moving on to nodes at the next depth level, ensuring the shortest path in an unweighted grid.

Here are the detailed steps:

1. **Read the Input**: Read the matrix dimensions \(N\) and \(M\) and the matrix itself from the file `labirint.in`.
2. **BFS for Shortest Path**: Use BFS to calculate the shortest path \(d_0\) from the starting position (0, 0) to the ending position (N-1, M-1).
3. **Check Each Position**: For each position (i, j), if it is a wall (i.e., matrix[i][j] == 1), temporarily set it to 0 and perform BFS again to calculate the shortest path \(d(i, j)\). If \(d(i, j) < d_0\), mark this position as 1 in the output matrix; otherwise, mark it as 0.
4. **Write the Output**: Write the output matrix to the file `labirint.out`.

Here is the C++ code implementing this solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

const int INF = INT_MAX;
const int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

vector<vector<int>> bfs(const vector<vector<int>>& matrix, int N, int M) {
    vector<vector<int>> dist(N, vector<int>(M, INF));
    queue<pair<int, int>> q;
    q.push({0, 0});
    dist[0][0] = 1;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();
        for (const auto& dir : directions) {
            int nx = x + dir[0];
            int ny = y + dir[1];
            if (nx >= 0 && nx < N && ny >= 0 && ny < M && matrix[nx][ny] == 0 && dist[nx][ny] == INF) {
                dist[nx][ny] = dist[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }
    return dist;
}

int main() {
    ifstream fin("labirint.in");
    ofstream fout("labirint.out");

    int N, M;
    fin >> N >> M;

    vector<vector<int>> matrix(N, vector<int>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            char c;
            fin >> c;
            matrix[i][j] = c - '0';
        }
    }

    vector<vector<int>> dist = bfs(matrix, N, M);
    int d0 = dist[N-1][M-1];

    vector<vector<int>> result(N, vector<int>(M, 0));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            if (matrix[i][j] == 1) {
                matrix[i][j] = 0;
                vector<vector<int>> new_dist = bfs(matrix, N, M);
                if (new_dist[N-1][M-1] < d0) {
                    result[i][j] = 1;
                }
                matrix[i][j] = 1;
            }
        }
    }

    for (const auto& row : result) {
        for (int val : row) {
            fout << val;
        }
        fout << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `labirint.in` and stored in a 2D vector `matrix`.
2. **BFS Function**: The `bfs` function computes the shortest path distances from the top-left corner to all other cells in the matrix.
3. **Initial BFS**: We first compute the shortest path distance `d0` from (0, 0) to (N-1, M-1).
4. **Check Each Position**: For each cell that is a wall, we temporarily set it to 0, run BFS again, and check if the new shortest path is less than `d0`. If so, we mark that cell in the result matrix.
5. **Output**: The result matrix is written to `labirint.out`.

This approach ensures that we efficiently find the shortest paths and determine the required output for each cell.
