---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently in C++, we need to read the input from the file `telecabina.in`, process the data to determine the number of people who reach the city, calculate the fuel consumption, and count the number of special stations. Finally, we'll write the results to the file `telecabina.out`.

Here's the step-by-step approach to achieve this:

1. **Reading Input**: We'll read the input from the file and store the altitudes and number of people for each station.
2. **Processing Data**:
   - Calculate the total number of people who reach the city.
   - Calculate the total fuel consumption based on the altitude differences.
   - Count the number of special stations where the direction of travel changes.
3. **Writing Output**: We'll write the results to the output file.

Here's the C++ code implementing the solution:

```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream infile("telecabina.in");
    std::ofstream outfile("telecabina.out");

    int n;
    infile >> n;

    std::vector<int> altitudes(n);
    std::vector<int> people(n);

    for (int i = 0; i < n; ++i) {
        infile >> altitudes[i] >> people[i];
    }

    int total_people = 0;
    int total_fuel = 0;
    int special_stations = 0;

    for (int i = 0; i < n; ++i) {
        total_people += people[i];
    }

    for (int i = 1; i < n; ++i) {
        int altitude_diff = altitudes[i] - altitudes[i - 1];
        if (altitude_diff > 0) {
            total_fuel += 3 * altitude_diff;
        } else {
            total_fuel += -altitude_diff;
        }
        if ((altitudes[i] > altitudes[i - 1] && altitudes[i - 1] < altitudes[i - 2]) ||
            (altitudes[i] < altitudes[i - 1] && altitudes[i - 1] > altitudes[i - 2])) {
            special_stations++;
        }
    }

    outfile << total_people << "\n";
    outfile << total_fuel << "\n";
    outfile << special_stations << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We use `ifstream` to read from `telecabina.in`.
   - We read the number of stations `n`.
   - We then read the altitudes and number of people for each station into two vectors.

2. **Processing Data**:
   - We calculate the total number of people by summing up the values in the `people` vector.
   - We calculate the total fuel consumption by iterating through the altitudes and computing the fuel based on whether the altitude difference is positive (uphill) or negative (downhill).
   - We count the number of special stations by checking if the direction of travel changes between consecutive stations.

3. **Writing Output**:
   - We use `ofstream` to write the results to `telecabina.out`.

This solution is efficient given the constraints and ensures that the operations are performed in linear time relative to the number of stations.
