---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>

struct Station {
    int altitude;
    int people;
};

int main() {
    std::ifstream infile("telecabina.in");
    std::ofstream outfile("telecabina.out");

    int n;
    infile >> n;

    std::vector<Station> stations(n);
    for (int i = 0; i < n; ++i) {
        infile >> stations[i].altitude >> stations[i].people;
    }

    int total_people = 0;
    int fuel_consumption = 0;
    int special_stations = 0;

    for (int i = 0; i < n; ++i) {
        total_people += stations[i].people;
    }

    for (int i = 1; i < n; ++i) {
        int altitude_diff = stations[i].altitude - stations[i - 1].altitude;
        if (altitude_diff > 0) {
            fuel_consumption += 3 * altitude_diff;
        } else {
            fuel_consumption += -1 * altitude_diff;
        }

        if ((altitude_diff > 0 && stations[i - 1].altitude > stations[i - 2].altitude) ||
            (altitude_diff < 0 && stations[i - 1].altitude < stations[i - 2].altitude)) {
            ++special_stations;
        }
    }

    outfile << total_people << std::endl;
    outfile << fuel_consumption << std::endl;
    outfile << special_stations << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - First, we read the number of stations `n`.
   - Then we read the altitude and number of people for each station into a vector of `Station` structs.

2. **Calculating Total People:**
   - We sum the number of people from all stations.

3. **Calculating Fuel Consumption:**
   - For each pair of consecutive stations, we calculate the altitude difference.
   - If the difference is positive, it means the telecabina is climbing, so we multiply the difference by 3.
   - If the difference is negative, it means the telecabina is descending, so we multiply the absolute value of the difference by 1.

4. **Counting Special Stations:**
   - A station is special if the direction of movement changes (from climbing to descending or vice versa).
   - We check the sign of the altitude difference between consecutive stations to determine if the direction changes.

5. **Writing Output:**
   - We write the total number of people, the fuel consumption, and the number of special stations to the output file.

This solution reads the input efficiently, performs the necessary calculations, and writes the output in the required format. It ensures that the operations are done in linear time, making it optimal for the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```
Expected output:
```
23
43
2
```
Found output:
```
23
43
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy in the output is due to the incorrect logic for counting special stations. Specifically, the condition for identifying special stations is flawed. The current implementation incorrectly counts the first station as a special station and does not correctly handle the transition detection.

Let's fix the logic for counting special stations and ensure the solution is correct.

### Corrected Approach:
1. **Read Input:**
   - Read the number of stations `n`.
   - Read the altitude and number of people for each station into a vector of `Station` structs.

2. **Calculate Total People:**
   - Sum the number of people from all stations.

3. **Calculate Fuel Consumption:**
   - For each pair of consecutive stations, calculate the altitude difference.
   - If the difference is positive, it means the telecabina is climbing, so multiply the difference by 3.
   - If the difference is negative, it means the telecabina is descending, so multiply the absolute value of the difference by 1.

4. **Count Special Stations:**
   - A station is special if the direction of movement changes (from climbing to descending or vice versa).
   - Track the previous altitude difference and compare it with the current altitude difference to detect changes in direction.

5. **Write Output:**
   - Write the total number of people, the fuel consumption, and the number of special stations to the output file.

Here is the corrected implementation:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

struct Station {
    int altitude;
    int people;
};

int main() {
    std::ifstream infile("telecabina.in");
    std::ofstream outfile("telecabina.out");

    int n;
    infile >> n;

    std::vector<Station> stations(n);
    for (int i = 0; i < n; ++i) {
        infile >> stations[i].altitude >> stations[i].people;
    }

    int total_people = 0;
    int fuel_consumption = 0;
    int special_stations = 0;

    for (int i = 0; i < n; ++i) {
        total_people += stations[i].people;
    }

    int prev_diff = 0;
    for (int i = 1; i < n; ++i) {
        int altitude_diff = stations[i].altitude - stations[i - 1].altitude;
        if (altitude_diff > 0) {
            fuel_consumption += 3 * altitude_diff;
        } else {
            fuel_consumption += -1 * altitude_diff;
        }

        if (i > 1) {
            if ((prev_diff > 0 && altitude_diff < 0) || (prev_diff < 0 && altitude_diff > 0)) {
                ++special_stations;
            }
        }
        prev_diff = altitude_diff;
    }

    outfile << total_people << std::endl;
    outfile << fuel_consumption << std::endl;
    outfile << special_stations << std::endl;

    return 0;
}
```

### Explanation of Changes:
1. **Track Previous Altitude Difference:**
   - Introduced a `prev_diff` variable to store the previous altitude difference.
   - This helps in detecting changes in direction between climbing and descending.

2. **Correct Special Station Counting:**
   - Modified the loop to start checking for special stations from the second pair of stations (i.e., `i > 1`).
   - Correctly detect changes in direction by comparing the current altitude difference with the previous one.

3. **Ensure Correct Output:**
   - The output is now correctly formatted and matches the expected results.

This corrected implementation should now produce the expected output for the given input.
