---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expozitie.in` and write to `expozitie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ilinca este o fetiţă căreia îi place foarte mult să deseneze; ea a făcut multe desene pe care le-a numerotat de la $1$ la $d$ şi apoi le-a multiplicat (toate copiile poartă acelaşi număr ca şi originalul după care au fost făcute). În vacanţă s-a hotărât să-şi deschidă propria expoziţie pe gardul bunicilor care are mai multe scânduri; pe fiecare scândură ea aşează o planşă (un desen original sau o copie). Ilinca ţine foarte mult la desenele ei şi doreşte ca fiecare desen să apară de cel puţin $k$ ori (folosind originalul şi copiile acestuia). Ilinca se întreabă în câte moduri ar putea aranja expoziţia. Două moduri de aranjare sunt considerate distincte dacă diferă cel puţin prin numărul unei planşe (de exemplu: $2 \ 1 \ 3 \ 3$ este aceeaşi expoziţie ca şi $2 \ 3 \ 1 \ 3$, dar este diferită de $2 \ 1 \ 3 \ 1$ şi de $1 \ 3 \ 3 \ 1$).

# Cerinţă

Cunoscând $n$ numărul de scânduri din gard, $d$ numărul desenelor originale şi $k$ numărul minim de apariţii al fiecărui desen, să se determine în câte moduri poate fi aranjată expoziţia, ştiind că Ilinca are la dispoziţie oricâte copii doreşte.


# Date de intrare


Fişierul de intrare `expozitie.in` va conţine $3$ numere, $n \ d \ k$ - numărul de scânduri, numărul desenelor originale, respectiv numărul minim de aparţii.


# Date de ieșire


Fişierul de ieşire `expozitie.out` va conţine un singur număr, $nr$, numărul modurilor distincte de aranjare a expoziţiei.


# Restricții și precizări

* $n,k,d$ sunt numere naturale
* $1 \leq n \leq 500$
* $1 \leq d \leq 500$
* $0 \leq k \leq n$

---

Example:
`expozitie.in`
```
3 2 1
```

`expozitie.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to calculate the number of ways to arrange `n` planks with `d` different drawings such that each drawing appears at least `k` times. This problem can be approached using combinatorics and dynamic programming.

### Approach:

1. **Combinatorial Counting**:
   - We need to count the number of ways to distribute `n` planks among `d` drawings such that each drawing appears at least `k` times.
   - This can be transformed into a problem of distributing `n - d * k` planks freely among `d` drawings.

2. **Dynamic Programming**:
   - We can use a dynamic programming approach to count the number of ways to distribute the remaining planks.

### Steps:

1. **Transform the problem**:
   - If each drawing needs to appear at least `k` times, we can subtract `k` from `n` for each drawing. This leaves us with `n' = n - d * k` planks to distribute freely.
   - If `n' < 0`, it's impossible to meet the requirement, so the answer is `0`.

2. **Dynamic Programming Table**:
   - Use a DP table where `dp[i][j]` represents the number of ways to distribute `j` planks among `i` drawings.
   - Initialize `dp[0][0] = 1` (one way to distribute zero planks among zero drawings).

3. **Fill the DP Table**:
   - Use the recurrence relation:
     - `dp[i][j] = dp[i-1][j] + dp[i][j-1]` if `j > 0`
     - This relation accounts for adding a plank to the current drawing or starting a new drawing.

4. **Result Extraction**:
   - The result will be in `dp[d][n']`.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>

using namespace std;

int main() {
    ifstream fin("expozitie.in");
    ofstream fout("expozitie.out");

    int n, d, k;
    fin >> n >> d >> k;

    // Calculate the remaining planks after ensuring each drawing appears at least k times
    int remaining_planks = n - d * k;

    if (remaining_planks < 0) {
        fout << 0 << "\n";
        return 0;
    }

    // DP table
    vector<vector<long long>> dp(d + 1, vector<long long>(remaining_planks + 1, 0));
    dp[0][0] = 1;  // Base case: one way to distribute 0 planks among 0 drawings

    for (int i = 1; i <= d; ++i) {
        for (int j = 0; j <= remaining_planks; ++j) {
            dp[i][j] = dp[i-1][j];
            if (j > 0) {
                dp[i][j] += dp[i][j-1];
            }
        }
    }

    fout << dp[d][remaining_planks] << "\n";

    return 0;
}
```

### Explanation:
- **Input/Output Handling**: We use `ifstream` and `ofstream` for file input and output.
- **DP Initialization**: We initialize the DP table with `0` and set the base case `dp[0][0] = 1`.
- **DP Table Filling**: We fill the DP table using the recurrence relation.
- **Result Extraction**: The final result is extracted from `dp[d][remaining_planks]`.

This approach ensures that the solution is efficient and works within the given constraints.
