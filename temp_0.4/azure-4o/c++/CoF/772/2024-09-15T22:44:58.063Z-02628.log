---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `nr.in` and write to `nr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se generează un şir de numere naturale ai cărui primi termeni sunt, în această ordine: 

$1$, $2$, $3$, $5$, $8$, $3$, $1$, $4$, $5$, $9$, $4$, $3$, $7$, $0$, $7$, $7$, $4$,...	 

# Cerință

Deduceţi regula după care sunt generaţi termenii şirului şi scrieţi un program care să citească numerele naturale $n$, $k$ şi $p$ şi care să determine:

1.	suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ; 
2.	numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ;
3.	cel de-al $p$-lea termen al şirului din enunţ.


# Date de intrare


Fişierul `nr.in` conţine o singură linie pe care sunt scrise trei numere naturale $n$, $k$ şi $p$, separate prin câte un spaţiu.


# Date de ieșire

Fişierul de ieşire `nr.out` va conţine $3$ linii: 

1. pe prima linie, un număr natural reprezentând suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ  
2. pe a doua linie, numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ
3. pe a treia linie se va afişa cel de-al $p$-lea termen al şirului din enunţ



# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq k \leq 9$;
* $1 \leq p \leq 2 \cdot 10^9$;
* Pentru rezolvarea cerinţei 1) se acordă 40% din punctaj, pentru cerinţa 2) 20% din punctaj şi pentru cerinţa 3) 40% din punctaj.
* Pentru teste în valoare de $50$ de puncte, $p \leq 10^7$;

---

Example:
`nr.in`
```
19 5 26
```

`nr.out`
```
47
3
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:The sequence given in the problem appears to follow a specific pattern. By examining the sequence, we can deduce that the sequence is generated by summing the last three terms and taking the result modulo 10. This pattern can be used to generate the sequence efficiently.

Here is the C++ code to solve the problem:

```cpp
#include <fstream>
#include <vector>
#include <cmath>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    std::ifstream inFile("nr.in");
    std::ofstream outFile("nr.out");

    int n, k, p;
    inFile >> n >> k >> p;

    // Initial sequence
    std::vector<int> sequence = {1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4};

    // Generate sequence until the maximum of n and p
    for (int i = 17; i < std::max(n, p); ++i) {
        int nextTerm = (sequence[i - 1] + sequence[i - 2] + sequence[i - 3]) % 10;
        sequence.push_back(nextTerm);
    }

    // Calculate the sum of prime numbers in the first n terms
    int primeSum = 0;
    for (int i = 0; i < n; ++i) {
        if (isPrime(sequence[i])) {
            primeSum += sequence[i];
        }
    }

    // Calculate the number of occurrences of digit k in the first n terms
    int kCount = 0;
    for (int i = 0; i < n; ++i) {
        if (sequence[i] == k) {
            kCount++;
        }
    }

    // Get the p-th term
    int pTerm = sequence[p - 1];

    // Write the results to the output file
    outFile << primeSum << "\n" << kCount << "\n" << pTerm << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - We read the integers `n`, `k`, and `p` from the file `nr.in`.

2. **Generating the Sequence:**
   - We initialize the sequence with the given terms.
   - We generate the sequence up to the maximum of `n` and `p` terms using the rule: `nextTerm = (sequence[i - 1] + sequence[i - 2] + sequence[i - 3]) % 10`.

3. **Summing Prime Numbers:**
   - We iterate through the first `n` terms and sum up the prime numbers.

4. **Counting Occurrences of `k`:**
   - We count the occurrences of the digit `k` in the first `n` terms.

5. **Finding the `p`-th Term:**
   - We directly access the `p`-th term in the sequence.

6. **Writing Output:**
   - We write the results to the file `nr.out` in the required format.

This solution is efficient and should work within the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
19 5 26
```
Expected output:
```
47
3
8
```
Found output:
```
42
2
8
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
