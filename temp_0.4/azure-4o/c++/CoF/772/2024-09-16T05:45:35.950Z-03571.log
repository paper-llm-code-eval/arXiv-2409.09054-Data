---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `nr.in` and write to `nr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se generează un şir de numere naturale ai cărui primi termeni sunt, în această ordine: 

$1$, $2$, $3$, $5$, $8$, $3$, $1$, $4$, $5$, $9$, $4$, $3$, $7$, $0$, $7$, $7$, $4$,...	 

# Cerință

Deduceţi regula după care sunt generaţi termenii şirului şi scrieţi un program care să citească numerele naturale $n$, $k$ şi $p$ şi care să determine:

1.	suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ; 
2.	numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ;
3.	cel de-al $p$-lea termen al şirului din enunţ.


# Date de intrare


Fişierul `nr.in` conţine o singură linie pe care sunt scrise trei numere naturale $n$, $k$ şi $p$, separate prin câte un spaţiu.


# Date de ieșire

Fişierul de ieşire `nr.out` va conţine $3$ linii: 

1. pe prima linie, un număr natural reprezentând suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ  
2. pe a doua linie, numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ
3. pe a treia linie se va afişa cel de-al $p$-lea termen al şirului din enunţ



# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq k \leq 9$;
* $1 \leq p \leq 2 \cdot 10^9$;
* Pentru rezolvarea cerinţei 1) se acordă 40% din punctaj, pentru cerinţa 2) 20% din punctaj şi pentru cerinţa 3) 40% din punctaj.
* Pentru teste în valoare de $50$ de puncte, $p \leq 10^7$;

---

Example:
`nr.in`
```
19 5 26
```

`nr.out`
```
47
3
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge, we need to:

1. Identify the rule generating the sequence.
2. Implement the sequence generation efficiently.
3. Calculate the required results based on the sequence.

### Sequence Rule
The sequence provided seems to follow a specific pattern. By examining the given terms:
1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4, ...

We can see that it resembles the Fibonacci sequence but taken modulo 10. The sequence can be generated as:
- a[0] = 1
- a[1] = 2
- a[i] = (a[i-1] + a[i-2]) % 10 for i >= 2

### Steps to Implement
1. Read `n`, `k`, and `p` from the input file.
2. Generate the sequence up to the maximum of `n` and `p`.
3. Calculate the sum of prime numbers in the first `n` terms.
4. Count occurrences of the digit `k` in the first `n` terms.
5. Find the `p`-th term in the sequence.

### Prime Checking
To check if a number is prime, we need a simple function since the sequence values are single digits (0 to 9).

### Implementation
Here is the C++ code to solve the problem:

```cpp
#include <fstream>
#include <vector>

bool isPrime(int num) {
    if (num < 2) return false;
    if (num == 2 || num == 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    return true;
}

int main() {
    std::ifstream fin("nr.in");
    std::ofstream fout("nr.out");

    int n, k, p;
    fin >> n >> k >> p;

    std::vector<int> sequence;
    sequence.push_back(1);
    sequence.push_back(2);

    for (int i = 2; i < std::max(n, p); ++i) {
        sequence.push_back((sequence[i-1] + sequence[i-2]) % 10);
    }

    int primeSum = 0;
    int kCount = 0;

    for (int i = 0; i < n; ++i) {
        if (isPrime(sequence[i])) {
            primeSum += sequence[i];
        }
        if (sequence[i] == k) {
            kCount++;
        }
    }

    fout << primeSum << "\n";
    fout << kCount << "\n";
    fout << sequence[p-1] << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation
1. **Reading Input:**
   - We read `n`, `k`, and `p` from the input file `nr.in`.

2. **Generating the Sequence:**
   - We generate the sequence up to the maximum of `n` and `p` terms using the Fibonacci-like rule modulo 10.

3. **Calculating Results:**
   - We calculate the sum of primes in the first `n` terms using the `isPrime` function.
   - We count the occurrences of the digit `k` in the first `n` terms.
   - We find the `p`-th term directly from the sequence.

4. **Output Results:**
   - We write the results to the output file `nr.out`.

This solution is efficient given the constraints and ensures that the sequence is generated only once up to the required length.
