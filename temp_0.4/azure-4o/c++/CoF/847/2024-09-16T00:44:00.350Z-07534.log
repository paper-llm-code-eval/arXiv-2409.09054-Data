---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La proba de sărituri cu schiurile din cadrul jocurilor olimpice de iarnă participă $N$ concurenți, numerotați cu numere de la 1 la N.

Regulile de desfășurare a probei sunt următoarele:
- concurenții evoluează pe rând, în ordine de la $1$ la $N$;
- fiecare concurent va efectua o singură săritură;
- după efectuarea săriturii fiecare concurent primește un anumit punctaj;
- pe tot parcursul concursului, comisia de arbitri are obligația să alcătuiască o listă cu punctajele obținute de concurenți, în ordinea evoluției lor;
- evoluția unui concurent durează exact un minut;
- nu se face pauză între evoluțiile a doi concurenți care au numere de ordine consecutive;
- afișarea punctajului nu necesită timp suplimentar după efectuarea săriturii;
- proba se încheie la un minut după evoluția ultimului concurent.

Pe tot parcursul concursului se ține în mod neoficial și un clasament parțial, pe baza rezultatelor obținute de concurenții care au evoluat până în acel moment. Asta pentru că șeful comisiei de arbitri are o curiozitate aparte și pune $K$ întrebări sub forma următoare: Câte minute s-a ocupat primul loc din clasament cu un punctaj egal cu $X$ puncte? Dacă nici un concurent nu s-a clasat pe primul loc cu $X$ puncte atunci primește ca răspuns valoarea $0$.

# Cerință

Scrieți un program care determină răspunsul pentru fiecare dintre cele $K$ întrebări puse de șeful comisiei de arbitri.

# Date de intrare

În fișierul `schi.in`, pe prima linie este scris un număr natural, $N$ reprezentând numărul de concurenți. 
Pe a doua linie a fișierului sunt scrise cele $N$ numere naturale separate prin câte un spațiu, reprezentând punctajele obținute de fiecare dintre cei $N$ concurenți, în ordinea în care aceștia au evoluat. Pe a treia linie a fișierului este scris numărul natural $K$ ce reprezintă numărul de întrebări puse de șef. Pe a patra linie a fișierului sunt scrise $K$ numere naturale separate prin câte un spațiu, reprezentând valorile $X$ ale punctajelor alese de șeful comisiei de arbitri.

# Date de ieșire

În fișierul `schi.out` se vor scrie $K$ numere, separate prin câte un spațiu, reprezentând, în ordine, răspunsurile la cele $K$ întrebări.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq$ punctajele obținute de concurenți $\leq 1 \ 000 \ 000 \ 000$;
* $0 \leq$ valorile $X$ alese de șeful arbitrilor $\leq 1 \ 000 \ 000 \ 000$;

---

Example:
`schi.in`
```
10
1 6 5 3 6 8 8 6 1 9
6
5 1 6 8 2 9
```

`schi.out`
```
0 1 4 4 0 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a C++ solution that reads from `schi.in` and writes to `schi.out` using file I/O operations. The solution is optimized to handle up to 100,000 competitors and 100,000 queries efficiently.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream infile("schi.in");
    std::ofstream outfile("schi.out");

    int N, K;
    infile >> N;

    std::vector<int> scores(N);
    for (int i = 0; i < N; ++i) {
        infile >> scores[i];
    }

    infile >> K;
    std::vector<int> queries(K);
    for (int i = 0; i < K; ++i) {
        infile >> queries[i];
    }

    // Map to store the time each score held the first place
    std::unordered_map<int, int> score_time_map;
    int current_max = -1;
    int current_max_time = 0;

    for (int i = 0; i < N; ++i) {
        if (scores[i] > current_max) {
            if (current_max != -1) {
                score_time_map[current_max] += current_max_time;
            }
            current_max = scores[i];
            current_max_time = 1;
        } else if (scores[i] == current_max) {
            ++current_max_time;
        } else {
            score_time_map[current_max] += 1;
        }
    }

    // Add the remaining time for the last maximum score
    if (current_max != -1) {
        score_time_map[current_max] += current_max_time;
    }

    // Answer the queries
    for (int i = 0; i < K; ++i) {
        int query = queries[i];
        if (score_time_map.find(query) != score_time_map.end()) {
            outfile << score_time_map[query] << " ";
        } else {
            outfile << "0 ";
        }
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:** The program reads the number of competitors `N` and their scores, followed by the number of queries `K` and the queries themselves.
2. **Tracking Maximum Scores:**
   - A map `score_time_map` is used to keep track of how long each score has held the first place.
   - The variables `current_max` and `current_max_time` are used to track the current highest score and the duration it has held the first place.
3. **Processing Scores:**
   - As we iterate through the scores, we update the `score_time_map` for the previous highest score whenever a new higher score is encountered.
   - If the current score equals the current highest score, we increment the duration it holds the first place.
   - If the current score is less than the current highest score, we simply increment the duration for the current highest score.
4. **Final Update:** After processing all scores, we ensure the last highest score's duration is updated in the map.
5. **Answering Queries:** For each query, we check if the score exists in the `score_time_map` and output the corresponding duration or `0` if the score was never the highest.

This solution ensures efficient processing with a time complexity of O(N + K), making it suitable for the given constraints.
