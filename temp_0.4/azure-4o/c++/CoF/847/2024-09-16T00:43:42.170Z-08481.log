---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La proba de sărituri cu schiurile din cadrul jocurilor olimpice de iarnă participă $N$ concurenți, numerotați cu numere de la 1 la N.

Regulile de desfășurare a probei sunt următoarele:
- concurenții evoluează pe rând, în ordine de la $1$ la $N$;
- fiecare concurent va efectua o singură săritură;
- după efectuarea săriturii fiecare concurent primește un anumit punctaj;
- pe tot parcursul concursului, comisia de arbitri are obligația să alcătuiască o listă cu punctajele obținute de concurenți, în ordinea evoluției lor;
- evoluția unui concurent durează exact un minut;
- nu se face pauză între evoluțiile a doi concurenți care au numere de ordine consecutive;
- afișarea punctajului nu necesită timp suplimentar după efectuarea săriturii;
- proba se încheie la un minut după evoluția ultimului concurent.

Pe tot parcursul concursului se ține în mod neoficial și un clasament parțial, pe baza rezultatelor obținute de concurenții care au evoluat până în acel moment. Asta pentru că șeful comisiei de arbitri are o curiozitate aparte și pune $K$ întrebări sub forma următoare: Câte minute s-a ocupat primul loc din clasament cu un punctaj egal cu $X$ puncte? Dacă nici un concurent nu s-a clasat pe primul loc cu $X$ puncte atunci primește ca răspuns valoarea $0$.

# Cerință

Scrieți un program care determină răspunsul pentru fiecare dintre cele $K$ întrebări puse de șeful comisiei de arbitri.

# Date de intrare

În fișierul `schi.in`, pe prima linie este scris un număr natural, $N$ reprezentând numărul de concurenți. 
Pe a doua linie a fișierului sunt scrise cele $N$ numere naturale separate prin câte un spațiu, reprezentând punctajele obținute de fiecare dintre cei $N$ concurenți, în ordinea în care aceștia au evoluat. Pe a treia linie a fișierului este scris numărul natural $K$ ce reprezintă numărul de întrebări puse de șef. Pe a patra linie a fișierului sunt scrise $K$ numere naturale separate prin câte un spațiu, reprezentând valorile $X$ ale punctajelor alese de șeful comisiei de arbitri.

# Date de ieșire

În fișierul `schi.out` se vor scrie $K$ numere, separate prin câte un spațiu, reprezentând, în ordine, răspunsurile la cele $K$ întrebări.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq$ punctajele obținute de concurenți $\leq 1 \ 000 \ 000 \ 000$;
* $0 \leq$ valorile $X$ alese de șeful arbitrilor $\leq 1 \ 000 \ 000 \ 000$;

---

Example:
`schi.in`
```
10
1 6 5 3 6 8 8 6 1 9
6
5 1 6 8 2 9
```

`schi.out`
```
0 1 4 4 0 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to keep track of the scores and determine how long each score held the first place. Here’s a step-by-step plan:

1. **Read Input**: Read the number of participants, their scores, the number of queries, and the queries themselves.
2. **Track First Place**: As we iterate through the scores, keep track of the current highest score and how long each score holds the first place.
3. **Answer Queries**: For each query, check the precomputed results to determine how long the queried score held the first place.

Here is the C++ implementation of the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("schi.in");
    ofstream fout("schi.out");

    int N;
    fin >> N;

    vector<int> scores(N);
    for (int i = 0; i < N; ++i) {
        fin >> scores[i];
    }

    int K;
    fin >> K;

    vector<int> queries(K);
    for (int i = 0; i < K; ++i) {
        fin >> queries[i];
    }

    unordered_map<int, int> first_place_duration;
    int current_max = -1;
    int current_duration = 0;

    for (int i = 0; i < N; ++i) {
        if (scores[i] > current_max) {
            if (current_max != -1) {
                first_place_duration[current_max] += current_duration;
            }
            current_max = scores[i];
            current_duration = 1;
        } else if (scores[i] == current_max) {
            current_duration++;
        } else {
            first_place_duration[current_max]++;
        }
    }

    if (current_max != -1) {
        first_place_duration[current_max] += current_duration;
    }

    for (int i = 0; i < K; ++i) {
        fout << first_place_duration[queries[i]] << " ";
    }

    fout << endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of participants `N`, their scores, the number of queries `K`, and the queries themselves from the input file `schi.in`.
2. **Tracking First Place**:
   - We use an unordered map `first_place_duration` to keep track of how long each score holds the first place.
   - We iterate through the scores, updating the current maximum score and its duration.
   - Whenever a new score exceeds the current maximum, we update the duration for the previous maximum score.
3. **Answering Queries**: For each query, we simply look up the precomputed duration in the unordered map and write the result to the output file `schi.out`.

This approach ensures that we efficiently compute the required durations in linear time, making it suitable for the given constraints.
