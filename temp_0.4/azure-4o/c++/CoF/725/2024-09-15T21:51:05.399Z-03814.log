---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <set>

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");

    unsigned int a, b;
    infile >> a >> b;

    std::vector<bool> digitsA(10, false), digitsB(10, false);

    // Mark digits present in a
    unsigned int temp = a;
    while (temp > 0) {
        digitsA[temp % 10] = true;
        temp /= 10;
    }

    // Mark digits present in b
    temp = b;
    while (temp > 0) {
        digitsB[temp % 10] = true;
        temp /= 10;
    }

    // Find common digits
    std::set<int> commonDigits;
    for (int i = 0; i < 10; ++i) {
        if (digitsA[i] && digitsB[i]) {
            commonDigits.insert(i);
        }
    }

    // Output common digits or -1 if none
    if (commonDigits.empty()) {
        outfile << "-1\n";
    } else {
        for (auto it = commonDigits.begin(); it != commonDigits.end(); ++it) {
            if (it != commonDigits.begin()) {
                outfile << " ";
            }
            outfile << *it;
        }
        outfile << "\n";
    }

    // Collect all digits from a and b
    std::vector<int> allDigits;
    temp = a;
    while (temp > 0) {
        allDigits.push_back(temp % 10);
        temp /= 10;
    }
    temp = b;
    while (temp > 0) {
        allDigits.push_back(temp % 10);
        temp /= 10;
    }

    // Sort digits in descending order to form the largest number
    std::sort(allDigits.rbegin(), allDigits.rend());

    // Output the largest number
    for (int digit : allDigits) {
        outfile << digit;
    }
    outfile << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the input values `a` and `b` from the `cifre.in` file.
2. **Marking Digits**: Two boolean arrays `digitsA` and `digitsB` are used to mark the presence of digits in `a` and `b` respectively.
3. **Finding Common Digits**: A set `commonDigits` is used to store the common digits between `a` and `b`.
4. **Output Common Digits**: If there are common digits, they are printed in ascending order. If there are no common digits, `-1` is printed.
5. **Collecting All Digits**: All digits from both `a` and `b` are collected into a vector `allDigits`.
6. **Sorting and Outputting Largest Number**: The digits in `allDigits` are sorted in descending order and printed to form the largest possible number.

This solution ensures efficient and correct handling of the given problem constraints.
