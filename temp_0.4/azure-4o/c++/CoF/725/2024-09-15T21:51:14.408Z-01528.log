---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <fstream>
#include <algorithm>
#include <set>
#include <vector>

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");

    long long a, b;
    infile >> a >> b;

    std::set<int> digits_a, digits_b, common_digits;
    std::vector<int> all_digits;

    // Extract digits from a
    long long temp = a;
    while (temp > 0) {
        digits_a.insert(temp % 10);
        all_digits.push_back(temp % 10);
        temp /= 10;
    }

    // Extract digits from b
    temp = b;
    while (temp > 0) {
        digits_b.insert(temp % 10);
        all_digits.push_back(temp % 10);
        temp /= 10;
    }

    // Find common digits
    for (int digit : digits_a) {
        if (digits_b.find(digit) != digits_b.end()) {
            common_digits.insert(digit);
        }
    }

    // Output common digits
    if (common_digits.empty()) {
        outfile << "-1\n";
    } else {
        for (int digit : common_digits) {
            outfile << digit << " ";
        }
        outfile << "\n";
    }

    // Sort all digits in descending order to form the largest number
    std::sort(all_digits.begin(), all_digits.end(), std::greater<int>());
    for (int digit : all_digits) {
        outfile << digit;
    }
    outfile << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the two numbers `a` and `b` from the file `cifre.in`.
2. **Extracting Digits**: The digits of each number are extracted and stored in sets `digits_a` and `digits_b` to ensure uniqueness.
3. **Finding Common Digits**: The common digits between `a` and `b` are determined by checking for intersections between the two sets.
4. **Outputting Common Digits**: If there are common digits, they are output in ascending order. If there are no common digits, `-1` is output.
5. **Forming the Largest Number**: All digits from both numbers are collected, sorted in descending order, and concatenated to form the largest possible number.
6. **Writing Output**: The results are written to the file `cifre.out`.

This solution is efficient and ensures that the operations are performed in optimal time, adhering to the constraints provided.
---------- user ----------


Program result did not match expected result.
Input data:
```
2115 29025
```
Expected output:
```
2 5
955222110
```
Found output:
```
2 5 
955222110
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found output is due to an extra space at the end of the first line in the output. This is a common issue when handling output formatting, especially when dealing with sequences of values.

To address this, we need to ensure that there is no trailing space after the last digit on the first line. Here is the corrected C++ solution:

```cpp
#include <fstream>
#include <algorithm>
#include <set>
#include <vector>

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");

    long long a, b;
    infile >> a >> b;

    std::set<int> digits_a, digits_b, common_digits;
    std::vector<int> all_digits;

    // Extract digits from a
    long long temp = a;
    while (temp > 0) {
        digits_a.insert(temp % 10);
        all_digits.push_back(temp % 10);
        temp /= 10;
    }

    // Extract digits from b
    temp = b;
    while (temp > 0) {
        digits_b.insert(temp % 10);
        all_digits.push_back(temp % 10);
        temp /= 10;
    }

    // Find common digits
    for (int digit : digits_a) {
        if (digits_b.find(digit) != digits_b.end()) {
            common_digits.insert(digit);
        }
    }

    // Output common digits
    if (common_digits.empty()) {
        outfile << "-1\n";
    } else {
        bool first = true;
        for (int digit : common_digits) {
            if (!first) {
                outfile << " ";
            }
            outfile << digit;
            first = false;
        }
        outfile << "\n";
    }

    // Sort all digits in descending order to form the largest number
    std::sort(all_digits.begin(), all_digits.end(), std::greater<int>());
    for (int digit : all_digits) {
        outfile << digit;
    }
    outfile << "\n";

    return 0;
}
```

### Explanation of Changes:
1. **Handling Trailing Space**: In the section where common digits are output, a boolean flag `first` is used to ensure that spaces are only added between digits and not after the last digit.
2. **Output Formatting**: The logic for outputting the common digits ensures that the digits are printed in ascending order without any trailing spaces.

This solution ensures that the output matches the expected format exactly, addressing the issue of the extra space at the end of the first line.
