---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct Duck {
    int x, y, direction;
};

int main() {
    ifstream fin("pelican.in");
    ofstream fout("pelican.out");

    int N, P, K;
    fin >> N >> P >> K;

    vector<Duck> ducks(P);
    for (int i = 0; i < P; ++i) {
        fin >> ducks[i].x >> ducks[i].y >> ducks[i].direction;
    }

    vector<pair<char, int>> commands(K);
    for (int i = 0; i < K; ++i) {
        fin >> commands[i].first >> commands[i].second;
    }

    // Direction vectors for North, East, South, West
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, 1, 0, -1};

    for (const auto& command : commands) {
        char type = command.first;
        int value = command.second;

        for (auto& duck : ducks) {
            if (type == 'A') {
                int steps = value;
                int dir = duck.direction - 1;
                duck.x = (duck.x + steps * dx[dir] + N) % N;
                duck.y = (duck.y + steps * dy[dir] + N) % N;
            } else if (type == 'R') {
                duck.direction = (duck.direction + value - 1) % 4 + 1;
            } else if (type == 'Z') {
                duck.x = value / N;
                duck.y = value % N;
            }
        }
    }

    for (const auto& duck : ducks) {
        fout << duck.x << " " << duck.y << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Reading Input**: We read the values of `N`, `P`, and `K` from the input file. Then, we read the initial positions and directions of the ducks into a vector of `Duck` structures. Finally, we read the commands into a vector of pairs.

2. **Direction Vectors**: We define arrays `dx` and `dy` to represent the changes in coordinates for each direction (North, East, South, West).

3. **Processing Commands**: We iterate over each command and apply it to all ducks:
   - **Advance (`A`)**: We update the position of the duck based on its current direction and the number of steps. We use modulo operation to handle wrapping around the edges of the grid.
   - **Rotate (`R`)**: We update the direction of the duck by adding the rotation value and using modulo operation to ensure the direction stays within the valid range.
   - **Jump (`Z`)**: We directly set the position of the duck based on the given value.

4. **Writing Output**: We write the final positions of the ducks to the output file.

This solution ensures efficient processing of commands and handles the wrapping around the grid edges correctly.
