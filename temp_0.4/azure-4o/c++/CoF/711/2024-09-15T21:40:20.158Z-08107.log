---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution to the challenge:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

void justifyText(const std::vector<std::string>& words, int MAX, std::ofstream& out) {
    int n = words.size();
    int i = 0;

    while (i < n) {
        int lineLength = words[i].length();
        int j = i + 1;
        while (j < n && lineLength + 1 + words[j].length() <= MAX) {
            lineLength += 1 + words[j].length();
            j++;
        }

        int spaces = MAX - lineLength;
        int gaps = j - i - 1;

        if (gaps == 0 || j == n) {
            for (int k = i; k < j; k++) {
                if (k > i) out << " ";
                out << words[k];
            }
            out << std::string(MAX - lineLength, ' ') << "\n";
        } else {
            int extraSpaces = spaces / gaps;
            int extra = spaces % gaps;

            for (int k = i; k < j; k++) {
                if (k > i) {
                    out << std::string(1 + extraSpaces + (extra-- > 0 ? 1 : 0), ' ');
                }
                out << words[k];
            }
            out << "\n";
        }

        i = j;
    }
}

int main() {
    std::ifstream in("text.in");
    std::ofstream out("text.out");

    if (!in.is_open() || !out.is_open()) {
        std::cerr << "Error opening file(s)" << std::endl;
        return 1;
    }

    int MAX;
    in >> MAX;
    in.ignore();

    std::string line;
    std::vector<std::string> words;

    while (std::getline(in, line)) {
        std::istringstream iss(line);
        std::string word;
        while (iss >> word) {
            words.push_back(word);
        }

        justifyText(words, MAX, out);
        words.clear();
    }

    in.close();
    out.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the maximum line length `MAX` from the first line of `text.in` and then reads the entire text.
2. **Processing Each Line**: Each line is split into words, which are stored in a vector.
3. **Justification Logic**:
   - The function `justifyText` processes the words to fit them into lines of length `MAX`.
   - It calculates the number of spaces needed to justify the text and distributes the spaces as evenly as possible, giving extra spaces to the gaps at the beginning of the line.
   - The last line of each paragraph is left-aligned.
4. **Writing Output**: The justified lines are written to `text.out`.

This solution ensures that the text is aligned both left and right as per the requirements. The use of `ifstream` and `ofstream` for file operations ensures that the program reads from `text.in` and writes to `text.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana are mere.       
Ion  are  multe pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found results is due to the handling of trailing spaces in the last line of each paragraph. The last line should not be padded with trailing spaces to reach the maximum line length, but the current implementation does so.

To address this, we need to ensure that the last line of each paragraph is left-aligned without adding trailing spaces. Additionally, we need to handle empty lines correctly.

Here's the revised solution:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

void justifyText(const std::vector<std::string>& words, int MAX, std::ofstream& out) {
    int n = words.size();
    int i = 0;

    while (i < n) {
        int lineLength = words[i].length();
        int j = i + 1;
        while (j < n && lineLength + 1 + words[j].length() <= MAX) {
            lineLength += 1 + words[j].length();
            j++;
        }

        int spaces = MAX - lineLength;
        int gaps = j - i - 1;

        if (gaps == 0 || j == n) {
            for (int k = i; k < j; k++) {
                if (k > i) out << " ";
                out << words[k];
            }
            out << "\n";
        } else {
            int extraSpaces = spaces / gaps;
            int extra = spaces % gaps;

            for (int k = i; k < j; k++) {
                if (k > i) {
                    out << std::string(1 + extraSpaces + (extra-- > 0 ? 1 : 0), ' ');
                }
                out << words[k];
            }
            out << "\n";
        }

        i = j;
    }
}

int main() {
    std::ifstream in("text.in");
    std::ofstream out("text.out");

    if (!in.is_open() || !out.is_open()) {
        std::cerr << "Error opening file(s)" << std::endl;
        return 1;
    }

    int MAX;
    in >> MAX;
    in.ignore();

    std::string line;
    std::vector<std::string> words;

    while (std::getline(in, line)) {
        if (line.empty()) {
            out << "\n";
            continue;
        }

        std::istringstream iss(line);
        std::string word;
        while (iss >> word) {
            words.push_back(word);
        }

        justifyText(words, MAX, out);
        words.clear();
    }

    in.close();
    out.close();

    return 0;
}
```

### Explanation of Changes:
1. **Handling Empty Lines**: Added a check to handle empty lines correctly by directly writing a newline character to the output file.
2. **Left-Align Last Line**: Modified the `justifyText` function to ensure that the last line of each paragraph is left-aligned without padding with trailing spaces.
3. **File Handling**: Ensured that the program reads from `text.in` and writes to `text.out` correctly.

### Detailed Steps:
1. **Reading Input**: The program reads the maximum line length `MAX` from the first line of `text.in` and then reads the entire text line by line.
2. **Processing Each Line**: Each line is split into words, which are stored in a vector. If a line is empty, it is directly written to the output file.
3. **Justification Logic**:
   - The function `justifyText` processes the words to fit them into lines of length `MAX`.
   - It calculates the number of spaces needed to justify the text and distributes the spaces as evenly as possible, giving extra spaces to the gaps at the beginning of the line.
   - The last line of each paragraph is left-aligned without adding trailing spaces.
4. **Writing Output**: The justified lines are written to `text.out`.

This revised solution ensures that the text is aligned both left and right as per the requirements, and handles empty lines correctly.
