---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

void justifyLine(const std::vector<std::string>& words, int maxLen, std::ofstream& outFile) {
    int totalChars = 0;
    for (const auto& word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxLen - totalChars;
    int gaps = words.size() - 1;
    if (gaps == 0) {
        outFile << words[0] << '\n';
        return;
    }

    int minSpaces = totalSpaces / gaps;
    int extraSpaces = totalSpaces % gaps;

    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < words.size() - 1) {
            for (int j = 0; j < minSpaces; ++j) {
                outFile << ' ';
            }
            if (extraSpaces > 0) {
                outFile << ' ';
                --extraSpaces;
            }
        }
    }
    outFile << '\n';
}

void processParagraph(const std::string& paragraph, int maxLen, std::ofstream& outFile) {
    std::istringstream iss(paragraph);
    std::vector<std::string> words;
    std::string word;
    int currentLen = 0;

    while (iss >> word) {
        if (currentLen + word.length() + words.size() > maxLen) {
            justifyLine(words, maxLen, outFile);
            words.clear();
            currentLen = 0;
        }
        words.push_back(word);
        currentLen += word.length();
    }

    if (!words.empty()) {
        for (size_t i = 0; i < words.size(); ++i) {
            outFile << words[i];
            if (i < words.size() - 1) {
                outFile << ' ';
            }
        }
        outFile << '\n';
    }
}

int main() {
    std::ifstream inFile("text.in");
    std::ofstream outFile("text.out");

    if (!inFile || !outFile) {
        std::cerr << "Error opening file(s)." << std::endl;
        return 1;
    }

    int maxLen;
    inFile >> maxLen;
    inFile.ignore();

    std::string line;
    std::string paragraph;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!paragraph.empty()) {
                processParagraph(paragraph, maxLen, outFile);
                paragraph.clear();
            }
            outFile << '\n';
        } else {
            if (!paragraph.empty()) {
                paragraph += ' ';
            }
            paragraph += line;
        }
    }

    if (!paragraph.empty()) {
        processParagraph(paragraph, maxLen, outFile);
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation

1. **Reading Input**: The program reads the maximum line length `MAX` from the first line of the input file `text.in`. The rest of the lines are read as text.

2. **Processing Paragraphs**: The program processes each paragraph separately. Paragraphs are separated by empty lines.

3. **Justifying Lines**: For each paragraph, the program splits it into words and tries to fit as many words as possible into each line without exceeding the `MAX` length. If a line is filled, it is justified by distributing spaces evenly between words, with extra spaces added to the leftmost gaps.

4. **Writing Output**: The justified lines are written to the output file `text.out`.

### Example

For the given example:
```
text.in
20
Vasile are multe bomboane bune.
```

The output will be:
```
text.out
Vasile   are   multe
bomboane bune.
```

This solution ensures that the text is justified correctly according to the specified rules and handles edge cases like empty lines and paragraphs efficiently.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found results is due to the handling of paragraphs and line breaks. The initial solution concatenates lines into a single paragraph and then processes it, which can lead to incorrect line breaks and spacing. The expected behavior is to handle each line independently and preserve the original line breaks.

To address this, we need to modify the solution to:
1. Process each line independently.
2. Preserve the original line breaks.
3. Ensure that words are justified correctly within the constraints of the given `MAX` length.

Here is the corrected and improved solution:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

void justifyLine(const std::vector<std::string>& words, int maxLen, std::ofstream& outFile) {
    int totalChars = 0;
    for (const auto& word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxLen - totalChars;
    int gaps = words.size() - 1;
    if (gaps == 0) {
        outFile << words[0] << '\n';
        return;
    }

    int minSpaces = totalSpaces / gaps;
    int extraSpaces = totalSpaces % gaps;

    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < words.size() - 1) {
            for (int j = 0; j < minSpaces; ++j) {
                outFile << ' ';
            }
            if (extraSpaces > 0) {
                outFile << ' ';
                --extraSpaces;
            }
        }
    }
    outFile << '\n';
}

void processLine(const std::string& line, int maxLen, std::ofstream& outFile) {
    std::istringstream iss(line);
    std::vector<std::string> words;
    std::string word;
    int currentLen = 0;

    while (iss >> word) {
        if (currentLen + word.length() + words.size() > maxLen) {
            justifyLine(words, maxLen, outFile);
            words.clear();
            currentLen = 0;
        }
        words.push_back(word);
        currentLen += word.length();
    }

    if (!words.empty()) {
        for (size_t i = 0; i < words.size(); ++i) {
            outFile << words[i];
            if (i < words.size() - 1) {
                outFile << ' ';
            }
        }
        outFile << '\n';
    }
}

int main() {
    std::ifstream inFile("text.in");
    std::ofstream outFile("text.out");

    if (!inFile || !outFile) {
        std::cerr << "Error opening file(s)." << std::endl;
        return 1;
    }

    int maxLen;
    inFile >> maxLen;
    inFile.ignore();

    std::string line;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            outFile << '\n';
        } else {
            processLine(line, maxLen, outFile);
        }
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation of Changes

1. **Processing Each Line Independently**: The `processLine` function processes each line independently, ensuring that each line is justified correctly without concatenating multiple lines into a single paragraph.

2. **Preserving Original Line Breaks**: The solution now preserves the original line breaks by checking for empty lines and writing them directly to the output file.

3. **Justifying Words Correctly**: The `justifyLine` function is used to justify words within the constraints of the given `MAX` length, ensuring that spaces are distributed evenly between words.

### Example

For the given example:
```
text.in
20
Ana are mere.
Ion are multe pere galbene?
```

The output will be:
```
text.out
Ana are mere.
Ion  are  multe pere
galbene?
```

This solution ensures that the text is justified correctly according to the specified rules and handles edge cases like empty lines and paragraphs efficiently.
