---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

bool is_valoare_panta(int number) {
    std::string str = std::to_string(number);
    bool increasing = true, decreasing = true;
    for (size_t i = 1; i < str.size(); ++i) {
        if (str[i] < str[i - 1]) increasing = false;
        if (str[i] > str[i - 1]) decreasing = false;
    }
    return increasing || decreasing;
}

int main() {
    std::ifstream in("valori-panta.in");
    std::ofstream out("valori-panta.out");

    int N;
    in >> N;

    std::vector<int> numbers(N);
    for (int i = 0; i < N; ++i) {
        in >> numbers[i];
    }

    std::vector<int> valori_panta;
    std::vector<int> positions;

    for (int i = 0; i < N; ++i) {
        if (is_valoare_panta(numbers[i])) {
            valori_panta.push_back(numbers[i]);
            positions.push_back(i + 1);
        }
    }

    if (valori_panta.empty()) {
        out << "0\nNU EXISTA\nNU EXISTA\n";
    } else {
        out << valori_panta.size() << "\n";

        auto max_it = std::max_element(valori_panta.begin(), valori_panta.end());
        auto min_it = std::min_element(valori_panta.begin(), valori_panta.end());

        out << *max_it;
        for (size_t i = 0; i < valori_panta.size(); ++i) {
            if (valori_panta[i] == *max_it) {
                out << " " << positions[i];
            }
        }
        out << "\n";

        out << *min_it;
        for (size_t i = 0; i < valori_panta.size(); ++i) {
            if (valori_panta[i] == *min_it) {
                out << " " << positions[i];
            }
        }
        out << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the input from the file `valori-panta.in`.
2. **Checking for Valoare-Panta**: The function `is_valoare_panta` checks if a number is a "valoare-panta" by converting it to a string and checking if its digits are in increasing or decreasing order.
3. **Processing the Vector**: The program iterates through the vector, checks each number, and stores the "valoare-panta" numbers and their positions.
4. **Output**: The program writes the results to `valori-panta.out`. If there are no "valoare-panta" numbers, it writes "NU EXISTA". Otherwise, it writes the count, the maximum "valoare-panta" with its positions, and the minimum "valoare-panta" with its positions.

This solution is efficient and should work within the given constraints.
