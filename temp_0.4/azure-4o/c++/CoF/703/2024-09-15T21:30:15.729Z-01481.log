---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <limits>
#include <algorithm>

bool is_valori_panta(const std::string& num) {
    bool increasing = true, decreasing = true;
    for (size_t i = 1; i < num.size(); ++i) {
        if (num[i] < num[i - 1]) increasing = false;
        if (num[i] > num[i - 1]) decreasing = false;
    }
    return increasing || decreasing;
}

int main() {
    std::ifstream infile("valori-panta.in");
    std::ofstream outfile("valori-panta.out");

    int N;
    infile >> N;
    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        infile >> values[i];
    }

    std::vector<int> valori_panta;
    std::vector<int> positions;

    for (int i = 0; i < N; ++i) {
        if (is_valori_panta(std::to_string(values[i]))) {
            valori_panta.push_back(values[i]);
            positions.push_back(i + 1); // 1-based index
        }
    }

    if (valori_panta.empty()) {
        outfile << "0\nNU EXISTA\nNU EXISTA\n";
    } else {
        int max_val = *std::max_element(valori_panta.begin(), valori_panta.end());
        int min_val = *std::min_element(valori_panta.begin(), valori_panta.end());

        outfile << valori_panta.size() << "\n";

        outfile << max_val;
        for (size_t i = 0; i < valori_panta.size(); ++i) {
            if (valori_panta[i] == max_val) {
                outfile << " " << positions[i];
            }
        }
        outfile << "\n";

        outfile << min_val;
        for (size_t i = 0; i < valori_panta.size(); ++i) {
            if (valori_panta[i] == min_val) {
                outfile << " " << positions[i];
            }
        }
        outfile << "\n";
    }

    return 0;
}
```

### Explanation
1. **Reading Input**: We read the input from the file `valori-panta.in` using `ifstream`.
2. **Checking for valori-panta**: We create a function `is_valori_panta` that checks if a number is valori-panta by converting it to a string and then checking if the digits are in increasing or decreasing order.
3. **Processing the Vector**: We iterate through the vector, checking each number with `is_valori_panta`. If a number is valori-panta, we store it and its position.
4. **Finding Max and Min valori-panta**: We use `std::max_element` and `std::min_element` to find the maximum and minimum valori-panta.
5. **Writing Output**: We write the results to the file `valori-panta.out`.

This solution is efficient and should handle the input size constraints effectively.
