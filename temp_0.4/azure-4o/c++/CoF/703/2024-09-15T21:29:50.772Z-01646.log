---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>

// Function to check if a number is a "valori-panta"
bool isValoriPanta(int num) {
    std::string str = std::to_string(num);
    bool increasing = true, decreasing = true;

    for (size_t i = 1; i < str.size(); ++i) {
        if (str[i] < str[i - 1]) {
            increasing = false;
        }
        if (str[i] > str[i - 1]) {
            decreasing = false;
        }
    }

    return increasing || decreasing;
}

int main() {
    std::ifstream infile("valori-panta.in");
    std::ofstream outfile("valori-panta.out");

    int N;
    infile >> N;

    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        infile >> values[i];
    }

    int count = 0;
    int minValoriPanta = INT_MAX;
    int maxValoriPanta = INT_MIN;
    std::vector<int> minPositions, maxPositions;

    for (int i = 0; i < N; ++i) {
        if (isValoriPanta(values[i])) {
            count++;
            if (values[i] < minValoriPanta) {
                minValoriPanta = values[i];
                minPositions.clear();
                minPositions.push_back(i + 1);
            } else if (values[i] == minValoriPanta) {
                minPositions.push_back(i + 1);
            }

            if (values[i] > maxValoriPanta) {
                maxValoriPanta = values[i];
                maxPositions.clear();
                maxPositions.push_back(i + 1);
            } else if (values[i] == maxValoriPanta) {
                maxPositions.push_back(i + 1);
            }
        }
    }

    if (count == 0) {
        outfile << "NU EXISTA\n";
    } else {
        outfile << count << "\n";
        outfile << maxValoriPanta;
        for (int pos : maxPositions) {
            outfile << " " << pos;
        }
        outfile << "\n";
        outfile << minValoriPanta;
        for (int pos : minPositions) {
            outfile << " " << pos;
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - Read the number of elements `N`.
   - Read the vector of `N` values.

2. **Checking for "valori-panta":**
   - A helper function `isValoriPanta` checks if a number is a "valori-panta" by verifying if its digits are in increasing or decreasing order.

3. **Processing Values:**
   - Iterate through the vector and count how many values are "valori-panta".
   - Track the minimum and maximum "valori-panta" and their positions.

4. **Output Results:**
   - If no "valori-panta" is found, output "NU EXISTA".
   - Otherwise, output the count, the maximum "valori-panta" with its positions, and the minimum "valori-panta" with its positions.

### Efficiency:
- The solution processes each number in the vector, checking its digits in linear time relative to the number of digits (constant time since the maximum number of digits is 8).
- The overall complexity is O(N), making it efficient for the given constraints.
