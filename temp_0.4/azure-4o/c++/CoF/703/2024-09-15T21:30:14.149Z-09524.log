---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <climits>

bool is_valoare_panta(int num) {
    std::string s = std::to_string(num);
    bool increasing = true, decreasing = true;
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] < s[i - 1]) increasing = false;
        if (s[i] > s[i - 1]) decreasing = false;
    }
    return increasing || decreasing;
}

int main() {
    std::ifstream in("valori-panta.in");
    std::ofstream out("valori-panta.out");

    int N;
    in >> N;
    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        in >> values[i];
    }

    std::vector<int> panta_values;
    std::vector<int> panta_positions;

    for (int i = 0; i < N; ++i) {
        if (is_valoare_panta(values[i])) {
            panta_values.push_back(values[i]);
            panta_positions.push_back(i + 1);
        }
    }

    if (panta_values.empty()) {
        out << "0\nNU EXISTA\nNU EXISTA\n";
    } else {
        int min_panta = INT_MAX, max_panta = INT_MIN;
        std::vector<int> min_positions, max_positions;

        for (size_t i = 0; i < panta_values.size(); ++i) {
            if (panta_values[i] < min_panta) {
                min_panta = panta_values[i];
                min_positions.clear();
                min_positions.push_back(panta_positions[i]);
            } else if (panta_values[i] == min_panta) {
                min_positions.push_back(panta_positions[i]);
            }

            if (panta_values[i] > max_panta) {
                max_panta = panta_values[i];
                max_positions.clear();
                max_positions.push_back(panta_positions[i]);
            } else if (panta_values[i] == max_panta) {
                max_positions.push_back(panta_positions[i]);
            }
        }

        out << panta_values.size() << '\n';
        out << max_panta;
        for (int pos : max_positions) {
            out << ' ' << pos;
        }
        out << '\n';
        out << min_panta;
        for (int pos : min_positions) {
            out << ' ' << pos;
        }
        out << '\n';
    }

    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read using `ifstream` and stored in a vector.
2. **Checking for Valoare-Panta**: A helper function `is_valoare_panta` checks if a number's digits are in increasing or decreasing order.
3. **Processing Values**: Iterate through the vector to find all valoare-panta values and their positions.
4. **Finding Min and Max Valoare-Panta**: Track the minimum and maximum valoare-panta values and their positions.
5. **Output Results**: Write the results to `valori-panta.out` using `ofstream`.

This solution is efficient and should perform well within the given constraints.
