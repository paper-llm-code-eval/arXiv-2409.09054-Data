---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to convert the given decimal number into a fraction and then find two numbers \(a\) and \(b\) such that the fraction \(q = \frac{a}{b}\) and \(|a - b|\) is minimized. Here's a step-by-step breakdown of the solution:

1. **Read Input:**
   - Read the number of digits in the integer part (`ni`) and the fractional part (`nz`).
   - Read the digits of the integer part and the fractional part.

2. **Construct the Decimal Number:**
   - Combine the integer and fractional parts to form the decimal number \(q\).

3. **Convert Decimal to Fraction:**
   - Convert the decimal number into a fraction. This can be done by considering the decimal number as a large integer divided by a power of 10. For example, if the number is `0.375`, it can be represented as \( \frac{375}{1000} \).

4. **Simplify the Fraction:**
   - Use the greatest common divisor (GCD) to simplify the fraction.

5. **Output the Result:**
   - Write the simplified numerator and denominator to the output file.

Here's the C++ code to achieve this:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <numeric>

using namespace std;

// Function to calculate GCD
long long gcd(long long a, long long b) {
    while (b != 0) {
        long long t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    ifstream input("numar.in");
    ofstream output("numar.out");

    int ni, nz;
    input >> ni >> nz;

    string integerPart, fractionalPart;
    for (int i = 0; i < ni; ++i) {
        char digit;
        input >> digit;
        integerPart += digit;
    }
    
    for (int i = 0; i < nz; ++i) {
        char digit;
        input >> digit;
        fractionalPart += digit;
    }

    // Construct the full number as a string
    string fullNumber = integerPart + fractionalPart;

    // Convert the number to a long long
    long long numerator = stoll(fullNumber);
    long long denominator = 1;
    for (int i = 0; i < nz; ++i) {
        denominator *= 10;
    }

    // Simplify the fraction
    long long commonDivisor = gcd(numerator, denominator);
    numerator /= commonDivisor;
    denominator /= commonDivisor;

    // Output the result
    output << to_string(numerator).length() << "\n" << numerator << "\n";
    output << to_string(denominator).length() << "\n" << denominator << "\n";

    input.close();
    output.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read the number of digits in the integer part (`ni`) and the fractional part (`nz`).
   - We then read the digits of the integer part and the fractional part, constructing the full number as a string.

2. **Constructing the Full Number:**
   - We concatenate the integer and fractional parts to form a single string representing the full number without the decimal point.

3. **Converting to Fraction:**
   - We convert this string to a long long integer (`numerator`).
   - The denominator is \(10^{nz}\) since we have `nz` digits in the fractional part.

4. **Simplifying the Fraction:**
   - We use the GCD function to simplify the fraction by dividing both the numerator and the denominator by their GCD.

5. **Output:**
   - We write the length of the numerator and the numerator itself.
   - We write the length of the denominator and the denominator itself.

This solution ensures that the fraction is simplified and the output is in the required format, while also being efficient in terms of execution time.
