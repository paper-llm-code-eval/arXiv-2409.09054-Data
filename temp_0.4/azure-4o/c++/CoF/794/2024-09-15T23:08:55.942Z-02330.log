---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the challenge efficiently, we need to convert the given rational number in decimal form into a fraction \( \frac{a}{b} \) such that the absolute difference \( |a - b| \) is minimized. Here's a step-by-step breakdown of the solution:

1. **Reading Input:**
   - Read the number of digits in the integer part (`ni`) and the fractional part (`nz`).
   - Read the digits of the integer part and the fractional part.

2. **Constructing the Decimal Number:**
   - Combine the integer part and the fractional part to form the complete decimal number \( q \).

3. **Forming the Fraction:**
   - The decimal number \( q \) can be represented as \( q = \frac{a}{10^{nz}} \) where \( a \) is the integer formed by concatenating the integer and fractional parts, and \( b = 10^{nz} \).

4. **Simplifying the Fraction:**
   - Simplify the fraction \( \frac{a}{b} \) by dividing both \( a \) and \( b \) by their greatest common divisor (GCD).

5. **Output the Result:**
   - Write the number of digits and the digits of \( a \) and \( b \) to the output file.

Here is the C++ code implementing this logic:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <numeric>

int main() {
    std::ifstream fin("numar.in");
    std::ofstream fout("numar.out");

    int ni, nz;
    fin >> ni >> nz;

    std::string integerPart, fractionalPart;
    char digit;
    
    for (int i = 0; i < ni; ++i) {
        fin >> digit;
        integerPart += digit;
    }

    for (int i = 0; i < nz; ++i) {
        fin >> digit;
        fractionalPart += digit;
    }

    std::string combinedNumber = integerPart + fractionalPart;
    long long a = std::stoll(combinedNumber);
    long long b = 1;
    for (int i = 0; i < nz; ++i) {
        b *= 10;
    }

    long long gcd = std::gcd(a, b);
    a /= gcd;
    b /= gcd;

    fout << std::to_string(a).length() << '\n' << a << '\n';
    fout << std::to_string(b).length() << '\n' << b << '\n';

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input:** 
   - The input is read from `numar.in` using ifstream. We read `ni` and `nz` first, followed by the digits of the integer and fractional parts.

2. **Constructing the Decimal Number:**
   - We concatenate the digits of the integer part and the fractional part to form the combined number.

3. **Forming the Fraction:**
   - The combined number is converted to a long long integer `a`.
   - `b` is calculated as \( 10^{nz} \).

4. **Simplifying the Fraction:**
   - The GCD of `a` and `b` is computed using `std::gcd`.
   - Both `a` and `b` are divided by their GCD to simplify the fraction.

5. **Output the Result:**
   - The number of digits and the digits of `a` and `b` are written to `numar.out` using ofstream.

This solution ensures efficient reading, processing, and writing of data, adhering to the constraints and requirements of the problem.
