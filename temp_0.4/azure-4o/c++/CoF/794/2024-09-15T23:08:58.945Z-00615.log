---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to convert the given rational number \( q \) from its decimal representation into a fraction \( \frac{a}{b} \) such that the absolute difference \( |a - b| \) is minimized. Here’s a step-by-step approach to achieve this:

1. **Read Input**: Read the number of digits in the integer and fractional parts, and then read the digits themselves.
2. **Construct the Number**: Combine the integer and fractional parts to form the complete number \( q \).
3. **Convert to Fraction**: Convert the decimal number \( q \) into a fraction \( \frac{a}{b} \) by considering the fractional part as a numerator over a power of 10.
4. **Simplify the Fraction**: Use the greatest common divisor (GCD) to simplify the fraction.
5. **Output the Result**: Write the results to the output file.

Here’s the C++ code that implements the above steps:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <numeric> // For std::gcd

int main() {
    std::ifstream fin("numar.in");
    std::ofstream fout("numar.out");

    int ni, nz;
    fin >> ni >> nz;

    std::vector<int> integerPart(ni);
    for (int i = 0; i < ni; ++i) {
        fin >> integerPart[i];
    }

    std::vector<int> fractionalPart(nz);
    for (int i = 0; i < nz; ++i) {
        fin >> fractionalPart[i];
    }

    // Construct the integer part of the number
    long long integerPartValue = 0;
    for (int digit : integerPart) {
        integerPartValue = integerPartValue * 10 + digit;
    }

    // Construct the fractional part of the number
    long long fractionalPartValue = 0;
    long long fractionalDenominator = 1;
    for (int digit : fractionalPart) {
        fractionalPartValue = fractionalPartValue * 10 + digit;
        fractionalDenominator *= 10;
    }

    // Combine integer and fractional parts
    long long numerator = integerPartValue * fractionalDenominator + fractionalPartValue;
    long long denominator = fractionalDenominator;

    // Simplify the fraction
    long long gcd = std::gcd(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;

    // Output the results
    fout << std::to_string(numerator).size() << "\n" << numerator << "\n";
    fout << std::to_string(denominator).size() << "\n" << denominator << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the number of digits in the integer and fractional parts, then read the digits themselves into vectors.
2. **Constructing the Number**: We convert the integer and fractional parts into their respective numeric values.
3. **Combining Parts**: We combine the integer and fractional parts into a single numerator and use a power of 10 as the denominator.
4. **Simplifying the Fraction**: We use the GCD to simplify the fraction.
5. **Outputting the Result**: We write the size and value of the numerator and denominator to the output file.

This solution is efficient and should work well within the given constraints.
