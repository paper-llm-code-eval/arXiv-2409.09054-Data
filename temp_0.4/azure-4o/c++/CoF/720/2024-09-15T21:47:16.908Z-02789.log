---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to find the largest square size \( L \) that can evenly divide both \( M \) and \( N \). This \( L \) will be the greatest common divisor (GCD) of \( M \) and \( N \). Once we have \( L \), the number of such squares will be \( \frac{M \cdot N}{L^2} \).

Here is the step-by-step approach:
1. Read the input values \( M \) and \( N \) from the file `tort.in`.
2. Compute the GCD of \( M \) and \( N \) to get \( L \).
3. Calculate the number of squares as \( \frac{M \cdot N}{L^2} \).
4. Write the results to the file `tort.out`.

Now, let's implement this in C++:

```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");

    int M, N;
    infile >> M >> N;

    int L = std::gcd(M, N);
    int num_squares = (M / L) * (N / L);

    outfile << num_squares << " " << L << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `std::ifstream` to read from `tort.in` and `std::ofstream` to write to `tort.out`.
2. **Computing GCD**: The `std::gcd` function from the C++ standard library computes the greatest common divisor of \( M \) and \( N \).
3. **Calculating Number of Squares**: The number of squares is calculated by dividing both dimensions by the GCD and then multiplying the results.
4. **Writing Output**: We write the number of squares and the size of each square to `tort.out`.

This solution is efficient with a time complexity of \( O(\log(\min(M, N))) \) due to the GCD computation, and it handles the constraints \( 1 \leq M, N \leq 10,000 \) comfortably.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:11:18: error: 'gcd' is not a member of 'std'
   11 |     int L = std::gcd(M, N);
      |                  ^~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `std::gcd` function is not recognized. This function is available in C++17 and later, so we need to ensure that we are using the correct standard. Additionally, we should include the necessary headers for file I/O and algorithm functions.

Here's the corrected version of the solution:

```cpp
#include <fstream>
#include <algorithm> // For std::gcd
#include <numeric>   // For std::gcd in some environments

int main() {
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");

    int M, N;
    infile >> M >> N;

    int L = std::gcd(M, N);
    int num_squares = (M / L) * (N / L);

    outfile << num_squares << " " << L << std::endl;

    return 0;
}
```

### Explanation of the Fix:
1. **Include Headers**: Added `#include <numeric>` to ensure that `std::gcd` is recognized in environments where it is provided by this header.
2. **C++ Standard**: Ensure that the code is compiled with a C++17 or later standard. This can usually be done with a compiler flag such as `-std=c++17` for g++ or clang++.

### Compilation Command:
To compile the program, use a command like:
```sh
g++ -std=c++17 -o tort main.cpp
```

This should resolve the compilation issue and ensure that the program runs correctly.
