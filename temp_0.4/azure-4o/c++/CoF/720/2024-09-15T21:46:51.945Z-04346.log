---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of dividing a rectangular cake of dimensions \(M \times N\) into the minimum number of square portions of the same size, we need to determine the largest possible size \(L\) of the square that can fit into both dimensions. This is equivalent to finding the greatest common divisor (GCD) of \(M\) and \(N\).

Once we have the GCD, the number of square portions required will be \(\frac{M \times N}{L^2}\).

Let's implement this in C++:

```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream fin("tort.in");
    std::ofstream fout("tort.out");

    int M, N;
    fin >> M >> N;

    // Calculate the greatest common divisor (GCD) of M and N
    int L = std::gcd(M, N);

    // Calculate the number of square portions
    int numPortions = (M / L) * (N / L);

    // Output the result
    fout << numPortions << " " << L << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read from `tort.in`.
2. **Calculating GCD**: We use the `std::gcd` function from the C++ standard library to find the greatest common divisor of \(M\) and \(N\).
3. **Calculating Number of Portions**: The number of square portions is calculated by dividing both dimensions \(M\) and \(N\) by the GCD \(L\) and then multiplying the results.
4. **Writing Output**: We use `ofstream` to write the results to `tort.out`.

This solution leverages efficient I/O operations and the built-in GCD function to ensure fast execution.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:12:18: error: 'gcd' is not a member of 'std'
   12 |     int L = std::gcd(M, N);
      |                  ^~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `std::gcd` function is not recognized. This is likely because the `std::gcd` function is available in C++17 and later. To ensure compatibility, we need to include the correct header and specify the C++17 standard during compilation.

Here is the corrected code:

```cpp
#include <fstream>
#include <algorithm> // For std::gcd
#include <numeric>   // For std::gcd in some older compilers

int main() {
    std::ifstream fin("tort.in");
    std::ofstream fout("tort.out");

    int M, N;
    fin >> M >> N;

    // Calculate the greatest common divisor (GCD) of M and N
    int L = std::gcd(M, N);

    // Calculate the number of square portions
    int numPortions = (M / L) * (N / L);

    // Output the result
    fout << numPortions << " " << L << "\n";

    return 0;
}
```

### Explanation:
1. **Include Correct Headers**: Ensure that both `<algorithm>` and `<numeric>` headers are included. The `std::gcd` function is defined in `<numeric>`, but some compilers might also include it in `<algorithm>`.
2. **Using C++17**: Make sure to compile the code with the C++17 standard or later. For example, if you are using `g++`, you can compile with the `-std=c++17` flag.

### Compilation Command:
If you are using `g++` to compile the program, use the following command:
```sh
g++ -std=c++17 -o tort main.cpp
```

This command ensures that the code is compiled with C++17 standard, which supports `std::gcd`.

With these changes, the program should compile and run correctly.
