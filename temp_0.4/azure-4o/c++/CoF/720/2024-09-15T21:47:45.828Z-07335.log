---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to determine the largest possible square size \( L \) that can fit into both dimensions \( M \) and \( N \) of the rectangular cake. This size \( L \) will be the greatest common divisor (GCD) of \( M \) and \( N \). Once we have \( L \), the number of such squares will be given by \((M \times N) / (L \times L)\).

Here's the step-by-step approach:

1. Read the dimensions \( M \) and \( N \) from the input file.
2. Compute the GCD of \( M \) and \( N \) to find the size \( L \) of the largest possible square.
3. Calculate the number of such squares using the formula \((M \times N) / (L \times L)\).
4. Write the results to the output file.

Here is the C++ code that implements this solution:

```cpp
#include <fstream>
#include <algorithm>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");

    int M, N;
    infile >> M >> N;

    int L = gcd(M, N);
    int num_squares = (M * N) / (L * L);

    outfile << num_squares << " " << L << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `std::ifstream` to read the dimensions \( M \) and \( N \) from `tort.in`.
2. **GCD Calculation**: The `gcd` function computes the greatest common divisor using the Euclidean algorithm.
3. **Number of Squares**: We calculate the number of squares by dividing the area of the rectangle \( M \times N \) by the area of one square \( L \times L \).
4. **Writing Output**: We use `std::ofstream` to write the result (number of squares and the size of the square) to `tort.out`.

This solution ensures efficient computation and correct handling of the input and output as specified.
