---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tnia.in` and write to `tnia.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă o matrice **binară** cu $n$ coloane și $m$ linii. Coloanele sunt numerotate de la stânga la dreapta cu valori de la $1$ la $n$, iar liniile sunt numerotate **de jos în sus** cu valori de la $1$ la $m$.

Matricea dată are o formă particulară, astfel că pentru fiecare coloană $i$ de la $1$ la $n$ toate elementele matricei de pe coloana respectivă au valoarea $1$ pentru toate liniile cuprinse în intervalul $[1, h_i]$ și în rest valoarea $0$. Valorile $h_i$ sunt numere naturale date în ordine crescătoare $(h_{i-1} \leq h_i$, $1 \leq i \leq n$).

# Cerință
Să se răspundă la $q$ întrebări de forma: dându-se numerele $A$, $B$, $C$, $D$ se cere suma elementelor din submatricea determinată de zona dreptunghiulară având colțul stânga-jos în coloana $A$ și linia $B$, iar colțul dreapta-sus în coloana $C$ și linia $D$.

# Date de intrare
Fișierul de intrare este `tnia.in`.
- pe prima linie se găsesc două numere naturale $n$ și $m$ despărțite printr-un spațiu, cu semnificația de mai sus;
- pe a doua linie sunt cele $n$ elemente $h_i$ ale vectorului despărțite prin câte un spațiu;
- pe a treia linie este un număr natural $q$ ce reprezintă numărul de întrebări;
- pe următoarele $q$ linii se găsesc câte 4 numere $A$, $B$, $C$, $D$ cu semnificația de mai sus, despărțite prin câte un spațiu.

# Date de ieşire
Fișierul de ieșire `tnia.out` va conține $q$ linii reprezentând răspunsul pentru fiecare întrebare.

# Restricţii și precizări
- $0 \leq h_i \leq m$
- $1 \leq n \leq 100\ 000$
- $1 \leq q \leq 100\ 000$
- $1 \leq m \leq 1\ 000\ 000\ 000$
- Pentru 15 puncte: $n, m, q \leq 100$.
- Pentru alte 16 puncte: $n, m, q \leq 3\ 000$.
- Pentru alte 16 puncte: $n \leq 100\ 000$, $m \leq 1\ 000\ 000\ 000$, $q \leq 100$.
- Pentru rezolvarea corectă a cerinței se acordă 90 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`tnia.in`
```
5 10
2 3 7 8 10
5
1 1 5 10
2 5 4 7
3 2 3 6
3 8 3 10
3 2 3 10
```

`tnia.out`
```
30
6
5
0
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to leverage the specific structure of the matrix and the constraints provided. Here's the step-by-step approach to achieve this:

1. **Read Input Efficiently**: Given the constraints, we need to read the input data efficiently without using standard input/output methods like `cin` and `cout`.

2. **Preprocess the Matrix Information**: Since the matrix has a specific structure where columns have contiguous blocks of 1s from the bottom up to a certain height \( h_i \), we can use this to our advantage.

3. **Answer Queries Efficiently**: For each query, we need to compute the sum of elements in a submatrix defined by the corners \((A, B)\) and \((C, D)\). Given the structure, this can be done by iterating over the columns in the range \([A, C]\) and summing up the number of 1s in the range \([B, D]\) for each column.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("tnia.in");
    std::ofstream fout("tnia.out");

    int n, m;
    fin >> n >> m;

    std::vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        fin >> heights[i];
    }

    int q;
    fin >> q;

    while (q--) {
        int A, B, C, D;
        fin >> A >> B >> C >> D;

        int sum = 0;
        for (int i = A - 1; i <= C - 1; ++i) {
            if (heights[i] >= B) {
                sum += std::min(heights[i], D) - B + 1;
            }
        }

        fout << sum << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - We use `std::ifstream` to read from the file `tnia.in`.
   - We read the dimensions `n` and `m`, followed by the heights of the columns into a vector `heights`.

2. **Processing Queries**:
   - For each query, we read the coordinates \( A, B, C, D \).
   - We initialize a variable `sum` to store the sum of elements in the specified submatrix.
   - We iterate over the columns from \( A \) to \( C \) (adjusted for 0-based indexing).
   - For each column, if the height \( h_i \) is at least \( B \), we add the number of 1s in the range \([B, D]\). This is computed as `std::min(heights[i], D) - B + 1`.

3. **Output**:
   - We use `std::ofstream` to write the results to `tnia.out`.

This approach ensures that we efficiently compute the sum for each query by leveraging the specific structure of the matrix and avoiding unnecessary computations. The complexity is linear with respect to the number of queries and columns, making it suitable for the given constraints.
