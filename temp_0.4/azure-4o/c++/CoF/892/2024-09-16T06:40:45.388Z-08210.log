---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tnia.in` and write to `tnia.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă o matrice **binară** cu $n$ coloane și $m$ linii. Coloanele sunt numerotate de la stânga la dreapta cu valori de la $1$ la $n$, iar liniile sunt numerotate **de jos în sus** cu valori de la $1$ la $m$.

Matricea dată are o formă particulară, astfel că pentru fiecare coloană $i$ de la $1$ la $n$ toate elementele matricei de pe coloana respectivă au valoarea $1$ pentru toate liniile cuprinse în intervalul $[1, h_i]$ și în rest valoarea $0$. Valorile $h_i$ sunt numere naturale date în ordine crescătoare $(h_{i-1} \leq h_i$, $1 \leq i \leq n$).

# Cerință
Să se răspundă la $q$ întrebări de forma: dându-se numerele $A$, $B$, $C$, $D$ se cere suma elementelor din submatricea determinată de zona dreptunghiulară având colțul stânga-jos în coloana $A$ și linia $B$, iar colțul dreapta-sus în coloana $C$ și linia $D$.

# Date de intrare
Fișierul de intrare este `tnia.in`.
- pe prima linie se găsesc două numere naturale $n$ și $m$ despărțite printr-un spațiu, cu semnificația de mai sus;
- pe a doua linie sunt cele $n$ elemente $h_i$ ale vectorului despărțite prin câte un spațiu;
- pe a treia linie este un număr natural $q$ ce reprezintă numărul de întrebări;
- pe următoarele $q$ linii se găsesc câte 4 numere $A$, $B$, $C$, $D$ cu semnificația de mai sus, despărțite prin câte un spațiu.

# Date de ieşire
Fișierul de ieșire `tnia.out` va conține $q$ linii reprezentând răspunsul pentru fiecare întrebare.

# Restricţii și precizări
- $0 \leq h_i \leq m$
- $1 \leq n \leq 100\ 000$
- $1 \leq q \leq 100\ 000$
- $1 \leq m \leq 1\ 000\ 000\ 000$
- Pentru 15 puncte: $n, m, q \leq 100$.
- Pentru alte 16 puncte: $n, m, q \leq 3\ 000$.
- Pentru alte 16 puncte: $n \leq 100\ 000$, $m \leq 1\ 000\ 000\ 000$, $q \leq 100$.
- Pentru rezolvarea corectă a cerinței se acordă 90 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`tnia.in`
```
5 10
2 3 7 8 10
5
1 1 5 10
2 5 4 7
3 2 3 6
3 8 3 10
3 2 3 10
```

`tnia.out`
```
30
6
5
0
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to avoid constructing the entire matrix due to its potential size. Instead, we can leverage the properties of the matrix and the given constraints to compute the sums directly.

Here's the step-by-step approach:

1. **Read Input Efficiently**: Since we can't use standard input/output functions like `cin`, `cout`, `scanf`, or `printf`, we'll use file I/O functions.
2. **Precompute Column Heights**: Store the heights of the columns in an array.
3. **Answer Queries**: For each query, compute the sum of the submatrix by iterating over the columns in the specified range and calculating the contribution of each column to the sum.

### Detailed Plan:
1. **Reading Input**: Use `ifstream` to read from `tnia.in`.
2. **Processing Queries**: For each query, determine the number of 1s in the specified submatrix by summing up the heights of the relevant columns and adjusting for the row boundaries.

Here's the C++ code implementing the above plan:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

int main() {
    std::ifstream infile("tnia.in");
    std::ofstream outfile("tnia.out");

    int n, m;
    infile >> n >> m;

    std::vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        infile >> heights[i];
    }

    int q;
    infile >> q;

    while (q--) {
        int A, B, C, D;
        infile >> A >> B >> C >> D;

        // Convert to zero-based indices for easier handling
        A--; B--; C--; D--;

        long long sum = 0;
        for (int i = A; i <= C; ++i) {
            // Calculate the number of 1s in the column i within the rows [B, D]
            int height = heights[i];
            if (height > B) {
                sum += std::min(height, D + 1) - B;
            }
        }

        outfile << sum << "\n";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read from "tnia.in" and `ofstream` to write to "tnia.out".
2. **Storing Heights**: We store the heights of the columns in a vector.
3. **Processing Queries**: For each query, we convert the 1-based indices to 0-based for easier handling. We then iterate over the specified columns and calculate the contribution of each column to the sum based on the heights and row boundaries.
4. **Output the Result**: Write the result of each query to the output file.

This approach ensures that we handle the potentially large input sizes efficiently without constructing the entire matrix. The time complexity is mainly dependent on the number of queries and the number of columns, making it feasible for large inputs.
