---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un copil construiește un triunghi cu numerele naturale nenule astfel:

* în vârful triunghiului scrie valoarea $1$;
* completează liniile triunghiului de sus în jos, iar căsuțele de pe aceeași linie de la stânga la dreapta cu numere naturale consecutive, ca în figurile următoare.

~[numere.png]

În figura din stânga este ilustrat un astfel de triunghi având $5$ linii, conținând numerele naturale de la $1$ la $15$. În acest triunghi copilul începe să construiască drumuri, respectând următoarele reguli:

* orice drum începe din $1$;
* din orice căsuță se poate deplasa fie în căsuța situată pe linia următoare în stânga sa (deplasare codificată cu $1$), fie în căsuța situată pe linia următoare în dreapta sa (deplasare codficată cu $2$);
* orice drum va fi descris prin succesiunea deplasărilor efectuate.

De exemplu, drumul ilustrat în figura din dreapta poate fi descris astfel: $1$, $2$, $2$, $2$.

# Cerință

Scrieți un program care rezolvă următoarele două cerințe:

* citește descrierea unui drum și afișează numărul la care se termină drumul;
* citește un număr natural nenul $K$, determină un drum care se termină cu numărul $K$ pentru care suma numerelor prin care trece drumul este maximă și afișează această sumă.

# Date de intrare

Fișierul de intrare `numere.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$).

* Dacă $C$ este egal cu $1$, a doua linie din fișier conține un număr natural $N$, reprezentând lungimea drumului, iar a treia linie din fișier conține descrierea drumului sub forma a $N$ valori, $1$ sau $2$, separate între ele prin câte un spațiu.
* Dacă $C$ este egal cu $2$, a doua linie din fișier conține numărul natural $K$.

# Date de ieșire

Fișierul de ieșire `numere.out` va conține o singură linie pe care va fi scris un singur număr natural. Dacă $C = 1$, va fi scris numărul cu care se termină drumul descris în fișierul de intrare. Dacă $C = 2$, va fi scrisă suma maximă a numerelor aflate pe un drum care se termină cu numărul $K$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se acordă $40$ de puncte; pentru rezolvarea corectă a cerinței $2$ se acordă $50$ de puncte. $10$ puncte se acordă din oficiu.

---

Example:
`numere.in`
```
1
4
1 2 1 2
```

`numere.out`
```
13
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the problem and then provide the solution in C++.

### Problem Breakdown

#### Part 1: Determine the number at the end of the path
1. Read the path description from the input.
2. Starting from the number 1, follow the path described by the sequence of 1s and 2s to determine the final number.

#### Part 2: Find the maximum sum path ending at a given number K
1. Determine which row the number K is in.
2. Traverse back from K to the top of the triangle, choosing the path that maximizes the sum.

### Implementation

We'll use file I/O to read from `numere.in` and write to `numere.out`. We will avoid using `cin`, `cout`, `printf`, and `scanf` as requested.

Here is the C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

int findNumberAtEndOfPath(const vector<int>& path) {
    int currentNumber = 1;
    int currentRow = 1;
    int currentIndex = 1; // index in the current row
    
    for (int move : path) {
        currentRow++;
        if (move == 1) {
            currentIndex = currentIndex; // move to the left child
        } else {
            currentIndex = currentIndex + 1; // move to the right child
        }
        currentNumber = (currentRow * (currentRow - 1)) / 2 + currentIndex;
    }
    
    return currentNumber;
}

int findMaxSumEndingAtK(int K) {
    int row = (-1 + sqrt(1 + 8 * K)) / 2;
    int indexInRow = K - (row * (row - 1)) / 2;
    
    int currentNumber = K;
    int currentRow = row;
    int currentIndex = indexInRow;
    int sum = 0;
    
    while (currentRow > 0) {
        sum += currentNumber;
        currentRow--;
        if (currentIndex > 1) {
            currentIndex--;
        }
        currentNumber = (currentRow * (currentRow - 1)) / 2 + currentIndex;
    }
    
    return sum;
}

int main() {
    ifstream inFile("numere.in");
    ofstream outFile("numere.out");
    
    int C;
    inFile >> C;
    
    if (C == 1) {
        int N;
        inFile >> N;
        vector<int> path(N);
        for (int i = 0; i < N; ++i) {
            inFile >> path[i];
        }
        int result = findNumberAtEndOfPath(path);
        outFile << result << endl;
    } else if (C == 2) {
        int K;
        inFile >> K;
        int result = findMaxSumEndingAtK(K);
        outFile << result << endl;
    }
    
    inFile.close();
    outFile.close();
    
    return 0;
}
```

### Explanation

1. **Reading input**:
   - We read the value of `C` to determine which part of the problem to solve.
   - For `C == 1`, we read the path length `N` and the path itself.
   - For `C == 2`, we read the number `K`.

2. **Finding the number at the end of the path**:
   - We start at the number 1 and follow the path described by the sequence of 1s and 2s.
   - We calculate the current number based on the row and index in the row.

3. **Finding the maximum sum path ending at K**:
   - We determine the row and index of `K`.
   - We traverse back from `K` to the top of the triangle, summing the numbers along the path that maximizes the sum.

This solution ensures efficient computation and adheres to the constraints provided in the problem statement.
