---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un copil construiește un triunghi cu numerele naturale nenule astfel:

* în vârful triunghiului scrie valoarea $1$;
* completează liniile triunghiului de sus în jos, iar căsuțele de pe aceeași linie de la stânga la dreapta cu numere naturale consecutive, ca în figurile următoare.

~[numere.png]

În figura din stânga este ilustrat un astfel de triunghi având $5$ linii, conținând numerele naturale de la $1$ la $15$. În acest triunghi copilul începe să construiască drumuri, respectând următoarele reguli:

* orice drum începe din $1$;
* din orice căsuță se poate deplasa fie în căsuța situată pe linia următoare în stânga sa (deplasare codificată cu $1$), fie în căsuța situată pe linia următoare în dreapta sa (deplasare codficată cu $2$);
* orice drum va fi descris prin succesiunea deplasărilor efectuate.

De exemplu, drumul ilustrat în figura din dreapta poate fi descris astfel: $1$, $2$, $2$, $2$.

# Cerință

Scrieți un program care rezolvă următoarele două cerințe:

* citește descrierea unui drum și afișează numărul la care se termină drumul;
* citește un număr natural nenul $K$, determină un drum care se termină cu numărul $K$ pentru care suma numerelor prin care trece drumul este maximă și afișează această sumă.

# Date de intrare

Fișierul de intrare `numere.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$).

* Dacă $C$ este egal cu $1$, a doua linie din fișier conține un număr natural $N$, reprezentând lungimea drumului, iar a treia linie din fișier conține descrierea drumului sub forma a $N$ valori, $1$ sau $2$, separate între ele prin câte un spațiu.
* Dacă $C$ este egal cu $2$, a doua linie din fișier conține numărul natural $K$.

# Date de ieșire

Fișierul de ieșire `numere.out` va conține o singură linie pe care va fi scris un singur număr natural. Dacă $C = 1$, va fi scris numărul cu care se termină drumul descris în fișierul de intrare. Dacă $C = 2$, va fi scrisă suma maximă a numerelor aflate pe un drum care se termină cu numărul $K$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se acordă $40$ de puncte; pentru rezolvarea corectă a cerinței $2$ se acordă $50$ de puncte. $10$ puncte se acordă din oficiu.

---

Example:
`numere.in`
```
1
4
1 2 1 2
```

`numere.out`
```
13
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution to the challenge:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("numere.in");
    ofstream fout("numere.out");

    int C;
    fin >> C;

    if (C == 1) {
        int N;
        fin >> N;
        vector<int> path(N);
        for (int i = 0; i < N; ++i) {
            fin >> path[i];
        }

        int current_number = 1;
        int current_row = 1;
        for (int i = 0; i < N; ++i) {
            if (path[i] == 1) {
                current_number += current_row;
            } else if (path[i] == 2) {
                current_number += current_row + 1;
            }
            ++current_row;
        }

        fout << current_number << endl;
    } else if (C == 2) {
        int K;
        fin >> K;

        int row = 1;
        int start = 1;
        while (start + row <= K) {
            start += row;
            ++row;
        }

        int col = K - start + 1;
        int sum = 0;
        int current_number = 1;
        for (int i = 1; i < row; ++i) {
            sum += current_number;
            if (col > 1) {
                current_number += i + 1;
                --col;
            } else {
                current_number += i;
            }
        }
        sum += current_number;

        fout << sum << endl;
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation

1. **Reading Input:**
   - The program reads the input from `numere.in` using `ifstream`.
   - It reads the value of `C` to determine which task to perform.

2. **Task 1:**
   - If `C` is 1, it reads the length of the path `N` and the path itself.
   - It initializes the current number to 1 (the top of the triangle) and the current row to 1.
   - It then iterates through the path:
     - If the move is 1, it moves to the left child in the next row.
     - If the move is 2, it moves to the right child in the next row.
   - Finally, it writes the resulting number to `numere.out`.

3. **Task 2:**
   - If `C` is 2, it reads the value of `K`.
   - It calculates which row `K` is in and the starting number of that row.
   - It then calculates the column position of `K` within that row.
   - It iterates through the rows up to the row containing `K`, summing the maximum possible numbers along the way.
   - Finally, it writes the sum to `numere.out`.

### Optimization
- The solution is designed to be efficient by directly calculating positions and sums without unnecessary loops or complex data structures.
- The use of simple arithmetic operations ensures fast execution, suitable for the given constraints.
