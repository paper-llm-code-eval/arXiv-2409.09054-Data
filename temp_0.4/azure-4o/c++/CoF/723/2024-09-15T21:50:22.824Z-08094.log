---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <cmath>
#include <algorithm>

using namespace std;

// Function to perform prime factorization
void primeFactorization(int num, map<int, int> &factors) {
    for (int i = 2; i * i <= num; ++i) {
        while (num % i == 0) {
            factors[i]++;
            num /= i;
        }
    }
    if (num > 1) {
        factors[num]++;
    }
}

int main() {
    ifstream fin("expresie.in");
    ofstream fout("expresie.out");

    int m, n;
    fin >> m >> n;

    vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
    }

    // Map to store the prime factorization of the product
    map<int, int> totalFactors;
    for (int num : numbers) {
        primeFactorization(num, totalFactors);
    }

    // Check if all prime factor exponents are divisible by m
    bool isNatural = true;
    for (const auto &factor : totalFactors) {
        if (factor.second % m != 0) {
            isNatural = false;
            break;
        }
    }

    if (!isNatural) {
        fout << "0\n";
    } else {
        fout << "1\n";
        for (const auto &factor : totalFactors) {
            fout << factor.first << " " << factor.second / m << "\n";
        }
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the input from `expresie.in` using `ifstream`.
2. **Prime Factorization**: The function `primeFactorization` is used to factorize each number and update a map with the prime factors and their exponents.
3. **Combine Factors**: The program combines the prime factors of all numbers.
4. **Check Divisibility**: It checks if all the exponents of the prime factors are divisible by `m`.
5. **Output Result**: If the condition is met, it outputs `1` and the prime factors with their new exponents. Otherwise, it outputs `0`.

This solution ensures efficient processing by using prime factorization and modular arithmetic to check the conditions.
