---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `speciale.in` and write to `speciale.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Maria a aflat că numerele naturale care încep cu cifra $1$ și au toate cifrele ordonate strict crescător și consecutive sau încep cu cifra $9$ și au toate cifrele ordonate strict descrescător și consecutive se numesc numere **speciale**. Interesată să descopere legătura dintre numerele speciale cu același număr de cifre, a observat că poate construi tabelul alăturat.
| | |
|-|-|
| 1 | 1 x 8 + 1 = 9 |
| 2 | 12 x 8 + 2 = 98 |
| 3 | 123 x 8 + 3 = 987 |
| 4 | 1234 x 8 + 4 = 9876 |
| 5 | 12345 x 8 + 5 = 98765 |
| 6 | 123456 x 8 + 6 = 987654 |
| 7 | 1234567 x 8 + 7 = 9876543 |
| 8 | 12345678 x 8 + 8 = 98765432 |
| 9 | 123456789 x 8 + 9 = 987654321 |

# Cerință

Scrieți un program care citind patru numere naturale $K$, $N$, $A$ și $B$ determină:

* cel mai mare număr **special** situat în tabel pe linia $K$;
* numărul **special** obținut din numărul $N$ prin ștergerea unei cifre;
* numărul de numere **speciale** din mulțimea {$A , A+1, A+2, A+3 …, B-1, B$}.


# Date de intrare

Fișierul de intrare `speciale.in` conține pe prima linie un număr natural $P$. Pentru toate testele de intrare, numărul $P$ poate avea doar valoarea $1$, valoarea $2$ sau valoarea $3$. Pe a doua linie a fișierului `speciale.in` se găsesc, în această ordine, numerele naturale $K$, $N$, $A$ și $B$, separate prin câte un spațiu.

# Date de ieșire

Dacă valoarea lui $P$ este $1$, se va rezolva numai punctul 1) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând cel mai mare număr special situat în tabel pe linia $K$.
 
Dacă valoarea lui $P$ este $2$, se va rezolva numai punctul 2) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând numărul special obținut din numărul $N$ prin ștergerea unei cifre sau $0$ dacă un astfel de număr nu se poate obține;
 
Dacă valoarea lui $P$ este $3$, se va rezolva numai punctul 3) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând numărul de numere speciale din mulțimea {$A, A +1, A+2, A+3 …, B-1, B$}.

# Restricții și precizări

* $1 \leq a, b \leq 1 \ 000 \ 000$;
* $1 \leq K \leq 9$;
* $1 \leq N \leq 999 \ 999 \ 999$;
* $1 \leq A \leq B \leq 999 \ 999 \ 999$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte, pentru rezolvarea corectă a celei de a doua cerințe se acordă $40$ de puncte, pentru rezolvarea corectă a celei de a treia cerințe se acordă $40$ de puncte.

---

Example:
`speciale.in`
```
1
3 125345 320 888888
```

`speciale.out`
```
987
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>

// Function to generate the largest special number on line K
std::string largest_special_number(int K) {
    std::string num = "";
    for (int i = 1; i <= K; ++i) {
        num += std::to_string(i);
    }
    return num;
}

// Function to check if a number is special
bool is_special(const std::string& num) {
    int len = num.length();
    if (num[0] == '1') {
        for (int i = 1; i < len; ++i) {
            if (num[i] != num[i - 1] + 1) {
                return false;
            }
        }
    } else if (num[0] == '9') {
        for (int i = 1; i < len; ++i) {
            if (num[i] != num[i - 1] - 1) {
                return false;
            }
        }
    } else {
        return false;
    }
    return true;
}

// Function to find the special number obtained by deleting one digit from N
std::string special_number_by_deleting_one_digit(int N) {
    std::string num = std::to_string(N);
    int len = num.length();
    for (int i = 0; i < len; ++i) {
        std::string temp = num.substr(0, i) + num.substr(i + 1);
        if (is_special(temp)) {
            return temp;
        }
    }
    return "0";
}

// Function to count the number of special numbers in the range [A, B]
int count_special_numbers_in_range(int A, int B) {
    int count = 0;
    for (int i = A; i <= B; ++i) {
        if (is_special(std::to_string(i))) {
            ++count;
        }
    }
    return count;
}

int main() {
    std::ifstream infile("speciale.in");
    std::ofstream outfile("speciale.out");

    int P, K, N, A, B;
    infile >> P >> K >> N >> A >> B;

    if (P == 1) {
        std::string special = largest_special_number(K);
        std::string result = std::to_string(std::stoi(special) * 8 + K);
        outfile << result << std::endl;
    } else if (P == 2) {
        std::string result = special_number_by_deleting_one_digit(N);
        outfile << result << std::endl;
    } else if (P == 3) {
        int result = count_special_numbers_in_range(A, B);
        outfile << result << std::endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation
1. **Largest Special Number on Line K**:
   - Generate a number starting from 1 to K.
   - Multiply this number by 8 and add K to get the largest special number on line K.

2. **Special Number by Deleting One Digit**:
   - Convert the number N to a string.
   - Try deleting each digit one by one and check if the resulting number is special.
   - If a special number is found, return it; otherwise, return "0".

3. **Count Special Numbers in Range [A, B]**:
   - Iterate through the range [A, B].
   - Check if each number in this range is special.
   - Count the special numbers and return the count.

The solution reads from `speciale.in` and writes to `speciale.out` as required. It avoids using `cin` and `cout` for input and output operations, ensuring efficient file handling.
