---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cursuri.in` and write to `cursuri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.

# Cerință

Cunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:

1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.
2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.

# Date de intrare

În fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq K \leq 1 \ 000$;
* $1 \leq a_i < b_i \leq 100 \ 000$;
* În cazul cerinței $2$ se garantează că pentru toate testele există soluție
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`cursuri.in`
```
1
4 2
2 16
1 3
3 18
1 20
```

`cursuri.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <queue>

struct Course {
    int start, end;
};

bool compareByEnd(const Course &a, const Course &b) {
    return a.end < b.end;
}

int maxCourses(std::vector<Course> &courses, int K) {
    std::sort(courses.begin(), courses.end(), compareByEnd);
    std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
    int count = 0;

    for (const auto &course : courses) {
        if (pq.size() < K) {
            pq.push(course.end);
            count++;
        } else if (pq.top() <= course.start) {
            pq.pop();
            pq.push(course.end);
            count++;
        }
    }

    return count;
}

int maxDuration(std::vector<Course> &courses, int K) {
    int left = 1, right = 0;
    for (const auto &course : courses) {
        right = std::max(right, course.end - course.start);
    }

    auto canScheduleAll = [&](int duration) {
        std::vector<std::pair<int, int>> intervals;
        for (const auto &course : courses) {
            intervals.push_back({course.start, course.start + duration});
        }
        std::sort(intervals.begin(), intervals.end(), [](const std::pair<int, int> &a, const std::pair<int, int> &b) {
            return a.second < b.second;
        });

        std::priority_queue<int, std::vector<int>, std::greater<int>> pq;
        for (const auto &interval : intervals) {
            if (pq.size() < K) {
                pq.push(interval.second);
            } else if (pq.top() <= interval.first) {
                pq.pop();
                pq.push(interval.second);
            } else {
                return false;
            }
        }
        return true;
    };

    while (left < right) {
        int mid = (left + right + 1) / 2;
        if (canScheduleAll(mid)) {
            left = mid;
        } else {
            right = mid - 1;
        }
    }

    return left;
}

int main() {
    std::ifstream inFile("cursuri.in");
    std::ofstream outFile("cursuri.out");

    int C, N, K;
    inFile >> C >> N >> K;

    std::vector<Course> courses(N);
    for (int i = 0; i < N; ++i) {
        inFile >> courses[i].start >> courses[i].end;
    }

    if (C == 1) {
        outFile << maxCourses(courses, K) << "\n";
    } else if (C == 2) {
        outFile << maxDuration(courses, K) << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from the file `cursuri.in` and parsed into appropriate variables.
2. **Struct Definition**: A `Course` structure is defined to hold the start and end times of each course.
3. **Sorting**: The courses are sorted by their end times to facilitate the scheduling process.
4. **Max Courses Calculation**:
   - A priority queue is used to keep track of the end times of the currently scheduled courses.
   - Courses are scheduled greedily based on their end times.
5. **Max Duration Calculation**:
   - A binary search is performed on the possible durations to find the maximum duration that allows all courses to be scheduled in the given number of rooms.
6. **Output**: The result is written to the file `cursuri.out`.

This solution ensures efficient scheduling and duration calculation using sorting and binary search, making it both correct and optimal for the given constraints.
