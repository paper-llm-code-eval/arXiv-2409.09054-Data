---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `235.in` and write to `235.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Definim o putere a lui $3$ un număr de forma $3^k$, ($k$ număr natural strict pozitiv), o putere a lui $5$ un număr de forma $5^k$ (k număr natural strict pozitiv), iar o putere a lui $2$ un număr de forma $2^k$ ($k$ număr natural strict pozitiv).
Se dă un șir de $n$ numere naturale. Plecând de la acest șir, formăm un nou șir prin eliminarea tuturor numerele care nu sunt puteri ale lui $3$ și nici puteri ale lui $5$. Ordinea relativă între numerele care nu sunt eliminate se păstrează.

# Cerințe

- Să se determine câte numere conține șirul nou format.
- Să se determine de asemenea numărul de secvențe având lungimea egală cu o putere a lui $2$ existente în șirul nou format în care numărul de puteri ale lui $3$ este egal cu numărul de puteri ale lui $5$. O secvență este formată din elemente aflate pe poziții consecutive în acest șir nou format, iar lungimea unei secvențe este egală cu numărul de elemente pe care aceasta îl conține.

# Date de intrare

Pe prima linie in fișierul `235.in` se afla un număr natural $n$. Pe fiecare dintre următoarele $n$ linii câte un număr natural mai mare decât $1$ reprezentând numerele șirului inițial.

# Date de ieșire

Pe prima linie a fișierului `235.out` se va afla o valoare naturală $m$ care va reprezenta numărul de elemente rămase în șir după eliminare. Pe a doua linie se va afla o valoare naturală $S$ reprezentând numărul de secvențe din șirul nou format care au proprietățile cerute.

# Restricții și precizări

* $2 \leq n \leq 500 \ 000$;
* Numerele din șirul inițial sunt numere naturale din intervalul [$2, 2 \cdot 10^9$].
* Se garantează că $m \leq 40 \ 000$; pentru fiecare set de date de intrare.
* Pentru determinarea corectă a valorii numărului $m$ se acordă $30$% din punctaj iar pentru determinarea corectă a ambelor valori ($m$ şi $s$) se acordă $100$% din punctaj.

---

Example:
`235.in`
```
8
625
125
5
9
15
81
100
125
```

`235.out`
```
6
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <unordered_map>

bool isPowerOf(int num, int base) {
    while (num > 1) {
        if (num % base != 0) return false;
        num /= base;
    }
    return num == 1;
}

int main() {
    std::ifstream input("235.in");
    std::ofstream output("235.out");

    int n;
    input >> n;

    std::vector<int> filtered;
    std::vector<int> powerType;

    for (int i = 0; i < n; ++i) {
        int num;
        input >> num;
        if (isPowerOf(num, 3)) {
            filtered.push_back(num);
            powerType.push_back(3);
        } else if (isPowerOf(num, 5)) {
            filtered.push_back(num);
            powerType.push_back(5);
        }
    }

    int m = filtered.size();
    output << m << '\n';

    if (m == 0) {
        output << 0 << '\n';
        return 0;
    }

    std::unordered_map<int, int> powerOfTwo;
    int k = 1;
    while (k <= m) {
        powerOfTwo[k] = 1;
        k *= 2;
    }

    int s = 0;
    for (int len = 2; len <= m; len *= 2) {
        for (int start = 0; start + len <= m; ++start) {
            int count3 = 0, count5 = 0;
            for (int i = start; i < start + len; ++i) {
                if (powerType[i] == 3) ++count3;
                else if (powerType[i] == 5) ++count5;
            }
            if (count3 == count5) ++s;
        }
    }

    output << s << '\n';

    return 0;
}
```
### Explanation:
1. **Reading Input**: The program reads the input from the file `235.in`.
2. **Filtering**: It filters out numbers that are powers of 3 or 5 and stores them in a vector `filtered`. It also keeps track of the type of power (3 or 5) in another vector `powerType`.
3. **Counting**: It counts the number of elements in the filtered list (`m`) and writes it to the output file.
4. **Finding Sequences**: It finds all subsequences of lengths that are powers of 2 and checks if they contain an equal number of powers of 3 and 5.
5. **Output**: It writes the result to the file `235.out`.

This solution ensures that the operations are efficient and the program runs in a reasonable time frame for the given constraints.
