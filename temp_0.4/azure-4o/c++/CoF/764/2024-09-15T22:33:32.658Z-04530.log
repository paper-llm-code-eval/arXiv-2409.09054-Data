---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ceas.in` and write to `ceas.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Afișarea cu ajutorul led-urilor este un fapt banal astăzi. Pe lângă consumul redus, oferă și o imagine spectaculoasă, atractivă. Fiind informaticieni în devenire, este util pentru noi să avem la dispoziție un **ceas binar**. Un astfel de ceas are 8 coloane de leduri. Fiecărei cifre din afișarea orei îi corespunde o coloană verticală cu maxim $4$ leduri. Fiecare cifră a orei este reprezentată în binar, iar coloana corespunzătoare de leduri vizualizează această reprezentare, poziția binară $0$ a reprezentării fiind la baza coloanei. Astfel, orei `10:35:42.68` îi va corespunde configurația:

~[ceas.png|align=center]

Este evident faptul că prima coloană are nevoie doar de $2$ leduri, deoarece această coloană vizualizează doar valorile $0, 1$ și $2$. În mod analog, coloanele $3$ și $5$ au nevoie doar de $3$ leduri, deoarece valorile care trebuie vizualizate sunt $0, 1, 2, 3, 4, 5$. În celelate coloane vor fi vizualizate și valorile $7, 8$ și $9$, deci sunt necesare câte $4$ leduri.

# Cerință

Fiind dată configurația ceasului binar la un moment dat și o perioadă de timp exprimată în sutimi de secundă, să se determine și să se afișeze configurația ceasului după trecerea perioadei respective de timp.

# Date de intrare

Fișierul de intrare `ceas.in` conține $5$ linii. Primele $4$ linii conțin configurația inițială a ceasului, iar linia a $5$-a perioada de timp $t$. Pentru configurația ceasului se folosesc caracterele ` `$\ $(spațiu), `x` și `o`. Caracterul ` `$\ $reprezintă poziția unui led care lipsește, caracterul `x` poziția unui led stins iar caracterul `o` poziția unui led aprins.

# Date de ieșire

Fișierul de ieșire `ceas.out` conține pe primele $4$ linii configurația finală a ceasului în modul descris mai sus, utilizând aceleași caractere ` `, `x`, `o`. Cele $4$ linii încep din coloana $1$.

# Restricții și precizări

* $0 \leq t \leq 2 \cdot 10^9$;

---

Example:
`ceas.in`
```
 x x xxo
 xxooxox
xxoxxoox
oxooxxxx
123
```

`ceas.out`
```
 x x xox
 xxooxxx
xxoxxoxx
oxooxooo
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <bitset>
#include <iomanip>

using namespace std;

// Function to convert a digit to its binary representation
string digitToBinary(int digit, int length) {
    return bitset<4>(digit).to_string().substr(4 - length, length);
}

// Function to convert a time string to its binary representation
vector<string> timeToBinary(string time) {
    vector<string> binaryTime(4, string(8, ' '));
    int pos[] = {0, 1, 3, 4, 6, 7, 9, 10};  // Positions of digits in the time string
    int lengths[] = {2, 4, 3, 4, 3, 4, 4, 4};  // Lengths of binary representations

    for (int i = 0; i < 8; ++i) {
        string bin = digitToBinary(time[pos[i]] - '0', lengths[i]);
        for (int j = 0; j < bin.size(); ++j) {
            binaryTime[3 - j][i] = bin[bin.size() - 1 - j] == '1' ? 'o' : 'x';
        }
    }

    return binaryTime;
}

// Function to convert a binary representation to its time string
string binaryToTime(vector<string> binaryTime) {
    string time;
    int pos[] = {0, 1, 3, 4, 6, 7, 9, 10};  // Positions of digits in the time string
    int lengths[] = {2, 4, 3, 4, 3, 4, 4, 4};  // Lengths of binary representations

    for (int i = 0; i < 8; ++i) {
        string bin;
        for (int j = 0; j < lengths[i]; ++j) {
            bin = (binaryTime[3 - j][i] == 'o' ? '1' : '0') + bin;
        }
        time += to_string(stoi(bin, nullptr, 2));
        if (i == 1 || i == 3 || i == 5) time += ':';
        if (i == 7) time += '.';
    }

    return time;
}

// Function to add centiseconds to a time string
string addCentiseconds(string time, int centiseconds) {
    int h = stoi(time.substr(0, 2));
    int m = stoi(time.substr(3, 2));
    int s = stoi(time.substr(6, 2));
    int cs = stoi(time.substr(9, 2));

    cs += centiseconds;
    s += cs / 100;
    cs %= 100;
    m += s / 60;
    s %= 60;
    h += m / 60;
    m %= 60;
    h %= 24;

    ostringstream oss;
    oss << setw(2) << setfill('0') << h << ":"
        << setw(2) << setfill('0') << m << ":"
        << setw(2) << setfill('0') << s << "."
        << setw(2) << setfill('0') << cs;

    return oss.str();
}

int main() {
    ifstream fin("ceas.in");
    ofstream fout("ceas.out");

    vector<string> binaryTime(4);
    for (int i = 0; i < 4; ++i) {
        getline(fin, binaryTime[i]);
    }

    int t;
    fin >> t;

    string time = binaryToTime(binaryTime);
    string newTime = addCentiseconds(time, t);
    vector<string> newBinaryTime = timeToBinary(newTime);

    for (const string& line : newBinaryTime) {
        fout << line << endl;
    }

    return 0;
}
```
