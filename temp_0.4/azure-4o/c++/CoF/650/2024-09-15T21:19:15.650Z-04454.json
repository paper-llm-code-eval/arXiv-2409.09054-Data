{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/650/2024-09-15T21:19:15.650Z-04454.log",
  "attemptStart": 1726435155.65,
  "attemptEnd": 1726435184.019,
  "attemptDuration": 28.36899995803833,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <queue>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nbool isYinYang(const vector<vector<int>>& matrix, int N, int M) {\n    for (int i = 0; i < N; ++i) {\n        for (int j = 1; j < M; ++j) {\n            if (matrix[i][j] < matrix[i][j - 1]) return false;\n        }\n    }\n    for (int j = 0; j < M; ++j) {\n        for (int i = 1; i < N; ++i) {\n            if (matrix[i][j] < matrix[i - 1][j]) return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    ifstream fin(\"yinyang.in\");\n    ofstream fout(\"yinyang.out\");\n\n    int N, M;\n    fin >> N >> M;\n\n    vector<vector<int>> matrix(N, vector<int>(M));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            fin >> matrix[i][j];\n        }\n    }\n\n    if (isYinYang(matrix, N, M)) {\n        fout << 0 << endl;\n        return 0;\n    }\n\n    // BFS to find minimum swaps\n    queue<pair<vector<vector<int>>, int>> q;\n    q.push({matrix, 0});\n    set<vector<vector<int>>> visited;\n    visited.insert(matrix);\n\n    while (!q.empty()) {\n        auto [currentMatrix, steps] = q.front();\n        q.pop();\n\n        // Try swapping rows\n        for (int i = 0; i < N - 1; ++i) {\n            vector<vector<int>> newMatrix = currentMatrix;\n            swap(newMatrix[i], newMatrix[i + 1]);\n            if (isYinYang(newMatrix, N, M)) {\n                fout << steps + 1 << endl;\n                return 0;\n            }\n            if (visited.find(newMatrix) == visited.end()) {\n                visited.insert(newMatrix);\n                q.push({newMatrix, steps + 1});\n            }\n        }\n\n        // Try swapping columns\n        for (int j = 0; j < M - 1; ++j) {\n            vector<vector<int>> newMatrix = currentMatrix;\n            for (int i = 0; i < N; ++i) {\n                swap(newMatrix[i][j], newMatrix[i][j + 1]);\n            }\n            if (isYinYang(newMatrix, N, M)) {\n                fout << steps + 1 << endl;\n                return 0;\n            }\n            if (visited.find(newMatrix) == visited.end()) {\n                visited.insert(newMatrix);\n                q.push({newMatrix, steps + 1});\n            }\n        }\n    }\n\n    fout << -1 << endl;\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2686,
  "metadata": {
    "id": 650,
    "examples": [
      {
        "in": "2 3\n1 2 4\n3 5 6",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2 3\n6 6 5\n4 6 2",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se dă o matrice $A$ cu $N$ linii și $M$ coloane, cu valori cuprinse între $1$ și $N \\cdot M$ inclusiv, nu neapărat distincte. O **operație** constă în selectarea a două linii sau două coloane consecutive și interschimbarea acestora (swap). O matrice **yin-yang** este o matrice în care $A[i][j] \\geq A[i][j – 1]$, pentru orice pereche $(i, j)$ cu $1 \\leq i \\leq N$ și $2 \\leq j \\leq M$ și $A[i][j] \\geq A[i – 1][j]$, pentru orice pereche $(i, j)$ cu $2 \\leq i \\leq N$ și $1 \\leq j \\leq M$.\n\n# Cerinţă\n\nSă se determine numărul minim de operații necesare pentru a transforma matricea dată într-o matrice yin-yang.\n\n# Date de intrare\n\nÎn fișierul de intrare `yinyang.in` se află scrise pe prima linie numerele naturale $N$ și $M$, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ numere naturale, reprezentând elementele matricei date $A$. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\n\nÎn fișierul `yinyang.out` se va scrie numărul minim de operații cerut sau $-1$ dacă nu există soluție.\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 100$;\n* Pentru teste în valoare de $9$ puncte: $1 \\leq N, M \\leq 5$;\n- Pentru alte teste în valoare de $18$ puncte: $N = 1$;\n- Pentru alte teste în valoare de $36$ de puncte elementele din matrice sunt **DISTINCTE**.",
    "header": {
      "problem_id": 650,
      "problem_name": "yinyang",
      "tags": "[Ad hoc, Sorting]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "yinyang.in",
      "output_filename": "yinyang.out",
      "multiple_solutions": false,
      "original_source": "OJI 2019 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "yinyang.in",
      "output": "yinyang.out"
    },
    "consoleInteraction": false
  }
}