---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int main() {
    ifstream infile("culori.in");
    ofstream outfile("culori.out");

    int n, m, t;
    infile >> n >> m >> t;

    vector<vector<char>> grid(n, vector<char>(m));
    vector<vector<char>> new_grid(n, vector<char>(m));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> grid[i][j];
        }
    }

    auto count_neighbors = [&](int x, int y) {
        int r_count = 0, a_count = 0;
        for (int dx = -1; dx <= 1; ++dx) {
            for (int dy = -1; dy <= 1; ++dy) {
                if (dx == 0 && dy == 0) continue;
                int nx = x + dx, ny = y + dy;
                if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                    if (grid[nx][ny] == 'r') ++r_count;
                    else ++a_count;
                }
            }
        }
        return make_pair(r_count, a_count);
    };

    for (int time = 0; time < t; ++time) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                auto [r_count, a_count] = count_neighbors(i, j);
                if (r_count > a_count) new_grid[i][j] = 'r';
                else if (a_count > r_count) new_grid[i][j] = 'a';
                else new_grid[i][j] = grid[i][j];
            }
        }
        grid.swap(new_grid);
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            outfile << grid[i][j];
        }
        outfile << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the input values for `n`, `m`, and `t`, and then reads the initial grid of fish colors from the input file `culori.in`.
2. **Grid Initialization**: Two grids are initialized, `grid` for the current state and `new_grid` for the next state.
3. **Counting Neighbors**: A lambda function `count_neighbors` is defined to count the number of 'r' and 'a' neighbors for a given cell `(x, y)`.
4. **Simulation Loop**: The main loop runs for `t` iterations. For each cell, it counts the neighbors and determines the new color based on the majority rule.
5. **Swapping Grids**: After updating the `new_grid` for the current iteration, it swaps `grid` and `new_grid` to prepare for the next iteration.
6. **Writing Output**: Finally, the program writes the resulting grid to the output file `culori.out`.

This solution ensures efficient simulation of the fish color changes and adheres to the constraints and requirements of the problem.
