---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `scara.in` and write to `scara.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ion şi-a construit o vilă pe frumosul vârf al unui munte. Acum proiectează o scară specială, pe care va urca de la şosea până la vilă. Diferenţa de nivel dintre şosea şi vilă este $H$ (deci aceasta trebuie să fie înălţimea totală a scării). Scara va avea $N$ trepte, toate de aceeaşi lăţime, dar de înălţimi distincte două câte două.

Ion a sesizat că efortul pe care îl depune pentru a urca o treaptă este egal cu înălţimea treptei. Dar dacă el urcă $x$ trepte deodată, efortul depus este egal cu media aritmetică a înălţimilor acestor $x$ trepte pe care le urcă deodată + un efort de valoare constantă $p$ (necesar pentru a-şi lua avânt). 

Fiind un tip atletic, Ion poate urca mai multe trepte deodată, dar suma înălţimilor treptelor urcate deodată nu trebuie să depăşească o valoare maximă $M$.

# Cerinţă

Scrieţi un program care să determine efortul minim necesar pentru a urca pe o scară construită conform restricţiilor problemei, precum şi o modalitate de a construi scara care va fi urcată cu efort minim.

# Date de intrare


Fişierul de intrare `scara.in` va conţine pe prima linie $4$ numere naturale separate prin câte un spaţiu $H \ N \ M \ p$ (cu semnificaţia din enunţ).

# Date de ieșire


Fişierul de ieşire `scara.out` va conţine 
- pe prima linie va fi scris efortul minim necesar (cu $2$ zecimale cu rotunjire);
- pe cea de a doua linie vor fi scrise $N$ numere naturale nenule care reprezintă înălţimile celor $N$ trepte ale scării (în ordinea de la şosea către vilă), separate prin câte un spaţiu. 


# Restricții și precizări

* $0 < H \leq 75$
* $0 < N \leq 8$
* $0 < M < 14$
* $0 \leq p \leq 10$
* Pentru datele de test, problema are întodeauna soluţie. 
* Dacă există mai multe soluţii (modalităţi de a construi scara astfel încât să obţineţi efortul minim dorit), veţi afişa prima soluţie în ordine lexicografică.
* Spunem că vectorul $x=(x_1, x_2, ..., x_k)$ precedă în ordine lexicografică vectorul $y=(y_1, y_2, ..., y_k)$ dacă există $i \geq 1$ astfel încât $x_j=y_j$, pentru orice $j<i$ şi $x_i<y_i$.
* Dacă a doua zecimală a efortului minim este $0$, sau chiar ambele zecimale sunt $0$ nu este necesar să le afişaţi. Deci în exemplu s-ar fi putut scrie efortul minim $9$ sau $9.0$.
* Se acordă $40\%$ din punctaj pentru prima cerinţă (efortul minim).
* Dacă efortul minim este corect şi se afişează şi o soluţie corectă (care respectă restricţiile problemei şi corespunde efortului minim), dar această soluţie nu este prima din punct de vedere lexicografic, se obţine $80\%$ din punctaj. Pentru rezolvarea corectă şi completă a ambelor cerinţe se obţine $100\%$ din punctaj.

---

Example:
`scara.in`
```
10 4 5 2
```

`scara.out`
```
9.00
1 4 2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider both the minimum effort calculation and the lexicographical order of the steps. Here's a step-by-step approach to achieve this:

1. **Input Reading**: We'll read the input values from the file `scara.in`.
2. **Generate Permutations**: Since the number of steps `N` is small (maximum 8), we can generate all permutations of heights that sum up to `H`.
3. **Calculate Effort**: For each permutation, calculate the total effort based on the rules provided.
4. **Select Optimal Solution**: Choose the permutation with the minimum effort. If there are multiple permutations with the same effort, select the lexicographically smallest one.
5. **Output the Result**: Write the result to `scara.out`.

Here's the C++ implementation of the above approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <limits>

using namespace std;

double calculateEffort(const vector<int>& steps, int p, int M) {
    double totalEffort = 0.0;
    int n = steps.size();
    for (int i = 0; i < n; ) {
        double sumHeights = 0.0;
        int count = 0;
        while (i + count < n && sumHeights + steps[i + count] <= M) {
            sumHeights += steps[i + count];
            count++;
        }
        totalEffort += (sumHeights / count) + p;
        i += count;
    }
    return totalEffort;
}

int main() {
    ifstream fin("scara.in");
    ofstream fout("scara.out");

    int H, N, M, p;
    fin >> H >> N >> M >> p;

    vector<int> steps(N);
    for (int i = 0; i < N; ++i) {
        steps[i] = i + 1;
    }

    double minEffort = numeric_limits<double>::max();
    vector<int> bestSteps;

    do {
        int sum = 0;
        for (int i = 0; i < N; ++i) {
            sum += steps[i];
        }
        if (sum == H) {
            double effort = calculateEffort(steps, p, M);
            if (effort < minEffort) {
                minEffort = effort;
                bestSteps = steps;
            }
        }
    } while (next_permutation(steps.begin(), steps.end()));

    fout << fixed;
    fout.precision(2);
    fout << minEffort << endl;
    for (int i = 0; i < N; ++i) {
        fout << bestSteps[i] << (i == N - 1 ? '\n' : ' ');
    }

    return 0;
}
```

### Explanation:
1. **Input Reading**: We read the values of `H`, `N`, `M`, and `p` from `scara.in`.
2. **Generate Permutations**: We generate all permutations of heights from 1 to `N`.
3. **Effort Calculation**: For each permutation that sums up to `H`, we calculate the effort required using the provided rules.
4. **Optimal Solution Selection**: We keep track of the permutation with the minimum effort.
5. **Output**: We write the minimum effort and the corresponding permutation to `scara.out`.

This approach ensures that we consider all possible ways to construct the staircase and select the one with the minimum effort, while also ensuring it is the lexicographically smallest solution if there are ties.
