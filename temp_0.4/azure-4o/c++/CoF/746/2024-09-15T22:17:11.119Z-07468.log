---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `scara.in` and write to `scara.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ion şi-a construit o vilă pe frumosul vârf al unui munte. Acum proiectează o scară specială, pe care va urca de la şosea până la vilă. Diferenţa de nivel dintre şosea şi vilă este $H$ (deci aceasta trebuie să fie înălţimea totală a scării). Scara va avea $N$ trepte, toate de aceeaşi lăţime, dar de înălţimi distincte două câte două.

Ion a sesizat că efortul pe care îl depune pentru a urca o treaptă este egal cu înălţimea treptei. Dar dacă el urcă $x$ trepte deodată, efortul depus este egal cu media aritmetică a înălţimilor acestor $x$ trepte pe care le urcă deodată + un efort de valoare constantă $p$ (necesar pentru a-şi lua avânt). 

Fiind un tip atletic, Ion poate urca mai multe trepte deodată, dar suma înălţimilor treptelor urcate deodată nu trebuie să depăşească o valoare maximă $M$.

# Cerinţă

Scrieţi un program care să determine efortul minim necesar pentru a urca pe o scară construită conform restricţiilor problemei, precum şi o modalitate de a construi scara care va fi urcată cu efort minim.

# Date de intrare


Fişierul de intrare `scara.in` va conţine pe prima linie $4$ numere naturale separate prin câte un spaţiu $H \ N \ M \ p$ (cu semnificaţia din enunţ).

# Date de ieșire


Fişierul de ieşire `scara.out` va conţine 
- pe prima linie va fi scris efortul minim necesar (cu $2$ zecimale cu rotunjire);
- pe cea de a doua linie vor fi scrise $N$ numere naturale nenule care reprezintă înălţimile celor $N$ trepte ale scării (în ordinea de la şosea către vilă), separate prin câte un spaţiu. 


# Restricții și precizări

* $0 < H \leq 75$
* $0 < N \leq 8$
* $0 < M < 14$
* $0 \leq p \leq 10$
* Pentru datele de test, problema are întodeauna soluţie. 
* Dacă există mai multe soluţii (modalităţi de a construi scara astfel încât să obţineţi efortul minim dorit), veţi afişa prima soluţie în ordine lexicografică.
* Spunem că vectorul $x=(x_1, x_2, ..., x_k)$ precedă în ordine lexicografică vectorul $y=(y_1, y_2, ..., y_k)$ dacă există $i \geq 1$ astfel încât $x_j=y_j$, pentru orice $j<i$ şi $x_i<y_i$.
* Dacă a doua zecimală a efortului minim este $0$, sau chiar ambele zecimale sunt $0$ nu este necesar să le afişaţi. Deci în exemplu s-ar fi putut scrie efortul minim $9$ sau $9.0$.
* Se acordă $40\%$ din punctaj pentru prima cerinţă (efortul minim).
* Dacă efortul minim este corect şi se afişează şi o soluţie corectă (care respectă restricţiile problemei şi corespunde efortului minim), dar această soluţie nu este prima din punct de vedere lexicografic, se obţine $80\%$ din punctaj. Pentru rezolvarea corectă şi completă a ambelor cerinţe se obţine $100\%$ din punctaj.

---

Example:
`scara.in`
```
10 4 5 2
```

`scara.out`
```
9.00
1 4 2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <cmath>

using namespace std;

struct Step {
    int height;
    double effort;
};

// Function to calculate the minimum effort
void calculateMinEffort(int H, int N, int M, int p, vector<int>& heights, double& minEffort, vector<int>& bestHeights) {
    vector<Step> dp(1 << N, {0, 1e9});
    dp[0] = {0, 0};

    for (int mask = 0; mask < (1 << N); ++mask) {
        if (dp[mask].effort == 1e9) continue;
        int currentHeight = dp[mask].height;
        for (int next = 0; next < N; ++next) {
            if (mask & (1 << next)) continue;
            int newMask = mask | (1 << next);
            int newHeight = currentHeight + heights[next];
            if (newHeight > H) continue;
            double newEffort = dp[mask].effort + heights[next];
            if (newEffort < dp[newMask].effort) {
                dp[newMask] = {newHeight, newEffort};
            }
        }
    }

    for (int mask = 0; mask < (1 << N); ++mask) {
        if (dp[mask].height == H) {
            if (dp[mask].effort < minEffort) {
                minEffort = dp[mask].effort;
                bestHeights.clear();
                for (int i = 0; i < N; ++i) {
                    if (mask & (1 << i)) {
                        bestHeights.push_back(heights[i]);
                    }
                }
            }
        }
    }
}

int main() {
    ifstream infile("scara.in");
    ofstream outfile("scara.out");

    int H, N, M, p;
    infile >> H >> N >> M >> p;

    vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        heights[i] = i + 1;
    }

    double minEffort = 1e9;
    vector<int> bestHeights;

    do {
        calculateMinEffort(H, N, M, p, heights, minEffort, bestHeights);
    } while (next_permutation(heights.begin(), heights.end()));

    outfile << fixed << setprecision(2) << minEffort << endl;
    for (int i = 0; i < bestHeights.size(); ++i) {
        outfile << bestHeights[i] << " ";
    }
    outfile << endl;

    return 0;
}
```

### Explanation:

1. **Reading Input**: The input is read from the file `scara.in` which contains the values of `H`, `N`, `M`, and `p`.

2. **Generating Heights**: We generate a list of heights from 1 to N.

3. **Dynamic Programming Initialization**: We use a dynamic programming approach with a bitmask to keep track of the minimum effort required to reach each possible state.

4. **Effort Calculation**: For each possible state (represented by a bitmask), we calculate the new possible states by adding each height that hasn't been used yet. We update the effort required to reach the new state if it's less than the previously recorded effort.

5. **Finding the Minimum Effort**: After processing all states, we check which states reach the height `H` and keep track of the minimum effort and the corresponding heights.

6. **Output**: The minimum effort and the corresponding heights are written to the file `scara.out`.

This solution ensures that we find the minimum effort required to climb the stairs while adhering to the constraints provided in the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 4 5 2
```
Expected output:
```
9.00
1 4 2 3
```
Found output:
```
10.00
1 2 3 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution did not account for the additional effort `p` when Ion jumps multiple steps at once, and it also failed to properly handle the constraint of not exceeding the maximum height `M` when jumping multiple steps. This resulted in an incorrect calculation of the minimum effort.

To fix this, we need to properly implement the dynamic programming approach to consider these constraints and correctly calculate the effort. Here’s the revised solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <cmath>

using namespace std;

struct State {
    double effort;
    vector<int> heights;
};

int main() {
    ifstream infile("scara.in");
    ofstream outfile("scara.out");

    int H, N, M, p;
    infile >> H >> N >> M >> p;

    vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        heights[i] = i + 1;
    }

    double minEffort = 1e9;
    vector<int> bestHeights;

    do {
        vector<State> dp(H + 1, {1e9, {}});
        dp[0] = {0, {}};

        for (int i = 0; i < N; ++i) {
            for (int h = H; h >= 0; --h) {
                if (dp[h].effort == 1e9) continue;
                int sumHeight = 0;
                for (int j = i; j < N; ++j) {
                    sumHeight += heights[j];
                    if (sumHeight > M) break;
                    int newHeight = h + sumHeight;
                    if (newHeight > H) continue;
                    double newEffort = dp[h].effort + (sumHeight / double(j - i + 1)) + p;
                    if (newEffort < dp[newHeight].effort) {
                        dp[newHeight].effort = newEffort;
                        dp[newHeight].heights = dp[h].heights;
                        dp[newHeight].heights.insert(dp[newHeight].heights.end(), heights.begin() + i, heights.begin() + j + 1);
                    }
                }
            }
        }

        if (dp[H].effort < minEffort) {
            minEffort = dp[H].effort;
            bestHeights = dp[H].heights;
        }
    } while (next_permutation(heights.begin(), heights.end()));

    outfile << fixed << setprecision(2) << minEffort << endl;
    for (int i = 0; i < bestHeights.size(); ++i) {
        outfile << bestHeights[i] << " ";
    }
    outfile << endl;

    return 0;
}
```

### Explanation:

1. **Reading Input**: The input is read from the file `scara.in` which contains the values of `H`, `N`, `M`, and `p`.

2. **Generating Heights**: We generate a list of heights from 1 to N.

3. **Dynamic Programming Initialization**: We initialize a dynamic programming table `dp` where `dp[h]` holds the minimum effort to reach height `h` and the corresponding heights used to reach that height.

4. **Effort Calculation**: For each height `h` up to `H`, we consider jumping from height `h` to a new height by adding up to `N` steps, ensuring the sum of heights does not exceed `M`. The effort for each jump is calculated as the average height of the steps jumped plus the constant effort `p`. We update the DP table if the new effort is less than the previously recorded effort.

5. **Finding the Minimum Effort**: After processing all states, we check which states reach the height `H` and keep track of the minimum effort and the corresponding heights.

6. **Output**: The minimum effort and the corresponding heights are written to the file `scara.out`.

This solution ensures that we find the minimum effort required to climb the stairs while adhering to the constraints provided in the problem statement.
