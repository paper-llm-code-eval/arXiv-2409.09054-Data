{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/505/2024-09-15T20:53:12.799Z-09315.log",
  "attemptStart": 1726433592.799,
  "attemptEnd": 1726433605.449,
  "attemptDuration": 12.649999856948853,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nconst int MOD = 1000000009;\n\nstruct Player {\n    int start;\n    int end;\n    int foot;\n};\n\nbool intervalsOverlap(const Player& a, const Player& b) {\n    return !(a.end < b.start || b.end < a.start);\n}\n\nbool isValidTeam(const std::vector<Player>& players, const std::vector<int>& indices) {\n    bool hasLeftFooted = false;\n    bool hasRightFooted = false;\n    for (int index : indices) {\n        if (players[index].foot == 0) hasLeftFooted = true;\n        if (players[index].foot == 1) hasRightFooted = true;\n    }\n    if (!hasLeftFooted || !hasRightFooted) return false;\n\n    for (size_t i = 0; i < indices.size(); ++i) {\n        for (size_t j = i + 1; j < indices.size(); ++j) {\n            if (!intervalsOverlap(players[indices[i]], players[indices[j]])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvoid generateCombinations(const std::vector<Player>& players, int K, int start, std::vector<int>& current, int& count) {\n    if (current.size() == K) {\n        if (isValidTeam(players, current)) {\n            count = (count + 1) % MOD;\n        }\n        return;\n    }\n    for (size_t i = start; i < players.size(); ++i) {\n        current.push_back(i);\n        generateCombinations(players, K, i + 1, current, count);\n        current.pop_back();\n    }\n}\n\nint main() {\n    std::ifstream infile(\"fotbal.in\");\n    std::ofstream outfile(\"fotbal.out\");\n\n    int N, K;\n    infile >> N >> K;\n\n    std::vector<Player> players(N);\n    for (int i = 0; i < N; ++i) {\n        infile >> players[i].start >> players[i].end >> players[i].foot;\n    }\n\n    int count = 0;\n    std::vector<int> current;\n    generateCombinations(players, K, 0, current, count);\n\n    outfile << count << std::endl;\n\n    infile.close();\n    outfile.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1699,
  "metadata": {
    "id": 505,
    "examples": [
      {
        "in": "5 2\n1 8 0\n2 5 1\n3 7 0\n0 9 1\n6 12 0",
        "out": "5",
        "explainer": ""
      }
    ],
    "body": "Cei $N$ copii de la școala generală vor să formeze o echipă de fotbal compusă din $K$ elevi, dintre care cel puțin unul stângaci și cel puțin unul dreptaci. Pentru fiecare copil $i$ (de la $0$ la $N-1$) se cunoaște intervalul de timp în care acesta este disponibil pentru a face parte din echipă, sub forma unei perechi, $[start_{i}, end_{i}]$, cât și dacă este stângaci sau dreptaci. $K$ copii pot juca în aceeași echipa dacă intervalele de timp în care aceștia sunt disponibili se suprapun în cel puțin un punct (moment de timp).\n\n# Cerință\n\nSe cere numărul de moduri în care se poate alcătui o echipă cu $K$ dintre cei $N$ elevi; deoarece acest număr poate să fie foarte mare, el se va afișa modulo $10^9+9$.\n\n# Date de intrare\n\nPe prima linie din fișierul `fotbal.in` se găsesc numerele $N$ și $K$. Pe următoarele $N$ linii, se găsesc câte 3 numere naturale, $start_{i}$, $end_{i}$, $f_{i}$, unde $[start_{i}, end_{i}]$ reprezintă intervalul de timp în care al $i$-lea copil este disponibil pentru a face parte din echipă, iar $f_{i}$ reprezintă piciorul cu care joacă al $i$-lea copil, $f_{i}=1$ dacă al $i$-lea copil este dreptaci și $f_{i}=0$ dacă al $i$-lea copil este stângaci.\n\n# Date de ieșire\n\nFișierul `fotbal.out` va conține doar numărul de moduri cerut, în forma precizată în cerință. \n\n# Restricții și precizări\n\n* $2 \\leq K \\leq N \\leq 100 \\ 000$;\n* $0 \\leq start_{i} \\leq end_{i} \\leq 1 \\ 000 \\ 000 \\ 000$, pentru orice $i$ de la $0$ la $N-1$;\n* $f_{i} \\in \\{0, 1\\}$, pentru orice $i$ de la $0$ la $N-1$;\n* Pentru $25$ de puncte, $K = 2$ și $2 \\le N \\le 1 \\ 000$;\n* Pentru $17$ puncte, $K = 2$ și există cel mult $5$ copii care sunt stângaci;\n* Pentru $33$ de puncte, $2 \\leq K \\leq N \\leq 1 \\ 000$;\n* Pentru $25$ de puncte, nu există restricții suplimentare.",
    "header": {
      "problem_id": 505,
      "problem_name": "fotbal",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.3,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "fotbal.in",
      "output_filename": "fotbal.out",
      "multiple_solutions": false,
      "original_source": "OJI 2023 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "fotbal.in",
      "output": "fotbal.out"
    },
    "consoleInteraction": false
  }
}