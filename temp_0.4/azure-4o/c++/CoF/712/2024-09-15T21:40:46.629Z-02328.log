---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to consider all possible subsets of the given 10 numbers and check for pairs of disjoint subsets with equal sums. Given the constraints, we can use bit manipulation to generate subsets and a hashmap to store sums and their corresponding subsets. This will help us quickly find and count pairs of subsets with the same sum.

Here is the C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("numere.in");
    ofstream outfile("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        infile >> numbers[i];
    }

    unordered_map<int, vector<vector<int>>> sum_map;
    int total_pairs = 0;
    int max_sum = 0;
    vector<int> max_subset1, max_subset2;

    // Generate all possible subsets using bit manipulation
    for (int i = 1; i < (1 << 10); ++i) {
        vector<int> subset;
        int sum = 0;
        for (int j = 0; j < 10; ++j) {
            if (i & (1 << j)) {
                subset.push_back(numbers[j]);
                sum += numbers[j];
            }
        }
        sum_map[sum].push_back(subset);
    }

    // Find pairs of disjoint subsets with the same sum
    for (const auto& entry : sum_map) {
        const auto& subsets = entry.second;
        int num_subsets = subsets.size();
        if (num_subsets > 1) {
            for (int i = 0; i < num_subsets; ++i) {
                for (int j = i + 1; j < num_subsets; ++j) {
                    bool disjoint = true;
                    for (int x : subsets[i]) {
                        if (find(subsets[j].begin(), subsets[j].end(), x) != subsets[j].end()) {
                            disjoint = false;
                            break;
                        }
                    }
                    if (disjoint) {
                        ++total_pairs;
                        if (entry.first > max_sum) {
                            max_sum = entry.first;
                            max_subset1 = subsets[i];
                            max_subset2 = subsets[j];
                        }
                    }
                }
            }
        }
    }

    outfile << total_pairs << " " << max_sum << endl;
    for (int x : max_subset1) {
        outfile << x << " ";
    }
    outfile << endl;
    for (int x : max_subset2) {
        outfile << x << " ";
    }
    outfile << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the 10 numbers from `numere.in` into a vector `numbers`.
2. **Generating Subsets:** Using bit manipulation, we generate all possible subsets of the 10 numbers. Each subset is represented by a bitmask where each bit indicates whether the corresponding number is included in the subset.
3. **Storing Subsets by Sum:** We use an unordered map `sum_map` to store subsets grouped by their sums. The key is the sum, and the value is a vector of subsets that have that sum.
4. **Finding Disjoint Subsets:** For each sum, we check pairs of subsets to see if they are disjoint (i.e., they don't share any elements). If they are disjoint and their sum is the maximum found so far, we update our result.
5. **Outputting Results:** We write the number of pairs of disjoint subsets with equal sums and the maximum sum along with the corresponding subsets to `numere.out`.

This solution is efficient given the constraints and ensures we find the required pairs and maximum sum correctly.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
65 276
78 97 69 32 
60 49 86 71 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the provided solution is not in the logic but in the formatting of the output. The expected and found results are actually the same, but the found output has an extra space at the end of the lines for the subsets. This minor formatting issue can be fixed by ensuring that we do not add an extra space at the end of each line.

Here is the corrected solution with the necessary fixes applied:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("numere.in");
    ofstream outfile("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        infile >> numbers[i];
    }

    unordered_map<int, vector<vector<int>>> sum_map;
    int total_pairs = 0;
    int max_sum = 0;
    vector<int> max_subset1, max_subset2;

    // Generate all possible subsets using bit manipulation
    for (int i = 1; i < (1 << 10); ++i) {
        vector<int> subset;
        int sum = 0;
        for (int j = 0; j < 10; ++j) {
            if (i & (1 << j)) {
                subset.push_back(numbers[j]);
                sum += numbers[j];
            }
        }
        sum_map[sum].push_back(subset);
    }

    // Find pairs of disjoint subsets with the same sum
    for (const auto& entry : sum_map) {
        const auto& subsets = entry.second;
        int num_subsets = subsets.size();
        if (num_subsets > 1) {
            for (int i = 0; i < num_subsets; ++i) {
                for (int j = i + 1; j < num_subsets; ++j) {
                    bool disjoint = true;
                    for (int x : subsets[i]) {
                        if (find(subsets[j].begin(), subsets[j].end(), x) != subsets[j].end()) {
                            disjoint = false;
                            break;
                        }
                    }
                    if (disjoint) {
                        ++total_pairs;
                        if (entry.first > max_sum) {
                            max_sum = entry.first;
                            max_subset1 = subsets[i];
                            max_subset2 = subsets[j];
                        }
                    }
                }
            }
        }
    }

    outfile << total_pairs << " " << max_sum << endl;
    for (size_t i = 0; i < max_subset1.size(); ++i) {
        outfile << max_subset1[i];
        if (i < max_subset1.size() - 1) {
            outfile << " ";
        }
    }
    outfile << endl;
    for (size_t i = 0; i < max_subset2.size(); ++i) {
        outfile << max_subset2[i];
        if (i < max_subset2.size() - 1) {
            outfile << " ";
        }
    }
    outfile << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of Fixes:
1. **Output Formatting:** The key fix is ensuring that we do not add an extra space at the end of each line when printing the subsets. This is done by checking if the current element is the last one in the subset before adding a space.
2. **Code Structure:** The rest of the code remains the same as the logic is correct and efficient. It generates all possible subsets, groups them by their sums, and checks for disjoint subsets with equal sums.

This solution should now match the expected output format exactly.
