---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's break down the problem and then provide an efficient solution in C++.

### Problem Breakdown
1. **Input Reading**: We have to read 10 distinct two-digit numbers from a file.
2. **Subset Generation**: We need to generate all possible subsets of these 10 numbers.
3. **Sum Calculation**: For each subset, calculate its sum.
4. **Disjoint Subsets with Equal Sum**: Check for pairs of disjoint subsets that have the same sum.
5. **Maximal Sum**: Among all pairs of disjoint subsets with equal sum, find the pair with the maximal sum.
6. **Output Writing**: Write the results to the output file.

### Approach
1. **Bitmasking**: Use bitmasking to generate all possible subsets of the 10 numbers.
2. **HashMap**: Use a hashmap to store sums of subsets and their corresponding subsets.
3. **Disjoint Check**: Ensure the subsets are disjoint.
4. **Maximal Sum**: Track the maximum sum and corresponding subsets.

### C++ Implementation
Here's the C++ code to solve the problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream in("numere.in");
    ofstream out("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        in >> numbers[i];
    }

    unordered_map<int, vector<vector<int>>> sum_to_subsets;
    int max_sum = 0;
    vector<int> best_subset1, best_subset2;

    // Generate all possible subsets using bitmasking
    for (int mask = 1; mask < (1 << 10); ++mask) {
        vector<int> subset;
        int sum = 0;
        for (int i = 0; i < 10; ++i) {
            if (mask & (1 << i)) {
                subset.push_back(numbers[i]);
                sum += numbers[i];
            }
        }
        sum_to_subsets[sum].push_back(subset);
    }

    int count_pairs = 0;

    // Check for pairs of disjoint subsets with equal sum
    for (const auto& entry : sum_to_subsets) {
        const auto& subsets = entry.second;
        int n = subsets.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                const auto& subset1 = subsets[i];
                const auto& subset2 = subsets[j];
                // Check if subsets are disjoint
                bool disjoint = true;
                for (int x : subset1) {
                    if (find(subset2.begin(), subset2.end(), x) != subset2.end()) {
                        disjoint = false;
                        break;
                    }
                }
                if (disjoint) {
                    ++count_pairs;
                    int current_sum = entry.first;
                    if (current_sum > max_sum) {
                        max_sum = current_sum;
                        best_subset1 = subset1;
                        best_subset2 = subset2;
                    }
                }
            }
        }
    }

    out << count_pairs << " " << max_sum << "\n";
    for (int x : best_subset1) {
        out << x << " ";
    }
    out << "\n";
    for (int x : best_subset2) {
        out << x << " ";
    }
    out << "\n";

    return 0;
}
```

### Explanation
1. **Input Reading**: The numbers are read from `numere.in` and stored in a vector.
2. **Subset Generation**: Using bitmasking, all possible subsets are generated.
3. **Sum Calculation and Storage**: Sums of subsets are stored in a hashmap, mapping each sum to a list of subsets that produce that sum.
4. **Disjoint Subsets Check**: For each sum, check pairs of subsets to see if they are disjoint and have the same sum.
5. **Maximal Sum**: Track the maximum sum and corresponding subsets.
6. **Output Writing**: Write the results to `numere.out`.

This solution efficiently handles the problem within the constraints, using bitmasking and hashmap for optimal performance.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
65 276
78 97 69 32 
60 49 86 71 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Let's evaluate the differences between the expected and found results:

### Differences
1. The expected and found outputs are identical in terms of values and structure. The only difference is an extra space at the end of the lines in the found output.

### Explanation
The issue is minor and related to formatting. Specifically, the output lines have an extra space at the end, which is not required. This can be fixed by ensuring that spaces are only inserted between elements and not after the last element.

### Fix
We need to adjust the output formatting to avoid trailing spaces.

### Revised Solution
Here's the corrected C++ code with proper formatting:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream in("numere.in");
    ofstream out("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        in >> numbers[i];
    }

    unordered_map<int, vector<vector<int>>> sum_to_subsets;
    int max_sum = 0;
    vector<int> best_subset1, best_subset2;

    // Generate all possible subsets using bitmasking
    for (int mask = 1; mask < (1 << 10); ++mask) {
        vector<int> subset;
        int sum = 0;
        for (int i = 0; i < 10; ++i) {
            if (mask & (1 << i)) {
                subset.push_back(numbers[i]);
                sum += numbers[i];
            }
        }
        sum_to_subsets[sum].push_back(subset);
    }

    int count_pairs = 0;

    // Check for pairs of disjoint subsets with equal sum
    for (const auto& entry : sum_to_subsets) {
        const auto& subsets = entry.second;
        int n = subsets.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                const auto& subset1 = subsets[i];
                const auto& subset2 = subsets[j];
                // Check if subsets are disjoint
                bool disjoint = true;
                for (int x : subset1) {
                    if (find(subset2.begin(), subset2.end(), x) != subset2.end()) {
                        disjoint = false;
                        break;
                    }
                }
                if (disjoint) {
                    ++count_pairs;
                    int current_sum = entry.first;
                    if (current_sum > max_sum) {
                        max_sum = current_sum;
                        best_subset1 = subset1;
                        best_subset2 = subset2;
                    }
                }
            }
        }
    }

    out << count_pairs << " " << max_sum << "\n";
    
    for (size_t i = 0; i < best_subset1.size(); ++i) {
        if (i > 0) out << " ";
        out << best_subset1[i];
    }
    out << "\n";
    
    for (size_t i = 0; i < best_subset2.size(); ++i) {
        if (i > 0) out << " ";
        out << best_subset2[i];
    }
    out << "\n";

    return 0;
}
```

### Explanation of Fixes
1. **Output Formatting**: The revised code ensures that spaces are inserted only between elements and not after the last element in each subset. This is done by checking the index and adding spaces conditionally.

### Summary
The primary issue was the extra spaces at the end of the output lines. The revised solution fixes this by carefully formatting the output, ensuring that no trailing spaces are included. This makes the output match the expected format exactly.
