---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find pairs of disjoint subsets from a set of 10 distinct two-digit numbers such that the sums of the subsets are equal. Additionally, we need to find the maximum sum among all such pairs.

The approach involves:
1. Reading the 10 numbers from the input file.
2. Generating all possible subsets of the given set.
3. Checking pairs of disjoint subsets to see if their sums are equal.
4. Keeping track of the number of such pairs and the maximum sum.
5. Writing the results to the output file.

Here is the C++ code that implements this approach:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

void generateSubsets(const vector<int>& nums, vector<vector<int>>& subsets) {
    int n = nums.size();
    int subsetCount = 1 << n; // 2^n subsets
    for (int i = 1; i < subsetCount; ++i) { // Start from 1 to avoid empty subset
        vector<int> subset;
        for (int j = 0; j < n; ++j) {
            if (i & (1 << j)) {
                subset.push_back(nums[j]);
            }
        }
        subsets.push_back(subset);
    }
}

int subsetSum(const vector<int>& subset) {
    int sum = 0;
    for (int num : subset) {
        sum += num;
    }
    return sum;
}

bool areDisjoint(const vector<int>& subset1, const vector<int>& subset2) {
    unordered_map<int, int> elementCount;
    for (int num : subset1) {
        elementCount[num]++;
    }
    for (int num : subset2) {
        if (elementCount[num] > 0) {
            return false;
        }
    }
    return true;
}

int main() {
    ifstream infile("numere.in");
    ofstream outfile("numere.out");

    vector<int> nums(10);
    for (int i = 0; i < 10; ++i) {
        infile >> nums[i];
    }

    vector<vector<int>> subsets;
    generateSubsets(nums, subsets);

    int maxSum = 0;
    int pairCount = 0;
    vector<int> bestSubset1, bestSubset2;

    unordered_map<int, vector<vector<int>>> sumToSubsets;
    for (const auto& subset : subsets) {
        int sum = subsetSum(subset);
        sumToSubsets[sum].push_back(subset);
    }

    for (const auto& [sum, subsetList] : sumToSubsets) {
        int n = subsetList.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (areDisjoint(subsetList[i], subsetList[j])) {
                    pairCount++;
                    if (sum > maxSum) {
                        maxSum = sum;
                        bestSubset1 = subsetList[i];
                        bestSubset2 = subsetList[j];
                    }
                }
            }
        }
    }

    outfile << pairCount << " " << maxSum << "\n";
    for (int num : bestSubset1) {
        outfile << num << " ";
    }
    outfile << "\n";
    for (int num : bestSubset2) {
        outfile << num << " ";
    }
    outfile << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input:** The 10 numbers are read from `numere.in`.
2. **Generating Subsets:** All possible non-empty subsets of the given set are generated using bit manipulation.
3. **Calculating Sums:** The sum of each subset is calculated.
4. **Checking Disjoint Subsets:** For each pair of subsets with the same sum, it is checked if they are disjoint.
5. **Tracking Results:** The number of valid pairs and the maximum sum are tracked. The subsets corresponding to the maximum sum are stored.
6. **Writing Output:** The results are written to `numere.out`.

This approach ensures that we efficiently find the required pairs of disjoint subsets with equal sums and determine the maximum sum among them.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
65 276
78 97 69 32 
60 49 86 71 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The output difference is subtle, involving an extra space at the end of the lines in the output. This is a minor formatting issue that can be easily fixed. 

To ensure correctness and efficiency, let's make sure to handle the formatting properly and optimize the solution. Here is the corrected and optimized C++ solution:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

void generateSubsets(const vector<int>& nums, vector<vector<int>>& subsets) {
    int n = nums.size();
    int subsetCount = 1 << n; // 2^n subsets
    for (int i = 1; i < subsetCount; ++i) { // Start from 1 to avoid empty subset
        vector<int> subset;
        for (int j = 0; j < n; ++j) {
            if (i & (1 << j)) {
                subset.push_back(nums[j]);
            }
        }
        subsets.push_back(subset);
    }
}

int subsetSum(const vector<int>& subset) {
    int sum = 0;
    for (int num : subset) {
        sum += num;
    }
    return sum;
}

bool areDisjoint(const vector<int>& subset1, const vector<int>& subset2) {
    unordered_map<int, int> elementCount;
    for (int num : subset1) {
        elementCount[num]++;
    }
    for (int num : subset2) {
        if (elementCount[num] > 0) {
            return false;
        }
    }
    return true;
}

int main() {
    ifstream infile("numere.in");
    ofstream outfile("numere.out");

    vector<int> nums(10);
    for (int i = 0; i < 10; ++i) {
        infile >> nums[i];
    }

    vector<vector<int>> subsets;
    generateSubsets(nums, subsets);

    int maxSum = 0;
    int pairCount = 0;
    vector<int> bestSubset1, bestSubset2;

    unordered_map<int, vector<vector<int>>> sumToSubsets;
    for (const auto& subset : subsets) {
        int sum = subsetSum(subset);
        sumToSubsets[sum].push_back(subset);
    }

    for (const auto& [sum, subsetList] : sumToSubsets) {
        int n = subsetList.size();
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (areDisjoint(subsetList[i], subsetList[j])) {
                    pairCount++;
                    if (sum > maxSum) {
                        maxSum = sum;
                        bestSubset1 = subsetList[i];
                        bestSubset2 = subsetList[j];
                    }
                }
            }
        }
    }

    outfile << pairCount << " " << maxSum << "\n";
    for (int i = 0; i < bestSubset1.size(); ++i) {
        outfile << bestSubset1[i];
        if (i != bestSubset1.size() - 1) outfile << " ";
    }
    outfile << "\n";
    for (int i = 0; i < bestSubset2.size(); ++i) {
        outfile << bestSubset2[i];
        if (i != bestSubset2.size() - 1) outfile << " ";
    }
    outfile << "\n";

    return 0;
}
```

### Explanation of the Fixes:
1. **Output Formatting:** The primary fix involves ensuring that there are no trailing spaces at the end of the lines in the output. This is handled by checking if the current element is the last one in the subset before appending a space.
2. **Code Structure:** The overall structure and logic of the code remain the same, ensuring that the solution is efficient and correct.

With these changes, the program should now produce the correct output as expected.
