{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/712/2024-09-15T21:41:02.260Z-09190.log",
  "attemptStart": 1726436462.26,
  "attemptEnd": 1726436506.31,
  "attemptDuration": 44.049999952316284,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to check if two subsets are disjoint\nbool areDisjoint(const vector<int>& subset1, const vector<int>& subset2) {\n    unordered_map<int, int> countMap;\n    for (int num : subset1) {\n        countMap[num]++;\n    }\n    for (int num : subset2) {\n        if (countMap[num] > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    ifstream infile(\"numere.in\");\n    ofstream outfile(\"numere.out\");\n\n    vector<int> nums(10);\n    for (int i = 0; i < 10; ++i) {\n        infile >> nums[i];\n    }\n\n    unordered_map<int, vector<vector<int>>> sumMap;\n\n    // Generate all subsets using bitmasking\n    int n = nums.size();\n    for (int mask = 1; mask < (1 << n); ++mask) {\n        vector<int> subset;\n        int sum = 0;\n        for (int i = 0; i < n; ++i) {\n            if (mask & (1 << i)) {\n                subset.push_back(nums[i]);\n                sum += nums[i];\n            }\n        }\n        sumMap[sum].push_back(subset);\n    }\n\n    int maxSum = 0;\n    vector<int> subset1, subset2;\n    int pairCount = 0;\n\n    for (const auto& entry : sumMap) {\n        const auto& subsetList = entry.second;\n        if (subsetList.size() > 1) {\n            for (size_t i = 0; i < subsetList.size(); ++i) {\n                for (size_t j = i + 1; j < subsetList.size(); ++j) {\n                    if (areDisjoint(subsetList[i], subsetList[j])) {\n                        pairCount++;\n                        if (entry.first > maxSum) {\n                            maxSum = entry.first;\n                            subset1 = subsetList[i];\n                            subset2 = subsetList[j];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    outfile << pairCount << \" \" << maxSum << endl;\n\n    // Output the first subset\n    for (size_t i = 0; i < subset1.size(); ++i) {\n        outfile << subset1[i];\n        if (i < subset1.size() - 1) {\n            outfile << \" \";\n        }\n    }\n    outfile << endl;\n\n    // Output the second subset\n    for (size_t i = 0; i < subset2.size(); ++i) {\n        outfile << subset2[i];\n        if (i < subset2.size() - 1) {\n            outfile << \" \";\n        }\n    }\n    outfile << endl;\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3447,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}