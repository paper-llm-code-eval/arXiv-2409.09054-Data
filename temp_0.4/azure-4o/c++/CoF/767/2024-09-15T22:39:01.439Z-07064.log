---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to identify the maximum number of valid rectangles that can be formed from the given points. Here's a step-by-step approach to achieve this:

1. **Read and Parse Input:**
   - Read the number of points \( N \) and the maximum color code \( MaxC \).
   - Read the coordinates and color codes of the points.

2. **Organize Points by Color:**
   - Store points in a dictionary where the key is the color and the value is a list of points with that color.

3. **Check for Valid Rectangles:**
   - For each color, consider all pairs of points that could form the diagonals of a rectangle.
   - Check if the other two points required to form the rectangle exist.

4. **Count Valid Rectangles:**
   - For each valid rectangle found, increment a counter.

Given the constraints, this approach should be efficient. The most time-consuming part is checking all pairs of points for each color, but since \( N \leq 1000 \) and \( C \leq 5 \), this is manageable.

Here's the C++ code implementing the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <set>

using namespace std;

struct Point {
    int x, y;
};

int main() {
    ifstream fin("dreptc.in");
    ofstream fout("dreptc.out");

    int N, MaxC;
    fin >> N >> MaxC;

    unordered_map<int, vector<Point>> colorPoints;

    for (int i = 0; i < N; ++i) {
        int x, y, c;
        fin >> x >> y >> c;
        colorPoints[c].push_back({x, y});
    }

    int maxRectangles = 0;

    for (const auto& entry : colorPoints) {
        const vector<Point>& points = entry.second;
        int numPoints = points.size();
        set<pair<int, int>> pointSet;
        for (const auto& p : points) {
            pointSet.insert({p.x, p.y});
        }

        for (int i = 0; i < numPoints; ++i) {
            for (int j = i + 1; j < numPoints; ++j) {
                const Point& p1 = points[i];
                const Point& p2 = points[j];
                if (p1.x != p2.x && p1.y != p2.y) {
                    if (pointSet.count({p1.x, p2.y}) && pointSet.count({p2.x, p1.y})) {
                        ++maxRectangles;
                    }
                }
            }
        }
    }

    fout << maxRectangles / 2 << endl;

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read the number of points \( N \) and the maximum color code \( MaxC \).
   - We then read each point's coordinates and color and store them in a dictionary where the key is the color.

2. **Organizing Points by Color:**
   - Points are stored in a vector for each color.

3. **Checking for Valid Rectangles:**
   - For each color, we use nested loops to consider all pairs of points.
   - For each pair of points, we check if they can form the diagonals of a rectangle.
   - We verify if the other two points required to form the rectangle exist using a set for quick lookup.

4. **Counting Rectangles:**
   - We count each valid rectangle found. Since each rectangle is counted twice (once for each diagonal pair), we divide the final count by 2.

This solution ensures that we efficiently find and count all valid rectangles that meet the criteria.
