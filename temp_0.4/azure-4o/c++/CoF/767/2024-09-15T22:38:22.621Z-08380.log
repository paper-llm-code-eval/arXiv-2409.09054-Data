---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of finding the maximum number of correct rectangles, we need to follow these steps:

1. **Read the Input**: Parse the input file to get the number of points and their coordinates along with their color codes.
2. **Organize Points by Color**: Group points by their color to simplify the search for rectangles.
3. **Find Rectangles**: For each color group, find all possible pairs of points that can form the diagonals of a rectangle and check if the other two points of the rectangle exist.
4. **Count Rectangles**: Count the valid rectangles for each color group and keep track of the maximum count.

Here is the C++ code that implements this logic efficiently:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <set>
#include <utility>

using namespace std;

int main() {
    ifstream infile("dreptc.in");
    ofstream outfile("dreptc.out");

    int N, MaxC;
    infile >> N >> MaxC;

    unordered_map<int, vector<pair<int, int>>> pointsByColor;
    for (int i = 0; i < N; ++i) {
        int x, y, c;
        infile >> x >> y >> c;
        pointsByColor[c].emplace_back(x, y);
    }

    int maxRectangles = 0;

    for (const auto& entry : pointsByColor) {
        const auto& points = entry.second;
        int numPoints = points.size();

        if (numPoints < 4) continue;

        set<pair<int, int>> pointSet(points.begin(), points.end());

        int rectangles = 0;
        for (int i = 0; i < numPoints; ++i) {
            for (int j = i + 1; j < numPoints; ++j) {
                if (points[i].first != points[j].first && points[i].second != points[j].second) {
                    if (pointSet.count({points[i].first, points[j].second}) &&
                        pointSet.count({points[j].first, points[i].second})) {
                        ++rectangles;
                    }
                }
            }
        }

        maxRectangles += rectangles / 2;
    }

    outfile << maxRectangles << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: 
   - We read the number of points `N` and the maximum color code `MaxC`.
   - We then read each point's coordinates and color, storing them in a map where the key is the color and the value is a vector of points with that color.

2. **Organizing Points by Color**:
   - We use an unordered_map to group points by their color.

3. **Finding Rectangles**:
   - For each color group, we use a set to quickly check the existence of points.
   - We iterate through each pair of points and check if they can form the diagonal of a rectangle by ensuring the other two required points exist in the set.

4. **Counting Rectangles**:
   - We count the valid rectangles for each color group and keep a running total of the maximum number of rectangles.

This approach ensures that we efficiently check for rectangles by leveraging the properties of sets for quick lookups, making the solution both correct and performant.
