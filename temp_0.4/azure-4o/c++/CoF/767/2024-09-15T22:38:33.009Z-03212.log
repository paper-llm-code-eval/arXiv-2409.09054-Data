---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to identify all possible rectangles in the given set of points that have vertices of the same color and sides parallel to the coordinate axes. Here’s a step-by-step approach to achieve this efficiently:

1. **Input Reading**: Read the input from the file `dreptc.in`.
2. **Data Storage**: Store the points in a data structure that allows efficient lookup. Since we need to check for points with the same color, it’s logical to use a map where the key is the color and the value is a list of points of that color.
3. **Rectangle Detection**: For each color, check all pairs of points to see if they can form the diagonals of a rectangle. If they can, ensure the other two points required to form the rectangle also exist in the set.
4. **Output the Result**: Write the result to `dreptc.out`.

Here’s the implementation of the above logic in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>

using namespace std;

struct Point {
    int x, y;
};

int main() {
    ifstream fin("dreptc.in");
    ofstream fout("dreptc.out");

    int N, MaxC;
    fin >> N >> MaxC;

    unordered_map<int, vector<Point>> colorPoints;
    for (int i = 0; i < N; ++i) {
        int x, y, c;
        fin >> x >> y >> c;
        colorPoints[c].push_back({x, y});
    }

    int maxRectangles = 0;

    for (const auto& entry : colorPoints) {
        const vector<Point>& points = entry.second;
        int numPoints = points.size();
        unordered_set<string> pointSet;
        for (const auto& point : points) {
            pointSet.insert(to_string(point.x) + "," + to_string(point.y));
        }

        int count = 0;
        for (int i = 0; i < numPoints; ++i) {
            for (int j = i + 1; j < numPoints; ++j) {
                if (points[i].x != points[j].x && points[i].y != points[j].y) {
                    string p1 = to_string(points[i].x) + "," + to_string(points[j].y);
                    string p2 = to_string(points[j].x) + "," + to_string(points[i].y);
                    if (pointSet.count(p1) && pointSet.count(p2)) {
                        ++count;
                    }
                }
            }
        }
        maxRectangles += count / 2;
    }

    fout << maxRectangles << endl;

    return 0;
}
```

### Explanation

1. **Data Input**: The input is read from `dreptc.in` using `ifstream`. Points are stored in a map where the key is the color and the value is a vector of points of that color.
2. **Rectangle Detection**: For each color, we use a nested loop to iterate over pairs of points. If the points can be diagonals of a rectangle (i.e., they form a rectangle with sides parallel to the axes), we check if the other two points required to complete the rectangle exist using a set for quick lookup.
3. **Counting Rectangles**: Each valid rectangle is counted, and since each rectangle is counted twice (once for each diagonal), we divide the count by 2.
4. **Output**: The result is written to `dreptc.out` using `ofstream`.

This approach ensures that the solution is efficient and works within the given constraints.
