{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/767/2024-09-15T22:39:12.288Z-02997.log",
  "attemptStart": 1726439952.288,
  "attemptEnd": 1726439963.208,
  "attemptDuration": 10.919999837875366,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <set>\n\nstruct Point {\n    int x, y;\n};\n\nint main() {\n    std::ifstream infile(\"dreptc.in\");\n    std::ofstream outfile(\"dreptc.out\");\n\n    int N, MaxC;\n    infile >> N >> MaxC;\n\n    std::unordered_map<int, std::vector<Point>> colorPoints;\n\n    for (int i = 0; i < N; ++i) {\n        int x, y, c;\n        infile >> x >> y >> c;\n        colorPoints[c].emplace_back(Point{x, y});\n    }\n\n    int maxRectangles = 0;\n\n    for (auto &entry : colorPoints) {\n        auto &points = entry.second;\n        std::set<std::pair<int, int>> pointSet;\n        for (auto &p : points) {\n            pointSet.insert({p.x, p.y});\n        }\n\n        int count = 0;\n        for (size_t i = 0; i < points.size(); ++i) {\n            for (size_t j = i + 1; j < points.size(); ++j) {\n                if (points[i].x != points[j].x && points[i].y != points[j].y) {\n                    if (pointSet.count({points[i].x, points[j].y}) && pointSet.count({points[j].x, points[i].y})) {\n                        ++count;\n                    }\n                }\n            }\n        }\n        maxRectangles += count / 2;\n    }\n\n    outfile << maxRectangles << std::endl;\n\n    infile.close();\n    outfile.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1375,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}