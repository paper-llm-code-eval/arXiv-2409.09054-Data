---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:The sequence described in the problem is known as the "Look-and-say" sequence. Each term is generated by describing the previous term. For example, starting with "1":

1. "1" is read as "one 1" → "11"
2. "11" is read as "two 1s" → "21"
3. "21" is read as "one 2, then one 1" → "1211"
4. "1211" is read as "one 1, one 2, then two 1s" → "111221"

Given the constraints, we need to generate the sequence up to the 35th term efficiently. Let's implement this in C++:

```cpp
#include <fstream>
#include <string>

std::string getNextTerm(const std::string& current) {
    std::string next;
    int count = 1;
    char digit = current[0];

    for (size_t i = 1; i < current.size(); ++i) {
        if (current[i] == digit) {
            ++count;
        } else {
            next += std::to_string(count) + digit;
            count = 1;
            digit = current[i];
        }
    }
    next += std::to_string(count) + digit;
    return next;
}

int main() {
    std::ifstream inFile("sir.in");
    std::ofstream outFile("sir.out");

    int n;
    inFile >> n;

    std::string term = "1";
    for (int i = 1; i < n; ++i) {
        term = getNextTerm(term);
    }

    outFile << term << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read the integer `n` from the file `sir.in`.

2. **Generating the Sequence:**
   - We start with the initial term "1".
   - For each term from 1 to `n-1`, we generate the next term using the `getNextTerm` function.

3. **getNextTerm Function:**
   - This function takes the current term as input and generates the next term by counting consecutive digits and appending the count followed by the digit to the result string.

4. **Writing Output:**
   - Finally, we write the `n`-th term to the file `sir.out`.

This solution ensures that we efficiently generate each term of the sequence up to the required `n`-th term and handle the constraints given in the problem.
