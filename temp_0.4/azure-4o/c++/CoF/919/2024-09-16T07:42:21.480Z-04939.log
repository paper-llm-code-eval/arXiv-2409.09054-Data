---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cartonase.in` and write to `cartonase.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel are $N$ cartonașe. Fiecare cartonaș are înscrise două numere (un număr, $s$, în partea stângă, și celălalt număr, $d$, în partea dreaptă). El a așezat cartonașele într-un șir, lipite unul de celălalt, astfel încât numărul din partea dreaptă a primului cartonaș este lipit de numărul din partea stângă a celui de-al doilea cartonaș, numărul din partea dreaptă a celui de al doilea cartonaș este lipit de numărul din partea stângă a celui de-al treilea cartonaș etc. Spunem că două cartonașe alăturate "se potrivesc" dacă numărul din dreapta al primului cartonaș este egal cu numărul din stânga al celui de al doilea cartonaș. Ionel observă că sunt perechi de cartonașe alăturate care "se potrivesc" și chiar secvențe de mai multe cartonașe alăturate, în care primul "se potrivește" cu al doilea, al doilea "se potrivește" cu al treilea, etc.

# Cerință
Scrieţi un program care să citească numărul $N$ de cartonașe, numerele înscrise pe fiecare cartonaș și determină:
1) Numărul de perechi de cartonașe care "se potrivesc".
2) Numărul de cartonașe din cea mai lungă secvență în care fiecare două cartonașe alăturate "se potrivesc".
3) Numărul de secvențe cu număr maxim de cartonașe care "se potrivesc".

# Date de intrare
Fişierul de intrare `cartonase.in` conţine doar numere naturale nenule:
- pe prima linie se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie a fișierului se găsește numărul natural $N$, cu semnificația din enunț.
- pe fiecare dintre următoarele $N$ linii se află, în acestă ordine, câte două numere naturale $s$ şi $d$, separate printr-un spațiu, cu semnificația din enunț pentru un cartonaș. Perechile de numere sunt date în ordinea în care cartonașele corespunzătoare lor apar în șirul lui Ionel.

# Date de ieșire
Fişierul de ieşire `cartonase.out` va conţine pe prima linie un număr natural reprezentând răspunsul la cerința specificată.

# Restricții și precizări
- $1 \leq N \leq 500$
- $1 \leq s \leq 10\ 000$
- $1 \leq d \leq 10\ 000$
- Pentru rezolvarea fiecărei cerințe se obțin câte 30 de puncte.

---

Example:
`cartonase.in`
```
1
5
2 10
10 5
10 2
2 10
37 5
```

`cartonase.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream fin("cartonase.in");
    std::ofstream fout("cartonase.out");

    int C, N;
    fin >> C >> N;

    std::vector<std::pair<int, int>> cards(N);
    for (int i = 0; i < N; ++i) {
        fin >> cards[i].first >> cards[i].second;
    }

    if (C == 1) {
        // Count pairs that match
        int count = 0;
        for (int i = 0; i < N - 1; ++i) {
            if (cards[i].second == cards[i + 1].first) {
                ++count;
            }
        }
        fout << count << "\n";
    } else if (C == 2) {
        // Find the longest sequence of matching pairs
        int maxLength = 0, currentLength = 0;
        for (int i = 0; i < N - 1; ++i) {
            if (cards[i].second == cards[i + 1].first) {
                ++currentLength;
                if (currentLength > maxLength) {
                    maxLength = currentLength;
                }
            } else {
                currentLength = 0;
            }
        }
        fout << maxLength + 1 << "\n"; // +1 because we count the number of cards, not the number of pairs
    } else if (C == 3) {
        // Find the number of maximum length sequences
        int maxLength = 0, currentLength = 0, maxCount = 0;
        for (int i = 0; i < N - 1; ++i) {
            if (cards[i].second == cards[i + 1].first) {
                ++currentLength;
                if (currentLength > maxLength) {
                    maxLength = currentLength;
                    maxCount = 1;
                } else if (currentLength == maxLength) {
                    ++maxCount;
                }
            } else {
                currentLength = 0;
            }
        }
        if (maxLength == 0) {
            fout << N << "\n"; // If no matching pairs, each card is a sequence of length 1
        } else {
            fout << maxCount << "\n";
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the input values from `cartonase.in` using `ifstream`. The first value is `C`, which indicates which task to solve. The second value is `N`, the number of cards. The subsequent pairs of integers represent the cards.

2. **Task 1**: If `C` is 1, the program counts the number of consecutive pairs of cards where the right number of the first card matches the left number of the next card.

3. **Task 2**: If `C` is 2, the program finds the length of the longest sequence of consecutive matching pairs. It keeps track of the current sequence length and updates the maximum length found.

4. **Task 3**: If `C` is 3, the program counts the number of sequences that have the maximum length found. It also handles the case where no matching pairs are found by outputting `N`, as each card itself is a sequence of length 1.

5. **Output**: The result is written to `cartonase.out` using `ofstream`.

### Example:
For the example input:
```
1
5
2 10
10 5
10 2
2 10
37 5
```
The output is `2` because there are 2 pairs of consecutive cards that match:
- (2, 10) and (10, 5)
- (2, 10) and (10, 2)
