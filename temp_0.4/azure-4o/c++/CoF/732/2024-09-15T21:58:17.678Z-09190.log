---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ron.in` and write to `ron.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Lidorienii şi senopictii sunt în conflict pentru ronul fermecat, fiind arbitraţi de orintieni, aleşi de părţile beligerante drept judecători. Orintia a propus: „Ronul fermecat va fi ascuns printre alţi $k$ roni cu acelaşi aspect, dar toţi realizaţi dintr-un material mai greu decât originalul, având masa, standard, diferită de cea a ronului femecat. Pentru a-l descoperi, vă gandiţi că aveţi la dispoziţie o balanţă şi toţi cei $k+1$ roni. Lidorienii, apoi senopictii vor spune un singur număr, reprezentând numărul maxim de cântăriri admis pentru descoperirea ronului fermecat. Dacă nici una dintre părţi nu spune numărul corect, atunci ronul fermecat va rămâne în Orintia. Dacă ambele părţi spun numărul corect, ronul va rămâne tot la orintieni.”. 

# Cerință

Sarcina voastră este să indicaţi ţara care câştigă ronul fermecat: Lidoria - $L$, Senopictia – $S$, Orintia – $O$.


# Date de intrare

Fisierul `ron.in` are pe prima linie numărul $k$, iar pe linia a doua două numere $RL$, respectiv $RS$ separate printr-un spaţiu. 4RL$ reprezintă răspunsul lidorienilor, iar $RS$ răspunsul senopictilor.

# Date de ieșire

Fisierul `ron.out` contine una din literele $L, S$ şi $O$.

# Restricții și precizări

* $1 < k < 10 \ 000$;
* $RL, RS$ sunt numere naturale cel mult egale cu $k$
* ronul fermecat este un cuboid gravat cu semnele fixe ale puterii
* numărul maxim de cântăriri admis nu se obţine cântărind un ron de mai multe ori şi nici cântărind de cât mai multe ori ronii; cântărirea presupune să existe, pe fiecare braţ al balanţei, un număr egal de roni ($1 - 1$, $2 - 2$, etc.)

---

Example:
`ron.in`
```
7
1 3
```

`ron.out`
```
O
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to determine the minimum number of weighings required to identify the unique lighter ron among the k+1 rons. This is a classic problem that can be solved using a divide-and-conquer strategy.

The key insight is that in each weighing, we can divide the rons into three groups:
1. Two groups of equal size to place on each side of the balance.
2. One group that is not weighed.

By comparing the two groups on the balance, we can determine which group contains the lighter ron (if the balance tips) or if the lighter ron is in the group not weighed (if the balance is even).

The minimum number of weighings required to identify the lighter ron among k+1 rons can be derived using the formula:
\[ \text{weighings} = \lceil \log_3(k+1) \rceil \]

Given this, we can compare the responses from Lidoria (RL) and Senopictia (RS) to the actual minimum number of weighings. If neither response is correct, Orintia wins. If only one response is correct, that party wins. If both responses are correct, Orintia wins.

Let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <algorithm>

int main() {
    std::ifstream infile("ron.in");
    std::ofstream outfile("ron.out");

    int k, RL, RS;
    infile >> k >> RL >> RS;

    int min_weighings = std::ceil(std::log(k + 1) / std::log(3));

    if (RL == min_weighings && RS == min_weighings) {
        outfile << "O";
    } else if (RL == min_weighings) {
        outfile << "L";
    } else if (RS == min_weighings) {
        outfile << "S";
    } else {
        outfile << "O";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

This solution reads the input from `ron.in`, calculates the minimum number of weighings required, and writes the result to `ron.out`. It ensures that the correct winner is determined based on the responses from Lidoria and Senopictia.
