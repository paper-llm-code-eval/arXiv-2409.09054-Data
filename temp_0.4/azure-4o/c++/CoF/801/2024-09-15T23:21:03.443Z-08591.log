---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cladiri.in` and write to `cladiri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Institutul de Fizică a Pământului studiază efectele unui potențial cutremur folosind simulări computerizate. Harta plană a clădirilor de pe un teritoriu oarecare este reprezentată folosind coordonatele GPS în plan, longitudine și latitudine, față de un reper considerat de coordonate ($0, 0$), ca în figura de mai jos.

Fiecare dintre clădirile aflate pe hartă, au două coordonate GPS, (Longitudine, Latitudine) și un Grad de rezistență la cutremure.
Un cutremur se poate produce în orice punct de coordonate de pe hartă, numit centrul seismului și are o anumită intensitate. Unda de șoc se propagă sub forma unor pătrate concentrice cu centrul seismului, numite nivele (nivelul $0$ reprezintă centrul seismului, nivelul $1$ primul pătrat concentric, nivelul $2$ al doilea pătrat concentric și așa mai departe). Intensitatea slăbește la fiecare pătrat concentric cu centrul seismului cu câte o unitate. Clădirile sunt afectate de cutremur doar dacă gradul lor de rezistență la cutremur este mai mic sau egal cu intensitatea cutremurului în poziția clădirii.

~[cladiri.png]

# Cerință

Scrieți un program care să citească coordonatele centrului seismului și intensitatea sa în acel punct, precum și coordonatele clădirilor și gradul lor de rezistență la cutremur, și apoi să determine numărul $N$ total de clădiri afectate; numărul $M$ maxim de clădiri afectate pe un nivel; numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Date de intrare

Fișierul de intrare `cladiri.in` conține pe prima linie, trei numere naturale $Long \ Lat \ Intensitate$, separate prin câte un spațiu, reprezentând coordonatele centrului seismului și respectiv intensitatea sa. Pe fiecare dintre următoarele linii, până la sfârșitul fișierului, se află câte trei numere naturale $Long \ Lat \ Grad$, separate prin câte un spațiu, reprezentând coordonatele unei clădiri, respectiv gradul de rezistență la cutremur.

# Date de ieșire

Fișierul de ieșire `cladiri.out` va conține trei linii. Pe prima linie se va scrie numărul natural $N$ reprezentând numărul total de clădiri afectate. Pe a doua linie se va scrie numărul natural $M$ reprezentând numărul maxim de clădiri afectate pe un nivel. Pe a treia linie se vor scrie numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Restricții și precizări

* $0 \leq$ Long, Lat, Grad, Intensitate $\leq 10 \ 000$;
* $0 <$ număr clădiri $\leq 100 \ 000$;
* În centrul seismului se pot afla clădiri.
* Nu există mai multe clădiri cu aceleași coordonate.
* $52$% din punctaj se poate obţine pe teste de intrare cu $0 \leq Long, Lat, Grad, Intensitate \leq 100$
* se acordă punctaje parţiale din punctajul acordat pe fiecare test, astfel: $25$% pentru cerinţa a), $25$% pentru cerinţa b), respectiv $50$% pentru cerinţa c).

---

Example:
`cladiri.in`
```
12 7 11
10 9 2
10 7 3
13 5 1
8 11 4
8 7 6
15 4 3
15 9 10
13 10 1
16 8 4
```

`cladiri.out`
```
8
3
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given problem. This solution reads from `cladiri.in` and writes to `cladiri.out` without using `cin`, `cout`, `printf()`, or `scanf()`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

struct Building {
    int longitude;
    int latitude;
    int resistance;
};

int main() {
    std::ifstream infile("cladiri.in");
    std::ofstream outfile("cladiri.out");

    int epicenter_long, epicenter_lat, intensity;
    infile >> epicenter_long >> epicenter_lat >> intensity;

    std::vector<Building> buildings;
    int longi, lati, resist;
    while (infile >> longi >> lati >> resist) {
        buildings.push_back({longi, lati, resist});
    }

    int total_affected = 0;
    std::unordered_map<int, int> level_count;

    for (const auto& building : buildings) {
        int distance = std::max(std::abs(building.longitude - epicenter_long), std::abs(building.latitude - epicenter_lat));
        int effective_intensity = intensity - distance;
        if (effective_intensity >= building.resistance) {
            total_affected++;
            level_count[distance]++;
        }
    }

    int max_affected = 0;
    for (const auto& level : level_count) {
        if (level.second > max_affected) {
            max_affected = level.second;
        }
    }

    std::vector<int> max_levels;
    for (const auto& level : level_count) {
        if (level.second == max_affected) {
            max_levels.push_back(level.first);
        }
    }

    std::sort(max_levels.begin(), max_levels.end());

    outfile << total_affected << '\n';
    outfile << max_affected << '\n';
    for (size_t i = 0; i < max_levels.size(); ++i) {
        if (i != 0) outfile << ' ';
        outfile << max_levels[i];
    }
    outfile << '\n';

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The program reads the epicenter coordinates and intensity from the first line of `cladiri.in`.
   - It then reads the buildings' data until the end of the file. Each building's data is stored in a vector of `Building` structures.

2. **Calculating Affected Buildings:**
   - For each building, the Manhattan distance from the epicenter is calculated.
   - The effective intensity at the building's location is computed as the original intensity minus the distance.
   - If the effective intensity is greater than or equal to the building's resistance, the building is considered affected.

3. **Counting Affected Buildings by Level:**
   - The program uses an unordered map to count the number of affected buildings at each level (distance from the epicenter).

4. **Finding the Maximum Affected Level:**
   - The maximum number of affected buildings at any level is determined.
   - The levels with this maximum number of affected buildings are collected and sorted.

5. **Writing Output:**
   - The total number of affected buildings, the maximum number of affected buildings at any level, and the levels with the maximum number of affected buildings are written to `cladiri.out`.

This solution is efficient, with a time complexity of O(n log n) due to the sorting step, where n is the number of buildings. The rest of the operations are linear with respect to the number of buildings.
