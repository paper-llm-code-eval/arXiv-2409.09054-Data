---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cladiri.in` and write to `cladiri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Institutul de Fizică a Pământului studiază efectele unui potențial cutremur folosind simulări computerizate. Harta plană a clădirilor de pe un teritoriu oarecare este reprezentată folosind coordonatele GPS în plan, longitudine și latitudine, față de un reper considerat de coordonate ($0, 0$), ca în figura de mai jos.

Fiecare dintre clădirile aflate pe hartă, au două coordonate GPS, (Longitudine, Latitudine) și un Grad de rezistență la cutremure.
Un cutremur se poate produce în orice punct de coordonate de pe hartă, numit centrul seismului și are o anumită intensitate. Unda de șoc se propagă sub forma unor pătrate concentrice cu centrul seismului, numite nivele (nivelul $0$ reprezintă centrul seismului, nivelul $1$ primul pătrat concentric, nivelul $2$ al doilea pătrat concentric și așa mai departe). Intensitatea slăbește la fiecare pătrat concentric cu centrul seismului cu câte o unitate. Clădirile sunt afectate de cutremur doar dacă gradul lor de rezistență la cutremur este mai mic sau egal cu intensitatea cutremurului în poziția clădirii.

~[cladiri.png]

# Cerință

Scrieți un program care să citească coordonatele centrului seismului și intensitatea sa în acel punct, precum și coordonatele clădirilor și gradul lor de rezistență la cutremur, și apoi să determine numărul $N$ total de clădiri afectate; numărul $M$ maxim de clădiri afectate pe un nivel; numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Date de intrare

Fișierul de intrare `cladiri.in` conține pe prima linie, trei numere naturale $Long \ Lat \ Intensitate$, separate prin câte un spațiu, reprezentând coordonatele centrului seismului și respectiv intensitatea sa. Pe fiecare dintre următoarele linii, până la sfârșitul fișierului, se află câte trei numere naturale $Long \ Lat \ Grad$, separate prin câte un spațiu, reprezentând coordonatele unei clădiri, respectiv gradul de rezistență la cutremur.

# Date de ieșire

Fișierul de ieșire `cladiri.out` va conține trei linii. Pe prima linie se va scrie numărul natural $N$ reprezentând numărul total de clădiri afectate. Pe a doua linie se va scrie numărul natural $M$ reprezentând numărul maxim de clădiri afectate pe un nivel. Pe a treia linie se vor scrie numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Restricții și precizări

* $0 \leq$ Long, Lat, Grad, Intensitate $\leq 10 \ 000$;
* $0 <$ număr clădiri $\leq 100 \ 000$;
* În centrul seismului se pot afla clădiri.
* Nu există mai multe clădiri cu aceleași coordonate.
* $52$% din punctaj se poate obţine pe teste de intrare cu $0 \leq Long, Lat, Grad, Intensitate \leq 100$
* se acordă punctaje parţiale din punctajul acordat pe fiecare test, astfel: $25$% pentru cerinţa a), $25$% pentru cerinţa b), respectiv $50$% pentru cerinţa c).

---

Example:
`cladiri.in`
```
12 7 11
10 9 2
10 7 3
13 5 1
8 11 4
8 7 6
15 4 3
15 9 10
13 10 1
16 8 4
```

`cladiri.out`
```
8
3
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <cmath>

struct Building {
    int longitude;
    int latitude;
    int resistance;
};

int main() {
    std::ifstream infile("cladiri.in");
    std::ofstream outfile("cladiri.out");

    int epicenterLong, epicenterLat, intensity;
    infile >> epicenterLong >> epicenterLat >> intensity;

    std::vector<Building> buildings;
    int longi, lat, res;
    while (infile >> longi >> lat >> res) {
        buildings.push_back({longi, lat, res});
    }

    int totalAffected = 0;
    std::unordered_map<int, int> levelCount;

    for (const auto& building : buildings) {
        int distance = std::max(std::abs(building.longitude - epicenterLong), std::abs(building.latitude - epicenterLat));
        int effectiveIntensity = intensity - distance;
        if (effectiveIntensity >= building.resistance) {
            totalAffected++;
            levelCount[distance]++;
        }
    }

    int maxAffected = 0;
    for (const auto& pair : levelCount) {
        if (pair.second > maxAffected) {
            maxAffected = pair.second;
        }
    }

    std::vector<int> maxLevels;
    for (const auto& pair : levelCount) {
        if (pair.second == maxAffected) {
            maxLevels.push_back(pair.first);
        }
    }

    std::sort(maxLevels.begin(), maxLevels.end());

    outfile << totalAffected << "\n";
    outfile << maxAffected << "\n";
    for (size_t i = 0; i < maxLevels.size(); ++i) {
        if (i > 0) outfile << " ";
        outfile << maxLevels[i];
    }
    outfile << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - We read the coordinates and intensity of the earthquake's epicenter.
   - We then read the buildings' coordinates and their resistance.

2. **Processing Each Building:**
   - For each building, we calculate its "distance" from the epicenter using the maximum of the absolute differences in longitude and latitude (Manhattan distance).
   - We determine the effective intensity at the building's location by subtracting the distance from the initial intensity.
   - If the effective intensity is greater than or equal to the building's resistance, the building is considered affected.

3. **Counting Affected Buildings:**
   - We maintain a count of affected buildings for each distance level using a hash map.
   - We also keep track of the total number of affected buildings.

4. **Finding Maximum Affected Level:**
   - We determine the maximum number of buildings affected at any single level.
   - We collect all levels that have this maximum number of affected buildings.

5. **Output Results:**
   - We output the total number of affected buildings.
   - We output the maximum number of buildings affected at any level.
   - We output the levels that have this maximum number of affected buildings, sorted in ascending order.

This solution efficiently processes the input and outputs the required results, adhering to the constraints and requirements of the problem.
