---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can follow these steps:

1. **Read Input**: Read the number of intervals and the intervals themselves from the input file.
2. **Sort Intervals**: Sort the intervals based on their starting times. If two intervals have the same starting time, sort by their ending times.
3. **Merge Intervals**: Merge overlapping intervals and keep track of the longest continuous working period and the longest idle period.
4. **Write Output**: Write the results to the output file.

Here is the C++ code implementing this solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Interval {
    int start;
    int end;
};

bool compareIntervals(const Interval &a, const Interval &b) {
    if (a.start == b.start) {
        return a.end < b.end;
    }
    return a.start < b.start;
}

int main() {
    ifstream infile("virus.in");
    ofstream outfile("virus.out");

    int n;
    infile >> n;

    vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].start >> intervals[i].end;
    }

    // Sort intervals by start time (and by end time if start times are equal)
    sort(intervals.begin(), intervals.end(), compareIntervals);

    // Merge intervals and find the longest working and idle periods
    int longestWork = 0;
    int longestIdle = 0;

    int currentStart = intervals[0].start;
    int currentEnd = intervals[0].end;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].start <= currentEnd) {
            // Merge intervals
            currentEnd = max(currentEnd, intervals[i].end);
        } else {
            // Calculate the length of the current working period
            longestWork = max(longestWork, currentEnd - currentStart);

            // Calculate the length of the idle period
            longestIdle = max(longestIdle, intervals[i].start - currentEnd);

            // Move to the next interval
            currentStart = intervals[i].start;
            currentEnd = intervals[i].end;
        }
    }

    // Final check for the last merged interval
    longestWork = max(longestWork, currentEnd - currentStart);

    outfile << longestWork << " " << longestIdle << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the number of intervals and each interval from the input file.
2. **Sorting Intervals**: We sort the intervals first by their starting time, and if the starting times are the same, by their ending time.
3. **Merging Intervals**: We iterate through the sorted intervals, merging them if they overlap. During this process, we keep track of the longest working period and the longest idle period.
4. **Writing Output**: Finally, we write the results to the output file.

This approach ensures that we efficiently find the longest working and idle periods by leveraging sorting and a single pass through the intervals. The complexity is primarily driven by the sorting step, which is \(O(n \log n)\).
