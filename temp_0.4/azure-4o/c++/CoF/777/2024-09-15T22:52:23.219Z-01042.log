---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to process the intervals to determine the longest continuous period of research and the longest gap between research periods. Here's how we can approach it:

1. **Read and Parse Input**: We need to read the input from `virus.in` and parse the number of intervals and their respective start and end days.
2. **Sort Intervals**: To manage overlapping intervals and gaps efficiently, we should sort the intervals based on their start day.
3. **Merge Intervals**: By merging overlapping or contiguous intervals, we can determine the continuous periods of research.
4. **Calculate Longest Periods**: While merging, we can simultaneously calculate the longest period of research and the longest gap between research periods.

Here is the C++ code that implements this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("virus.in");
    ofstream outfile("virus.out");

    int n;
    infile >> n;
    vector<pair<int, int>> intervals(n);

    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].first >> intervals[i].second;
    }

    // Sort intervals by start time
    sort(intervals.begin(), intervals.end());

    int max_work_period = 0;
    int max_idle_period = 0;

    // Initialize the first interval
    int current_start = intervals[0].first;
    int current_end = intervals[0].second;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].first <= current_end) {
            // Merge intervals
            current_end = max(current_end, intervals[i].second);
        } else {
            // Calculate the work period of the current interval
            max_work_period = max(max_work_period, current_end - current_start);
            // Calculate the idle period between the current and the next interval
            max_idle_period = max(max_idle_period, intervals[i].first - current_end);
            // Move to the next interval
            current_start = intervals[i].first;
            current_end = intervals[i].second;
        }
    }

    // Final interval check
    max_work_period = max(max_work_period, current_end - current_start);

    outfile << max_work_period << " " << max_idle_period << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the number of intervals and the intervals themselves from `virus.in`.
2. **Sorting**: We sort the intervals by their start day to facilitate merging.
3. **Merging Intervals**: We iterate through the sorted intervals and merge overlapping or contiguous intervals. During this process, we track the longest continuous research period and the longest idle period.
4. **Output**: We write the results to `virus.out`.

### Example Walkthrough:

Given the input:
```
3
700 1200
300 1000
1500 2100
```

- After sorting, the intervals are:
  ```
  [300, 1000]
  [700, 1200]
  [1500, 2100]
  ```

- Merging the first two intervals `[300, 1000]` and `[700, 1200]` gives `[300, 1200]`.
- The gap between `[300, 1200]` and `[1500, 2100]` is `1500 - 1200 = 300`.
- The longest research period is `1200 - 300 = 900`.

Thus, the output is:
```
900 300
```

This approach ensures efficient processing within the given constraints.
