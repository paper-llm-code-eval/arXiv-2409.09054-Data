---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a step-by-step approach to solving the problem:

1. **Read Input**: Read the number of intervals and the intervals themselves from the input file.
2. **Sort Intervals**: Sort the intervals based on their starting day. If two intervals have the same starting day, sort by their ending day.
3. **Merge Intervals**: Merge overlapping intervals and keep track of the longest merged interval and the longest gap between merged intervals.
4. **Output the Result**: Write the longest merged interval and the longest gap to the output file.

Now, let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Interval {
    int start, end;
};

bool compareIntervals(const Interval &a, const Interval &b) {
    if (a.start == b.start) {
        return a.end < b.end;
    }
    return a.start < b.start;
}

int main() {
    std::ifstream infile("virus.in");
    std::ofstream outfile("virus.out");

    int n;
    infile >> n;

    std::vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].start >> intervals[i].end;
    }

    std::sort(intervals.begin(), intervals.end(), compareIntervals);

    int longestWorkPeriod = 0;
    int longestIdlePeriod = 0;

    int currentStart = intervals[0].start;
    int currentEnd = intervals[0].end;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].start <= currentEnd) {
            currentEnd = std::max(currentEnd, intervals[i].end);
        } else {
            longestWorkPeriod = std::max(longestWorkPeriod, currentEnd - currentStart);
            longestIdlePeriod = std::max(longestIdlePeriod, intervals[i].start - currentEnd);
            currentStart = intervals[i].start;
            currentEnd = intervals[i].end;
        }
    }

    longestWorkPeriod = std::max(longestWorkPeriod, currentEnd - currentStart);

    outfile << longestWorkPeriod << " " << longestIdlePeriod << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read from `virus.in` and `ofstream` to write to `virus.out`. We read the number of intervals and then the intervals themselves.
2. **Sorting Intervals**: We sort the intervals based on their starting day. If two intervals have the same starting day, we sort by their ending day.
3. **Merging Intervals**: We initialize the current interval with the first interval. As we iterate through the sorted intervals, we either merge the current interval with the next one (if they overlap) or record the lengths of the current work period and idle period and start a new current interval.
4. **Output the Result**: Finally, we write the longest work period and the longest idle period to the output file.

This solution ensures we efficiently find the longest periods of work and idle time with a time complexity dominated by the sorting step, which is \(O(n \log n)\).
