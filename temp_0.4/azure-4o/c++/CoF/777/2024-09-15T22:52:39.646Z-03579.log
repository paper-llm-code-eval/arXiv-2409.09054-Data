---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to process the intervals and determine the longest continuous working period and the longest idle period. Here is a step-by-step approach:

1. **Read Input Data**: We will read the input data from the file `virus.in`.
2. **Sort Intervals**: We will sort the intervals based on the starting day. This will help in merging overlapping intervals and finding the longest working period.
3. **Merge Intervals**: We will merge overlapping intervals to find the continuous working periods.
4. **Calculate Longest Working and Idle Periods**: By iterating over the merged intervals, we can determine the longest working period and the longest idle period between the intervals.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Interval {
    int start, end;
};

bool compareIntervals(const Interval &a, const Interval &b) {
    return a.start < b.start;
}

int main() {
    std::ifstream infile("virus.in");
    std::ofstream outfile("virus.out");

    int n;
    infile >> n;

    std::vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].start >> intervals[i].end;
    }

    // Sort intervals by starting time
    std::sort(intervals.begin(), intervals.end(), compareIntervals);

    // Merge intervals and find the longest working and idle periods
    int longest_working = 0;
    int longest_idle = 0;

    int current_start = intervals[0].start;
    int current_end = intervals[0].end;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].start <= current_end) {
            // Overlapping intervals, merge them
            current_end = std::max(current_end, intervals[i].end);
        } else {
            // Non-overlapping interval, calculate the working period
            longest_working = std::max(longest_working, current_end - current_start);
            // Calculate the idle period
            longest_idle = std::max(longest_idle, intervals[i].start - current_end);
            // Move to the next interval
            current_start = intervals[i].start;
            current_end = intervals[i].end;
        }
    }
    // Check the last interval
    longest_working = std::max(longest_working, current_end - current_start);

    outfile << longest_working << " " << longest_idle << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Input Reading**: We read the number of intervals and the intervals themselves from the input file.
2. **Sorting**: We sort the intervals based on their starting times to facilitate merging.
3. **Merging Intervals**: We iterate through the sorted intervals and merge them if they overlap. If they don't overlap, we update the longest working and idle periods.
4. **Output**: Finally, we write the results to the output file.

This approach ensures that we efficiently process the intervals in O(n log n) time due to sorting, followed by a linear scan to merge intervals and compute the required periods. This should be optimal given the constraints.
