---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream infile("cifru.in");
    std::ofstream outfile("cifru.out");

    int N;
    infile >> N;

    std::vector<int> discs(N);
    int max_digit = 0;
    for (int i = 0; i < N; ++i) {
        infile >> discs[i];
        if (discs[i] > max_digit) {
            max_digit = discs[i];
        }
    }

    int min_moves = INT_MAX;
    int min_digit = 9;
    int identical_combinations = 0;

    for (int target = 0; target <= 9; ++target) {
        int current_moves = 0;
        for (int i = 0; i < N; ++i) {
            int diff = std::abs(discs[i] - target);
            current_moves += std::min(diff, 10 - diff);
        }

        if (current_moves < min_moves) {
            min_moves = current_moves;
            min_digit = target;
            identical_combinations = 1;
        } else if (current_moves == min_moves) {
            identical_combinations++;
            if (target < min_digit) {
                min_digit = target;
            }
        }
    }

    outfile << max_digit << "\n";
    outfile << min_moves << "\n";
    outfile << min_digit << "\n";
    outfile << identical_combinations << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We read the number of discs `N` from the input file.
   - We read the initial positions of the discs into a vector `discs`.

2. **Finding the Maximum Digit**:
   - We iterate through the `discs` vector to find the maximum digit.

3. **Calculating Minimum Moves**:
   - We iterate through each possible target digit from `0` to `9`.
   - For each target digit, we calculate the total number of moves required to align all discs to that digit.
   - We use the formula `std::min(diff, 10 - diff)` to account for the circular nature of the discs.

4. **Tracking Minimum Moves and Combinations**:
   - We keep track of the minimum number of moves and the corresponding digit.
   - We also count the number of target digits that result in the minimum number of moves.

5. **Writing Output**:
   - We write the results to the output file in the required format.

This solution ensures efficient computation by leveraging simple arithmetic and iteration, making it suitable for the input size constraints.
