---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `vecini.in` and write to `vecini.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră matricea $A$ ale cărei elemente pot avea doar valorile $0$ sau $1$ și în care numerotarea liniilor și numerotarea coloanelor începe de la $1$. Pentru un element oarecare al matricei, definim noțiunea de vecin ca fiind acele elementele din matrice aflate în imediata sa apropiere pe una dintre direcțiile orizontală, verticală sau pe cele două diagonale (vezi figura de mai jos în care s-au marcat cu $x$ vecinii elementului marcat cu $o$). Un vecin bun al elementului $A_{ij}$ este un vecin care are aceeași valoare cu $A_{ij}$.

~[vecini.png]

# Cerință

Dându-se matricea $A$, să se determine numărul maxim de vecini buni pe care îi are unul dintre elementele matricei precum și numărul de elemente care au acest număr maxim de vecini buni.

# Date de intrare

Fișierul de intrare `vecini.in` conține pe prima linie trei valori naturale $m \ n \ k$ reprezentând numărul de linii, numărul de coloane și respectiv numărul de valori egale cu $1$ din matricea $A$. Pe fiecare dintre următoarele $k$ linii se află două valori $i$ si $j$ cu semnificația $A_{ij}$ este egal cu $1$. Aceste valori sunt date in ordinea parcurgerii matricei pe linii de la linia $1$ la linia $m$.

# Date de ieșire

Fișierul de ieșire `vecini.out` va conține pe prima linie două numere naturale $x$ și $y$ separate printr-un singur spațiu: $x$ va reprezenta numărul maxim de vecini buni pe care îi are unul dintre elementele matricei date, iar $y$ va reprezenta numărul de elemente din matricea dată care au acest număr maxim de vecini buni.

# Restricții și precizări

* $2 \leq m,n \leq 1 \ 000$;
* $0 \leq k \leq n \cdot m / 2+1$;
* Pentru $30$% dintre teste $2 \leq m,n \leq 200$;

---

Example:
`vecini.in`
```
3 4 7
1 3
2 1
2 4
3 1
3 4
3 3
3 2
```

`vecini.out`
```
3 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a solution in C++ that reads from `vecini.in` and writes to `vecini.out` without using `cin`, `cout`, `printf()`, or `scanf()`. The solution will use file I/O for reading and writing.

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int directions[8][2] = {
    {-1, -1}, {-1, 0}, {-1, 1},
    {0, -1},          {0, 1},
    {1, -1}, {1, 0}, {1, 1}
};

int main() {
    ifstream in("vecini.in");
    ofstream out("vecini.out");

    int m, n, k;
    in >> m >> n >> k;

    vector<vector<int>> matrix(m + 1, vector<int>(n + 1, 0));
    vector<vector<int>> goodNeighbors(m + 1, vector<int>(n + 1, 0));

    for (int i = 0; i < k; ++i) {
        int x, y;
        in >> x >> y;
        matrix[x][y] = 1;
    }

    int maxGoodNeighbors = 0;
    int countMaxGoodNeighbors = 0;

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            int currentValue = matrix[i][j];
            if (currentValue == 0 && k == 0) continue;

            int goodNeighborCount = 0;
            for (int d = 0; d < 8; ++d) {
                int ni = i + directions[d][0];
                int nj = j + directions[d][1];

                if (ni >= 1 && ni <= m && nj >= 1 && nj <= n && matrix[ni][nj] == currentValue) {
                    ++goodNeighborCount;
                }
            }

            goodNeighbors[i][j] = goodNeighborCount;

            if (goodNeighborCount > maxGoodNeighbors) {
                maxGoodNeighbors = goodNeighborCount;
                countMaxGoodNeighbors = 1;
            } else if (goodNeighborCount == maxGoodNeighbors) {
                ++countMaxGoodNeighbors;
            }
        }
    }

    out << maxGoodNeighbors << " " << countMaxGoodNeighbors << "\n";

    in.close();
    out.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The code reads the matrix dimensions `m` and `n`, and the number of `1`s `k` from the file `vecini.in`.
   - It initializes a matrix `A` with all elements set to `0`.

2. **Populating the Matrix:**
   - For each of the `k` positions provided, it sets the corresponding position in the matrix to `1`.

3. **Finding Good Neighbors:**
   - It iterates over each element in the matrix.
   - For each element, it checks its 8 possible neighbors.
   - It counts how many of these neighbors have the same value as the current element.
   - It keeps track of the maximum number of good neighbors found and how many elements have this maximum number.

4. **Writing Output:**
   - Finally, it writes the results to `vecini.out`.

This solution ensures efficient reading and writing using file streams and processes the matrix in a straightforward manner to find the required values.
