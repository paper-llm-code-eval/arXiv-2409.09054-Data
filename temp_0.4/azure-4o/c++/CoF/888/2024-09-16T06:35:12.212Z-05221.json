{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/888/2024-09-16T06:35:12.212Z-05221.log",
  "attemptStart": 1726468512.212,
  "attemptEnd": 1726468529.661,
  "attemptDuration": 17.449000120162964,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nconst int INF = 1e9;\nconst int dx[] = {-1, 1, 0, 0};\nconst int dy[] = {0, 0, -1, 1};\n\nstruct Cell {\n    int x, y, danger;\n    bool operator<(const Cell& other) const {\n        return danger > other.danger;\n    }\n};\n\nint main() {\n    ifstream fin(\"rover.in\");\n    ofstream fout(\"rover.out\");\n\n    int V;\n    fin >> V;\n\n    int N, G;\n    if (V == 1) {\n        fin >> N >> G;\n    } else {\n        fin >> N;\n    }\n\n    vector<vector<int>> A(N, vector<int>(N));\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            fin >> A[i][j];\n        }\n    }\n\n    if (V == 1) {\n        vector<vector<int>> danger(N, vector<int>(N, INF));\n        priority_queue<Cell> pq;\n        pq.push({0, 0, 0});\n        danger[0][0] = 0;\n\n        while (!pq.empty()) {\n            Cell current = pq.top();\n            pq.pop();\n\n            if (current.x == N - 1 && current.y == N - 1) {\n                fout << current.danger << endl;\n                return 0;\n            }\n\n            for (int i = 0; i < 4; ++i) {\n                int nx = current.x + dx[i];\n                int ny = current.y + dy[i];\n\n                if (nx >= 0 && nx < N && ny >= 0 && ny < N) {\n                    int newDanger = current.danger + (A[nx][ny] < G ? 1 : 0);\n                    if (newDanger < danger[nx][ny]) {\n                        danger[nx][ny] = newDanger;\n                        pq.push({nx, ny, newDanger});\n                    }\n                }\n            }\n        }\n    } else if (V == 2) {\n        int left = 1, right = 10000, bestG = 1;\n\n        auto isValid = [&](int G) {\n            vector<vector<bool>> visited(N, vector<bool>(N, false));\n            queue<pair<int, int>> q;\n            q.push({0, 0});\n            visited[0][0] = true;\n\n            while (!q.empty()) {\n                auto [x, y] = q.front();\n                q.pop();\n\n                if (x == N - 1 && y == N - 1) {\n                    return true;\n                }\n\n                for (int i = 0; i < 4; ++i) {\n                    int nx = x + dx[i];\n                    int ny = y + dy[i];\n\n                    if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny] && A[nx][ny] >= G) {\n                        visited[nx][ny] = true;\n                        q.push({nx, ny});\n                    }\n                }\n            }\n            return false;\n        };\n\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (isValid(mid)) {\n                bestG = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n\n        fout << bestG << endl;\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2243,
  "metadata": {
    "id": 888,
    "examples": [
      {
        "in": "1\n5 5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "2",
        "explainer": ""
      }
    ],
    "body": "NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.\n\n# Cerințe\n\n1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.\n2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.\n\n# Date de intrare\n\n\nPe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.\nPe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. \n\n# Date de ieșire\n\n\nFișierul de ieșire este `rover.out`.\n\nDacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.\n\nDacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.\n\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 500$\n* $1 \\leq G \\leq 5 \\ 000$\n* $1 \\leq A_{ij} \\leq 10 \\ 000$\n* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.\n* Roverul nu va trece de mai multe ori prin aceeași zonă.\n\n\n| $V$ | Punctaj |\n| - | ------- |\n| $1$ | 45      |\n| $2$ | 45      |",
    "header": {
      "problem_id": 888,
      "problem_name": "Rover",
      "tags": "[Binary Search, Deque, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.35,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "rover.in",
      "output_filename": "rover.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 X: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "rover.in",
      "output": "rover.out"
    },
    "consoleInteraction": false
  }
}