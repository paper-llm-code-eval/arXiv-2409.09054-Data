---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to use a graph traversal algorithm that can handle the constraints and requirements provided. The best approach for this problem is to use a modified Dijkstra's algorithm, which is well-suited for finding the shortest path in a weighted graph. We need to take into account the battery constraints of the lanterns and the possibility of recharging at friendly bases.

Here is the step-by-step approach to solving the problem:

1. **Parse the input**: Read the number of objectives (N), number of lantern types (K), the list of friendly bases, the number of roads (M), and the details of each road.
2. **Graph representation**: Represent the objectives and roads as a graph using an adjacency list.
3. **Modified Dijkstra's algorithm**: Use a priority queue to implement Dijkstra's algorithm. For each node, keep track of the minimum time to reach that node with different battery levels.
4. **Recharge at friendly bases**: If the agent reaches a friendly base, reset the battery consumption.
5. **Find the optimal lantern type**: Iterate over all possible lantern types and find the one that allows the agent to reach the destination in the minimum time.

Here is the C++ implementation of the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to, time, watt;
};

int main() {
    ifstream fin("lanterna.in");
    ofstream fout("lanterna.out");

    int N, K;
    fin >> N >> K;

    vector<int> friendly(N);
    for (int i = 0; i < N; ++i) {
        fin >> friendly[i];
    }

    int M;
    fin >> M;

    vector<vector<Edge>> adj(N);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        fin >> a >> b >> T >> W;
        --a; --b;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int T_min = INF, W_min = INF;

    for (int W = 1; W <= K; ++W) {
        vector<vector<int>> dist(N, vector<int>(W + 1, INF));
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;

        dist[0][W] = 0;
        pq.push({0, 0, W});

        while (!pq.empty()) {
            auto [time, u, battery] = pq.top();
            pq.pop();

            if (time > dist[u][battery]) continue;

            for (const auto& edge : adj[u]) {
                if (battery >= edge.watt) {
                    int new_battery = battery - edge.watt;
                    int new_time = time + edge.time;

                    if (friendly[edge.to]) {
                        new_battery = W;
                    }

                    if (new_time < dist[edge.to][new_battery]) {
                        dist[edge.to][new_battery] = new_time;
                        pq.push({new_time, edge.to, new_battery});
                    }
                }
            }
        }

        int min_time = *min_element(dist[N - 1].begin(), dist[N - 1].end());
        if (min_time < T_min) {
            T_min = min_time;
            W_min = W;
        }
    }

    fout << T_min << " " << W_min << endl;

    return 0;
}
```

### Explanation:
1. **Input Parsing**: We read the input from `lanterna.in` and store the number of objectives, lantern types, and the list of friendly bases.
2. **Graph Construction**: We construct the graph using an adjacency list where each edge has a destination, time, and watt consumption.
3. **Modified Dijkstra's Algorithm**: We use a priority queue to keep track of the minimum time to reach each node with different battery levels. For each node, if it is a friendly base, we reset the battery level.
4. **Finding the Optimal Lantern**: We iterate over all possible lantern types and use the modified Dijkstra's algorithm to find the minimum time to reach the destination. We keep track of the minimum time and the corresponding lantern type.

This solution ensures that we find the optimal lantern type that allows the agent to reach the destination in the minimum time while considering the battery constraints.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:72:25: error: 'min_element' was not declared in this scope
   72 |         int min_time = *min_element(dist[N - 1].begin(), dist[N - 1].end());
      |                         ^~~~~~~~~~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `min_element` function is not recognized. This is because we need to include the `<algorithm>` header to use the `min_element` function.

Here is the corrected version of the code with the necessary include directive:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <limits>
#include <algorithm> // Include this header for min_element

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to, time, watt;
};

int main() {
    ifstream fin("lanterna.in");
    ofstream fout("lanterna.out");

    int N, K;
    fin >> N >> K;

    vector<int> friendly(N);
    for (int i = 0; i < N; ++i) {
        fin >> friendly[i];
    }

    int M;
    fin >> M;

    vector<vector<Edge>> adj(N);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        fin >> a >> b >> T >> W;
        --a; --b;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int T_min = INF, W_min = INF;

    for (int W = 1; W <= K; ++W) {
        vector<vector<int>> dist(N, vector<int>(W + 1, INF));
        priority_queue<tuple<int, int, int>, vector<tuple<int, int, int>>, greater<>> pq;

        dist[0][W] = 0;
        pq.push({0, 0, W});

        while (!pq.empty()) {
            auto [time, u, battery] = pq.top();
            pq.pop();

            if (time > dist[u][battery]) continue;

            for (const auto& edge : adj[u]) {
                if (battery >= edge.watt) {
                    int new_battery = battery - edge.watt;
                    int new_time = time + edge.time;

                    if (friendly[edge.to]) {
                        new_battery = W;
                    }

                    if (new_time < dist[edge.to][new_battery]) {
                        dist[edge.to][new_battery] = new_time;
                        pq.push({new_time, edge.to, new_battery});
                    }
                }
            }
        }

        int min_time = *min_element(dist[N - 1].begin(), dist[N - 1].end());
        if (min_time < T_min) {
            T_min = min_time;
            W_min = W;
        }
    }

    fout << T_min << " " << W_min << endl;

    return 0;
}
```

### Explanation of the Fix:
1. **Include `<algorithm>` Header**: The `min_element` function is part of the `<algorithm>` library, so we need to include this header at the beginning of the program.

With this fix, the program should compile successfully and produce the correct output.
