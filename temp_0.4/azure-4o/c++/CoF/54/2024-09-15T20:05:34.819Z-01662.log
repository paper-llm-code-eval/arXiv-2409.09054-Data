---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider both the shortest path and the constraints imposed by the lantern's battery consumption. We'll use a modified Dijkstra's algorithm to find the shortest path while keeping track of the battery consumption.

Here is the C++ code to solve the problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <climits>

using namespace std;

struct Edge {
    int to, time, watts;
};

struct State {
    int node, time, watts_left;
    bool operator>(const State &other) const {
        return time > other.time;
    }
};

int main() {
    ifstream fin("lanterna.in");
    ofstream fout("lanterna.out");

    int N, K;
    fin >> N >> K;

    vector<int> is_friendly(N + 1);
    for (int i = 1; i <= N; ++i) {
        fin >> is_friendly[i];
    }

    int M;
    fin >> M;

    vector<vector<Edge>> adj(N + 1);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        fin >> a >> b >> T >> W;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int min_time = INT_MAX;
    int min_watts = -1;

    for (int W = 1; W <= K; ++W) {
        vector<vector<int>> dist(N + 1, vector<int>(W + 1, INT_MAX));
        priority_queue<State, vector<State>, greater<State>> pq;

        dist[1][W] = 0;
        pq.push({1, 0, W});

        while (!pq.empty()) {
            auto [u, time, watts_left] = pq.top();
            pq.pop();

            if (time > dist[u][watts_left]) continue;

            for (const auto &edge : adj[u]) {
                if (watts_left >= edge.watts) {
                    int new_watts_left = watts_left - edge.watts;
                    if (is_friendly[edge.to]) {
                        new_watts_left = W;
                    }
                    int new_time = time + edge.time;
                    if (new_time < dist[edge.to][new_watts_left]) {
                        dist[edge.to][new_watts_left] = new_time;
                        pq.push({edge.to, new_time, new_watts_left});
                    }
                }
            }
        }

        int best_time = *min_element(dist[N].begin(), dist[N].end());
        if (best_time < min_time) {
            min_time = best_time;
            min_watts = W;
        }
    }

    fout << min_time << " " << min_watts << endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of objectives `N`, the number of lantern types `K`, and the list of friendly bases. Then we read the number of roads `M` and the details of each road.
2. **Graph Representation**: We use an adjacency list to represent the graph where each node has a list of edges.
3. **Modified Dijkstra's Algorithm**: For each lantern type from `1` to `K`, we run a modified Dijkstra's algorithm:
   - We maintain a 2D vector `dist` where `dist[u][w]` represents the minimum time to reach node `u` with `w` watts left.
   - We use a priority queue to always expand the least time-consuming path first.
   - If we reach a friendly base, we recharge the lantern to full capacity.
4. **Finding the Best Lantern**: After running the algorithm for each lantern type, we track the minimum time and the corresponding lantern type.

This approach ensures that we find the shortest path while considering the constraints of the lantern's battery consumption.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:75:26: error: 'min_element' was not declared in this scope
   75 |         int best_time = *min_element(dist[N].begin(), dist[N].end());
      |                          ^~~~~~~~~~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the `min_element` function is not recognized. This is because the `<algorithm>` header, which contains the `min_element` function, is not included in the program. Let's include the necessary header and provide the corrected code.

Here is the fixed C++ code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <climits>
#include <algorithm> // Include this header for min_element

using namespace std;

struct Edge {
    int to, time, watts;
};

struct State {
    int node, time, watts_left;
    bool operator>(const State &other) const {
        return time > other.time;
    }
};

int main() {
    ifstream fin("lanterna.in");
    ofstream fout("lanterna.out");

    int N, K;
    fin >> N >> K;

    vector<int> is_friendly(N + 1);
    for (int i = 1; i <= N; ++i) {
        fin >> is_friendly[i];
    }

    int M;
    fin >> M;

    vector<vector<Edge>> adj(N + 1);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        fin >> a >> b >> T >> W;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int min_time = INT_MAX;
    int min_watts = -1;

    for (int W = 1; W <= K; ++W) {
        vector<vector<int>> dist(N + 1, vector<int>(W + 1, INT_MAX));
        priority_queue<State, vector<State>, greater<State>> pq;

        dist[1][W] = 0;
        pq.push({1, 0, W});

        while (!pq.empty()) {
            auto [u, time, watts_left] = pq.top();
            pq.pop();

            if (time > dist[u][watts_left]) continue;

            for (const auto &edge : adj[u]) {
                if (watts_left >= edge.watts) {
                    int new_watts_left = watts_left - edge.watts;
                    if (is_friendly[edge.to]) {
                        new_watts_left = W;
                    }
                    int new_time = time + edge.time;
                    if (new_time < dist[edge.to][new_watts_left]) {
                        dist[edge.to][new_watts_left] = new_time;
                        pq.push({edge.to, new_time, new_watts_left});
                    }
                }
            }
        }

        int best_time = *min_element(dist[N].begin(), dist[N].end());
        if (best_time < min_time) {
            min_time = best_time;
            min_watts = W;
        }
    }

    fout << min_time << " " << min_watts << endl;

    return 0;
}
```

### Explanation of the Fix:
1. **Include `<algorithm>` Header**: The `min_element` function is declared in the `<algorithm>` header, so we need to include this header at the beginning of the program.

With this fix, the program should compile successfully and work as expected. The logic remains the same: we use a modified Dijkstra's algorithm to find the shortest path considering the lantern's battery constraints and determine the minimum time and the corresponding lantern type.
