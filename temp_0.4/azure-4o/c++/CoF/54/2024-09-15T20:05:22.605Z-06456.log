---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to find the shortest path from the starting objective to the destination objective in a weighted graph, considering the constraints on the battery consumption of different types of lanterns. We will use a modified Dijkstra's algorithm to achieve this, as it is well-suited for finding the shortest path in graphs with non-negative weights.

Here is the C++ solution for the problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <limits>

using namespace std;

const int INF = numeric_limits<int>::max();

struct Edge {
    int to, time, watts;
};

struct State {
    int node, time, watts_left;
    bool operator>(const State& other) const {
        return time > other.time;
    }
};

int main() {
    ifstream fin("lanterna.in");
    ofstream fout("lanterna.out");

    int N, K;
    fin >> N >> K;

    vector<int> is_friendly(N + 1);
    for (int i = 1; i <= N; ++i) {
        fin >> is_friendly[i];
    }

    int M;
    fin >> M;

    vector<vector<Edge>> adj(N + 1);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        fin >> a >> b >> T >> W;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int T_min = INF, W_min = INF;

    for (int W = 1; W <= K; ++W) {
        vector<vector<int>> dist(N + 1, vector<int>(W + 1, INF));
        priority_queue<State, vector<State>, greater<State>> pq;

        dist[1][W] = 0;
        pq.push({1, 0, W});

        while (!pq.empty()) {
            auto [node, time, watts_left] = pq.top();
            pq.pop();

            if (node == N) {
                if (time < T_min || (time == T_min && W < W_min)) {
                    T_min = time;
                    W_min = W;
                }
                break;
            }

            for (const auto& edge : adj[node]) {
                if (watts_left >= edge.watts) {
                    int new_watts_left = is_friendly[edge.to] ? W : watts_left - edge.watts;
                    int new_time = time + edge.time;
                    if (new_time < dist[edge.to][new_watts_left]) {
                        dist[edge.to][new_watts_left] = new_time;
                        pq.push({edge.to, new_time, new_watts_left});
                    }
                }
            }
        }
    }

    fout << T_min << " " << W_min << endl;

    return 0;
}
```

### Explanation:
1. **Input Reading**: Read the input values from `lanterna.in`.
2. **Graph Representation**: Use an adjacency list to represent the graph.
3. **Dijkstra's Algorithm**: Use a modified version of Dijkstra's algorithm to find the shortest path considering the battery constraints.
4. **Priority Queue**: Use a priority queue to always expand the node with the smallest time.
5. **State Management**: Track the current node, the time taken to reach it, and the remaining battery.
6. **Friendly Bases**: If the agent reaches a friendly base, recharge the battery.
7. **Output**: Write the minimum time and the corresponding lantern type to `lanterna.out`.

This solution ensures that we find the shortest path while respecting the battery constraints, and it efficiently handles the constraints using a priority queue and dynamic programming approach.
