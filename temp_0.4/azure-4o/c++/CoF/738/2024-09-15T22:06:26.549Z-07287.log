---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution in C++:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("ucif.in");
    std::ofstream outfile("ucif.out");

    int n;
    infile >> n;

    int last_digit_sum = 0;

    for (int i = 1; i <= n; ++i) {
        int last_digit_power = 1;
        for (int j = 0; j < i; ++j) {
            last_digit_power = (last_digit_power * i) % 10;
        }
        last_digit_sum = (last_digit_sum + last_digit_power) % 10;
    }

    outfile << last_digit_sum << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

Explanation:
1. We read the input number `n` from the file `ucif.in`.
2. We initialize `last_digit_sum` to 0, which will store the last digit of the sum `s`.
3. We iterate from 1 to `n`, and for each `i`, we calculate the last digit of `i^i` by iteratively multiplying `i` and taking the result modulo 10.
4. We add the last digit of `i^i` to `last_digit_sum` and take the result modulo 10 to keep only the last digit.
5. Finally, we write the result to the file `ucif.out`.

This approach ensures that we only work with the last digits, making the operations efficient and avoiding overflow issues.
