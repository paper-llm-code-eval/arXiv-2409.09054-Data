---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to compute the last digit of the sum \( s = 1^1 + 2^2 + 3^3 + \dots + n^n \). Given the constraints, we can optimize our solution by focusing only on the last digit of each term in the sum.

Here's a step-by-step approach:

1. **Read Input**: We need to read the integer \( n \) from the file `ucif.in`.
2. **Compute Last Digit of Each Term**: For each \( i \) from 1 to \( n \), compute \( i^i \) and keep track of only the last digit of the result.
3. **Sum Last Digits**: Sum the last digits of all terms.
4. **Find Last Digit of the Sum**: Compute the last digit of the sum.
5. **Write Output**: Write the last digit to the file `ucif.out`.

Here is the C++ code that implements this solution:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream inFile("ucif.in");
    std::ofstream outFile("ucif.out");

    int n;
    inFile >> n;

    int lastDigitSum = 0;

    for (int i = 1; i <= n; ++i) {
        int lastDigit = 1;
        for (int j = 0; j < i; ++j) {
            lastDigit = (lastDigit * i) % 10;
        }
        lastDigitSum = (lastDigitSum + lastDigit) % 10;
    }

    outFile << lastDigitSum << std::endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation of the Code:

1. **Reading Input**: We use `std::ifstream` to read the input from `ucif.in`.
2. **Computing Last Digit**: For each \( i \) from 1 to \( n \), we compute \( i^i \) modulo 10. This is done using a loop that multiplies \( i \) by itself \( i \) times, taking the result modulo 10 at each step to keep only the last digit.
3. **Summing Last Digits**: We accumulate the last digits modulo 10 to keep the result within a single digit.
4. **Writing Output**: We use `std::ofstream` to write the result to `ucif.out`.

This solution is efficient given the constraints (1 ≤ \( n \) ≤ 100) and ensures that we only work with the last digits, making the operations very fast.
