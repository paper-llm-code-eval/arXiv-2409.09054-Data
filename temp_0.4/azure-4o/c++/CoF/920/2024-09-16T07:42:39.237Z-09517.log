---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <cmath>
#include <algorithm>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num == 2 || num == 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Function to get the largest prime from a list of numbers
int getLargestPrime(const std::vector<int>& numbers) {
    int largestPrime = 0;
    for (int num : numbers) {
        if (isPrime(num) && num > largestPrime) {
            largestPrime = num;
        }
    }
    return largestPrime;
}

// Function to split a number into parts and get the largest prime from those parts
int getLargestPrimeFromParts(const std::string& numStr, int parts) {
    int largestPrime = 0;
    int len = numStr.size();
    if (parts == 2) {
        for (int i = 1; i < len; ++i) {
            int part1 = std::stoi(numStr.substr(0, i));
            int part2 = std::stoi(numStr.substr(i));
            if (isPrime(part1) && part1 > largestPrime) largestPrime = part1;
            if (isPrime(part2) && part2 > largestPrime) largestPrime = part2;
        }
    } else if (parts == 3) {
        for (int i = 1; i < len - 1; ++i) {
            for (int j = i + 1; j < len; ++j) {
                int part1 = std::stoi(numStr.substr(0, i));
                int part2 = std::stoi(numStr.substr(i, j - i));
                int part3 = std::stoi(numStr.substr(j));
                if (isPrime(part1) && part1 > largestPrime) largestPrime = part1;
                if (isPrime(part2) && part2 > largestPrime) largestPrime = part2;
                if (isPrime(part3) && part3 > largestPrime) largestPrime = part3;
            }
        }
    }
    return largestPrime;
}

int main() {
    std::ifstream inFile("tai.in");
    std::ofstream outFile("tai.out");

    int C, N;
    inFile >> C >> N;

    std::vector<int> numbers(N);
    for (int i = 0; i < N; ++i) {
        inFile >> numbers[i];
    }

    int result = 0;

    if (C == 1) {
        result = getLargestPrime(numbers);
    } else if (C == 2 || C == 3) {
        for (int num : numbers) {
            std::string numStr = std::to_string(num);
            int largestPrimeFromParts = getLargestPrimeFromParts(numStr, C);
            if (largestPrimeFromParts > result) {
                result = largestPrimeFromParts;
            }
        }
    }

    outFile << result << std::endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

This C++ program reads the input from `tai.in`, processes the numbers according to the specified requirement (C), and writes the result to `tai.out`. The program includes functions to check if a number is prime, find the largest prime in a list of numbers, and find the largest prime from parts of a number. The main function handles reading the input, processing the numbers, and writing the output.
