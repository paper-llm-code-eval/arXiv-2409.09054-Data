---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `betasah.in` and write to `betasah.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jocul **betasah** se joacă folosindu-se doar piese asemănătoare damelor clasicului șah, numite tot *dame*. Suprafața de joc are o formă triunghiulară și este formată din $N \cdot (N+1) / 2$ pătrate identice dispuse pe $N$ rânduri și $N$ coloane. Rândurile se numerotează de sus in jos, de la $1$ la $N$. Coloanele se numerotează de la stânga la dreapta, de la $1$ la $N$. Primul rând conține un singur pătrat, al doilea rând conține două pătrate alăturate, $\dots$, al $N$-lea rând conține $N$ pâtrate alăturate, ca în suprafețele de joc cu $N=6$ din figurile de mai jos. Din cele $N \cdot (N+1) / 2$ pătrate, $K$ sunt gri, iar restul sunt albe. Poziția fiecărui pătrat de pe suprafața de joc este dată de rândul și coloana în care acesta este situat.

~[betasah.png]

Pe suprafața de joc sunt așezate $D$ dame în $D$ pătrate albe distincte, ocupându-le. Într-un pătrat alb **poate fi așezată o singură damă**, iar într-un pătrat gri **nu poate fi așezată nicio damă**. Poziția unei dame pe suprafața de joc este dată de poziția pătratului alb în care este așezată damă.
Damele pot accesa orice pătrat alb neocupat situat pe direcțiile: verticală, orizontală sau diagonală, numerotate de la $1$ la $8$ în **figura $b$)**. Accesul pe o direcție se face trecând din pătrat alb în pătrat alb (doar pătrate albe neocupate) până la întâlnirea unui pătrat gri sau a unui pătrat alb ocupat de o altă damă sau până la terminarea suprafeței de joc.
Numim **pătrat accesibil** orice pătrat alb neocupat (de pe suprafața de joc) care ar putea fi accesat de cel puțin una din cele $D$ dame.
De exemplu, pentru suprafața de joc din **figura $c$)** numărul de pătrate accesibile (marcate cu $X$) de pe suprafață este $11$; pentru suprafața de joc cu $N=6, D=3$ și $K=4$ din **figura $d$)** numărul de pătrate accesibile de pe suprafață este $13$. În figura $e$) sunt marcate cu $X$ pătratele accesibile fiecărei dame de pe suprafața de joc din figura $d$).

~[betasah2.png]

# Cerință

Scrieți un program care să citească numerele naturale $N \ D \ K$, pozițiile damelor și ale pătratelor gri pe suprafața de joc și care să determine:

* numărul maxim $M$ de pătrate albe conținute de un rând al suprafeței de joc;
* numărul $P$ de pătrate accesibile de pe suprafața de joc.

# Date de intrare


Fișierul de intrare `betasah.in` conține:

* pe prima linie cele trei numere naturale $N \ D \ K$, separate prin câte un spațiu, cu semnificația din enunț;
* pe linia $i+1$ două numere naturale nenule $x_i \ y_i$, separate prin câte un spațiu, reprezentând poziția damei $i$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $i = 1,2,3,\dots,D$;
* pe linia $D+1+j$ două numere naturale nenule $z_j \ t_j$, separate printr-un singur spațiu, reprezentând poziția pătratului gri $j$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $j = 1, 2, 3, \dots , K$.


# Date de ieșire


Fișierul de ieșire `betasah.out` va conține pe prima linie numărul natural $M$ și pe a doua linie numărul natural $P$, cu semnificația din enunț.

# Restricții și precizări

* $2 \leq N \leq 1 \ 000$;
* $1 \leq D \leq 100$;
* $1 \leq K \leq 50$;
* $D + K \leq N \cdot (N+1) / 2$;
* $1 \leq y_i \leq xi \leq N$;
* $1 \leq t_j \leq zj \leq N$;
* numărul $M$ se va scrie obligatoriu pe prima linie a fișierului de ieșire `betasah.in`.
* numărul $P$ se va scrie obligatoriu pe a doua linie a fișierului de ieșire `betasah.out`.
* pentru rezolvarea corectă a cerinței $1$) se acordă $20$% din punctaj, iar pentru rezolvarea corectă a cerinței $2$) se acordă $80$% din punctaj.

---

Example:
`betasah.in`
```
6 3 4
3 2
5 2
5 4
3 1
4 3
6 4
1 1
```

`betasah.out`
```
5
13
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we'll follow these steps:

1. **Parse the Input**: Read the values of \( N \), \( D \), and \( K \) from the input file. Then, read the positions of the queens and the gray squares.
2. **Initialize the Board**: Create a 2D array to represent the board, marking the positions of the queens and gray squares.
3. **Determine Maximum White Squares in a Row**: For each row, count the number of white squares and keep track of the maximum count.
4. **Calculate Accessible Squares**: For each queen, traverse in all 8 possible directions (vertical, horizontal, and diagonal) to mark all accessible white squares.
5. **Count Accessible Squares**: Count the number of unique accessible white squares.

Here's the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

const int directions[8][2] = {
    {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}
};

int main() {
    ifstream fin("betasah.in");
    ofstream fout("betasah.out");

    int N, D, K;
    fin >> N >> D >> K;

    vector<vector<bool>> board(N + 1, vector<bool>(N + 1, true));
    vector<pair<int, int>> queens(D);
    vector<pair<int, int>> grays(K);

    for (int i = 0; i < D; ++i) {
        int x, y;
        fin >> x >> y;
        queens[i] = {x, y};
        board[x][y] = false;  // Mark queen positions
    }

    for (int i = 0; i < K; ++i) {
        int x, y;
        fin >> x >> y;
        grays[i] = {x, y};
        board[x][y] = false;  // Mark gray squares
    }

    // Calculate the maximum number of white squares in any row
    int max_white_squares = 0;
    for (int i = 1; i <= N; ++i) {
        int white_count = 0;
        for (int j = 1; j <= i; ++j) {
            if (board[i][j]) {
                ++white_count;
            }
        }
        max_white_squares = max(max_white_squares, white_count);
    }

    // Calculate the number of accessible squares
    set<pair<int, int>> accessible_squares;
    for (const auto& queen : queens) {
        int qx = queen.first, qy = queen.second;
        for (const auto& dir : directions) {
            int x = qx + dir[0], y = qy + dir[1];
            while (x > 0 && x <= N && y > 0 && y <= x && board[x][y]) {
                accessible_squares.insert({x, y});
                x += dir[0];
                y += dir[1];
            }
        }
    }

    fout << max_white_squares << endl;
    fout << accessible_squares.size() << endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `betasah.in` and stored in appropriate variables.
2. **Board Initialization**: A 2D array `board` is used to represent the game board, where `true` indicates a white square and `false` indicates either a gray square or a square occupied by a queen.
3. **Maximum White Squares Calculation**: For each row, we count the number of white squares and track the maximum count.
4. **Accessible Squares Calculation**: For each queen, we traverse in all 8 directions and mark accessible squares in a set to ensure uniqueness.
5. **Output Results**: The results are written to `betasah.out`.

This solution ensures efficient processing within the given constraints.
