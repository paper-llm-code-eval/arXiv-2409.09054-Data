---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>

bool isPrime(int num) {
    if (num < 2) return false;
    for (int i = 2; i <= std::sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

bool isPPrime(int num, int p) {
    if (num == p) return true;
    if (num % p == 0) {
        int quotient = num / p;
        if (isPrime(quotient) || isPPrime(quotient, p)) return true;
    }
    return isPrime(num);
}

int main() {
    std::ifstream inFile("secvente.in");
    std::ofstream outFile("secvente.out");

    int D;
    inFile >> D;

    while (D--) {
        int n, p, k;
        inFile >> n >> p >> k;

        std::vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            inFile >> a[i];
        }

        std::vector<int> pPrimes;
        for (int i = 0; i < n; ++i) {
            if (isPPrime(a[i], p)) {
                pPrimes.push_back(i);
            }
        }

        int count = 0;
        std::vector<std::pair<int, int>> sequences;

        for (size_t i = 0; i < pPrimes.size(); ++i) {
            for (size_t j = i + k - 1; j < pPrimes.size(); ++j) {
                if (pPrimes[j] - pPrimes[i] + 1 <= n) {
                    sequences.emplace_back(pPrimes[i] + 1, pPrimes[j] + 1);
                    ++count;
                }
            }
        }

        outFile << count << "\n";
        for (const auto& seq : sequences) {
            outFile << seq.first << " " << seq.second << "\n";
        }
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:
1. **Prime Number Check**: The `isPrime` function determines if a number is prime.
2. **P-Prime Check**: The `isPPrime` function checks if a number is a p-prime.
3. **Reading Input**: We read the number of data sets and then for each dataset, we read `n`, `p`, `k`, and the sequence of numbers.
4. **Finding P-Primes**: We store the indices of p-primes in the sequence.
5. **Finding Valid Sequences**: We use nested loops to find all valid sequences that contain exactly `k` p-primes and start and end with a p-prime.
6. **Output**: We write the results to the output file.

This solution ensures that we efficiently check for p-primes and find valid sequences, adhering to the constraints and requirements of the problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```
Expected output:
```
2
1 2
2 4
0
```
Found output:
```
3
1 2
1 4
2 4
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the initial solution lies in the way sequences are counted. Specifically, it counts sequences that contain at least `k` p-primes, but it should count sequences that contain exactly `k` p-primes and start and end with a p-prime. Additionally, the solution should ensure that the sequences are contiguous and correctly indexed.

### Steps to Fix:
1. **Correct Sequence Counting**: Ensure that sequences contain exactly `k` p-primes.
2. **Contiguous Sequences**: Ensure that the sequences are contiguous and correctly indexed.
3. **Output Format**: Ensure the output format matches the expected result.

Here's the corrected solution:

```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>

bool isPrime(int num) {
    if (num < 2) return false;
    for (int i = 2; i <= std::sqrt(num); ++i) {
        if (num % i == 0) return false;
    }
    return true;
}

bool isPPrime(int num, int p) {
    if (num == p) return true;
    if (num % p == 0) {
        int quotient = num / p;
        if (isPrime(quotient) || isPPrime(quotient, p)) return true;
    }
    return isPrime(num);
}

int main() {
    std::ifstream inFile("secvente.in");
    std::ofstream outFile("secvente.out");

    int D;
    inFile >> D;

    while (D--) {
        int n, p, k;
        inFile >> n >> p >> k;

        std::vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            inFile >> a[i];
        }

        std::vector<int> pPrimes;
        for (int i = 0; i < n; ++i) {
            if (isPPrime(a[i], p)) {
                pPrimes.push_back(i + 1);  // Store 1-based index
            }
        }

        int count = 0;
        std::vector<std::pair<int, int>> sequences;

        for (size_t i = 0; i < pPrimes.size(); ++i) {
            for (size_t j = i + k - 1; j < pPrimes.size(); ++j) {
                if (j - i + 1 == k) {
                    sequences.emplace_back(pPrimes[i], pPrimes[j]);
                    ++count;
                }
            }
        }

        outFile << count << "\n";
        for (const auto& seq : sequences) {
            outFile << seq.first << " " << seq.second << "\n";
        }
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:
1. **Prime Number Check**: The `isPrime` function determines if a number is prime.
2. **P-Prime Check**: The `isPPrime` function checks if a number is a p-prime.
3. **Reading Input**: We read the number of data sets and then for each dataset, we read `n`, `p`, `k`, and the sequence of numbers.
4. **Finding P-Primes**: We store the 1-based indices of p-primes in the sequence.
5. **Finding Valid Sequences**: We use nested loops to find all valid sequences that contain exactly `k` p-primes and start and end with a p-prime.
6. **Output**: We write the results to the output file.

This solution ensures that we efficiently check for p-primes and find valid sequences that match the exact criteria specified in the problem statement.
