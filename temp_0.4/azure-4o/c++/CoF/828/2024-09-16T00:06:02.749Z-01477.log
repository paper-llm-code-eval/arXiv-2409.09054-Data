---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pasiunea Mirunei este să coloreze. Vacanţa trecută şi-a petrecut-o la bunica ei la ţară şi pentru că se cam plictisea s-a gândit să vopsească gardul de la casa bunicii.

Gardul este compus din $N$ scânduri dispuse una lângă alta. Miruna a găsit în garajul bunicii $5$ cutii de vopsea de culori diferite: **albă**, **albastră**, **roşie**, **verde** şi **galbenă**. Când a vopsit gardul, Miruna a respectat următoarele reguli:
-	Dacă o scândură era vopsită cu **alb**, următoarea scândură o vopsea obligatoriu cu **albastru**
-	Dacă o scândură era vopsită cu **albastru**, atunci următoarea scândură o vopsea cu **alb** sau **roşu**
-	Dacă o scândură era vopsită cu **roşu**, atunci următoarea scândură o vopsea cu **albastru** sau **verde**
-	Dacă o scândură era vopsită cu **verde**, atunci următoarea scândură o vopsea cu **roșu** sau **galben**
-	Dacă o scândură era vopsită cu **galben**, atunci următoarea scândură o vopsea obligatoriu cu **verde**

După ce a și-a terminat treaba Miruna își admira “opera de artă” și se întreba în câte moduri diferite ar fi putut să vopsească gardul bunicii. 

# Cerinţă

Ajutați-o pe Miruna să găsească răspunsul la întrebarea sa.

# Date de intrare


Fişierul `culori.in` conţine pe prima sa linie un singur număr natural $N$.


# Date de ieșire


Fişierul de ieşire `culori.out` va conţine pe prima sa linie un singur număr întreg reprezentând numărul de moduri diferite în care Miruna ar fi putut să vopsească gardul bunicii.


# Restricții și precizări

* $1 \leq N \leq 5 \ 000$;
* Pentru $25\%$ dintre teste $N \leq 45$.

---

Example:
`culori.in`
```
4
```

`culori.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use dynamic programming. We'll maintain a state for each possible color of the current board, and for each state, we'll count the number of ways to reach that state. Let's define our states as follows:

- `dp[i][0]` - number of ways to paint up to the i-th board with the i-th board painted white.
- `dp[i][1]` - number of ways to paint up to the i-th board with the i-th board painted blue.
- `dp[i][2]` - number of ways to paint up to the i-th board with the i-th board painted red.
- `dp[i][3]` - number of ways to paint up to the i-th board with the i-th board painted green.
- `dp[i][4]` - number of ways to paint up to the i-th board with the i-th board painted yellow.

The transitions between states are determined by the rules given in the problem. Here is the transition logic:
- If the current board is white, the next board must be blue.
- If the current board is blue, the next board can be either white or red.
- If the current board is red, the next board can be either blue or green.
- If the current board is green, the next board can be either red or yellow.
- If the current board is yellow, the next board must be green.

Using these transitions, we can fill out our DP table for each board from 1 to N. The final answer will be the sum of all possible ways to paint the N-th board, regardless of its color.

Here's the C++ code to implement this solution:

```cpp
#include <fstream>
#include <vector>

using namespace std;

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    int N;
    fin >> N;

    if (N == 0) {
        fout << 0 << endl;
        return 0;
    }

    // dp[i][j] represents the number of ways to paint up to the i-th board with the i-th board painted with color j
    vector<vector<long long>> dp(N + 1, vector<long long>(5, 0));

    // Initial state: the first board can be painted with any of the 5 colors
    for (int j = 0; j < 5; ++j) {
        dp[1][j] = 1;
    }

    for (int i = 1; i < N; ++i) {
        dp[i + 1][1] += dp[i][0]; // white -> blue
        dp[i + 1][0] += dp[i][1]; // blue -> white
        dp[i + 1][2] += dp[i][1]; // blue -> red
        dp[i + 1][1] += dp[i][2]; // red -> blue
        dp[i + 1][3] += dp[i][2]; // red -> green
        dp[i + 1][2] += dp[i][3]; // green -> red
        dp[i + 1][4] += dp[i][3]; // green -> yellow
        dp[i + 1][3] += dp[i][4]; // yellow -> green
    }

    long long result = 0;
    for (int j = 0; j < 5; ++j) {
        result += dp[N][j];
    }

    fout << result << endl;

    return 0;
}
```

This code reads the input from `culori.in`, initializes the DP table, and iterates through each board to fill out the DP table based on the given transitions. Finally, it sums up all the possible ways to paint the N-th board and writes the result to `culori.out`. This approach ensures that the solution is efficient and runs in linear time relative to the number of boards, which is optimal for the given constraints.
