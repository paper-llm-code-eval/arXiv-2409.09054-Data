---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `interesant.in` and write to `interesant.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o mulțime $S$ care conține $N$ șiruri de caractere formate din litere mici ale alfabetului englezesc.  

Un șir de caractere se numește _interesant_ în raport cu celelalte șiruri ale mulțimii, dacă nu există un alt șir în mulțime care să-l conțină ca subșir. De exemplu, dacă mulțimea $S$ conține șirurile `abc`, `bde` și `abcdef`, atunci singurul șir *interesant* este `abcdef` deoarece `abc` și `bde` nu îl conțin ca subșir. Mai mult, `abc` și `bde` sunt subșiruri în `abcdef`, deci nu sunt *interesante*.

# Cerințe

Fiind dată o mulțime $S$ formată din $N$ șiruri de caractere se cere:

1. Să se determine cel mai lung șir. Dacă sunt mai multe șiruri având aceeași lungime maximă, se cere cel mai mic din punct de vedere lexicografic.
2. Să se determine toate șirurile _interesante_ din  mulțimea $S$.

# Date de intrare


Fișierul de intrare `interesant.in` conține pe prima linie două numere naturale $p$ și $N$, despărțite prin spațiu. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$. Pe următoarele $N$ linii, se găsesc șirurile de caractere, câte unul pe linie.


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai cerința $1$**.

În acest caz, în fișierul de ieșire `interesant.out` se va scrie cel mai lung șir dintre cele citite. Dacă există mai multe șiruri de aceeași lungime, se va scrie cel mai mic din punct de vedere lexicografic.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai cerința $2$**.

În acest caz, fișierul de ieșire `interesant.out` va conține pe prima linie o valoare $K$ ce reprezintă numărul de șiruri _interesante_, iar pe următoarele $K$ linii, șirurile *interesante* **în ordinea în care apar în fișierul de intrare**.


# Restricții și precizări

* $2 \leq N \leq 200$
* Lungimea unui șir va fi cuprinsă între $1$ și $5 \ 000$.
* Un subșir al șirului de caractere $C_0 C_1 C_2 \dots C_k$ se definește ca fiind o succesiune de caractere $C_{i_1} C_{i_2} C_{i_3} \dots C_{i_k}$, unde $0 \leq i_1 < i_2 < i_3 < \dots < i_k \leq k$.
* Fișierul de intrare **NU conține șiruri identice**.

| $p$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 80      |

---

Example:
`interesant.in`
```
1 5
abcacaaz
ad
abcacaad
acd
zyt
```

`interesant.out`
```
abcacaad
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

// Function to check if one string is a subsequence of another
bool isSubsequence(const std::string &sub, const std::string &str) {
    int m = sub.size(), n = str.size();
    int j = 0; // For index of sub
    for (int i = 0; i < n && j < m; i++) {
        if (sub[j] == str[i]) {
            j++;
        }
    }
    return j == m;
}

int main() {
    std::ifstream infile("interesant.in");
    std::ofstream outfile("interesant.out");

    int p, N;
    infile >> p >> N;
    infile.ignore(); // Ignore the newline character after N

    std::vector<std::string> strings(N);
    for (int i = 0; i < N; ++i) {
        std::getline(infile, strings[i]);
    }

    if (p == 1) {
        // Find the longest string, and if there are ties, the lexicographically smallest one
        std::string longest = strings[0];
        for (const auto &str : strings) {
            if (str.size() > longest.size() || (str.size() == longest.size() && str < longest)) {
                longest = str;
            }
        }
        outfile << longest << "\n";
    } else if (p == 2) {
        // Find all interesting strings
        std::vector<std::string> interesting;
        for (int i = 0; i < N; ++i) {
            bool isInteresting = true;
            for (int j = 0; j < N; ++j) {
                if (i != j && isSubsequence(strings[i], strings[j])) {
                    isInteresting = false;
                    break;
                }
            }
            if (isInteresting) {
                interesting.push_back(strings[i]);
            }
        }
        outfile << interesting.size() << "\n";
        for (const auto &str : interesting) {
            outfile << str << "\n";
        }
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Input Reading**:
   - We read `p` and `N` from the input file.
   - We then read the `N` strings into a vector.

2. **Handling p == 1**:
   - We iterate through the strings to find the longest one.
   - If multiple strings have the same maximum length, we choose the lexicographically smallest one.

3. **Handling p == 2**:
   - We iterate through each string and check if it is a subsequence of any other string.
   - If a string is not a subsequence of any other string, it is considered "interesting".
   - We collect all such interesting strings and write them to the output file.

4. **Subsequence Check**:
   - The `isSubsequence` function checks if one string is a subsequence of another by iterating through both strings.

This solution is efficient given the constraints and should work within the limits provided.
