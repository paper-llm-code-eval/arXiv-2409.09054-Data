---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a greedy algorithm. The idea is to sort the intervals by their ending points and then use the smallest number of refrigerators needed to cover all intervals. Here’s the step-by-step approach:

1. **Sort the Intervals**: First, we sort the intervals by their `max` values. This way, we can always try to place the next reactiv in the refrigerator with the smallest possible temperature that can still accommodate it.

2. **Greedy Selection**: We iterate through the sorted intervals and try to place each reactiv in the current refrigerator. If it doesn't fit, we need a new refrigerator.

This approach ensures that we use the minimum number of refrigerators necessary.

Here’s the C++ code implementing the above logic:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

struct Interval {
    int min, max;
};

bool compareIntervals(const Interval &a, const Interval &b) {
    return a.max < b.max;
}

int main() {
    std::ifstream fin("reactivi.in");
    std::ofstream fout("reactivi.out");
    
    int N;
    fin >> N;
    
    std::vector<Interval> reactives(N);
    
    for (int i = 0; i < N; ++i) {
        fin >> reactives[i].min >> reactives[i].max;
    }
    
    // Sort intervals by their max value
    std::sort(reactives.begin(), reactives.end(), compareIntervals);
    
    int refrigerators = 0;
    int current_max = -101; // Initialize to a value less than the minimum possible min_x
    
    for (const auto &reactive : reactives) {
        if (reactive.min > current_max) {
            // Need a new refrigerator
            ++refrigerators;
            current_max = reactive.max;
        }
    }
    
    fout << refrigerators << "\n";
    
    fin.close();
    fout.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of reactives and their respective temperature intervals from the file `reactivi.in`.
2. **Sorting**: We sort the intervals by their `max` values. This allows us to use a greedy approach to place each reactive in the optimal refrigerator.
3. **Greedy Algorithm**: We iterate through the sorted intervals. If the current interval's `min` value is greater than the `current_max` (the highest temperature of the last used refrigerator), we need a new refrigerator. We then update `current_max` to the `max` value of the current interval.
4. **Output**: Finally, we write the number of refrigerators needed to the file `reactivi.out`.

This solution is efficient and works within the constraints provided.
