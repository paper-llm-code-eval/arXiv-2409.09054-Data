---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a greedy algorithm. The idea is to sort the reactivs by their maximum temperature and then use a single refrigerator for as many reactivs as possible, starting from the one with the lowest maximum temperature. Here's the step-by-step approach:

1. **Read the input data**: We will read the number of reactivs and their respective temperature ranges.
2. **Sort the reactivs**: Sort the reactivs by their maximum temperature in ascending order.
3. **Greedy selection of refrigerators**: Initialize the first refrigerator with the maximum temperature of the first reactiv. For each subsequent reactiv, check if it can fit into the current refrigerator. If it can, continue; if not, start a new refrigerator with the maximum temperature of the current reactiv.
4. **Output the result**: The number of refrigerators used will be the answer.

Here's the C++ code implementing the above approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Reactiv {
    int min_temp;
    int max_temp;
};

bool compareByMaxTemp(const Reactiv &a, const Reactiv &b) {
    return a.max_temp < b.max_temp;
}

int main() {
    std::ifstream infile("reactivi.in");
    std::ofstream outfile("reactivi.out");

    int N;
    infile >> N;

    std::vector<Reactiv> reactivs(N);
    for (int i = 0; i < N; ++i) {
        infile >> reactivs[i].min_temp >> reactivs[i].max_temp;
    }

    std::sort(reactivs.begin(), reactivs.end(), compareByMaxTemp);

    int fridges = 1;
    int current_max_temp = reactivs[0].max_temp;

    for (int i = 1; i < N; ++i) {
        if (reactivs[i].min_temp > current_max_temp) {
            ++fridges;
            current_max_temp = reactivs[i].max_temp;
        }
    }

    outfile << fridges << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Data Structures**:
   - `Reactiv` struct to store the minimum and maximum temperatures for each reactiv.
   - A vector `reactivs` to store all the reactivs.

2. **Sorting**:
   - The reactivs are sorted by their maximum temperature using `std::sort` and a custom comparator `compareByMaxTemp`.

3. **Greedy Algorithm**:
   - Start with the first reactiv's maximum temperature as the initial refrigerator's temperature.
   - Iterate through the sorted reactivs and check if the current reactiv's minimum temperature is greater than the current refrigerator's maximum temperature. If so, increment the refrigerator count and update the current refrigerator's temperature.

4. **Output**:
   - The number of refrigerators used is written to the output file.

This solution is efficient with a time complexity of \(O(N \log N)\) due to sorting, making it suitable for the given constraints.
