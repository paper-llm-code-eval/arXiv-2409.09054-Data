---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the minimum number of refrigerators required to store all the reagents such that the temperature requirements of each reagent are met. Here's how we can approach the problem:

1. **Sort the Intervals**: First, we sort the reagents based on their maximum temperature in ascending order. Sorting helps us to efficiently find the optimal way to group the reagents into the minimum number of refrigerators.

2. **Greedy Approach**: We use a greedy approach to assign reagents to refrigerators. We keep track of the current temperature of the last refrigerator used and check if the next reagent can be stored in the same refrigerator. If it can't, we need a new refrigerator.

3. **Implementation**: We will read the input from the file `reactivi.in`, process the data, and then write the output to `reactivi.out`.

Here is the C++ code implementing the solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

struct Reagent {
    int min_temp;
    int max_temp;
};

bool compareReagents(const Reagent &a, const Reagent &b) {
    return a.max_temp < b.max_temp;
}

int main() {
    std::ifstream inFile("reactivi.in");
    std::ofstream outFile("reactivi.out");

    int N;
    inFile >> N;

    std::vector<Reagent> reagents(N);

    for (int i = 0; i < N; ++i) {
        inFile >> reagents[i].min_temp >> reagents[i].max_temp;
    }

    // Sort reagents by their maximum temperature
    std::sort(reagents.begin(), reagents.end(), compareReagents);

    int refrigerators = 0;
    int current_max_temp = -101;  // Initialize to a value less than the minimum possible temperature

    for (const auto &reagent : reagents) {
        if (reagent.min_temp > current_max_temp) {
            // Need a new refrigerator
            ++refrigerators;
            current_max_temp = reagent.max_temp;
        }
    }

    outFile << refrigerators << std::endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of reagents and their respective temperature ranges from the input file.
2. **Sorting**: We sort the reagents based on their maximum temperature using a custom comparator.
3. **Greedy Assignment**: We iterate through the sorted reagents and use a greedy approach to determine the minimum number of refrigerators needed. If the minimum temperature of the current reagent is greater than the maximum temperature of the last used refrigerator, we need a new refrigerator.
4. **Output**: Finally, we write the number of refrigerators needed to the output file.

This approach ensures that we efficiently determine the minimum number of refrigerators required while adhering to the temperature constraints for each reagent.
