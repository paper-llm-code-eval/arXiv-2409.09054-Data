---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a greedy algorithm. The idea is to sort the reactivs by their maximum temperature in ascending order. Then, we iterate through the sorted list and use a new refrigerator whenever the current reactiv cannot be stored in the existing refrigerator.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Reactiv {
    int min_temp;
    int max_temp;
};

bool compareReactivs(const Reactiv &a, const Reactiv &b) {
    return a.max_temp < b.max_temp;
}

int main() {
    ifstream infile("reactivi.in");
    ofstream outfile("reactivi.out");

    int N;
    infile >> N;

    vector<Reactiv> reactivs(N);
    for (int i = 0; i < N; ++i) {
        infile >> reactivs[i].min_temp >> reactivs[i].max_temp;
    }

    // Sort reactivs by their maximum temperature
    sort(reactivs.begin(), reactivs.end(), compareReactivs);

    int num_fridges = 0;
    int current_max_temp = -101; // Initialize to a value lower than the possible minimum temperature

    for (const auto &reactiv : reactivs) {
        if (reactiv.min_temp > current_max_temp) {
            // Need a new fridge
            ++num_fridges;
            current_max_temp = reactiv.max_temp;
        }
    }

    outfile << num_fridges << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the number of reactivs and their temperature ranges from the input file `reactivi.in`.
2. **Sorting**: The reactivs are sorted by their maximum temperature in ascending order. This allows us to use a greedy approach to place each reactiv in the optimal refrigerator.
3. **Greedy Algorithm**: We iterate through the sorted list of reactivs. If the minimum temperature of the current reactiv is greater than the maximum temperature of the last reactiv placed in the current refrigerator, we need a new refrigerator. We then update the current maximum temperature to the maximum temperature of the current reactiv.
4. **Output**: The number of refrigerators used is written to the output file `reactivi.out`.

This solution ensures that we use the minimum number of refrigerators necessary to store all reactivs within their required temperature ranges.
