---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to simulate the battles between immortals according to the given rules and ensure that only one immortal remains at the end. Given the constraints, we can use a backtracking approach to explore all possible sequences of battles.

Here is the C++ code that reads from `immortal.in` and writes to `immortal.out`:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <set>
#include <tuple>

using namespace std;

int n, m, I;
vector<pair<int, int>> immortals;
vector<tuple<int, int, int, int>> battles;

bool is_within_bounds(int x, int y) {
    return x >= 1 && x <= n && y >= 1 && y <= m;
}

bool is_occupied(const set<pair<int, int>>& occupied, int x, int y) {
    return occupied.find({x, y}) != occupied.end();
}

bool find_battle_sequence(set<pair<int, int>>& occupied) {
    if (occupied.size() == 1) return true;

    for (auto it = occupied.begin(); it != occupied.end(); ++it) {
        int x = it->first;
        int y = it->second;

        vector<pair<int, int>> directions = {{-2, 0}, {2, 0}, {0, -2}, {0, 2}};
        for (auto& dir : directions) {
            int nx = x + dir.first;
            int ny = y + dir.second;
            int mx = x + dir.first / 2;
            int my = y + dir.second / 2;

            if (is_within_bounds(nx, ny) && is_occupied(occupied, mx, my) && !is_occupied(occupied, nx, ny)) {
                occupied.erase({mx, my});
                occupied.erase({x, y});
                occupied.insert({nx, ny});
                battles.emplace_back(x, y, nx, ny);

                if (find_battle_sequence(occupied)) return true;

                battles.pop_back();
                occupied.erase({nx, ny});
                occupied.insert({x, y});
                occupied.insert({mx, my});
            }
        }
    }
    return false;
}

int main() {
    ifstream infile("immortal.in");
    ofstream outfile("immortal.out");

    infile >> n >> m >> I;
    immortals.resize(I);
    for (int i = 0; i < I; ++i) {
        infile >> immortals[i].first >> immortals[i].second;
    }

    set<pair<int, int>> occupied(immortals.begin(), immortals.end());

    find_battle_sequence(occupied);

    for (const auto& battle : battles) {
        outfile << get<0>(battle) << " " << get<1>(battle) << " " << get<2>(battle) << " " << get<3>(battle) << "\n";
    }

    return 0;
}
```

### Explanation:

1. **Input Reading**:
   - We read the grid dimensions `n` and `m`, and the number of immortals `I`.
   - We then read the initial positions of the immortals.

2. **Helper Functions**:
   - `is_within_bounds(int x, int y)`: Checks if the given coordinates are within the grid bounds.
   - `is_occupied(const set<pair<int, int>>& occupied, int x, int y)`: Checks if a given position is occupied by an immortal.

3. **Backtracking Function**:
   - `find_battle_sequence(set<pair<int, int>>& occupied)`: This function attempts to find a sequence of battles that reduces the number of immortals to one. It uses recursion and backtracking to explore all possible moves.

4. **Main Function**:
   - We read the input and initialize the set of occupied positions.
   - We call the `find_battle_sequence` function to find the sequence of battles.
   - Finally, we write the sequence of battles to the output file.

This approach ensures that we explore all possible sequences of battles and find one that leaves only one immortal standing. The use of sets helps efficiently manage the positions of the immortals.
