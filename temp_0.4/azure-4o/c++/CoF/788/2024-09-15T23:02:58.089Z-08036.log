---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <fstream>
#include <sstream>
#include <unordered_map>
#include <string>
#include <cctype>

int main() {
    std::ifstream infile("grad.in");
    std::ofstream outfile("grad.out");

    int n;
    infile >> n;
    infile.ignore(); // Ignore the newline character after the number

    std::string text;
    std::getline(infile, text);

    std::istringstream iss(text);
    std::string word;
    std::unordered_map<int, int> grade_map;
    int word_count = 0;

    while (iss >> word) {
        int grade = 0;
        for (char c : word) {
            if (std::isalpha(c)) {
                grade += (c - 'a' + 1);
            }
        }
        grade_map[grade]++;
        word_count++;
    }

    int group_count = grade_map.size();

    outfile << word_count << std::endl;
    outfile << group_count << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We use `std::ifstream` to read from `grad.in`.
   - The first line contains the integer `n`, which we read and then ignore the newline character.
   - The second line contains the text, which we read using `std::getline`.

2. **Processing Words:**
   - We use `std::istringstream` to split the text into words.
   - For each word, we calculate its grade by summing the positions of its letters in the alphabet.
   - We store the grades in an unordered map (`grade_map`) where keys are grades and values are counts of words with that grade.

3. **Counting Words and Groups:**
   - `word_count` keeps track of the total number of words.
   - `group_count` is the size of the `grade_map`, representing the number of unique grades.

4. **Writing Output:**
   - We use `std::ofstream` to write the results to `grad.out`.
   - The first line of the output is the number of words.
   - The second line of the output is the number of unique groups (grades).

This solution efficiently reads the input, processes the words, and outputs the required counts using standard C++ library functions and data structures.
