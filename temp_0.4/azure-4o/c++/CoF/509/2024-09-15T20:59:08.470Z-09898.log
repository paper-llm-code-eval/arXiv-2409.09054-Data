---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem. The solution reads input from `aeriana.in` and writes output to `aeriana.out` without using `cin`, `cout`, `printf()`, or `scanf()`. The solution calculates the maximum flight duration both before and after the virus intervention.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num == 2 || num == 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Function to calculate the sum of digits of a number
int sumOfDigits(int num) {
    int sum = 0;
    while (num) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

// Function to calculate flight duration in minutes
int calculateDuration(int H1, int M1, int H2, int M2) {
    int start = H1 * 60 + M1;
    int end = H2 * 60 + M2;
    if (end < start) end += 24 * 60; // Next day landing
    return end - start;
}

int main() {
    ifstream fin("aeriana.in");
    ofstream fout("aeriana.out");

    int C, N;
    fin >> C >> N;

    vector<int> durationsBefore, durationsAfter;

    for (int i = 0; i < N; ++i) {
        int A1, A2, H1, M1, H2, M2;
        fin >> A1 >> A2 >> H1 >> M1 >> H2 >> M2;

        int durationBefore = calculateDuration(H1, M1, H2, M2);
        durationsBefore.push_back(durationBefore);

        if (isPrime(A1) && A2 % sumOfDigits(A1) == 0) {
            int durationAfter = calculateDuration(H2, M2, H1, M1);
            durationsAfter.push_back(durationAfter);
        } else {
            durationsAfter.push_back(durationBefore);
        }
    }

    if (C == 1) {
        int maxDuration = *max_element(durationsBefore.begin(), durationsBefore.end());
        fout << maxDuration / 60 << " " << maxDuration % 60 << endl;
    } else {
        int maxDuration = *max_element(durationsAfter.begin(), durationsAfter.end());
        fout << maxDuration / 60 << " " << maxDuration % 60 << endl;
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:

1. **Reading Input**: The input is read from `aeriana.in` using `ifstream`.
2. **Prime Check**: A function `isPrime` is used to check if a number is prime.
3. **Sum of Digits**: A function `sumOfDigits` calculates the sum of digits of a number.
4. **Duration Calculation**: A function `calculateDuration` calculates the flight duration in minutes, considering the possibility of landing the next day.
5. **Main Logic**:
   - Read the number of flights and their details.
   - Calculate the duration of each flight before the virus intervention.
   - Check if a flight is special (based on the conditions given) and calculate the duration after the virus intervention.
   - Store the durations in vectors `durationsBefore` and `durationsAfter`.
6. **Output**:
   - Depending on the value of `C`, find the maximum duration from the respective vector and write the result to `aeriana.out`.

This solution ensures efficient calculation and handles the constraints provided in the problem statement.
