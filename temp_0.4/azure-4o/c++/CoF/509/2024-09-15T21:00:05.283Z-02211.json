{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/509/2024-09-15T21:00:05.283Z-02211.log",
  "attemptStart": 1726434005.283,
  "attemptEnd": 1726434022.55,
  "attemptDuration": 17.26699995994568,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nbool isPrime(int num) {\n    if (num <= 1) return false;\n    if (num <= 3) return true;\n    if (num % 2 == 0 || num % 3 == 0) return false;\n    for (int i = 5; i * i <= num; i += 6) {\n        if (num % i == 0 || num % (i + 2) == 0) return false;\n    }\n    return true;\n}\n\nint sumOfDigits(int num) {\n    int sum = 0;\n    while (num > 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;\n}\n\npair<int, int> calculateDuration(int H1, int M1, int H2, int M2) {\n    int startMinutes = H1 * 60 + M1;\n    int endMinutes = H2 * 60 + M2;\n    if (endMinutes < startMinutes) { // next day\n        endMinutes += 24 * 60;\n    }\n    int durationMinutes = endMinutes - startMinutes;\n    return {durationMinutes / 60, durationMinutes % 60};\n}\n\nint main() {\n    ifstream fin(\"aeriana.in\");\n    ofstream fout(\"aeriana.out\");\n\n    int C, N;\n    fin >> C >> N;\n\n    int maxDurationBefore = 0;\n    int maxDurationAfter = 0;\n\n    for (int i = 0; i < N; ++i) {\n        int A1, A2, H1, M1, H2, M2;\n        fin >> A1 >> A2 >> H1 >> M1 >> H2 >> M2;\n\n        auto [hoursBefore, minutesBefore] = calculateDuration(H1, M1, H2, M2);\n        int durationBefore = hoursBefore * 60 + minutesBefore;\n        maxDurationBefore = max(maxDurationBefore, durationBefore);\n\n        bool isSpecial = isPrime(A1) && (A2 % sumOfDigits(A1) == 0);\n        if (isSpecial) {\n            auto [hoursAfter, minutesAfter] = calculateDuration(H2, M2, H1, M1);\n            int durationAfter = hoursAfter * 60 + minutesAfter;\n            maxDurationAfter = max(maxDurationAfter, durationAfter);\n        } else {\n            maxDurationAfter = max(maxDurationAfter, durationBefore);\n        }\n    }\n\n    if (C == 1) {\n        fout << maxDurationBefore / 60 << \" \" << maxDurationBefore % 60 << \"\\n\";\n    } else {\n        fout << maxDurationAfter / 60 << \" \" << maxDurationAfter % 60 << \"\\n\";\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2119,
  "metadata": {
    "id": 509,
    "examples": [
      {
        "in": "1\n3\n47 55 0 0 23 59\n1 437 23 43 10 34\n11 457 10 43 10 23",
        "out": "23 59",
        "explainer": ""
      },
      {
        "in": "2\n3\n47 55 0 0 23 59\n1 437 23 43 10 34\n11 457 10 43 10 23",
        "out": "23 40",
        "explainer": ""
      }
    ],
    "body": "O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).\n\nUn virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.\n\n# Cerințe\n\nCunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:\n1. Care este durata maximă a unui zbor, înainte de intervenția virusului.\n2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).\n\n# Date de intrare\nFișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.\n\n# Date de ieșire\nFișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.\n\n# Restricții și precizări\n* $1 \\leq N \\leq 1 \\ 000$;\n* $0 \\leq H_1, H_2 \\leq 23$;\n* $0 \\leq M_1, M_2 \\leq 59$;\n* $0 \\leq A_1, A_2 \\leq 1 \\ 000 \\ 000 \\ 000$;\n* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;\n* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;\n* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;\n* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;\n* Pentru $47$ de puncte, $C = 2$.",
    "header": {
      "problem_id": 509,
      "problem_name": "aeriana",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 1,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "aeriana.in",
      "output_filename": "aeriana.out",
      "multiple_solutions": false,
      "original_source": "OJI 2023 V: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "aeriana.in",
      "output": "aeriana.out"
    },
    "consoleInteraction": false
  }
}