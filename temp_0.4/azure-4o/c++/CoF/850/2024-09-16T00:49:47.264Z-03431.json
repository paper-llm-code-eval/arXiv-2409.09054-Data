{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.4
    }
  },
  "programmingLang": "c++",
  "temperature": 0.4,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.4/azure-4o/c++/CoF/850/2024-09-16T00:49:47.264Z-03431.log",
  "attemptStart": 1726447787.264,
  "attemptEnd": 1726447820.36,
  "attemptDuration": 33.09599995613098,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n\nusing namespace std;\n\nconst int MAXN = 400;\nint m, n;\nchar farm[MAXN][MAXN];\nbool visited[MAXN][MAXN];\nint dx[] = {1, -1, 0, 0};\nint dy[] = {0, 0, 1, -1};\n\nint dfs(int x, int y, char color) {\n    if (x < 0 || x >= m || y < 0 || y >= n || visited[x][y] || farm[x][y] != color)\n        return 0;\n    visited[x][y] = true;\n    int size = 1;\n    for (int i = 0; i < 4; ++i) {\n        size += dfs(x + dx[i], y + dy[i], color);\n    }\n    return size;\n}\n\nint largestParcel() {\n    int maxParcel = 0;\n    fill(&visited[0][0], &visited[0][0] + sizeof(visited), false);\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (!visited[i][j]) {\n                maxParcel = max(maxParcel, dfs(i, j, farm[i][j]));\n            }\n        }\n    }\n    return maxParcel;\n}\n\ntuple<int, int, int, char> bestChange() {\n    int bestSize = 0;\n    int bestX = 0, bestY = 0;\n    char bestColor;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            char originalColor = farm[i][j];\n            for (char newColor = 'a'; newColor <= 'z'; ++newColor) {\n                if (newColor == originalColor) continue;\n                farm[i][j] = newColor;\n                int newSize = largestParcel();\n                if (newSize > bestSize) {\n                    bestSize = newSize;\n                    bestX = i;\n                    bestY = j;\n                    bestColor = newColor;\n                }\n                farm[i][j] = originalColor;\n            }\n        }\n    }\n    return make_tuple(bestSize, bestX, bestY, bestColor);\n}\n\nint main() {\n    ifstream fin(\"ferma.in\");\n    ofstream fout(\"ferma.out\");\n\n    int v;\n    fin >> v >> m >> n;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            fin >> farm[i][j];\n        }\n    }\n\n    if (v == 1) {\n        fout << largestParcel() << endl;\n    } else {\n        auto result = bestChange();\n        fout << get<1>(result) + 1 << \" \" << get<2>(result) + 1 << endl;\n        fout << get<3>(result) << endl;\n    }\n\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3176,
  "metadata": {
    "id": 850,
    "examples": [
      {
        "in": "1\n7 8\nrmmgggaa\nmvvgggaa\nmvvgvvvv\nvvvrvvvv\nvvrrrgga\nvvrrrggg\naaaaaaag",
        "out": "11",
        "explainer": ""
      },
      {
        "in": "2\n7 8\nrmmgggaa\nmvvgggaa\nmvvgvvvv\nvvvrvvvv\nvvrrrgga\nvvrrrggg\naaaaaaag",
        "out": "3 4\nv",
        "explainer": ""
      }
    ],
    "body": "Un fermier deține o fermă de formă dreptunghiulară cu lungimea $m$ metri și lățimea $n$ metri. Respectând principiul rotației culturilor, fermierul și a realizat un plan pentru semănarea culturilor în noul an. Astfel, el a desenat un dreptunghi pe care l-a împărțit în $m \\cdot n$ celule, fiecare corespunzând unui metru pătrat, și a colorat în culori diferite zonele care corespund unor culturi diferite. O cultură poate fi semănată pe mai multe parcele. Două celule care au o latură comună aparțin aceleiași parcele dacă au aceeași culoare (sunt însămânțate cu aceeași cultură).  Fermierul are posibilitatea să irige o sigură parcelă și dorește să aleagă parcela cu cea mai mare suprafață. Nefiind mulțumit de suprafața rezultată, s-a întrebat dacă ar putea schimba cultura de pe o singură celulă, astfel încât să obțină o parcelă de suprafață mai mare.\n\nExemplu de fermă (_imagine 1_):\n\n~[0.png]\n\n# Cerință\n\nDându-se dimensiunile fermei și pentru fiecare celulă culoarea corespunzătoare culturii semănate, determinați:\n\n1. **Varianta 1:** Suprafața maximă a unei parcele în planul inițial.\n2. **Varianta 2:** Numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură și culoarea corespunzătoare noii culturi în vederea obţinerii celei mai mari parcele posibile.\n\n\n# Date de intrare\n\n\nFișierul de intrare `ferma.in` va conține:]\n\n* pe prima linie un număr natural $v$ ($1 ≤ v ≤ 2$) indicând varianta cerinței de rezolvare\n* pe a doua linie două numere naturale $m$ şi $n$ separate printr-un spațiu, cu semnificația din enunț\n* pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ caractere (litere mici), reprezentând codurile culturilor ce vor fi semănate pe cele $n$ celule corespunzătoare fiecărei linii. \n\n\n# Date de ieșire\n\n\nFișierul de ieșire `ferma.out` va conține:\n**Varianta 1** – pentru $v=1$: \n* pe prima linie numărul natural $s$, reprezentând suprafața maximă a unei parcele.\n\n**Varianta 2** – pentru $v=2$: \n* pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură, în vederea obținerii unei parcele cu suprafața maximă; \n* pe a doua linie un caracter reprezentând codul culorii corespunzătoare noii culturi din celula determinată.\n\n\n# Restricții și precizări\n\n* $2 \\leq n, m \\leq 400$\n* Numărul de culturi distincte este cel puţin $2$ şi cel mult $26$.\n* $30\\%$ din teste vor avea pe prima linie valoarea $1$, iar restul de $70\\%$ din teste vor avea pe prima linie valoarea $2$.\n* Pentru varianta $2$ se punctează orice soluție care conduce la obținerea unei parcele cu suprafața maximă. Nu se acordă punctaje parțiale.",
    "header": {
      "problem_id": 850,
      "problem_name": "Ferma",
      "tags": "[Flood Fill]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.06,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "ferma.in",
      "output_filename": "ferma.out",
      "multiple_solutions": true,
      "original_source": "OJI 2014 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "ferma.in",
      "output": "ferma.out"
    },
    "consoleInteraction": false
  }
}