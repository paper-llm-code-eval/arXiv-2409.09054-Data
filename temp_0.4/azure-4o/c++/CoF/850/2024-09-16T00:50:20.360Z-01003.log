---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ferma.in` and write to `ferma.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un fermier deține o fermă de formă dreptunghiulară cu lungimea $m$ metri și lățimea $n$ metri. Respectând principiul rotației culturilor, fermierul și a realizat un plan pentru semănarea culturilor în noul an. Astfel, el a desenat un dreptunghi pe care l-a împărțit în $m \cdot n$ celule, fiecare corespunzând unui metru pătrat, și a colorat în culori diferite zonele care corespund unor culturi diferite. O cultură poate fi semănată pe mai multe parcele. Două celule care au o latură comună aparțin aceleiași parcele dacă au aceeași culoare (sunt însămânțate cu aceeași cultură).  Fermierul are posibilitatea să irige o sigură parcelă și dorește să aleagă parcela cu cea mai mare suprafață. Nefiind mulțumit de suprafața rezultată, s-a întrebat dacă ar putea schimba cultura de pe o singură celulă, astfel încât să obțină o parcelă de suprafață mai mare.

Exemplu de fermă (_imagine 1_):

~[0.png]

# Cerință

Dându-se dimensiunile fermei și pentru fiecare celulă culoarea corespunzătoare culturii semănate, determinați:

1. **Varianta 1:** Suprafața maximă a unei parcele în planul inițial.
2. **Varianta 2:** Numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură și culoarea corespunzătoare noii culturi în vederea obţinerii celei mai mari parcele posibile.


# Date de intrare


Fișierul de intrare `ferma.in` va conține:]

* pe prima linie un număr natural $v$ ($1 ≤ v ≤ 2$) indicând varianta cerinței de rezolvare
* pe a doua linie două numere naturale $m$ şi $n$ separate printr-un spațiu, cu semnificația din enunț
* pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ caractere (litere mici), reprezentând codurile culturilor ce vor fi semănate pe cele $n$ celule corespunzătoare fiecărei linii. 


# Date de ieșire


Fișierul de ieșire `ferma.out` va conține:
**Varianta 1** – pentru $v=1$: 
* pe prima linie numărul natural $s$, reprezentând suprafața maximă a unei parcele.

**Varianta 2** – pentru $v=2$: 
* pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul liniei, respectiv al coloanei celulei pe care va semăna o altă cultură, în vederea obținerii unei parcele cu suprafața maximă; 
* pe a doua linie un caracter reprezentând codul culorii corespunzătoare noii culturi din celula determinată.


# Restricții și precizări

* $2 \leq n, m \leq 400$
* Numărul de culturi distincte este cel puţin $2$ şi cel mult $26$.
* $30\%$ din teste vor avea pe prima linie valoarea $1$, iar restul de $70\%$ din teste vor avea pe prima linie valoarea $2$.
* Pentru varianta $2$ se punctează orice soluție care conduce la obținerea unei parcele cu suprafața maximă. Nu se acordă punctaje parțiale.

---

Example:
`ferma.in`
```
1
7 8
rmmgggaa
mvvgggaa
mvvgvvvv
vvvrvvvv
vvrrrgga
vvrrrggg
aaaaaaag
```

`ferma.out`
```
11
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to break it down into several steps:

1. **Reading Input Efficiently**: We'll use file I/O functions to read the input data quickly.
2. **Finding the Largest Parcel**: We'll use a flood fill algorithm (similar to DFS) to find the largest connected component of cells with the same color.
3. **Finding the Optimal Cell to Change**: For each cell, we'll consider changing its color to the color of an adjacent cell and then calculate the potential new largest parcel size.

Here is the complete C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Cell {
    int x, y;
};

const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};

int m, n, variant;
vector<vector<char>> farm;
vector<vector<bool>> visited;

bool isValid(int x, int y) {
    return x >= 0 && x < m && y >= 0 && y < n;
}

int floodFill(int x, int y, char color) {
    queue<Cell> q;
    q.push({x, y});
    visited[x][y] = true;
    int area = 0;

    while (!q.empty()) {
        Cell cell = q.front();
        q.pop();
        area++;

        for (int i = 0; i < 4; ++i) {
            int nx = cell.x + dx[i];
            int ny = cell.y + dy[i];

            if (isValid(nx, ny) && !visited[nx][ny] && farm[nx][ny] == color) {
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
    }

    return area;
}

int getMaxParcelSize() {
    visited.assign(m, vector<bool>(n, false));
    int maxParcelSize = 0;

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            if (!visited[i][j]) {
                maxParcelSize = max(maxParcelSize, floodFill(i, j, farm[i][j]));
            }
        }
    }

    return maxParcelSize;
}

pair<pair<int, int>, char> getBestChange() {
    int bestSize = 0;
    pair<int, int> bestCell = {0, 0};
    char bestColor = 'a';

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            char originalColor = farm[i][j];
            for (int k = 0; k < 4; ++k) {
                int ni = i + dx[k];
                int nj = j + dy[k];

                if (isValid(ni, nj) && farm[ni][nj] != originalColor) {
                    farm[i][j] = farm[ni][nj];
                    int newSize = getMaxParcelSize();
                    if (newSize > bestSize) {
                        bestSize = newSize;
                        bestCell = {i, j};
                        bestColor = farm[ni][nj];
                    }
                    farm[i][j] = originalColor;
                }
            }
        }
    }

    return {bestCell, bestColor};
}

int main() {
    ifstream fin("ferma.in");
    ofstream fout("ferma.out");

    fin >> variant >> m >> n;
    farm.resize(m, vector<char>(n));

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            fin >> farm[i][j];
        }
    }

    if (variant == 1) {
        fout << getMaxParcelSize() << endl;
    } else {
        auto bestChange = getBestChange();
        fout << bestChange.first.first + 1 << " " << bestChange.first.second + 1 << endl;
        fout << bestChange.second << endl;
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the input from `ferma.in` using `ifstream` and store the farm layout in a 2D vector.
2. **Flood Fill Algorithm**: We use a queue-based flood fill algorithm to calculate the size of connected components (parcels) of the same color.
3. **Finding the Largest Parcel**: We iterate over all cells and use the flood fill to find the largest parcel.
4. **Finding the Optimal Cell to Change**: For each cell, we consider changing its color to match an adjacent cell and then calculate the potential new largest parcel size. We keep track of the best change that results in the largest parcel.
5. **Output**: Depending on the variant, we either output the size of the largest parcel or the best cell to change and the new color.

This solution ensures efficient execution while adhering to the constraints and requirements of the problem.
