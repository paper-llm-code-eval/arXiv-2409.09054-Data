---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <cmath>

using namespace std;

// Function to compute the number of divisors of a number
int countDivisors(int num) {
    int count = 0;
    int sqrtNum = static_cast<int>(sqrt(num));
    for (int i = 1; i <= sqrtNum; ++i) {
        if (num % i == 0) {
            count += (i == num / i) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    ifstream fin("forta.in");
    ofstream fout("forta.out");

    int c, n;
    fin >> c >> n;

    vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
    }

    if (c == 1) {
        // Determine the smallest number with the maximum force
        int maxForce = 0;
        int minNumberWithMaxForce = 2e9 + 1;
        for (int num : numbers) {
            int force = countDivisors(num);
            if (force > maxForce) {
                maxForce = force;
                minNumberWithMaxForce = num;
            } else if (force == maxForce && num < minNumberWithMaxForce) {
                minNumberWithMaxForce = num;
            }
        }
        fout << minNumberWithMaxForce << endl;
    } else if (c == 2) {
        // Determine the maximum length of a sequence with the same force
        unordered_map<int, int> forceCount;
        for (int num : numbers) {
            int force = countDivisors(num);
            forceCount[force]++;
        }

        int maxSequenceLength = 0;
        for (const auto& pair : forceCount) {
            if (pair.second > maxSequenceLength) {
                maxSequenceLength = pair.second;
            }
        }
        fout << maxSequenceLength << endl;
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The program reads the input from `forta.in` using `ifstream`.
   - It reads the first integer `c` to determine which task to perform.
   - It reads the second integer `n` which is the number of elements in the sequence.
   - It reads the sequence of `n` natural numbers into a vector `numbers`.

2. **Count Divisors Function:**
   - The `countDivisors` function calculates the number of divisors of a given number by iterating up to the square root of the number and counting the divisors.

3. **Task 1: Find the Smallest Number with Maximum Force:**
   - The program initializes `maxForce` to 0 and `minNumberWithMaxForce` to a large number.
   - It iterates through each number in the sequence, calculates its force, and updates `maxForce` and `minNumberWithMaxForce` accordingly.

4. **Task 2: Find the Maximum Length of a Sequence with the Same Force:**
   - The program uses an unordered map `forceCount` to count the occurrences of each force.
   - It iterates through the sequence, calculates the force for each number, and updates the map.
   - It then finds the maximum value in the map, which represents the maximum length of a sequence with the same force.

5. **Output:**
   - The program writes the result to `forta.out` using `ofstream`.

This solution is efficient and should work within the constraints provided.
