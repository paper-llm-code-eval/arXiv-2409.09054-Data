---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>
#include <cmath>

// Function to calculate the number of divisors of a number
int calculateDivisors(int x) {
    int count = 0;
    int sqrtX = static_cast<int>(std::sqrt(x));
    for (int i = 1; i <= sqrtX; ++i) {
        if (x % i == 0) {
            count += 2; // i and x/i
        }
    }
    if (sqrtX * sqrtX == x) {
        count--; // Correct for a perfect square
    }
    return count;
}

int main() {
    std::ifstream inFile("forta.in");
    std::ofstream outFile("forta.out");

    int c, n;
    inFile >> c >> n;

    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        inFile >> numbers[i];
    }

    if (c == 1) {
        int maxForce = 0;
        int minNumberWithMaxForce = std::numeric_limits<int>::max();

        for (int num : numbers) {
            int force = calculateDivisors(num);
            if (force > maxForce) {
                maxForce = force;
                minNumberWithMaxForce = num;
            } else if (force == maxForce && num < minNumberWithMaxForce) {
                minNumberWithMaxForce = num;
            }
        }

        outFile << minNumberWithMaxForce << std::endl;
    } else if (c == 2) {
        std::unordered_map<int, int> forceCountMap;

        for (int num : numbers) {
            int force = calculateDivisors(num);
            forceCountMap[force]++;
        }

        int maxSequenceLength = 0;
        for (const auto& pair : forceCountMap) {
            if (pair.second > maxSequenceLength) {
                maxSequenceLength = pair.second;
            }
        }

        outFile << maxSequenceLength << std::endl;
    }

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `forta.in` using `ifstream`.
2. **Divisor Calculation**: The function `calculateDivisors` calculates the number of divisors for a given number using an efficient method up to the square root of the number.
3. **Processing Requirement 1**: For the first requirement, the program finds the number with the maximum force and, in case of ties, the smallest number.
4. **Processing Requirement 2**: For the second requirement, the program counts the occurrences of each force and finds the maximum count.
5. **Output**: The result is written to `forta.out` using `ofstream`.

This solution ensures efficient computation and handles the constraints provided.
