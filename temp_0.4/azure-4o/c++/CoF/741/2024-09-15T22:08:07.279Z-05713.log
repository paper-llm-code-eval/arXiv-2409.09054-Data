---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to calculate the sums of the elements in the matrix above and below each row and to the left and right of each column. We then find the row and column that minimize the absolute difference of these sums.

Here is the C++ code for this problem:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <iomanip>

int main() {
    std::ifstream infile("ocr.in");
    std::ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    std::vector<std::vector<double>> matrix(n, std::vector<double>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> matrix[i][j];
        }
    }

    std::vector<double> rowSumAbove(n, 0), rowSumBelow(n, 0);
    std::vector<double> colSumLeft(m, 0), colSumRight(m, 0);

    // Calculate row sums above and below each row
    for (int i = 1; i < n; ++i) {
        rowSumAbove[i] = rowSumAbove[i - 1] + std::accumulate(matrix[i - 1].begin(), matrix[i - 1].end(), 0.0);
    }
    for (int i = n - 2; i >= 0; --i) {
        rowSumBelow[i] = rowSumBelow[i + 1] + std::accumulate(matrix[i + 1].begin(), matrix[i + 1].end(), 0.0);
    }

    // Calculate column sums left and right of each column
    for (int j = 1; j < m; ++j) {
        for (int i = 0; i < n; ++i) {
            colSumLeft[j] += matrix[i][j - 1];
        }
        colSumLeft[j] += colSumLeft[j - 1];
    }
    for (int j = m - 2; j >= 0; --j) {
        for (int i = 0; i < n; ++i) {
            colSumRight[j] += matrix[i][j + 1];
        }
        colSumRight[j] += colSumRight[j + 1];
    }

    int bestRow = 0, bestCol = 0;
    double minRowDiff = std::abs(rowSumAbove[0] - rowSumBelow[0]);
    double minColDiff = std::abs(colSumLeft[0] - colSumRight[0]);

    for (int i = 1; i < n; ++i) {
        double rowDiff = std::abs(rowSumAbove[i] - rowSumBelow[i]);
        if (rowDiff < minRowDiff || (rowDiff == minRowDiff && i > bestRow)) {
            bestRow = i;
            minRowDiff = rowDiff;
        }
    }

    for (int j = 1; j < m; ++j) {
        double colDiff = std::abs(colSumLeft[j] - colSumRight[j]);
        if (colDiff < minColDiff || (colDiff == minColDiff && j > bestCol)) {
            bestCol = j;
            minColDiff = colDiff;
        }
    }

    outfile << bestRow + 1 << " " << bestCol + 1 << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading the Input:**
   - We read the dimensions `n` and `m` of the matrix.
   - We then read the matrix values into a 2D vector `matrix`.

2. **Precompute Sums:**
   - We precompute the sums of elements above and below each row in two vectors `rowSumAbove` and `rowSumBelow`.
   - We also precompute the sums of elements to the left and right of each column in two vectors `colSumLeft` and `colSumRight`.

3. **Finding the Best Row and Column:**
   - We iterate through each row and column to find the one that minimizes the absolute difference between the sums above and below (for rows) and left and right (for columns).
   - We keep track of the best row and column indices, prioritizing higher indices in case of ties.

4. **Output the Result:**
   - We write the best row and column indices to the output file, adjusting for 1-based indexing.

This approach ensures that we efficiently compute the required sums and find the optimal center of gravity for the image.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:26:52: error: 'accumulate' is not a member of 'std'
   26 |         rowSumAbove[i] = rowSumAbove[i - 1] + std::accumulate(matrix[i - 1].begin(), matrix[i - 1].end(), 0.0);
      |                                                    ^~~~~~~~~~
main.cpp:29:52: error: 'accumulate' is not a member of 'std'
   29 |         rowSumBelow[i] = rowSumBelow[i + 1] + std::accumulate(matrix[i + 1].begin(), matrix[i + 1].end(), 0.0);
      |                                                    ^~~~~~~~~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It looks like the error is due to the missing inclusion of the `<numeric>` header, which is required for the `std::accumulate` function. Let's include the necessary header and ensure the program compiles correctly.

Here's the fixed version of the program:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <numeric>
#include <cmath>
#include <iomanip>

int main() {
    std::ifstream infile("ocr.in");
    std::ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    std::vector<std::vector<double>> matrix(n, std::vector<double>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> matrix[i][j];
        }
    }

    std::vector<double> rowSumAbove(n, 0), rowSumBelow(n, 0);
    std::vector<double> colSumLeft(m, 0), colSumRight(m, 0);

    // Calculate row sums above and below each row
    for (int i = 1; i < n; ++i) {
        rowSumAbove[i] = rowSumAbove[i - 1] + std::accumulate(matrix[i - 1].begin(), matrix[i - 1].end(), 0.0);
    }
    for (int i = n - 2; i >= 0; --i) {
        rowSumBelow[i] = rowSumBelow[i + 1] + std::accumulate(matrix[i + 1].begin(), matrix[i + 1].end(), 0.0);
    }

    // Calculate column sums left and right of each column
    for (int j = 1; j < m; ++j) {
        for (int i = 0; i < n; ++i) {
            colSumLeft[j] += matrix[i][j - 1];
        }
        colSumLeft[j] += colSumLeft[j - 1];
    }
    for (int j = m - 2; j >= 0; --j) {
        for (int i = 0; i < n; ++i) {
            colSumRight[j] += matrix[i][j + 1];
        }
        colSumRight[j] += colSumRight[j + 1];
    }

    int bestRow = 0, bestCol = 0;
    double minRowDiff = std::abs(rowSumAbove[0] - rowSumBelow[0]);
    double minColDiff = std::abs(colSumLeft[0] - colSumRight[0]);

    for (int i = 1; i < n; ++i) {
        double rowDiff = std::abs(rowSumAbove[i] - rowSumBelow[i]);
        if (rowDiff < minRowDiff || (rowDiff == minRowDiff && i > bestRow)) {
            bestRow = i;
            minRowDiff = rowDiff;
        }
    }

    for (int j = 1; j < m; ++j) {
        double colDiff = std::abs(colSumLeft[j] - colSumRight[j]);
        if (colDiff < minColDiff || (colDiff == minColDiff && j > bestCol)) {
            bestCol = j;
            minColDiff = colDiff;
        }
    }

    outfile << bestRow + 1 << " " << bestCol + 1 << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of Fixes:
1. **Include `<numeric>` Header:**
   - Added `#include <numeric>` at the beginning of the file to use the `std::accumulate` function.

2. **Rest of the Code:**
   - The rest of the code remains the same, ensuring that the logic for calculating sums and finding the optimal center of gravity is correctly implemented.

This should compile and run correctly, producing the desired output.
