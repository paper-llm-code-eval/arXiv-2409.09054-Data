---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to determine the center of gravity of a given image represented as a 2D array of real numbers. The center of gravity is defined as the point where the absolute differences between the sums of the elements above and below the row, and to the left and right of the column, are minimized.

Here's a step-by-step approach to solve this:

1. **Read the Input:**
   - Read the dimensions of the array \( n \) (number of rows) and \( m \) (number of columns).
   - Read the \( n \times m \) array of real numbers.

2. **Precompute Row and Column Sums:**
   - Compute the cumulative sums for rows and columns to facilitate quick sum calculations for any subarray.

3. **Calculate Differences:**
   - For each possible center of gravity (each element in the array), calculate the absolute differences between the sums of elements above and below the row, and to the left and right of the column.

4. **Find the Optimal Center:**
   - Track the minimal differences and update the coordinates of the center of gravity accordingly. If multiple centers have the same minimal differences, choose the one with the highest row index, and if still tied, the highest column index.

5. **Output the Result:**
   - Write the coordinates of the center of gravity to the output file.

Here is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <limits>

int main() {
    std::ifstream infile("ocr.in");
    std::ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    std::vector<std::vector<double>> image(n, std::vector<double>(m));
    std::vector<double> rowSum(n, 0.0);
    std::vector<double> colSum(m, 0.0);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> image[i][j];
            rowSum[i] += image[i][j];
            colSum[j] += image[i][j];
        }
    }

    double minRowDiff = std::numeric_limits<double>::max();
    double minColDiff = std::numeric_limits<double>::max();
    int bestRow = -1, bestCol = -1;

    for (int i = 0; i < n; ++i) {
        double sumAbove = 0.0;
        for (int k = 0; k < i; ++k) {
            sumAbove += rowSum[k];
        }
        double sumBelow = 0.0;
        for (int k = i + 1; k < n; ++k) {
            sumBelow += rowSum[k];
        }
        double rowDiff = std::abs(sumAbove - sumBelow);

        for (int j = 0; j < m; ++j) {
            double sumLeft = 0.0;
            for (int k = 0; k < j; ++k) {
                sumLeft += colSum[k];
            }
            double sumRight = 0.0;
            for (int k = j + 1; k < m; ++k) {
                sumRight += colSum[k];
            }
            double colDiff = std::abs(sumLeft - sumRight);

            if (rowDiff < minRowDiff || (rowDiff == minRowDiff && colDiff < minColDiff) ||
                (rowDiff == minRowDiff && colDiff == minColDiff && (i > bestRow || (i == bestRow && j > bestCol)))) {
                minRowDiff = rowDiff;
                minColDiff = colDiff;
                bestRow = i;
                bestCol = j;
            }
        }
    }

    outfile << bestRow + 1 << " " << bestCol + 1 << std::endl;

    return 0;
}
```

### Explanation:
- **Reading Input:** The input is read from `ocr.in` and stored in a 2D vector `image`. The row and column sums are also computed during this step.
- **Calculating Differences:** For each possible center of gravity, the differences between the sums of elements above and below the row, and to the left and right of the column, are calculated.
- **Finding the Optimal Center:** The optimal center is determined by comparing the calculated differences and updating the coordinates accordingly.
- **Outputting the Result:** The result is written to `ocr.out`.

This solution ensures efficient computation by leveraging cumulative sums and iterating through the array only a few times, which is crucial given the constraints.
