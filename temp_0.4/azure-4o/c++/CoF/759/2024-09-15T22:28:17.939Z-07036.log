---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cartele.in` and write to `cartele.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.
\
Un angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.
~[0.png|align=center|width=45em]

# Cerinţă
Scrieţi un program care determină care dintre cartele permite accesul în sediul firmei.

# Date de intrare
Fişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.

# Date de ieşire
În fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.

# Restricţii şi precizări
- $1 < N, C \leq 50$

---

Example:
`cartele.in`
```
3 2
0 1 0
0 0 1
1 0 0
1 0 0
0 0 1
0 1 0
0 0 1
0 0 1
0 1 0
```

`cartele.out`
```
1
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the challenge efficiently, we need to check if any of the given cards match the template in any of the possible orientations. Given the constraints (N, C ≤ 50), we can afford to perform a brute-force check for each card and each possible orientation.

Here's the detailed plan:

1. **Read Input**: Read the dimensions (N) and the number of cards (C) from the input file.
2. **Store Template and Cards**: Store the template and each card in a 2D vector.
3. **Generate Orientations**: For each card, generate all possible orientations:
   - Original
   - 90 degrees rotation
   - 180 degrees rotation
   - 270 degrees rotation
   - Horizontal flip
   - Vertical flip
   - Diagonal flip (both diagonals)
4. **Check Matching**: For each card and each orientation, check if it matches the template.
5. **Output Results**: Write the results to the output file.

Here is the C++ code to achieve this:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int>> rotate90(const vector<vector<int>>& mat) {
    int N = mat.size();
    vector<vector<int>> rotated(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            rotated[j][N - 1 - i] = mat[i][j];
    return rotated;
}

vector<vector<int>> rotate180(const vector<vector<int>>& mat) {
    return rotate90(rotate90(mat));
}

vector<vector<int>> rotate270(const vector<vector<int>>& mat) {
    return rotate90(rotate180(mat));
}

vector<vector<int>> flipHorizontal(const vector<vector<int>>& mat) {
    int N = mat.size();
    vector<vector<int>> flipped(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            flipped[i][N - 1 - j] = mat[i][j];
    return flipped;
}

vector<vector<int>> flipVertical(const vector<vector<int>>& mat) {
    int N = mat.size();
    vector<vector<int>> flipped(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            flipped[N - 1 - i][j] = mat[i][j];
    return flipped;
}

bool match(const vector<vector<int>>& a, const vector<vector<int>>& b) {
    int N = a.size();
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            if (a[i][j] != b[i][j])
                return false;
    return true;
}

int main() {
    ifstream fin("cartele.in");
    ofstream fout("cartele.out");

    int N, C;
    fin >> N >> C;

    vector<vector<int>> templatePattern(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            fin >> templatePattern[i][j];

    vector<vector<vector<int>>> cards(C, vector<vector<int>>(N, vector<int>(N)));
    for (int k = 0; k < C; ++k)
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < N; ++j)
                fin >> cards[k][i][j];

    for (const auto& card : cards) {
        bool valid = false;
        vector<vector<int>> orientations[8] = {
            card,
            rotate90(card),
            rotate180(card),
            rotate270(card),
            flipHorizontal(card),
            flipVertical(card),
            rotate90(flipHorizontal(card)),
            rotate90(flipVertical(card))
        };

        for (const auto& orientation : orientations) {
            if (match(templatePattern, orientation)) {
                valid = true;
                break;
            }
        }

        fout << (valid ? 1 : 0) << '\n';
    }

    return 0;
}
```

### Explanation:
1. **Rotation and Flipping Functions**: These functions generate the various orientations of a card.
2. **Match Function**: This function checks if two matrices are identical.
3. **Main Logic**: The main function reads the input, generates all orientations for each card, and checks if any orientation matches the template. The results are then written to the output file.

This approach ensures that we check all possible orientations efficiently within the given constraints.
