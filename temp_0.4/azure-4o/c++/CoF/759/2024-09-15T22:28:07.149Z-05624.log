---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cartele.in` and write to `cartele.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.
\
Un angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.
~[0.png|align=center|width=45em]

# Cerinţă
Scrieţi un program care determină care dintre cartele permite accesul în sediul firmei.

# Date de intrare
Fişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.

# Date de ieşire
În fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.

# Restricţii şi precizări
- $1 < N, C \leq 50$

---

Example:
`cartele.in`
```
3 2
0 1 0
0 0 1
1 0 0
1 0 0
0 0 1
0 1 0
0 0 1
0 0 1
0 1 0
```

`cartele.out`
```
1
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to consider all possible orientations of each card and check if any of them match the template. The possible orientations include the original orientation, three rotations (90, 180, and 270 degrees), and the flipped versions of these orientations. Here's how we can approach this:

1. **Read Input**: Read the template and the cards from the input file.
2. **Generate Orientations**: For each card, generate all possible orientations.
3. **Check Match**: Compare each orientation of the card with the template to see if it matches.
4. **Output Result**: Write the results to the output file.

Here's the C++ code to achieve this:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

// Function to rotate a matrix 90 degrees clockwise
std::vector<std::vector<int>> rotate90(const std::vector<std::vector<int>>& matrix) {
    int N = matrix.size();
    std::vector<std::vector<int>> rotated(N, std::vector<int>(N));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            rotated[j][N - 1 - i] = matrix[i][j];
        }
    }
    return rotated;
}

// Function to flip a matrix horizontally
std::vector<std::vector<int>> flipHorizontal(const std::vector<std::vector<int>>& matrix) {
    int N = matrix.size();
    std::vector<std::vector<int>> flipped = matrix;
    for (int i = 0; i < N; ++i) {
        std::reverse(flipped[i].begin(), flipped[i].end());
    }
    return flipped;
}

// Function to check if two matrices are equal
bool areEqual(const std::vector<std::vector<int>>& a, const std::vector<std::vector<int>>& b) {
    int N = a.size();
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (a[i][j] != b[i][j]) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    std::ifstream fin("cartele.in");
    std::ofstream fout("cartele.out");

    int N, C;
    fin >> N >> C;

    std::vector<std::vector<int>> templateMatrix(N, std::vector<int>(N));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            fin >> templateMatrix[i][j];
        }
    }

    std::vector<std::vector<std::vector<int>>> cards(C, std::vector<std::vector<int>>(N, std::vector<int>(N)));
    for (int k = 0; k < C; ++k) {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                fin >> cards[k][i][j];
            }
        }
    }

    for (const auto& card : cards) {
        bool access = false;
        std::vector<std::vector<int>> current = card;
        for (int i = 0; i < 4; ++i) {
            if (areEqual(current, templateMatrix) || areEqual(flipHorizontal(current), templateMatrix)) {
                access = true;
                break;
            }
            current = rotate90(current);
        }
        fout << (access ? 1 : 0) << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the input values for N and C, followed by the template matrix and the matrices for each card.
2. **Generating Orientations**: For each card, we generate all possible orientations by rotating the card 90 degrees three times and checking both the original and flipped versions.
3. **Checking Equality**: We compare each orientation of the card with the template matrix to see if they match.
4. **Outputting Results**: We write `1` to the output file if a card matches the template in any orientation, otherwise `0`.

This solution ensures that we check all possible orientations efficiently and outputs the correct result for each card.
