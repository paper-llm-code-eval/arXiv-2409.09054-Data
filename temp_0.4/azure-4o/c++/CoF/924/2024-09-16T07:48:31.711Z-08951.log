---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `wind.in` and write to `wind.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Domnul Vânt a pus pe marginea unei șosele $N$ centrale eoliene, dintre care unele produc energie electrică, iar altele, deocamdată, doar consumă energie. El a etichetat centralele cu numerele naturale distincte de la $1$ la $N$, în ordinea poziționării lor pe șosea. Fiecare centrală eoliană are la bază un ecran pe care este afișat un număr întreg, reprezentând cantitatea de energie pe care o produce (dacă numărul este pozitiv) sau pe care o consumă (dacă numărul este negativ).

Pentru **a construi corect $k$ orașe** de-a lungul acestei șosele, un arhitect trebuie să aibă în vedere că:
- fiecărui oraș îi va fi atribuit câte un grup format din centrale eoliene vecine pe șosea, toate grupurile având același număr de centrale;
- cantitatea de energie repartizată unui oraș este egală cu suma numerelor afișate pe ecranele centralelor eoliene din grupul atribuit; uneori este posibil ca, deocamdată, suma obținută să fie negativă;
- fiecare dintre cele $N$ centrale eoliene trebuie să fie atribuită unui oraș;
- factorul de dezechilibru, notat cu $P(k)$, este valoarea maximă a diferenței dintre energiile repartizate oricăror două orașe diferite, dintre cele $k$.

# Cerință
Scrieţi un program care citește numărul $N$, valorile afișate pe cele $N$ ecrane ale centralelor eoliene și rezolvă următoarele două cerinţe:
1. afișează numărul $M$ de moduri în care se pot grupa cele $N$ centrale pentru construcția corectă de orașe;
2. afișează **numărul maxim** $X$ de orașe ce pot fi construite corect, **dintre cele care au factorul de dezechilibru minim**, precum și eticheta $E$ a primei centrale eoliene atribuită orașului cu cea mai mare cantitate de energie repartizată, dintre cele $X$ orașe; dacă sunt mai multe astfel de orașe, se ia în considerare cel care are atribuite centrale etichetate cu numere mai mari.

# Date de intrare
Fișierul de intrare `wind.in` conține pe prima linie un număr natural $C$ reprezentând cerința care trebuie rezolvată ($1$ sau $2$). A doua linie a fișierului conține un număr natural $N$, cu semnificația din enunț. A treia linie din fișier conține $N$ numere întregi, separate prin câte un spațiu, reprezentând valorile afișate pe cele $N$ ecrane ale centralelor eoliene, în ordinea poziționării acestora pe șosea.

# Date de ieșire
Fişierul de ieșire `wind.out` va conţine pe prima linie:
- dacă $C=1$, numărul natural $M$, reprezentând răspunsul la cerința 1;
- dacă $C=2$, cele două numere naturale $X$ și $E$, în această ordine, separate printr-un singur spațiu, reprezentând răspunsul la cerința 2.

# Restricţii și precizări
- $2 \leq N ≤ 100\ 000$, $N$ număr natural;
- Numerele afișate pe ecranele centralelor sunt numere întregi formate din cel mult 9 cifre;
- Se vor construi minimum 2 orașe;
- Pentru rezolvarea cerinței 1 se acordă 20 de puncte.
- Pentru rezolvarea cerinței 2 se acordă 70 de puncte. Pentru fiecare test al acestei cerințe veți primi $50\%$ din punctajul testului pentru valoarea corectă $X$ și $50\%$ din punctajul testului pentru valoarea corectă $E$. Această cerință necesită ca **în fișierul de ieșire să existe exact 2 numere**.

---

Example:
`wind.in`
```
1
12
2 4 -5 12 3 5 -6 4 5 7 -8 2
```

`wind.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the solution for both requirements:

### Requirement 1: Number of ways to group the wind turbines

To solve this, we need to find the number of divisors of \( N \) that are greater than or equal to 2. This is because each divisor represents a possible way to divide the wind turbines into groups of equal size.

### Requirement 2: Maximum number of cities with minimum imbalance

To solve this, we need to:
1. Iterate through all possible group sizes (divisors of \( N \) that are greater than or equal to 2).
2. For each group size, calculate the imbalance (difference between the maximum and minimum sum of the groups).
3. Track the minimum imbalance and the corresponding group size.
4. For the group size with the minimum imbalance, find the number of groups and the starting index of the group with the maximum sum.

### Implementation

Here is the C++ code that implements the above logic:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream fin("wind.in");
    std::ofstream fout("wind.out");

    int C, N;
    fin >> C >> N;
    std::vector<int> energy(N);
    for (int i = 0; i < N; ++i) {
        fin >> energy[i];
    }

    if (C == 1) {
        // Requirement 1: Number of ways to group the wind turbines
        int M = 0;
        for (int i = 2; i <= N; ++i) {
            if (N % i == 0) {
                ++M;
            }
        }
        fout << M << "\n";
    } else if (C == 2) {
        // Requirement 2: Maximum number of cities with minimum imbalance
        int minImbalance = INT_MAX;
        int bestK = 0;

        for (int k = 2; k <= N; ++k) {
            if (N % k == 0) {
                int groupSize = N / k;
                std::vector<int> groupSums(k, 0);
                for (int i = 0; i < N; ++i) {
                    groupSums[i % k] += energy[i];
                }

                int maxSum = *std::max_element(groupSums.begin(), groupSums.end());
                int minSum = *std::min_element(groupSums.begin(), groupSums.end());
                int imbalance = maxSum - minSum;

                if (imbalance < minImbalance) {
                    minImbalance = imbalance;
                    bestK = k;
                }
            }
        }

        int groupSize = N / bestK;
        std::vector<int> groupSums(bestK, 0);
        for (int i = 0; i < N; ++i) {
            groupSums[i % bestK] += energy[i];
        }

        int maxSum = *std::max_element(groupSums.begin(), groupSums.end());
        int maxIndex = std::distance(groupSums.begin(), std::max_element(groupSums.begin(), groupSums.end()));

        fout << bestK << " " << (maxIndex * groupSize + 1) << "\n";
    }

    return 0;
}
```

### Explanation

1. **Reading Input**: We read the input values from `wind.in` file.
2. **Requirement 1**:
   - We count the number of divisors of \( N \) that are greater than or equal to 2.
3. **Requirement 2**:
   - For each possible group size (divisor of \( N \)), we calculate the sums of the groups.
   - We determine the imbalance (difference between the maximum and minimum group sums).
   - We track the minimum imbalance and the corresponding group size.
   - Finally, we determine the starting index of the group with the maximum sum for the optimal group size.

This solution ensures efficient computation and handles the constraints effectively.
