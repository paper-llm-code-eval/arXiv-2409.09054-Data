---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `taxe.in` and write to `taxe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o ţară în care corupţia este în floare şi economia la pământ, pentru a obţine toate aprobările necesare în scopul demarării unei afaceri, investitorul trebuie să treacă prin mai multe camere ale unei clădiri în care se află birouri.

Clădirea are un singur nivel în care birourile sunt lipite unele de altele formând un caroiaj pătrat de dimensiune $n \times n$. Pentru a facilita accesul în birouri, toate camerele vecine au uşi între ele. În fiecare birou se află un funcţionar care pretinde o taxă de trecere prin cameră (taxă ce poate fi, pentru unele camere, egală cu $0$). Investitorul intră încrezător prin colţul din stânga-sus al clădirii (cum se vede de sus planul clădirii) şi doreşte să ajungă în colţul opus al clădirii, unde este ieşirea, plătind o taxă totală cât mai mică.

# Cerinţă

Ştiind că el are în buzunar $S$ _euro_ şi că fiecare funcţionar îi ia taxa de cum intră în birou, se cere să se determine dacă el poate primi aprobările necesare şi, în caz afirmativ, care este suma maximă de bani care îi rămâne în buzunar la ieşirea din clădire.

# Date de intrare


Fişierul de intrare `taxe.in` conţine pe prima linie cele două numere $S$ şi $n$ despărţite printr-un spaţiu, iar pe următoarele $n$ linii câte $n$ numere separate prin spaţii ce reprezintă taxele cerute de funcţionarii din fiecare birou.


# Date de ieșire


Fişierul de ieşire `taxe.out` conţine o singură linie pe care se află numărul maxim de euro care îi rămân în buzunar sau valoarea $–1$ dacă investitorului nu-i ajung banii pentru a obţine aprobarea.

# Restricții și precizări

* $3 \leq N \leq 100$
* $1 \leq S \leq 10 \ 000$
* Valorile reprezentând taxele cerute de funcţionarii din birouri sunt numere naturale, o taxă nedepăşind valoarea de $200$ de _euro_.

---

Example:
`taxe.in`
```
10 3
1 2 5
1 3 1
0 8 1
```

`taxe.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a dynamic programming approach. We'll create a 2D array `dp` where `dp[i][j]` will store the maximum amount of money left in the investor's pocket when reaching cell `(i, j)`.

Here’s the step-by-step approach:

1. **Initialization**:
   - Read the input values from the file `taxe.in`.
   - Initialize a 2D array `dp` where each entry is initially set to a very negative value (to represent impossible paths).

2. **Base Case**:
   - The starting point `dp[0][0]` will be initialized to `S - taxe[0][0]` (initial money minus the tax at the starting cell).

3. **Filling the DP Table**:
   - For each cell `(i, j)`, update the value of `dp[i][j]` by considering the maximum money left when coming from the top `(i-1, j)` or from the left `(i, j-1)`.
   - Ensure that the value is only updated if the remaining money is non-negative.

4. **Result Extraction**:
   - The result will be the value at `dp[n-1][n-1]`. If this value is non-negative, it represents the maximum money left when reaching the bottom-right corner. If it is negative, it means the investor cannot reach the destination with the given money.

5. **Output the Result**:
   - Write the result to the file `taxe.out`.

Here is the complete C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream infile("taxe.in");
    std::ofstream outfile("taxe.out");
    
    int S, n;
    infile >> S >> n;
    
    std::vector<std::vector<int>> taxe(n, std::vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> taxe[i][j];
        }
    }
    
    std::vector<std::vector<int>> dp(n, std::vector<int>(n, INT_MIN));
    dp[0][0] = S - taxe[0][0];
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i > 0 && dp[i-1][j] >= 0) {
                dp[i][j] = std::max(dp[i][j], dp[i-1][j] - taxe[i][j]);
            }
            if (j > 0 && dp[i][j-1] >= 0) {
                dp[i][j] = std::max(dp[i][j], dp[i][j-1] - taxe[i][j]);
            }
        }
    }
    
    int result = dp[n-1][n-1];
    if (result < 0) {
        result = -1;
    }
    
    outfile << result << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:

- **Input Reading**: We read the initial amount `S` and the size `n` from the file. Then, we read the `n x n` matrix of taxes.
- **DP Initialization**: We initialize the `dp` array with `INT_MIN` to represent unreachable cells except the starting cell which is initialized with `S - taxe[0][0]`.
- **DP Table Update**: We iterate through each cell and update the `dp` value based on the maximum money left when coming from the top or left cell.
- **Result Extraction**: The value at `dp[n-1][n-1]` is the result, which we write to the output file.

This solution ensures that we efficiently compute the maximum money left using dynamic programming, adhering to the constraints and requirements of the problem.
