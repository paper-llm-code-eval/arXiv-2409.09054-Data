---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `taxe.in` and write to `taxe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o ţară în care corupţia este în floare şi economia la pământ, pentru a obţine toate aprobările necesare în scopul demarării unei afaceri, investitorul trebuie să treacă prin mai multe camere ale unei clădiri în care se află birouri.

Clădirea are un singur nivel în care birourile sunt lipite unele de altele formând un caroiaj pătrat de dimensiune $n \times n$. Pentru a facilita accesul în birouri, toate camerele vecine au uşi între ele. În fiecare birou se află un funcţionar care pretinde o taxă de trecere prin cameră (taxă ce poate fi, pentru unele camere, egală cu $0$). Investitorul intră încrezător prin colţul din stânga-sus al clădirii (cum se vede de sus planul clădirii) şi doreşte să ajungă în colţul opus al clădirii, unde este ieşirea, plătind o taxă totală cât mai mică.

# Cerinţă

Ştiind că el are în buzunar $S$ _euro_ şi că fiecare funcţionar îi ia taxa de cum intră în birou, se cere să se determine dacă el poate primi aprobările necesare şi, în caz afirmativ, care este suma maximă de bani care îi rămâne în buzunar la ieşirea din clădire.

# Date de intrare


Fişierul de intrare `taxe.in` conţine pe prima linie cele două numere $S$ şi $n$ despărţite printr-un spaţiu, iar pe următoarele $n$ linii câte $n$ numere separate prin spaţii ce reprezintă taxele cerute de funcţionarii din fiecare birou.


# Date de ieșire


Fişierul de ieşire `taxe.out` conţine o singură linie pe care se află numărul maxim de euro care îi rămân în buzunar sau valoarea $–1$ dacă investitorului nu-i ajung banii pentru a obţine aprobarea.

# Restricții și precizări

* $3 \leq N \leq 100$
* $1 \leq S \leq 10 \ 000$
* Valorile reprezentând taxele cerute de funcţionarii din birouri sunt numere naturale, o taxă nedepăşind valoarea de $200$ de _euro_.

---

Example:
`taxe.in`
```
10 3
1 2 5
1 3 1
0 8 1
```

`taxe.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a dynamic programming approach. The idea is to keep track of the minimum cost to reach each cell in the grid, starting from the top-left corner and moving to the bottom-right corner. We'll use a 2D array `dp` where `dp[i][j]` represents the minimum cost to reach cell `(i, j)` from the starting cell `(0, 0)`.

Here's the step-by-step plan:
1. Read the input values from the file `taxe.in`.
2. Initialize a 2D array `dp` to store the minimum cost to reach each cell.
3. Traverse the grid and fill the `dp` array with the minimum cost to reach each cell.
4. Check if the total cost to reach the bottom-right corner is less than or equal to the initial amount `S`.
5. If yes, calculate the remaining money by subtracting the total cost from `S`.
6. Write the result to the file `taxe.out`.

Here is the C++ code implementing the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream infile("taxe.in");
    std::ofstream outfile("taxe.out");

    int S, n;
    infile >> S >> n;

    std::vector<std::vector<int>> taxes(n, std::vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> taxes[i][j];
        }
    }

    std::vector<std::vector<int>> dp(n, std::vector<int>(n, INT_MAX));
    dp[0][0] = taxes[0][0];

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i > 0) {
                dp[i][j] = std::min(dp[i][j], dp[i-1][j] + taxes[i][j]);
            }
            if (j > 0) {
                dp[i][j] = std::min(dp[i][j], dp[i][j-1] + taxes[i][j]);
            }
        }
    }

    int totalCost = dp[n-1][n-1];
    if (totalCost <= S) {
        outfile << S - totalCost << std::endl;
    } else {
        outfile << -1 << std::endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the initial amount `S` and the dimension `n` from the file `taxe.in`. We then read the `n x n` grid of taxes.
2. **Initializing DP Array**: We initialize a 2D array `dp` to store the minimum cost to reach each cell. Initially, all values are set to `INT_MAX` except for the starting cell `(0, 0)`, which is set to the tax value of the starting cell.
3. **Filling DP Array**: We fill the `dp` array by iterating through each cell and updating the minimum cost to reach that cell from its top or left neighbor.
4. **Calculating Result**: After filling the `dp` array, the value at `dp[n-1][n-1]` gives the minimum cost to reach the bottom-right corner. We then check if this cost is within the initial amount `S` and calculate the remaining money or determine if it's not possible.
5. **Writing Output**: Finally, we write the result to the file `taxe.out`.

This solution ensures that we find the optimal path with the minimum cost efficiently using dynamic programming.
