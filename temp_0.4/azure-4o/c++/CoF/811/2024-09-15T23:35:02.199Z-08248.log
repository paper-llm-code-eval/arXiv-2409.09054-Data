---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

// Function to count the number of divisors of a given number
int countDivisors(int num) {
    int count = 0;
    for (int i = 1; i * i <= num; ++i) {
        if (num % i == 0) {
            count++;
            if (i != num / i) {
                count++;
            }
        }
    }
    return count;
}

int main() {
    ifstream fin("grupe.in");
    ofstream fout("grupe.out");

    int m, n;
    fin >> m >> n;

    vector<vector<int>> matrix(m, vector<int>(n));
    unordered_map<int, vector<int>> divisorGroups;

    // Read the matrix and group elements by their divisor count
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            fin >> matrix[i][j];
            int divisors = countDivisors(matrix[i][j]);
            divisorGroups[divisors].push_back(matrix[i][j]);
        }
    }

    // Create a vector of pairs (divisor count, elements) and sort it
    vector<pair<int, vector<int>>> groups(divisorGroups.begin(), divisorGroups.end());
    sort(groups.begin(), groups.end(), [](const pair<int, vector<int>>& a, const pair<int, vector<int>>& b) {
        if (a.second.size() != b.second.size()) {
            return a.second.size() > b.second.size();
        }
        return a.first > b.first;
    });

    // Output the results for group A
    int groupADivisors = groups[0].first;
    int groupASize = groups[0].second.size();
    int groupAMax = *max_element(groups[0].second.begin(), groups[0].second.end());
    fout << groupADivisors << " " << groupASize << " " << groupAMax << "\n";

    // Output the results for group B if it exists
    if (groups.size() > 1) {
        int groupBDivisors = groups[1].first;
        int groupBSize = groups[1].second.size();
        int groupBMax = *max_element(groups[1].second.begin(), groups[1].second.end());
        fout << groupBDivisors << " " << groupBSize << " " << groupBMax << "\n";
    } else {
        fout << "0 0 0\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```
