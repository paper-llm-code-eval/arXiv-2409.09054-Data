---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `carte.in` and write to `carte.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Rareș a primit în dar o carte în care paginile sunt amestecate. Se hotărăște totuși să o citească, **răsfoind cartea într-un singur sens, de la prima pagină către ultima**, în ordinea așezării lor în carte, respectând următorul algoritm:

> Caută la început pagina numerotată cu $x=1$.
> După ce a citit o pagină cu numărul $x$ caută printre paginile următoare acestei pagini, răsfoind cartea, pagina cu numărul $x+1$, fără a căuta printre paginile așezate înaintea paginii cu numărul $x$. Dacă o găsește atunci va continua lectura în același mod, iar dacă nu o găsește atunci va închide cartea și, în ziua următoare, va relua lectura de la pagina cu numărul $x+1$, pe care mai întâi o va căută răsfoind cartea de la început.
> Rareș va proceda la fel și în zilele următoare până când va citi întreaga carte.

# Cerință

Scrieți un program care citește un număr natural $n$, reprezentând numărul paginilor din carte și $n$ numere naturale distincte $x_1$, $x_2$, $\dots$, $x_n$, reprezentând ordinea în care sunt așezate cele $n$ pagini în carte, și care determină:
1. numărul zilelor în care Rareș citește cartea;
2. prima zi în care Rareș a citit cele mai multe pagini și numărul paginilor citite în acea zi.

# Date de intrare

Fișierul de intrare `carte.in` conține pe prima linie numărul $n$ al paginilor din carte iar pe linia următoare $n$ numere întregi distincte $x_1$, $x_2$, $\dots$, $x_n$, separate prin câte un spațiu, reprezentând ordinea în care sunt așezate paginile în carte.

# Date de ieșire

Fișierul de ieșire `carte.out` va conține pe prima linie, separate prin câte un spațiu, trei numere, reprezentând, în ordine:

* numărul zilelor în care Rareș citește cartea;
* numărul primei zile în care Rareș a citit cele mai multe pagini;
* numărul maxim de pagini citite într-o zi.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* paginile cărții sunt numerotate cu numere naturale distincte de la $1$ la $n$;
* citirea cărții presupune citirea fiecărei pagini din carte, o singură dată;
* zilele în care Rareș citește cartea sunt numerotate consecutiv, începând cu numărul $1$;
* pentru rezolvarea corectă a subpunctului 1 se acordă $40\%$ din punctaj și pentru fiecare cerință a subpunctului 2 câte $30\%$ din punctaj.

---

Example:
`carte.in`
```
9
7 1 3 6 8 2 4 9 5
```

`carte.out`
```
4 2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem. The code reads the input from `carte.in`, processes the data to determine the number of days Rareș reads the book, the first day with the maximum pages read, and the maximum number of pages read in a single day, and then writes the results to `carte.out`.

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>

int main() {
    std::ifstream fin("carte.in");
    std::ofstream fout("carte.out");

    int n;
    fin >> n;
    std::vector<int> pages(n);
    for (int i = 0; i < n; ++i) {
        fin >> pages[i];
    }

    std::unordered_map<int, int> pageIndex;
    for (int i = 0; i < n; ++i) {
        pageIndex[pages[i]] = i;
    }

    int days = 0;
    int maxPagesRead = 0;
    int firstDayWithMaxPages = 0;
    int currentPage = 1;

    while (currentPage <= n) {
        ++days;
        int pagesReadToday = 0;
        int currentIndex = pageIndex[currentPage];

        while (currentPage <= n && pageIndex[currentPage] >= currentIndex) {
            ++pagesReadToday;
            currentIndex = pageIndex[currentPage];
            ++currentPage;
        }

        if (pagesReadToday > maxPagesRead) {
            maxPagesRead = pagesReadToday;
            firstDayWithMaxPages = days;
        }
    }

    fout << days << " " << firstDayWithMaxPages << " " << maxPagesRead << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The code reads the number of pages `n` and the sequence of pages from `carte.in`.
2. **Mapping Pages to Indices**: It creates a map `pageIndex` to store the index of each page number for quick lookup.
3. **Simulating the Reading Process**:
   - It initializes `days`, `maxPagesRead`, and `firstDayWithMaxPages`.
   - It iterates through the pages, simulating the reading process as described.
   - For each day, it counts the number of pages read and updates `maxPagesRead` and `firstDayWithMaxPages` if a new maximum is found.
4. **Writing Output**: The results are written to `carte.out`.

This solution ensures efficient processing with a time complexity of O(n) due to the single pass through the pages and the use of a hash map for quick index lookups.
