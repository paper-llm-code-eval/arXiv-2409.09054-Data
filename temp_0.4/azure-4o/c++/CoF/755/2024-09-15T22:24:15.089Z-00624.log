---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `elfi.in` and write to `elfi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marele vrăjitor Prospero are o grădină minunată îngrijită de o sumedenie de spiriduși care n-au altă sarcină decât să zboare la orele dimineții de-a lungul aleilor și să stropească plantele din vasele ornamentale de piatră aflate pe margine. Există un havuz chiar la capătul grădinii și o alee principală ce pornește de la havuz și duce până la intrare. Din aleea principală se desprind alei secundare ce formează ronduri alungite revenind, în același loc, la aleea principală.

Se știe că există $n$ spiriduși, numerotați de la $1$ la $n$, fiecare pentru câte una dintre aleile secundare. Toți pornesc de la havuz la ora $5:00:00$ dimineața cu câte un vas cu apă pregătit de cu seară, străbat aleea principală până la rondul lor, apoi parcurg aleea rondului propriu, revin în aleea principală, se întorc la havuz pentru a se alimenta cu apă și o iau de la capăt la fel, până la ora $9:00:00$ când se retrag la umbră pentru somn. Se știe că toți spiridușii zboară fără încetare, cu aceeași viteză, pe toată durata celor exact $4$ ore. Se cunosc, pentru fiecare spiriduș, numărul de secunde necesare pentru a ajunge de la havuz la rondul propriu și numărul de secunde necesare pentru a parcurge în întregime rondul propriu. Orice spiriduș care ajunge la havuz își umple vasul în exact o secundă, de la un robinet aflat pe marginea havuzului. De exemplu, dacă spiridușul care se ocupă de rondul $5$ din figură are nevoie de $2$ secunde pentru a ajunge la rondul său și de $15$ secunde pentru a parcurge rondul $5$, atunci va reveni la havuz pentru a-și umple vasul la orele $5:00:19$ ($2 + 15 + 2$), își umple vasul și pornește iar la ora $5:00:20$, revine iar la $5:00:39$ și pleacă iar la ora $5:00:40$ etc.

Doi spiriduși nu își pot umple vasul în același moment de la același robinet.

~[elfi.png]

# Cerință

Se cere să se determine numărul minim de robinete cu care trebuie să fie prevăzut havuzul astfel încât nici un spiriduş, în nici un moment, să nu fie nevoit să aştepte pentru a-şi putea umple vasul cu apă.

# Date de intrare

Din fișierul de intrare `elfi.in` se citesc:

* $n$, numărul de spiriduși, de pe primul rând;
* $n$ perechi de forma $c_i \ p_i$ reprezentând numărul de secunde de la havuz la rondul propriu și respectiv numărul de secunde necesar pentru parcurgerea rondului propriu, de pe următoarele $n$ linii ale fișierului.

# Date de ieșire

În fișierul de ieșire `elfi.out` se scrie o singura linie cu un singur număr reprezentând numărul minim de robinete necesare.

# Restricții și precizări

* $2 \leq n \leq 5 \ 000$;
* $1 \leq c_i \leq 100$;
* $1 \leq p_i \leq 100$;

---

Example:
`elfi.in`
```
5
7 4
7 8
4 5
7 6
2 15
```

`elfi.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the number of taps required such that no elf has to wait to fill their water vessel. This involves calculating the times at which each elf returns to the fountain and ensuring that no two elves need to fill their vessels at the same time. 

Here's a step-by-step plan to solve the problem:

1. **Read Input**: Read the number of elves and their respective times from the input file.
2. **Calculate Return Times**: For each elf, calculate the times they return to the fountain over the 4-hour period.
3. **Track Concurrent Usage**: Use a timeline to track the number of elves needing the tap at any given second.
4. **Determine Maximum Concurrent Usage**: The maximum number of elves needing the tap at the same second will be the number of taps required.

Here's the C++ code to implement this solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("elfi.in");
    ofstream outfile("elfi.out");

    int n;
    infile >> n;

    vector<pair<int, int>> elves(n);
    for (int i = 0; i < n; ++i) {
        infile >> elves[i].first >> elves[i].second;
    }

    // The total duration in seconds from 5:00:00 to 9:00:00 is 4 hours = 14400 seconds
    const int total_duration = 4 * 3600;
    vector<int> timeline(total_duration + 1, 0);

    for (const auto& elf : elves) {
        int c = elf.first;
        int p = elf.second;
        int cycle_time = 2 * c + p + 1; // Time for one complete cycle including filling the vessel
        for (int t = c + p + c; t <= total_duration; t += cycle_time) {
            timeline[t]++;
        }
    }

    // Find the maximum number of elves needing the tap at the same time
    int max_taps = *max_element(timeline.begin(), timeline.end());

    outfile << max_taps << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The number of elves and their respective times are read from the input file.
2. **Timeline Array**: A `timeline` array is used to track the number of elves needing the tap at each second. The array size is `total_duration + 1` to cover all seconds from 5:00:00 to 9:00:00.
3. **Cycle Calculation**: For each elf, calculate the cycle time which includes the time to reach the rond, complete the rond, return to the fountain, and fill the vessel.
4. **Increment Timeline**: For each second the elf returns to the fountain, increment the corresponding index in the `timeline` array.
5. **Determine Maximum Taps**: The maximum value in the `timeline` array represents the number of taps required to ensure no elf has to wait.

This approach ensures that we efficiently determine the number of taps required by simulating the process and tracking the concurrent usage of the tap.
