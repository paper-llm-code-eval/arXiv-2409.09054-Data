---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `elfi.in` and write to `elfi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marele vrăjitor Prospero are o grădină minunată îngrijită de o sumedenie de spiriduși care n-au altă sarcină decât să zboare la orele dimineții de-a lungul aleilor și să stropească plantele din vasele ornamentale de piatră aflate pe margine. Există un havuz chiar la capătul grădinii și o alee principală ce pornește de la havuz și duce până la intrare. Din aleea principală se desprind alei secundare ce formează ronduri alungite revenind, în același loc, la aleea principală.

Se știe că există $n$ spiriduși, numerotați de la $1$ la $n$, fiecare pentru câte una dintre aleile secundare. Toți pornesc de la havuz la ora $5:00:00$ dimineața cu câte un vas cu apă pregătit de cu seară, străbat aleea principală până la rondul lor, apoi parcurg aleea rondului propriu, revin în aleea principală, se întorc la havuz pentru a se alimenta cu apă și o iau de la capăt la fel, până la ora $9:00:00$ când se retrag la umbră pentru somn. Se știe că toți spiridușii zboară fără încetare, cu aceeași viteză, pe toată durata celor exact $4$ ore. Se cunosc, pentru fiecare spiriduș, numărul de secunde necesare pentru a ajunge de la havuz la rondul propriu și numărul de secunde necesare pentru a parcurge în întregime rondul propriu. Orice spiriduș care ajunge la havuz își umple vasul în exact o secundă, de la un robinet aflat pe marginea havuzului. De exemplu, dacă spiridușul care se ocupă de rondul $5$ din figură are nevoie de $2$ secunde pentru a ajunge la rondul său și de $15$ secunde pentru a parcurge rondul $5$, atunci va reveni la havuz pentru a-și umple vasul la orele $5:00:19$ ($2 + 15 + 2$), își umple vasul și pornește iar la ora $5:00:20$, revine iar la $5:00:39$ și pleacă iar la ora $5:00:40$ etc.

Doi spiriduși nu își pot umple vasul în același moment de la același robinet.

~[elfi.png]

# Cerință

Se cere să se determine numărul minim de robinete cu care trebuie să fie prevăzut havuzul astfel încât nici un spiriduş, în nici un moment, să nu fie nevoit să aştepte pentru a-şi putea umple vasul cu apă.

# Date de intrare

Din fișierul de intrare `elfi.in` se citesc:

* $n$, numărul de spiriduși, de pe primul rând;
* $n$ perechi de forma $c_i \ p_i$ reprezentând numărul de secunde de la havuz la rondul propriu și respectiv numărul de secunde necesar pentru parcurgerea rondului propriu, de pe următoarele $n$ linii ale fișierului.

# Date de ieșire

În fișierul de ieșire `elfi.out` se scrie o singura linie cu un singur număr reprezentând numărul minim de robinete necesare.

# Restricții și precizări

* $2 \leq n \leq 5 \ 000$;
* $1 \leq c_i \leq 100$;
* $1 \leq p_i \leq 100$;

---

Example:
`elfi.in`
```
5
7 4
7 8
4 5
7 6
2 15
```

`elfi.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can simulate the watering process and determine the maximum number of elves that need to fill their water vessels at the same time. Here's a step-by-step approach:

1. **Understand the Watering Cycle**:
   Each elf has a specific cycle time which is the sum of:
   - Time to reach their round trip to the rond (`2 * c_i`)
   - Time to complete their rond (`p_i`)
   - Time to refill the vessel (`1` second)

   The total cycle time for each elf is:
   \[
   \text{cycle\_time}_i = 2 \times c_i + p_i + 1
   \]

2. **Simulate the Process**:
   We need to simulate the process from `5:00:00` to `9:00:00` (which is 14400 seconds). Track each elf's refill times within this duration.

3. **Track Refill Times**:
   For each elf, calculate all the times they will be at the fountain to refill their vessel within the 14400 seconds. Store these times in a list.

4. **Determine Maximum Overlap**:
   Use a sweep line algorithm to determine the maximum number of overlapping refill times. This will give us the number of taps needed.

Here's the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("elfi.in");
    std::ofstream outfile("elfi.out");

    int n;
    infile >> n;

    std::vector<int> refillTimes;
    for (int i = 0; i < n; ++i) {
        int c, p;
        infile >> c >> p;
        int cycle_time = 2 * c + p + 1;
        for (int t = cycle_time; t <= 14400; t += cycle_time) {
            refillTimes.push_back(t);
        }
    }

    std::sort(refillTimes.begin(), refillTimes.end());

    int maxTaps = 0, currentTaps = 0;
    int prevTime = -1;
    for (int time : refillTimes) {
        if (time != prevTime) {
            maxTaps = std::max(maxTaps, currentTaps);
            prevTime = time;
            currentTaps = 1;
        } else {
            ++currentTaps;
        }
    }
    maxTaps = std::max(maxTaps, currentTaps);

    outfile << maxTaps << "\n";

    return 0;
}
```

### Explanation:
1. **Input Reading**:
   - Read the number of elves `n`.
   - For each elf, read `c_i` and `p_i`.

2. **Cycle Time Calculation**:
   - Calculate the cycle time for each elf and determine all the times they will refill within 14400 seconds.

3. **Sorting Refill Times**:
   - Store all refill times in a list and sort them.

4. **Sweep Line Algorithm**:
   - Traverse the sorted list to determine the maximum number of elves refilling at the same time.

This approach ensures that we efficiently determine the number of taps needed by simulating the entire process and using a sweep line algorithm to find the peak overlap of refill times.
