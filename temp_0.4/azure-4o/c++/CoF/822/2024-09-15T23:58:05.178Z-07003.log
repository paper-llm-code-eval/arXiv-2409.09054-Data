---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Lizuca are $n$ flori ornamentale de înălțimi $h_1, h_2, \dots, h_n$, exprimate în centimetri. Pentru a uda plantele, Lizuca stabilește următorul program: în prima zi va alege o plantă pe care o va uda, în a doua zi va alege două plante pe care le va uda, în ziua a treia va alege trei plante pe care le va uda și așa mai departe. Dacă o plantă este udată într-o anumită zi, atunci crește $1$ centimetru până la sfârșitul acelei zile, iar dacă nu este udată, rămâne la înălțimea pe care o avea la sfârșitul zilei precedente.

# Cerință

Scrieți un program care determină:
1. un număr natural $S$, exprimat în centimetri, reprezentând suma înălțimilor finale ale tuturor plantelor, dacă Lizuca le-ar uda după procedeul descris, timp de n zile;
2. un număr natural $K$, reprezentând numărul maxim de zile în care Lizuca poate uda florile după procedeul descris anterior, astfel ca la sfârșitul celei de a $K$-a zi, nici o plantă ornamentală să nu atingă înălțimea $H$.

# Date de intrare

Prima linie a fișierului `flori.in` conține două numere naturale $n$ și $H$, separate printr-un spațiu, având semnificația din enunț.
Linia a doua conține $n$ numere naturale: $h_1, h_2, \dots, h_n$ separate prin câte un singur spațiu, reprezentând înălțimile inițiale ale plantelor.

# Date de ieșire

Fișierul `flori.out` va conține pe prima linie un număr natural $S$ având semnificația descrisă în cerința $1$. A doua linie va conține un număr natural $K$, având semnificația descrisă în cerința $2$.

# Restricții și precizări

* $1 \leq N, H \leq 100$;
* $1 \leq h_1, h_2, \dots, h_n < H$;
* O plantă poate fi udată o singură dată pe zi.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $30\%$ din punctajul total pentru fiecare test.
* Pentru rezolvarea corectă a cerinței $2$ se acordă $70\%$ din punctajul total pentru fiecare test.

---

Example:
`flori.in`
```
3 4
2 1 1
```

`flori.out`
```
10
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("flori.in");
    std::ofstream fout("flori.out");

    int n, H;
    fin >> n >> H;
    std::vector<int> heights(n);
    
    for (int i = 0; i < n; ++i) {
        fin >> heights[i];
    }

    int S = 0;
    int K = 0;
    std::vector<int> growth(n, 0); // Track growth for each plant

    // Calculate S
    for (int day = 1; day <= n; ++day) {
        std::sort(heights.begin(), heights.end());
        for (int i = 0; i < day && i < n; ++i) {
            heights[i]++;
        }
    }
    for (int i = 0; i < n; ++i) {
        S += heights[i];
    }

    // Reset heights for K calculation
    fin.clear();
    fin.seekg(0, std::ios::beg);
    fin >> n >> H;
    for (int i = 0; i < n; ++i) {
        fin >> heights[i];
    }

    // Calculate K
    bool canContinue = true;
    while (canContinue) {
        std::sort(heights.begin(), heights.end());
        for (int i = 0; i <= K && i < n; ++i) {
            heights[i]++;
            if (heights[i] >= H) {
                canContinue = false;
                break;
            }
        }
        if (canContinue) {
            K++;
        }
    }

    fout << S << "\n" << K << "\n";

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Input Reading**: The program reads the input values from `flori.in` file.
2. **Calculate S**: 
   - For each day from 1 to n, it sorts the heights and waters the smallest `day` plants.
   - After all days, it sums up all the heights to get `S`.
3. **Calculate K**:
   - Reset the heights to their initial values.
   - For each day, it sorts the heights and waters the smallest `day` plants.
   - If any plant reaches or exceeds height `H`, the process stops and the current day count is `K`.
4. **Output**: The results are written to `flori.out` file.
