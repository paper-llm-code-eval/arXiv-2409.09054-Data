---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution in C++:

```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream infile("multimi.in");
    std::ofstream outfile("multimi.out");

    int n;
    infile >> n;

    int start, end;
    infile >> start >> end;

    int global_start = start;
    int global_end = end;

    for (int i = 1; i < n; ++i) {
        infile >> start >> end;
        global_start = std::max(global_start, start);
        global_end = std::min(global_end, end);
    }

    if (global_start <= global_end) {
        for (int i = global_start; i <= global_end; ++i) {
            outfile << i << " ";
        }
    } else {
        outfile << "multimea vida";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of sets `n` from the input file `multimi.in`.
2. **Initialize Intersection Range**: We read the first set's range and initialize the global intersection range (`global_start` and `global_end`) with it.
3. **Update Intersection Range**: For each subsequent set, we update the global intersection range by taking the maximum of the starting points and the minimum of the ending points.
4. **Output Result**: If the global intersection range is valid (`global_start <= global_end`), we output all elements in the range. Otherwise, we output "multimea vida".

This solution is efficient and ensures that the intersection of the ranges is computed correctly.
