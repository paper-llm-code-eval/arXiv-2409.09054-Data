---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of finding the intersection of multiple sets of consecutive natural numbers, we can follow these steps:

1. **Read the Input**: Read the number of sets, `n`, and then read the `n` pairs of integers that define the ranges of the sets.
2. **Determine the Intersection**: The intersection of all sets can be found by determining the maximum of the starting points and the minimum of the ending points across all sets.
3. **Output the Result**: If the maximum starting point is less than or equal to the minimum ending point, we output the range from the maximum starting point to the minimum ending point. Otherwise, we output "multimea vida".

Here is the C++ code to accomplish this:

```cpp
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream inFile("multimi.in");
    std::ofstream outFile("multimi.out");

    int n;
    inFile >> n;

    int maxStart = 0;
    int minEnd = 30000;

    for (int i = 0; i < n; ++i) {
        int start, end;
        inFile >> start >> end;
        maxStart = std::max(maxStart, start);
        minEnd = std::min(minEnd, end);
    }

    if (maxStart <= minEnd) {
        for (int i = maxStart; i <= minEnd; ++i) {
            outFile << i << " ";
        }
    } else {
        outFile << "multimea vida";
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the number of sets `n` and then the ranges for each set from the file `multimi.in`.
2. **Finding Intersection**: We initialize `maxStart` to 0 and `minEnd` to 30000 (the upper limit of the range). For each set, we update `maxStart` to be the maximum of the current `maxStart` and the start of the current set, and `minEnd` to be the minimum of the current `minEnd` and the end of the current set.
3. **Outputting Result**: If `maxStart` is less than or equal to `minEnd`, we output the numbers from `maxStart` to `minEnd`. Otherwise, we output "multimea vida".

This approach ensures that we efficiently find the intersection of the ranges and handle the edge cases where there is no intersection.
