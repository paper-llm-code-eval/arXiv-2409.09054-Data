---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the intersection of multiple ranges of consecutive natural numbers. Given the constraints, we can determine the intersection by finding the maximum of the lower bounds and the minimum of the upper bounds of the ranges. If the maximum lower bound is less than or equal to the minimum upper bound, the intersection is the range between these two values; otherwise, the intersection is empty.

Here is the C++ solution for the problem:

```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream infile("multimi.in");
    std::ofstream outfile("multimi.out");

    int n;
    infile >> n;

    int max_low = 0;
    int min_high = 30000;

    for (int i = 0; i < n; ++i) {
        int low, high;
        infile >> low >> high;
        if (low > max_low) {
            max_low = low;
        }
        if (high < min_high) {
            min_high = high;
        }
    }

    if (max_low <= min_high) {
        for (int i = max_low; i <= min_high; ++i) {
            outfile << i << " ";
        }
    } else {
        outfile << "multimea vida";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We use `std::ifstream` to read from `multimi.in` and `std::ofstream` to write to `multimi.out`.
   - The first value read is `n`, the number of sets.

2. **Finding Intersection:**
   - Initialize `max_low` to 0 and `min_high` to 30000 (the maximum possible value for the upper bound).
   - For each set, read the lower (`low`) and upper (`high`) bounds.
   - Update `max_low` to be the maximum of all lower bounds.
   - Update `min_high` to be the minimum of all upper bounds.

3. **Output the Result:**
   - If `max_low` is less than or equal to `min_high`, it means there is an intersection, and we output the range from `max_low` to `min_high`.
   - If there is no intersection, output "multimea vida".

This solution ensures efficient reading and writing and performs the necessary calculations in linear time relative to the number of sets, making it optimal for the given constraints.
