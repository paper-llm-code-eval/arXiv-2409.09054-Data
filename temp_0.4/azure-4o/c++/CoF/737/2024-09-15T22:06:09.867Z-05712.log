---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to find the intersection of multiple ranges of natural numbers. Here's a step-by-step approach to achieve this:

1. **Read Input**: We need to read the number of sets and the ranges for each set from the input file.
2. **Determine Intersection**: For the intersection of ranges, we need to find the maximum of all the starting points and the minimum of all the ending points. If the maximum starting point is greater than the minimum ending point, the intersection is empty.
3. **Write Output**: Write the intersection to the output file. If the intersection is empty, write "multimea vida".

Here's the C++ code to accomplish this:

```cpp
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream infile("multimi.in");
    std::ofstream outfile("multimi.out");

    int n;
    infile >> n;

    int start, end;
    infile >> start >> end;

    int global_start = start;
    int global_end = end;

    for (int i = 1; i < n; ++i) {
        infile >> start >> end;
        global_start = std::max(global_start, start);
        global_end = std::min(global_end, end);
    }

    if (global_start > global_end) {
        outfile << "multimea vida";
    } else {
        for (int i = global_start; i <= global_end; ++i) {
            outfile << i << " ";
        }
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - We use `std::ifstream` to read from `multimi.in`.
   - The first value read is the number of sets `n`.
   - We then read the first range and initialize `global_start` and `global_end` with its values.

2. **Determining Intersection**:
   - For each subsequent range, we update `global_start` to be the maximum of the current `global_start` and the new range's start.
   - Similarly, we update `global_end` to be the minimum of the current `global_end` and the new range's end.
   - This ensures that `global_start` and `global_end` represent the intersection of all ranges.

3. **Writing Output**:
   - If `global_start` is greater than `global_end`, the intersection is empty, and we write "multimea vida".
   - Otherwise, we write all numbers from `global_start` to `global_end` inclusive.

This solution is efficient and directly addresses the problem requirements. The complexity is linear with respect to the number of ranges, making it very efficient given the constraints.
