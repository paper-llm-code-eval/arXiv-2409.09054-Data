---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>

using namespace std;

int countDigitOccurrences(int n, int d) {
    int count = 0;
    for (long long i = 1; i <= n; i *= 10) {
        long long divider = i * 10;
        count += (n / divider) * i + min(max(n % divider - d * i + 1, 0LL), i);
    }
    return count;
}

int main() {
    ifstream infile("cifre.in");
    ofstream outfile("cifre.out");

    int n, c;
    infile >> n >> c;

    int result = countDigitOccurrences(n, c);
    outfile << result;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - We use `ifstream` to read from the file `cifre.in`.
   - The first two integers read from the file are `n` (the upper limit of the range) and `c` (the digit we are counting).

2. **Counting Digit Occurrences:**
   - The function `countDigitOccurrences` is designed to count how many times the digit `d` appears in all numbers from 1 to `n`.
   - The function uses a mathematical approach to count the occurrences of the digit `d` at each place value (ones, tens, hundreds, etc.) without iterating through every number from 1 to `n`.
   - For each place value `i` (1, 10, 100, etc.), the number of times the digit `d` appears in that place is calculated using the formula:
     - `(n / divider) * i` counts the full cycles of `i` within `n`.
     - `min(max(n % divider - d * i + 1, 0LL), i)` counts the remaining occurrences of `d` in the current cycle.

3. **Writing Output:**
   - The result is written to the file `cifre.out` using `ofstream`.

### Example:
For the input `15 1`:
- The digit `1` appears in the numbers: 1, 10, 11, 12, 13, 14, 15.
- Thus, it appears 8 times in total, which matches the expected output.

This solution is efficient and works within the given constraints, handling very large values of `n` up to \(10^9\).
