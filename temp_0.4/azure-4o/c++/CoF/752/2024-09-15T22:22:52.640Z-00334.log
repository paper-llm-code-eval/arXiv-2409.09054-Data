---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to count the occurrences of a digit `c` in the numbers from `1` to `n`. Given the constraints, a direct approach of iterating through each number and counting the digit occurrences would be too slow. Instead, we can use a mathematical approach to count the occurrences of the digit `c` in each digit position (units, tens, hundreds, etc.).

Here's a step-by-step breakdown of the approach:

1. **Initialization**: Read the input values `n` and `c` from the file `cifre.in`.
2. **Counting Occurrences**: For each digit position (units, tens, hundreds, etc.), calculate how many times the digit `c` appears in that position across all numbers from `1` to `n`.
3. **Output the Result**: Write the result to the file `cifre.out`.

The mathematical approach involves:
- Dividing the range into parts where the digit `c` appears in a specific position.
- Counting the occurrences of `c` in each part.

Here's the C++ code implementing this approach:

```cpp
#include <fstream>
#include <cmath>

int countDigitOccurrences(int n, int c) {
    int count = 0;
    int factor = 1;
    while (factor <= n) {
        int lowerNumbers = n - (n / factor) * factor;
        int currentDigit = (n / factor) % 10;
        int higherNumbers = n / (factor * 10);

        // Count occurrences of c in the current digit position
        if (currentDigit < c) {
            count += higherNumbers * factor;
        } else if (currentDigit == c) {
            count += higherNumbers * factor + lowerNumbers + 1;
        } else {
            count += (higherNumbers + 1) * factor;
        }

        factor *= 10;
    }
    return count;
}

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");

    int n, c;
    infile >> n >> c;

    int result = countDigitOccurrences(n, c);
    outfile << result;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We use `std::ifstream` to read the input values `n` and `c` from the file `cifre.in`.
2. **Counting Occurrences**:
   - We use a loop to iterate over each digit position (units, tens, hundreds, etc.).
   - For each position, we determine how many times the digit `c` appears by considering the numbers below, at, and above the current digit position.
3. **Writing Output**: We use `std::ofstream` to write the result to the file `cifre.out`.

This approach ensures that we efficiently count the occurrences of the digit `c` without iterating through all numbers from `1` to `n`, making it suitable for large values of `n` up to \(10^9\).
