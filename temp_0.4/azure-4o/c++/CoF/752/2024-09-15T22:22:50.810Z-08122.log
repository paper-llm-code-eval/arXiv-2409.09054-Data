---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to count the occurrences of a specific digit \( c \) in the numbers from 1 to \( n \). A brute-force approach that checks each number individually would be too slow for large values of \( n \). Therefore, we need a more optimized approach.

The key to solving this problem efficiently is to use mathematical properties and digit manipulation to count the occurrences of the digit \( c \) without iterating through every single number.

Here's the step-by-step approach:

1. **Digit Position Analysis**: For each digit position (units, tens, hundreds, etc.), calculate how many times the digit \( c \) appears in that position across all numbers from 1 to \( n \).

2. **Mathematical Counting**: For each digit position, count how many full cycles of 0-9 occur and how many times the digit \( c \) appears in those cycles. Also, account for any remaining numbers that do not complete a full cycle.

3. **Summing Up**: Sum the counts from all digit positions to get the total occurrences of the digit \( c \).

Here's the optimized C++ code that implements this approach:

```cpp
#include <fstream>

int countDigitOccurrences(int n, int c) {
    int count = 0;
    int factor = 1;
    int lower = 0;
    int current = 0;
    int higher = 0;

    while (n / factor > 0) {
        lower = n - (n / factor) * factor;
        current = (n / factor) % 10;
        higher = n / (factor * 10);

        if (current < c) {
            count += higher * factor;
        } else if (current == c) {
            count += higher * factor + lower + 1;
        } else {
            count += (higher + 1) * factor;
        }

        factor *= 10;
    }

    return count;
}

int main() {
    std::ifstream fin("cifre.in");
    std::ofstream fout("cifre.out");

    int n, c;
    fin >> n >> c;

    int result = countDigitOccurrences(n, c);
    fout << result;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: The input is read from `cifre.in` using `ifstream`.
2. **Counting Digit Occurrences**: The function `countDigitOccurrences` calculates the number of times digit \( c \) appears in numbers from 1 to \( n \) using the described mathematical approach.
3. **Writing Output**: The result is written to `cifre.out` using `ofstream`.

### Example Verification:
For the input `15 1`:
- The numbers from 1 to 15 are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15.
- The digit 1 appears in these numbers: 1, 10, 11, 12, 13, 14, 15.
- Total occurrences: 8.

The code should output `8`, which matches the expected result.
