---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to count the occurrences of a digit `c` in the numbers from `1` to `n`. Given the constraints, a direct approach of iterating through each number and counting the occurrences would be too slow. Instead, we can use a more mathematical approach to count the occurrences of the digit `c` in each positional place (units, tens, hundreds, etc.).

The idea is to break down the number `n` into its digits and count how many times the digit `c` appears in each positional place. Here's the plan:

1. For each positional place (units, tens, hundreds, etc.), calculate the contribution of that place to the total count of the digit `c`.
2. Use integer division and modulo operations to isolate the digits and calculate the contributions efficiently.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>

int countDigitOccurrences(int n, int c) {
    int count = 0;
    int factor = 1;
    int lower = 0;
    int current = 0;
    int higher = 0;

    while (n / factor > 0) {
        lower = n - (n / factor) * factor;
        current = (n / factor) % 10;
        higher = n / (factor * 10);

        if (current < c) {
            count += higher * factor;
        } else if (current == c) {
            count += higher * factor + lower + 1;
        } else {
            count += (higher + 1) * factor;
        }

        factor *= 10;
    }

    return count;
}

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");

    int n, c;
    infile >> n >> c;

    int result = countDigitOccurrences(n, c);
    outfile << result << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read the input values `n` and `c` from the file `cifre.in`.

2. **Counting Digit Occurrences:**
   - We initialize `count` to store the total occurrences of the digit `c`.
   - We use `factor` to keep track of the current positional place (units, tens, hundreds, etc.).
   - We use `lower`, `current`, and `higher` to represent the lower part, the current digit, and the higher part of the number `n` relative to the current positional place.
   - We iterate through each positional place, updating `lower`, `current`, and `higher` accordingly.
   - Depending on the value of `current`, we update the `count`:
     - If `current < c`, the digit `c` appears in the higher part times the factor.
     - If `current == c`, the digit `c` appears in the higher part times the factor plus the lower part plus one.
     - If `current > c`, the digit `c` appears in the higher part plus one times the factor.
   - We multiply `factor` by 10 to move to the next positional place.

3. **Writing Output:**
   - We write the result to the file `cifre.out`.

This approach ensures that we efficiently count the occurrences of the digit `c` in all numbers from `1` to `n` without iterating through each number individually. This makes the solution suitable for large values of `n` up to `10^9`.
