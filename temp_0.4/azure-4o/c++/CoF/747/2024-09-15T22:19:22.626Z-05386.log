---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fetiţele din grupa mare de la grădiniţă culeg flori şi vor să împletească coroniţe pentru festivitatea de premiere. În grădină sunt mai multe tipuri de flori. Fiecare dintre cele $n$ fetiţe culege un buchet având acelaşi număr de flori, însă nu neapărat de acelaşi tip. Pentru a împleti coroniţele fetiţele se împart în grupe. O fetiţă se poate ataşa unui grup numai dacă are cel puţin o floare de acelaşi tip cu cel puţin o altă fetiţă din grupul respectiv.

# Cerinţă
Fiind dat un număr natural $n$ reprezentând numărul fetiţelor şi numărul natural $k$ reprezentând numărul de flori dintr-un buchet, să se determine grupele care se formează.

# Date de intrare
Fişierul de intrare `flori.in` conţine pe prima linie, separate printr-un spaţiu, numerele naturale $n$ şi $k$, reprezentând numărul de fetiţe şi respectiv numărul de flori din fiecare buchet. Fiecare dintre următoarele $n$ linii conţine, pentru fiecare fetiţă, câte $k$ valori separate prin câte un spaţiu reprezentând tipurile de flori culese.

# Date de ieşire
Fişierul de ieşire `flori.out` va conţine pe fiecare linie câte o grupă formată din numerele de ordine ale fetiţelor separate prin câte un spaţiu, în ordine crescătoare, ca în exemplu.

# Restricţii şi precizări
- $1 \leq n \leq 150$
- $1 \leq k \leq 100$
- Tipul unei flori este un număr întreg din intervalul $[0, 100]$.
- Într-o grupă numerele de ordine ale fetiţelor trebuie date în ordine strict crescătoare.
- În fişierul de ieşire grupele vor fi afişate în ordinea crescătoare a numărului de ordine al primei fetiţe din grupă.

---

Example:
`flori.in`
```
5 4
1 2 3 4
5 6 9 6
1 1 1 1
2 4 4 3
7 7 7 7
```

`flori.out`
```
1 3 4
2
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("flori.in");
    ofstream fout("flori.out");

    int n, k;
    fin >> n >> k;

    vector<set<int>> flowerTypes(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            int flower;
            fin >> flower;
            flowerTypes[i].insert(flower);
        }
    }

    vector<vector<int>> groups;
    vector<bool> visited(n, false);

    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            vector<int> group;
            group.push_back(i + 1);
            visited[i] = true;

            for (int j = i + 1; j < n; ++j) {
                if (!visited[j]) {
                    for (int flower : flowerTypes[i]) {
                        if (flowerTypes[j].count(flower)) {
                            group.push_back(j + 1);
                            visited[j] = true;
                            break;
                        }
                    }
                }
            }

            groups.push_back(group);
        }
    }

    sort(groups.begin(), groups.end());

    for (const auto& group : groups) {
        for (size_t i = 0; i < group.size(); ++i) {
            if (i > 0) fout << " ";
            fout << group[i];
        }
        fout << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - Read the number of girls `n` and the number of flowers per bouquet `k`.
   - For each girl, read her bouquet of flowers and store the flower types in a set to handle duplicates and allow fast lookups.

2. **Grouping Girls**:
   - Use a `visited` vector to keep track of which girls have already been assigned to a group.
   - Iterate over each girl, and if she is not visited, start a new group with her.
   - For each subsequent girl, check if she shares at least one flower type with any girl already in the current group. If so, add her to the group and mark her as visited.

3. **Sorting and Output**:
   - Sort the groups by the first girl's index to ensure the required output order.
   - Write each group to the output file, ensuring numbers are space-separated and each group is on a new line.

This approach ensures efficient execution by leveraging set operations for quick lookups and avoiding redundant checks. The overall complexity is manageable given the constraints.
