---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to simulate the growth and reduction of Pinochio's nose over a given number of days. We can break down the problem as follows:

1. **Input Reading**: Read the initial length of the nose (`n`), the growth per weekday (`p`), and the total number of days (`k`).
2. **Simulation**: Simulate the changes in the nose length day by day, considering the growth during weekdays and the reduction during weekends.
3. **Output**: Write the final length of the nose to the output file.

Here's the C++ code to accomplish this:

```cpp
#include <fstream>

int main() {
    std::ifstream infile("pinochio.in");
    std::ofstream outfile("pinochio.out");

    int n, p, k;
    infile >> n >> p >> k;

    int current_nose_length = n;

    for (int day = 0; day < k; ++day) {
        int day_of_week = day % 7;
        if (day_of_week < 5) {
            // Weekday: Pinochio tells a lie, nose grows
            current_nose_length += p;
        } else {
            // Weekend: Nose shrinks
            current_nose_length -= 1;
        }
    }

    outfile << current_nose_length << std::endl;

    return 0;
}
```

### Explanation:
1. **Input Reading**: We use `std::ifstream` to read from `pinochio.in` and `std::ofstream` to write to `pinochio.out`.
2. **Variables**: We read `n`, `p`, and `k` from the input file.
3. **Simulation**:
   - We iterate over each day from `0` to `k-1`.
   - We determine the day of the week using `day % 7`.
   - If the day of the week is between `0` and `4` (inclusive), it's a weekday, and the nose grows by `p` centimeters.
   - If the day of the week is `5` or `6`, it's the weekend, and the nose shrinks by `1` centimeter.
4. **Output**: Finally, we write the resulting nose length to the output file.

This solution ensures that we efficiently simulate the changes in the nose length over the given number of days with minimal computational overhead.
