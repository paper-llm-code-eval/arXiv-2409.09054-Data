---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to simulate the growth and reduction of Pinocchio's nose over the given number of days. The key is to handle the weekly cycle (5 days of growth and 2 days of reduction) efficiently without iterating through each day individually when not necessary.

Here is the C++ code that reads from `pinochio.in` and writes to `pinochio.out`:

```cpp
#include <fstream>

int main() {
    std::ifstream infile("pinochio.in");
    std::ofstream outfile("pinochio.out");

    int n, p, k;
    infile >> n >> p >> k;

    int fullWeeks = k / 7;
    int remainingDays = k % 7;

    // Calculate the nose length after full weeks
    int noseLength = n + fullWeeks * (5 * p - 2);

    // Calculate the nose length for the remaining days
    for (int i = 0; i < remainingDays; ++i) {
        if (i < 5) {
            noseLength += p; // Weekday
        } else {
            noseLength -= 1; // Weekend
        }
    }

    outfile << noseLength << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The program reads the initial length of the nose `n`, the daily growth `p`, and the total number of days `k` from the input file `pinochio.in`.

2. **Calculating Full Weeks:**
   - The number of full weeks is calculated using integer division `k / 7`.
   - The remaining days after accounting for full weeks is calculated using the modulus operator `k % 7`.

3. **Handling Full Weeks:**
   - For each full week, the nose grows for 5 days and shrinks for 2 days. Therefore, the net effect of one full week is `5 * p - 2`.

4. **Handling Remaining Days:**
   - For the remaining days, the program iterates through each day:
     - If the day is a weekday (first 5 days), the nose grows by `p` centimeters.
     - If the day is a weekend (last 2 days), the nose shrinks by `1` centimeter.

5. **Output Result:**
   - The final length of the nose is written to the output file `pinochio.out`.

This approach ensures that the program runs efficiently even for the upper limits of the input constraints.
