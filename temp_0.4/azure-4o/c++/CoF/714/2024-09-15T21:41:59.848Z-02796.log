---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a C++ solution to the challenge described. The solution reads input directly from the file `pinochio.in` and writes the output to `pinochio.out`. The solution is designed to be efficient and straightforward.

```cpp
#include <iostream>
#include <fstream>

int main() {
    std::ifstream infile("pinochio.in");
    std::ofstream outfile("pinochio.out");

    int n, p, k;
    infile >> n >> p >> k;

    int full_weeks = k / 7;
    int remaining_days = k % 7;

    // Calculate the increase for full weeks
    int total_increase = full_weeks * (5 * p - 2);

    // Calculate the increase for remaining days
    for (int i = 0; i < remaining_days; ++i) {
        if (i < 5) {
            total_increase += p;
        } else {
            total_increase -= 1;
        }
    }

    // Final nose length
    int final_nose_length = n + total_increase;

    outfile << final_nose_length << std::endl;

    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the initial nose length `n`, the daily increase `p`, and the total number of days `k` from the file `pinochio.in`.
2. **Calculating Full Weeks**: It calculates how many full weeks are in the given `k` days (`full_weeks = k / 7`) and how many days are left after accounting for these full weeks (`remaining_days = k % 7`).
3. **Increase for Full Weeks**: For each full week, Pinochio's nose grows for 5 days and shrinks for 2 days. Therefore, the net increase per week is `5 * p - 2`.
4. **Increase for Remaining Days**: It then calculates the increase for the remaining days. If the remaining day is a weekday (first 5 days), it adds `p` to the total increase. If it's a weekend (last 2 days), it subtracts 1.
5. **Final Nose Length**: The initial nose length `n` is adjusted by the total increase calculated.
6. **Writing Output**: The final nose length is written to the file `pinochio.out`.

This solution ensures that the operations are performed efficiently and correctly, adhering to the constraints provided.
