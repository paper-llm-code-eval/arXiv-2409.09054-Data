---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to simulate the growth and shrinkage of Pinocchio's nose over a given number of days. The key is to recognize the pattern of growth and shrinkage over the week and apply it correctly.

Here's a step-by-step plan:
1. Read the input values from the file `pinochio.in`.
2. Initialize the nose length to the given initial length.
3. Loop through each day, adjusting the nose length according to whether it's a weekday or weekend.
4. Write the final nose length to the output file `pinochio.out`.

Let's implement this in C++:

```cpp
#include <fstream>

int main() {
    std::ifstream infile("pinochio.in");
    std::ofstream outfile("pinochio.out");

    int n, p, k;
    infile >> n >> p >> k;

    int nose_length = n;

    for (int i = 0; i < k; ++i) {
        if (i % 7 < 5) {
            // Weekday (Monday to Friday)
            nose_length += p;
        } else {
            // Weekend (Saturday and Sunday)
            nose_length -= 1;
        }
    }

    outfile << nose_length << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the values of `n`, `p`, and `k` from the input file.
2. **Initialization:** We set the initial nose length to `n`.
3. **Loop Through Days:** We loop from 0 to `k-1`:
   - If the day is a weekday (Monday to Friday), we increase the nose length by `p`.
   - If the day is a weekend (Saturday or Sunday), we decrease the nose length by 1.
4. **Writing Output:** We write the final nose length to the output file.

### Example Verification:
For the input:
```
2 1 8
```
The nose length changes as follows:
- Day 1 (Monday): 2 + 1 = 3
- Day 2 (Tuesday): 3 + 1 = 4
- Day 3 (Wednesday): 4 + 1 = 5
- Day 4 (Thursday): 5 + 1 = 6
- Day 5 (Friday): 6 + 1 = 7
- Day 6 (Saturday): 7 - 1 = 6
- Day 7 (Sunday): 6 - 1 = 5
- Day 8 (Monday): 5 + 1 = 6

The final nose length is 6, which matches the expected output.

This solution efficiently handles the problem within the given constraints.
