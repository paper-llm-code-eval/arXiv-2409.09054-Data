---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `gardul.in` and write to `gardul.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doi copii vopsesc un gard alcătuit din $n$ scânduri pe care le vom numerota de la $1$ la $n$ astfel: primul ia o cutie de vopsea roșie cu care vopsește scândurile cu numărul $p$, $2 \cdot p$, $3 \cdot p$, etc. Al doilea procedează la fel, începe de la același capăt al gardului, dar ia o cutie de vopsea albastră și vopsește din $q$ în $q$ scânduri. Astfel, când vor termina de vopsit, gardul va avea multe scânduri nevopsite, unele scânduri vopsite în roșu, altele în albastru, iar altele în violet (cele care au fost vopsite și cu roșu și cu albastru).

# Cerință

Cunoscând numerele $n, p$ și $q$ afișați:

1. câte scânduri rămân nevopsite
2. câte scânduri sunt vopsite în roșu
3. câte scânduri sunt vopsite în albastru
4. câte scânduri sunt vopsite în violet

# Date de intrare

De pe prima linie a fișierului de intrare `gardul.in` se citește valoarea $n$, reprezentând numărul de scânduri din gard. De pe cea de a doua linie a fișierului de intrare se citesc valorile $p$ și $q$ separate de un spațiu.

# Date de ieșire

În fișierul de ieșire `gardul.out` se vor afișa, în ordine, cele patru numere naturale cerute, câte unul pe un rând, ca în exemplu.

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq p, q \leq 40 \ 000$;

---

Example:
`gardul.in`
```
25
4 6
```

`gardul.out`
```
17
4
2
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("gardul.in");
    std::ofstream outfile("gardul.out");

    int n, p, q;
    infile >> n >> p >> q;

    std::vector<bool> painted(n + 1, false);
    int red_count = 0, blue_count = 0, violet_count = 0;

    for (int i = p; i <= n; i += p) {
        painted[i] = true;
        red_count++;
    }

    for (int i = q; i <= n; i += q) {
        if (painted[i]) {
            red_count--;
            violet_count++;
        } else {
            painted[i] = true;
            blue_count++;
        }
    }

    int unpainted_count = n - (red_count + blue_count + violet_count);

    outfile << unpainted_count << "\n";
    outfile << red_count << "\n";
    outfile << blue_count << "\n";
    outfile << violet_count << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Input Reading**:
   - Read the values of `n`, `p`, and `q` from the `gardul.in` file.

2. **Initialization**:
   - Use a vector `painted` to keep track of whether each board is painted or not. The size of the vector is `n + 1` to accommodate 1-based indexing.
   - Initialize counters for red, blue, and violet painted boards.

3. **Painting Process**:
   - Iterate through the boards using the step `p` to mark red painted boards.
   - Iterate through the boards using the step `q` to mark blue painted boards. If a board is already painted red, it is marked as violet.

4. **Counting Unpainted Boards**:
   - Calculate the number of unpainted boards by subtracting the sum of red, blue, and violet painted boards from `n`.

5. **Output Results**:
   - Write the results in the required order to the `gardul.out` file.

This solution ensures efficient processing by iterating through the boards only a few times, making it suitable for large inputs up to the given constraints.
