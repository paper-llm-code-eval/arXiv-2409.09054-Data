---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this problem efficiently, we need to determine the number of divisors for each number in the given interval and then find the number with the maximum divisors. Given the constraints, we can use a direct approach to count the divisors for each number in the interval.

Here's the step-by-step approach:

1. **Read Input**: Read the interval endpoints `a` and `b` from the input file `maxd.in`.
2. **Count Divisors**: For each number in the interval `[a, b]`, count its divisors.
3. **Track Maximum Divisors**: Keep track of the number with the maximum divisors, the count of these divisors, and how many numbers have this maximum divisor count.
4. **Write Output**: Write the results to the output file `maxd.out`.

Given the constraints that `b - a` can be at most 10,000, this approach should be efficient enough.

Here's the C++ code implementing this solution:

```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <limits>

int countDivisors(int n) {
    int count = 0;
    int sqrt_n = static_cast<int>(std::sqrt(n));
    for (int i = 1; i <= sqrt_n; ++i) {
        if (n % i == 0) {
            count += (i * i == n) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    std::ifstream input("maxd.in");
    std::ofstream output("maxd.out");

    int a, b;
    input >> a >> b;

    int minNumber = std::numeric_limits<int>::max();
    int maxDivisors = 0;
    int countMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumber = i;
            countMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            if (i < minNumber) {
                minNumber = i;
            }
            countMaxDivisors++;
        }
    }

    output << minNumber << " " << maxDivisors << " " << countMaxDivisors << "\n";

    return 0;
}
```

### Explanation:
1. **Counting Divisors**: The function `countDivisors` counts the number of divisors of a given number `n`. It iterates up to the square root of `n` and counts pairs of divisors.
2. **Main Logic**:
   - Read the values `a` and `b` from the input file.
   - Initialize variables to track the smallest number with the maximum divisors, the maximum number of divisors, and the count of numbers with this maximum divisor count.
   - Iterate through each number in the interval `[a, b]` and count its divisors.
   - Update the tracking variables based on the divisor counts.
3. **Output**: Write the results to the output file.

This solution ensures that we efficiently count divisors and track the required values, adhering to the problem constraints.
