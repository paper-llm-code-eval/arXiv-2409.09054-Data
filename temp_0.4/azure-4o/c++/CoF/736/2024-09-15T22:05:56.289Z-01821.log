---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider the constraints and optimize our approach accordingly. Given the constraints, we can use a brute-force approach to count the divisors for each number in the interval, but we need to ensure that this is done efficiently.

### Steps to Solve the Problem:
1. **Read Input**: Read the values of `a` and `b` from the file `maxd.in`.
2. **Count Divisors**: For each number in the interval `[a, b]`, count the number of divisors.
3. **Track Maximum Divisors**: Keep track of the number with the maximum divisors, the count of such numbers, and the smallest number with the maximum divisors.
4. **Write Output**: Write the results to the file `maxd.out`.

### Efficient Divisor Counting:
To count the divisors of a number `n`, iterate from `1` to `sqrt(n)`. For each `i`:
- If `i` is a divisor of `n`, then both `i` and `n/i` are divisors.
- This reduces the time complexity to `O(sqrt(n))` per number.

### Implementation:
Here is the C++ code that implements the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <limits.h>

int countDivisors(int n) {
    int count = 0;
    for (int i = 1; i <= std::sqrt(n); ++i) {
        if (n % i == 0) {
            if (i == n / i) {
                count += 1;
            } else {
                count += 2;
            }
        }
    }
    return count;
}

int main() {
    std::ifstream infile("maxd.in");
    std::ofstream outfile("maxd.out");

    int a, b;
    infile >> a >> b;

    int maxDivisors = 0;
    int minNumber = INT_MAX;
    int countMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumber = i;
            countMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            if (i < minNumber) {
                minNumber = i;
            }
            countMaxDivisors++;
        }
    }

    outfile << minNumber << " " << maxDivisors << " " << countMaxDivisors << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the values of `a` and `b` from the input file.
2. **Counting Divisors**: For each number in the interval `[a, b]`, we count the number of divisors using the `countDivisors` function.
3. **Tracking Maximum Divisors**: We keep track of the maximum number of divisors found, the smallest number with that many divisors, and the count of such numbers.
4. **Writing Output**: We write the results to the output file.

This approach ensures that we efficiently count divisors and track the required information within the given constraints.
