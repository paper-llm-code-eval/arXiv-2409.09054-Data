---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a C++ solution to the problem described. The solution reads from the file `maxd.in` and writes to `maxd.out`. It calculates the number of divisors for each number in the given interval and determines the smallest number with the maximum number of divisors. Additionally, it counts how many numbers in the interval have the same maximum number of divisors.

```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>

// Function to count the number of divisors of a given number
int countDivisors(int n) {
    int count = 0;
    int sqrt_n = std::sqrt(n);
    for (int i = 1; i <= sqrt_n; ++i) {
        if (n % i == 0) {
            count += (i * i == n) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    std::ifstream infile("maxd.in");
    std::ofstream outfile("maxd.out");

    int a, b;
    infile >> a >> b;

    int maxDivisors = 0;
    int minNumberWithMaxDivisors = b + 1;
    int countMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumberWithMaxDivisors = i;
            countMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            if (i < minNumberWithMaxDivisors) {
                minNumberWithMaxDivisors = i;
            }
            ++countMaxDivisors;
        }
    }

    outfile << minNumberWithMaxDivisors << " " << maxDivisors << " " << countMaxDivisors << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the interval bounds `a` and `b` from the file `maxd.in`.
2. **Counting Divisors**: The function `countDivisors` calculates the number of divisors of a given number `n`. It iterates up to the square root of `n` to count the divisors efficiently.
3. **Finding the Minimum Number with Maximum Divisors**: The program iterates through each number in the interval `[a, b]`, counting its divisors. It keeps track of the maximum number of divisors found, the smallest number with that maximum number of divisors, and the count of numbers that have that maximum number of divisors.
4. **Writing Output**: The results are written to the file `maxd.out` in the required format.

This solution ensures efficiency by limiting the divisor count calculation to the square root of each number and iterating through the interval only once. The constraints are respected, and the solution should perform well within the given limits.
