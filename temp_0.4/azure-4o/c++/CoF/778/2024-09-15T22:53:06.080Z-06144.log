---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we can use a min-heap (priority queue) to generate the sequence of numbers that have divisors only from the given prime numbers. This approach ensures that we always get the smallest number that can be formed using the given primes, and we can efficiently find the m-th number in the sequence.

Here's a step-by-step breakdown of the approach:

1. **Read Input**: Read the input values from `numar.in`.
2. **Initialize Min-Heap**: Use a min-heap to keep track of the smallest numbers that can be formed using the given primes.
3. **Generate Sequence**: Continuously extract the smallest number from the heap, add it to the sequence, and push its multiples with the given primes back into the heap.
4. **Avoid Duplicates**: Use a set to avoid pushing duplicate numbers into the heap.
5. **Output Result**: Once the m-th number is found, write it to `numar.out`.

Here's the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

int main() {
    std::ifstream infile("numar.in");
    std::ofstream outfile("numar.out");

    int n, m;
    infile >> n >> m;

    std::vector<int> primes(n);
    for (int i = 0; i < n; ++i) {
        infile >> primes[i];
    }

    // Min-heap to generate the sequence
    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> minHeap;
    std::set<long long> seen;

    // Initialize the heap with the given primes
    for (int prime : primes) {
        minHeap.push(prime);
        seen.insert(prime);
    }

    long long current = 0;
    for (int i = 0; i < m; ++i) {
        current = minHeap.top();
        minHeap.pop();

        // Generate new numbers by multiplying the current number with each prime
        for (int prime : primes) {
            long long newNumber = current * prime;
            if (seen.find(newNumber) == seen.end()) {
                minHeap.push(newNumber);
                seen.insert(newNumber);
            }
        }
    }

    outfile << current << std::endl;

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the input values `n` and `m`, and the list of `n` primes.
2. **Min-Heap Initialization**: We initialize the min-heap with the given primes and also maintain a set to keep track of numbers we've already processed to avoid duplicates.
3. **Generating Sequence**: We extract the smallest number from the heap, generate its multiples with the given primes, and push them back into the heap if they haven't been seen before.
4. **Finding m-th Number**: We repeat the extraction and generation process `m` times to find the m-th number in the sequence.
5. **Output the Result**: Finally, we write the m-th number to `numar.out`.

This approach ensures that we efficiently generate the sequence and find the m-th number using a min-heap and a set to manage duplicates.
