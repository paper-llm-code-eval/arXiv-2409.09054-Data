---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Corneluș a învățat să numere. El pornește întotdeauna de la $1$, numără din $1$ în $1$, nu greșește niciodată numărul următor, însă ezită uneori și atunci spune numărul curent de mai multe ori. Sora lui, Corina, îl urmărește și face tot felul de calcule asupra modurilor în care numără fratele ei. Astfel, ea urmărește până la cât numără $(U)$, câte numere spune în total $(N)$ și, pentru a aprecia cât de ezitant este, numărul maxim de repetări $(R)$ ale unei valori. De exemplu, el poate număra până la $8$ astfel: $1 \ 2 \ 3 \ 3 \ 4 \ 5 \ 6 \ 7 \ 7 \ 7 \ 7 \ 8 \ 8$. În acest caz, numără până la $8 \ (U=8)$, spune $13$ numere $(N=13)$ și ezită cel mai mult la $7$, spunându-l de $4$ ori $(R=4)$.

# Cerințe

1) Cunoscând numărul total de numere $N$ și ultimul număr spus $U$, trebuie să calculați câte șiruri diferite au exact $N$ numere și se termină cu numărul $U$.
2) Cunoscând numărul total de numere $N$ și numărul maxim de repetări $R$ ale unei valori, trebuie să calculați câte șiruri diferite au exact $N$ numere și fiecare valoare se repetă de cel mult $R$ ori. 

Deoarece numărul de șiruri poate fi foarte mare, calculați restul împărțirii acestui număr la $20 \ 173 \ 333$.

# Date de intrare


Din fișierul `sir.in` se citesc trei numere naturale, $P, N$ și $X$, scrise în această ordine, cu câte un spațiu între ele. $P$ poate avea una dintre valorile  $1$ sau $2$, iar $N$ este numărul de numere din șir. Când $P$ are valoarea $1$, numărul $X$ reprezintă ultimul număr spus $(U)$, iar când $P$ are valoarea $2$, $X$ reprezintă numărul maxim de repetări ale unei valori $(R)$.

# Date de ieșire


În fișierul `sir.out` se scrie o singură valoare, astfel: 

* dacă $P$ a avut valoarea $1$, valoarea reprezintă numărul de șiruri distincte care au exact $N$ numere și se termină cu numărul $X$
* dacă $P$ a avut valoarea $2$, valoarea reprezintă numărul de șiruri distincte care au exact $N$ numere și fiecare număr se repetă de cel mult $X$ ori.

**În ambele cazuri**, deoarece numărul rezultat poate fi foarte mare, se va scrie restul împărțirii acestui număr la $20 \ 173 \ 333$. 

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$
* $ X \leq N$
* Ultima valoare spusă poate să apară de mai multe ori;
* Testele cu $P=1$ vor totaliza $50\%$ din punctaj, restul de $50\%$ din punctaj fiind pentru $P=2$;
* Pentru teste cumulând 50 de puncte valoarea lui $N$ nu depășește $1\ 000$.

---

Example:
`sir.in`
```
1 5 3
```

`sir.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

const int MOD = 20173333;

int main() {
    std::ifstream fin("sir.in");
    std::ofstream fout("sir.out");

    int P, N, X;
    fin >> P >> N >> X;

    if (P == 1) {
        // Calculate the number of sequences of length N ending with U = X
        std::vector<std::vector<int>> dp(N + 1, std::vector<int>(X + 1, 0));
        dp[0][0] = 1;

        for (int i = 1; i <= N; ++i) {
            for (int j = 1; j <= X; ++j) {
                dp[i][j] = (dp[i - 1][j - 1] + dp[i - 1][j]) % MOD;
            }
        }

        fout << dp[N][X] << "\n";
    } else if (P == 2) {
        // Calculate the number of sequences of length N with max repetitions R = X
        std::vector<int> dp(N + 1, 0);
        dp[0] = 1;

        for (int i = 1; i <= N; ++i) {
            for (int j = 1; j <= X && j <= i; ++j) {
                dp[i] = (dp[i] + dp[i - j]) % MOD;
            }
        }

        fout << dp[N] << "\n";
    }

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - We read the input values `P`, `N`, and `X` from the file `sir.in`.

2. **Case P = 1:**
   - We need to find the number of sequences of length `N` that end with the number `X`.
   - We use dynamic programming to solve this. The `dp` array is a 2D vector where `dp[i][j]` represents the number of sequences of length `i` that end with the number `j`.
   - We initialize `dp[0][0]` to 1 because there's one way to have a sequence of length 0 (an empty sequence).
   - We then fill the `dp` table by iterating through possible lengths and values, updating the table based on the previous values.

3. **Case P = 2:**
   - We need to find the number of sequences of length `N` where no number is repeated more than `X` times consecutively.
   - We use a 1D `dp` array where `dp[i]` represents the number of sequences of length `i`.
   - We initialize `dp[0]` to 1 because there's one way to have a sequence of length 0.
   - We then fill the `dp` table by iterating through possible lengths and summing up the contributions from sequences of shorter lengths that can be extended by up to `X` repeated numbers.

4. **Output:**
   - We write the result to the file `sir.out`.

This solution is efficient and handles the constraints provided in the problem statement.
