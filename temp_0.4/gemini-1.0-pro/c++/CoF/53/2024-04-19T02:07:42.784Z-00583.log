---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mosia.in` and write to `mosia.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Păcală a primit, aşa cum era învoiala, un petec de teren de pe moşia boierului. Terenul este împrejmuit complet cu segmente drepte de gard ce se sprijină la ambele capete de câte un par zdravăn. La o nouă prinsoare, Păcală iese iar in câştig şi primeşte dreptul să strămute nişte pari, unul câte unul, cum i-o fi voia, astfel încât să-şi extindă suprafaţa de teren. Dar învoiala prevede că fiecare par poate fi mutat în orice direcţie, dar nu pe o distanţă mai mare decât o valoare dată (scrisă pe fiecare par) şi fiecare segment de gard, fiind cam şubred, poate fi rotit şi prelungit de la un singur capăt, celălalt rămânând nemişcat.

Cunoscând poziţiile iniţiale ale parilor şi valoarea înscrisă pe fiecare par, se cere suprafaţa maximă cu care poate să-şi extindă Păcală proprietatea. Se ştie că parii sunt daţi într-o ordine oarecare, poziţiile lor iniţiale sunt date prin numere întregi de cel mult $3$ cifre, distanţele pe care fiecare par poate fi deplasat sunt numere naturale strict pozitive şi figura formată de terenul iniţial este un poligon neconcav,

# Date de intrare
Fişierul `mosia.in` conţine $n+1$ linii cu următoarele valori:
$n$				    – numărul de pari
$x_1  y_1  d_1$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $1$
$x_2  y_2  d_2$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $2$
...
$x_n  y_n  d_n$		– coordonatele iniţiale şi distanţa pe care poate fi mutat parul $n$

# Date de ieşire
În fişierul `mosia.out` se scrie un număr real cu $4$ zecimale ce reprezintă suprafaţa maximă cu care se poate mări moşia.

# Restricţii şi observaţii:
* $3 < N ≤ 200$ număr natural
* $–1 \ 000 < x_i,y_i < 1 \ 000$ numere întregi
* $0 < d_i ≤ 20$ numere întregi
* poligonul neconcav se defineşte ca un poligon convex cu unele vârfuri coliniare
* poziţiile parilor sunt date într-o ordine oarecare
* poligonul obţinut după mutarea parilor poate fi concav
* poziţiile finale ale parilor nu sunt in mod obligatoriu numere naturale

---

Example:
`mosia.in`
```
4
-3 0 2
3 0 3
0 6 2
0 -6 6
```

`mosia.out`
```
30.0000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <utility>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <stack>
#include <bitset>
#include <numeric>

using namespace std;

#define ll long long
#define ull unsigned long long
#define vi vector<int>
#define vll vector<ll>
#define vb vector<bool>
#define vd vector<double>
#define vs vector<string>
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pdd pair<double, double>
#define vpii vector<pii>
#define vpll vector<pll>
#define vpdd vector<pdd>
#define umap unordered_map
#define uset unordered_set
#define pq priority_queue
#define endl '\n'

ifstream fin("mosia.in");
ofstream fout("mosia.out");

const int MAXN = 200;
const double EPS = 1e-9;
const double PI = acos(-1);

struct Point {
    double x, y;
    Point() : x(0), y(0) {}
    Point(double x, double y) : x(x), y(y) {}
    Point operator+(const Point& other) const { return Point(x + other.x, y + other.y); }
    Point operator-(const Point& other) const { return Point(x - other.x, y - other.y); }
    Point operator*(const double& scalar) const { return Point(x * scalar, y * scalar); }
    Point operator/(const double& scalar) const { return Point(x / scalar, y / scalar); }
    double dot(const Point& other) const { return x * other.x + y * other.y; }
    double cross(const Point& other) const { return x * other.y - y * other.x; }
    double norm() const { return sqrt(x * x + y * y); }
    double angle() const { return atan2(y, x); }
    bool operator<(const Point& other) const {
        if (abs(x - other.x) > EPS) return x < other.x;
        return y < other.y;
    }
};

struct Segment {
    Point p1, p2;
    Segment() : p1(Point()), p2(Point()) {}
    Segment(const Point& p1, const Point& p2) : p1(p1), p2(p2) {}
    double length() const { return (p2 - p1).norm(); }
    double slope() const {
        if (abs(p2.x - p1.x) < EPS) return numeric_limits<double>::infinity();
        return (p2.y - p1.y) / (p2.x - p1.x);
    }
    bool operator<(const Segment& other) const {
        if (p1.x != other.p1.x) return p1.x < other.p1.x;
        if (p1.y != other.p1.y) return p1.y < other.p1.y;
        if (p2.x != other.p2.x) return p2.x < other.p2.x;
        return p2.y < other.p2.y;
    }
};

struct Circle {
    Point center;
    double radius;
    Circle() : center(Point()), radius(0) {}
    Circle(const Point& center, double radius) : center(center), radius(radius) {}
    bool contains(const Point& point) const { return (point - center).norm() <= radius; }
};

struct Polygon {
    vector<Point> points;
    Polygon() {}
    Polygon(const vector<Point>& points) : points(points) {}
    double area() const {
        double sum = 0;
        for (int i = 0; i < points.size(); i++) {
            sum += points[i].cross(points[(i + 1) % points.size()]);
        }
        return abs(sum) / 2;
    }
    bool isConvex() const {
        for (int i = 0; i < points.size(); i++) {
            if (((points[(i + 1) % points.size()] - points[i]).cross(points[(i + 2) % points.size()] - points[(i + 1) % points.size()])) < -EPS) return false;
        }
        return true;
    }
};

int n;
vector<Point> points;
vector<double> distances;
vector<Segment> segments;
vector<bool> visited;
double maxArea = 0;

void readInput() {
    fin >> n;
    points.resize(n);
    distances.resize(n);
    for (int i = 0; i < n; i++) {
        fin >> points[i].x >> points[i].y >> distances[i];
    }
}

void solve() {
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            segments.push_back(Segment(points[i], points[j]));
        }
    }
    sort(segments.begin(), segments.end());
    visited.resize(segments.size(), false);
    for (int i = 0; i < segments.size(); i++) {
        if (!visited[i]) {
            vector<Segment> polygon;
            polygon.push_back(segments[i]);
            visited[i] = true;
            double area = 0;
            while (true) {
                int nextSegment = -1;
                for (int j = 0; j < segments.size(); j++) {
                    if (!visited[j] && (segments[j].p1 == polygon.back().p2 || segments[j].p2 == polygon.back().p2)) {
                        if (nextSegment == -1 || segments[j].length() < segments[nextSegment].length()) {
                            nextSegment = j;
                        }
                    }
                }
                if (nextSegment == -1) break;
                polygon.push_back(segments[nextSegment]);
                visited[nextSegment] = true;
                area += polygon.back().length() * distances[polygon.back().p1 == polygon[0].p1 ? 0 : 1];
            }
            if (polygon.size() >= 3) {
                Polygon poly(polygon);
                if (poly.isConvex()) {
                    maxArea = max(maxArea, area);
                }
            }
        }
    }
    fout << fixed << setprecision(4) << maxArea << endl;
}

int main() {
    readInput();
    solve();
    return 0;
}
```
