---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
import sys

def min_dangerous_zones(n, g, grid):
    """
    Finds the minimum number of dangerous zones that the rover must traverse to reach the destination.

    Args:
        n (int): The size of the grid.
        g (int): The weight of the rover.
        grid (list): The grid of stability values.

    Returns:
        int: The minimum number of dangerous zones.
    """
    # Initialize the distance grid with infinity values.
    distance_grid = [[sys.maxsize for _ in range(n)] for _ in range(n)]

    # Set the distance to the starting point to 0.
    distance_grid[0][0] = 0

    # Initialize the queue with the starting point.
    queue = [(0, 0)]

    # While the queue is not empty,
    while queue:
        # Get the current point from the queue.
        x, y = queue.pop(0)

        # For each neighbor of the current point,
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            # Get the neighbor's coordinates.
            nx, ny = x + dx, y + dy

            # If the neighbor is within the grid,
            if 0 <= nx < n and 0 <= ny < n:
                # Calculate the distance to the neighbor.
                new_distance = distance_grid[x][y] + (grid[nx][ny] < g)

                # If the new distance is less than the current distance,
                if new_distance < distance_grid[nx][ny]:
                    # Update the distance to the neighbor.
                    distance_grid[nx][ny] = new_distance

                    # Add the neighbor to the queue.
                    queue.append((nx, ny))

    # Return the distance to the destination.
    return distance_grid[n - 1][n - 1]

def max_rover_weight(n, grid):
    """
    Finds the maximum weight of a rover that can reach the destination without traversing any dangerous zones.

    Args:
        n (int): The size of the grid.
        grid (list): The grid of stability values.

    Returns:
        int: The maximum weight of the rover.
    """
    # Initialize the weight grid with 0 values.
    weight_grid = [[0 for _ in range(n)] for _ in range(n)]

    # Set the weight of the starting point to the maximum value.
    weight_grid[0][0] = sys.maxsize

    # Initialize the queue with the starting point.
    queue = [(0, 0)]

    # While the queue is not empty,
    while queue:
        # Get the current point from the queue.
        x, y = queue.pop(0)

        # For each neighbor of the current point,
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            # Get the neighbor's coordinates.
            nx, ny = x + dx, y + dy

            # If the neighbor is within the grid,
            if 0 <= nx < n and 0 <= ny < n:
                # Calculate the weight of the neighbor.
                new_weight = min(weight_grid[x][y], grid[nx][ny])

                # If the new weight is greater than the current weight,
                if new_weight > weight_grid[nx][ny]:
                    # Update the weight of the neighbor.
                    weight_grid[nx][ny] = new_weight

                    # Add the neighbor to the queue.
                    queue.append((nx, ny))

    # Return the weight of the destination.
    return weight_grid[n - 1][n - 1]

if __name__ == "__main__":
    with open("rover.in", "r") as f:
        v = int(f.readline())
        if v == 1:
            n, g = map(int, f.readline().split())
            grid = [list(map(int, line.split())) for line in f]
            result = min_dangerous_zones(n, g, grid)
        elif v == 2:
            n = int(f.readline())
            grid = [list(map(int, line.split())) for line in f]
            result = max_rover_weight(n, grid)
        else:
            raise ValueError("Invalid value for V.")

    with open("rover.out", "w") as f:
        f.write(str(result))
```
