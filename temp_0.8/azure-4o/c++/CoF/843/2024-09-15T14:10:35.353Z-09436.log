---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `piramide.in` and write to `piramide.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fascinat de Egiptul Antic, Rareș vrea să construiască cât mai multe piramide din cartonașe pătratice identice. El are la dispoziție $N$ cartonașe numerotate de la $1$ la $N$, albe sau gri, așezate în ordinea strict crescătoare a numerelor.

Prima piramidă o va construi folosind primele trei cartonașe. Baza piramidei va fi formată din cartonașele $1$ și $2$ așezate alăturat, peste care va așeza cartonașul $3$ (vârful piramidei).

A doua piramidă va avea baza formată din cartonașele $4$, $5$ și $6$ așezate alăturat, deasupra cărora se vor așeza cartonașele $7$ și $8$, alăturate, peste care se va așeza cartonașul $9$ (vârful piramidei).

Mai departe, va construi în ordine piramidele complete cu bazele formate din $4$ cartonașe (cu numerele de la $10$ la $13$), respectiv $5$ cartonașe (cu numerele de la $20$ la $24$), $6$ cartonașe (cu numerele de la $35$ la $40$) etc., cât timp va putea construi o piramidă completă. De exemplu, dacă Rareș are $N = 75$ cartonașe atunci el va construi piramidele complete $1$, $2$, $3$, $4$ și $5$ din imaginile următoare. Din cele $75$ de cartonașe el va folosi doar primele $55$ de cartonașe, deoarece ultimele $20$ cartonașe nu sunt suficiente pentru a construi piramida $6$, cu baza formată din $7$ cartonașe.

~[piramide.png]

# Cerință

Scrieți un program care să citească numerele naturale $N$ (reprezentând numărul de cartonașe), $X$ (reprezentând numărul unui cartonaș), $K$ (reprezentând numărul de cartonașe albe), numerele celor $K$ cartonașe albe $c_1$, $c_2$, ..., $c_K$ și care să determine: 

* numărul $P$ al piramidei complete ce conține cartonașul numerotat cu $X$; 
* numărul $M$ maxim de piramide complete construite de Rareș; 
* numărul $C$ de cartonașe nefolosite; 
* numărul $A$ al primei piramide complete care conține cele mai multe cartonașe albe. 

# Date de intrare

Fișierul de intrare `piramide.in` conține pe prima linie cele trei numere $N$, $X$ și $K$, separate prin câte un spațiu, cu semnificația din enunț. A doua linie a fișierului conține, în ordine, cele $K$ numere $c_1$, $c_2$, ..., $c_K$, separate prin câte un spațiu, reprezentând numerele celor $K$ cartonașe albe din cele $N$.

# Date de ieșire

Fișierul de ieșire `piramide.out` va conține pe prima linie numărul $P$ sau valoarea $0$ (zero) dacă niciuna dintre piramidele complete construite nu conține cartonașul cu numărul $X$. 

A doua linie a fișierului va conține numărul $M$. 

Cea de-a treia linie va conține numărul $C$. 

Cea de-a patra linie va conține numărul $A$ sau valoarea $0$ (zero) dacă nicio piramidă completă nu conține cel puțin un cartonaș alb.

# Restricții și precizări

* $1 \leq a, b \leq 1 \ 000 \ 000$;
* $3 \leq N \leq 100 \ 000$; 
* $1 \leq X \leq N$; 
* $1 \leq K \leq N$; 
* $1 \leq c_1 < c_2 <...< c_K \leq N$;
* O piramidă completă cu baza formată din $b$ cartonașe se construiește prin așezarea cartonașelor necesare pe $b$ rânduri: $b$ cartonașe pe primul rând (al bazei), apoi $b - 1$ cartonașe pe rândul al doilea, $b - 2$ pe rândul al treilea, $\dots$ , două cartonașe pe rândul $b - 1$ și un cartonaș (vârful piramidei) pe rândul $b$.
* Pentru rezolvarea cerinței a) se acordă 20% din punctaj, pentru cerința b) 20% din punctaj, pentru cerința c) 20% din punctaj și pentru cerința d) 40% din punctaj.

---

Example:
`piramide.in`
```
75 15 23
5 9 11 18 20 21 25 27 28 30 35 37 45 46 51 55 60 65 68 69 70 71 72
```

`piramide.out`
```
3
5
20
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, let's break down the steps and then implement the solution in C++.

### Steps to Solve the Problem:
1. **Calculate the number of cards needed for each pyramid with base `b`:**
   - For a pyramid with base `b`, the total number of cards required is the sum of the first `b` natural numbers: `(b * (b + 1)) / 2`.

2. **Determine how many complete pyramids can be built with `N` cards:**
   - Start with `b = 2` and keep increasing `b` until the total cards required exceed `N`.

3. **Find the pyramid that contains the card numbered `X`:**
   - Traverse through the pyramids and check if `X` falls within the range of cards for each pyramid.

4. **Calculate the number of unused cards:**
   - Subtract the total number of cards used in the built pyramids from `N`.

5. **Determine the pyramid with the maximum number of white cards:**
   - Maintain a count of white cards for each pyramid and identify the pyramid with the highest count.

### Implementing the Solution in C++:
```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>
using namespace std;

int main() {
    ifstream infile("piramide.in");
    ofstream outfile("piramide.out");

    int N, X, K;
    infile >> N >> X >> K;

    vector<int> whiteCards(K);
    for (int i = 0; i < K; ++i) {
        infile >> whiteCards[i];
    }

    // Variables to keep track of answers
    int P = 0, M = 0, C = 0, A = 0;
    int totalCardsUsed = 0;
    int cardsUsedSoFar = 0;
    unordered_map<int, int> whiteCardCountInPyramid;
    int maxWhiteCards = 0;
    int pyramidWithMaxWhiteCards = 0;

    // Calculate the number of complete pyramids that can be built
    int b = 2;  // Start with base 2
    while (true) {
        int cardsNeededForPyramid = (b * (b + 1)) / 2;
        if (cardsUsedSoFar + cardsNeededForPyramid > N) break;

        ++M;
        totalCardsUsed += cardsNeededForPyramid;
        cardsUsedSoFar += cardsNeededForPyramid;

        // Check if the card X is in this pyramid
        if (X > cardsUsedSoFar - cardsNeededForPyramid && X <= cardsUsedSoFar) {
            P = M;
        }

        // Count white cards in this pyramid
        int whiteCardsInThisPyramid = 0;
        for (int card : whiteCards) {
            if (card > cardsUsedSoFar - cardsNeededForPyramid && card <= cardsUsedSoFar) {
                ++whiteCardsInThisPyramid;
            }
        }
        whiteCardCountInPyramid[M] = whiteCardsInThisPyramid;

        // Update the pyramid with the most white cards
        if (whiteCardsInThisPyramid > maxWhiteCards) {
            maxWhiteCards = whiteCardsInThisPyramid;
            pyramidWithMaxWhiteCards = M;
        }

        ++b;
    }

    C = N - totalCardsUsed;
    A = pyramidWithMaxWhiteCards;
    
    // Write the results to the output file
    outfile << P << endl;
    outfile << M << endl;
    outfile << C << endl;
    outfile << A << endl;

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Input Reading:**
   - Read `N`, `X`, `K` and the list of white card numbers from `piramide.in`.

2. **Loop to Determine Complete Pyramids:**
   - Start with the base `b = 2` and calculate the cards needed for each pyramid.
   - Check if the total cards used so far plus the cards needed for the next pyramid exceed `N`. If so, break the loop.

3. **Identify Pyramid Containing X and Count White Cards:**
   - Within the loop, keep track of the total cards used so far.
   - Check if `X` falls within the range of cards of the current pyramid.
   - Count the number of white cards in the current pyramid and update the maximum count if necessary.

4. **Output the Results:**
   - Write the results to `piramide.out`.

This approach ensures that we efficiently compute all the required values while adhering to the problem constraints. The solution is optimized to handle the maximum input sizes effectively.
