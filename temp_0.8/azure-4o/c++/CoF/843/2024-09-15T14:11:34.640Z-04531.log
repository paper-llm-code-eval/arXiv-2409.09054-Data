---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `piramide.in` and write to `piramide.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fascinat de Egiptul Antic, Rareș vrea să construiască cât mai multe piramide din cartonașe pătratice identice. El are la dispoziție $N$ cartonașe numerotate de la $1$ la $N$, albe sau gri, așezate în ordinea strict crescătoare a numerelor.

Prima piramidă o va construi folosind primele trei cartonașe. Baza piramidei va fi formată din cartonașele $1$ și $2$ așezate alăturat, peste care va așeza cartonașul $3$ (vârful piramidei).

A doua piramidă va avea baza formată din cartonașele $4$, $5$ și $6$ așezate alăturat, deasupra cărora se vor așeza cartonașele $7$ și $8$, alăturate, peste care se va așeza cartonașul $9$ (vârful piramidei).

Mai departe, va construi în ordine piramidele complete cu bazele formate din $4$ cartonașe (cu numerele de la $10$ la $13$), respectiv $5$ cartonașe (cu numerele de la $20$ la $24$), $6$ cartonașe (cu numerele de la $35$ la $40$) etc., cât timp va putea construi o piramidă completă. De exemplu, dacă Rareș are $N = 75$ cartonașe atunci el va construi piramidele complete $1$, $2$, $3$, $4$ și $5$ din imaginile următoare. Din cele $75$ de cartonașe el va folosi doar primele $55$ de cartonașe, deoarece ultimele $20$ cartonașe nu sunt suficiente pentru a construi piramida $6$, cu baza formată din $7$ cartonașe.

~[piramide.png]

# Cerință

Scrieți un program care să citească numerele naturale $N$ (reprezentând numărul de cartonașe), $X$ (reprezentând numărul unui cartonaș), $K$ (reprezentând numărul de cartonașe albe), numerele celor $K$ cartonașe albe $c_1$, $c_2$, ..., $c_K$ și care să determine: 

* numărul $P$ al piramidei complete ce conține cartonașul numerotat cu $X$; 
* numărul $M$ maxim de piramide complete construite de Rareș; 
* numărul $C$ de cartonașe nefolosite; 
* numărul $A$ al primei piramide complete care conține cele mai multe cartonașe albe. 

# Date de intrare

Fișierul de intrare `piramide.in` conține pe prima linie cele trei numere $N$, $X$ și $K$, separate prin câte un spațiu, cu semnificația din enunț. A doua linie a fișierului conține, în ordine, cele $K$ numere $c_1$, $c_2$, ..., $c_K$, separate prin câte un spațiu, reprezentând numerele celor $K$ cartonașe albe din cele $N$.

# Date de ieșire

Fișierul de ieșire `piramide.out` va conține pe prima linie numărul $P$ sau valoarea $0$ (zero) dacă niciuna dintre piramidele complete construite nu conține cartonașul cu numărul $X$. 

A doua linie a fișierului va conține numărul $M$. 

Cea de-a treia linie va conține numărul $C$. 

Cea de-a patra linie va conține numărul $A$ sau valoarea $0$ (zero) dacă nicio piramidă completă nu conține cel puțin un cartonaș alb.

# Restricții și precizări

* $1 \leq a, b \leq 1 \ 000 \ 000$;
* $3 \leq N \leq 100 \ 000$; 
* $1 \leq X \leq N$; 
* $1 \leq K \leq N$; 
* $1 \leq c_1 < c_2 <...< c_K \leq N$;
* O piramidă completă cu baza formată din $b$ cartonașe se construiește prin așezarea cartonașelor necesare pe $b$ rânduri: $b$ cartonașe pe primul rând (al bazei), apoi $b - 1$ cartonașe pe rândul al doilea, $b - 2$ pe rândul al treilea, $\dots$ , două cartonașe pe rândul $b - 1$ și un cartonaș (vârful piramidei) pe rândul $b$.
* Pentru rezolvarea cerinței a) se acordă 20% din punctaj, pentru cerința b) 20% din punctaj, pentru cerința c) 20% din punctaj și pentru cerința d) 40% din punctaj.

---

Example:
`piramide.in`
```
75 15 23
5 9 11 18 20 21 25 27 28 30 35 37 45 46 51 55 60 65 68 69 70 71 72
```

`piramide.out`
```
3
5
20
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("piramide.in");
    ofstream outfile("piramide.out");

    int N, X, K;
    infile >> N >> X >> K;

    vector<int> white_cards(K);
    for (int i = 0; i < K; ++i) {
        infile >> white_cards[i];
    }

    unordered_map<int, int> pyramid_white_count;
    int current_card = 1;
    int pyramid_num = 0;
    int current_base_size = 2;
    int total_cards_used = 0;
    int P = 0; // Pyramid containing card X
    int max_pyramids = 0;
    int unused_cards = 0;
    int A = 0; // Pyramid with max white cards

    while (total_cards_used + (current_base_size * (current_base_size + 1)) / 2 <= N) {
        pyramid_num++;
        int cards_in_current_pyramid = (current_base_size * (current_base_size + 1)) / 2;
        total_cards_used += cards_in_current_pyramid;
        if (X >= current_card && X < current_card + cards_in_current_pyramid) {
            P = pyramid_num;
        }
        int white_count = 0;
        for (int i = 0; i < K; ++i) {
            if (white_cards[i] >= current_card && white_cards[i] < current_card + cards_in_current_pyramid) {
                white_count++;
            }
        }
        pyramid_white_count[pyramid_num] = white_count;
        if (white_count > pyramid_white_count[A]) {
            A = pyramid_num;
        }
        current_card += cards_in_current_pyramid;
        current_base_size++;
    }

    max_pyramids = pyramid_num;
    unused_cards = N - total_cards_used;

    outfile << P << endl;
    outfile << max_pyramids << endl;
    outfile << unused_cards << endl;
    if (A == 0 && pyramid_white_count[0] == 0) {
        outfile << 0 << endl;
    } else {
        outfile << A << endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The number of cards `N`, the card number `X`, and the number of white cards `K` are read from the file.
   - The indices of the white cards are stored in a vector `white_cards`.

2. **Variables Initialization:**
   - We use a map `pyramid_white_count` to count white cards in each pyramid.
   - Variables for tracking current card index, pyramid number, base size, and other required metrics.

3. **Loop to Determine Pyramid Construction:**
   - We loop to determine how many complete pyramids can be built using the available cards.
   - For each pyramid, we calculate the number of cards required and check if card `X` is within the current pyramid.
   - We also count the number of white cards in the current pyramid and store it in `pyramid_white_count`.

4. **Final Calculations:**
   - Determine the maximum number of complete pyramids that can be constructed.
   - Calculate the number of unused cards.
   - Determine which pyramid contains the most white cards.

5. **Output Results:**
   - Output the results to `piramide.out`.

This approach ensures that the solution is efficient and handles the constraints effectively.
