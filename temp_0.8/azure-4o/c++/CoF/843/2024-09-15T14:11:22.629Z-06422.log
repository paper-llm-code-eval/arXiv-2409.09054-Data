---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `piramide.in` and write to `piramide.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fascinat de Egiptul Antic, Rareș vrea să construiască cât mai multe piramide din cartonașe pătratice identice. El are la dispoziție $N$ cartonașe numerotate de la $1$ la $N$, albe sau gri, așezate în ordinea strict crescătoare a numerelor.

Prima piramidă o va construi folosind primele trei cartonașe. Baza piramidei va fi formată din cartonașele $1$ și $2$ așezate alăturat, peste care va așeza cartonașul $3$ (vârful piramidei).

A doua piramidă va avea baza formată din cartonașele $4$, $5$ și $6$ așezate alăturat, deasupra cărora se vor așeza cartonașele $7$ și $8$, alăturate, peste care se va așeza cartonașul $9$ (vârful piramidei).

Mai departe, va construi în ordine piramidele complete cu bazele formate din $4$ cartonașe (cu numerele de la $10$ la $13$), respectiv $5$ cartonașe (cu numerele de la $20$ la $24$), $6$ cartonașe (cu numerele de la $35$ la $40$) etc., cât timp va putea construi o piramidă completă. De exemplu, dacă Rareș are $N = 75$ cartonașe atunci el va construi piramidele complete $1$, $2$, $3$, $4$ și $5$ din imaginile următoare. Din cele $75$ de cartonașe el va folosi doar primele $55$ de cartonașe, deoarece ultimele $20$ cartonașe nu sunt suficiente pentru a construi piramida $6$, cu baza formată din $7$ cartonașe.

~[piramide.png]

# Cerință

Scrieți un program care să citească numerele naturale $N$ (reprezentând numărul de cartonașe), $X$ (reprezentând numărul unui cartonaș), $K$ (reprezentând numărul de cartonașe albe), numerele celor $K$ cartonașe albe $c_1$, $c_2$, ..., $c_K$ și care să determine: 

* numărul $P$ al piramidei complete ce conține cartonașul numerotat cu $X$; 
* numărul $M$ maxim de piramide complete construite de Rareș; 
* numărul $C$ de cartonașe nefolosite; 
* numărul $A$ al primei piramide complete care conține cele mai multe cartonașe albe. 

# Date de intrare

Fișierul de intrare `piramide.in` conține pe prima linie cele trei numere $N$, $X$ și $K$, separate prin câte un spațiu, cu semnificația din enunț. A doua linie a fișierului conține, în ordine, cele $K$ numere $c_1$, $c_2$, ..., $c_K$, separate prin câte un spațiu, reprezentând numerele celor $K$ cartonașe albe din cele $N$.

# Date de ieșire

Fișierul de ieșire `piramide.out` va conține pe prima linie numărul $P$ sau valoarea $0$ (zero) dacă niciuna dintre piramidele complete construite nu conține cartonașul cu numărul $X$. 

A doua linie a fișierului va conține numărul $M$. 

Cea de-a treia linie va conține numărul $C$. 

Cea de-a patra linie va conține numărul $A$ sau valoarea $0$ (zero) dacă nicio piramidă completă nu conține cel puțin un cartonaș alb.

# Restricții și precizări

* $1 \leq a, b \leq 1 \ 000 \ 000$;
* $3 \leq N \leq 100 \ 000$; 
* $1 \leq X \leq N$; 
* $1 \leq K \leq N$; 
* $1 \leq c_1 < c_2 <...< c_K \leq N$;
* O piramidă completă cu baza formată din $b$ cartonașe se construiește prin așezarea cartonașelor necesare pe $b$ rânduri: $b$ cartonașe pe primul rând (al bazei), apoi $b - 1$ cartonașe pe rândul al doilea, $b - 2$ pe rândul al treilea, $\dots$ , două cartonașe pe rândul $b - 1$ și un cartonaș (vârful piramidei) pe rândul $b$.
* Pentru rezolvarea cerinței a) se acordă 20% din punctaj, pentru cerința b) 20% din punctaj, pentru cerința c) 20% din punctaj și pentru cerința d) 40% din punctaj.

---

Example:
`piramide.in`
```
75 15 23
5 9 11 18 20 21 25 27 28 30 35 37 45 46 51 55 60 65 68 69 70 71 72
```

`piramide.out`
```
3
5
20
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

int main() {
    ifstream fin("piramide.in");
    ofstream fout("piramide.out");

    int N, X, K;
    fin >> N >> X >> K;

    vector<int> white_cards(K);
    for (int i = 0; i < K; ++i) {
        fin >> white_cards[i];
    }

    int current_card = 1;
    int pyramid_index = 0;
    int layer_size = 2;
    int total_pyramids = 0;
    int unused_cards = N;
    int P = 0, A = 0, max_whites = 0;

    unordered_map<int, int> pyramid_white_count;

    while (current_card + (layer_size * (layer_size + 1)) / 2 - 1 <= N) {
        ++pyramid_index;
        int pyramid_start = current_card;
        int pyramid_end = current_card + (layer_size * (layer_size + 1)) / 2 - 1;
        current_card = pyramid_end + 1;
        ++total_pyramids;

        if (X >= pyramid_start && X <= pyramid_end) {
            P = pyramid_index;
        }

        int white_count = count_if(white_cards.begin(), white_cards.end(), 
                                   [pyramid_start, pyramid_end](int card) {
                                       return card >= pyramid_start && card <= pyramid_end;
                                   });
        
        if (white_count > max_whites) {
            max_whites = white_count;
            A = pyramid_index;
        }

        pyramid_white_count[pyramid_index] = white_count;
        unused_cards -= (layer_size * (layer_size + 1)) / 2;
        ++layer_size;
    }

    fout << (P > 0 ? P : 0) << '\n';
    fout << total_pyramids << '\n';
    fout << unused_cards << '\n';
    fout << (max_whites > 0 ? A : 0) << '\n';

    fin.close();
    fout.close();

    return 0;
}
```

This C++ program reads the input from a file named `piramide.in`, processes the data to determine the required values, and writes the results to a file named `piramide.out`. Here's a step-by-step explanation of how it works:

1. **Reading Input Data**:
    - The program reads the input data which includes the total number of cards `N`, the specific card number `X`, the number of white cards `K`, and the list of white cards.

2. **Initialization**:
    - Variables are initialized to track the current card, pyramid index, layer size, total number of complete pyramids, unused cards, and other required results.

3. **Pyramid Construction Simulation**:
    - The program simulates the construction of pyramids by incrementing the layer size and determining the range of cards used for each pyramid.
    - It checks if the current card number `X` falls within the range of the current pyramid, updates the count of white cards in each pyramid, and tracks the maximum number of white cards in any pyramid.

4. **Updating Results**:
    - It calculates the total number of pyramids that can be constructed, the number of unused cards, and identifies the pyramid with the most white cards.

5. **Writing Output Data**:
    - The results are written to the output file in the required format.

This solution is designed to be efficient and handle the given constraints effectively.
