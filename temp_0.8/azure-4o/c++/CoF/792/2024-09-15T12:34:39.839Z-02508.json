{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/792/2024-09-15T12:34:39.839Z-02508.log",
  "attemptStart": 1726403679.839,
  "attemptEnd": 1726403755.173,
  "attemptDuration": 75.33400011062622,
  "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <map>\n#include <stack>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct RecipePart {\n    map<string, int> ingredients;\n    int time = 0;\n};\n\nint main() {\n    ifstream fin(\"reteta.in\");\n    ofstream fout(\"reteta.out\");\n\n    string recipe;\n    getline(fin, recipe);\n\n    stack<RecipePart> partsStack;\n    RecipePart currentPart;\n    string token;\n\n    for (size_t i = 0; i < recipe.size(); ++i) {\n        if (recipe[i] == '(') {\n            partsStack.push(currentPart);\n            currentPart = RecipePart(); // Reset the current part\n        } else if (recipe[i] == ')') {\n            int j = i + 1;\n            while (j < recipe.size() && isspace(recipe[j])) {\n                ++j;\n            }\n            while (j < recipe.size() && isdigit(recipe[j])) {\n                ++j;\n            }\n            try {\n                int time = stoi(recipe.substr(i + 1, j - i - 1));\n                currentPart.time += time;\n            } catch (const invalid_argument &e) {\n                cerr << \"Invalid argument for stoi: \" << recipe.substr(i + 1, j - i - 1) << endl;\n                return 1;\n            }\n            i = j - 1;\n\n            if (!partsStack.empty()) {\n                RecipePart finishedPart = currentPart;\n                currentPart = partsStack.top();\n                partsStack.pop();\n\n                for (const auto& it : finishedPart.ingredients) {\n                    currentPart.ingredients[it.first] += it.second;\n                }\n                currentPart.time += finishedPart.time;\n            }\n        } else if (isalpha(recipe[i])) {\n            string ingredient;\n            while (i < recipe.size() && isalpha(recipe[i])) {\n                ingredient += recipe[i];\n                ++i;\n            }\n            while (i < recipe.size() && isspace(recipe[i])) {\n                ++i;\n            }\n            string quantityStr;\n            while (i < recipe.size() && isdigit(recipe[i])) {\n                quantityStr += recipe[i];\n                ++i;\n            }\n            try {\n                currentPart.ingredients[ingredient] += stoi(quantityStr);\n            } catch (const invalid_argument &e) {\n                cerr << \"Invalid argument for stoi: \" << quantityStr << endl;\n                return 1;\n            }\n            --i;\n        }\n    }\n\n    fout << currentPart.time << endl;\n\n    vector<pair<string, int>> sortedIngredients(currentPart.ingredients.begin(), currentPart.ingredients.end());\n    sort(sortedIngredients.begin(), sortedIngredients.end());\n\n    for (const auto& it : sortedIngredients) {\n        fout << it.first << \" \" << it.second << endl;\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 6020,
  "metadata": {
    "id": 792,
    "examples": [
      {
        "in": "(((zahar 100 ou 3)5 unt 100 nuca 200)4 (lapte 200 cacao 50 zahar 100) 3)20",
        "out": "32\ncacao 50\nlapte 200\nnuca 200\nou 3\nunt 100\nzahar 200",
        "explainer": ""
      }
    ],
    "body": "Mama mea este profesoară de informatică, dar îi place foarte mult să gătească. Recent am descoperit caietul ei de reţete, care arată foarte neobişnuit. Fiecare reţetă este scrisă pe un singur rând pe care sunt precizate produsele folosite, cantităţile, precum şi ordinea în care se execută operaţiile. De exemplu:\n\n`(unt 50 zahar 250 ou 4)5`\n\nceea ce înseamnă că se amestecă $50$ grame unt cu $250$ grame zahăr şi cu $4$ ouă timp de $5$ minute. Pentru fiecare produs mama foloseşte întotdeauna aceeaşi unitate de măsură, aşa că unităţile de măsură nu mai sunt precizate. Numele produsului este scris întotdeauna cu litere mici, iar produsele şi cantităţile sunt separate prin spaţii (unul sau mai multe). Produsele care se amestecă împreună sunt încadrate între paranteze rotunde; după paranteza rotundă închisă este specificat timpul de preparare.\n\nEvident, mama are şi reţeţe mai complicate:\n\n`(((zahar 100 ou 3)5 unt 100 nuca 200)4 (lapte 200 cacao 50 zahar 100) 3)20`\n\nSă traducem această reţetă: se amestecă $100$ grame zahăr cu $3$ ouă timp de cinci minute; apoi se adaugă $100$ grame unt şi $200$ grame nucă, amestecând totul încă $4$ minute. Se amestecă $200$ ml lapte cu $50$ grame de cacao şi $100$ grame zahăr timp de $3$ minute, apoi se toarnă peste compoziţia precedentă şi se amestecă totul timp de $20$ minute.\n\nObservaţi că înainte sau după parantezele rotunde pot să apară sau nu spaţii.\n\n# Cerinţă\n\nDată fiind o reţetă să se determine timpul total de preparare, precum şi cantităţile necesare din fiecare produs.\n\n\n# Date de intrare\n\n\nFişierul de intrare `reteta.in` conţine pe prima linie un şir de caractere care reprezintă o reţetă.\n\n# Date de ieșire\n\n\nFişierul de ieşire `reteta.out` va conţine pe prima linie timpul total necesar pentru prepararea reţetei. Pe următoarele linii sunt scrise ingredientele în ordine lexicografică (ordinea din dicţionar), câte un ingredient pe o linie. Pentru fiecare ingredient este specificat numele urmat de un spaţiu apoi de cantitatea totală necesară.\n\n# Restricții și precizări\n\n* $0 <$ Lungimea unei reţete $≤ 1 \\ 000$\n* $1 ≤$ Numărul de ingrediente $≤ 100$\n* Numele unui ingredient este scris cu maxim 20 litere mici ale alfabetului englez.\n* Timpii de preparare sunt numere naturale $< 100$\n* Cantităţile specificate în reţete sunt numere naturale $< 1 \\ 000$\n* Pentru determinarea corectă a timpului total se acordă $30\\%$ din punctajul pe test; pentru determinarea corectă a timpului total şi afişarea corectă a ingredientelor (ordonate lexicografic) se acordă integral punctajul pe test",
    "header": {
      "problem_id": 792,
      "problem_name": "Rețetă",
      "tags": "[Parsing, Strings]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "reteta.in",
      "output_filename": "reteta.out",
      "multiple_solutions": true,
      "original_source": "OJI 2009 X: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "reteta.in",
      "output": "reteta.out"
    },
    "consoleInteraction": false
  }
}