---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reteta.in` and write to `reteta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mama mea este profesoară de informatică, dar îi place foarte mult să gătească. Recent am descoperit caietul ei de reţete, care arată foarte neobişnuit. Fiecare reţetă este scrisă pe un singur rând pe care sunt precizate produsele folosite, cantităţile, precum şi ordinea în care se execută operaţiile. De exemplu:

`(unt 50 zahar 250 ou 4)5`

ceea ce înseamnă că se amestecă $50$ grame unt cu $250$ grame zahăr şi cu $4$ ouă timp de $5$ minute. Pentru fiecare produs mama foloseşte întotdeauna aceeaşi unitate de măsură, aşa că unităţile de măsură nu mai sunt precizate. Numele produsului este scris întotdeauna cu litere mici, iar produsele şi cantităţile sunt separate prin spaţii (unul sau mai multe). Produsele care se amestecă împreună sunt încadrate între paranteze rotunde; după paranteza rotundă închisă este specificat timpul de preparare.

Evident, mama are şi reţeţe mai complicate:

`(((zahar 100 ou 3)5 unt 100 nuca 200)4 (lapte 200 cacao 50 zahar 100) 3)20`

Să traducem această reţetă: se amestecă $100$ grame zahăr cu $3$ ouă timp de cinci minute; apoi se adaugă $100$ grame unt şi $200$ grame nucă, amestecând totul încă $4$ minute. Se amestecă $200$ ml lapte cu $50$ grame de cacao şi $100$ grame zahăr timp de $3$ minute, apoi se toarnă peste compoziţia precedentă şi se amestecă totul timp de $20$ minute.

Observaţi că înainte sau după parantezele rotunde pot să apară sau nu spaţii.

# Cerinţă

Dată fiind o reţetă să se determine timpul total de preparare, precum şi cantităţile necesare din fiecare produs.


# Date de intrare


Fişierul de intrare `reteta.in` conţine pe prima linie un şir de caractere care reprezintă o reţetă.

# Date de ieșire


Fişierul de ieşire `reteta.out` va conţine pe prima linie timpul total necesar pentru prepararea reţetei. Pe următoarele linii sunt scrise ingredientele în ordine lexicografică (ordinea din dicţionar), câte un ingredient pe o linie. Pentru fiecare ingredient este specificat numele urmat de un spaţiu apoi de cantitatea totală necesară.

# Restricții și precizări

* $0 <$ Lungimea unei reţete $≤ 1 \ 000$
* $1 ≤$ Numărul de ingrediente $≤ 100$
* Numele unui ingredient este scris cu maxim 20 litere mici ale alfabetului englez.
* Timpii de preparare sunt numere naturale $< 100$
* Cantităţile specificate în reţete sunt numere naturale $< 1 \ 000$
* Pentru determinarea corectă a timpului total se acordă $30\%$ din punctajul pe test; pentru determinarea corectă a timpului total şi afişarea corectă a ingredientelor (ordonate lexicografic) se acordă integral punctajul pe test

---

Example:
`reteta.in`
```
(((zahar 100 ou 3)5 unt 100 nuca 200)4 (lapte 200 cacao 50 zahar 100) 3)20
```

`reteta.out`
```
32
cacao 50
lapte 200
nuca 200
ou 3
unt 100
zahar 200
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>
#include <algorithm>
#include <cctype>

struct Recipe {
    std::map<std::string, int> ingredients;
    int time;
};

Recipe parseRecipe(std::string &s, int &pos) {
    Recipe recipe;
    recipe.time = 0;
    bool inGroup = false;
    while (pos < s.size()) {
        if (s[pos] == '(') {
            pos++;
            Recipe subRecipe = parseRecipe(s, pos);
            for (auto &ingredient : subRecipe.ingredients) {
                recipe.ingredients[ingredient.first] += ingredient.second;
            }
            recipe.time += subRecipe.time;
        } else if (s[pos] == ')') {
            pos++;
            std::string timeStr;
            while (pos < s.size() && isdigit(s[pos])) {
                timeStr += s[pos++];
            }
            recipe.time += std::stoi(timeStr);
            return recipe;
        } else if (std::isalpha(s[pos])) {
            std::string ingredient;
            while (pos < s.size() && std::isalpha(s[pos])) {
                ingredient += s[pos++];
            }
            while (pos < s.size() && std::isspace(s[pos])) {
                pos++;
            }
            std::string quantityStr;
            while (pos < s.size() && std::isdigit(s[pos])) {
                quantityStr += s[pos++];
            }
            int quantity = std::stoi(quantityStr);
            recipe.ingredients[ingredient] += quantity;
        } else {
            pos++;
        }
    }
    return recipe;
}

int main() {
    std::ifstream fin("reteta.in");
    std::ofstream fout("reteta.out");

    std::string recipeString;
    std::getline(fin, recipeString);

    int pos = 0;
    Recipe finalRecipe = parseRecipe(recipeString, pos);

    fout << finalRecipe.time << "\n";
    std::vector<std::pair<std::string, int>> sortedIngredients(finalRecipe.ingredients.begin(), finalRecipe.ingredients.end());
    std::sort(sortedIngredients.begin(), sortedIngredients.end());

    for (const auto &ingredient : sortedIngredients) {
        fout << ingredient.first << " " << ingredient.second << "\n";
    }

    return 0;
}
```

### Explanation:

1. **Structure and Parsing**:
   - We have a struct `Recipe` that holds the total cooking time and a map of ingredients with their quantities.
   - The `parseRecipe` function uses recursion to parse the recipe string. It properly handles nested parenthesis and accumulates the total cooking time and ingredient quantities.

2. **Reading Input**:
   - The recipe string is read from `reteta.in` file using standard file I/O operations and stored in `recipeString`.

3. **Parsing and Processing**:
   - We initialize a position counter `pos` to 0 and call `parseRecipe` starting from this position.
   - The `parseRecipe` function parses the string, handles nested structures, and calculates the total time and ingredient quantities.

4. **Output**:
   - The total time is written to `reteta.out`.
   - Ingredients are sorted lexicographically and written to the output file.

This solution should be efficient and handle the various constraints provided in the problem statement.
---------- user ----------


Program exited with code 139.
stdout:
```

```
stderr:
```
terminate called after throwing an instance of 'std::invalid_argument'
  what():  stoi

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue causing the program to exit with code 139 and the `std::invalid_argument` exception in `stoi` is likely due to parsing errors where an invalid string is passed to `stoi`, possibly because of mishandled whitespace or parsing logic. 

Let's improve the parsing logic to ensure we correctly handle all cases, including whitespace and ensuring proper integer conversion.

Here is the revised solution:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <map>
#include <algorithm>
#include <cctype>

struct Recipe {
    std::map<std::string, int> ingredients;
    int time;
};

void skipWhitespace(const std::string &s, int &pos) {
    while (pos < s.size() && std::isspace(s[pos])) {
        ++pos;
    }
}

Recipe parseRecipe(const std::string &s, int &pos) {
    Recipe recipe;
    recipe.time = 0;

    while (pos < s.size()) {
        skipWhitespace(s, pos);

        if (s[pos] == '(') {
            ++pos; // skip '('
            Recipe subRecipe = parseRecipe(s, pos);
            for (const auto &ingredient : subRecipe.ingredients) {
                recipe.ingredients[ingredient.first] += ingredient.second;
            }
            recipe.time += subRecipe.time;
        } else if (s[pos] == ')') {
            ++pos; // skip ')'
            skipWhitespace(s, pos);

            int time = 0;
            while (pos < s.size() && std::isdigit(s[pos])) {
                time = time * 10 + (s[pos] - '0');
                ++pos;
            }
            recipe.time += time;
            return recipe;
        } else if (std::isalpha(s[pos])) {
            std::string ingredient;
            while (pos < s.size() && std::isalpha(s[pos])) {
                ingredient += s[pos++];
            }
            skipWhitespace(s, pos);
            
            int quantity = 0;
            while (pos < s.size() && std::isdigit(s[pos])) {
                quantity = quantity * 10 + (s[pos] - '0');
                ++pos;
            }
            recipe.ingredients[ingredient] += quantity;
        } else {
            ++pos;
        }
    }
    return recipe;
}

int main() {
    std::ifstream fin("reteta.in");
    std::ofstream fout("reteta.out");

    if (!fin.is_open()) {
        std::cerr << "Failed to open input file\n";
        return 1;
    }

    std::string recipeString;
    std::getline(fin, recipeString);

    int pos = 0;
    Recipe finalRecipe = parseRecipe(recipeString, pos);

    fout << finalRecipe.time << "\n";
    std::vector<std::pair<std::string, int>> sortedIngredients(finalRecipe.ingredients.begin(), finalRecipe.ingredients.end());
    std::sort(sortedIngredients.begin(), sortedIngredients.end());

    for (const auto &ingredient : sortedIngredients) {
        fout << ingredient.first << " " << ingredient.second << "\n";
    }

    return 0;
}
```

### Key Fixes:

1. **Whitespace Handling**:
   - Added a `skipWhitespace` function to ensure we properly handle spaces between elements.

2. **Integer Parsing**:
   - Improved integer parsing logic to build the number manually, ensuring no invalid arguments are passed to `stoi`.

3. **Error Handling**:
   - Added a check to ensure the input file is properly opened.

By making these fixes, we ensure that the program correctly parses and processes the recipe string, handles nested structures, and outputs the correct results. This should resolve the previous issues and prevent the program from crashing.
