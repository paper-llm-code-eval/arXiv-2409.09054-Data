---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arhitect.in` and write to `arhitect.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[arhitect.jpg|align=right|width=20em]

Construcția unei noi clădiri a fost finalizată! Frank, celebrul arhitect a  făcut o poză cu fațada. Nu este chiar mulțumit de poză deoarece a observat o înclinație a pozei relativ la orizontală. Asta se poate repara printr-o rotație, iar Frank se întreabă dacă procesul de îndreptare nu ar putea fi automatizat.

Cu acest scop, imaginea este transformată într-o mulțime de segmente din plan, detectate automat cu algoritmi speciali, ca în imaginea din dreapta. Segmentele care se obțin sunt identificate prin cele două extremități, puncte având coordonate numere naturale, în sistemul *xOy*: ($x_1$, $y_1$), ($x_2$, $y_2$). Un segment este numit *aliniat* cu axele dacă este orizontal (paralel cu axa *Ox*, deci $y_1=y_2$) sau vertical (paralel cu axa *Oy*, deci $x_1=x_2$).
Prin rotația imaginii în ansamblu, o parte dintre segmente devin *aliniate* cu cele două axe.

# Cerință

Scrieți un program care pentru o mulțime de segmente determină numărul maxim de segmente care se pot *alinia*, prin rotirea cu un același unghi a tuturor segmentelor. Unghiul de rotație poate fi orice număr real.

# Date de intrare

Fişierul de intrare `arhitect.in` conţine pe prima linie numărul de segmente $N$ și pe următoarele $N$ linii câte patru numere întregi separate prin câte un spațiu $x_1$, $y_1$, $x_2$, $y_2$, în această ordine, cu semnificația din enunț, coordonatele ce definesc extremitățile segmentelor.

# Date de ieșire

Fișierul de ieșire `arhitect.out` conține pe prima linie numărul maxim de segmente determinat.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$ și $1 \leq x_1, y_1, x_2, y_2 \leq 1 \ 000 \ 000 \ 000$;
* Toate segmentele au lungime nenulă;
* Pentru $40$ de puncte, segmentele inițiale sunt paralele cu *Ox*, *Oy* sau cu bisectoarele axelor de coordonate.
* Pentru $60$ de puncte, fără resticții suplimentare.

---

Example:
`arhitect.in`
```
3
1 1 1 3
4 1 1 4
5 2 7 4
```

`arhitect.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider the concept of segment alignment through rotation. The task is to determine the maximum number of segments that can be aligned with either the x-axis or the y-axis by rotating the entire set of segments. 

Segements can be aligned in one of two ways:
1. Horizontally or vertically (aligned with the x or y axis)
2. At an angle of 45 or 135 degrees (aligned with the bisectors of the quadrants)

To determine the most segments that can be aligned by rotation, we need to:
1. Calculate the angle each segment makes with the positive x-axis.
2. Count how many segments fall into each category of alignment.
3. Choose the category with the highest count.

One efficient way to achieve this is by using trigonometric functions to calculate the angles, and then using these angles to determine possible alignments.

Here is the C++ code to implement this logic:

```cpp
#include <cmath>
#include <fstream>
#include <unordered_map>

using namespace std;

#define PI 3.14159265

int main() {
    ifstream in("arhitect.in");
    ofstream out("arhitect.out");

    int N;
    in >> N;

    unordered_map<int, int> angle_count;

    for (int i = 0; i < N; ++i) {
        int x1, y1, x2, y2;
        in >> x1 >> y1 >> x2 >> y2;

        double angle = atan2(y2 - y1, x2 - x1) * 180 / PI; // Angle in degrees
        int rounded_angle = round(angle);

        // Normalize angles to fall within [0, 180)
        if (rounded_angle < 0) {
            rounded_angle += 180;
        }

        angle_count[rounded_angle]++;
        angle_count[(rounded_angle + 90) % 180]++; // Also count the perpendicular line
    }

    int max_segments = 0;
    for (const auto& entry : angle_count) {
        if (entry.second > max_segments) {
            max_segments = entry.second;
        }
    }

    out << max_segments << endl;

    in.close();
    out.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read the input from `arhitect.in` file.
   - The first line contains the number of segments, `N`.
   - The next `N` lines contain the coordinates of the endpoints of each segment.

2. **Calculating Angles:**
   - Using `atan2` function, we calculate the angle each segment makes with the positive x-axis.
   - Convert this angle from radians to degrees.

3. **Normalizing Angles:**
   - We ensure that all angles are within the range [0, 180) degrees by normalizing the angles.
   - For each segment, we also consider its perpendicular counterpart by adding 90 degrees and normalizing.

4. **Counting Alignments:**
   - We use an unordered map to count the occurrences of each angle.
   - We also count the perpendicular angles to cover all possible alignments.

5. **Determining the Maximum:**
   - We iterate over the map to find the maximum count of aligned segments.

6. **Writing Output:**
   - The result is written to `arhitect.out` file, which contains the maximum number of segments that can be aligned.

This solution ensures that we efficiently compute the required results by leveraging trigonometry and hash maps for counting, providing optimal performance for large inputs.
