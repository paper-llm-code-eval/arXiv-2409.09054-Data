---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mircea este pasionat de programare. El a început să rezolve probleme din ce în ce mai grele. Astfel a ajuns la o problemă, care are ca date de intrare un tablou pătratic cu $n$ linii şi $n$ coloane, componente tabloului fiind toate numerele naturale distincte de la $1$ la $n^2$. Pentru a verifica programul pe care l-a scris îi trebuie un fişier care să conţină tabloul respectiv. După ce a creat acest fişier, fratele său, pus pe şotii îi umblă în fişier şi îi schimbă câteva numere consecutive, cu numărul $0$. Când se întoarce Mircea de la joacă constată cu stupoare că nu îi merge programul pentru testul respectiv. După câteva ore de depanare îşi dă seama că programul lui este corect şi că fişierul de intrare are probleme.

# Cerinţă
Scrieţi un program care să-l ajute pe Mircea, găsindu-i cel mai mic şi cel mai mare dintre numerele consecutive schimbate de fratele său.

# Date de intrare
În fişierul `numere.in` se dă pe prima linie $n$, iar pe următoarele $n$ linii elementele tabloului, câte $n$ elemente pe o linie, separate între ele prin câte un spaţiu, după modificările făcute de fratele lui Mircea.

# Date de ieşire
În fişierul `numere.out` se va scrie pe un singur rând cu un singur spaţiu între ele numerele cerute (primul fiind cel mai mic).

# Restricţii şi precizări
- $0 < n \leq 500$
- Fratele lui Mircea schimbă cel puţin un număr în fişier.
- Numerele schimbate de fratele lui Mircea sunt mai mici sau cel mult egale cu $60\ 000$.

---

Example:
`numere.in`
```
3
5 0 7
0 0 1
6 9 8
```

`numere.out`
```
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the problem and formulate an efficient solution:

1. **Input Parsing**:
   - Read the value of `n` from the `numere.in` file.
   - Read the `n x n` matrix from the same file.

2. **Identify the Integers Changed to Zero**:
   - Iterate through the matrix to identify the positions of all `0`s.

3. **Determine the Missing Values**:
   - Create an array to keep track of all numbers from `1` to `n^2`.
   - As we identify `0`s in the matrix, mark these numbers as present in the tracking array.
   - The missing numbers will correspond to the indices in this tracking array that are still unmarked.

4. **Find the Minimum and Maximum of Missing Numbers**:
   - Iterate through the tracking array to find the minimum and maximum missing numbers.

5. **Output the Result**:
   - Write the minimum and maximum missing numbers to `numere.out`.

Here's the C++ implementation of the solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("numere.in");
    std::ofstream outfile("numere.out");

    int n;
    infile >> n;

    std::vector<std::vector<int>> matrix(n, std::vector<int>(n));
    std::vector<bool> present(n * n + 1, false);

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> matrix[i][j];
            if (matrix[i][j] != 0) {
                present[matrix[i][j]] = true;
            }
        }
    }

    int min_missing = n * n, max_missing = 1;
    for (int num = 1; num <= n * n; ++num) {
        if (!present[num]) {
            min_missing = std::min(min_missing, num);
            max_missing = std::max(max_missing, num);
        }
    }

    outfile << min_missing << " " << max_missing;
    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
- **Input Parsing**:
  - We use `ifstream` to read the data from `numere.in`.
  - The matrix is stored in a 2D vector `matrix`.
  - `present` is a boolean vector to track numbers from `1` to `n^2` that are present in the matrix.

- **Identifying Missing Numbers**:
  - As we read the matrix, we mark the numbers present in the `present` vector.
  - After reading, we iterate through the `present` vector to find the smallest and largest numbers that are not marked.

- **Output the Result**:
  - We use `ofstream` to write the results to `numere.out`.

This approach is efficient with a time complexity of O(n^2), which is optimal for the given constraints (n up to 500).
