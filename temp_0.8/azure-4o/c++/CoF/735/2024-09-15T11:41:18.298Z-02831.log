---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mircea este pasionat de programare. El a început să rezolve probleme din ce în ce mai grele. Astfel a ajuns la o problemă, care are ca date de intrare un tablou pătratic cu $n$ linii şi $n$ coloane, componente tabloului fiind toate numerele naturale distincte de la $1$ la $n^2$. Pentru a verifica programul pe care l-a scris îi trebuie un fişier care să conţină tabloul respectiv. După ce a creat acest fişier, fratele său, pus pe şotii îi umblă în fişier şi îi schimbă câteva numere consecutive, cu numărul $0$. Când se întoarce Mircea de la joacă constată cu stupoare că nu îi merge programul pentru testul respectiv. După câteva ore de depanare îşi dă seama că programul lui este corect şi că fişierul de intrare are probleme.

# Cerinţă
Scrieţi un program care să-l ajute pe Mircea, găsindu-i cel mai mic şi cel mai mare dintre numerele consecutive schimbate de fratele său.

# Date de intrare
În fişierul `numere.in` se dă pe prima linie $n$, iar pe următoarele $n$ linii elementele tabloului, câte $n$ elemente pe o linie, separate între ele prin câte un spaţiu, după modificările făcute de fratele lui Mircea.

# Date de ieşire
În fişierul `numere.out` se va scrie pe un singur rând cu un singur spaţiu între ele numerele cerute (primul fiind cel mai mic).

# Restricţii şi precizări
- $0 < n \leq 500$
- Fratele lui Mircea schimbă cel puţin un număr în fişier.
- Numerele schimbate de fratele lui Mircea sunt mai mici sau cel mult egale cu $60\ 000$.

---

Example:
`numere.in`
```
3
5 0 7
0 0 1
6 9 8
```

`numere.out`
```
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the given problem efficiently in C++, let's break down the steps:

1. **Reading the Input:**
   - Use file I/O to read from `numere.in`.
   - Extract the size of the matrix `n`.
   - Read the `n x n` matrix elements.

2. **Identifying the Missing Numbers:**
   - Maintain a boolean array to mark the presence of numbers from `1` to `n^2`.
   - Iterate through the matrix and mark the present numbers.
   - Identify the missing numbers by checking the boolean array.

3. **Writing the Output:**
   - Write the smallest and largest missing numbers to `numere.out`.

The constraints and problem details suggest that we can optimize the solution to run in linear time, `O(n^2)`, since we only need to make two passes through the matrix and one pass through the boolean array.

Here is the implementation of the solution in C++:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("numere.in");
    std::ofstream outfile("numere.out");

    int n;
    infile >> n;

    std::vector<int> matrix(n * n);
    std::vector<bool> found(n * n + 1, false);

    for (int i = 0; i < n * n; ++i) {
        infile >> matrix[i];
        if (matrix[i] != 0) {
            found[matrix[i]] = true;
        }
    }

    int smallest = 60001, largest = 0;
    for (int i = 1; i <= n * n; ++i) {
        if (!found[i]) {
            smallest = std::min(smallest, i);
            largest = std::max(largest, i);
        }
    }

    outfile << smallest << " " << largest << "\n";

    return 0;
}
```

### Explanation:
1. **File Reading:**
   - We use `std::ifstream` to read from `numere.in`.
   - The first value read is `n`, the size of the matrix.
   - We read the entire matrix into a linear vector `matrix`.

2. **Marking Present Numbers:**
   - We use a boolean vector `found` of size `n*n + 1` to mark which numbers are present.
   - As we read each matrix element, if it is not `0`, we mark it as present in `found`.

3. **Identifying Missing Numbers:**
   - We iterate through the boolean vector `found` to find the smallest and largest missing numbers.
   - Initialize `smallest` to a value larger than any possible matrix element (`60001`) and `largest` to `0`.

4. **File Writing:**
   - We use `std::ofstream` to write the smallest and largest missing numbers to `numere.out`.

This solution reads the input, processes the matrix to find the missing numbers, and writes the required output efficiently. It ensures the constraints and edge cases are handled appropriately.
