---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mircea este pasionat de programare. El a început să rezolve probleme din ce în ce mai grele. Astfel a ajuns la o problemă, care are ca date de intrare un tablou pătratic cu $n$ linii şi $n$ coloane, componente tabloului fiind toate numerele naturale distincte de la $1$ la $n^2$. Pentru a verifica programul pe care l-a scris îi trebuie un fişier care să conţină tabloul respectiv. După ce a creat acest fişier, fratele său, pus pe şotii îi umblă în fişier şi îi schimbă câteva numere consecutive, cu numărul $0$. Când se întoarce Mircea de la joacă constată cu stupoare că nu îi merge programul pentru testul respectiv. După câteva ore de depanare îşi dă seama că programul lui este corect şi că fişierul de intrare are probleme.

# Cerinţă
Scrieţi un program care să-l ajute pe Mircea, găsindu-i cel mai mic şi cel mai mare dintre numerele consecutive schimbate de fratele său.

# Date de intrare
În fişierul `numere.in` se dă pe prima linie $n$, iar pe următoarele $n$ linii elementele tabloului, câte $n$ elemente pe o linie, separate între ele prin câte un spaţiu, după modificările făcute de fratele lui Mircea.

# Date de ieşire
În fişierul `numere.out` se va scrie pe un singur rând cu un singur spaţiu între ele numerele cerute (primul fiind cel mai mic).

# Restricţii şi precizări
- $0 < n \leq 500$
- Fratele lui Mircea schimbă cel puţin un număr în fişier.
- Numerele schimbate de fratele lui Mircea sunt mai mici sau cel mult egale cu $60\ 000$.

---

Example:
`numere.in`
```
3
5 0 7
0 0 1
6 9 8
```

`numere.out`
```
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently in C++, we'll follow these steps:

1. **Read the Input**: Read the input from the file `numere.in`.
2. **Identify the Missing Numbers**: Scan through the matrix to identify which numbers have been replaced by `0`.
3. **Determine Smallest and Largest Missing Numbers**: Track the smallest and largest numbers that are missing.
4. **Write the Output**: Write the results to the file `numere.out`.

Given the constraints (with `n` being up to 500), we can store the presence of numbers in a boolean array efficiently. Here's a step-by-step implementation:

### C++ Code Implementation

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inputFile("numere.in");
    std::ofstream outputFile("numere.out");

    int n;
    inputFile >> n;

    std::vector<int> matrix(n * n);
    std::vector<bool> found(n * n + 1, false);

    for (int i = 0; i < n * n; ++i) {
        inputFile >> matrix[i];
        if (matrix[i] != 0) {
            found[matrix[i]] = true;
        }
    }

    int smallestMissing = 0, largestMissing = 0;
    for (int i = 1; i <= n * n; ++i) {
        if (!found[i]) {
            if (smallestMissing == 0) {
                smallestMissing = i;
            }
            largestMissing = i;
        }
    }

    outputFile << smallestMissing << " " << largestMissing << std::endl;

    inputFile.close();
    outputFile.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: We use `ifstream` to read the input from `numere.in`.
2. **Tracking Numbers**: We initialize a vector `matrix` to store the matrix elements and a boolean vector `found` to keep track of which numbers are present in the matrix.
3. **Matrix Traversal**: We read the matrix elements into the `matrix` vector and mark the presence of non-zero numbers in the `found` vector.
4. **Finding Missing Numbers**: We iterate through the `found` vector to find the smallest and largest missing numbers.
5. **Writing Output**: We use `ofstream` to write the results to `numere.out`.

This solution is efficient and works within the given constraints. The time complexity is O(n^2) for reading the matrix and another O(n^2) for identifying the missing numbers, making it suitable for the input size constraint (with n up to 500).
