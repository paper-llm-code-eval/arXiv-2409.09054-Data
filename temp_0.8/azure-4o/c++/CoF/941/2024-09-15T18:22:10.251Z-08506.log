---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ceas.in` and write to `ceas.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un atelier de fabricat ceasuri cu cuc are nevoie de plăcuțe cu numerele pentru orele pe care trebuie să le așeze pe discul ceasurilor. Aceste numere sunt realizate la o imprimantă.

Din cauza unei erori imprimanta tipărește plăcuțe cu numere naturale, unele mai mari ca $12$. Atelierul poate utiliza doar plăcuțe cu numere cuprinse ı̂ntre $0$ și $12$. Pentru a utiliza aceste numere este nevoie ca ele să fie tăiate ı̂ncepând din partea dreaptă ı̂n grupuri de maximum două cifre, fiecare grup reprezentând valoarea de pe o plăcuță, care să fie o cifră la $0$ la $9$ sau unul dintre numerele $10$, $11$, $12$. Dacă pe o plăcuță se găsește un număr mai mare ca $12$ atunci plăcuța trebuie tăiată, astfel ı̂ncât ı̂n urma tăierii să se obțină numere de cel mult $2$ cifre. Dacă ı̂n numărul de pe o plăcuță cifra zecilor este $0$, atunci la prima tăiere se ia doar cifra unităților, altfel dacă numărul format cu cifra zecilor și unităților este mai mare ca $12$, atunci se taie prima dată cifra unităților, iar dacă numărul format cu cifra zecilor și unităților este $10$, $11$ sau $12$ se taie prima dată numărul format din ultimele două cifre, apoi procedeul se repetă până la tăierea completă a plăcuței. Imprimanta a realizat N plăcuțe. De exemplu dacă plăcuța este $12030$, după tăiere se obțin $0$, $3$, $0$, $12$.

# Cerință
1. Determinați numărul total de apariții ale cifrei $X$ pe plăcuțe ı̂nainte de tăiere.
2. Determinați numărul de tăieturi realizate conform enunțului.

# Date de intrare

Pe prima linie a fișierului `ceas.in` se află valorile $C$, $X$ și $N$ separate prin câte un singur spațiu. Pe linia a doua se află $N$ numere naturale separate prin câte un singur spațiu, având semnificația din enunț. Pentru $C = 1$ se rezolvă doar cerința $1$, iar pentru $C = 2$ se rezolvă doar cerința $2$.

# Date de ieșire

Fișierul `ceas.out` conține pe prima linie un singur număr natural care reprezintă valoarea calculată conform cerinței.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $0 \leq X \leq 9$;
* Valorile din șir sunt numere naturale $\leq 50 \ 000$;
* Pentru testele în care avem $C = 2$ valoarea $X$ este prezentă în fișierul de intrare chiar dacă nu este folosită în rezolvare.
* Pentru teste în valoare de $39$ de puncte avem $C = 1$
* Pentru teste în valoare de $61$ de puncte avem $C = 2$

---

Example:
`ceas.in`
```
1 0 6
1010 40 201 5123 31 6
```

`ceas.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution for this challenge in C++:

```cpp
#include <iostream>
#include <fstream>
#include <string>

using namespace std;

void solve(int C, int X, int N, int* numbers) {
    int countX = 0;
    int cuts = 0;

    for (int i = 0; i < N; ++i) {
        string numStr = to_string(numbers[i]);

        // Part 1: Count occurrences of X
        if (C == 1) {
            for (char c : numStr) {
                if (c - '0' == X) {
                    ++countX;
                }
            }
        }

        // Part 2: Count cuts
        if (C == 2) {
            int length = numStr.size();
            for (int j = length - 1; j >= 0; --j) {
                if (j == 0) break;
                int val = stoi(numStr.substr(j - 1, 2));
                if (val > 12) {
                    ++cuts;
                } else if (val >= 10 && val <= 12) {
                    ++cuts;
                    --j; // Skip the next digit as it was processed
                }
            }
        }
    }

    ofstream fout("ceas.out");
    if (C == 1) {
        fout << countX << endl;
    } else if (C == 2) {
        fout << cuts << endl;
    }
    fout.close();
}

int main() {
    ifstream fin("ceas.in");
    int C, X, N;
    fin >> C >> X >> N;

    int* numbers = new int[N];
    for (int i = 0; i < N; ++i) {
        fin >> numbers[i];
    }
    fin.close();

    solve(C, X, N, numbers);

    delete[] numbers;
    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - Read `C`, `X`, and `N` from the input file.
   - Read the `N` numbers into an array.

2. **Processing:**
   - If `C == 1`, count occurrences of the digit `X` in all numbers.
   - If `C == 2`, count the number of cuts needed to split the numbers into valid clock numbers (0-12).

3. **Output:**
   - Write the result to `ceas.out`.

### Key Points:
- For counting occurrences, we convert each number to a string and check each character.
- For counting cuts, we check numbers from right to left and determine how many cuts are needed according to the given rules.

This solution adheres to the challenge requirements and performs efficiently for the given constraints.
