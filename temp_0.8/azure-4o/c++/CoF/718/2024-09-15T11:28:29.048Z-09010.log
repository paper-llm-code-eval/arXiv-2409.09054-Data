---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to validate multiple sequences of coded parentheses to see if each sequence is correctly constructed. The solution involves using a stack data structure to keep track of the opening parentheses and ensure that they match the corresponding closing parentheses.

Here's the detailed C++ implementation for the problem:

```cpp
#include <fstream>
#include <stack>
#include <vector>
#include <string>

bool isValidSequence(const std::vector<int>& sequence) {
    std::stack<int> stk;
    for (int code : sequence) {
        if (code == 0 || code == 2) { // Opening brackets '0' and '2'
            stk.push(code);
        } else {
            if (stk.empty()) return false;
            int top = stk.top();
            if ((code == 1 && top == 0) || (code == 3 && top == 2)) { // Matching closing brackets '1' -> '0' and '3' -> '2'
                stk.pop();
            } else {
                return false;
            }
        }
    }
    return stk.empty();
}

int main() {
    std::ifstream infile("paranteze.in");
    std::ofstream outfile("paranteze.out");

    int n;
    infile >> n;
    for (int i = 0; i < n; ++i) {
        int L;
        infile >> L;
        std::vector<int> sequence(L);
        for (int j = 0; j < L; ++j) {
            infile >> sequence[j];
        }
        if (isValidSequence(sequence)) {
            outfile << "Da\n";
        } else {
            outfile << "Nu\n";
        }
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation

1. **Reading Input:**
    - The input is read from `paranteze.in` using `std::ifstream`.
    - First, we read `n`, the number of sequences.
    - For each sequence, we read `L`, the length of the sequence, followed by the sequence itself.

2. **Validating Sequence:**
    - We use a stack to keep track of opening parentheses.
    - For each character in the sequence:
      - If it's an opening parenthesis (`0` or `2`), push it onto the stack.
      - If it's a closing parenthesis (`1` or `3`), check if the stack is empty. If it is, the sequence is invalid.
      - If the stack is not empty, check the top of the stack to see if it matches the current closing parenthesis (`1` should match `0`, and `3` should match `2`). If it matches, pop the stack; otherwise, the sequence is invalid.
    - If the stack is empty at the end of the sequence, it means all opening parentheses have matching closing parentheses.

3. **Outputting the Result:**
    - For each sequence, based on the result of the validation function, write `Da` or `Nu` to `paranteze.out`.

This solution efficiently processes each sequence and determines its validity using a stack. The overall time complexity is linear with respect to the length of each sequence, making it suitable for the given constraints.
