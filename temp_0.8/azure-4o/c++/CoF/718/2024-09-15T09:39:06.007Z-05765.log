---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's an efficient solution in C++ to solve the given challenge. This solution reads the input from `paranteze.in`, checks each sequence of parentheses for correctness, and writes the results to `paranteze.out`.

```cpp
#include <iostream>
#include <fstream>
#include <stack>
#include <vector>
using namespace std;

bool isValidSequence(const vector<int>& seq) {
    stack<int> s;
    for (int c : seq) {
        if (c == 0 || c == 2) {
            s.push(c);
        } else {
            if (s.empty()) return false;
            int top = s.top();
            if ((c == 1 && top == 0) || (c == 3 && top == 2)) {
                s.pop();
            } else {
                return false;
            }
        }
    }
    return s.empty();
}

int main() {
    ifstream fin("paranteze.in");
    ofstream fout("paranteze.out");
    
    int n;
    fin >> n;
    for (int i = 0; i < n; ++i) {
        int L;
        fin >> L;
        vector<int> seq(L);
        for (int j = 0; j < L; ++j) {
            fin >> seq[j];
        }
        if (isValidSequence(seq)) {
            fout << "Da\n";
        } else {
            fout << "Nu\n";
        }
    }
    
    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The program reads the input from `paranteze.in` using an ifstream object.
   - It first reads the number of sequences, `n`.

2. **Processing Each Sequence:**
   - For each sequence, it reads the length `L` and then the sequence itself into a vector.

3. **Checking Validity:**
   - The function `isValidSequence` uses a stack to ensure that each opening parenthesis has a corresponding and correctly ordered closing parenthesis.
   - It iterates through the sequence:
     - Pushes opening parentheses (`0` or `2`) onto the stack.
     - Checks for matching closing parentheses (`1` or `3`).
     - If a mismatch is found or the stack is empty when a closing parenthesis is expected, the sequence is invalid.
     - At the end, if the stack is not empty, it means there are unmatched opening parentheses, so the sequence is invalid.

4. **Writing Output:**
   - The program writes the results to `paranteze.out` using an ofstream object.

This solution ensures efficient processing of each sequence and handles the input/output requirements as specified.
