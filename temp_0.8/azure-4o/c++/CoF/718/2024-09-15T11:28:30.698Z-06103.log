---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <stack>
#include <vector>

bool isCorrectlyConstructed(const std::vector<int>& sequence) {
    // Stack to hold the opening brackets
    std::stack<int> stack;

    // Traverse through the sequence
    for (int code : sequence) {
        // Push if it's an opening bracket
        if (code == 0 || code == 2) {
            stack.push(code);
        }
        // Check if the stack is not empty and the top matches the current closing bracket
        else {
            if (stack.empty()) return false;
            int top = stack.top();
            stack.pop();
            if ((code == 1 && top != 0) || (code == 3 && top != 2)) {
                return false;
            }
        }
    }

    // If stack is empty after processing all brackets, it's correctly constructed
    return stack.empty();
}

int main() {
    std::ifstream fin("paranteze.in");
    std::ofstream fout("paranteze.out");

    int n;
    fin >> n;

    while (n--) {
        int L;
        fin >> L;

        std::vector<int> sequence(L);
        for (int i = 0; i < L; ++i) {
            fin >> sequence[i];
        }

        if (isCorrectlyConstructed(sequence)) {
            fout << "Da\n";
        } else {
            fout << "Nu\n";
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation
1. **Input/Output Handling:**
   - Use `std::ifstream` to read from "paranteze.in".
   - Use `std::ofstream` to write to "paranteze.out".
   
2. **Reading Input:**
   - Read the number of test cases `n`.
   - For each test case, read the length `L` and the sequence of paranteze codes.

3. **Checking Correct Construction:**
   - Use a stack to keep track of opening brackets.
   - For each code in the sequence:
     - If it is an opening bracket (`0` or `2`), push it onto the stack.
     - If it is a closing bracket (`1` or `3`), check if the stack is not empty and the top of the stack matches the corresponding opening bracket. If not, the sequence is incorrect.
   - After processing all brackets, check if the stack is empty. If it is, the sequence is correctly constructed.

4. **Output the Results:**
   - Write "Da" if the sequence is correctly constructed, otherwise write "Nu".

This solution efficiently handles the problem using a stack-based approach, which ensures linear time complexity relative to the length of the sequence. The use of stack operations guarantees that each bracket is processed in constant time.
