---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the complete solution in C++:

```cpp
#include <fstream>
#include <cmath>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

bool isPrime(int number) {
    if (number <= 1) return false;
    if (number <= 3) return true;
    if (number % 2 == 0 || number % 3 == 0) return false;
    for (int i = 5; i * i <= number; i += 6) {
        if (number % i == 0 || number % (i + 2) == 0) return false;
    }
    return true;
}

void factorize(int number, map<int, int>& factors) {
    while (number % 2 == 0) {
        factors[2]++;
        number /= 2;
    }
    for (int i = 3; i * i <= number; i += 2) {
        while (number % i == 0) {
            factors[i]++;
            number /= i;
        }
    }
    if (number > 2) factors[number]++;
}

int main() {
    ifstream infile("expresie.in");
    ofstream outfile("expresie.out");

    int m, n;
    infile >> m >> n;

    vector<int> numbers(n);
    for (int i = 0; i < n; i++) {
        infile >> numbers[i];
    }

    map<int, int> total_factors;
    for (int num : numbers) {
        factorize(num, total_factors);
    }

    bool isNatural = true;
    for (auto& factor : total_factors) {
        if (factor.second % m != 0) {
            isNatural = false;
            break;
        }
    }

    if (isNatural) {
        outfile << "1\n";
        for (auto& factor : total_factors) {
            outfile << factor.first << " " << factor.second / m << "\n";
        }
    } else {
        outfile << "0\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

## Explanation

- **Reading Input:** The program reads the input from the file `expresie.in`. It reads `m`, `n` and the sequence of numbers.
- **Prime Factorization:** For each number in the sequence, it calculates its prime factors and counts their occurrences.
- **Checking the Condition:** It checks if each prime's total occurrence in the combined product is divisible by `m`. If any prime factor does not satisfy this, the program outputs `0`.
- **Output:** If the condition is satisfied, it outputs `1` followed by the prime factors of the result, each divided by `m`.

This solution is efficient given the constraints and correctly implements the logic required by the challenge.
