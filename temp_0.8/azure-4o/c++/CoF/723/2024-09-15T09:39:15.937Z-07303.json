{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/723/2024-09-15T09:39:15.937Z-07303.log",
  "attemptStart": 1726393155.937,
  "attemptEnd": 1726393178.368,
  "attemptDuration": 22.430999994277954,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <cmath>\n#include <unordered_map>\n#include <algorithm>\n\nstd::unordered_map<int, int> primeFactorization(int num) {\n    std::unordered_map<int, int> prime_factors;\n    while (num % 2 == 0) {\n        prime_factors[2]++;\n        num /= 2;\n    }\n    for (int i = 3; i <= sqrt(num); i += 2) {\n        while (num % i == 0) {\n            prime_factors[i]++;\n            num /= i;\n        }\n    }\n    if (num > 2) {\n        prime_factors[num]++;\n    }\n    return prime_factors;\n}\n\nint main() {\n    std::ifstream infile(\"expresie.in\");\n    std::ofstream outfile(\"expresie.out\");\n\n    int m, n;\n    infile >> m >> n;\n    \n    std::vector<int> numbers(n);\n    for (int i = 0; i < n; ++i) {\n        infile >> numbers[i];\n    }\n    \n    double log_product = 0.0;\n    for (int num : numbers) {\n        log_product += std::log(num);\n    }\n\n    double root_value = std::exp(log_product / m);\n    int rounded_root = std::round(root_value);\n\n    bool is_natural = std::pow(rounded_root, m) == std::round(std::exp(log_product));\n\n    if (!is_natural) {\n        outfile << 0 << std::endl;\n    } else {\n        std::unordered_map<int, int> total_factors;\n        for (int num : numbers) {\n            auto factors = primeFactorization(num);\n            for (const auto& factor : factors) {\n                total_factors[factor.first] += factor.second;\n            }\n        }\n\n        for (auto& factor : total_factors) {\n            if (factor.second % m != 0) {\n                outfile << 0 << std::endl;\n                return 0;\n            }\n            factor.second /= m;\n        }\n\n        outfile << 1 << std::endl;\n        std::vector<std::pair<int, int>> sorted_factors(total_factors.begin(), total_factors.end());\n        std::sort(sorted_factors.begin(), sorted_factors.end());\n        for (const auto& factor : sorted_factors) {\n            outfile << factor.first << \" \" << factor.second << std::endl;\n        }\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1511,
  "metadata": {
    "id": 723,
    "examples": [
      {
        "in": "2\n4\n32 81 100 19",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2\n4\n32 81 100 18",
        "out": "1\n2 4\n3 3\n5 1",
        "explainer": ""
      }
    ],
    "body": "Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \\dots, x_n$ și un număr natural $m$.\n\n# Cerință\nSă se verifice dacă valoarea expresiei $\\sqrt[m]{x_1 x_2 x_3 \\dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.\n\n# Date de intrare\nÎn fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\\dots$, $x_n$ separate între ele prin câte un spațiu.\n\n# Date de ieșire\nÎn fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. \nDacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma \"$p\\ e$\" ($p$ este factor prim care apare în descompunere la puterea $e \\geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).\n\n# Restricții\n- $n$ este un număr natural nenul mai mic strict decât $5\\ 000$.\n- $x_i$ este un număr natural nenul mai mic strict decât $30\\ 000$, $i \\in \\{1, 2, \\dots, n\\}$.\n- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**",
    "header": {
      "problem_id": 723,
      "problem_name": "expresie",
      "tags": "[Divisibility]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.04,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "expresie.in",
      "output_filename": "expresie.out",
      "multiple_solutions": false,
      "original_source": "OJI 2004 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "expresie.in",
      "output": "expresie.out"
    },
    "consoleInteraction": false
  }
}