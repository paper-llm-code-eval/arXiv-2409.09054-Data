---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's tackle the problem step by step:

1. **Reading Input**: Since `cin` and `cout` are not allowed, I'll use file streams to read from `expresie.in` and write to `expresie.out`.
2. **Compute the Product**: Calculate the product of all numbers `x_i`.
3. **Check if `m`-th Root is Natural**: Calculate the `m`-th root of the product and check if it is an integer.
4. **Prime Factorization**: If the `m`-th root is a natural number, perform prime factorization.
5. **Output the Result**: Write the result to `expresie.out` as specified.

Given these steps, here is the solution in a C++ code block:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>

bool isPerfectPower(unsigned long long value, int m, unsigned long long &root) {
    root = pow(value, 1.0 / m);
    unsigned long long power = 1;
    for (int i = 0; i < m; ++i) {
        power *= root;
    }
    return power == value;
}

void primeFactorization(unsigned long long num, std::map<unsigned long long, int> &factors) {
    for (unsigned long long i = 2; i * i <= num; ++i) {
        while (num % i == 0) {
            factors[i]++;
            num /= i;
        }
    }
    if (num > 1) {
        factors[num]++;
    }
}

int main() {
    std::ifstream fin("expresie.in");
    std::ofstream fout("expresie.out");

    int m, n;
    fin >> m >> n;

    unsigned long long product = 1;
    for (int i = 0; i < n; ++i) {
        unsigned long long x;
        fin >> x;
        product *= x;
    }

    unsigned long long root;
    if (!isPerfectPower(product, m, root)) {
        fout << 0 << std::endl;
    } else {
        fout << 1 << std::endl;
        std::map<unsigned long long, int> factors;
        primeFactorization(root, factors);
        for (const auto &factor : factors) {
            fout << factor.first << " " << factor.second << std::endl;
        }
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:

- **Reading Input**: Using `std::ifstream` to open and read the contents of `expresie.in`.
- **Product Calculation**: Loop through the numbers and compute their product.
- **Perfect Power Check**: The function `isPerfectPower` checks if the product is a perfect `m`-th power and computes the corresponding root if true.
- **Prime Factorization**: If the root is a natural number, compute its prime factors.
- **Output**: Writing the results to `expresie.out`.

### Example Verification:
For the provided example:
```
2
4
32 81 100 19
```
The product of these numbers is `32 * 81 * 100 * 19 = 4915200`. The square root of `4915200` is not an integer, so the output will be `0`. This matches the expected output.

This code is optimized for fast execution while handling the required constraints efficiently.
