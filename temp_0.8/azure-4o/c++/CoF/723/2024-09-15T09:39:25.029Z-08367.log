---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a step-by-step breakdown of the solution:

1. **Read Input**: Read values of `m`, `n`, and the sequence of numbers from `expresie.in`.
2. **Compute the Product**: Calculate the product of all numbers in the sequence.
3. **Check if m-th Root is Integer**: Compute the m-th root of the product and check if it is an integer.
4. **Prime Factorization**: If the m-th root is an integer, perform prime factorization on this integer.
5. **Write Output**: Write the results to `expresie.out`.

Here's the complete C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <unordered_map>
#include <vector>
#include <algorithm>

bool isInteger(double value) {
    return std::floor(value) == value;
}

std::unordered_map<int, int> primeFactors(int number) {
    std::unordered_map<int, int> factors;
    for (int i = 2; i <= sqrt(number); ++i) {
        while (number % i == 0) {
            factors[i]++;
            number /= i;
        }
    }
    if (number > 1) {
        factors[number]++;
    }
    return factors;
}

int main() {
    std::ifstream infile("expresie.in");
    std::ofstream outfile("expresie.out");

    int m, n;
    infile >> m >> n;

    long long product = 1;
    int num;
    for (int i = 0; i < n; ++i) {
        infile >> num;
        product *= num;
    }

    double root = pow(product, 1.0 / m);
    if (!isInteger(root)) {
        outfile << "0\n";
    } else {
        int rootInt = static_cast<int>(root);
        if (pow(rootInt, m) != product) {
            outfile << "0\n";
        } else {
            outfile << "1\n";
            std::unordered_map<int, int> factors = primeFactors(rootInt);
            std::vector<std::pair<int, int>> factorList(factors.begin(), factors.end());
            std::sort(factorList.begin(), factorList.end());

            for (const auto& pair : factorList) {
                outfile << pair.first << " " << pair.second << "\n";
            }
        }
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Reading Input**: We use `std::ifstream` to read the input values directly from the file.
2. **Product Calculation**: We compute the product of all numbers in the sequence using a loop.
3. **Checking Integer Root**: We calculate the m-th root of the product and use the `isInteger` function to check if the root is an integer.
4. **Prime Factorization**: If the value is a valid integer root, we perform prime factorization using a simple trial division method.
5. **Output Results**: We write the results in the required format to `expresie.out`.

### Note:
- We handle large products efficiently by working directly on `long long` integers where necessary.
- We validate the root computation to ensure it matches the original product raised to the power of `m`.
- The code ensures that the output is formatted correctly as specified in the problem statement.
