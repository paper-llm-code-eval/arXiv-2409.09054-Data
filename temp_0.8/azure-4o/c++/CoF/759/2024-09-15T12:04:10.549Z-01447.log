---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cartele.in` and write to `cartele.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.
\
Un angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.
~[0.png|align=center|width=45em]

# Cerinţă
Scrieţi un program care determină care dintre cartele permite accesul în sediul firmei.

# Date de intrare
Fişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.

# Date de ieşire
În fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.

# Restricţii şi precizări
- $1 < N, C \leq 50$

---

Example:
`cartele.in`
```
3 2
0 1 0
0 0 1
1 0 0
1 0 0
0 0 1
0 1 0
0 0 1
0 0 1
0 1 0
```

`cartele.out`
```
1
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to compare each card with the template in all possible orientations. Since the number of rotations and flips is limited (4 rotations and 2 flips), we can generate all possible transformations of the template once and compare each card against those precomputed transformations. 

Here is a step-by-step breakdown:

1. **Read Input**: Read the input data from the file `cartele.in`.
2. **Generate Template Transformations**:
    - Original template.
    - 90 degrees rotated template.
    - 180 degrees rotated template.
    - 270 degrees rotated template.
    - Flipped original template.
    - Flipped 90 degrees rotated template.
    - Flipped 180 degrees rotated template.
    - Flipped 270 degrees rotated template.
3. **Compare Each Card**: For each card, compare all possible transformations with the template transformations.
4. **Output Result**: Write results to `cartele.out`.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

const int MAX_N = 50;

void rotate90(vector<vector<int>> &mat, int N) {
    vector<vector<int>> tmp(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            tmp[j][N-1-i] = mat[i][j];
    mat = tmp;
}

void flip(vector<vector<int>> &mat, int N) {
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N / 2; ++j)
            swap(mat[i][j], mat[i][N-1-j]);
}

bool matches(const vector<vector<int>> &a, const vector<vector<int>> &b, int N) {
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            if (a[i][j] != b[i][j])
                return false;
    return true;
}

int main() {
    ifstream infile("cartele.in");
    ofstream outfile("cartele.out");

    int N, C;
    infile >> N >> C;
    vector<vector<int>> template_mat(N, vector<int>(N));

    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            infile >> template_mat[i][j];

    vector<vector<vector<int>>> template_transformations;
    vector<vector<int>> current = template_mat;

    for (int i = 0; i < 4; ++i) {
        template_transformations.push_back(current);
        rotate90(current, N);
    }
    flip(current, N);
    for (int i = 0; i < 4; ++i) {
        template_transformations.push_back(current);
        rotate90(current, N);
    }

    for (int k = 0; k < C; ++k) {
        vector<vector<int>> card(N, vector<int>(N));
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < N; ++j)
                infile >> card[i][j];

        bool valid = false;
        for (const auto &transformation : template_transformations) {
            if (matches(card, transformation, N)) {
                valid = true;
                break;
            }
        }
        outfile << (valid ? 1 : 0) << '\n';
    }

    infile.close();
    outfile.close();
    return 0;
}
```

Explanation:
- The `rotate90` function rotates a matrix by 90 degrees.
- The `flip` function flips a matrix horizontally.
- The `matches` function checks if two matrices are identical.
- We generate all 8 possible transformations of the template matrix.
- For each card, we check if it matches any of the transformations.
- We output `1` if a card matches any transformation, otherwise `0`.

The program reads from `cartele.in`, processes the data, and writes the results to `cartele.out` efficiently. The constraints ensure this approach will run within acceptable time limits.
