---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cartele.in` and write to `cartele.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.
\
Un angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.
~[0.png|align=center|width=45em]

# Cerinţă
Scrieţi un program care determină care dintre cartele permite accesul în sediul firmei.

# Date de intrare
Fişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.

# Date de ieşire
În fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.

# Restricţii şi precizări
- $1 < N, C \leq 50$

---

Example:
`cartele.in`
```
3 2
0 1 0
0 0 1
1 0 0
1 0 0
0 0 1
0 1 0
0 0 1
0 0 1
0 1 0
```

`cartele.out`
```
1
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:The challenge requires verifying whether each card matches the template when the cards can be placed in different orientations. To achieve this efficiently, we can carry out these steps:

1. **Reading Input Efficiently**: Use file streams to handle input. This avoids the slower `cin` and `cout`.

2. **Transformations**: Since a card can be oriented in multiple ways:
    - **Original orientation**.
    - **90 degrees rotation**.
    - **180 degrees rotation**.
    - **270 degrees rotation**.
    - **Horizontal flip**.
    - **Vertical flip**.
    - **90 degrees rotation of the flipped card**.
    - **270 degrees rotation of the flipped card**.

3. **Match Checking**: For each card, check if any of its transformations match the template.

4. **Output**: Write the results to `cartele.out`.

Here's the complete C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

typedef vector<vector<int>> Matrix;

Matrix rotate90(const Matrix& mat) {
    int N = mat.size();
    Matrix rotated(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            rotated[j][N - 1 - i] = mat[i][j];
    return rotated;
}

Matrix flipHorizontal(const Matrix& mat) {
    int N = mat.size();
    Matrix flipped = mat;
    for (int i = 0; i < N / 2; ++i)
        swap(flipped[i], flipped[N - 1 - i]);
    return flipped;
}

Matrix flipVertical(const Matrix& mat) {
    int N = mat.size();
    Matrix flipped = mat;
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N / 2; ++j)
            swap(flipped[i][j], flipped[i][N - 1 - j]);
    return flipped;
}

bool matches(const Matrix& a, const Matrix& b) {
    int N = a.size();
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            if (a[i][j] != b[i][j])
                return false;
    return true;
}

bool checkCard(const Matrix& templateMatrix, const Matrix& card) {
    Matrix current = card;
    for (int i = 0; i < 4; ++i) {
        if (matches(templateMatrix, current))
            return true;
        current = rotate90(current);
    }
    current = flipHorizontal(card);
    for (int i = 0; i < 4; ++i) {
        if (matches(templateMatrix, current))
            return true;
        current = rotate90(current);
    }
    current = flipVertical(card);
    for (int i = 0; i < 4; ++i) {
        if (matches(templateMatrix, current))
            return true;
        current = rotate90(current);
    }
    return false;
}

int main() {
    ifstream fin("cartele.in");
    ofstream fout("cartele.out");

    int N, C;
    fin >> N >> C;

    Matrix templateMatrix(N, vector<int>(N));
    for (int i = 0; i < N; ++i)
        for (int j = 0; j < N; ++j)
            fin >> templateMatrix[i][j];

    for (int c = 0; c < C; ++c) {
        Matrix card(N, vector<int>(N));
        for (int i = 0; i < N; ++i)
            for (int j = 0; j < N; ++j)
                fin >> card[i][j];
        
        if (checkCard(templateMatrix, card))
            fout << 1 << endl;
        else
            fout << 0 << endl;
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:

1. **Reading Inputs**: The input is read from `cartele.in` using file streams.
2. **Matrix Transformations**: Functions `rotate90`, `flipHorizontal`, and `flipVertical` handle the necessary transformations.
3. **Checking Matches**: The `checkCard` function applies these transformations and checks against the template.
4. **Writing Outputs**: Results are written to `cartele.out`.

The solution ensures that each card is tested against all possible orientations efficiently, making the solution both correct and performant.
