---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `partitura.in` and write to `partitura.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[partitura.png|align=right|width=25%]

Mihai s-a decis în sfârșit să compună o melodie. Fără să știe de unde să înceapă, a scris pe o foaie $n$ note muzicale. Fiecare notă muzicală este definită de două valori reprezentând durata și înălțimea acesteia astfel:
* **durata** este exprimată printr-o fracție de forma $\displaystyle \frac{1}{2^x}$, unde $x$ este un număr natural nenul;
* **înălțimea** este exprimată printr-un număr natural nenul $y$.

Durata unui grup de note este egală cu suma duratelor notelor din grup. Pentru a compune o melodie corect din punct de vedere muzical, el trebuie să distribuie toate notele în grupuri disjuncte, astfel încât durata fiecărui grup să fie $1$. Mihai definește **scorul unui grup** de note ca fiind suma înălțimilor tuturor notelor din grup, ridicată la pătrat. De asemenea, el definește **scorul unei melodii** ca fiind suma scorurilor tuturor grupurilor de note formate
care pot forma un grup.

Mihai vrea să afle care este scorul maxim al unei melodii pe care îl poate obține după gruparea tuturor notelor date.

# Cerință

Dându-se $n$ note sub forma a $n$ perechi de numere, $x$ și $y$, să se afișeze scorul maxim ce poate fi obținut după gruparea tuturor notelor date în grupuri disjuncte.

# Date de intrare

Fișierul de intrare `partitura.in` va conține pe prima linie un număr natural $n$, reprezentând numărul de note, iar pe următoarele $n$ linii se vor afla câte două numere naturale $x$ și $y$ separate prin câte un spațiu, cu semnificația din enunț, pentru fiecare din cele $n$ note.

# Date de ieșire

Fișierul de ieșire `partitura.out` va conține un singur număr natural reprezentând scorul maxim cerut.

# Restricții și precizări
* $1 \leq n \leq 300 \ 000$;
* $1 \leq x \leq 18$;
* $1 \leq y \leq 10 \ 000$;
* Se garantează că se pot distribui toate notele date în grupuri de durată $1$.
* Pentru $20$ de puncte, $n \leq 4$, $x = 1$;
* Pentru $22$ de puncte, $x = 1$;
* Pentru $17$ puncte, pentru toate notele, $x$ are aceeași valoare;
* Pentru $41$ de puncte, nu există restricții suplimentare.

---

Example:
`partitura.in`
```
5
2 3
3 2
2 1
2 2
3 5
```

`partitura.out`
```
169
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the challenge optimally, we'll follow these steps:
1. **Read Input Efficiently**: Given the constraints, we need to handle up to 300,000 notes; hence, reading input efficiently is crucial.
2. **Parse the Notes**: Each note comprises two values `x` (which determines the duration \(\frac{1}{2^x}\)) and `y` (the pitch).
3. **Group Notes by Duration**: Since the sum of durations for each group should be 1, we can use a greedy approach to match groups of notes whose durations add up to 1.
4. **Compute Scores**: For each valid group of notes, compute the score as the square of the sum of their pitches.
5. **Sum Scores**: Sum up the scores for all groups to get the final result.

Considering the need for efficiency and correctness, we'll use the `ifstream` and `ofstream` classes for file operations. We'll also leverage data structures like maps and vectors to handle and group the notes based on their durations. Let's dive into the implementation:

### Implementation

```cpp
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>
#include <cmath>
#include <iostream>

int main() {
    std::ifstream infile("partitura.in");
    std::ofstream outfile("partitura.out");

    int n;
    infile >> n;

    // Maps duration (in power of 2^-x) to a list of pitches
    std::map<int, std::vector<int>> notes;

    for (int i = 0; i < n; ++i) {
        int x, y;
        infile >> x >> y;
        notes[x].push_back(y);
    }

    infile.close();

    // Prepare a map to hold counts of each duration for fast lookup and grouping
    std::map<int, int> duration_count;
    for (const auto& pair : notes) {
        duration_count[pair.first] = pair.second.size();
        std::sort(notes[pair.first].begin(), notes[pair.first].end(), std::greater<int>());
    }

    long long max_score = 0;

    while (true) {
        int sum = 0;
        int group_score = 0;
        bool found_group = false;

        for (int x = 1; x <= 18; ++x) {
            while (sum + (1 << (18 - x)) <= (1 << 18) && duration_count[x] > 0) {
                sum += (1 << (18 - x));
                group_score += notes[x].back();
                notes[x].pop_back();
                duration_count[x]--;
                found_group = true;
            }
        }

        if (!found_group) {
            break;
        }

        max_score += static_cast<long long>(group_score) * group_score;
    }

    outfile << max_score << std::endl;
    outfile.close();

    return 0;
}
```

### Explanation
1. **Reading Input**: We use `ifstream` to read from the `partitura.in` file.
2. **Storing Notes**: We store notes in a map where the key is `x` (duration as a power of two) and the value is a vector of pitches.
3. **Sorting Pitches**: For each duration, we sort the pitches in descending order to maximize the group score.
4. **Grouping Notes**: We repeatedly attempt to form groups summing up to a duration of 1 by iterating over possible durations from highest to lowest. We subtract the appropriate counts from `duration_count` and update `sum` and `group_score`.
5. **Calculating and Summing Scores**: For each valid group, we square the sum of pitches and add to `max_score`.
6. **Writing Output**: We use `ofstream` to write the result to `partitura.out`.

This approach ensures that we efficiently read, process, and calculate the maximum score by leveraging sorting and greedy selection strategies.
