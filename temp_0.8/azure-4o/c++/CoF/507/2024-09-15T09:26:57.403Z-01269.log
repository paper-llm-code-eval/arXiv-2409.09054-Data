---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `partitura.in` and write to `partitura.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[partitura.png|align=right|width=25%]

Mihai s-a decis în sfârșit să compună o melodie. Fără să știe de unde să înceapă, a scris pe o foaie $n$ note muzicale. Fiecare notă muzicală este definită de două valori reprezentând durata și înălțimea acesteia astfel:
* **durata** este exprimată printr-o fracție de forma $\displaystyle \frac{1}{2^x}$, unde $x$ este un număr natural nenul;
* **înălțimea** este exprimată printr-un număr natural nenul $y$.

Durata unui grup de note este egală cu suma duratelor notelor din grup. Pentru a compune o melodie corect din punct de vedere muzical, el trebuie să distribuie toate notele în grupuri disjuncte, astfel încât durata fiecărui grup să fie $1$. Mihai definește **scorul unui grup** de note ca fiind suma înălțimilor tuturor notelor din grup, ridicată la pătrat. De asemenea, el definește **scorul unei melodii** ca fiind suma scorurilor tuturor grupurilor de note formate
care pot forma un grup.

Mihai vrea să afle care este scorul maxim al unei melodii pe care îl poate obține după gruparea tuturor notelor date.

# Cerință

Dându-se $n$ note sub forma a $n$ perechi de numere, $x$ și $y$, să se afișeze scorul maxim ce poate fi obținut după gruparea tuturor notelor date în grupuri disjuncte.

# Date de intrare

Fișierul de intrare `partitura.in` va conține pe prima linie un număr natural $n$, reprezentând numărul de note, iar pe următoarele $n$ linii se vor afla câte două numere naturale $x$ și $y$ separate prin câte un spațiu, cu semnificația din enunț, pentru fiecare din cele $n$ note.

# Date de ieșire

Fișierul de ieșire `partitura.out` va conține un singur număr natural reprezentând scorul maxim cerut.

# Restricții și precizări
* $1 \leq n \leq 300 \ 000$;
* $1 \leq x \leq 18$;
* $1 \leq y \leq 10 \ 000$;
* Se garantează că se pot distribui toate notele date în grupuri de durată $1$.
* Pentru $20$ de puncte, $n \leq 4$, $x = 1$;
* Pentru $22$ de puncte, $x = 1$;
* Pentru $17$ puncte, pentru toate notele, $x$ are aceeași valoare;
* Pentru $41$ de puncte, nu există restricții suplimentare.

---

Example:
`partitura.in`
```
5
2 3
3 2
2 1
2 2
3 5
```

`partitura.out`
```
169
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to consider several key points:

1. **Reading Input Efficiently:** Given the constraints, reading from the input file efficiently is crucial.
2. **Grouping Notes:** We need to group notes in such a way that each group's total duration is exactly 1.
3. **Calculating Scores:** For each valid group (with a total duration of 1), compute its score and sum these scores to get the result.

Here's the step-by-step plan:

1. **Convert Durations:** Convert note durations from $\frac{1}{2^x}$ to a common format. Since $x$ ranges from 1 to 18, we can store it in a power of two format.
2. **Dynamic Programming (DP):** Use dynamic programming to find the maximum score for each possible combination of durations that sum to 1.
3. **Efficiently Group and Compute Scores:** Use a bitmask to represent different sums of powers of two. This allows us to efficiently track which combinations of notes can sum to 1 and calculate the resulting scores.

Here is the C++ code that implements this plan:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

// Function to calculate the maximum score
int maxScore(vector<pair<int, int>>& notes, int n) {
    // Map to store possible sums and corresponding heights
    unordered_map<int, int> dp;

    // Initialize the DP map
    dp[0] = 0;

    // Iterate over each note
    for (auto& note : notes) {
        int duration = 1 << note.first;
        int height = note.second;

        // Temporary map to store updates
        unordered_map<int, int> tempDp = dp;

        // Update DP map with new combinations
        for (auto& entry : dp) {
            int newDuration = entry.first + duration;
            int newHeightSum = entry.second + height;
            if (newDuration <= (1 << 18)) {
                tempDp[newDuration] = max(tempDp[newDuration], newHeightSum);
            }
        }

        // Assign tempDp back to dp
        dp = tempDp;
    }

    int maxScore = 0;

    // Calculate scores for all combinations that sum to 1
    for (auto& entry : dp) {
        if (entry.first == (1 << 18)) {
            maxScore = max(maxScore, entry.second * entry.second);
        }
    }

    return maxScore;
}

int main() {
    ifstream infile("partitura.in");
    ofstream outfile("partitura.out");

    int n;
    infile >> n;

    vector<pair<int, int>> notes(n);
    for (int i = 0; i < n; ++i) {
        infile >> notes[i].first >> notes[i].second;
    }

    int result = maxScore(notes, n);
    outfile << result;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading the Input:** We read the number of notes and then read each note's duration and height.
2. **Dynamic Programming Setup:** Use a map to represent the DP table where the key is the sum of durations (in base 2) and the value is the sum of heights.
3. **DP Update:** For each note, we update the DP table by considering each possible combination of existing sums with the new note.
4. **Score Calculation:** Calculate the score for combinations that sum to the desired duration (1, represented as $2^{18}$ in our map).
5. **Output the Result:** Write the result to the output file.

This implementation ensures that we efficiently compute the maximum score with the constraints provided.
---------- user ----------


Program result did not match expected result.
Input data:
```
5
2 3
3 2
2 1
2 2
3 5
```
Expected output:
```
169
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
