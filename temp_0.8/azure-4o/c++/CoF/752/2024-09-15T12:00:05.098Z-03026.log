---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this problem efficiently, we need a method that avoids iterating through each number from 1 to n directly, as that would be computationally expensive given the constraint \(1 \leq n \leq 10^9\). Instead, we can break down the problem using a positional approach to count the occurrences of the digit c in each decimal place.

Here is the implementation in C++ that reads from `cifre.in`, processes the input, and writes to `cifre.out`:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;

int countDigitOccurrences(int n, int digit) {
    int count = 0;
    int factor = 1;
    while (factor <= n) {
        int lowerNumbers = n - (n / factor) * factor;
        int currentDigit = (n / factor) % 10;
        int higherNumbers = n / (factor * 10);

        if (currentDigit < digit) {
            count += higherNumbers * factor;
        } else if (currentDigit == digit) {
            count += higherNumbers * factor + lowerNumbers + 1;
        } else {
            count += (higherNumbers + 1) * factor;
        }

        // Move to the next digit position
        factor *= 10;
    }
    return count;
}

int main() {
    ifstream inputFile("cifre.in");
    ofstream outputFile("cifre.out");

    int n, c;
    inputFile >> n >> c;

    int result = countDigitOccurrences(n, c);
    outputFile << result;

    inputFile.close();
    outputFile.close();

    return 0;
}
```

### Explanation of the solution:

1. **Reading Input**: Read the values of `n` and `c` from the file `cifre.in`.
2. **Counting Occurrences**: The function `countDigitOccurrences` counts the occurrences of the digit `c` in all numbers from 1 to `n` using a positional approach:
   - **factor** represents the current digit position we are examining (units, tens, hundreds, etc.).
   - **lowerNumbers** captures the numbers that are lower than the current factor.
   - **currentDigit** extracts the current digit we are examining.
   - **higherNumbers** captures the numbers that are higher than the current factor.
   - Depending on the value of `currentDigit` relative to `c`, add the appropriate number of occurrences to `count`.
3. **Handling Output**: Write the result to the file `cifre.out`.

This approach efficiently counts digit occurrences by leveraging mathematical properties of digits, avoiding the need to iterate through each number individually. This makes it suitable for large values of `n`.
