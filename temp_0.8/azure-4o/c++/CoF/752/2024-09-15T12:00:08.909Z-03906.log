---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the efficient solution for the presented challenge in C++. The solution involves calculating the occurrences of a digit in the range from 1 to n without iterating through each number, which would be computationally expensive for large values of n. Instead, it uses mathematical operations to count the digit occurrences in each place value (units, tens, hundreds, etc.).

```cpp
#include <fstream>
#include <cmath>

int count_digit_occurrences(long long n, int digit) {
    if (digit < 1 || digit > 9) return 0; // digit must be from 1 to 9
    
    int count = 0;
    long long factor = 1;
    
    while (factor <= n) {
        long long lower_numbers = n - (n / factor) * factor;
        long long current_digit = (n / factor) % 10;
        long long higher_numbers = n / (factor * 10);
        
        if (current_digit < digit) {
            count += higher_numbers * factor;
        } else if (current_digit == digit) {
            count += higher_numbers * factor + lower_numbers + 1;
        } else {
            count += (higher_numbers + 1) * factor;
        }
        
        factor *= 10;
    }
    
    return count;
}

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");
    
    long long n;
    int c;
    infile >> n >> c;
    
    int result = count_digit_occurrences(n, c);
    
    outfile << result << "\n";
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input:**
    - The input is read from `cifre.in` using `std::ifstream`.
    - The values `n` and `c` are extracted.

2. **Counting Digit Occurrences:**
    - The function `count_digit_occurrences` calculates how many times the digit `c` appears in the range from 1 to `n`.
    - It uses three main variables to keep track of numbers lower than the current digit place, the current digit, and numbers higher than the current digit place.
    - By iterating through each digit place (units, tens, hundreds, etc.), it counts the occurrences of the digit `c`.
    - This avoids the need to iterate through every number from 1 to `n`, making it much more efficient.

3. **Writing Output:**
    - The result is written to `cifre.out` using `std::ofstream`.

This method ensures the solution runs efficiently even for large values of `n` up to `10^9`.
