---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we'll count the occurrences of a digit `c` in the numbers from `1` to `n`. Given that `n` can be as large as \(10^9\), a direct approach that checks every number from `1` to `n` would be too slow. Instead, we'll use a more mathematical approach to count the occurrences of the digit `c` at each position (units, tens, hundreds, etc.).

### Steps to Solve the Problem

1. **Reading Input**: We'll read the values of `n` and `c` from the file `cifre.in`.
2. **Counting the Digit Occurrences**: For each digit position (units, tens, hundreds, etc.), we'll calculate how many times the digit `c` appears at that position.
3. **Output the Result**: We'll write the result to `cifre.out`.

### Detailed Explanation

For each digit place (units, tens, hundreds, etc.), we can observe the following:
- For a given place `p` (1 for units, 10 for tens, 100 for hundreds, etc.):
  - The number of complete cycles of `10*p` contributes a certain number of occurrences of `c` at place `p`.
  - We also need to account for the remainder when `n` is divided by `10*p`.

For example, to count the occurrences of the digit `1` in the number range from 1 to 15:
- In the units place: `1` appears in 1, 11
- In the tens place: `1` appears in 10, 11, 12, 13, 14, 15

### Implementation in C++

```cpp
#include <iostream>
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");
    
    long long n;
    int c;
    infile >> n >> c;
    
    long long count = 0;
    for (long long p = 1; p <= n; p *= 10) {
        long long divider = p * 10;
        long long complete_cycles = n / divider;
        long long remainder = n % divider;
        
        // Count the 'c' in complete cycles
        count += complete_cycles * p;
        
        // Count the 'c' in the remainder
        if (c > 0) {
            if (remainder >= c * p) {
                count += std::min(remainder - c * p + 1, p);
            }
        }
    }
    
    outfile << count << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation of the Code
1. **Reading Input**: We open the input file and read `n` and `c`.
2. **Counting Digit Occurrences**:
   - We loop over each digit place (`p` ranging from 1, 10, 100, etc.).
   - We calculate the number of complete cycles (`complete_cycles`) of size `10 * p`.
   - We calculate the remainder after the last complete cycle.
   - We add the occurrences of `c` in the complete cycles and the remainder.
3. **Output the Result**: We write the result to the output file.

This approach ensures we efficiently count the digit occurrences without explicitly checking each number up to `n`.
