---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of counting the occurrences of a particular digit `c` in the numbers from `1` to `n`, we need an efficient approach due to the large possible value of `n` (up to \(10^9\)). A direct approach that iterates through each number and counts the occurrences would be too slow. Instead, we can utilize a mathematical approach.

We will use digit-by-digit analysis to count the occurrences of the target digit `c` efficiently. Here’s how we can do it:

1. **Initialization**: Read the input values, `n` and `c`.
2. **Counting occurrences**: For each digit position (units, tens, hundreds, etc.), count how many times the digit `c` appears at that position across all numbers from `1` to `n`.

Here’s the step-by-step approach:

1. For each digit position, we calculate the number of full cycles of 0-9 that fit into `n` at that position and count the occurrences of `c` in those cycles.
2. Add any additional occurrences of `c` in the remaining portion of `n` that doesn't complete a full cycle.

Here's the efficient C++ implementation for this problem:

```cpp
#include <fstream>

int countDigitOccurrences(int n, int c) {
    int count = 0;
    int factor = 1;
    int lowerNumbers = 0;
    int currentDigit = 0;
    int higherNumbers = 0;
    
    while (n / factor > 0) {
        lowerNumbers = n - (n / factor) * factor;
        currentDigit = (n / factor) % 10;
        higherNumbers = n / (factor * 10);
        
        if (currentDigit < c) {
            count += higherNumbers * factor;
        } else if (currentDigit == c) {
            count += higherNumbers * factor + lowerNumbers + 1;
        } else {
            count += (higherNumbers + 1) * factor;
        }
        
        factor *= 10;
    }
    
    return count;
}

int main() {
    std::ifstream infile("cifre.in");
    std::ofstream outfile("cifre.out");
    
    int n, c;
    infile >> n >> c;
    
    int result = countDigitOccurrences(n, c);
    
    outfile << result << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation

1. **Reading Input**: We use `std::ifstream` and `std::ofstream` to handle file input and output, ensuring data is read from `cifre.in` and written to `cifre.out`.
2. **Digit Counting Logic**:
   - The `while` loop processes each digit position.
   - `factor` is used to isolate each digit starting from the least significant digit (units) and moving to the most significant.
   - `lowerNumbers` holds the number of digits smaller than the current processed digit.
   - `currentDigit` is the value of the digit at the current position.
   - `higherNumbers` are the digits higher than the current digit.
   - The logic inside the loop counts occurrences of `c` based on the value of `currentDigit` and updates the count accordingly.

This approach ensures that the solution runs efficiently even for large values of `n`.
