---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `galbeni.in` and write to `galbeni.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

După ce au descoperit ascunzătoarea piratului Spânu, marinarii de pe corabia “Speranţa” au hotărât să ofere sătenilor o parte din comoara acestuia. Întrucât comoara avea un număr nelimitat de bani din aur, numiţi galbeni, singura problemă a marinarilor a fost regula după care să împartă banii.

După îndelungi discuţii au procedat astfel: i-au rugat pe săteni să se aşeze în ordine la coadă şi să vină, pe rând, unul câte unul pentru a-şi ridica galbenii cuveniţi. Primul sătean a fost rugat să îşi aleagă numărul de galbeni, cu condiţia ca acest număr să fie format din exact $K$ cifre. Al doilea sătean va primi un număr de galbeni calculat astfel: se înmulţeşte numărul de galbeni ai primului sătean cu toate cifrele nenule ale acelui număr, rezultatul se înmulţeşte cu $8$ şi apoi se împarte la $9$ păstrându-se doar ultimele $K$ cifre ale câtului împărţirii. Dacă numărul obţinut are mai puţin de $K$ cifre, atunci acestuia i se adaugă la final cifra $9$, până când se completează $K$ cifre.

Pentru a stabili câţi galbeni primeşte al treilea sătean, se aplică aceeaşi regulă, dar pornind de la numărul de galbeni ai celui de-al doilea sătean. Regula se aplică în continuare fiecărui sătean, plecând de la numărul de galbeni primiţi de săteanul care a stat la coadă exact în faţa lui. 

# Cerința

Cunoscând numărul de galbeni aleşi de primul sătean, determinaţi numărul de galbeni pe care îl va primi al $N$-lea sătean.

# Date de intrare
Fișierul de intrare `galbeni.in` conține pe prima linie cele $3$ numere naturale nenule $S$, $K$, $N$ separate prin câte un spaţiu, unde $S$ reprezintă numărul de galbeni ales de primul sătean, $K$ este numărul de cifre ale numărului $S$, iar $N$ reprezintă numărul de ordine al săteanului pentru care se cere să determinaţi numărul de galbeni primiţi.

# Date de ieșire
Fișierul de ieșire `galbeni.out` va conține pe unica sa linie un număr natural reprezentând rezultatul determinat.

# Restricții și precizări
* $2 \leq N \leq 1 \ 000 \ 000 \ 000$;
* $1 \leq K \leq 3$;
* Se garantează că $S$ are exact $K$ cifre.

---

Example:
`galbeni.in`
```
51 2 3
```

`galbeni.out`
```
77
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ solution for the given problem. We ensure that the code reads from `galbeni.in` and writes to `galbeni.out`, and the operations are optimized for fast execution.

```cpp
#include <fstream>
#include <string>
#include <vector>

using namespace std;

unsigned long long multiplyNonZeroDigits(unsigned long long num) {
    unsigned long long product = 1;
    while (num > 0) {
        unsigned long long digit = num % 10;
        if (digit != 0) {
            product *= digit;
        }
        num /= 10;
    }
    return product;
}

string determineNextNumber(string current, int k) {
    unsigned long long num = stoull(current);
    unsigned long long product = multiplyNonZeroDigits(num);
    unsigned long long nextNumber = (num * product * 8) / 9;
    string nextStr = to_string(nextNumber);

    if (nextStr.size() > k) {
        nextStr = nextStr.substr(nextStr.size() - k);
    } else {
        while (nextStr.size() < k) {
            nextStr += '9';
        }
    }

    return nextStr;
}

int main() {
    // Open input and output files
    ifstream inputFile("galbeni.in");
    ofstream outputFile("galbeni.out");

    unsigned long long S;
    int K, N;
    inputFile >> S >> K >> N;

    string current = to_string(S);
    for (int i = 1; i < N; ++i) {
        current = determineNextNumber(current, K);
    }

    outputFile << current << endl;

    // Close files
    inputFile.close();
    outputFile.close();

    return 0;
}
```

### Explanation:
1. **Reading from File**: We read the input values `S`, `K`, and `N` from the file `galbeni.in`.
2. **Multiply Non-zero Digits**: This function takes a number and returns the product of its non-zero digits.
3. **Determine Next Number**: This function computes the next number in the sequence by following the given rules.
4. **Main Logic**: The code initializes the sequence with `S` and iteratively computes the next number until it reaches the `N`-th number.
5. **Writing to File**: The final result is written to `galbeni.out`.

This implementation ensures that the operations are efficient and should work within the provided constraints.
