---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <iomanip>

void parseExpression(const std::string& expr, int &coef, int &constant) {
    std::stringstream ss(expr);
    char op = '+';
    std::string token;
    coef = 0;
    constant = 0;

    while (std::getline(ss, token, '+')) {
        size_t minus_pos = token.find('-');
        size_t start = 0;

        if (minus_pos != std::string::npos) {
            std::stringstream ss_minus(token.substr(start, minus_pos - start));
            if (ss_minus >> token) {
                if (token.back() == 'x') {
                    token.pop_back();
                    if (token.empty()) token = "1";
                    coef += std::stoi(token);
                } else {
                    constant += std::stoi(token);
                }
            }
            start = minus_pos + 1;

            while ((minus_pos = token.find('-', start)) != std::string::npos) {
                std::stringstream ss_minus(token.substr(start, minus_pos - start));
                if (ss_minus >> token) {
                    if (token.back() == 'x') {
                        token.pop_back();
                        if (token.empty()) token = "1";
                        coef -= std::stoi(token);
                    } else {
                        constant -= std::stoi(token);
                    }
                }
                start = minus_pos + 1;
            }
        }

        if (start < token.size()) {
            std::stringstream ss_rem(token.substr(start));
            if (ss_rem >> token) {
                if (token.back() == 'x') {
                    token.pop_back();
                    if (token.empty()) token = "1";
                    coef += std::stoi(token);
                } else {
                    constant += std::stoi(token);
                }
            }
        }
    }
}

int main() {
    std::ifstream fin("ecuatii.in");
    std::ofstream fout("ecuatii.out");

    int n;
    fin >> n;
    fin.ignore(); // Ignore the newline character after the integer

    for (int i = 0; i < n; ++i) {
        std::string equation;
        std::getline(fin, equation);

        size_t equal_pos = equation.find('=');
        std::string lhs = equation.substr(0, equal_pos);
        std::string rhs = equation.substr(equal_pos + 1);

        int lhs_coef, lhs_const, rhs_coef, rhs_const;
        parseExpression(lhs, lhs_coef, lhs_const);
        parseExpression(rhs, rhs_coef, rhs_const);

        int total_coef = lhs_coef - rhs_coef;
        int total_const = rhs_const - lhs_const;

        if (total_coef == 0) {
            if (total_const == 0) {
                fout << "infinit\n";
            } else {
                fout << "imposibil\n";
            }
        } else {
            double result = static_cast<double>(total_const) / total_coef;
            fout << std::fixed << std::setprecision(4) << result << '\n';
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Input Reading**: 
   - Read the number of equations `n` from the input file `ecuatii.in`.
   - Use `std::getline` to read the subsequent equations.

2. **Parsing Expressions**:
   - Create a function `parseExpression` that takes an algebraic expression and parses it into a coefficient of `x` and a constant term (both integers).

3. **Handling Equations**:
   - For each equation, split it into left-hand side (lhs) and right-hand side (rhs) around the `=` sign.
   - Use `parseExpression` to parse both lhs and rhs into coefficients and constants.
   - Calculate the overall coefficient and constant by moving everything to the left side of the equation.

4. **Solving Equations**:
   - Check the combined coefficient:
     - If zero, determine if the equation has infinite solutions (`total_const == 0`) or no solutions (`total_const != 0`).
     - If non-zero, compute the solution as the ratio of `total_const` to `total_coef`.

5. **Output**:
   - Write the results to `ecuatii.out` with appropriate formatting.

This solution is efficient and ensures that it handles edge cases appropriately, as indicated in the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```
Expected output:
```
3.2527
infinit
imposibil
```
Found output:
```
infinit
3.2967
infinit
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
