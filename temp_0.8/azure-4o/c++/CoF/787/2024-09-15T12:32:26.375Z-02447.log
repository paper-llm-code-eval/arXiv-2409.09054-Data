---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ruleta.in` and write to `ruleta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Nicușor este elev în clasa a VI-a și s-a gândit că este suficient de mare ca să inventeze un joc nou. Are doar o foaie de hârtie și un pix. Scrie mai întâi $n$ numere naturale în cerc. Acestea formează ***Ruleta numerelor***. Jocul se desfășoară după următoarele reguli:

* se parcurge șirul numerelor în sensul deplasării acelor de ceasornic;
* se pornește de fiecare dată de la același element;
* se execută de fiecare dată o rotație completă;
* fiecare element nenul se scade din elementul imediat următor doar dacă este mai mic sau egal cu acesta și nenul;

**Exemplu.** Dacă notăm cu $R_1, R_2, R_3, R_4, R_5, R_6, R_7, R8$ șirul numerelor ce formează ruleta din figura $1$, atunci, o rotație completă realizează următoarele modificări asupra numerelor din listă:

~[ruleta1.png|width=35em] ~[ruleta2.png|width=23em]

* ruleta se oprește atunci când execută o rotație completă și nu se modifică nici o valoare din șirul elementelor.

**Exemplu.** Pentru ruleta din figura $1$ se execută $4$ rotații (dintre care $3$ în care se fac modificări):

~[ruleta3.png]

# Cerință

Scrieți un program care să determine, pentru un șir de $n$ numere naturale care indică starea inițială a ruletei, numărul $r$ de rotații complete efectuate respectând regulile jocului până la încheierea acestuia și numărul $t$ al elementelor nenule aflate în șir la încheierea jocului.

# Date de intrare

Fișierul de intrare `ruleta.in` conține pe prima linie numărul $n$ de numere naturale așezate în cerc iar pe linia a doua, separate prin câte un spațiu, cele $n$ valori, în ordinea deplasării, începând cu elementul de la care pornește ruleta.

# Date de ieșire

Fișierul de ieșire `ruleta.out` conține pe prima linie, separate printr-un spațiu, valorile $r$ și $t$ (în această ordine).

# Restricții și precizări

* $2 \leq n \leq 10 \ 000$;
* Numerele de pe ruletă sunt numere naturale mai mici sau cel mult egale cu $30 \ 000$.
* pentru aflarea corectă a numărului $r$ de rotaţii se acordă 70% din punctajul pe test; punctajul integral se acordă dacă ambele valori afişate sunt corecte.

---

Example:
`ruleta.in`
```
8
1 2 3 4 3 2 3 1
```

`ruleta.out`
```
4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ code for the described problem. This code reads from `ruleta.in`, processes the input as described in the problem statement, and writes the result to `ruleta.out`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>

int main() {
    std::ifstream fin("ruleta.in");
    std::ofstream fout("ruleta.out");

    int n;
    fin >> n;

    std::vector<int> ruleta(n);
    for (int i = 0; i < n; ++i) {
        fin >> ruleta[i];
    }

    int rotations = 0;
    bool changed;

    do {
        changed = false;
        rotations++;
        for (int i = 0; i < n; ++i) {
            int &current = ruleta[i];
            int &next = ruleta[(i + 1) % n];
            if (current > 0 && next > 0 && current <= next) {
                next -= current;
                changed = true;
            }
        }
    } while (changed);

    int non_zero_count = 0;
    for (int val : ruleta) {
        if (val > 0) {
            non_zero_count++;
        }
    }

    fout << rotations << " " << non_zero_count << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading the Input**: 
   - We use `ifstream` for reading from `ruleta.in`.
   - We read the number of elements `n` in the roulette.
   - We then read the `n` values into a vector `ruleta`.

2. **Processing the Roulette**:
   - We use a `do-while` loop to ensure at least one rotation is performed.
   - For each rotation, we iterate through the vector and apply the given rule.
   - If any change is made during a rotation, we set the `changed` flag to `true`.

3. **Counting Non-zero Elements**:
   - After the rotations are complete (no changes made in a full rotation), we count the non-zero elements in the vector.

4. **Writing the Output**:
   - We use `ofstream` to write the results to `ruleta.out`.

This solution is efficient and handles the constraints well. It performs each rotation in linear time \(O(n)\) and only continues as long as changes are being made, which ensures that it halts appropriately.
