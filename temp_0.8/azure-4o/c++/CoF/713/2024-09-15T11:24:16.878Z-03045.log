---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:First, we need to understand the problem. Given a number \( n \) and a prime digit \( k \) (which can only be one of the prime numbers: 2, 3, 5, or 7), we need to determine the exponent of \( k \) in the prime factorization of the factorial of \( n \) (i.e., \( n! \)).

To achieve this efficiently:
1. Read the input values \( n \) and \( k \) from the file `exponent.in`.
2. Calculate the exponent of \( k \) in \( n! \). This can be done using a known mathematical method:
    - The exponent of a prime \( p \) in \( n! \) is given by the sum of the integer divisions \( \left\lfloor \frac{n}{p^i} \right\rfloor \) for \( i \geq 1 \) until \( p^i \) exceeds \( n \).
3. Write the result to the file `exponent.out`.

The method for calculating the exponent ensures that we account for multiple occurrences of the prime \( k \) as factors in \( n! \).

Here is the C++ code that implements this logic:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("exponent.in");
    std::ofstream outfile("exponent.out");

    int n, k;
    infile >> n >> k;

    int exponent = 0;
    int power = k;

    while (power <= n) {
        exponent += n / power;
        if (power > n / k) break; // To avoid integer overflow
        power *= k;
    }

    outfile << exponent;

    infile.close();
    outfile.close();

    return 0;
}
```

Explanation of the code:
1. We open the input file `exponent.in` and read the values of \( n \) and \( k \).
2. We initialize the exponent to 0 and start with the first power of \( k \) (which is \( k \) itself).
3. In a loop, we repeatedly divide \( n \) by increasing powers of \( k \) and accumulate the quotient in the exponent. This loop continues until the power of \( k \) exceeds \( n \).
4. The check `if (power > n / k) break;` ensures that we do not encounter integer overflow by verifying if the next multiplication will exceed the integer limit.
5. Finally, we write the calculated exponent to the output file `exponent.out`.

This should provide an efficient solution to the problem within the given constraints.
