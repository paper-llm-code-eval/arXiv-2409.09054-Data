---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of finding the exponent of a prime number \( k \) in the prime factorization of the factorial \( n! \), we can use a mathematical approach to avoid computing the entire factorial, which can be very large even for moderate values of \( n \). 

The exponent of a prime \( k \) in the factorization of \( n! \) can be calculated by summing the number of multiples of \( k \), \( k^2 \), \( k^3 \), and so on, up to \( k^m \) where \( k^m \leq n \). This is achieved using the formula:
\[ \text{exponent} = \left\lfloor \frac{n}{k} \right\rfloor + \left\lfloor \frac{n}{k^2} \right\rfloor + \left\lfloor \frac{n}{k^3} \right\rfloor + \cdots \]

Here's the C++ implementation that reads from `exponent.in` and writes to `exponent.out`:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream input("exponent.in");
    std::ofstream output("exponent.out");

    int n, k;
    input >> n >> k;

    int exponent = 0;
    for (int power = k; power <= n; power *= k) {
        exponent += n / power;
    }

    output << exponent << std::endl;
    
    input.close();
    output.close();
    return 0;
}
```

### Explanation of the Code:
1. **Reading Input:** The program reads the values of \( n \) and \( k \) from the file `exponent.in`.
2. **Calculating Exponent:** It calculates the exponent by iterating through powers of \( k \) (i.e., \( k, k^2, k^3, \ldots \)) and summing the integer division results \( n \div k^i \). This loop continues as long as \( k^i \) is less than or equal to \( n \).
3. **Writing Output:** The result is written to the file `exponent.out`.

This approach minimizes the computational complexity and avoids handling large numbers directly by leveraging mathematical properties of prime factorization. With the constraints provided (\( 1 \leq n \leq 100 \)), this solution is highly efficient.
