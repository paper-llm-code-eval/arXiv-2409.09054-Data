---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream in("exponent.in");
    std::ofstream out("exponent.out");

    int n, k;
    in >> n >> k;
    
    int exponent = 0;
    for (int i = k; i <= n; i *= k) {
        exponent += n / i;
    }

    out << exponent;
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The program reads the values of `n` and `k` from the file `exponent.in`.
   
2. **Calculating the Exponent:**
   - The primary task is to calculate the exponent of `k` in the prime factorization of the factorial `n!`.
   - This can be efficiently accomplished by iterating over powers of `k` and summing the results of integer divisions `n / k^i` (where `i` starts at 1 and increments).
   - The logic behind this is based on Legendre's formula for finding the exponent of a prime `p` in `n!`, extended to any number `k` when `k` is prime (which is given).
   
3. **Writing Output:**
   - The result is written to `exponent.out`.

### Example Validation:
For the input:
```
6 3
```
- Compute the exponent of `3` in `6!`:
  - `3^1` appears in 3, 6 (twice).
  - Summing up: `6 / 3 + 6 / 9 = 2 + 0 = 2`.
- The output is correctly:
```
2
```
