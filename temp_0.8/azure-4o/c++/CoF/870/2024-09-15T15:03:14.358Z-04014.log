---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `axyz.in` and write to `axyz.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră numerele naturale $A$ (format din două sau trei cifre, toate distincte și nenule) și $X$ (format din $N$ cifre, toate nenule).

Din numărul $X$, folosind toate cele $N$ cifre ale sale, se poate construi un cel mai mare număr natural $Y$ **strict mai mic decât $\textbf{X}$**. De exemplu, pentru $X=121621$ se construiește $Y=121612$.

Tot din numărul $X$, se poate obține numărul $A$ prin ștergerea unor cifre din scrierea lui $X$ și alipirea celor rămase, fără a le schimba ordinea. De exemplu, dacă $X=121621$ și $A=12$, există $Z=3$ posibilități distincte prin care să obținem numărul $A$ din $X$ și anume: 1) $\textbf{\textcolor{red}{12}} \sout{1621}$; 2) $\textbf{\textcolor{red}1} \sout{216} \textbf{\textcolor{red}2} \sout{1}$; 3) $\sout{12} \textbf{\textcolor{red}1} \sout{6} \textbf{\textcolor{red}2} \sout{1}$.

# Cerință

Cunoscându-se numerele $A, N$ și cele $N$ cifre ale lui $X$, să se determine:
1. cel mai mare număr natural $Y$, **strict mai mic decât $\textbf{X}$**, care se poate obține rearanjând cifrele lui $X$;
2. numărul maxim $Z$ de posibilități distincte prin care se poate obține numărul $A$ din numărul $X$ prin ștergerea unor cifre și alipirea celor rămase, fără a le schimba ordinea. 

# Date de intrare

Fişierul de intrare `axyz.in` conține:
- pe prima linie un număr natural $p$; pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$;
- pe a doua linie, numărul $A$, cu semnificația din enunț;
- pe a treia linie numărul de cifre ale numărului $X$;
- pe a patra linie, un șir de $N$ cifre, separate prin câte un spațiu, reprezentând cifrele numărului $X$, în această ordine.

# Date de ieșire

* Dacă valoarea lui $p$ este $1$, **atunci se va rezolva numai cerința $\textbf{1}$**. În acest caz, fişierul de ieşire `axyz.out` va conţine pe prima linie un șir de cifre reprezentând numărul natural $Y$ determinat (răspunsul la cerința $1$).
* Dacă valoarea lui $p$ este $2$, **atunci se va rezolva numai cerința $\textbf{2}$**. În acest caz, fişierul de ieşire `axyz.out` va conține pe prima linie un număr natural reprezentând numărul $Z$ determinat (răspunsul la cerința $2$).


# Restricții și precizări

* $12 \leq A \leq 987$;
* $10 \leq N \leq 30 \ 000$;
* Pentru toate datele de test, **numerele $\textbf{Y}$ și $\textbf{A}$ pot fi obținute din numărul $\textbf{X}$**.
* Pentru rezolvarea corectă a cerinţei $1$ se acordă $30\%$ din punctaj, iar pentru rezolvarea corectă a cerinţei $2$ se acordă $70\%$ din punctaj.

---

Example:
`axyz.in`
```
1
12
6
1 2 1 6 2 1
```

`axyz.out`
```
121612
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>

using namespace std;

void solve1(const string &X) {
    string Y = X;
    prev_permutation(Y.begin(), Y.end());
    ofstream fout("axyz.out");
    fout << Y << endl;
    fout.close();
}

int countWaysToFormA(const string &X, const string &A) {
    int m = A.size(), n = X.size();
    vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
    for (int j = 0; j <= n; ++j) dp[0][j] = 1;
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            dp[i][j] = dp[i][j - 1];
            if (A[i - 1] == X[j - 1]) {
                dp[i][j] += dp[i - 1][j - 1];
            }
        }
    }
    return dp[m][n];
}

void solve2(const string &X, const string &A) {
    int Z = countWaysToFormA(X, A);
    ofstream fout("axyz.out");
    fout << Z << endl;
    fout.close();
}

int main() {
    ifstream fin("axyz.in");
    int p;
    fin >> p;
    string A;
    fin >> A;
    int N;
    fin >> N;
    string X;
    for (int i = 0; i < N; ++i) {
        char digit;
        fin >> digit;
        X.push_back(digit);
    }
    fin.close();

    if (p == 1) {
        solve1(X);
    } else if (p == 2) {
        solve2(X, A);
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**:
    - Read the value of `p`, which determines which problem to solve.
    - Read the number `A`, the number of digits `N` in `X`, and then read the digits of `X`.

2. **Solving Problem 1 (Generating Y)**:
    - Use `std::prev_permutation` to find the largest permutation of `X` that is strictly less than `X`.

3. **Solving Problem 2 (Counting Ways to Form A from X)**:
    - Use dynamic programming to count the number of ways to form `A` from `X` by deleting some of the digits of `X`.

In both cases, the results are written to `axyz.out` file as per the requirement.
