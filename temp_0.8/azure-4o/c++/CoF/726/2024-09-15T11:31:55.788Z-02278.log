---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `concurs.in` and write to `concurs.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La un concurs de matematică participă elevi din mai multe școli din diferite orașe. Pentru a se putea deosebi între ele lucrările lor, fiecare lucrare este codificată printr-un număr natural cu 3 cifre, să zicem $abc$, unde $a$ (cifra sutelor) este codul orașului, $b$ (cifra zecilor) este codul școlii din orașul $a$, iar $c$ (cifra unităților) este codul unui elev din școala $b$ din orașul $a$. Exemplu: lucrarea cu codul $328$ este lucrarea elevului cu codul $8$ de la școala cu codul $2$ din orașul cu codul $3$.
Se cunosc: un cod (al lucrării unui elev $H$, prietenul nostru), numărul $n$ de lucrări premiate și codurile acestora.

# Cerință

Se cere să se rezolve cerințele:

1. Verificați dacă $H$ este premiant, sau nu.
2. Determinați numărul de premii luate de elevii din orașul lui $H$ (inclusiv $H$, dacă a fost premiat).
3. Determinați numărul de premii luate de elevii din școala lui $H$ (inclusiv $H$, dacă a fost premiat).

# Date de intrare


De pe prima linie a fișierului de intrare `concurs.in` se citește codul lui $H$; de pe linia a doua a fișierului se citește valoarea $n$, iar de pe linia a treia se citesc cele $n$ coduri premiate. Codurile premiate sunt separate prin câte un spațiu.


# Date de ieșire


Cele 3 răspunsuri se vor afișa în fișierul de ieșire `concurs.out`, pe câte o linie. Pentru prima cerință se va afișa pe prima linie a fișierului un mesaj (`DA` sau `NU`), după cum $H$ a luat, sau nu a luat premiu. La cerințele 2 și 3 se va scrie câte un număr pe linia a doua respectiv pe linia a treia a fișierului de ieșire.


# Restricții și precizări

* $1 \leq n \leq 20$
* Codurile de oraș (cifra sutelor din fiecare cod) sunt de la $1$ la $5$, inclusiv.
* Codurile școlilor din fiecare oraș (cifra zecilor) sunt de la $0$ la $9$, inclusiv.
* Codurile elevilor (cifra unităților) sunt tot de la $0$ la $9$ inclusiv.
* Se acordă $30\%$ din punctaj pentru prima cerință rezolvată corect, $70\%$ din punctaj pentru primele două cerințe rezolvate corect și punctajul integral pentru toate cele $3$ cerințe rezolvate corect.

---

Example:
`concurs.in`
```
234
6
123 232 125 222 421 235
```

`concurs.out`
```
NU
3
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ solution to the given problem. The solution reads the input from `concurs.in` and writes the output to `concurs.out` without using `cin >>`, `cout <<`, `printf()`, or `scanf()`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream infile("concurs.in");
    std::ofstream outfile("concurs.out");

    int codH;
    int n;
    infile >> codH >> n;

    std::vector<int> premiate(n);
    for (int i = 0; i < n; i++) {
        infile >> premiate[i];
    }

    infile.close();

    int cityH = codH / 100;
    int schoolH = (codH / 10) % 10;

    bool isPremiat = false;
    int cityPremii = 0;
    int schoolPremii = 0;

    for (int i = 0; i < n; i++) {
        int city = premiate[i] / 100;
        int school = (premiate[i] / 10) % 10;
        
        if (premiate[i] == codH) {
            isPremiat = true;
        }
        
        if (city == cityH) {
            cityPremii++;
            if (school == schoolH) {
                schoolPremii++;
            }
        }
    }

    outfile << (isPremiat ? "DA" : "NU") << "\n";
    outfile << cityPremii << "\n";
    outfile << schoolPremii << "\n";

    outfile.close();

    return 0;
}
```

This solution does the following:
1. Reads the input from the file `concurs.in`.
2. Extracts the code of H and the number of awarded codes.
3. Reads the awarded codes.
4. Determines if H is awarded, counts the number of awarded students from H's city, and counts the number of awarded students from H's school.
5. Writes the results to the file `concurs.out`.

This approach ensures efficient computation by iterating through the list of awarded codes just once, making it optimal for the given constraints.
