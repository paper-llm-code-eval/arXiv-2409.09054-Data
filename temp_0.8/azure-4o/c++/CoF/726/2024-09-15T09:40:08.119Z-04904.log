---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `concurs.in` and write to `concurs.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La un concurs de matematică participă elevi din mai multe școli din diferite orașe. Pentru a se putea deosebi între ele lucrările lor, fiecare lucrare este codificată printr-un număr natural cu 3 cifre, să zicem $abc$, unde $a$ (cifra sutelor) este codul orașului, $b$ (cifra zecilor) este codul școlii din orașul $a$, iar $c$ (cifra unităților) este codul unui elev din școala $b$ din orașul $a$. Exemplu: lucrarea cu codul $328$ este lucrarea elevului cu codul $8$ de la școala cu codul $2$ din orașul cu codul $3$.
Se cunosc: un cod (al lucrării unui elev $H$, prietenul nostru), numărul $n$ de lucrări premiate și codurile acestora.

# Cerință

Se cere să se rezolve cerințele:

1. Verificați dacă $H$ este premiant, sau nu.
2. Determinați numărul de premii luate de elevii din orașul lui $H$ (inclusiv $H$, dacă a fost premiat).
3. Determinați numărul de premii luate de elevii din școala lui $H$ (inclusiv $H$, dacă a fost premiat).

# Date de intrare


De pe prima linie a fișierului de intrare `concurs.in` se citește codul lui $H$; de pe linia a doua a fișierului se citește valoarea $n$, iar de pe linia a treia se citesc cele $n$ coduri premiate. Codurile premiate sunt separate prin câte un spațiu.


# Date de ieșire


Cele 3 răspunsuri se vor afișa în fișierul de ieșire `concurs.out`, pe câte o linie. Pentru prima cerință se va afișa pe prima linie a fișierului un mesaj (`DA` sau `NU`), după cum $H$ a luat, sau nu a luat premiu. La cerințele 2 și 3 se va scrie câte un număr pe linia a doua respectiv pe linia a treia a fișierului de ieșire.


# Restricții și precizări

* $1 \leq n \leq 20$
* Codurile de oraș (cifra sutelor din fiecare cod) sunt de la $1$ la $5$, inclusiv.
* Codurile școlilor din fiecare oraș (cifra zecilor) sunt de la $0$ la $9$, inclusiv.
* Codurile elevilor (cifra unităților) sunt tot de la $0$ la $9$ inclusiv.
* Se acordă $30\%$ din punctaj pentru prima cerință rezolvată corect, $70\%$ din punctaj pentru primele două cerințe rezolvate corect și punctajul integral pentru toate cele $3$ cerințe rezolvate corect.

---

Example:
`concurs.in`
```
234
6
123 232 125 222 421 235
```

`concurs.out`
```
NU
3
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's write the solution in C++ while keeping efficiency in mind. The solution will read input from `concurs.in` file and write the results to `concurs.out` file. We'll use file I/O operations to achieve this. Below is the code:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

int main() {
    std::ifstream inFile("concurs.in");
    std::ofstream outFile("concurs.out");

    if (!inFile.is_open() || !outFile.is_open()) {
        return 1;
    }

    int H, n;
    inFile >> H >> n;

    std::vector<int> premiates(n);
    for (int i = 0; i < n; ++i) {
        inFile >> premiates[i];
    }

    int H_city = H / 100;
    int H_school = (H / 10) % 10;

    bool H_premiant = false;
    int city_count = 0, school_count = 0;

    for (int i = 0; i < n; ++i) {
        int code = premiates[i];
        if (code == H) {
            H_premiant = true;
        }
        if (code / 100 == H_city) {
            city_count++;
            if ((code / 10) % 10 == H_school) {
                school_count++;
            }
        }
    }

    outFile << (H_premiant ? "DA" : "NU") << "\n";
    outFile << city_count << "\n";
    outFile << school_count << "\n";

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the input values from `concurs.in` using `std::ifstream`.
2. **Parsing the Input**: 
   - The first value is the code of H.
   - The second value is the count of premiated codes.
   - The next `n` values are the premiated codes.
3. **Processing**:
   - Extract the city and school code from H.
   - Traverse through the list of premiated codes to check:
     - If `H` is in the list.
     - Count of premiated codes from the same city as `H`.
     - Count of premiated codes from the same school as `H`.
4. **Output Results**: Write the results to `concurs.out` using `std::ofstream`.

The code is designed to be efficient and straightforward, ensuring the best possible execution time given the constraints.
