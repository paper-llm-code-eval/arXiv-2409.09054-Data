---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the challenge efficiently, we need to consider the following steps:

1. **Reading Input**: We'll read the input values from the file `maxd.in`.
2. **Finding Divisors**: For each number in the given range, we need to find the number of divisors. This can be done by iterating up to the square root of the number to count divisors efficiently.
3. **Tracking Maximum Divisors**: While counting divisors, we need to keep track of the maximum number of divisors found and the corresponding smallest number with that many divisors.
4. **Counting Numbers with Maximum Divisors**: We also need to maintain a count of how many numbers have the maximum number of divisors.
5. **Writing Output**: Finally, we write the results to `maxd.out`.

Here's the C++ code to achieve this:

```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>

int count_divisors(int n) {
    int count = 0;
    int sqrt_n = static_cast<int>(sqrt(n));
    for (int i = 1; i <= sqrt_n; ++i) {
        if (n % i == 0) {
            if (i * i == n) {
                count += 1;
            } else {
                count += 2;
            }
        }
    }
    return count;
}

int main() {
    std::ifstream fin("maxd.in");
    std::ofstream fout("maxd.out");

    int a, b;
    fin >> a >> b;

    int max_divisors = 0;
    int min_number_with_max_divisors = b + 1;
    int count_numbers_with_max_divisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = count_divisors(i);
        if (divisors > max_divisors) {
            max_divisors = divisors;
            min_number_with_max_divisors = i;
            count_numbers_with_max_divisors = 1;
        } else if (divisors == max_divisors) {
            if (i < min_number_with_max_divisors) {
                min_number_with_max_divisors = i;
            }
            ++count_numbers_with_max_divisors;
        }
    }

    fout << min_number_with_max_divisors << " " << max_divisors << " " << count_numbers_with_max_divisors << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:

1. **count_divisors Function**: This function calculates the number of divisors of a number `n` by iterating up to its square root. If `i` is a divisor of `n`, both `i` and `n/i` are counted as divisors unless they are the same (when `n` is a perfect square).
2. **Main Function**:
   - We read the input values `a` and `b` from `maxd.in`.
   - We initialize variables to keep track of the maximum number of divisors found (`max_divisors`), the smallest number with that many divisors (`min_number_with_max_divisors`), and the count of numbers with the maximum divisors (`count_numbers_with_max_divisors`).
   - We iterate over the range `[a, b]`, computing the number of divisors for each number.
   - We update our tracking variables based on the number of divisors found.
   - Finally, we write the results to `maxd.out`.

This solution ensures efficient computation and meets the constraints given in the problem.
