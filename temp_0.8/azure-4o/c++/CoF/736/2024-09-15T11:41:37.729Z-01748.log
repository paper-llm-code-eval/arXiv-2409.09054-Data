---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem:

```cpp
#include <fstream>
#include <cmath>

// Function to count the number of divisors of a given number
int countDivisors(int n) {
    int count = 0;
    int sqrtN = static_cast<int>(std::sqrt(n));
    for (int i = 1; i <= sqrtN; ++i) {
        if (n % i == 0) {
            if (i * i == n) {
                count += 1; // Perfect square
            } else {
                count += 2; // Pair of divisors
            }
        }
    }
    return count;
}

int main() {
    std::ifstream infile("maxd.in");
    std::ofstream outfile("maxd.out");

    int a, b;
    infile >> a >> b;

    int maxDivisors = 0;
    int minNumber = b;
    int countMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumber = i;
            countMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            ++countMaxDivisors;
            if (i < minNumber) {
                minNumber = i;
            }
        }
    }

    outfile << minNumber << " " << maxDivisors << " " << countMaxDivisors << std::endl;

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - The code reads the interval bounds `a` and `b` from the input file `maxd.in`.

2. **Counting Divisors**:
   - The function `countDivisors` calculates the number of divisors for a given number `n`. This is done by iterating up to the square root of `n` and checking if `i` is a divisor. If `i` is a divisor, both `i` and `n/i` are counted as divisors unless `i * i == n` (perfect square).

3. **Finding the Number with Maximum Divisors**:
   - Iterate through each number in the interval `[a, b]`.
   - For each number, calculate the number of divisors using `countDivisors`.
   - Keep track of the maximum number of divisors found so far (`maxDivisors`).
   - If a new maximum is found, update `minNumber` and reset `countMaxDivisors`.
   - If the number of divisors equals the current maximum, increment `countMaxDivisors` and update `minNumber` if the current number is smaller.

4. **Writing Output**:
   - The code writes the smallest number with the maximum number of divisors, the number of divisors, and the count of such numbers to the output file `maxd.out`.

This solution is efficient given the constraints, ensuring that even the largest allowed range is processed quickly.
