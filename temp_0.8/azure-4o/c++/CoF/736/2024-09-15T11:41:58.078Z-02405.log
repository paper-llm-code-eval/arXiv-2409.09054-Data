---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the given problem efficiently, we need to consider the constraints and ensure the solution is optimized for both time and space. Here is a structured approach:

1. **Reading Input**:
   - Since the constraints can be quite large (`1 <= a <= b <= 1,000,000,000` and `0 <= b-a <= 10,000`), we need to read the input efficiently.
   
2. **Counting Divisors**:
   - For each number in the range `[a, b]`, count the number of divisors.
   - The number of divisors for a number `n` can be calculated by iterating from `1` to `sqrt(n)` and checking if the number divides `n` without a remainder.

3. **Finding the Minimum Number with Maximum Divisors**:
   - Track the number with the maximum divisors and if multiple numbers have the same maximum, track the smallest number and count how many such numbers exist.

4. **Writing Output**:
   - Write the smallest number with the maximum number of divisors, the number of divisors, and the count of such numbers.

Here is the efficient C++ solution for the problem:

```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <limits>

int countDivisors(int n) {
    int count = 0;
    int sqrtN = static_cast<int>(std::sqrt(n));
    for (int i = 1; i <= sqrtN; ++i) {
        if (n % i == 0) {
            if (i == n / i) {
                count += 1;
            } else {
                count += 2;
            }
        }
    }
    return count;
}

int main() {
    std::ifstream infile("maxd.in");
    std::ofstream outfile("maxd.out");

    int a, b;
    infile >> a >> b;

    int maxDivisors = 0;
    int minNumberWithMaxDivisors = std::numeric_limits<int>::max();
    int countMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumberWithMaxDivisors = i;
            countMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            if (i < minNumberWithMaxDivisors) {
                minNumberWithMaxDivisors = i;
            }
            countMaxDivisors++;
        }
    }

    outfile << minNumberWithMaxDivisors << " " << maxDivisors << " " << countMaxDivisors << '\n';

    return 0;
}
```

### Explanation of the Code

1. **Reading Input**:
   - We read the values of `a` and `b` from `maxd.in`.

2. **Counting Divisors**:
   - The function `countDivisors` calculates the number of divisors of a number `n` by iterating up to `sqrt(n)`.
   - If `i` is a divisor of `n`, then both `i` and `n/i` are divisors. Special care is taken when `i` equals `n/i` to avoid counting the divisor twice.

3. **Main Logic**:
   - For each number in the range `[a, b]`, we call `countDivisors` and update the maximum divisors found.
   - Track the smallest number with the maximum number of divisors and count how many such numbers exist.

4. **Writing Output**:
   - Finally, the result is written to `maxd.out` in the specified format.

This approach ensures that the solution is efficient and handles the given constraints effectively.
