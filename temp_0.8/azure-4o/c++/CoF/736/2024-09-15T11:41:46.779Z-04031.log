---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the problem described:

```cpp
#include <fstream>
#include <vector>
#include <cmath>

int countDivisors(int n) {
    int count = 0;
    int sqrtN = static_cast<int>(std::sqrt(n));
    for (int i = 1; i <= sqrtN; ++i) {
        if (n % i == 0) {
            if (i == n / i) {
                count += 1;
            } else {
                count += 2;
            }
        }
    }
    return count;
}

int main() {
    std::ifstream infile("maxd.in");
    std::ofstream outfile("maxd.out");

    int a, b;
    infile >> a >> b;

    int maxDivisors = 0;
    int minNumberWithMaxDivisors = 0;
    int countOfNumbersWithMaxDivisors = 0;

    for (int i = a; i <= b; ++i) {
        int divisors = countDivisors(i);
        if (divisors > maxDivisors) {
            maxDivisors = divisors;
            minNumberWithMaxDivisors = i;
            countOfNumbersWithMaxDivisors = 1;
        } else if (divisors == maxDivisors) {
            countOfNumbersWithMaxDivisors++;
            if (i < minNumberWithMaxDivisors) {
                minNumberWithMaxDivisors = i;
            }
        }
    }

    outfile << minNumberWithMaxDivisors << " " << maxDivisors << " " << countOfNumbersWithMaxDivisors << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Divisor Counting Function**:
   - `countDivisors(int n)`: This function calculates the number of divisors of `n`. It iterates up to the square root of `n` to count the divisors efficiently.

2. **Main Function**:
   - We read the input values `a` and `b` from the file `maxd.in`.
   - Variables `maxDivisors`, `minNumberWithMaxDivisors`, and `countOfNumbersWithMaxDivisors` are initialized to track the necessary values.
   - We iterate from `a` to `b`, calling `countDivisors` for each number.
   - Based on the number of divisors, we update our tracking variables as needed.
   - Finally, we write the results to `maxd.out`.

### Efficiency Considerations:
- The divisor counting function iterates only up to the square root of `n`, making it efficient.
- The main loop runs from `a` to `b`, which is at most 10,001 iterations (given the constraints), making the approach feasible within the provided limits.

This solution ensures that the numbers are processed efficiently and the correct results are determined for the given interval.
