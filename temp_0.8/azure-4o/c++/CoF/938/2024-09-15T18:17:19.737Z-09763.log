---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `labirint.in` and write to `labirint.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.

Notăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.


# Cerință


Pentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.


# Date de intrare


Pe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.


# Date de ieșire


în fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.


# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.
* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.


| # | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 10      | $1 \leq N, M \leq 50$, $d_0 = N + M - 1$ |
| 2 | 30      | $1 \leq N, M \leq 50$      |
| 3 | 60      | Fără restricții suplimentare.      |

---

Example:
`labirint.in`
```
5 6
010001
000101
011001
010010
001000
```

`labirint.out`
```
010000
000100
001001
010010
001000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to find the shortest path from the top-left corner (1, 1) to the bottom-right corner (N, M) in a binary matrix using only cells with a value of 0. We will then determine if changing each cell to 0 would produce a shorter path than the original shortest path.

Here's the C++ implementation for the solution. This implementation uses BFS (Breadth-First Search) to find the shortest path in the matrix. It efficiently reads the input from `labirint.in` and writes the output to `labirint.out` without using `cin`, `cout`, `scanf`, or `printf`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <utility>
#include <climits>

const int DIRS[4][2] = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

// Function to perform BFS and return the distance matrix
std::vector<std::vector<int>> bfs(const std::vector<std::vector<int>>& grid, int N, int M, std::pair<int, int> start) {
    std::vector<std::vector<int>> dist(N, std::vector<int>(M, INT_MAX));
    std::queue<std::pair<int, int>> q;
    q.push(start);
    dist[start.first][start.second] = 1;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for (const auto& dir : DIRS) {
            int nx = x + dir[0];
            int ny = y + dir[1];

            if (nx >= 0 && nx < N && ny >= 0 && ny < M && grid[nx][ny] == 0 && dist[nx][ny] == INT_MAX) {
                dist[nx][ny] = dist[x][y] + 1;
                q.push({nx, ny});
            }
        }
    }

    return dist;
}

int main() {
    std::ifstream fin("labirint.in");
    std::ofstream fout("labirint.out");

    // Read input
    int N, M;
    fin >> N >> M;
    std::vector<std::vector<int>> grid(N, std::vector<int>(M));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            char ch;
            fin >> ch;
            grid[i][j] = ch - '0';
        }
    }

    // Get the shortest path distance with the initial grid configuration
    auto distFromStart = bfs(grid, N, M, {0, 0});
    int d0 = distFromStart[N-1][M-1];

    std::vector<std::vector<int>> answer(N, std::vector<int>(M, 0));

    // Check each cell
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            if (grid[i][j] == 1) {
                // Temporarily set the cell to 0 and calculate the distance
                grid[i][j] = 0;
                auto distWithChange = bfs(grid, N, M, {0, 0});
                if (distWithChange[N-1][M-1] < d0) {
                    answer[i][j] = 1;
                }
                // Restore the cell
                grid[i][j] = 1;
            }
        }
    }

    // Write the answer to the output file
    for (const auto& row : answer) {
        for (int cell : row) {
            fout << cell;
        }
        fout << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

This solution reads input from the `labirint.in` file, processes the maze to find the shortest path using BFS, checks each cell to see if converting it from 1 to 0 will yield a shorter path, and writes the result to `labirint.out`. The BFS is performed twice for each cell, ensuring the solution is efficient considering the constraints.
