{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/938/2024-09-15T18:17:36.819Z-02566.log",
  "attemptStart": 1726424256.819,
  "attemptEnd": 1726424274.51,
  "attemptDuration": 17.69099998474121,
  "code": "#include <fstream>\n#include <vector>\n#include <queue>\n#include <tuple>\n#include <climits>\n\nusing namespace std;\n\nconst int INF = INT_MAX;\nconst int DIRECTIONS[4][2] = {{0,1}, {1,0}, {0,-1}, {-1,0}};\n\nint N, M;\nvector<vector<int>> labirint;\nvector<vector<int>> dist;\n\nbool is_valid(int x, int y) {\n    return x >= 0 && x < N && y >= 0 && y < M && labirint[x][y] == 0;\n}\n\nint bfs(int sx, int sy, int ex, int ey) {\n    if(labirint[sx][sy] == 1 || labirint[ex][ey] == 1) return INF;\n    \n    vector<vector<int>> dist(N, vector<int>(M, INF));\n    queue<pair<int, int>> q;\n    q.push({sx, sy});\n    dist[sx][sy] = 1;\n    \n    while(!q.empty()) {\n        auto [x, y] = q.front(); q.pop();\n        \n        for(auto& dir : DIRECTIONS) {\n            int nx = x + dir[0];\n            int ny = y + dir[1];\n            \n            if(is_valid(nx, ny) && dist[nx][ny] == INF) {\n                dist[nx][ny] = dist[x][y] + 1;\n                q.push({nx, ny});\n                if(nx == ex && ny == ey) {\n                    return dist[nx][ny];\n                }\n            }\n        }\n    }\n    return dist[ex][ey];\n}\n\nint main() {\n    ifstream fin(\"labirint.in\");\n    ofstream fout(\"labirint.out\");\n    \n    fin >> N >> M;\n    labirint.resize(N, vector<int>(M));\n    \n    for(int i = 0; i < N; ++i) {\n        string line;\n        fin >> line;\n        for(int j = 0; j < M; ++j) {\n            labirint[i][j] = line[j] - '0';\n        }\n    }\n    \n    int d0 = bfs(0, 0, N-1, M-1);\n    \n    vector<vector<char>> result(N, vector<char>(M, '0'));\n\n    for(int i = 0; i < N; ++i) {\n        for(int j = 0; j < M; ++j) {\n            if(labirint[i][j] == 1) {\n                labirint[i][j] = 0;\n                int d = bfs(0, 0, N-1, M-1);\n                if(d < d0) {\n                    result[i][j] = '1';\n                }\n                labirint[i][j] = 1;\n            }\n        }\n    }\n    \n    for(int i = 0; i < N; ++i) {\n        for(int j = 0; j < M; ++j) {\n            fout << result[i][j];\n        }\n        fout << '\\n';\n    }\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1991,
  "metadata": {
    "id": 938,
    "examples": [
      {
        "in": "5 6\n010001\n000101\n011001\n010010\n001000",
        "out": "010000\n000100\n001001\n010010\n001000",
        "explainer": ""
      }
    ],
    "body": "Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.\n\nNotăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.\n\n\n# Cerință\n\n\nPentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.\n\n\n# Date de intrare\n\n\nPe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.\n\n\n# Date de ieșire\n\n\nîn fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.\n\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 1 \\ 000$;\n* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.\n* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.\n\n\n| # | Punctaj | Restricții          |\n| - | ------- | ------------------- |\n| 1 | 10      | $1 \\leq N, M \\leq 50$, $d_0 = N + M - 1$ |\n| 2 | 30      | $1 \\leq N, M \\leq 50$      |\n| 3 | 60      | Fără restricții suplimentare.      |",
    "header": {
      "problem_id": 938,
      "problem_name": "Labirint",
      "tags": "[Grid, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "labirint.in",
      "output_filename": "labirint.out",
      "multiple_solutions": false,
      "original_source": "OJI 2021 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "labirint.in",
      "output": "labirint.out"
    },
    "consoleInteraction": false
  }
}