---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `labirint.in` and write to `labirint.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.

Notăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.


# Cerință


Pentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.


# Date de intrare


Pe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.


# Date de ieșire


în fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.


# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.
* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.


| # | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 10      | $1 \leq N, M \leq 50$, $d_0 = N + M - 1$ |
| 2 | 30      | $1 \leq N, M \leq 50$      |
| 3 | 60      | Fără restricții suplimentare.      |

---

Example:
`labirint.in`
```
5 6
010001
000101
011001
010010
001000
```

`labirint.out`
```
010000
000100
001001
010010
001000
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we can use the Breadth-First Search (BFS) algorithm to find the shortest path from the start to the end of the labyrinth. BFS is suitable because it explores nodes layer by layer, ensuring the shortest path in an unweighted grid. Let's break down the steps and implement the solution in C++.

1. **Read Input**: We need to read the matrix dimensions `N` and `M` and then the matrix itself.
2. **Compute d0**: Use BFS from `(1, 1)` to compute the shortest path length `d0` to `(N, M)`.
3. **Compute d(i, j) for each cell**: For each cell `(i, j)`, if it contains `1`, temporarily change it to `0` and compute the shortest path from `(1, 1)` to `(N, M)` using BFS again. Compare this path length with `d0`.
4. **Output the results**: Write the results in the specified format.

Here is the implementation:

```cpp
#include <iostream>
#include <fstream>
#include <queue>
#include <vector>
#include <cstring>

using namespace std;

const int MAXN = 1000;
const int INF = 1e9;
int N, M;
int maze[MAXN][MAXN];
int dist[MAXN][MAXN];
bool visited[MAXN][MAXN];

int dRow[] = {-1, 1, 0, 0};
int dCol[] = {0, 0, -1, 1};

bool isValid(int row, int col) {
    return (row >= 0 && row < N && col >= 0 && col < M && maze[row][col] == 0 && !visited[row][col]);
}

int bfs(int startRow, int startCol, int endRow, int endCol) {
    memset(visited, false, sizeof(visited));
    queue<pair<int, int>> q;
    q.push({startRow, startCol});
    visited[startRow][startCol] = true;
    dist[startRow][startCol] = 1;

    while (!q.empty()) {
        int row = q.front().first;
        int col = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int newRow = row + dRow[i];
            int newCol = col + dCol[i];

            if (isValid(newRow, newCol)) {
                q.push({newRow, newCol});
                visited[newRow][newCol] = true;
                dist[newRow][newCol] = dist[row][col] + 1;

                if (newRow == endRow && newCol == endCol) {
                    return dist[newRow][newCol];
                }
            }
        }
    }
    return INF;
}

int main() {
    ifstream fin("labirint.in");
    ofstream fout("labirint.out");

    fin >> N >> M;
    for (int i = 0; i < N; i++) {
        string line;
        fin >> line;
        for (int j = 0; j < M; j++) {
            maze[i][j] = line[j] - '0';
        }
    }

    int d0 = bfs(0, 0, N-1, M-1);

    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            if (maze[i][j] == 1) {
                maze[i][j] = 0;
                int d = bfs(0, 0, N-1, M-1);
                maze[i][j] = 1;
                fout << (d < d0 ? 1 : 0);
            } else {
                fout << 0;
            }
        }
        fout << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation
1. **Reading input**: We read the input from `labirint.in` using `ifstream`.
2. **BFS for shortest path**: We define a BFS function to compute the shortest path from `(0, 0)` to `(N-1, M-1)`.
3. **Output results**: We check each cell, temporarily set `1` cells to `0`, compute the shortest path again, compare it with `d0`, and restore the cell value. We output the result to `labirint.out`.

This approach ensures that we efficiently compute the required paths and compare them, writing the results in the required format.
