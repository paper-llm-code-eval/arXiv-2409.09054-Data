---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <limits>

using namespace std;

int main() {
    ifstream inFile("cetate.in");
    ofstream outFile("cetate.out");

    int c, N, M, K;
    inFile >> c >> N >> M >> K;

    vector<vector<int>> matrix(N + 1, vector<int>(M + 1, 0));
    vector<vector<int>> prefixSum(N + 1, vector<int>(M + 1, 0));

    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= M; ++j) {
            inFile >> matrix[i][j];
            prefixSum[i][j] = matrix[i][j] + prefixSum[i - 1][j] + prefixSum[i][j - 1] - prefixSum[i - 1][j - 1];
        }
    }

    int maxProfit = numeric_limits<int>::min();
    vector<int> bestConfig(4);

    if (c == 1) {
        for (int i1 = 1; i1 + K - 1 <= N; ++i1) {
            for (int j1 = 1; j1 + K - 1 <= M; ++j1) {
                int i2 = i1 + K - 1;
                int j2 = j1 + K - 1;
                int currentProfit = prefixSum[i2][j2] - prefixSum[i1 - 1][j2] - prefixSum[i2][j1 - 1] + prefixSum[i1 - 1][j1 - 1];
                if (currentProfit > maxProfit) {
                    maxProfit = currentProfit;
                    bestConfig = {i1, j1, i2, j2};
                }
            }
        }
    } else if (c == 2) {
        for (int subK = 1; subK <= K; ++subK) {
            for (int i1 = 1; i1 + subK - 1 <= N; ++i1) {
                for (int j1 = 1; j1 + subK - 1 <= M; ++j1) {
                    int i2 = i1 + subK - 1;
                    int j2 = j1 + subK - 1;
                    int currentProfit = prefixSum[i2][j2] - prefixSum[i1 - 1][j2] - prefixSum[i2][j1 - 1] + prefixSum[i1 - 1][j1 - 1];
                    if (currentProfit > maxProfit) {
                        maxProfit = currentProfit;
                        bestConfig = {i1, j1, i2, j2};
                    }
                }
            }
        }
    }

    outFile << maxProfit << "\n";
    outFile << bestConfig[0] << " " << bestConfig[1] << " " << bestConfig[2] << " " << bestConfig[3] << "\n";

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:

1. **Reading Inputs:**
   - The code starts by reading the inputs from the file `cetate.in`.
   - It reads the variables `c`, `N`, `M`, and `K`.
   - It then reads the matrix values into a 2D vector `matrix`.

2. **Prefix Sum Calculation:**
   - A prefix sum array, `prefixSum`, is created to store the sum of elements from the top-left corner (1,1) to any point (i,j).
   - This helps in calculating the sum of any submatrix efficiently.

3. **Finding the Maximum Profit Submatrix:**
   - Depending on the value of `c` (either 1 or 2), the program searches for the required submatrix.
   - For `c == 1`, it finds the submatrix of size `K x K` with the maximum profit.
   - For `c == 2`, it finds the submatrix of size at most `K x K` with the maximum profit.
   - This is accomplished using nested loops to iterate over all possible starting points of submatrices and calculating their sums using the prefix sum array.

4. **Output the Results:**
   - The maximum profit and the configuration of the submatrix are written to the file `cetate.out`.

### Performance:
The solution uses prefix sums to achieve efficient submatrix sum calculations, making it feasible to handle the maximum constraints (`N, M <= 400`) within a reasonable time frame.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Thank you for providing detailed feedback. It seems the issue lies in handling submatrices that have sides of length strictly less than `K`. In the previous solution, only submatrices up to `subK x subK` were considered, but the maximum sum could be found in non-square submatrices as well. We'll need a more general approach for `c == 2`.

The revised solution will handle the issue by considering all possible submatrices with sides of length up to `K`. Here is the corrected version:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <limits>

using namespace std;

int main() {
    ifstream inFile("cetate.in");
    ofstream outFile("cetate.out");

    int c, N, M, K;
    inFile >> c >> N >> M >> K;

    vector<vector<int>> matrix(N + 1, vector<int>(M + 1, 0));
    vector<vector<int>> prefixSum(N + 1, vector<int>(M + 1, 0));

    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= M; ++j) {
            inFile >> matrix[i][j];
            prefixSum[i][j] = matrix[i][j] + prefixSum[i - 1][j] + prefixSum[i][j - 1] - prefixSum[i - 1][j - 1];
        }
    }

    int maxProfit = numeric_limits<int>::min();
    vector<int> bestConfig(4);

    if (c == 1) {
        for (int i1 = 1; i1 + K - 1 <= N; ++i1) {
            for (int j1 = 1; j1 + K - 1 <= M; ++j1) {
                int i2 = i1 + K - 1;
                int j2 = j1 + K - 1;
                int currentProfit = prefixSum[i2][j2] - prefixSum[i1 - 1][j2] - prefixSum[i2][j1 - 1] + prefixSum[i1 - 1][j1 - 1];
                if (currentProfit > maxProfit) {
                    maxProfit = currentProfit;
                    bestConfig = {i1, j1, i2, j2};
                }
            }
        }
    } else if (c == 2) {
        for (int i1 = 1; i1 <= N; ++i1) {
            for (int j1 = 1; j1 <= M; ++j1) {
                for (int i2 = i1; i2 < i1 + K && i2 <= N; ++i2) {
                    for (int j2 = j1; j2 < j1 + K && j2 <= M; ++j2) {
                        int currentProfit = prefixSum[i2][j2] - prefixSum[i1 - 1][j2] - prefixSum[i2][j1 - 1] + prefixSum[i1 - 1][j1 - 1];
                        if (currentProfit > maxProfit) {
                            maxProfit = currentProfit;
                            bestConfig = {i1, j1, i2, j2};
                        } else if (currentProfit == maxProfit) {
                            vector<int> currentConfig = {i1, j1, i2, j2};
                            if (currentConfig < bestConfig) {
                                bestConfig = currentConfig;
                            }
                        }
                    }
                }
            }
        }
    }

    outFile << maxProfit << "\n";
    outFile << bestConfig[0] << " " << bestConfig[1] << " " << bestConfig[2] << " " << bestConfig[3] << "\n";

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation of the Fixes:
1. **Generalized Submatrices for `c == 2`:**
   - The previous solution only considered square submatrices for `c == 2`, but the problem requires considering all submatrices with sides up to `K`.
   - Hence, additional nested loops are added to iterate over all possible submatrices with height and width up to `K`.

2. **Handling Equal Profits:**
   - When multiple submatrices have the same maximum profit, the solution now checks for the lexicographically smallest configuration.
   - This is handled by comparing the current configuration with the best configuration found so far.

By incorporating these fixes, the solution now properly handles all submatrices with sides up to `K` and correctly identifies the lexicographically smallest configuration in case of ties. This should ensure the results match the expected output for all test cases.
