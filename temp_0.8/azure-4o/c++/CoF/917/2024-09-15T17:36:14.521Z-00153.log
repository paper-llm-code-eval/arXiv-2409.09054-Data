---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Given the constraints and requirements, we need to handle matrix calculations efficiently. We'll use a prefix sum array to quickly calculate the sum of any submatrix.

### Steps:
1. **Read the input file and parse the data**: We need to read the matrix dimensions, the value of K, and the matrix itself.
2. **Build the prefix sum matrix**: This will help in calculating the sum of any submatrix in constant time.
3. **Compute the maximum profit**:
    - For requirement 1, find the maximum profit for submatrices of exactly KxK.
    - For requirement 2, find the maximum profit for submatrices of size at most KxK.
4. **Write the results to the output file**.

### Implementation:
The prefix sum matrix will be built such that `prefix[i][j]` stores the sum of all elements in the submatrix from `(1,1)` to `(i,j)`. This allows us to compute the sum of any submatrix using the inclusion-exclusion principle.

Here's the C++ code that implements this logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <climits>

using namespace std;

int getSum(const vector<vector<long long>>& prefix, int i1, int j1, int i2, int j2) {
    long long sum = prefix[i2][j2];
    if (i1 > 1) sum -= prefix[i1-1][j2];
    if (j1 > 1) sum -= prefix[i2][j1-1];
    if (i1 > 1 && j1 > 1) sum += prefix[i1-1][j1-1];
    return sum;
}

int main() {
    ifstream fin("cetate.in");
    ofstream fout("cetate.out");
    
    int c, N, M, K;
    fin >> c >> N >> M >> K;
    
    vector<vector<int>> matrix(N+1, vector<int>(M+1));
    vector<vector<long long>> prefix(N+1, vector<long long>(M+1, 0));
    
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= M; ++j) {
            fin >> matrix[i][j];
            prefix[i][j] = matrix[i][j] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1];
        }
    }
    
    long long maxProfit = LLONG_MIN;
    int best_i1 = 0, best_j1 = 0, best_i2 = 0, best_j2 = 0;
    
    if (c == 1) {
        for (int i1 = 1; i1 + K - 1 <= N; ++i1) {
            for (int j1 = 1; j1 + K - 1 <= M; ++j1) {
                int i2 = i1 + K - 1;
                int j2 = j1 + K - 1;
                long long sum = getSum(prefix, i1, j1, i2, j2);
                if (sum > maxProfit) {
                    maxProfit = sum;
                    best_i1 = i1;
                    best_j1 = j1;
                    best_i2 = i2;
                    best_j2 = j2;
                }
            }
        }
    } else if (c == 2) {
        for (int k = 1; k <= K; ++k) {
            for (int i1 = 1; i1 + k - 1 <= N; ++i1) {
                for (int j1 = 1; j1 + k - 1 <= M; ++j1) {
                    int i2 = i1 + k - 1;
                    int j2 = j1 + k - 1;
                    long long sum = getSum(prefix, i1, j1, i2, j2);
                    if (sum > maxProfit) {
                        maxProfit = sum;
                        best_i1 = i1;
                        best_j1 = j1;
                        best_i2 = i2;
                        best_j2 = j2;
                    }
                }
            }
        }
    }
    
    fout << maxProfit << endl;
    fout << best_i1 << " " << best_j1 << " " << best_i2 << " " << best_j2 << endl;
    
    return 0;
}
```

### Explanation:
1. **Input Reading**: We read the input dimensions and the matrix values.
2. **Prefix Sum Computation**: We compute the prefix sum for each cell to allow O(1) submatrix sum queries.
3. **Finding the Maximum Profit**:
    - For `c == 1`, we iterate over all possible KxK submatrices.
    - For `c == 2`, we iterate over all possible submatrices up to KxK.
4. **Output the Results**: We write the maximum profit and the configuration of the submatrix to the output file.

This approach ensures efficiency by leveraging the prefix sum technique, and it handles the constraints effectively within the allowed limits.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

### Analysis of the Difference

The discrepancy arises because the initial solution only considers submatrices of size at most KxK, but it does not take into account all possible submatrix sizes (e.g., 1x1, 2x1, ..., KxK) while checking for the maximum profit. Specifically, it seems to be only evaluating square submatrices of size KxK and smaller squares, but not all possible rectangular configurations. 

### Fixing the Bug

To fix this, we need to iterate over all possible submatrices whose dimensions range from 1x1 to KxK. Specifically, the solution should consider all submatrices where the number of rows and columns are at most K.

Let’s ensure we correctly evaluate all potential submatrices for both conditions. Here's the updated solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <climits>

using namespace std;

int getSum(const vector<vector<long long>>& prefix, int i1, int j1, int i2, int j2) {
    long long sum = prefix[i2][j2];
    if (i1 > 1) sum -= prefix[i1-1][j2];
    if (j1 > 1) sum -= prefix[i2][j1-1];
    if (i1 > 1 && j1 > 1) sum += prefix[i1-1][j1-1];
    return sum;
}

int main() {
    ifstream fin("cetate.in");
    ofstream fout("cetate.out");

    int c, N, M, K;
    fin >> c >> N >> M >> K;

    vector<vector<int>> matrix(N+1, vector<int>(M+1));
    vector<vector<long long>> prefix(N+1, vector<long long>(M+1, 0));

    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= M; ++j) {
            fin >> matrix[i][j];
            prefix[i][j] = matrix[i][j] + prefix[i-1][j] + prefix[i][j-1] - prefix[i-1][j-1];
        }
    }

    long long maxProfit = LLONG_MIN;
    int best_i1 = 0, best_j1 = 0, best_i2 = 0, best_j2 = 0;

    if (c == 1) {
        for (int i1 = 1; i1 + K - 1 <= N; ++i1) {
            for (int j1 = 1; j1 + K - 1 <= M; ++j1) {
                int i2 = i1 + K - 1;
                int j2 = j1 + K - 1;
                long long sum = getSum(prefix, i1, j1, i2, j2);
                if (sum > maxProfit) {
                    maxProfit = sum;
                    best_i1 = i1;
                    best_j1 = j1;
                    best_i2 = i2;
                    best_j2 = j2;
                }
            }
        }
    } else if (c == 2) {
        for (int i1 = 1; i1 <= N; ++i1) {
            for (int j1 = 1; j1 <= M; ++j1) {
                for (int i2 = i1; i2 <= min(N, i1 + K - 1); ++i2) {
                    for (int j2 = j1; j2 <= min(M, j1 + K - 1); ++j2) {
                        long long sum = getSum(prefix, i1, j1, i2, j2);
                        if (sum > maxProfit) {
                            maxProfit = sum;
                            best_i1 = i1;
                            best_j1 = j1;
                            best_i2 = i2;
                            best_j2 = j2;
                        }
                    }
                }
            }
        }
    }

    fout << maxProfit << endl;
    fout << best_i1 << " " << best_j1 << " " << best_i2 << " " << best_j2 << endl;

    return 0;
}
```

### Explanation of the Fix

1. **Iterating All Possible Submatrices**:
    - For `c == 1`, the iteration remains the same as it only considers KxK submatrices.
    - For `c == 2`, we now iterate over all possible submatrices with dimensions ranging from 1x1 to KxK, ensuring we do not miss any potential submatrices by considering both rows and columns independently up to K.

2. **Prefix Sum Calculation**:
    - The prefix sum array is built to enable O(1) submatrix sum calculations, ensuring the solution remains efficient.

### Verification

With this corrected implementation, the solution should correctly identify the maximum profit and corresponding submatrix configuration for both condition 1 and condition 2 as specified in the problem statement. Ensure to recompile and retest the solution with the provided and additional test cases for verification.
