{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/812/2024-09-15T13:08:14.469Z-05362.log",
  "attemptStart": 1726405694.469,
  "attemptEnd": 1726405723.36,
  "attemptDuration": 28.890999794006348,
  "code": "#include <iostream>\n#include <fstream>\n#include <string>\n#include <unordered_map>\n#include <vector>\n\nusing namespace std;\n\nbool isVowel(char ch) {\n    return ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n}\n\nint main() {\n    ifstream fin(\"litere.in\");\n    ofstream fout(\"litere.out\");\n\n    if (!fin.is_open() || !fout.is_open()) {\n        cerr << \"Error opening file(s).\" << endl;\n        return 1;\n    }\n\n    int n, m;\n    string word;\n    fin >> n >> word >> m;\n\n    unordered_map<char, char> letterToCode;\n    vector<char> distinctLetters;\n\n    for (int i = 0; i < m; ++i) {\n        char code;\n        fin >> code;\n        distinctLetters.push_back(code);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (letterToCode.find(word[i]) == letterToCode.end()) {\n            letterToCode[word[i]] = distinctLetters[letterToCode.size()];\n        }\n    }\n\n    // Count vowel-consonant pairs\n    int vowelConsonantPairs = 0;\n    for (int i = 0; i < n - 1; ++i) {\n        bool firstIsVowel = isVowel(word[i]);\n        bool secondIsVowel = isVowel(word[i + 1]);\n        if ((firstIsVowel && !secondIsVowel) || (!firstIsVowel && secondIsVowel)) {\n            ++vowelConsonantPairs;\n        }\n    }\n\n    // Form `k_1` and calculate the sum of k_1 + k_2 + ... + k_n\n    string k1;\n    for (char ch : word) {\n        k1 += letterToCode[ch];\n    }\n\n    long long k1_val;\n    try {\n        k1_val = stoll(k1);\n    } catch (const std::invalid_argument& e) {\n        cerr << \"Invalid argument while converting k1 to long long\" << endl;\n        return 1;\n    } catch (const std::out_of_range& e) {\n        cerr << \"Out of range error while converting k1 to long long\" << endl;\n        return 1;\n    }\n\n    long long sum_k = 0;\n    for (int i = 0; i < n; ++i) {\n        long long current;\n        try {\n            current = stoll(k1.substr(i));\n        } catch (const std::invalid_argument& e) {\n            cerr << \"Invalid argument while converting substring to long long\" << endl;\n            return 1;\n        } catch (const std::out_of_range& e) {\n            cerr << \"Out of range error while converting substring to long long\" << endl;\n            return 1;\n        }\n        sum_k += current;\n    }\n\n    fout << vowelConsonantPairs << endl;\n    fout << k1_val << endl;\n    fout << sum_k << endl;\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2925,
  "metadata": {
    "id": 812,
    "examples": [
      {
        "in": "3\nCSC\n2\n1 2",
        "out": "0\n121\n143",
        "explainer": ""
      },
      {
        "in": "6\nCABABE\n4\n2 5 6 7",
        "out": "5\n256567\n320342",
        "explainer": ""
      }
    ],
    "body": "Algorel a primit un joc care conține $n$ jetoane pe care sunt scrise litere mari ale alfabetului. Fiecare literă are asociat un cod format dintr-o singură cifră nenulă. Jetoanele se așează în ordinea dată inițial, iar prin citirea literelor de pe acestea, de la primul la ultimul jeton, se formează un cuvânt. Dacă se citesc numerele de pe fiecare jeton, începând de la primul la ultimul, se obține un număr $k_1$. Jocul continuă la fel, dar se așează jetoanele începând de la al doilea la ultimul, obținându-se un nou număr $k_2$. Apoi, se așează jetoanele începând de la al treilea la ultimul, obținându-se un nou număr $k_3$, ș.a.m.d. până se ajunge la așezarea doar a ultimului jeton, caz în care se obține numărul $k_n$.\n\n# Cerință\n\nScrieți un program care citește numărul $n$ de jetoane, cele $n$ litere asociate jetoanelor, precum și codurile asociate literelor, în ordinea apariției lor și afișează:\n\n* numărul de perechi de litere consecutive din cuvântul inițial care au proprietatea că o literă este vocală și cealaltă este consoană (ordinea lor nu contează);\n* numărul $k_1$, format din așezarea inițială a jetoanelor;\n* suma $k_1 + k_2 + \\dots + k_n$.\n\n\n\n# Date de intrare\n\nFișierul de intrare `litere.in` va conține pe prima linie valoarea lui $n$, reprezentând numărul de jetoane, pe a doua linie un cuvânt format din $n$ litere mari (de la `A` la `Z`); literele sunt scrise una după alta, fără să fie separate cu spații, astfel încât prima literă este cea aflată pe primul jeton, a doua literă pe al doilea jeton ș.a.m.d. Pe a treia linie din fișier se află un număr $m$ ce reprezintă numărul de litere distincte, iar pe a patra linie $m$ valori reprezentând codurile literelor distincte ce apar în cuvânt. Codurile sunt date în ordinea apariției literelor în cuvânt și sunt numere naturale nenule formate dintr-o singură cifră, separate printr-un spațiu, pentru fiecare literă codul fiind dat o singură dată, chiar dacă litera se repetă.\n\n# Date de ieșire\n\nFișierul de ieșire `litere.out` va conține pe prima linie numărul de perechi de litere consecutive din cuvânt care au proprietatea că o literă este vocală și cealaltă consoană (ordinea lor nu contează), pe a doua linie numărul $k_1$, (format din așezarea inițială a jetoanelor), iar pe a treia linie suma $k_1 + k_2 + \\dots + k_n$.\n\n# Restricții și precizări\n\n* $0 < n \\leq 10 \\ 000$;\n* $0 < m < 27$;\n* Se acordă punctaje parțiale astfel:\n\t- $20$% pentru afișarea valorii corecte pe prima linie din fișierul rezultat (cerința $1$);\n\t- $40$% pentru afișarea valorii corecte pe a doua linie din fișierul rezultat (cerința $2$);\n\t- $40$% pentru afișarea valorii corecte pe a treia linie din fișierul rezultat (cerința $3$).",
    "header": {
      "problem_id": 812,
      "problem_name": "litere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 1,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "litere.in",
      "output_filename": "litere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "litere.in",
      "output": "litere.out"
    },
    "consoleInteraction": false
  }
}