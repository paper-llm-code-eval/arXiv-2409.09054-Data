{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/30/2024-09-15T09:52:52.142Z-00972.log",
  "attemptStart": 1726393972.142,
  "attemptEnd": 1726394041.662,
  "attemptDuration": 69.51999998092651,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nconst long long INF = 2000000001;\n\nstd::ifstream fin(\"summax.in\");\nstd::ofstream fout(\"summax.out\");\n\nint main() {\n    int v;\n    fin >> v;\n\n    int n, st, dr;\n    fin >> n >> st >> dr;\n\n    std::vector<std::vector<int>> triangle(n);\n    std::vector<std::vector<long long>> dp(n);\n    std::vector<std::vector<long long>> count(n);\n\n    for (int i = 0; i < n; ++i) {\n        triangle[i] = std::vector<int>(i + 1);\n        dp[i] = std::vector<long long>(i + 1);\n        count[i] = std::vector<long long>(i + 1, 0);\n        for (int j = 0; j <= i; ++j) {\n            fin >> triangle[i][j];\n        }\n    }\n\n    dp[0][0] = triangle[0][0];\n    count[0][0] = 1;\n\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j <= i; ++j) {\n            if (j < i) {\n                if (dp[i][j] < dp[i-1][j] + triangle[i][j]) {\n                    dp[i][j] = dp[i-1][j] + triangle[i][j];\n                    count[i][j] = count[i-1][j];\n                } else if (dp[i][j] == dp[i-1][j] + triangle[i][j]) {\n                    count[i][j] += count[i-1][j];\n                }\n            }\n            if (j > 0) {\n                if (dp[i][j] < dp[i-1][j-1] + triangle[i][j]) {\n                    dp[i][j] = dp[i-1][j-1] + triangle[i][j];\n                    count[i][j] = count[i-1][j-1];\n                } else if (dp[i][j] == dp[i-1][j-1] + triangle[i][j]) {\n                    count[i][j] += count[i-1][j-1];\n                }\n            }\n        }\n    }\n\n    long long maxSum = 0;\n    long long totalCount = 0;\n    for (int j = 0; j < n; ++j) {\n        if (dp[n-1][j] > maxSum) {\n            maxSum = dp[n-1][j];\n            totalCount = count[n-1][j];\n        } else if (dp[n-1][j] == maxSum) {\n            totalCount += count[n-1][j];\n        }\n    }\n\n    if (v == 1) {\n        if (totalCount > INF) totalCount = INF;\n        fout << totalCount << std::endl;\n        return 0;\n    }\n\n    std::vector<std::vector<int>> paths;\n\n    auto dfs = [&](auto&& self, int i, int j, std::vector<int>& path) -> void {\n        if (i == 0) {\n            paths.push_back(path);\n            return;\n        }\n        if (j < i && dp[i][j] == dp[i-1][j] + triangle[i][j] && count[i-1][j] > 0) {\n            path.push_back(j + 1);\n            self(self, i-1, j, path);\n            path.pop_back();\n        }\n        if (j > 0 && dp[i][j] == dp[i-1][j-1] + triangle[i][j] && count[i-1][j-1] > 0) {\n            path.push_back(j);\n            self(self, i-1, j-1, path);\n            path.pop_back();\n        }\n    };\n\n    for (int j = 0; j < n; ++j) {\n        if (dp[n-1][j] == maxSum) {\n            std::vector<int> path = { j + 1 };\n            dfs(dfs, n-1, j, path);\n        }\n    }\n\n    std::sort(paths.begin(), paths.end());\n    for (int i = st - 1; i < dr; ++i) {\n        fout << paths[i][paths[i].size() - 1];\n        for (int j = paths[i].size() - 2; j >= 0; --j) {\n            fout << \" \" << paths[i][j];\n        }\n        fout << \"\\n\";\n    }\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5179,
  "metadata": {
    "id": 30,
    "examples": [
      {
        "in": "1\n5 2 4\n5\n2 4\n7 5 6\n6 6 5 5\n3 4 3 4 4",
        "out": "6",
        "explainer": ""
      },
      {
        "in": "2\n5 2 4\n5\n2 4\n7 5 6\n6 6 5 5\n3 4 3 4 4",
        "out": "1 1 1 2 2\n1 2 2 2 2\n1 2 3 3 4",
        "explainer": ""
      }
    ],
    "body": "Avem o matrice triunghiulară cu $n$ linii, cu elemente numere întregi. În această matrice putem construi un traseu după următoarea regulă:\n- primul element al traseului este elementul $a_{1,1}$\n- dacă elementul $a_{i,j}$ aparţine traseului, atunci următorul element al traseului poate fi doar $a_{i+1,j}$ sau $a_{i+1,j+1}$, pentru orice $1≤j≤i≤n$\n\nTraseul se va codifica cu numerele de ordine ale coloanelor, parcurgând liniile de la $1$ la $n$. Valoarea traseului este egală cu suma elementelor ce îl formează.\n\n~[summax.png]\n\nTraseul evidenţiat în exemplul din dreapta are valoarea $5+4+6+5+4=24$, şi se codifică cu `1,2,3,3,4`.\n\nFie mulţimea tuturor traseelor de valoare maximă generate în ordine lexicografică și numerotate. Pentru exemplul alăturat avem șase trasee de lungime maximă:\n* traseul $1$.\t`1 1 1 1 2`     ($5+2+7+6+4=24$)\n* traseul $2$.\t`1 1 1 2 2`     ($5+2+7+6+4=24$)\n* traseul $3$.\t`1 2 2 2 2`     ($5+4+5+6+4=24$)\n* traseul $4$.\t`1 2 3 3 4`     ($5+4+6+5+4=24$)\n* traseul $5$.\t`1 2 3 4 4`     ($5+4+6+5+4=24$)\n* traseul $6$.\t`1 2 3 4 5`     ($5+4+6+5+4=24$)\n\n# Cerinţă \nCunoscând dimensiunea și elementele unei matrice triunghiulare, respectiv două numere naturale $\\text{st}$ şi $\\text{dr}$ ($\\text{st}≤\\text{dr}$), se cere să se determine:\n1. Numărul total al traseelor de valoare maximă. În cazul în care această valoare depășește $2 \\ 000 \\ 000 \\ 000$, se va tipări valoarea $2 \\ 000 \\ 000 \\ 001$;\n2. Traseele cu numerele de ordine $\\text{st}, \\text{st}+1, \\dots, \\text{dr}$.\n\n# Date de intrare\nFişierul `summax.in` conţine pe prima linie un număr natural $v$. Pentru toate testele de intrare, numărul $v$ poate avea doar valoarea $1$ sau $2$.\nA doua linie conține trei numere naturale $n$, $\\text{st}$ şi $\\text{dr}$, separate prin spaţiu. Următoarele $n$ linii conțin câte o linie a matricei triunghiulare astfel: linia $i$ conține $i$ elemente, și anume valorile $a_{i,1} a_{i,2} ... a_{i,i}$ pentru orice $1≤i≤n$.\n\n# Date de ieşire\nDacă valoarea lui $v$ este $1$, se va rezolva numai punctul $1$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se va scrie un singur număr natural ce reprezintă numărul traseelor de lungime maximă.\n\nDacă valoarea lui $v$ este $2$, se va rezolva numai punctul $2$ din cerință. În acest caz, în fişierul de ieşire `summax.out` se vor tipări pe câte o linie $n$ numere naturale separate prin spațiu, reprezentând codificările traseelor de valoare maximă cu numerele de ordine $\\text{st}, \\text{st}+1, \\dots, \\text{dr}$.\n\n# Restricții și precizări\n* $1 ≤ n ≤ 2 \\ 000$;\n* $1 ≤ st ≤ dr ≤ 2 \\ 000 \\ 000 \\ 000$;\n* $1 ≤ dr – st ≤ 1 \\ 000$;\n* elementele matricei triunghiulare sunt numere naturale strict pozitive.\n* valoarea maximă a traseului nu depășește $1 \\ 000 \\ 000 \\ 000$",
    "header": {
      "problem_id": 30,
      "problem_name": "summax",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "summax.in",
      "output_filename": "summax.out",
      "multiple_solutions": false,
      "original_source": "OJI 2016 XI-XII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "summax.in",
      "output": "summax.out"
    },
    "consoleInteraction": false
  }
}