---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure! Here's a C++ solution for the given problem. The code reads from `numere.in` and writes to `numere.out`, finds pairs of disjoint subsets with equal sums, and identifies the pair with the maximum sum.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <bitset>

using namespace std;

int main() {
    ifstream ifs("numere.in");
    ofstream ofs("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        ifs >> numbers[i];
    }

    unordered_map<int, vector<bitset<10>>> sum_to_bitsets_map;

    int num_pairs = 0;
    int max_sum = 0;
    bitset<10> best_subset1;
    bitset<10> best_subset2;

    for (int i = 1; i < (1 << 10); ++i) {
        bitset<10> subset(i);
        int current_sum = 0;
        for (int j = 0; j < 10; ++j) {
            if (subset[j]) {
                current_sum += numbers[j];
            }
        }

        if (sum_to_bitsets_map.find(current_sum) != sum_to_bitsets_map.end()) {
            for (const auto& existing_subset : sum_to_bitsets_map[current_sum]) {
                if ((existing_subset & subset).none()) {
                    ++num_pairs;
                    if (current_sum > max_sum) {
                        max_sum = current_sum;
                        best_subset1 = existing_subset;
                        best_subset2 = subset;
                    }
                }
            }
        }
        sum_to_bitsets_map[current_sum].push_back(subset);
    }

    ofs << num_pairs << " " << max_sum << "\n";

    for (int i = 0; i < 10; ++i) {
        if (best_subset1[i]) {
            ofs << numbers[i] << " ";
        }
    }
    ofs << "\n";

    for (int i = 0; i < 10; ++i) {
        if (best_subset2[i]) {
            ofs << numbers[i] << " ";
        }
    }
    ofs << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   The code reads the 10 integers from the input file `numere.in` and stores them in a vector `numbers`.

2. **Subset Generation and Sum Calculation:**
   Using bit manipulation, the code generates all possible subsets (excluding the empty subset). For each subset, it calculates the sum of its elements.

3. **Map of Sums to Subsets:**
   An unordered map `sum_to_bitsets_map` is used to store subsets by their sums. This allows efficient lookup for checking if there are existing subsets with the same sum.

4. **Finding Disjoint Subsets with Equal Sums:**
   For each subset, the code checks if there's a previously stored subset with the same sum and ensures that the two subsets are disjoint (using bitwise AND). If such a pair of subsets is found, it increments the count of valid pairs and potentially updates the best pair if the current sum is higher than the previously found sums.

5. **Output Results:**
   The code writes the number of pairs, the maximum sum, and the two subsets to `numere.out`.

This solution is efficient and leverages bit manipulation and hash maps to perform the required calculations effectively.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
65 276
78 97 69 32 
60 49 86 71 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The difference between the expected and found result is just the trailing space at the end of the subsets in the found output. This doesn't affect the actual values, but it does not match the exact expected format. This issue can be fixed by ensuring that the trailing space is removed when outputting the subsets.

Let's rewrite the solution to ensure it matches the expected output format and the results are correct.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <bitset>

using namespace std;

int main() {
    ifstream ifs("numere.in");
    ofstream ofs("numere.out");

    vector<int> numbers(10);
    for (int i = 0; i < 10; ++i) {
        ifs >> numbers[i];
    }

    unordered_map<int, vector<bitset<10>>> sum_to_bitsets_map;

    int num_pairs = 0;
    int max_sum = 0;
    bitset<10> best_subset1;
    bitset<10> best_subset2;

    for (int i = 1; i < (1 << 10); ++i) {
        bitset<10> subset(i);
        int current_sum = 0;
        for (int j = 0; j < 10; ++j) {
            if (subset[j]) {
                current_sum += numbers[j];
            }
        }

        if (sum_to_bitsets_map.find(current_sum) != sum_to_bitsets_map.end()) {
            for (const auto& existing_subset : sum_to_bitsets_map[current_sum]) {
                if ((existing_subset & subset).none()) {
                    ++num_pairs;
                    if (current_sum > max_sum) {
                        max_sum = current_sum;
                        best_subset1 = existing_subset;
                        best_subset2 = subset;
                    }
                }
            }
        }
        sum_to_bitsets_map[current_sum].push_back(subset);
    }

    ofs << num_pairs << " " << max_sum << "\n";

    bool first = true;
    for (int i = 0; i < 10; ++i) {
        if (best_subset1[i]) {
            if (!first) ofs << " ";
            ofs << numbers[i];
            first = false;
        }
    }
    ofs << "\n";

    first = true;
    for (int i = 0; i < 10; ++i) {
        if (best_subset2[i]) {
            if (!first) ofs << " ";
            ofs << numbers[i];
            first = false;
        }
    }
    ofs << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The code reads the 10 integers from the input file `numere.in` and stores them in a vector `numbers`.

2. **Subset Generation and Sum Calculation:**
   - Using bit manipulation, the code generates all possible subsets (excluding the empty subset). For each subset, it calculates the sum of its elements.

3. **Map of Sums to Subsets:**
   - An unordered map `sum_to_bitsets_map` is used to store subsets by their sums. This allows efficient lookup for checking if there are existing subsets with the same sum.

4. **Finding Disjoint Subsets with Equal Sums:**
   - For each subset, the code checks if there's a previously stored subset with the same sum and ensures that the two subsets are disjoint (using bitwise AND). If such a pair of subsets is found, it increments the count of valid pairs and potentially updates the best pair if the current sum is higher than the previously found sums.

5. **Output Results:**
   - The code writes the number of pairs, the maximum sum, and the two subsets to `numere.out`.
   - The output is formatted to avoid trailing spaces at the end of the lines.

This solution maintains the same logic but ensures the output format is correct by handling spaces appropriately while printing the subsets. This should produce the expected output without trailing spaces.
