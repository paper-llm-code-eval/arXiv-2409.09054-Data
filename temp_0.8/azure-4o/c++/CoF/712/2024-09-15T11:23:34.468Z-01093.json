{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 4,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/712/2024-09-15T11:23:34.468Z-01093.log",
  "attemptStart": 1726399414.468,
  "attemptEnd": 1726399490.801,
  "attemptDuration": 76.33300018310547,
  "code": "#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <bitset>\n#include <algorithm>\n#include <iostream>\n\nusing namespace std;\n\nconst int NUM_COUNT = 10;\n\nvoid print_subset(ofstream& fout, const bitset<NUM_COUNT>& subset, const vector<int>& numbers) {\n    bool first = true;\n    for (int i = 0; i < NUM_COUNT; ++i) {\n        if (subset[i]) {\n            if (!first) fout << \" \";\n            fout << numbers[i];\n            first = false;\n        }\n    }\n    fout << \"\\n\";\n}\n\nint main() {\n    // Open input and output files\n    ifstream fin(\"numere.in\");\n    ofstream fout(\"numere.out\");\n    \n    vector<int> numbers(NUM_COUNT);\n    for (int i = 0; i < NUM_COUNT; ++i) {\n        fin >> numbers[i];\n    }\n\n    unordered_map<int, vector<bitset<NUM_COUNT>>> subsets_sums;\n    int max_sum = 0;\n    vector<bitset<NUM_COUNT>> max_pair;\n    int count_pairs = 0;\n\n    // Generate all subsets using bit manipulation\n    for (int mask = 1; mask < (1 << NUM_COUNT); ++mask) {\n        bitset<NUM_COUNT> subset(mask);\n        int sum = 0;\n        for (int i = 0; i < NUM_COUNT; ++i) {\n            if (subset[i]) {\n                sum += numbers[i];\n            }\n        }\n\n        // Check if we already have this sum with a different disjoint subset\n        if (subsets_sums.find(sum) != subsets_sums.end()) {\n            for (const auto& other_subset : subsets_sums[sum]) {\n                if ((subset & other_subset).none()) { // Check if they are disjoint\n                    count_pairs++;\n                    if (sum > max_sum) {\n                        max_sum = sum;\n                        max_pair = {subset, other_subset};\n                    }\n                }\n            }\n        }\n\n        // Store this subset by its sum\n        subsets_sums[sum].push_back(subset);\n    }\n\n    // Sort subsets based on their first element to match the expected output order\n    if (max_pair.size() == 2 && max_pair[0].to_ulong() > max_pair[1].to_ulong()) {\n        swap(max_pair[0], max_pair[1]);\n    }\n\n    // Output results\n    fout << count_pairs << \" \" << max_sum << \"\\n\";\n    if (!max_pair.empty()) {\n        print_subset(fout, max_pair[0], numbers);\n        print_subset(fout, max_pair[1], numbers);\n    }\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5958,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}