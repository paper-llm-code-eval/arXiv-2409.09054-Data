{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/712/2024-09-15T11:23:47.574Z-07971.log",
  "attemptStart": 1726399427.574,
  "attemptEnd": 1726399456.878,
  "attemptDuration": 29.30400013923645,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <bitset>\n\nusing namespace std;\n\nint main() {\n    ifstream ifs(\"numere.in\");\n    ofstream ofs(\"numere.out\");\n\n    vector<int> numbers(10);\n    for (int i = 0; i < 10; ++i) {\n        ifs >> numbers[i];\n    }\n\n    unordered_map<int, vector<bitset<10>>> sum_to_bitsets_map;\n\n    int num_pairs = 0;\n    int max_sum = 0;\n    bitset<10> best_subset1;\n    bitset<10> best_subset2;\n\n    for (int i = 1; i < (1 << 10); ++i) {\n        bitset<10> subset(i);\n        int current_sum = 0;\n        for (int j = 0; j < 10; ++j) {\n            if (subset[j]) {\n                current_sum += numbers[j];\n            }\n        }\n\n        if (sum_to_bitsets_map.find(current_sum) != sum_to_bitsets_map.end()) {\n            for (const auto& existing_subset : sum_to_bitsets_map[current_sum]) {\n                if ((existing_subset & subset).none()) {\n                    ++num_pairs;\n                    if (current_sum > max_sum) {\n                        max_sum = current_sum;\n                        best_subset1 = existing_subset;\n                        best_subset2 = subset;\n                    }\n                }\n            }\n        }\n        sum_to_bitsets_map[current_sum].push_back(subset);\n    }\n\n    ofs << num_pairs << \" \" << max_sum << \"\\n\";\n\n    bool first = true;\n    for (int i = 0; i < 10; ++i) {\n        if (best_subset1[i]) {\n            if (!first) ofs << \" \";\n            ofs << numbers[i];\n            first = false;\n        }\n    }\n    ofs << \"\\n\";\n\n    first = true;\n    for (int i = 0; i < 10; ++i) {\n        if (best_subset2[i]) {\n            if (!first) ofs << \" \";\n            ofs << numbers[i];\n            first = false;\n        }\n    }\n    ofs << \"\\n\";\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2437,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}