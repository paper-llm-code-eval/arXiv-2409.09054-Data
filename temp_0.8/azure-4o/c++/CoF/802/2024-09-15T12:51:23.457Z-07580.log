---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a C++ solution for the given problem. This solution reads input from the file `secvente.in` and writes output to the file `secvente.out`, ensuring that no console I/O functions like `cin`, `cout`, `printf()`, `scanf()` are used.

```cpp
#include <fstream>
#include <vector>
#include <unordered_set>
#include <cmath>

using namespace std;

ifstream fin("secvente.in");
ofstream fout("secvente.out");

bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

unordered_set<int> generatePPrimes(int p) {
    unordered_set<int> pPrimes;
    long long power = p;
    while (power <= 30000) {
        pPrimes.insert(static_cast<int>(power));
        power *= p;
    }

    for (int i = 2; i <= 30000; ++i) {
        if (isPrime(i)) {
            long long q = i;
            power = 1;
            while (q * power <= 30000) {
                pPrimes.insert(static_cast<int>(q * power));
                power *= p;
            }
        }
    }
    return pPrimes;
}

int main() {
    int D;
    fin >> D;

    while (D--) {
        int n, p, k;
        fin >> n >> p >> k;

        vector<int> a(n);
        for (int i = 0; i < n; ++i) {
            fin >> a[i];
        }

        auto pPrimes = generatePPrimes(p);

        vector<pair<int, int>> results;

        for (int i = 0; i < n; ++i) {
            if (pPrimes.find(a[i]) != pPrimes.end()) {
                int count = 0;
                for (int j = i; j < n; ++j) {
                    if (pPrimes.find(a[j]) != pPrimes.end()) {
                        ++count;
                    }
                    if (count == k && pPrimes.find(a[j]) != pPrimes.end()) {
                        results.push_back({i + 1, j + 1});
                    }
                }
            }
        }

        fout << results.size() << '\n';
        for (const auto& res : results) {
            fout << res.first << ' ' << res.second << '\n';
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:

1. **Prime Checking**: The `isPrime` function checks if a number is prime.
2. **Generate p-Primes**: The `generatePPrimes` function generates all possible `p`-prime numbers up to 30000 using the given logic.
3. **Main Logic**: The main loop processes each dataset:
   - Reads the sequence into a vector.
   - Generates the `p`-prime numbers.
   - Iterates through each possible starting index, counting `p`-primes and recording valid sequences.
4. **Output**: The results are written to `secvente.out`.

This solution is optimized to handle the constraints efficiently. The use of sets for checking `p`-primes ensures quick membership testing and the use of power multiplication ensures all powers of `p` and products of `q` with powers of `p` are considered.
