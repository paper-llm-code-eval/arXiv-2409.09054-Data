---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's dive into the solution step by step.

### Plan

1. **Reading Input Efficiently:** 
   - We need to read from the file `livada.in` without using `cin` or `scanf` for better performance. We can use `ifstream` from the `<fstream>` library to read the input more efficiently.
   
2. **Majority Check per Row:**
   - For each row, we will use a hash map to count occurrences of each type of tree.
   - If any tree type count exceeds `n / 2`, then it is the majority for that row.
   
3. **Max Consecutive Trees per Row:**
   - For each row, we will iterate through the array and keep track of the current streak of consecutive identical trees.
   - We will update the maximum streak if the current streak exceeds it.

4. **Output Results Efficiently:**
   - We need to write to the file `livada.out` without using `cout` or `printf`. We can use `ofstream` from the `<fstream>` library.

### C++ Code

```cpp
#include <fstream>
#include <unordered_map>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("livada.in");
    std::ofstream fout("livada.out");

    int m, n, p;
    fin >> m >> n >> p;

    int majority_row_count = 0;
    int max_consecutive = 0;

    for (int i = 0; i < m; ++i) {
        std::vector<int> row(n);
        for (int j = 0; j < n; ++j) {
            fin >> row[j];
        }

        // Determine if there is a majority species in the row
        std::unordered_map<int, int> species_count;
        for (int j = 0; j < n; ++j) {
            species_count[row[j]]++;
        }

        bool majority_found = false;
        for (const auto& pair : species_count) {
            if (pair.second > n / 2) {
                majority_found = true;
                break;
            }
        }

        if (majority_found) {
            majority_row_count++;
        }

        // Determine the maximum number of consecutive trees of the same species
        int current_streak = 1;
        for (int j = 1; j < n; ++j) {
            if (row[j] == row[j - 1]) {
                current_streak++;
            } else {
                max_consecutive = std::max(max_consecutive, current_streak);
                current_streak = 1;
            }
        }
        max_consecutive = std::max(max_consecutive, current_streak);
    }

    fout << majority_row_count << "\n";
    fout << max_consecutive << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Reading from `livada.in`:**
   - Use `ifstream fin("livada.in");` to open the input file.
   - Read `m`, `n`, and `p`.

2. **Processing Each Row:**
   - For each row, read the values into a vector `row`.
   - Use an unordered map `species_count` to count occurrences of each tree type.
   - Check if any tree type count exceeds `n / 2`; if so, increment `majority_row_count`.

3. **Calculating Maximum Consecutive Trees:**
   - Traverse the row and count consecutive identical trees.
   - Update `max_consecutive` during the traversal.

4. **Writing to `livada.out`:**
   - Use `ofstream fout("livada.out");` to open the output file.
   - Write `majority_row_count` and `max_consecutive` to the file.

The above approach ensures efficient handling of large input and output, adhering to the constraints and requirements provided in the problem statement.
