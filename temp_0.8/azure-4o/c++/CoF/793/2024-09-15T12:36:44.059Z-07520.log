---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream fin("livada.in");
    std::ofstream fout("livada.out");

    int m, n, p;
    fin >> m >> n >> p;

    int majority_count = 0;
    int max_consecutive = 0;

    for (int i = 0; i < m; ++i) {
        std::vector<int> row(n);
        for (int j = 0; j < n; ++j) {
            fin >> row[j];
        }

        // Calculate majority
        std::unordered_map<int, int> freq;
        int half_plus_one = n / 2 + 1;
        bool majority_found = false;

        for (int x : row) {
            if (++freq[x] >= half_plus_one) {
                majority_found = true;
            }
        }
        if (majority_found) {
            ++majority_count;
        }

        // Calculate maximum consecutive
        int current_consecutive = 1;
        for (int j = 1; j < n; ++j) {
            if (row[j] == row[j - 1]) {
                ++current_consecutive;
                max_consecutive = std::max(max_consecutive, current_consecutive);
            } else {
                current_consecutive = 1;
            }
        }
    }

    fout << majority_count << "\n";
    fout << max_consecutive << "\n";

    return 0;
}
```

This solution reads the input from `livada.in`, processes the data to determine the number of rows with a majority variety and the maximum number of consecutive trees of the same variety, and then writes the results to `livada.out`.

### Explanation:

1. **Reading the Input:**
   We use `std::ifstream` to read the input from `livada.in`. The first three numbers are `m`, `n`, and `p`, representing the number of rows, the number of trees per row, and the number of different varieties, respectively.

2. **Processing Each Row:**
   For each row, we:
   - Store the varieties of trees in a vector named `row`.
   - Use an unordered map `freq` to count the occurrences of each variety in the row.

3. **Calculating the Majority Variety:**
   - For a variety to be a majority on a row, it must appear at least `n / 2 + 1` times.
   - We iterate over the row and update the frequency map. If any variety's count reaches the required majority threshold, we mark it as found.

4. **Calculating the Maximum Consecutive Trees of the Same Variety:**
   - We iterate through the row and count consecutive trees of the same variety, updating the maximum count if a longer streak is found.

5. **Writing the Output:**
   - The number of rows with a majority variety and the maximum number of consecutive trees of the same variety are written to `livada.out` using `std::ofstream`.

This solution is designed to be efficient in terms of both time and space, adhering to the constraints provided in the challenge.
