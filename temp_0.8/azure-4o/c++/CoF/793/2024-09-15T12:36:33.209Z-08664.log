---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to perform the following tasks:

1. **Reading the input data from the file `livada.in`:** We'll read the numbers `m`, `n`, and `p` and then read the matrix representing the orchard rows.
2. **Determine the number of rows with a majority variety:** For each row, count the occurrences of each variety and check if any variety occurs at least `floor(n/2) + 1` times.
3. **Determine the longest sequence of consecutive trees of the same variety:** For each row, find the longest sequence of consecutive identical numbers.
4. **Write the results to the file `livada.out`:** Output the number of rows with a majority variety and the longest sequence found.

Here's the C++ code that performs these tasks:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream infile("livada.in");
    std::ofstream outfile("livada.out");
    
    int m, n, p;
    infile >> m >> n >> p;

    std::vector<std::vector<int>> orchard(m, std::vector<int>(n));

    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> orchard[i][j];
        }
    }

    int majorityRows = 0;
    int maxConsecutive = 0;

    for (int i = 0; i < m; ++i) {
        std::unordered_map<int, int> counts;
        int max_count = 0;
        
        for (int j = 0; j < n; ++j) {
            counts[orchard[i][j]]++;
            max_count = std::max(max_count, counts[orchard[i][j]]);
        }

        if (max_count >= (n / 2) + 1) {
            majorityRows++;
        }

        int currentMaxConsecutive = 1;
        int currentConsecutive = 1;
        
        for (int j = 1; j < n; ++j) {
            if (orchard[i][j] == orchard[i][j - 1]) {
                currentConsecutive++;
            } else {
                currentConsecutive = 1;
            }
            currentMaxConsecutive = std::max(currentMaxConsecutive, currentConsecutive);
        }
        
        maxConsecutive = std::max(maxConsecutive, currentMaxConsecutive);
    }

    outfile << majorityRows << '\n';
    outfile << maxConsecutive << '\n';

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input:**
   - Open `livada.in` for reading.
   - Read the values of `m`, `n`, and `p`.
   - Read the matrix representing the orchard rows.

2. **Processing Rows:**
   - For each row, use a hashmap to count occurrences of each variety and track the maximum count.
   - Check if the maximum count in the row meets the majority condition (`>= floor(n/2) + 1`).
   - Track the number of rows that meet this condition.
   - For each row, find the longest sequence of consecutive identical elements by iterating through the row and maintaining a count of consecutive elements.

3. **Output the Results:**
   - Write the results to `livada.out`.
   - Close the input and output files.

### Efficiency:
- The solution reads and processes each element exactly once, making it efficient with a time complexity of `O(m * n)`.
- The use of unordered maps ensures that counting occurrences is efficient.

This solution should work efficiently within the given constraints.
