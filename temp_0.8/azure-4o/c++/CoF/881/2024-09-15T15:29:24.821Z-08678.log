---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `accesibil.in` and write to `accesibil.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr natural de cel puțin două cifre se numește accesibil dacă este format din cifre consecutive în ordine strict crescătoare. ($23$ și $6789$ sunt numere accesibile, în timp ce $7$, $2334$ și $654$ nu sunt numere accesibile)

# Cerință

Scrieți un program care să citească numerele $k, n$ și un șir de $n$ numere naturale și să afișeze:

1. cele mai mari $3$ numere accesibile, nu neapărat distincte, din șirul de $n$ numere;
2. câte dintre numerele din șirul dat care nu sunt accesibile, devin accesibile prin eliminarea exact a unei cifre;
3. cel mai mic și cel mai mare număr accesibil format din $k$ cifre;
4. numărul numerelor accesibile pare de $k$ cifre și numărul numerelor accesibile impare de $k$ cifre.

# Date de intrare

Fișierul de intrare `accesibil.in` conține pe prima linie un număr natural $p$. Pentru toate testele de intrare, numărul $p$ este un număr din mulțimea $\{1,2,3,4\}$. Pe linia a doua a fișierului de intrare se găsesc $k$ și $n$, iar pe a treia linie a fișierului de află $n$ numere naturale separate prin câte un spațiu.

# Date de ieșire

* Dacă valoarea lui $p$ este $1$, se va rezolva numai punctul $1$ din cerințe. În acest caz, în fișierul de ieșire `accesibil.out` se vor scrie, în ordine crescătoare, separate prin câte un spațiu, cele mai mari trei numere accesibile dintre cele $n$ numere aflate pe a treia linie a fișierului. Se garantează că pentru $p = 1$ sunt cel puțin trei numere accesibile în șirul de $n$ numere.
* Dacă valoarea lui $p$ este $2$, se va rezolva numai punctul $2$ din cerințe. În acest caz, în fișierul de ieșire `accesibil.out` se va scrie numărul numerelor din șirul dat care nu sunt accesibile, dar care ar deveni accesibile dacă li s-ar elimina o cifră.
* Dacă valoarea lui $p$ este $3$, se va rezolva numai punctul $3$ din cerințe. În acest caz, în fișierul de ieșire `accesibil.out` se vor scrie două valori, separate printr-un spațiu, reprezentând cel mai mic număr accesibil de $k$ cifre și cel mai mare număr accesibil de $k$ cifre. Dacă cele două numere ce ar trebui afișate coincid se va afișa valoarea lor comună o singură dată.
* Dacă valoarea lui $p$ este $4$, se va rezolva numai punctul $4$ din cerințe. În acest caz, în fișierul de ieșire `accesibil.out` se vor scrie două valori reprezentând numărul numerelor accesibile pare de $k$ cifre și numărul numerelor accesibile impare de $k$ cifre, în această ordine, separate prin spațiu.

# Restricții și precizări

* $2 \leq k \leq 9$ și $3 \leq n \leq 100 \ 000$;
* $0 \leq$ numerele din șir $\leq 2 \ 000 \ 000 \ 000$;
* Din numărul $5073$, de exemplu, prin eliminarea unei cifre se obțin numerele $507, 503, 573$ și $73$;
* Pentru a rezolva cerințele $1$ și $2$ nu folosim valoarea lui $k$, iar pentru cerințele $3$ și $4$ nu folosim șirul de n numere;
* Se acordă: $40$ de puncte pentru cerința $1$; $30$ de puncte pentru cerința $2$; 10 puncte pentru cerința $3$; 10 puncte pentru cerința $4$;

---

Example:
`accesibil.in`
```
1
3 8
6 12 235 5678 90 987 234 5678
```

`accesibil.out`
```
234 5678 5678
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <string>

// Function to check if a number is accessible
bool isAccessible(int num) {
    std::string s = std::to_string(num);
    for (size_t i = 1; i < s.size(); ++i) {
        if (s[i] <= s[i - 1]) return false;
    }
    return true;
}

// Function to check if a number becomes accessible by removing exactly one digit
bool becomesAccessibleByRemovingOneDigit(int num) {
    std::string s = std::to_string(num);
    for (size_t i = 0; i < s.size(); ++i) {
        std::string temp = s.substr(0, i) + s.substr(i + 1);
        if (isAccessible(std::stoi(temp))) return true;
    }
    return false;
}

// Function to generate the smallest and largest accessible numbers with k digits
std::pair<int, int> smallestAndLargestAccessibleOfKDigits(int k) {
    int smallest = 0, largest = 0;
    for (int i = 0; i < k; ++i) {
        smallest = smallest * 10 + (1 + i);
        largest = largest * 10 + (10 - k + i);
    }
    return {smallest, largest};
}

// Function to count even and odd accessible numbers of k digits
std::pair<int, int> countEvenAndOddAccessibleOfKDigits(int k) {
    int evenCount = 0, oddCount = 0;
    int smallest = 0;
    for (int i = 0; i < k; ++i) {
        smallest = smallest * 10 + (1 + i);
    }
    
    for (int i = smallest; i < 1000000000; ++i) {
        if (isAccessible(i)) {
            if (std::to_string(i).size() == k) {
                if (i % 2 == 0) {
                    ++evenCount;
                } else {
                    ++oddCount;
                }
            }
        }
    }

    return {evenCount, oddCount};
}

int main() {
    std::ifstream infile("accesibil.in");
    std::ofstream outfile("accesibil.out");
    int p, k, n;
    infile >> p >> k >> n;

    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        infile >> numbers[i];
    }

    if (p == 1) {
        std::vector<int> accessibleNumbers;
        for (int num : numbers) {
            if (isAccessible(num)) {
                accessibleNumbers.push_back(num);
            }
        }
        std::sort(accessibleNumbers.rbegin(), accessibleNumbers.rend());
        outfile << accessibleNumbers[0] << " " << accessibleNumbers[1] << " " << accessibleNumbers[2] << "\n";

    } else if (p == 2) {
        int count = 0;
        for (int num : numbers) {
            if (!isAccessible(num) && becomesAccessibleByRemovingOneDigit(num)) {
                ++count;
            }
        }
        outfile << count << "\n";

    } else if (p == 3) {
        auto result = smallestAndLargestAccessibleOfKDigits(k);
        if (result.first == result.second) {
            outfile << result.first << "\n";
        } else {
            outfile << result.first << " " << result.second << "\n";
        }

    } else if (p == 4) {
        auto counts = countEvenAndOddAccessibleOfKDigits(k);
        outfile << counts.first << " " << counts.second << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```
