---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir format din $N$ numere naturale nenule. Elementele șirului sunt numerotate de la stânga la dreapta începând cu poziția $1$.

# Cerință

Scrieți un program care să determine răspunsul pentru întrebări de următoarele tipuri:

1. Care este cea mai din stânga poziție care conține o valoare strict mai mare decât toate cele din dreapta sa? – întrebare de tipul $1$
2. Care sunt pozițiile care conțin valori strict mai mari decât toate cele din stânga lor? – întrebare de tipul $2$
3. Dacă fiecărui element aflat între prima și ultima apariție a maximului i-am mări valoarea pentru a ajunge egal cu maximul, care este suma totală a valorilor adăugate? – întrebare de tipul $3$

# Date de intrare

Fișierul de intrare `sir.in` conține pe prima linie un număr $C$ (care poate fi $1$, $2$ sau $3$), indicând tipul întrebării. Pe linia a doua se află un număr natural $N$, reprezentând numărul de elemente din șir. Pe a treia linie a fișierului de intrare se află $N$ numere naturale, reprezentând elementele șirului, date de la stânga la dreapta (cel mai din stânga are poziția $1$ și cel mai din dreapta are poziția $N$). Numerele de pe această linie sunt separate prin câte un spațiu.

# Date de ieșire

Dacă $C = 1$, fișierul de ieșire `sir.out` trebuie să conțină un număr natural ce reprezintă răspunsul la o întrebare de tipul $1$. Dacă $C = 2$, fișierul de ieșire trebuie să conțină, separați prin câte un spațiu și în ordine crescătoare, indicii determinați ca răspuns la o întrebare de tipul $2$. Dacă $C = 3$, fișierul de ieșire trebuie să conțină un număr ce reprezintă răspunsul la o întrebare de tipul $3$.

# Restricții și precizări

* $1 \leq C \leq 3$;
* $1 \leq N \leq 100 \ 000$;
* Numerele din șirul dat sunt cuprinse între $1$ și $10 \ 000$ inclusiv.
* Pentru teste în valoare de $24$ de puncte avem $C = 1$.
* Pentru teste în valoare de $32$ de puncte avem $C = 2$.
* Pentru teste în valoare de $44$ de puncte avem $C = 3$.

---

Example:
`sir.in`
```
1
7
3 2 2 5 3 5 4
```

`sir.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution to the given problem in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <numeric>

int main() {
    std::ifstream infile("sir.in");
    std::ofstream outfile("sir.out");

    int C, N;
    infile >> C >> N;
    std::vector<int> arr(N);
    
    for (int i = 0; i < N; ++i) {
        infile >> arr[i];
    }

    if (C == 1) {
        // Pass over the array from right to left to find the first position that is greater than all to its right.
        int max_right = -1;
        int result = -1;
        for (int i = N - 1; i >= 0; --i) {
            if (arr[i] > max_right) {
                max_right = arr[i];
                result = i + 1;  // Convert to 1-based index
            }
        }
        outfile << result << std::endl;
    } else if (C == 2) {
        // Pass over the array from left to right to find all positions that are greater than all to their left.
        std::vector<int> results;
        int max_left = -1;
        for (int i = 0; i < N; ++i) {
            if (arr[i] > max_left) {
                max_left = arr[i];
                results.push_back(i + 1);  // Convert to 1-based index
            }
        }
        for (size_t i = 0; i < results.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << results[i];
        }
        outfile << std::endl;
    } else if (C == 3) {
        // Determine the sum of the differences needed to make all values between the first and last max equal to the max.
        int max_val = *std::max_element(arr.begin(), arr.end());
        int first_pos = std::find(arr.begin(), arr.end(), max_val) - arr.begin();
        int last_pos = std::find(arr.rbegin(), arr.rend(), max_val) - arr.rbegin();
        last_pos = N - last_pos - 1;  // Convert reverse index to normal index

        int sum = 0;
        for (int i = first_pos; i <= last_pos; ++i) {
            sum += max_val - arr[i];
        }
        outfile << sum << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `sir.in` using `ifstream`, and the output is written to `sir.out` using `ofstream`.
2. **Handling Each Case**:
   - For **Case 1**: Traverse the array from right to left and find the first position where the value is greater than all values to its right. This is done by keeping track of the maximum value encountered from the right.
   - For **Case 2**: Traverse the array from left to right and collect all positions where the current value is greater than all values to its left. This uses a simple maximum tracker.
   - For **Case 3**: Find the maximum value in the array, determine its first and last occurrence, and compute the total sum needed to elevate all values between these two occurrences (inclusive) to the maximum value.
3. **Output**: The results for each case are written to `sir.out`.

This solution efficiently handles the constraints and ensures optimal performance by leveraging linear scans and simple arithmetic operations.
