{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/650/2024-09-15T09:33:30.503Z-06726.log",
  "attemptStart": 1726392810.503,
  "attemptEnd": 1726392870.189,
  "attemptDuration": 59.68599987030029,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <queue>\n#include <set>\n#include <utility>\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\n\nstruct State {\n    vector<vector<int>> matrix;\n    int operations;\n};\n\nbool isYinYang(const vector<vector<int>>& matrix, int n, int m) {\n    for (int i = 0; i < n; ++i) {\n        for (int j = 1; j < m; ++j) {\n            if (matrix[i][j] < matrix[i][j - 1]) return false;\n        }\n    }\n    for (int j = 0; j < m; ++j) {\n        for (int i = 1; i < n; ++i) {\n            if (matrix[i][j] < matrix[i - 1][j]) return false;\n        }\n    }\n    return true;\n}\n\nvoid readMatrixFromFile(const string& filename, vector<vector<int>>& matrix, int& n, int& m) {\n    ifstream infile(filename);\n    infile >> n >> m;\n    matrix.resize(n, vector<int>(m));\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            infile >> matrix[i][j];\n        }\n    }\n    infile.close();\n}\n\nvoid writeResultToFile(const string& filename, int result) {\n    ofstream outfile(filename);\n    outfile << result << endl;\n    outfile.close();\n}\n\nint main() {\n    int n, m;\n    vector<vector<int>> matrix;\n    readMatrixFromFile(\"yinyang.in\", matrix, n, m);\n\n    if (isYinYang(matrix, n, m)) {\n        writeResultToFile(\"yinyang.out\", 0);\n        return 0;\n    }\n\n    queue<State> q;\n    set<vector<vector<int>>> visited;\n    q.push({matrix, 0});\n    visited.insert(matrix);\n\n    while (!q.empty()) {\n        State current = q.front();\n        q.pop();\n\n        vector<vector<int>> mat = current.matrix;\n        int ops = current.operations;\n\n        // Try swapping rows\n        for (int i = 0; i < n - 1; ++i) {\n            swap(mat[i], mat[i + 1]);\n            if (visited.find(mat) == visited.end()) {\n                if (isYinYang(mat, n, m)) {\n                    writeResultToFile(\"yinyang.out\", ops + 1);\n                    return 0;\n                }\n                q.push({mat, ops + 1});\n                visited.insert(mat);\n            }\n            swap(mat[i], mat[i + 1]); // revert the swap\n        }\n\n        // Try swapping columns\n        for (int j = 0; j < m - 1; ++j) {\n            for (int i = 0; i < n; ++i) {\n                swap(mat[i][j], mat[i][j + 1]);\n            }\n            if (visited.find(mat) == visited.end()) {\n                if (isYinYang(mat, n, m)) {\n                    writeResultToFile(\"yinyang.out\", ops + 1);\n                    return 0;\n                }\n                q.push({mat, ops + 1});\n                visited.insert(mat);\n            }\n            for (int i = 0; i < n; ++i) {\n                swap(mat[i][j], mat[i][j + 1]); // revert the swap\n            }\n        }\n    }\n\n    // If we exhaust the BFS and find no solution\n    writeResultToFile(\"yinyang.out\", -1);\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2606,
  "metadata": {
    "id": 650,
    "examples": [
      {
        "in": "2 3\n1 2 4\n3 5 6",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2 3\n6 6 5\n4 6 2",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se dă o matrice $A$ cu $N$ linii și $M$ coloane, cu valori cuprinse între $1$ și $N \\cdot M$ inclusiv, nu neapărat distincte. O **operație** constă în selectarea a două linii sau două coloane consecutive și interschimbarea acestora (swap). O matrice **yin-yang** este o matrice în care $A[i][j] \\geq A[i][j – 1]$, pentru orice pereche $(i, j)$ cu $1 \\leq i \\leq N$ și $2 \\leq j \\leq M$ și $A[i][j] \\geq A[i – 1][j]$, pentru orice pereche $(i, j)$ cu $2 \\leq i \\leq N$ și $1 \\leq j \\leq M$.\n\n# Cerinţă\n\nSă se determine numărul minim de operații necesare pentru a transforma matricea dată într-o matrice yin-yang.\n\n# Date de intrare\n\nÎn fișierul de intrare `yinyang.in` se află scrise pe prima linie numerele naturale $N$ și $M$, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ numere naturale, reprezentând elementele matricei date $A$. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\n\nÎn fișierul `yinyang.out` se va scrie numărul minim de operații cerut sau $-1$ dacă nu există soluție.\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 100$;\n* Pentru teste în valoare de $9$ puncte: $1 \\leq N, M \\leq 5$;\n- Pentru alte teste în valoare de $18$ puncte: $N = 1$;\n- Pentru alte teste în valoare de $36$ de puncte elementele din matrice sunt **DISTINCTE**.",
    "header": {
      "problem_id": 650,
      "problem_name": "yinyang",
      "tags": "[Ad hoc, Sorting]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "yinyang.in",
      "output_filename": "yinyang.out",
      "multiple_solutions": false,
      "original_source": "OJI 2019 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "yinyang.in",
      "output": "yinyang.out"
    },
    "consoleInteraction": false
  }
}