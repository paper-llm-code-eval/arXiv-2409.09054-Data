{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/929/2024-09-15T17:55:58.968Z-05801.log",
  "attemptStart": 1726422958.968,
  "attemptEnd": 1726422977.259,
  "attemptDuration": 18.29100012779236,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <deque>\n\nconst int MOD = 1000000007;\n\nint main() {\n    std::ifstream inFile(\"leftmax.in\");\n    std::ofstream outFile(\"leftmax.out\");\n    \n    int N;\n    inFile >> N;\n    std::vector<int> heights(N);\n    for (int i = 0; i < N; ++i) {\n        inFile >> heights[i];\n    }\n\n    int count = 0;\n    \n    for (int length = 1; length <= N; ++length) {\n        std::deque<int> dq;\n        for (int i = 0; i < N; ++i) {\n            // Remove elements not in the current window\n            if (!dq.empty() && dq.front() <= i - length) {\n                dq.pop_front();\n            }\n            // Maintain deque to keep the maximum element at the front\n            while (!dq.empty() && heights[dq.back()] <= heights[i]) {\n                dq.pop_back();\n            }\n            dq.push_back(i);\n\n            // Check the current window\n            if (i >= length - 1) {\n                int start = i - length + 1;\n                int max_index = dq.front();\n                if (max_index - start < (length + 1) / 2) {\n                    count = (count + 1) % MOD;\n                }\n            }\n        }\n    }\n\n    outFile << count << \"\\n\";\n\n    inFile.close();\n    outFile.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1490,
  "metadata": {
    "id": 929,
    "examples": [
      {
        "in": "4\n1 4 2 3",
        "out": "8",
        "explainer": ""
      },
      {
        "in": "7\n1 2 3 4 5 6 7",
        "out": "7",
        "explainer": ""
      },
      {
        "in": "7\n7 6 5 4 3 2 1",
        "out": "28",
        "explainer": ""
      }
    ],
    "body": "În clasa lui *Dexter* sunt $N$ elevi de înălțimi distincte. La ora de sport, ei sunt așezați în linie, de la stânga la dreapta. Profesorul lor, *Johnny*, va selecta pentru un exercițiu elevi aflați pe poziții consecutive în linie, astfel încât cel mai înalt elev dintre cei selectați să se afle în prima jumătate a acestora.\n\nDe exemplu, dacă elevii au, în ordine, înălțimile $1$, $5$, $4$, atunci profesorul poate să îi selecteze pe cei cu înălțimile $5$ și $4$, dar nu poate să îi selecteze pe cei cu înălțimile $1$ și $5$. Desigur, există mai multe moduri de a selecta elevii astfel încât să fie satisfăcută condiția de mai sus. Profesorul *Johnny* ar vrea să afle în câte moduri se poate face acest lucru.\n\n# Cerinţă\nDându-se $N$ și înălțimile elevilor din clasă, aflați în câte moduri pot fi selectați oricâți elevi aflați pe poziții consecutive, astfel încât să fie îndeplinită condiția din enunț.\n\n# Date de intrare\nFișierul de intrare `leftmax.in` conține, pe prima linie, numărul $N$, iar pe a doua linie înălțimile elevilor în ordinea în care sunt așezați în linie.\n\n# Date de ieşire\nFișierul de ieșire `leftmax.out` conține pe prima linie răspunsul la cerință, sub formă de rest al împărțirii la $1\\ 000\\ 000\\ 007$ ($\\text{modulo }1\\ 000\\ 000\\ 007$).\n\n# Restricţii și precizări\n- $1 \\leq N \\leq 100\\ 000$\n- Înălțimea oricărui elev este un număr întreg cuprins între $1$ și $N$, inclusiv.\n- Dacă se selectează un număr impar de elevi, atunci considerăm că cel din mijlocul selecției se află în prima jumătate a elevilor selectați.\n- Pentru 10 puncte, $N \\leq 1\\ 000$ și elevii sunt ordonați descrescător după înălțime.\n- Pentru alte 35 de puncte, $N \\leq 1\\ 000$.\n- Pentru alte 20 de puncte, $N \\leq 30\\ 000$.",
    "header": {
      "problem_id": 929,
      "problem_name": "leftmax",
      "tags": "[Stack]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "leftmax.in",
      "output_filename": "leftmax.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "leftmax.in",
      "output": "leftmax.out"
    },
    "consoleInteraction": false
  }
}