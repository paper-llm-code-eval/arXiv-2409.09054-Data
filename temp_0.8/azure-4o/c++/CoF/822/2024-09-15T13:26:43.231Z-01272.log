---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Lizuca are $n$ flori ornamentale de înălțimi $h_1, h_2, \dots, h_n$, exprimate în centimetri. Pentru a uda plantele, Lizuca stabilește următorul program: în prima zi va alege o plantă pe care o va uda, în a doua zi va alege două plante pe care le va uda, în ziua a treia va alege trei plante pe care le va uda și așa mai departe. Dacă o plantă este udată într-o anumită zi, atunci crește $1$ centimetru până la sfârșitul acelei zile, iar dacă nu este udată, rămâne la înălțimea pe care o avea la sfârșitul zilei precedente.

# Cerință

Scrieți un program care determină:
1. un număr natural $S$, exprimat în centimetri, reprezentând suma înălțimilor finale ale tuturor plantelor, dacă Lizuca le-ar uda după procedeul descris, timp de n zile;
2. un număr natural $K$, reprezentând numărul maxim de zile în care Lizuca poate uda florile după procedeul descris anterior, astfel ca la sfârșitul celei de a $K$-a zi, nici o plantă ornamentală să nu atingă înălțimea $H$.

# Date de intrare

Prima linie a fișierului `flori.in` conține două numere naturale $n$ și $H$, separate printr-un spațiu, având semnificația din enunț.
Linia a doua conține $n$ numere naturale: $h_1, h_2, \dots, h_n$ separate prin câte un singur spațiu, reprezentând înălțimile inițiale ale plantelor.

# Date de ieșire

Fișierul `flori.out` va conține pe prima linie un număr natural $S$ având semnificația descrisă în cerința $1$. A doua linie va conține un număr natural $K$, având semnificația descrisă în cerința $2$.

# Restricții și precizări

* $1 \leq N, H \leq 100$;
* $1 \leq h_1, h_2, \dots, h_n < H$;
* O plantă poate fi udată o singură dată pe zi.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $30\%$ din punctajul total pentru fiecare test.
* Pentru rezolvarea corectă a cerinței $2$ se acordă $70\%$ din punctajul total pentru fiecare test.

---

Example:
`flori.in`
```
3 4
2 1 1
```

`flori.out`
```
10
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("flori.in");
    std::ofstream outfile("flori.out");

    int n, H;
    infile >> n >> H;

    std::vector<int> heights(n);
    for (int i = 0; i < n; ++i) {
        infile >> heights[i];
    }

    int total_sum = 0;
    int max_days = 0;
    int current_sum = 0;

    for (int day = 1; day <= n; ++day) {
        std::sort(heights.begin(), heights.end());
        for (int i = 0; i < day; ++i) {
            heights[i]++;
        }
        
        bool exceeds = false;
        for (int i = 0; i < n; ++i) {
            if (heights[i] >= H) {
                exceeds = true;
                break;
            }
        }
        
        if (exceeds) {
            break;
        } else {
            max_days = day;
        }
    }

    for (int i = 0; i < n; ++i) {
        total_sum += heights[i];
    }

    outfile << total_sum << "\n" << max_days << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation

1. **Reading Input**:
   - We read the input values from the file `flori.in` using an `ifstream`. 
   - The first line contains two integers, `n` and `H`.
   - The second line contains `n` integers representing the initial heights of the plants.

2. **Initialization**:
   - We initialize `total_sum` to 0 for the final height sum.
   - We initialize `max_days` to 0 for tracking the maximum number of days Lizuca can water the plants without any plant reaching height `H`.
   - We initialize `current_sum` to 0 for calculating the sum of the plant heights during the simulation.

3. **Watering Simulation**:
   - We simulate each day, where on day `d`, Lizuca waters `d` plants. 
   - We sort the heights to always water the shortest plants first for optimal growth management.
   - After each day, we check if any plant has reached or exceeded height `H`. If so, we stop the simulation.
   - If no plant exceeds `H`, we update `max_days`.

4. **Calculating Final Heights and Output**:
   - After the simulation, we sum up the final heights of all plants.
   - We write the final height sum and `max_days` to the output file `flori.out`.

This approach ensures both the correctness and efficiency of the solution within the given constraints.
