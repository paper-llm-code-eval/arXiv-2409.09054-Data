---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to generate the sequence described in the problem and find the m-th element in this sequence. Given the constraints, we need to ensure our solution is optimized for both time and space.

### Approach:

1. **Input Reading**: Since we are not allowed to use standard input/output functions like `cin`, `cout`, `scanf`, or `printf`, we'll read from and write to files directly.

2. **Using a Min-Heap**: To generate the sequence of numbers that have only the given primes as their divisors, we can use a min-heap (priority queue). This helps us efficiently get the next smallest number in the sequence.

3. **Generating the Sequence**:
   - Start with the given prime numbers and push them into the min-heap.
   - Use a set to keep track of numbers that have already been added to avoid duplicates.
   - Extract the smallest number from the heap (this is the next number in the sequence).
   - For each extracted number, multiply it with each of the given primes and push the resulting numbers into the heap (if they haven't been added already).

4. **Repeating the Process**: Repeat the above process until we have extracted the m-th number.

### Code Implementation:

Here is the C++ code implementing the above approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

int main() {
    std::ifstream inputFile("numar.in");
    std::ofstream outputFile("numar.out");

    int n, m;
    inputFile >> n >> m;

    std::vector<int> primes(n);
    for (int i = 0; i < n; ++i) {
        inputFile >> primes[i];
    }

    // Min-heap (priority queue) to store the sequence numbers
    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> minHeap;
    std::set<long long> seen;

    // Initialize the heap with the prime numbers
    for (int prime : primes) {
        minHeap.push(prime);
        seen.insert(prime);
    }

    long long currentNumber = 0;

    // Generate the sequence until we get the m-th element
    for (int i = 0; i < m; ++i) {
        currentNumber = minHeap.top();
        minHeap.pop();

        // Generate the next numbers in the sequence
        for (int prime : primes) {
            long long newNumber = currentNumber * prime;
            if (seen.find(newNumber) == seen.end()) {
                minHeap.push(newNumber);
                seen.insert(newNumber);
            }
        }
    }

    // Write the m-th element to the output file
    outputFile << currentNumber << std::endl;

    inputFile.close();
    outputFile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: We read the number of primes `n` and the position `m` from the `numar.in` file.
2. **Initializing the Heap**: Insert all given primes into the min-heap and the set.
3. **Generating the Sequence**:
   - Extract the smallest element from the heap.
   - For each extracted number, generate new numbers by multiplying it with each prime and push them into the heap if they haven't been seen before.
4. **Stopping at m-th Element**: Continue the process until the m-th element is extracted from the heap.
5. **Writing Output**: Write the m-th element to the `numar.out` file.

This approach ensures that we use a priority queue to always fetch the smallest number efficiently, and a set to avoid duplicates, making the solution both time-efficient and space-efficient.
