---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to generate numbers that are composed only of the given prime factors and find the m-th such number. Here's a step-by-step approach to solve this problem:

1. **Reading Input:** We will read `n`, `m`, and the list of `n` prime numbers from the input file `numar.in`.
2. **Generating the Sequence:** We will use a min-heap (priority queue) to efficiently generate the sequence of numbers that have only the given primes as their factors. By always taking the smallest number, multiplying it by each prime, and inserting the result back into the heap (if it hasn't been inserted before), we ensure that the sequence is generated in ascending order.
3. **Handling Duplicates:** To avoid inserting duplicates into the heap, we use a set to keep track of the numbers that have been added.
4. **Writing the Output:** Finally, the m-th number in the generated sequence will be written to the output file `numar.out`.

Here's the C++ solution implementing the above approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <unordered_set>
using namespace std;

int main() {
    ifstream inFile("numar.in");
    ofstream outFile("numar.out");

    int n, m;
    inFile >> n >> m;

    vector<int> primes(n);
    for (int i = 0; i < n; i++) {
        inFile >> primes[i];
    }

    unordered_set<long long> seen;
    priority_queue<long long, vector<long long>, greater<long long>> minHeap;

    for (int prime : primes) {
        minHeap.push(prime);
        seen.insert(prime);
    }

    long long current = 0;
    for (int i = 0; i < m; i++) {
        current = minHeap.top();
        minHeap.pop();

        for (int prime : primes) {
            long long next = current * prime;
            if (seen.find(next) == seen.end()) {
                minHeap.push(next);
                seen.insert(next);
            }
        }
    }

    outFile << current << endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:** We read `n`, `m`, and the primes from `numar.in`.
2. **Initialization:** We initialize a min-heap (`minHeap`) to keep track of the next smallest number to be processed and a set (`seen`) to track the numbers that have already been added to the heap to avoid duplicates.
3. **Generating the Sequence:** We start by pushing all the given primes into the heap and marking them as seen. Then, for `m` iterations, we extract the smallest number from the heap, and for each prime, we compute the product of the smallest number and the prime. If the product hasn't been seen before, we push it into the heap and mark it as seen.
4. **Output the Result:** After `m` iterations, the smallest number extracted in the last iteration is the m-th number in the sequence.

This approach ensures that the sequence is generated in a strictly increasing order, and it efficiently handles the potentially large number of combinations by using a min-heap and a set to manage duplicates.
