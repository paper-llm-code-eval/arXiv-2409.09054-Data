---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:In order to solve this challenge efficiently, we need to generate a sequence of numbers where each number has prime factors only from a given set of primes, and then find the m-th number in that sequence. One effective way to handle this problem is by using a min-heap (priority queue) to efficiently get the next smallest number in the sequence.

Here's the step-by-step plan:

1. **Input Reading**: Read the input values from the file `numar.in`.
2. **Initialization**: Create a min-heap to store the sequence numbers and a set to track numbers we've already seen to avoid duplicates.
3. **Sequence Generation**: Insert the initial prime numbers into the heap. Then, repeatedly extract the smallest number from the heap, add it to the sequence, and insert its multiples with the given primes back into the heap until we reach the m-th element.
4. **Output**: Write the m-th number in the sequence to the `numar.out` file.

Let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

int main() {
    std::ifstream fin("numar.in");
    std::ofstream fout("numar.out");
    
    int n, m;
    fin >> n >> m;
    
    std::vector<int> primes(n);
    for (int i = 0; i < n; ++i) {
        fin >> primes[i];
    }
    
    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> min_heap;
    std::set<long long> seen;
    
    // Initialize the heap with the prime numbers
    for (int i = 0; i < n; ++i) {
        min_heap.push(primes[i]);
        seen.insert(primes[i]);
    }
    
    long long current = 0;
    for (int i = 0; i < m; ++i) {
        current = min_heap.top();
        min_heap.pop();
        
        // Generate new numbers by multiplying the current number with each prime
        for (int j = 0; j < n; ++j) {
            long long new_num = current * primes[j];
            if (seen.find(new_num) == seen.end()) {
                min_heap.push(new_num);
                seen.insert(new_num);
            }
        }
    }
    
    fout << current << '\n';
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read `n` and `m` from the file `numar.in`, followed by reading the prime numbers into a vector.
2. **Min-Heap and Set Initialization**: We initialize a min-heap (priority queue) to keep track of the smallest numbers and a set to avoid duplicates.
3. **Inserting Initial Primes**: Each prime number is inserted into the heap and the set.
4. **Generating the Sequence**: We extract the smallest number from the heap `m` times. For each number extracted, we generate new numbers by multiplying it with each prime and insert these new numbers back into the heap if they haven't been seen before.
5. **Output**: After extracting `m` numbers, the current number is the m-th smallest number in the sequence, which we write to `numar.out`.

This approach ensures that we efficiently generate and track the sequence using the min-heap property, providing an optimal solution to the problem.
