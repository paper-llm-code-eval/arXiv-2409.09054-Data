---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the steps for solving this problem efficiently:

1. **Reading Input:** Instead of using standard input functions like `cin` or `scanf`, we will use file operations to read the input data.

2. **Generating the Sequence:** We need to generate a sequence of numbers which are composed solely of the given prime factors. This can be efficiently achieved using a min-heap (priority queue) to maintain the growing sequence of numbers.

3. **Heap Operations:** By starting with the given primes, we can repeatedly extract the smallest number from the heap, and for each extracted number, push its multiples (with the primes) back into the heap, ensuring that we do not push duplicate numbers by using a set for tracking.

4. **Output the Result:** Once we have generated enough numbers in the sequence, we can directly access the m-th smallest number and write it to the output file.

Here's the C++ code for this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <set>

int main() {
    std::ifstream infile("numar.in");
    std::ofstream outfile("numar.out");

    int n, m;
    infile >> n >> m;

    std::vector<int> primes(n);
    for (int i = 0; i < n; ++i) {
        infile >> primes[i];
    }

    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> min_heap;
    std::set<long long> seen_numbers;

    for (int prime : primes) {
        min_heap.push(prime);
        seen_numbers.insert(prime);
    }

    long long current = 0;
    for (int i = 0; i < m; ++i) {
        current = min_heap.top();
        min_heap.pop();

        for (int prime : primes) {
            long long next_number = current * prime;
            if (seen_numbers.find(next_number) == seen_numbers.end()) {
                min_heap.push(next_number);
                seen_numbers.insert(next_number);
            }
        }
    }

    outfile << current << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Input Reading:**
   - We use `ifstream` to read from the file `numar.in`.
   - We read `n` and `m`, then the list of `n` prime numbers.

2. **Heap Initialization:**
   - We initialize a min-heap (priority queue) and a set to keep track of seen numbers.
   - We initially push all prime numbers into the heap and mark them as seen.

3. **Generating the Sequence:**
   - We repeatedly extract the smallest number from the heap (which is the next number in the sequence).
   - For each extracted number, we compute its multiples with each prime and push those multiples back into the heap if they haven't been seen before.

4. **Output the Result:**
   - After extracting `m` numbers, the m-th smallest number will be the one we need. We write this number to `numar.out`.

This method ensures efficient generation of the sequence using a combination of a priority queue for ordering and a set for avoiding duplicates. This approach effectively handles the constraints and guarantees that we get the correct m-th number in the sequence.
