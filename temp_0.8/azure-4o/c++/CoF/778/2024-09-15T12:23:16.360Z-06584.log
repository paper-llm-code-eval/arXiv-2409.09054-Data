---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marius, elev în clasele gimnaziale, a prins gust pentru problemele în care intervin numere prime. Nu a lipsit de la lecţia în care doamna profesoară le-a exemplificat Ciurul lui Eratostene. Dar şi-a pus întrebarea: dacă ar construi şi el un şir special cum ar trebui să-i spună „Şirul lui Marius”? Cum ar trebui să arate acest şir? Ar trebui să pornească de la câteva numere prime şi apoi să construiască şirul format din acele numere naturale care au divizori doar dintre numerele prime date iniţial. Toate numerele din noul şir vor fi ordonate strict crescător. Exemplu dacă ar folosi $4$ numere prime: $2$, $5$, $7$, $11$, atunci ar putea forma şirul următor: $2$, $4$, $5$, $7$, $8$, $10$, $11$, $14$, $16$, $20$, $22$, etc. Şirul nu va conţine, de exemplu, valoarea $6$, deoarece $6$ are ca divizori primi pe $2$ şi $3$, dar numărul prim $3$ nu este printre numerele prime date iniţial. În exemplul de mai sus, în acest şir nou format, pe poziţia a treia este valoarea $5$, iar pe poziţia a zecea este valoarea $20$. Dar pe o poziţie oarecare dată din şir, oare ce valoare va fi? 

# Cerință

Dându-se un şir format din $n$ valori numere prime şi un număr natural $m$ să se determine care este valoarea de pe poziţia $m$ din şirul format din valori strict crescătoare care au ca divizori doar valori din şirul iniţial al numerelor prime date.

# Date de intrare

Fişierul de intrare `numar.in` conţine pe prima linie două numere naturale separate prin câte un spaţiu $n \ m$, cu semnificaţia: $n$ numărul de valori numere prime, iar $m$ poziţia valorii din şirul descris mai sus. Pe a doua linie separate prin câte un spaţiu sunt cele $n$ valori numere prime date strict crescător.

# Date de ieșire

Fişierul de ieşire `numar.out` conţine o singură valoare, a $m$-a valoare din şirul numerelor generate după regula descrisă.

# Restricții și precizări

* $1 \leq n \leq 100$;
* $1 \leq m \leq 15 \ 000$;
* Datele problemei vor fi astfel încât reprezentarea celei mai mari valori să poată fi descrisă pe 31 biţi.

---

Example:
`numar.in`
```
4 19
2 3 5 7
```

`numar.out`
```
27
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we can use a min-heap (priority queue) to generate the sequence of numbers that have only the given primes as divisors. The plan is as follows:

1. **Reading Input:** Read the input from `numar.in` file.
2. **Initialize Min-Heap:** Start with the given prime numbers and add them to a min-heap.
3. **Generate Sequence:** Extract the smallest element from the heap, multiply it by each of the primes, and add the results back to the heap if they are not already present.
4. **Find the m-th Element:** Repeat the extraction process until we've extracted `m` elements from the heap. The `m`-th extracted element is the answer.

Here is the C++ code implementing this approach:

```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <unordered_set>

int main() {
    // Open the input and output files
    std::ifstream infile("numar.in");
    std::ofstream outfile("numar.out");

    int n, m;
    infile >> n >> m;

    std::vector<int> primes(n);
    for (int i = 0; i < n; ++i) {
        infile >> primes[i];
    }

    // Min-heap to generate the sequence
    std::priority_queue<long long, std::vector<long long>, std::greater<long long>> minHeap;
    std::unordered_set<long long> seen;

    // Initialize the heap with the prime numbers
    for (int prime : primes) {
        minHeap.push(prime);
        seen.insert(prime);
    }

    long long current = 0;
    for (int i = 0; i < m; ++i) {
        current = minHeap.top();
        minHeap.pop();

        for (int prime : primes) {
            long long next = current * prime;
            if (seen.find(next) == seen.end()) {
                minHeap.push(next);
                seen.insert(next);
            }
        }
    }

    // The m-th element is the answer
    outfile << current << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We open the input file `numar.in` and output file `numar.out`.
   - Read integers `n` and `m` which represent the number of prime numbers and the position in the sequence respectively.
   - We read the `n` prime numbers into a vector.

2. **Initialize Min-Heap:**
   - We use a priority queue (min-heap) to keep track of the smallest elements. We also use an unordered set to avoid duplicate entries.
   - Insert all the given prime numbers into the min-heap and mark them as seen.

3. **Generate Sequence:**
   - We repeatedly extract the smallest element from the heap.
   - For each extracted element, we generate new candidates by multiplying it with each of the given primes. If a candidate hasn't been seen before, we add it to the heap and mark it as seen.
   - We continue this process until we have extracted `m` elements.

4. **Find the m-th Element:**
   - After extracting `m` elements, the last extracted element is the `m`-th element in the sequence, which we then write to the output file `numar.out`.

This solution leverages the efficiency of a min-heap to maintain the smallest elements and ensures that duplicates are not processed, leading to a relatively fast and memory-efficient solution suitable for the given constraints.
