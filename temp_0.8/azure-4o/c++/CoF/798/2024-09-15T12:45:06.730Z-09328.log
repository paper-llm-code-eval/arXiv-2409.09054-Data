---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `submit.in` and write to `submit.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică se antrenează pe un site de probleme cu evaluare online. Când el trimite pe site soluţia la o problemă, aceasta este evaluată pe un anumit număr de teste. Punctajul obţinut la problema respectivă va fi egal cu suma punctajelor obţinute la fiecare test. Punctajele asociate testelor pot fi diferite. În plus, dacă problema a fost complet rezolvată (a obţinut punctaj maxim la toate testele), Vasilică primeşte şi un bonus. 

Vasilică poate trimite soluţia la o problemă de mai multe ori. Când trimite soluţia prima dată, punctajul se calculează în modul prezentat anterior. Când trimite soluţia a doua oară, Vasilică va fi penalizat cu două puncte (adică din punctajul total obţinut la problemă se scad două puncte). Când trimite soluţia a treia oară penalizarea este de $4$ puncte, a patra oară de $6$ puncte ş.a.m.d. Observaţi că la fiecare nouă încercare penalizarea creşte cu două puncte.

# Cerință

Date fiind rezultatele obţinute pe teste de Vasilică la fiecare soluţie trimisă, să se determine punctajul maxim pe care el l-a obţinut la problema respectivă.

# Date de intrare

Fișierul de intrare `submit.in` conține pe prima linie numărul natural $N$ reprezentând numărul de teste pe care este evaluată soluţia. 

Pe cea de a doua linie se află $N$ numere naturale separate prin spaţii $P_1, P_2, \dots, P_N$, reprezentând în ordine punctajul acordat pentru fiecare dintre cele $N$ teste. 

Pe cea de a treia linie se află numărul natural $B$ reprezentând bonusul (numărul de puncte acordate în cazul în care pentru toate testele soluţia obţine punctaj pe toate testele). 

Pe a patra linie este scris un număr natural $M$ reprezentând numărul de soluţii trimise de Vasilică la problemă. 

Urmează $M$ linii, fiecare linie conţinând rezultatele obţinute pe teste la cele $M$ soluţii trimise de Vasilică, în ordinea trimiterii lor. Pe cea de a $i$-a linie dintre cele $M$ sunt scrise $N$ valori din mulţimea $\{0, 1\}$, separate prin spaţii; a $j$-a valoare este $0$ dacă testul $j$ nu a fost rezolvat corect, respectiv $1$ dacă testul $j$ a fost corect rezolvat (obţinând punctajul maxim alocat pe test).

# Date de ieșire

Fișierul de ieșire `submit.out` va conţine o singură linie pe care va fi scris punctajul maxim obţinut de Vasilică la problema respectivă.

# Restricții și precizări

* $1 \leq N, M \leq 100$;
* $0 \leq P_i, B \leq 100$;

---

Example:
`submit.in`
```
4
10 5 5 20
13
3
0 0 0 0
1 1 1 1
0 1 0 1
```

`submit.out`
```
51
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure! Let's break down the solution for the challenge step-by-step, and then we'll implement it in C++.

### Steps to Solve the Problem

1. **Read Input Data:**
    - First, read the number of tests (`N`).
    - Then, read the scores for each test (`P`).
    - After that, read the bonus points (`B`).
    - Then, read the number of submissions (`M`).
    - Finally, read the results of each submission.

2. **Calculate the Score for Each Submission:**
    - For each submission, calculate the total score obtained.
    - If all the tests in a submission are correct, add the bonus points.
    - Apply the penalty based on the submission attempt number.

3. **Track the Maximum Score:**
    - Keep track of the highest score obtained from all submissions.

4. **Write the Result:**
    - Write the maximum score to the output file.

Here is the complete solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inFile("submit.in");
    std::ofstream outFile("submit.out");

    int N;
    inFile >> N;

    std::vector<int> P(N);
    for (int i = 0; i < N; ++i) {
        inFile >> P[i];
    }

    int B;
    inFile >> B;

    int M;
    inFile >> M;

    std::vector<std::vector<int>> submissions(M, std::vector<int>(N));
    for (int i = 0; i < M; ++i) {
        for (int j = 0; j < N; ++j) {
            inFile >> submissions[i][j];
        }
    }

    int maxScore = -1e9;  // Initialize with a very small number

    for (int i = 0; i < M; ++i) {
        int currentScore = 0;
        bool allCorrect = true;
        for (int j = 0; j < N; ++j) {
            if (submissions[i][j] == 1) {
                currentScore += P[j];
            } else {
                allCorrect = false;
            }
        }
        if (allCorrect) {
            currentScore += B;
        }
        // Apply penalty
        int penalty = i * 2;
        currentScore -= penalty;
        
        // Update maximum score
        if (currentScore > maxScore) {
            maxScore = currentScore;
        }
    }

    outFile << maxScore << std::endl;

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation of the Code:
1. **Reading Input:**
   - The input is read using `ifstream` from the file `submit.in`.
   - We read the number of tests `N`, the points `P` for each test, the bonus `B`, the number of submissions `M`, and then the results of each submission.

2. **Calculating Scores:**
   - For each submission, we calculate the score by summing the points of the tests that were passed (`submissions[i][j] == 1`).
   - We check if all tests were passed (`allCorrect`), and if so, we add the bonus points.
   - We apply the penalty which increases by 2 points for each subsequent submission.

3. **Tracking Maximum Score:**
   - We keep track of the maximum score achieved across all submissions.

4. **Outputting the Result:**
   - We write the maximum score to the file `submit.out`.

This solution reads efficiently from the input and processes the submissions in a straightforward manner, ensuring correctness and optimal performance given the constraints.
