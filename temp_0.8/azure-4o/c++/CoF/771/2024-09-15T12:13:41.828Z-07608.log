---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pluricex.in` and write to `pluricex.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).

Directorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.

# Cerinţă
Scrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.

# Date de intrare
Fişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\dots$, $d_{nr}$.

Primul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieşire
Fişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.

# Restricţii şi precizări
- $0 < n \leq 22$
- $0 < k \leq 8$
- $0 < D \leq 10$
- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\ 000$.
- Spunem că vectorul $(x_1, x_2, \dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \leq j < i$, iar $x_i < y_i$.
- Pentru $20\%$ din teste soluţia este unică.

---

Example:
`pluricex.in`
```
6 3 5
1 2
2 1 4
3 2 4 3
1 5
2 3 1
1 3
```

`pluricex.out`
```
2 3 4
3 4 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this challenge, we'll break down the problem into the following steps:

1. **Read Input Data**: We need to read the input from the file `pluricex.in`. The first line contains three numbers `n`, `k`, and `D`. The subsequent `n` lines each describe the disciplines of each student.

2. **Store and Process the Disciplines**: We will store the disciplines each student is involved in using an array of vectors.

3. **Generate Combinations**: Using a backtracking approach, generate all combinations of `k` students from `n` students.

4. **Check Validity of Each Combination**: For each combination, check if it satisfies the condition that all `D` disciplines are covered.

5. **Output the Valid Combinations**: Write the valid combinations to the output file `pluricex.out` in lexicographical order.

Let's now implement the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to check if a team covers all disciplines
bool isValidTeam(const vector<int>& team, const vector<vector<int>>& students, int D) {
    vector<bool> covered(D + 1, false);

    for (int student : team) {
        for (int discipline : students[student]) {
            covered[discipline] = true;
        }
    }

    for (int i = 1; i <= D; ++i) {
        if (!covered[i]) return false;
    }

    return true;
}

// Backtracking function to generate all combinations
void generateCombinations(vector<int>& current, int n, int k, int index, vector<vector<int>>& result) {
    if (current.size() == k) {
        result.push_back(current);
        return;
    }

    for (int i = index; i <= n; ++i) {
        current.push_back(i);
        generateCombinations(current, n, k, i + 1, result);
        current.pop_back();
    }
}

int main() {
    ifstream infile("pluricex.in");
    ofstream outfile("pluricex.out");

    int n, k, D;
    infile >> n >> k >> D;

    vector<vector<int>> students(n + 1);

    for (int i = 1; i <= n; ++i) {
        int nr;
        infile >> nr;
        students[i].resize(nr);
        for (int j = 0; j < nr; ++j) {
            infile >> students[i][j];
        }
    }

    vector<int> current;
    vector<vector<int>> allCombinations;

    generateCombinations(current, n, k, 1, allCombinations);

    vector<vector<int>> validTeams;

    for (const auto& team : allCombinations) {
        if (isValidTeam(team, students, D)) {
            validTeams.push_back(team);
        }
    }

    sort(validTeams.begin(), validTeams.end());

    for (const auto& team : validTeams) {
        for (size_t i = 0; i < team.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << team[i];
        }
        outfile << "\n";
    }

    return 0;
}
```

### Explanation

1. **Input Reading**:
   - We read the values of `n`, `k`, and `D` from the input file.
   - We store each student's disciplines in a `vector<vector<int>>`.

2. **Generating Combinations**:
   - We use a recursive backtracking function `generateCombinations` to generate all possible combinations of `k` students from `n` students.

3. **Checking Valid Teams**:
   - For each generated combination, we check if it covers all `D` disciplines using the `isValidTeam` function.

4. **Output**:
   - Valid combinations are sorted and written to the output file in lexicographical order.

This approach ensures we consider all possible teams and output only those that meet the criteria, ensuring fast execution within the problem constraints.
