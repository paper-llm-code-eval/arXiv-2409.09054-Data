---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pluricex.in` and write to `pluricex.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).

Directorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.

# Cerinţă
Scrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.

# Date de intrare
Fişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\dots$, $d_{nr}$.

Primul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieşire
Fişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.

# Restricţii şi precizări
- $0 < n \leq 22$
- $0 < k \leq 8$
- $0 < D \leq 10$
- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\ 000$.
- Spunem că vectorul $(x_1, x_2, \dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \leq j < i$, iar $x_i < y_i$.
- Pentru $20\%$ din teste soluţia este unică.

---

Example:
`pluricex.in`
```
6 3 5
1 2
2 1 4
3 2 4 3
1 5
2 3 1
1 3
```

`pluricex.out`
```
2 3 4
3 4 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's break down the problem and then implement an efficient solution in C++.

### Steps to Solve the Problem

1. **Reading the Input**: We need to read from the file `pluricex.in` and parse the input to get the number of students `n`, the team size `k`, and the number of disciplines `D`. After that, we need to read the list of disciplines each student is participating in.
2. **Generating Combinations**: We need to generate all possible combinations of `k` students out of `n`.
3. **Validating Combinations**: For each combination of students, we need to check if they collectively cover all `D` disciplines.
4. **Writing the Output**: We need to write each valid combination to the file `pluricex.out` in lexicographical order.

### Implementation in C++

Here is the implementation:

```cpp
#include <fstream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

void generateCombinations(int n, int k, int start, vector<int>& curr_comb, vector<vector<int>>& all_combs) {
    if (curr_comb.size() == k) {
        all_combs.push_back(curr_comb);
        return;
    }
    for (int i = start; i <= n; ++i) {
        curr_comb.push_back(i);
        generateCombinations(n, k, i + 1, curr_comb, all_combs);
        curr_comb.pop_back();
    }
}

bool isValidTeam(const vector<vector<int>>& students, const vector<int>& team, int D) {
    vector<bool> covered(D + 1, false);
    for (int student : team) {
        for (int discipline : students[student - 1]) {
            covered[discipline] = true;
        }
    }
    for (int i = 1; i <= D; ++i) {
        if (!covered[i]) return false;
    }
    return true;
}

int main() {
    ifstream infile("pluricex.in");
    ofstream outfile("pluricex.out");

    int n, k, D;
    infile >> n >> k >> D;

    vector<vector<int>> students(n);
    for (int i = 0; i < n; ++i) {
        int nr;
        infile >> nr;
        students[i].resize(nr);
        for (int j = 0; j < nr; ++j) {
            infile >> students[i][j];
        }
    }

    vector<vector<int>> all_combinations;
    vector<int> current_comb;
    generateCombinations(n, k, 1, current_comb, all_combinations);

    vector<vector<int>> valid_combinations;
    for (const auto& comb : all_combinations) {
        if (isValidTeam(students, comb, D)) {
            valid_combinations.push_back(comb);
        }
    }

    sort(valid_combinations.begin(), valid_combinations.end());

    for (const auto& comb : valid_combinations) {
        for (size_t i = 0; i < comb.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << comb[i];
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation

1. **Reading Input**: The input is read using `ifstream` and stored in a vector of vectors, where each vector represents the disciplines a student participates in.
2. **Generating Combinations**: A recursive function `generateCombinations` generates all combinations of `k` students out of `n`.
3. **Validating Combinations**: The function `isValidTeam` checks if a given team of students covers all `D` disciplines.
4. **Sorting and Writing Output**: Valid combinations are sorted lexicographically and written to the output file `pluricex.out`.

This solution ensures that we generate combinations efficiently and check each for validity in a straightforward manner, achieving the goal of the challenge.
