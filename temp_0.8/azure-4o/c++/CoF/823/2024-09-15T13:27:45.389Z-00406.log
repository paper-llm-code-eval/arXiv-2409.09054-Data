---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to maximize the sum of the powers of the weapons Vasile has at his belt after potentially replacing some with the ones in the room. Here's the step-by-step approach:

1. **Reading Input:** We need to read the values from the file `arme.in`.
2. **Sorting for Optimal Replacement:** We can sort both the arrays of weapon powers (Vasile's current weapons and the weapons in the room). By sorting Vasile's weapons in ascending order and the room's weapons in descending order, we can maximize the sum by replacing Vasile's weakest weapons with the strongest available in the room.
3. **Replacement Strategy:** We iterate through Vasile's weapons and replace them with the weapons from the room if the room's weapon is stronger.
4. **Output the Result:** After making the optimal replacements, we compute the sum of the powers of Vasile's new set of weapons and write it to `arme.out`.

Here is the C++ code that implements this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("arme.in");
    std::ofstream outfile("arme.out");

    int N, M;
    infile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        infile >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        infile >> pc[i];
    }

    // Sort Vasile's weapons in ascending order
    std::sort(pb.begin(), pb.end());

    // Sort the room's weapons in descending order
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Perform the optimal replacements
    for (int i = 0; i < N && i < M; ++i) {
        if (pc[i] > pb[i]) {
            pb[i] = pc[i];
        } else {
            break; // No need to continue if we can't find a better replacement
        }
    }

    // Calculate the sum of Vasile's weapons' powers
    int max_sum = 0;
    for (int i = 0; i < N; ++i) {
        max_sum += pb[i];
    }

    outfile << max_sum << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading the Input:** We read values from `arme.in` using `ifstream`.
2. **Sorting:** 
   - Vasile's weapons (`pb`) are sorted in ascending order.
   - The room's weapons (`pc`) are sorted in descending order.
3. **Replacement Logic:** We replace Vasile's weapons starting from the weakest with the strongest available weapons from the room until no beneficial replacements can be made.
4. **Outputting the Result:** The resulting sum of the powers of the possibly replaced weapons is written to `arme.out`.

This solution ensures that Vasile's final set of weapons is as powerful as possible by leveraging efficient sorting and replacement strategies, making it both correct and efficient.
