---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a fast and efficient solution in C++ to solve the problem of maximizing the sum of weapon powers at Vasile's belt after replacements. The idea is to sort the list of Vasile's current weapon powers and the list of weapon powers available in the armory. We then attempt to replace Vasile's weakest weapons with the strongest available weapons in the armory to maximize the total power.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream inputFile("arme.in");
    std::ofstream outputFile("arme.out");

    int N, M;
    inputFile >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        inputFile >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        inputFile >> pc[i];
    }

    inputFile.close();

    std::sort(pb.begin(), pb.end()); // Sort the weapons Vasile currently has
    std::sort(pc.rbegin(), pc.rend()); // Sort the armory weapons in descending order

    int maxSum = 0;
    for (int i = 0; i < N; ++i) {
        // Replace only if the armory weapon is better
        if (i < M && pc[i] > pb[i]) {
            maxSum += pc[i];
        } else {
            maxSum += pb[i];
        }
    }

    outputFile << maxSum << std::endl;
    outputFile.close();

    return 0;
}
```

### Explanation

1. **Reading Input:** We read input values from the file `arme.in` into two vectors `pb` and `pc`.
2. **Sorting:** 
   - We sort `pb` in ascending order.
   - We sort `pc` in descending order (`std::sort(pc.rbegin(), pc.rend())`).
3. **Maximizing the Sum:**
   - We iterate through the sorted lists and for each position `i`, if the weapon from the armory `pc[i]` is more powerful than the current weapon `pb[i]`, we replace it. Otherwise, we keep the existing weapon.
4. **Output the Result:** Finally, we write the maximum sum of the weapon powers to `arme.out`.

This solution is efficient with a time complexity of \(O(N \log N + M \log M)\) due to the sorting operations, which is optimal for the input size constraints.
