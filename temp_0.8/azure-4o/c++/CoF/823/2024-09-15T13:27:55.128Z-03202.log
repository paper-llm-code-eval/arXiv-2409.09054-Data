---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's solve this problem in C++ with an efficient approach.

To maximize the sum of the powers of the weapons Vasile can have on his belt, we should always replace the weakest weapon on his belt with the strongest available weapon from the room, if it results in an increase in total power. This can be efficiently implemented using sorting.

Here are the steps for the solution:
1. Read the input values.
2. Sort the array of weapons Vasile currently has on his belt in ascending order.
3. Sort the array of weapons in the room in descending order.
4. Traverse both arrays and perform replacements as long as it increases the total power.
5. Calculate the total power of the weapons on Vasile's belt after performing possible replacements.
6. Write the output.

Here's the C++ code implementation:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("arme.in");
    std::ofstream fout("arme.out");

    int N, M;
    fin >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        fin >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        fin >> pc[i];
    }

    // Sort pb in ascending order
    std::sort(pb.begin(), pb.end());

    // Sort pc in descending order
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Replace the weakest weapons on the belt with the strongest from the room
    int min_size = std::min(N, M);
    for (int i = 0; i < min_size; ++i) {
        if (pc[i] > pb[i]) {
            pb[i] = pc[i];
        } else {
            break;  // No further replacements will be beneficial
        }
    }

    // Calculate the total power
    int total_power = 0;
    for (int i = 0; i < N; ++i) {
        total_power += pb[i];
    }

    fout << total_power << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation
1. **Reading Input**: The input is read from `arme.in` file using `ifstream`.
2. **Sorting Arrays**: 
    - Sort `pb` (weapons on the belt) in ascending order.
    - Sort `pc` (weapons in the room) in descending order.
3. **Replacement Logic**: Traverse both arrays and replace the weakest weapon on the belt with the strongest weapon from the room if it increases the total power.
4. **Calculate Total Power**: Sum the powers of the weapons on the belt after possible replacements.
5. **Write Output**: The result is written to `arme.out` file using `ofstream`.

This approach ensures that the solution is efficient, with a time complexity dominated by the sorting operations, i.e., `O(N log N + M log M)`. It reads and processes the input in linear time, making it suitable for the given constraints.
