---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, here's an efficient solution for the given problem in C++. The solution involves reading the input from `arme.in`, processing it to maximize the sum of the weapon powers at Vasile's belt, and writing the result to `arme.out`.

1. Read the input values from the file.
2. Store the powers of the weapons at Vasile's belt and the powers of the weapons in the armory.
3. Sort both lists: the belt weapons in ascending order and the armory weapons in descending order.
4. Replace the weakest weapons on the belt with the strongest weapons from the armory to maximize the total power.
5. Write the result to the output file.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream input("arme.in");
    std::ofstream output("arme.out");

    int N, M;
    input >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        input >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        input >> pc[i];
    }

    // Sort pb in ascending order and pc in descending order
    std::sort(pb.begin(), pb.end());
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Replace the smallest pb weapons with the largest pc weapons
    int max_sum = 0;
    for (int i = 0; i < N; ++i) {
        if (i < M && pc[i] > pb[i]) {
            max_sum += pc[i];
        } else {
            max_sum += pb[i];
        }
    }

    output << max_sum << std::endl;

    input.close();
    output.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `arme.in` where the first line contains `N` and `M`. The next line contains the powers of the weapons at Vasile's belt (`pb`), and the third line contains the powers of the weapons in the armory (`pc`).
2. **Sorting**: We sort the belt weapons (`pb`) in ascending order and the armory weapons (`pc`) in descending order to facilitate optimal replacement.
3. **Replacement Logic**: We iterate over the weapons on the belt. If a weapon from the armory is stronger than the current belt weapon, we replace it. Otherwise, we keep the belt weapon.
4. **Output**: Finally, we write the computed maximum sum to `arme.out`.

This approach ensures that the weakest belt weapons are replaced by the strongest available armory weapons, providing an efficient solution to maximize the sum of weapon powers.
