---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we'll use the following approach:

1. **Input Reading**: We'll read the input values from the `arme.in` file.
2. **Sorting**: We'll sort the array of weapons Vasile currently has (`pb`) in non-decreasing order. Similarly, we'll sort the array of weapons in the armory (`pc`) in non-increasing order.
3. **Maximizing Sum of Powers**: By replacing the weakest weapons Vasile has with the strongest weapons from the armory, we maximize the total power Vasile ends up with. This is achieved by iterating through the sorted lists and replacing the current weapon if the armory weapon is stronger.
4. **Output Writing**: Finally, we'll write the resulting maximum sum of powers to the `arme.out` file.

Here is the C++ code that implements this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream input("arme.in");
    std::ofstream output("arme.out");

    int N, M;
    input >> N >> M;

    std::vector<int> pb(N);
    std::vector<int> pc(M);

    for (int i = 0; i < N; ++i) {
        input >> pb[i];
    }

    for (int i = 0; i < M; ++i) {
        input >> pc[i];
    }

    // Sort pb in ascending order
    std::sort(pb.begin(), pb.end());
    // Sort pc in descending order
    std::sort(pc.begin(), pc.end(), std::greater<int>());

    // Replace weapons to maximize the power sum
    for (int i = 0; i < N && i < M; ++i) {
        if (pc[i] > pb[i]) {
            pb[i] = pc[i];  // replace if the weapon from armory is stronger
        }
    }

    // Calculate the sum of powers
    int sum = 0;
    for (int power : pb) {
        sum += power;
    }

    output << sum << std::endl;

    return 0;
}
```

### Explanation:

1. **Input Reading**: We read values `N` and `M`, then read the arrays `pb` and `pc`.
2. **Sorting**:
   - `pb` is sorted in ascending order so that we can easily replace the weakest weapons first.
   - `pc` is sorted in descending order to prioritize the strongest available weapons for replacement.
3. **Maximizing Sum of Powers**: We iterate over both arrays and replace `pb[i]` with `pc[i]` if `pc[i]` is greater.
4. **Output Writing**: We compute the total sum of `pb` and write it to `arme.out`.

This method ensures that the solution is efficient and meets the problem's constraints.
