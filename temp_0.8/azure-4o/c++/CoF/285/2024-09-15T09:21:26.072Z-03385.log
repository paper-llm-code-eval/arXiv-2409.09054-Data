---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pulsar.in` and write to `pulsar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

*Data stelară 3210:*

Căpitanul navei USS Enterprise, Jean-Luc Picard se află într-o misiune importantă în cuadrantul Beta al galaxiei.

Acesta trebuie să ajungă cât mai rapid de la planeta Vulcan până la planeta Qo'noS, dar din păcate pentru această misiune Jean-Luc Picard nu va putea să ajungă instantaneu la destinație folosind warp drive-ul navei, ci va trebui să se deplaseze în mod normal, din sector în sector.

Harta galaxiei este reprezentată sub forma unei tabele bidimensionale de dimensiune $N \times N$, în care fiecare celulă reprezintă un sector al galaxiei. Coordonatele sectorului în care se află planeta Vulcan sunt $(x_s, y_s)$, iar coordonatele sectorului în care se află planeta Qo'noS sunt $(x_f, y_f)$.

USS Enterprise se poate deplasa într-o unitate de timp dintr-un sector în oricare dintre sectoarele adiacente, fie pe aceeași linie, fie pe aceeași coloană. În plus, nava poate staționa o perioadă nedeterminată de timp în orice sector. Nava se poate afla doar pe un sector care la momentul actual de timp nu o pune în pericol.

Pentru că nicio aventură nu este lipsită de pericole, drumul lui Jean-Luc Picard este presărat de *pulsari*, obiecte cosmice foarte periculoase care lansează în vecinătatea lor, la intervale fixe de timp, unde gravitaționale care ar putea distruge USS Enterprise.

Un pulsar $P_i$ este caracterizat prin patru variabile $(x_i, y_i, r_i, t_i)$, unde $(x_i, y_i)$ reprezintă coordonatele sectorului în care se regăsește pulsarul, $r_i$ reprezintă raza de acțiune a pulsarului, iar $t_i$ reprezintă starea în care se află pulsarul la momentul de început al deplasării navei.

Un pulsar $P_i$ trece periodic printr-un număr de $r_i$ stări de la 0 la $r_i - 1$. Când acesta se află în starea $t$, acesta afectează toate sectoarele aflate la o distanță Manhattan mai mică sau egală cu $t$ față de sectorul în care se află acesta. Dacă pulsarul la un moment de timp se află în starea $t$, la momentul următor se va afla în starea $(t+1) \% r_i$.

Un exemplu de funcționare al unui pulsar cu rază de acțiune $r = 4$, timp de $6$ unități de timp, începând cu $t = 0$ este următorul:

~[exemplu1.png]

# Cerință

Vouă vă revine rolul de a îl ajuta pe Jean-Luc Picard și să îi răspundeți la una din următoarele întrebări știind harta galaxiei:
1) Care este numărul maxim de sectoare ale galexiei $S_{max}$ afectate la orice moment de timp de către cel puțin un pulsar.
2) Care este timpul minim $T_{min}$ de care are nevoie Jean-Luc Picard pentru a ajunge pe planeta Qo'noS.

# Date de intrare
Din fișierul `pulsar.in` se vor citi următoarele:
* Pe prima linie se vor afla trei numere $C$, $N$ și $P$ separate prin câte un spațiu, reprezentând cerința ce trebuie rezolvată, dimensiunea galaxiei și numărul de pulsari din galaxie
* Pe următoarele $P$ linii se vor afla câte patru numere separate prin spațiu $x_i$, $y_i$, $r_i$, $t_i$, reprezentând descrierea pulsarului $P_i$
* Pe penultima linie se vor afla două numere separate printr-un spațiu reprezentând coordonatele sectorului planetei Vulcan $x_s$ și $y_s$
* Pe ultima linie se vor afla două numere separate printr-un spațiu reprezentând coordonatele sectorului planetei Qo'noS $x_f$ și $y_f$

# Date de ieșire
În fișierul `pulsar.out` se va afișa un singur număr în funcție de cerință:
* Dacă $C = 1$, atunci se va afișa numărul $S_{max}$
* Dacă $C = 2$, atunci se va afișa numărul $T_{min}$

# Restricții și precizări
* Distanța Manhattan dintre două coordonate $(x_1, y_1)$ și $(x_2, y_2)$ este definită ca: $|x_1 - x_2| + |y_1 - y_2|$
* Nava nu va putea părăsi la niciun moment de timp harta galaxiei
* Undele pulsarilor pot părăsi harta galaxiei, dar acele sectoare nu reprezintă interes pentru problema noastră
* Se garantează că la momentul plecării, nava nu este aflată în pericol
* Se garantează că există soluție
* Pot exista mai mulți pulsari în același sector
* $C \in \{1, 2\}$
* $3 \leq N \leq 500$
* $1 \leq P \leq 15\ 000$
* $0 \leq t_i \lt r_i \leq 6 \ \forall \ 1 \leq i \leq P$
* $1 \leq x_s, y_s, x_f, y_f \leq N$
* $1 \leq x_i, y_i \leq N \ \forall \ 1 \leq i \leq P$

## Subtask 1 (19 puncte)
* $C = 1$

## Subtask 2 (22 puncte)
* $C = 2$
* $r_i = 1 \ \forall \ 1 \leq i \leq P$

## Subtask 3 (9 puncte)
* $C = 2$
* $N \leq 7$
* $r_i \leq 3 \ \forall \ 1 \leq i \leq P$

## Subtask 4 (13 puncte)
* $C = 2$
* $t_i = 0 \ \forall \ 1 \leq i \leq P$

## Subtask 5 (37 puncte)
* $C = 2$

---

Example:
`pulsar.in`
```
1 5 4
3 1 2 1
1 5 3 1
5 3 2 0
3 4 2 1
1 1
5 5
```

`pulsar.out`
```
14
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to handle two different types of queries:

1. **Maximum number of sectors affected by at least one pulsar at any moment (`C = 1`)**.
2. **Minimum time for the USS Enterprise to reach from Vulcan to Qo'noS (`C = 2`)**.

Let's break down the solution:

### Algorithm for `C = 1` (Maximum number of sectors affected):

1. **Initialize a 3D array `affected` of size `N x N x Max_R`** to keep track of affected sectors for every possible time state of every pulsar.
2. **Iterate through each pulsar** and mark the affected sectors for each state.
3. **For each time state across all pulsars, calculate the number of unique sectors that are affected.**
4. **Find the maximum number of affected sectors**.

### Algorithm for `C = 2` (Minimum time for USS Enterprise to reach from Vulcan to Qo'noS):

1. **Use a BFS (Breadth-First Search) approach** starting from the starting sector `(x_s, y_s)` and exploring all possible adjacent sectors.
2. **For each position and time, check if it's safe** to move there by considering the state of pulsars at that time.
3. **Track the time and positions using a queue**.
4. **Stop the BFS when you reach `(x_f, y_f)` and return the time taken**.

Below is the C++ implementation for both scenarios:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

struct Pulsar {
    int x, y, r, t;
};

// Directions for moving in the grid
const int dx[] = {-1, 1, 0, 0};
const int dy[] = {0, 0, -1, 1};

bool is_within_bounds(int x, int y, int N) {
    return x >= 0 && x < N && y >= 0 && y < N;
}

int main() {
    ifstream fin("pulsar.in");
    ofstream fout("pulsar.out");

    int C, N, P;
    fin >> C >> N >> P;
    vector<Pulsar> pulsars(P);

    for (int i = 0; i < P; ++i) {
        fin >> pulsars[i].x >> pulsars[i].y >> pulsars[i].r >> pulsars[i].t;
        // Adjust to 0-based indexing
        pulsars[i].x -= 1;
        pulsars[i].y -= 1;
    }

    int xs, ys, xf, yf;
    fin >> xs >> ys >> xf >> yf;
    xs -= 1; ys -= 1; xf -= 1; yf -= 1;

    if (C == 1) {
        // Calculate the maximum number of affected sectors
        vector<vector<vector<bool>>> affected(N, vector<vector<bool>>(N, vector<bool>(6, false)));
        vector<int> count(N * N, 0);

        for (const auto& pulsar : pulsars) {
            for (int t = 0; t < pulsar.r; ++t) {
                for (int dx = -t; dx <= t; ++dx) {
                    for (int dy = -t; dy <= t; ++dy) {
                        if (abs(dx) + abs(dy) <= t) {
                            int nx = pulsar.x + dx;
                            int ny = pulsar.y + dy;
                            if (is_within_bounds(nx, ny, N)) {
                                affected[nx][ny][t] = true;
                            }
                        }
                    }
                }
            }
        }

        for (int t = 0; t < 6; ++t) {
            int current_affected = 0;
            for (int i = 0; i < N; ++i) {
                for (int j = 0; j < N; ++j) {
                    for (int rt = 0; rt < pulsars.size(); ++rt) {
                        if (affected[i][j][t % pulsars[rt].r]) {
                            current_affected++;
                            break;
                        }
                    }
                }
            }
            count[t] = current_affected;
        }

        fout << *max_element(count.begin(), count.end()) << endl;
    } else if (C == 2) {
        // Calculate the minimum time to reach the destination
        vector<vector<bool>> visited(N, vector<bool>(N, false));
        queue<pair<int, pair<int, int>>> q;  // (time, (x, y))
        q.push({0, {xs, ys}});
        visited[xs][ys] = true;

        while (!q.empty()) {
            auto [time, pos] = q.front();
            q.pop();
            int x = pos.first, y = pos.second;
            if (x == xf && y == yf) {
                fout << time << endl;
                return 0;
            }

            for (int d = 0; d < 4; ++d) {
                int nx = x + dx[d], ny = y + dy[d];
                if (is_within_bounds(nx, ny, N) && !visited[nx][ny]) {
                    bool safe = true;
                    for (const auto& pulsar : pulsars) {
                        int manhattan_dist = abs(nx - pulsar.x) + abs(ny - pulsar.y);
                        int state = (time + 1 + pulsar.t) % pulsar.r;
                        if (manhattan_dist <= state) {
                            safe = false;
                            break;
                        }
                    }
                    if (safe) {
                        visited[nx][ny] = true;
                        q.push({time + 1, {nx, ny}});
                    }
                }
            }
        }
    }

    return 0;
}
```

### Explanation:

- **C = 1 Implementation**:
  - We use a 3D boolean array `affected` to mark which sectors are affected at each time state.
  - Iterate through each pulsar and mark the affected sectors for each state.
  - Count the unique affected sectors for each time state and find the maximum.

- **C = 2 Implementation**:
  - We use BFS to find the shortest path from Vulcan to Qo'noS.
  - For each move, we check if the sector is safe by considering the state of pulsars at the next time unit.
  - We maintain a queue for BFS and mark sectors as visited to avoid re-processing.

This approach ensures that we efficiently handle the requirements and constraints given in the problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
1 5 4
3 1 2 1
1 5 3 1
5 3 2 0
3 4 2 1
1 1
5 5
```
Expected output:
```
14
```
Found output:
```
17
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
