---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's create the C++ solution for the ski race problem step by step.

1. **Read Input**: We'll read from the `schi.in` file to get the start time and the times taken by each competitor.
2. **Calculate Finish Times**: Convert the start time and each competitor's time taken into seconds since the start of the day, then add them to get the exact finish time in seconds.
3. **Find Earliest and Latest Finish Times**: Track the minimum and maximum finish times in seconds.
4. **Convert Seconds Back to HMS**: Convert the minimum and maximum finish times back to hours, minutes, and seconds.
5. **Write Output**: Write the results to the `schi.out` file.

Here is the complete C++ code to accomplish the task:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Time {
    int h, m, s;

    int toSeconds() const {
        return h * 3600 + m * 60 + s;
    }

    static Time fromSeconds(int totalSeconds) {
        Time t;
        t.h = totalSeconds / 3600;
        totalSeconds %= 3600;
        t.m = totalSeconds / 60;
        t.s = totalSeconds % 60;
        return t;
    }
};

int main() {
    std::ifstream infile("schi.in");
    std::ofstream outfile("schi.out");

    Time startTime;
    infile >> startTime.h >> startTime.m >> startTime.s;

    int n;
    infile >> n;

    int minFinishTime = INT_MAX;
    int maxFinishTime = 0;

    for (int i = 0; i < n; ++i) {
        int minutes, seconds;
        infile >> minutes >> seconds;
        int competitorTimeInSeconds = minutes * 60 + seconds;
        int finishTimeInSeconds = startTime.toSeconds() + competitorTimeInSeconds;

        if (finishTimeInSeconds < minFinishTime) {
            minFinishTime = finishTimeInSeconds;
        }
        if (finishTimeInSeconds > maxFinishTime) {
            maxFinishTime = finishTimeInSeconds;
        }
    }

    Time earliestFinish = Time::fromSeconds(minFinishTime);
    Time latestFinish = Time::fromSeconds(maxFinishTime);

    outfile << earliestFinish.h << " " << earliestFinish.m << " " << earliestFinish.s << "\n";
    outfile << latestFinish.h << " " << latestFinish.m << " " << latestFinish.s << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
- **Struct `Time`**: Used to handle time calculations and conversions between HMS (hours, minutes, seconds) and total seconds.
- **Reading Input**: We read the start time and the number of competitors.
- **Calculating Finish Times**: For each competitor, we convert their time to seconds and add it to the start time in seconds to get their finish time.
- **Tracking Min and Max Finish Times**: We keep track of the minimum and maximum finish times in seconds.
- **Converting Back**: Once we have the min and max finish times, we convert them back to HMS format.
- **Writing Output**: Finally, we write the results to the `schi.out` file.

### Constraints Handling:
- The code handles up to 100 competitors efficiently.
- It operates within the given time constraints (start time between 8:00 and 20:00).
- Ensures correct conversion between time formats.

This solution should be efficient and correct for the given problem constraints.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:33:25: error: 'INT_MAX' was not declared in this scope
   33 |     int minFinishTime = INT_MAX;
      |                         ^~~~~~~
main.cpp:5:1: note: 'INT_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?
    4 | #include <algorithm>
  +++ |+#include <climits>
    5 | 

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the constant `INT_MAX` is not declared. This constant is defined in the `<climits>` header, which is missing from the includes. By including `<climits>`, we can fix the program.

Here is the corrected C++ code with the necessary fix:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits> // Include this header for INT_MAX

struct Time {
    int h, m, s;

    int toSeconds() const {
        return h * 3600 + m * 60 + s;
    }

    static Time fromSeconds(int totalSeconds) {
        Time t;
        t.h = totalSeconds / 3600;
        totalSeconds %= 3600;
        t.m = totalSeconds / 60;
        t.s = totalSeconds % 60;
        return t;
    }
};

int main() {
    std::ifstream infile("schi.in");
    std::ofstream outfile("schi.out");

    Time startTime;
    infile >> startTime.h >> startTime.m >> startTime.s;

    int n;
    infile >> n;

    int minFinishTime = INT_MAX;
    int maxFinishTime = 0;

    for (int i = 0; i < n; ++i) {
        int minutes, seconds;
        infile >> minutes >> seconds;
        int competitorTimeInSeconds = minutes * 60 + seconds;
        int finishTimeInSeconds = startTime.toSeconds() + competitorTimeInSeconds;

        if (finishTimeInSeconds < minFinishTime) {
            minFinishTime = finishTimeInSeconds;
        }
        if (finishTimeInSeconds > maxFinishTime) {
            maxFinishTime = finishTimeInSeconds;
        }
    }

    Time earliestFinish = Time::fromSeconds(minFinishTime);
    Time latestFinish = Time::fromSeconds(maxFinishTime);

    outfile << earliestFinish.h << " " << earliestFinish.m << " " << earliestFinish.s << "\n";
    outfile << latestFinish.h << " " << latestFinish.m << " " << latestFinish.s << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
- **Added `<climits>` Include**: This header includes the declaration of the `INT_MAX` constant, which is used to initialize the minimum finish time.

This should resolve the compilation error and allow the program to run correctly.
