---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the implementation of the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Time {
    int hours;
    int minutes;
    int seconds;

    void add(int m, int s) {
        seconds += s;
        minutes += m + seconds / 60;
        seconds %= 60;
        hours += minutes / 60;
        minutes %= 60;
        hours %= 24; // since hours are generally in a 24-hour format
    }

    bool operator<(const Time& other) const {
        if (hours != other.hours) return hours < other.hours;
        if (minutes != other.minutes) return minutes < other.minutes;
        return seconds < other.seconds;
    }

    void readFromFile(std::ifstream &inFile) {
        inFile >> hours >> minutes >> seconds;
    }

    void writeToFile(std::ofstream &outFile) const {
        outFile << hours << ' ' << minutes << ' ' << seconds << '\n';
    }
};

int main() {
    std::ifstream inFile("schi.in");
    std::ofstream outFile("schi.out");

    Time startTime;
    startTime.readFromFile(inFile);

    int n;
    inFile >> n;

    std::vector<Time> arrivalTimes(n);
    
    for (int i = 0; i < n; ++i) {
        int minutes, seconds;
        inFile >> minutes >> seconds;
        arrivalTimes[i] = startTime;
        arrivalTimes[i].add(minutes, seconds);
    }

    auto minMaxTimes = std::minmax_element(arrivalTimes.begin(), arrivalTimes.end());

    minMaxTimes.first->writeToFile(outFile);
    minMaxTimes.second->writeToFile(outFile);

    return 0;
}
```

This implementation reads the input from `schi.in`, calculates the arrival times for all contestants based on their completion times, and then determines the earliest and latest arrival times. Finally, it writes these times to `schi.out`.

Key points to consider:
1. **Reading and Writing Files**: Using `ifstream` and `ofstream` for file handling.
2. **Handling Time Calculations**: The `add` method in the `Time` structure ensures that the overflow of seconds to minutes and minutes to hours is handled.
3. **Finding Min/Max Times**: Utilizing `std::minmax_element` to find the earliest and latest times efficiently.

This solution is efficient and handles all the constraints given in the problem statement.
