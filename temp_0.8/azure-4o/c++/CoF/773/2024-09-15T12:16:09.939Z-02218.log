---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to calculate the exact time each skier finishes the race based on their individual racing times, and then determine the earliest and latest finish times. Here’s a step-by-step explanation of how we can achieve this:

1. **Read Input Data**: Read the start time and the race durations for each skier from the input file `schi.in`.
2. **Calculate Finish Times**: For each skier, calculate their finish time by adding their race duration to the start time.
3. **Determine Earliest and Latest Finish Times**: Compare all the finish times to identify the earliest and latest finish times.
4. **Output the Results**: Write the earliest and latest finish times to the output file `schi.out`.

The following C++ code implements these steps efficiently:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Time {
    int hour, minute, second;
};

Time addTime(const Time& startTime, int raceMinute, int raceSecond) {
    Time finishTime = startTime;
    finishTime.second += raceSecond;
    if (finishTime.second >= 60) {
        finishTime.second -= 60;
        finishTime.minute += 1;
    }
    finishTime.minute += raceMinute;
    if (finishTime.minute >= 60) {
        finishTime.minute -= 60;
        finishTime.hour += 1;
    }
    return finishTime;
}

bool compareTimes(const Time& a, const Time& b) {
    if (a.hour != b.hour) return a.hour < b.hour;
    if (a.minute != b.minute) return a.minute < b.minute;
    return a.second < b.second;
}

int main() {
    std::ifstream inFile("schi.in");
    std::ofstream outFile("schi.out");

    Time startTime;
    int n;
    
    inFile >> startTime.hour >> startTime.minute >> startTime.second;
    inFile >> n;

    std::vector<Time> finishTimes(n);
    
    for (int i = 0; i < n; ++i) {
        int raceMinute, raceSecond;
        inFile >> raceMinute >> raceSecond;
        finishTimes[i] = addTime(startTime, raceMinute, raceSecond);
    }

    auto minMaxTime = std::minmax_element(finishTimes.begin(), finishTimes.end(), compareTimes);

    Time earliest = *minMaxTime.first;
    Time latest = *minMaxTime.second;

    outFile << earliest.hour << " " << earliest.minute << " " << earliest.second << "\n";
    outFile << latest.hour << " " << latest.minute << " " << latest.second << "\n";

    return 0;
}
```

### Explanation:
1. **Struct Definition (`Time`)**:
   - Structure `Time` is used to store hours, minutes, and seconds.
   
2. **Function `addTime`**:
   - This function takes a start time and a race duration (in minutes and seconds), adds them, and handles any overflow (e.g., seconds or minutes exceeding 60).

3. **Function `compareTimes`**:
   - This comparator function is used to compare two `Time` structures to determine their order.

4. **Reading the Input**:
   - The input file is read using `ifstream`, and the start time and number of participants are extracted.
   - For each participant, their race time is read, and the corresponding finish time is computed and stored in a vector.

5. **Calculating Earliest and Latest Finish Times**:
   - The `std::minmax_element` function is used to find the earliest and latest times in the vector.

6. **Writing the Output**:
   - The results are written to the output file `schi.out` using `ofstream`.

This approach ensures that all operations are done in linear time, making it optimal for the given constraints.
