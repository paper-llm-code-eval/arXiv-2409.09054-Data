---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ solution for the given problem. The solution reads from `schi.in` and writes to `schi.out`. It efficiently computes the results by determining the arrival times for each contestant and then identifies the earliest and latest arrival times.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <tuple>
#include <algorithm>

using namespace std;

struct Time {
    int hour, minute, second;

    // Add seconds to the time object and adjust the time correctly
    Time add_seconds(int sec) const {
        Time result = *this;
        result.second += sec;
        if (result.second >= 60) {
            result.minute += result.second / 60;
            result.second %= 60;
        }
        if (result.minute >= 60) {
            result.hour += result.minute / 60;
            result.minute %= 60;
        }
        return result;
    }

    bool operator<(const Time &other) const {
        if (hour != other.hour) return hour < other.hour;
        if (minute != other.minute) return minute < other.minute;
        return second < other.second;
    }
};

int main() {
    ifstream fin("schi.in");
    ofstream fout("schi.out");

    int start_hour, start_minute, start_second;
    fin >> start_hour >> start_minute >> start_second;

    Time start_time{start_hour, start_minute, start_second};

    int n;
    fin >> n;

    vector<Time> finish_times;

    for (int i = 0; i < n; ++i) {
        int minutes, seconds;
        fin >> minutes >> seconds;
        Time finish_time = start_time.add_seconds(minutes * 60 + seconds);
        finish_times.push_back(finish_time);
    }

    auto minmax_times = minmax_element(finish_times.begin(), finish_times.end());

    fout << minmax_times.first->hour << " " << minmax_times.first->minute << " " << minmax_times.first->second << endl;
    fout << minmax_times.second->hour << " " << minmax_times.second->minute << " " << minmax_times.second->second << endl;

    return 0;
}
```

### Explanation:

1. **Reading Input**: The program reads the initial start time and the number of contestants from `schi.in`.
2. **Time Struct**: A `Time` struct is used to facilitate time manipulation (adding seconds and comparing times).
3. **Adding Seconds**: The `add_seconds` method adds seconds to a `Time` object and handles overflow correctly.
4. **Calculating Finish Times**: For each contestant, the program calculates their finish time by adding the time taken to the start time.
5. **Determining Results**: It finds the earliest and latest finish times using `minmax_element`.
6. **Writing Output**: The results are written to `schi.out`.

The solution is efficient and handles the problem constraints well. It also ensures the program can handle typical edge cases related to time calculations.
