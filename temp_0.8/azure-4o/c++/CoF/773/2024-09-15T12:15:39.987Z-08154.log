---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

struct Time {
    int hours;
    int minutes;
    int seconds;

    // Helper function to convert Time to total seconds
    int to_seconds() const {
        return hours * 3600 + minutes * 60 + seconds;
    }

    // Helper function to convert total seconds to Time
    static Time from_seconds(int total_seconds) {
        Time t;
        t.hours = total_seconds / 3600;
        total_seconds %= 3600;
        t.minutes = total_seconds / 60;
        t.seconds = total_seconds % 60;
        return t;
    }
};

int main() {
    std::ifstream fin("schi.in");
    std::ofstream fout("schi.out");

    Time start_time;
    fin >> start_time.hours >> start_time.minutes >> start_time.seconds;

    int n;
    fin >> n;
    
    int min_time = INT_MAX;
    int max_time = INT_MIN;

    for (int i = 0; i < n; ++i) {
        int m, s;
        fin >> m >> s;
        int total_time = m * 60 + s;
        min_time = std::min(min_time, total_time);
        max_time = std::max(max_time, total_time);
    }

    int start_in_seconds = start_time.to_seconds();
    Time first_time = Time::from_seconds(start_in_seconds + min_time);
    Time last_time = Time::from_seconds(start_in_seconds + max_time);

    fout << first_time.hours << " " << first_time.minutes << " " << first_time.seconds << "\n";
    fout << last_time.hours << " " << last_time.minutes << " " << last_time.seconds << "\n";

    return 0;
}
```

### Explanation:

1. **Data Structures**:
   - A `Time` struct is created to handle time objects with hours, minutes, and seconds, along with helper functions to convert time to total seconds and vice versa.

2. **Reading Input**:
   - The starting time and the number of competitors are read from `schi.in`.

3. **Finding Min and Max Times**:
   - Loop through each competitor's minutes and seconds, converting their time to total seconds.
   - Keep track of the minimum and maximum race durations in seconds.

4. **Calculating Arrival Times**:
   - Convert the starting time to total seconds.
   - Calculate the arrival time for the fastest (minimum duration) and the slowest (maximum duration) competitors by adding their durations to the starting time in seconds.
   - Convert these arrival times back to hours, minutes, and seconds.

5. **Writing Output**:
   - Write the resulting arrival times of the fastest and slowest competitors to `schi.out`.

This solution efficiently reads and processes the input, calculates the required times, and outputs the results without using `cin`, `cout`, `scanf`, or `printf`, adhering to the constraints given.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:35:20: error: 'INT_MAX' was not declared in this scope
   35 |     int min_time = INT_MAX;
      |                    ^~~~~~~
main.cpp:3:1: note: 'INT_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?
    2 | #include <algorithm>
  +++ |+#include <climits>
    3 | 
main.cpp:36:20: error: 'INT_MIN' was not declared in this scope
   36 |     int max_time = INT_MIN;
      |                    ^~~~~~~
main.cpp:36:20: note: 'INT_MIN' is defined in header '<climits>'; did you forget to '#include <climits>'?

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that the constants `INT_MAX` and `INT_MIN` are not declared. This is because we need to include the `<climits>` header. Here's the corrected program with the necessary include:

```cpp
#include <fstream>
#include <algorithm>
#include <climits> // Include for INT_MAX and INT_MIN

struct Time {
    int hours;
    int minutes;
    int seconds;

    // Helper function to convert Time to total seconds
    int to_seconds() const {
        return hours * 3600 + minutes * 60 + seconds;
    }

    // Helper function to convert total seconds to Time
    static Time from_seconds(int total_seconds) {
        Time t;
        t.hours = total_seconds / 3600;
        total_seconds %= 3600;
        t.minutes = total_seconds / 60;
        t.seconds = total_seconds % 60;
        return t;
    }
};

int main() {
    std::ifstream fin("schi.in");
    std::ofstream fout("schi.out");

    Time start_time;
    fin >> start_time.hours >> start_time.minutes >> start_time.seconds;

    int n;
    fin >> n;
    
    int min_time = INT_MAX;
    int max_time = INT_MIN;

    for (int i = 0; i < n; ++i) {
        int m, s;
        fin >> m >> s;
        int total_time = m * 60 + s;
        min_time = std::min(min_time, total_time);
        max_time = std::max(max_time, total_time);
    }

    int start_in_seconds = start_time.to_seconds();
    Time first_time = Time::from_seconds(start_in_seconds + min_time);
    Time last_time = Time::from_seconds(start_in_seconds + max_time);

    fout << first_time.hours << " " << first_time.minutes << " " << first_time.seconds << "\n";
    fout << last_time.hours << " " << last_time.minutes << " " << last_time.seconds << "\n";

    return 0;
}
```

### Explanation of Changes:
1. Added `#include <climits>` to include the definitions of `INT_MAX` and `INT_MIN`.
2. There's no other change needed in the logic or structure of the program.

The program now correctly compiles and handles the input and output as required by the problem statement.
