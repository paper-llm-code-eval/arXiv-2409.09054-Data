---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `furnica.in` and write to `furnica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe o tablă de șah cu $n$ linii și $n$ coloane se află firimituri de pâine și o furnică. Pentru fiecare pătrățel, inclusiv cel în care se găsește furnica, aflat pe linia $i$ și coloana $j$, cantitatea de firimituri de pâine este egală cu restul împărțirii lui $i + j$ la $6$. Astfel pentru $n = 4$ tabla de șah conține următoarele cantități de firimituri:

|2|3|4|5|
-|-|-|-
|**3**|**4**|**5**|**0**|
|**4**|**5**|**0**|**1**|
|**5**|**0**|**1**|**2**|

Furnica (notată cu `F` în figura de mai jos) se poate deplasa din pătrățelul unde se găsește în toate cele opt pătrățele vecine, numerotate ca mai jos:

|8|1|2|
-|-|-
|**7**|**F**|**3**|
|**6**|**5**|**4**|

Furnica se deplasează, pornind din pătrățica aflată în colțul din stânga sus, în una dintre pătrățelele vecine, și așa mai departe. Pe drumul său furnica se hrănește cu toată cantitatea de firimituri din pătrățelele prin care a trecut (după ce iese din pătrățică catitatea de firimituri devine $0$). Drumul furnicii este dat printr-un șir de $k$ numere naturale (cuprinse între $1$ și $8$) care precizează, la fiecare pas, următorul pătrățel din drum.

# Cerință

Scrieți un program care pentru un drum dat determină cantitatea totală de firimituri mâncată de furnică, precum și numărul pătrățelelor prin care aceasta a trecut de cele mai multe ori.

# Date de intrare

Fișierul de intrare `furnica.in` conține pe prima linie numerele $n$ și $k$, separate între ele printr-un spațiu, iar pe linia următoare $k$ numere naturale ($1, 2, 3, 4, 5, 6, 7$ sau $8$) separate prin câte un spațiu, reprezentând următorul pătrățel din drum pentru un pătrățel curent.

# Date de ieșire

Fișierul de ieșire `furnica.out` va conține, pe prima linie, cantitatea totală și numărul pătrățelelor din cerință separate printr-un spațiu.

# Restricții și precizări

* $1 < n < 101$;
* $0 < k < 201$;
* Drumul furnicii nu iese din tablou.

---

Example:
`furnica.in`
```
4 10
3 6 5 3 2 6 3 6 2 3
```

`furnica.out`
```
23 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution to the problem. The code reads input from "furnica.in", simulates the ant's movement, and writes the results to "furnica.out". The solution ensures fast execution by leveraging efficient data structures and avoiding unnecessary computations.

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

const int move_x[] = {-1, -1,  0,  1, 1,  1, 0, -1};
const int move_y[] = { 0,  1,  1,  1, 0, -1,-1, -1};

int main() {
    std::ifstream fin("furnica.in");
    std::ofstream fout("furnica.out");

    int n, k;
    fin >> n >> k;

    std::vector<int> moves(k);
    for(int i = 0; i < k; ++i) {
        fin >> moves[i];
        moves[i]--; // Convert to 0-based index
    }

    std::vector<std::vector<int>> crumbs(n, std::vector<int>(n));
    for(int i = 0; i < n; ++i) {
        for(int j = 0; j < n; ++j) {
            crumbs[i][j] = (i + j) % 6;
        }
    }

    int total_crumbs = 0;
    std::unordered_map<int, int> visit_count;
    int x = 0, y = 0;

    visit_count[x * n + y]++;
    total_crumbs += crumbs[x][y];
    crumbs[x][y] = 0;

    for(int i = 0; i < k; ++i) {
        x += move_x[moves[i]];
        y += move_y[moves[i]];

        visit_count[x * n + y]++;
        total_crumbs += crumbs[x][y];
        crumbs[x][y] = 0;
    }

    int max_visits = 0;
    for(const auto &entry : visit_count) {
        max_visits = std::max(max_visits, entry.second);
    }

    int max_visit_count = 0;
    for(const auto &entry : visit_count) {
        if(entry.second == max_visits) {
            max_visit_count++;
        }
    }

    fout << total_crumbs << " " << max_visit_count << "\n";

    fin.close();
    fout.close();
    return 0;
}
```

## Explanation:
1. **Input Reading:**
   - The code reads the size of the board `n` and the number of moves `k`.
   - It reads the sequence of moves into a vector `moves`.
   
2. **Crumbs Initialization:**
   - The crumbs on each cell of the board are initialized based on the formula `(i + j) % 6`.

3. **Movement Simulation:**
   - The ant starts at the top-left corner `(0, 0)`.
   - The code keeps track of the total crumbs eaten and the number of times each cell is visited using `visit_count`.

4. **Result Calculation:**
   - Determines the maximum number of times any cell has been visited using `max_visits`.
   - Counts how many cells have been visited `max_visits` times.

5. **Output Writing:**
   - Outputs the total crumbs eaten and the number of cells with the maximum visit count.

This solution makes efficient use of data structures to ensure fast execution, meeting the constraints provided in the problem statement.
