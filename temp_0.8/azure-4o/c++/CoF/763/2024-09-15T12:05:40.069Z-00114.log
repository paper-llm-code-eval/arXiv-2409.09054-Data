---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `furnica.in` and write to `furnica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe o tablă de șah cu $n$ linii și $n$ coloane se află firimituri de pâine și o furnică. Pentru fiecare pătrățel, inclusiv cel în care se găsește furnica, aflat pe linia $i$ și coloana $j$, cantitatea de firimituri de pâine este egală cu restul împărțirii lui $i + j$ la $6$. Astfel pentru $n = 4$ tabla de șah conține următoarele cantități de firimituri:

|2|3|4|5|
-|-|-|-
|**3**|**4**|**5**|**0**|
|**4**|**5**|**0**|**1**|
|**5**|**0**|**1**|**2**|

Furnica (notată cu `F` în figura de mai jos) se poate deplasa din pătrățelul unde se găsește în toate cele opt pătrățele vecine, numerotate ca mai jos:

|8|1|2|
-|-|-
|**7**|**F**|**3**|
|**6**|**5**|**4**|

Furnica se deplasează, pornind din pătrățica aflată în colțul din stânga sus, în una dintre pătrățelele vecine, și așa mai departe. Pe drumul său furnica se hrănește cu toată cantitatea de firimituri din pătrățelele prin care a trecut (după ce iese din pătrățică catitatea de firimituri devine $0$). Drumul furnicii este dat printr-un șir de $k$ numere naturale (cuprinse între $1$ și $8$) care precizează, la fiecare pas, următorul pătrățel din drum.

# Cerință

Scrieți un program care pentru un drum dat determină cantitatea totală de firimituri mâncată de furnică, precum și numărul pătrățelelor prin care aceasta a trecut de cele mai multe ori.

# Date de intrare

Fișierul de intrare `furnica.in` conține pe prima linie numerele $n$ și $k$, separate între ele printr-un spațiu, iar pe linia următoare $k$ numere naturale ($1, 2, 3, 4, 5, 6, 7$ sau $8$) separate prin câte un spațiu, reprezentând următorul pătrățel din drum pentru un pătrățel curent.

# Date de ieșire

Fișierul de ieșire `furnica.out` va conține, pe prima linie, cantitatea totală și numărul pătrățelelor din cerință separate printr-un spațiu.

# Restricții și precizări

* $1 < n < 101$;
* $0 < k < 201$;
* Drumul furnicii nu iese din tablou.

---

Example:
`furnica.in`
```
4 10
3 6 5 3 2 6 3 6 2 3
```

`furnica.out`
```
23 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this problem, let's break it down into a few steps:

1. **Read Input:**
   - First, read the values of `n` and `k`.
   - Next, read the sequence of moves.

2. **Initialize the Board:**
   - Create a board of size `n x n` where each cell `(i, j)` contains the value `(i + j) % 6`.

3. **Simulate Ant's Movement:**
   - Starting from the top-left corner `(0, 0)`, move according to the given sequence.
   - Keep track of the total amount of crumbs eaten and the number of times each cell is visited.

4. **Determine the Output:**
   - Calculate the total crumbs eaten by the ant.
   - Find the maximum number of visits to any cell.

Let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

const int moves[8][2] = {
    {-1, 0}, {-1, 1}, {0, 1}, {1, 1},
    {1, 0}, {1, -1}, {0, -1}, {-1, -1}
};

int main() {
    ifstream fin("furnica.in");
    ofstream fout("furnica.out");

    int n, k;
    fin >> n >> k;

    vector<int> path(k);
    for (int i = 0; i < k; ++i) {
        fin >> path[i];
    }

    vector<vector<int>> board(n, vector<int>(n));
    vector<vector<int>> visits(n, vector<int>(n, 0));

    // Initialize the board
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            board[i][j] = (i + j) % 6;
        }
    }

    // Start at the top-left corner (0, 0)
    int x = 0, y = 0;
    int totalCrumbs = 0;
    visits[x][y]++;
    totalCrumbs += board[x][y];
    board[x][y] = 0;

    // Simulate the ant's movement
    for (int i = 0; i < k; ++i) {
        int moveIndex = path[i] - 1;
        x += moves[moveIndex][0];
        y += moves[moveIndex][1];

        visits[x][y]++;
        totalCrumbs += board[x][y];
        board[x][y] = 0;
    }

    // Find the maximum number of visits
    int maxVisits = 0;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (visits[i][j] > maxVisits) {
                maxVisits = visits[i][j];
            }
        }
    }

    fout << totalCrumbs << " " << maxVisits << endl;

    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The input file `furnica.in` is read to fetch values of `n` (board size) and `k` (number of moves).
   - The sequence of moves is then read from the input file.

2. **Board Initialization:**
   - A 2D vector `board` is initialized where each cell `(i, j)` contains the value `(i + j) % 6`.
   - Another 2D vector `visits` is initialized to keep track of the number of visits to each cell.

3. **Simulate Movement:**
   - The ant starts at the top-left corner `(0, 0)`.
   - For each move in the sequence, the ant's position is updated, and the crumbs at the new position are added to the total.
   - The number of visits to each cell is also updated.

4. **Output the Results:**
   - The total crumbs eaten and the maximum number of visits to any cell are computed and written to the output file `furnica.out`.

This approach ensures that the program is both efficient and correct, adhering to the problem constraints and requirements.
