---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lascoala.in` and write to `lascoala.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Directorul unei școli dorește să premieze la sfârșitul anului școlar pe cei mai buni elevi la învățătură. Pentru acest lucru el are de rezolvat două probleme:

1. Să determine câți elevi vor fi premiați dintre cei $n$ elevi ai școlii. După discuții aprinse cu ceilalți profesori se hotărăște în Consiliul Profesoral ca numărul premianților să fie $n - k$, unde $k$ este cel mai mare număr pătrat perfect mai mic strict decât $n$. De exemplu, pentru $n = 150$, $k$ este $144$ (pentru că $144$ = $12^2$), deci vor fi premiați $150 - 144 = 6$ elevi.
2. Pentru a fi cât mai multă liniște la premiere, în Consiliul Profesoral se ia decizia ca elevii care nu vor fi premiați să fie așezați pe terenul de sport pe rânduri de câte $p$ elevi (unde $p^2 = k$). În acest scop, directorul a numerotat elevii nepremiați de la $1$ la $k$ și a hotărât ca elevii să fie așezați în ordinea descrescătoare a numerelor asociate.

# Cerință

Scrieți un program care citește $n$, numărul de elevi din școală și calculează numărul de elevi premiați precum și modul de așezare a elevilor nepremiați.

# Date de intrare


Fișierul de intrare `lascoala.in` va conține numărul $n$.


# Date de ieșire

Fișierul de ieșire `lascoala.out` va conține pe prima linie numărul de elevi premiați, iar pe următoarele linii așezarea elevilor nepremiați.


# Restricții și precizări

* $2 \leq n \leq 700$;

---

Example:
`lascoala.in`
```
35
```

`lascoala.out`
```
10
25 24 23 22 21
20 19 18 17 16
15 14 13 12 11
10 9 8 7 6
5 4 3 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the solution step-by-step:

1. **Read Input**: Read the number \( n \) from the input file `lascoala.in`.
2. **Determine \( k \)**: Find the largest perfect square less than \( n \). This would be \( k \) which is \( p^2 \), where \( p \) is the largest integer such that \( p^2 < n \).
3. **Calculate Number of Premioed Students**: This would be \( n - k \).
4. **Output the Number of Premioed Students**: Write this to the output file `lascoala.out`.
5. **Arrange Non-Premioed Students in Rows**: Arrange the students numbered from 1 to \( k \) in \( p \) rows and \( p \) columns in descending order.
6. **Write the Arrangement**: Write this arrangement to the output file `lascoala.out`.

Let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <vector>

int main() {
    // Step 1: Read input from file
    std::ifstream infile("lascoala.in");
    int n;
    infile >> n;
    infile.close();
    
    // Step 2: Determine the largest perfect square less than n
    int p = static_cast<int>(std::sqrt(n - 1));
    int k = p * p;
    
    // Step 3: Calculate the number of premioed students
    int premioed_students = n - k;
    
    // Step 4: Prepare the output
    std::ofstream outfile("lascoala.out");
    outfile << premioed_students << std::endl;
    
    // Step 5: Arrange the non-premioed students in rows in descending order
    std::vector<std::vector<int>> arrangement(p, std::vector<int>(p));
    int current_number = k;
    for (int i = 0; i < p; ++i) {
        for (int j = 0; j < p; ++j) {
            arrangement[i][j] = current_number--;
        }
    }
    
    // Step 6: Write the arrangement to the output file
    for (int i = 0; i < p; ++i) {
        for (int j = 0; j < p; ++j) {
            outfile << arrangement[i][j];
            if (j < p - 1) {
                outfile << " ";
            }
        }
        outfile << std::endl;
    }
    
    outfile.close();
    return 0;
}
```

### Explanation:
- **Reading the Input**: The input file `lascoala.in` is read to get the value of \( n \).
- **Finding \( k \)**: The largest perfect square less than \( n \) is determined using the square root function.
- **Calculating Number of Premioed Students**: This is simply \( n - k \).
- **Output the Number of Premioed Students**: This value is written to the `lascoala.out` file.
- **Arrange Non-Premioed Students**: A 2D vector is used to store the arrangement of non-premioed students in descending order.
- **Write the Arrangement**: This 2D vector is then written to the output file.

This solution is efficient and adheres to the requirements of the problem statement.
