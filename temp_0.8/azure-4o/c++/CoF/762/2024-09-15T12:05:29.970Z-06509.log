---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's walk through the challenge and derive an efficient solution in C++.

### Steps to Solve:

1. **Reading Input Efficiently**:
   - Since we can't use `cin`, `cout`, `scanf`, or `printf`, we will use file I/O to read from `cod.in` and write to `cod.out`.
   - Use `ifstream` to read and `ofstream` to write.

2. **Data Structures**:
   - We'll use an array of size 100 (since the numbers range from 0 to 99) to count occurrences of each number.

3. **Counting Occurrences**:
   - Iterate through the numbers and count the occurrences using the array.

4. **Identifying Unpaired Numbers**:
   - If a number has an odd count, it means there's at least one unpaired instance of that number.

5. **Generating the Output**:
   - Collect all unpaired numbers, sort them, and write them to the output file without spaces.

### C++ Code Implementation:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream infile("cod.in");
    std::ofstream outfile("cod.out");

    int n;
    infile >> n;

    // Array to count occurrences of numbers [0, 99]
    int counts[100] = {0};

    // Read numbers and count occurrences
    for (int i = 0; i < n; ++i) {
        int number;
        infile >> number;
        counts[number]++;
    }

    infile.close();

    // Vector to store unpaired numbers
    std::vector<int> unpairedNumbers;

    // Collect numbers with odd occurrences
    for (int i = 0; i < 100; ++i) {
        if (counts[i] % 2 != 0) {
            unpairedNumbers.push_back(i);
        }
    }

    // Sort numbers (they will be sorted as we traverse the array in order)
    // Generate the code
    for (int num : unpairedNumbers) {
        outfile << num;
    }

    outfile.close();
    return 0;
}
```

### Explanation of Code:
1. **File I/O**:
   - Open `cod.in` for reading and `cod.out` for writing.
   - Read the number of tickets (`n`) from the input file.

2. **Counting Occurrences**:
   - Initialize an array `counts` of size 100 to 0.
   - For each number in the input, increment the corresponding index in the `counts` array.

3. **Identifying Unpaired Numbers**:
   - Traverse the `counts` array, and if an index has an odd count, it means there's an unpaired number.
   - Store these unpaired numbers in a vector `unpairedNumbers`.

4. **Output**:
   - Since we are going through the `counts` array from 0 to 99, the unpaired numbers are inherently collected in ascending order.
   - Write each unpaired number to the output file without any spaces.

This code efficiently solves the problem by leveraging counting sort principles and ensures the output is in the required format.
