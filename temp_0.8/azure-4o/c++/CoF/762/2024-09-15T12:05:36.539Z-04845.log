---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the challenge:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

int main() {
    std::ifstream inputFile("cod.in");
    std::ofstream outputFile("cod.out");

    int n;
    inputFile >> n;
    
    std::unordered_map<int, int> freqMap;
    int num;
    
    for (int i = 0; i < n; ++i) {
        inputFile >> num;
        freqMap[num]++;
    }
    
    std::vector<int> unmatchedNumbers;

    for (const auto& pair : freqMap) {
        if (pair.second % 2 == 1) {
            unmatchedNumbers.push_back(pair.first);
        }
    }
    
    std::sort(unmatchedNumbers.begin(), unmatchedNumbers.end());
    
    for (int number : unmatchedNumbers) {
        outputFile << number;
    }
    
    inputFile.close();
    outputFile.close();

    return 0;
}
```

Explanation:
1. **Reading Input:**
   - The program reads the input from the file `cod.in`.
   - It first reads the number of tickets `n`.
   - It then reads the `n` numbers into an `unordered_map` to count the frequency of each number.

2. **Counting Frequencies:**
   - Using the `unordered_map`, the program keeps track of how many times each number appears.

3. **Identifying Unmatched Numbers:**
   - It iterates through the frequency map and collects numbers that have an odd frequency (these will be the numbers on the tickets that do not have a pair).

4. **Sorting and Writing Output:**
   - The unmatched numbers are added to a `vector` which is then sorted.
   - The sorted numbers are written to the output file `cod.out` without spaces between them.

This solution is efficient with a time complexity of O(n log n) due to the sorting step and ensures that the memory usage is kept optimal with the use of an `unordered_map` to store frequencies and a `vector` to store unmatched numbers. The I/O operations are handled using file streams for better performance over standard input/output functions.
