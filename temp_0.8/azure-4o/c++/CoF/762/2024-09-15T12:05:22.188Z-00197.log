---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently in C++, we need to follow these steps:

1. **Read Input**: We need to read the total count of numbers and then the numbers themselves from the input file `cod.in`.
2. **Count Occurrences**: Use an array to count occurrences of each number from 0 to 99 since the numbers are limited to this range.
3. **Determine Unpaired Numbers**: Identify numbers with an odd count, as those will be left without a pair.
4. **Sort and Concatenate**: Collect these unpaired numbers, sort them, and concatenate them to form the final code.
5. **Write Output**: Write the resulting code to the output file `cod.out`.

Below is the efficient C++ code implementing the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    // Open input and output files
    std::ifstream fin("cod.in");
    std::ofstream fout("cod.out");
    
    // Check if files are open
    if (!fin.is_open() || !fout.is_open()) {
        return 1;
    }

    int n;
    fin >> n;

    // Array to count occurrences of each number from 0 to 99
    int count[100] = {0};

    // Read all numbers and count their occurrences
    for (int i = 0; i < n; ++i) {
        int num;
        fin >> num;
        ++count[num];
    }

    // Close the input file as we no longer need it
    fin.close();
    
    // Vector to store numbers that are left without a pair
    std::vector<int> unpaired;

    // Identify unpaired numbers
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            unpaired.push_back(i);
        }
    }

    // Sort unpaired numbers
    std::sort(unpaired.begin(), unpaired.end());

    // Write the result to the output file
    for (int num : unpaired) {
        fout << num;
    }

    // Close the output file
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We use `std::ifstream` to read from `cod.in`.
   - The first number is read into `n` representing the number of numbers.
   - We then read the next `n` numbers and count their occurrences using the `count` array.

2. **Counting Occurrences**:
   - Since the range of numbers is small (0 to 99), we use a fixed-size array `count` to tally occurrences efficiently in O(n) time.

3. **Identifying Unpaired Numbers**:
   - We iterate through the `count` array and collect numbers with odd counts into a `std::vector<int> unpaired`.

4. **Sorting and Writing Output**:
   - We sort the `unpaired` numbers to ensure they are in ascending order.
   - We then write these numbers directly to `cod.out` using `std::ofstream`.

This solution is efficient with a time complexity of O(n) for reading and counting, and O(100 log 100) for sorting the small range of unpaired numbers. Given the constraints, this ensures our solution will run efficiently even for the upper limits of input size.
