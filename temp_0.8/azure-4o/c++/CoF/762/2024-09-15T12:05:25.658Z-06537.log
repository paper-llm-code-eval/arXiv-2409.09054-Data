---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ code to solve the given problem efficiently:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream input("cod.in");
    std::ofstream output("cod.out");

    int n;
    input >> n;
    
    std::vector<int> count(100, 0);
    for (int i = 0; i < n; ++i) {
        int number;
        input >> number;
        count[number]++;
    }

    std::string result;
    for (int i = 0; i < 100; ++i) {
        if (count[i] % 2 != 0) {
            result += std::to_string(i);
        }
    }

    output << result;
    return 0;
}
```

### Explanation:
1. **Input Reading**: The program reads the input directly from the file `cod.in`.
2. **Count Array**: We initialize a vector `count` of size 100 (since numbers are between 0 and 99) to zero.
3. **Counting Occurrences**: As we read each number from the input, we increment the corresponding index in the count array.
4. **Collecting Odd Occurrences**: We iterate through the count array and collect numbers that have an odd count.
5. **Result Formation**: The numbers with odd counts are concatenated into a string.
6. **Output Writing**: The result is written to the file `cod.out`.

This solution is efficient because:
- It processes each number in constant time.
- The final step of collecting the odd-count numbers is done in a fixed number of steps (100 steps, since the range is fixed).
- This ensures the algorithm runs in linear time relative to the size of the input, which is optimal for this problem.
