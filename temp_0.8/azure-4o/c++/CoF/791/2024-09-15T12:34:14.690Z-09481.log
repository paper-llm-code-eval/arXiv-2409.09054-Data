---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `vecini.in` and write to `vecini.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră matricea $A$ ale cărei elemente pot avea doar valorile $0$ sau $1$ și în care numerotarea liniilor și numerotarea coloanelor începe de la $1$. Pentru un element oarecare al matricei, definim noțiunea de vecin ca fiind acele elementele din matrice aflate în imediata sa apropiere pe una dintre direcțiile orizontală, verticală sau pe cele două diagonale (vezi figura de mai jos în care s-au marcat cu $x$ vecinii elementului marcat cu $o$). Un vecin bun al elementului $A_{ij}$ este un vecin care are aceeași valoare cu $A_{ij}$.

~[vecini.png]

# Cerință

Dându-se matricea $A$, să se determine numărul maxim de vecini buni pe care îi are unul dintre elementele matricei precum și numărul de elemente care au acest număr maxim de vecini buni.

# Date de intrare

Fișierul de intrare `vecini.in` conține pe prima linie trei valori naturale $m \ n \ k$ reprezentând numărul de linii, numărul de coloane și respectiv numărul de valori egale cu $1$ din matricea $A$. Pe fiecare dintre următoarele $k$ linii se află două valori $i$ si $j$ cu semnificația $A_{ij}$ este egal cu $1$. Aceste valori sunt date in ordinea parcurgerii matricei pe linii de la linia $1$ la linia $m$.

# Date de ieșire

Fișierul de ieșire `vecini.out` va conține pe prima linie două numere naturale $x$ și $y$ separate printr-un singur spațiu: $x$ va reprezenta numărul maxim de vecini buni pe care îi are unul dintre elementele matricei date, iar $y$ va reprezenta numărul de elemente din matricea dată care au acest număr maxim de vecini buni.

# Restricții și precizări

* $2 \leq m,n \leq 1 \ 000$;
* $0 \leq k \leq n \cdot m / 2+1$;
* Pentru $30$% dintre teste $2 \leq m,n \leq 200$;

---

Example:
`vecini.in`
```
3 4 7
1 3
2 1
2 4
3 1
3 4
3 3
3 2
```

`vecini.out`
```
3 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <cstring>

int main() {
    std::ifstream in("vecini.in");
    std::ofstream out("vecini.out");

    int m, n, k;
    in >> m >> n >> k;

    std::vector<std::vector<int>> A(m + 2, std::vector<int>(n + 2, 0));
    int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1};
    int dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};

    for (int i = 0; i < k; ++i) {
        int x, y;
        in >> x >> y;
        A[x][y] = 1;
    }

    int maxGoodNeighbors = 0;
    int countMaxGoodNeighbors = 0;

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            int currentGoodNeighbors = 0;

            for (int d = 0; d < 8; ++d) {
                int ni = i + dx[d];
                int nj = j + dy[d];

                if (ni >= 1 && ni <= m && nj >= 1 && nj <= n && A[ni][nj] == A[i][j]) {
                    ++currentGoodNeighbors;
                }
            }

            if (currentGoodNeighbors > maxGoodNeighbors) {
                maxGoodNeighbors = currentGoodNeighbors;
                countMaxGoodNeighbors = 1;
            } else if (currentGoodNeighbors == maxGoodNeighbors) {
                ++countMaxGoodNeighbors;
            }
        }
    }

    out << maxGoodNeighbors << " " << countMaxGoodNeighbors << "\n";
    return 0;
}
```

### Explanation:
1. **Reading Input**: 
    - We first read the matrix dimensions `m` and `n`, and the number of ones `k`.
    - We then read the positions of each `1` and store them in the matrix `A`.

2. **Matrix Initialization**:
    - We initialize a matrix `A` with dimensions `(m+2) x (n+2)` filled with zeroes to handle boundary conditions easily.

3. **Neighbor Coordinates**:
    - We define arrays `dx` and `dy` to quickly access all 8 possible neighbor positions for each cell.

4. **Finding Good Neighbors**:
    - For each cell `(i, j)`, we count how many of its neighbors have the same value.
    - We update the maximum count of good neighbors and keep track of how many cells have this maximum count.

5. **Writing Output**:
    - Finally, we write the results to the output file `vecini.out`.

This solution efficiently handles the problem constraints and ensures fast execution.
