---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `vecini.in` and write to `vecini.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră matricea $A$ ale cărei elemente pot avea doar valorile $0$ sau $1$ și în care numerotarea liniilor și numerotarea coloanelor începe de la $1$. Pentru un element oarecare al matricei, definim noțiunea de vecin ca fiind acele elementele din matrice aflate în imediata sa apropiere pe una dintre direcțiile orizontală, verticală sau pe cele două diagonale (vezi figura de mai jos în care s-au marcat cu $x$ vecinii elementului marcat cu $o$). Un vecin bun al elementului $A_{ij}$ este un vecin care are aceeași valoare cu $A_{ij}$.

~[vecini.png]

# Cerință

Dându-se matricea $A$, să se determine numărul maxim de vecini buni pe care îi are unul dintre elementele matricei precum și numărul de elemente care au acest număr maxim de vecini buni.

# Date de intrare

Fișierul de intrare `vecini.in` conține pe prima linie trei valori naturale $m \ n \ k$ reprezentând numărul de linii, numărul de coloane și respectiv numărul de valori egale cu $1$ din matricea $A$. Pe fiecare dintre următoarele $k$ linii se află două valori $i$ si $j$ cu semnificația $A_{ij}$ este egal cu $1$. Aceste valori sunt date in ordinea parcurgerii matricei pe linii de la linia $1$ la linia $m$.

# Date de ieșire

Fișierul de ieșire `vecini.out` va conține pe prima linie două numere naturale $x$ și $y$ separate printr-un singur spațiu: $x$ va reprezenta numărul maxim de vecini buni pe care îi are unul dintre elementele matricei date, iar $y$ va reprezenta numărul de elemente din matricea dată care au acest număr maxim de vecini buni.

# Restricții și precizări

* $2 \leq m,n \leq 1 \ 000$;
* $0 \leq k \leq n \cdot m / 2+1$;
* Pentru $30$% dintre teste $2 \leq m,n \leq 200$;

---

Example:
`vecini.in`
```
3 4 7
1 3
2 1
2 4
3 1
3 4
3 3
3 2
```

`vecini.out`
```
3 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

// Directions for 8 neighboring cells (left, right, up, down, four diagonals)
const int directions[8][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}, {-1, -1}, {-1, 1}, {1, -1}, {1, 1}};

int main() {
    std::ifstream infile("vecini.in");
    std::ofstream outfile("vecini.out");
    
    int m, n, k;
    infile >> m >> n >> k;
    
    std::vector<std::vector<int>> matrix(m + 1, std::vector<int>(n + 1, 0));
    
    for (int t = 0; t < k; ++t) {
        int i, j;
        infile >> i >> j;
        matrix[i][j] = 1;
    }
    
    int max_good_neighbors = 0;
    int count_max_good_neighbors = 0;
    
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            int current_value = matrix[i][j];
            int good_neighbors = 0;
            
            for (int d = 0; d < 8; ++d) {
                int ni = i + directions[d][0];
                int nj = j + directions[d][1];
                
                if (ni >= 1 && ni <= m && nj >= 1 && nj <= n && matrix[ni][nj] == current_value) {
                    ++good_neighbors;
                }
            }
            
            if (good_neighbors > max_good_neighbors) {
                max_good_neighbors = good_neighbors;
                count_max_good_neighbors = 1;
            } else if (good_neighbors == max_good_neighbors) {
                ++count_max_good_neighbors;
            }
        }
    }
    
    outfile << max_good_neighbors << " " << count_max_good_neighbors << "\n";
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:

1. **Reading Input:**
   - The input file `vecini.in` is read to get the dimensions `m`, `n` of the matrix and the number of `1`s `k`.
   - The matrix `A` is initialized with all elements set to `0`.

2. **Populating the Matrix:**
   - The next `k` lines in the input specify the positions of `1`s in the matrix, which are populated accordingly.

3. **Directions Array:**
   - An array `directions` is defined to facilitate checking the 8 possible neighbors of any element in the matrix.

4. **Counting Good Neighbors:**
   - For each element in the matrix, check its 8 neighbors.
   - Count how many neighbors have the same value as the current element.

5. **Finding Maximum:**
   - Maintain and update the maximum count of good neighbors and the number of elements that have this maximum count.

6. **Writing Output:**
   - Write the results to the output file `vecini.out`.

This solution ensures efficient checking and counting of neighbors in the matrix while adhering to the constraints.
