---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `vecini.in` and write to `vecini.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră matricea $A$ ale cărei elemente pot avea doar valorile $0$ sau $1$ și în care numerotarea liniilor și numerotarea coloanelor începe de la $1$. Pentru un element oarecare al matricei, definim noțiunea de vecin ca fiind acele elementele din matrice aflate în imediata sa apropiere pe una dintre direcțiile orizontală, verticală sau pe cele două diagonale (vezi figura de mai jos în care s-au marcat cu $x$ vecinii elementului marcat cu $o$). Un vecin bun al elementului $A_{ij}$ este un vecin care are aceeași valoare cu $A_{ij}$.

~[vecini.png]

# Cerință

Dându-se matricea $A$, să se determine numărul maxim de vecini buni pe care îi are unul dintre elementele matricei precum și numărul de elemente care au acest număr maxim de vecini buni.

# Date de intrare

Fișierul de intrare `vecini.in` conține pe prima linie trei valori naturale $m \ n \ k$ reprezentând numărul de linii, numărul de coloane și respectiv numărul de valori egale cu $1$ din matricea $A$. Pe fiecare dintre următoarele $k$ linii se află două valori $i$ si $j$ cu semnificația $A_{ij}$ este egal cu $1$. Aceste valori sunt date in ordinea parcurgerii matricei pe linii de la linia $1$ la linia $m$.

# Date de ieșire

Fișierul de ieșire `vecini.out` va conține pe prima linie două numere naturale $x$ și $y$ separate printr-un singur spațiu: $x$ va reprezenta numărul maxim de vecini buni pe care îi are unul dintre elementele matricei date, iar $y$ va reprezenta numărul de elemente din matricea dată care au acest număr maxim de vecini buni.

# Restricții și precizări

* $2 \leq m,n \leq 1 \ 000$;
* $0 \leq k \leq n \cdot m / 2+1$;
* Pentru $30$% dintre teste $2 \leq m,n \leq 200$;

---

Example:
`vecini.in`
```
3 4 7
1 3
2 1
2 4
3 1
3 4
3 3
3 2
```

`vecini.out`
```
3 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Define directions for the 8 neighbors (horizontal, vertical, and diagonal)
const vector<pair<int, int>> directions = {
    {-1, -1}, {-1, 0}, {-1, 1},
    {0, -1},          {0, 1},
    {1, -1}, {1, 0}, {1, 1}
};

int main() {
    ifstream infile("vecini.in");
    ofstream outfile("vecini.out");

    int m, n, k;
    infile >> m >> n >> k;

    vector<vector<int>> matrix(m + 1, vector<int>(n + 1, 0));

    for (int t = 0; t < k; ++t) {
        int i, j;
        infile >> i >> j;
        matrix[i][j] = 1;
    }

    int maxNeighbors = 0;
    int countMaxNeighbors = 0;

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            int current_value = matrix[i][j];
            int goodNeighbors = 0;

            for (auto& dir : directions) {
                int ni = i + dir.first;
                int nj = j + dir.second;
                if (ni >= 1 && ni <= m && nj >= 1 && nj <= n && matrix[ni][nj] == current_value) {
                    ++goodNeighbors;
                }
            }

            if (goodNeighbors > maxNeighbors) {
                maxNeighbors = goodNeighbors;
                countMaxNeighbors = 1;
            } else if (goodNeighbors == maxNeighbors) {
                ++countMaxNeighbors;
            }
        }
    }

    outfile << maxNeighbors << " " << countMaxNeighbors << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Reading the Input:**
   - Open the input file `vecini.in` for reading.
   - Read the matrix dimensions `m` (number of rows) and `n` (number of columns), as well as the number of `1`s `k`.
   - Initialize a matrix `A` of size `(m+1) x (n+1)` with all elements set to `0`.

2. **Populating the Matrix:**
   - Using a loop, read the `i,j` positions from the input file where the matrix value is `1` and set those positions in the matrix `A`.

3. **Finding the Maximum Number of Good Neighbors:**
   - For each element in the matrix, calculate the number of good neighbors.
   - A good neighbor is one that has the same value and lies in one of the 8 possible neighboring positions (horizontal, vertical, or diagonal).
   - Keep track of the maximum number of good neighbors found and count how many elements have this maximum number of good neighbors.

4. **Writing the Output:**
   - Open the output file `vecini.out` for writing.
   - Write the maximum number of good neighbors and the count of such elements to the output file.

The algorithm is designed to be efficient by checking each element's neighbors in constant time `O(1)`, leading to an overall time complexity of `O(m * n)`. This ensures fast execution even for the upper limits of the input constraints.
