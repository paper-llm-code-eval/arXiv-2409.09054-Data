---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `elfi.in` and write to `elfi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Marele vrăjitor Prospero are o grădină minunată îngrijită de o sumedenie de spiriduși care n-au altă sarcină decât să zboare la orele dimineții de-a lungul aleilor și să stropească plantele din vasele ornamentale de piatră aflate pe margine. Există un havuz chiar la capătul grădinii și o alee principală ce pornește de la havuz și duce până la intrare. Din aleea principală se desprind alei secundare ce formează ronduri alungite revenind, în același loc, la aleea principală.

Se știe că există $n$ spiriduși, numerotați de la $1$ la $n$, fiecare pentru câte una dintre aleile secundare. Toți pornesc de la havuz la ora $5:00:00$ dimineața cu câte un vas cu apă pregătit de cu seară, străbat aleea principală până la rondul lor, apoi parcurg aleea rondului propriu, revin în aleea principală, se întorc la havuz pentru a se alimenta cu apă și o iau de la capăt la fel, până la ora $9:00:00$ când se retrag la umbră pentru somn. Se știe că toți spiridușii zboară fără încetare, cu aceeași viteză, pe toată durata celor exact $4$ ore. Se cunosc, pentru fiecare spiriduș, numărul de secunde necesare pentru a ajunge de la havuz la rondul propriu și numărul de secunde necesare pentru a parcurge în întregime rondul propriu. Orice spiriduș care ajunge la havuz își umple vasul în exact o secundă, de la un robinet aflat pe marginea havuzului. De exemplu, dacă spiridușul care se ocupă de rondul $5$ din figură are nevoie de $2$ secunde pentru a ajunge la rondul său și de $15$ secunde pentru a parcurge rondul $5$, atunci va reveni la havuz pentru a-și umple vasul la orele $5:00:19$ ($2 + 15 + 2$), își umple vasul și pornește iar la ora $5:00:20$, revine iar la $5:00:39$ și pleacă iar la ora $5:00:40$ etc.

Doi spiriduși nu își pot umple vasul în același moment de la același robinet.

~[elfi.png]

# Cerință

Se cere să se determine numărul minim de robinete cu care trebuie să fie prevăzut havuzul astfel încât nici un spiriduş, în nici un moment, să nu fie nevoit să aştepte pentru a-şi putea umple vasul cu apă.

# Date de intrare

Din fișierul de intrare `elfi.in` se citesc:

* $n$, numărul de spiriduși, de pe primul rând;
* $n$ perechi de forma $c_i \ p_i$ reprezentând numărul de secunde de la havuz la rondul propriu și respectiv numărul de secunde necesar pentru parcurgerea rondului propriu, de pe următoarele $n$ linii ale fișierului.

# Date de ieșire

În fișierul de ieșire `elfi.out` se scrie o singura linie cu un singur număr reprezentând numărul minim de robinete necesare.

# Restricții și precizări

* $2 \leq n \leq 5 \ 000$;
* $1 \leq c_i \leq 100$;
* $1 \leq p_i \leq 100$;

---

Example:
`elfi.in`
```
5
7 4
7 8
4 5
7 6
2 15
```

`elfi.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine how often each sprite needs to refill their water jug and ensure that no two sprites need to refill at the same second without having an available faucet. We'll simulate the times each sprite will need to refill and use a data structure to keep track of the overlapping times to determine the maximum number of faucets required.

Here's the plan:
1. Parse the input from `elfi.in`.
2. Calculate the exact refill times for each sprite.
3. Use a frequency counter to keep track of how many sprites need to refill at each second.
4. Determine the maximum number of concurrent refills to find the minimum number of faucets required.
5. Output the result to `elfi.out`.

Here is the C++ implementation:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("elfi.in");
    ofstream outfile("elfi.out");

    int n;
    infile >> n;

    vector<pair<int, int>> sprites(n);
    for (int i = 0; i < n; ++i) {
        infile >> sprites[i].first >> sprites[i].second;
    }

    map<int, int> refill_times;
    const int total_seconds = 4 * 3600; // 4 hours in seconds

    for (const auto& sprite : sprites) {
        int c = sprite.first;
        int p = sprite.second;
        int cycle_time = 2 * c + p + 1; // time to go to the round, complete the round, come back and refill

        for (int t = cycle_time; t <= total_seconds; t += cycle_time) {
            refill_times[t]++;
        }
    }

    int max_faucets_needed = 0;
    for (const auto& time_count : refill_times) {
        max_faucets_needed = max(max_faucets_needed, time_count.second);
    }

    outfile << max_faucets_needed << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: We read the number of sprites `n` and then read the pairs of integers representing the time to reach their respective rounds and the time to complete those rounds.
2. **Simulating Refill Times**: For each sprite, we calculate a cycle time which includes the time to go to the round, complete the round, return, and refill. We then simulate the times at which each sprite will need to refill within the 4-hour window.
3. **Counting Concurrent Refills**: Using a map, we track how many sprites need to refill at each second.
4. **Finding Maximum Concurrent Refills**: We then find the maximum value in the map which represents the maximum number of concurrent refills at any given second.
5. **Outputting Result**: Finally, we write the result to `elfi.out`.

This approach ensures that we efficiently calculate the minimum number of faucets needed, taking into account the constraints provided.
