---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `eq4.in` and write to `eq4.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă o expresie matematică în care pot să apară literele `x`, `y`, `z`, `t`, cifre și semnele `+` sau `-`.

Cifrele alăturate formează numere. Literele reprezintă variabile. O variabilă poate fi precedată de un număr. Între variabilă și numărul care o precede nu există alte caractere. Un grup format dintr-o literă și, eventual, un număr care o precede formează un monom. Un monom **nu** conține mai multe litere. Numărul care apare într-un monom se numește coeficient.

Expresia poate să conțină și numere care nu sunt urmate de o variabilă. Aceste numere se numesc termeni liberi. 

Expresia este deci alcătuită din monoame și termeni liberi. Fiecare monom și fiecare termen liber este precedat de unul dintre semnele `+` sau `-`.

Exemple:

| Expresii corecte | Expresii incorecte |
| - | ------- |
| `-x+100`  | `x+100` (`x` nu este precedat de `+` sau `-`)   |
| `+3x+2y-3z+7x-15-3+8z-7y`  | `+x+y-3zt` (`3zt` nu este monom, deoarece conţine două litere) |
| `+10x-7y+3x-7+5z-8t-z-x-y+3` | `-x + y -34*t + 5z - 5u` (în expresie apar caractere nepermise, în acest caz spații, litera `u` și semnul `*`)|

Valoarea matematică a unei expresii este valoarea care se obține dacă înlocuim literele care apar în expresie cu valori numerice și efectuăm calculele. Valoarea unui monom se obține înmulțind coeficientul monomului cu valoarea pe care o are variabila care apare în respectivul monom. De exemplu, valoarea expresiei `+3x` pentru $x=2$ este $6$.

# Cerință

Fiind dată o expresie corectă, să se determine:

1. valoarea matematică a expresiei dacă $x$, $y$, $z$ și $t$ au valoarea $1$.
2. numărul de cvartete distincte $(x, y, z, t)$, de valori întregi care aparțin unui interval dat $[a, b]$, pentru care expresia matematică corespunzătoare expresiei date este egală cu o valoare dată $E$. Două cvartete sunt distincte dacă există cel puţin o poziţie pentru care valorile corespunzătoare sunt diferite.

# Date de intrare


Datele de intrare se citesc din fişierul `eq4.in`, care are următoarea structură:

* pe prima linie se află numărul natural $C$, care poate fi egal cu $1$ sau $2$, în funcţie de cerinţa ce trebuie rezolvată
* pe a doua linie se află expresia dată
* pe a treia linie se află valorile $a \ b \ E$, separate prin câte un spațiu.

# Date de ieșire


Datele de ieşire se vor scrie în fişierul `eq4.out` astfel:

* Dacă $C=1$, pe prima linie se va scrie răspunsul la cerința $1$
* Dacă $C=2$, pe prima linie se va scrie răspunsul la cerința $2$.

# Restricții și precizări

* coeficienţii sunt numere naturale, având cel mult $4$ cifre
* $1 \leq$ lungimea expresiei $\leq 100 \ 000$
* $-500 \leq a \leq b \leq 500$
* $-10^{15} \leq E \leq 10^{15}$
* În cel puțin $30\%$ dintre teste, în expresia dată apar cel mult trei dintre literele `x`, `y`, `z` sau `t`.
* Se acordă $10$ puncte din oficiu.

| $C$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 70      |

---

Example:
`eq4.in`
```
1
+10x-7y+3x-7+5z-8t-z-x-y+3
-1 1 0
```

`eq4.out`
```
-4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <map>
#include <string>

// Function to parse the expression and calculate the coefficients for x, y, z, and t
void parseExpression(const std::string &expr, int &constTerm, std::map<char, int> &coefficients) {
    int n = expr.size();
    int sign = 1; // 1 for +, -1 for -
    int i = 0;

    while (i < n) {
        if (expr[i] == '+') {
            sign = 1;
            i++;
        } else if (expr[i] == '-') {
            sign = -1;
            i++;
        }

        int num = 0;
        bool hasNum = false;
        while (i < n && isdigit(expr[i])) {
            num = num * 10 + (expr[i] - '0');
            i++;
            hasNum = true;
        }

        if (i < n && isalpha(expr[i])) {
            char var = expr[i];
            if (!hasNum) num = 1;
            coefficients[var] += sign * num;
            i++;
        } else {
            if (hasNum) {
                constTerm += sign * num;
            }
        }
    }
}

// Function to calculate the first requirement
int calculateValue(const std::map<char, int> &coefficients, int constTerm) {
    int value = constTerm;
    for (const auto& [var, coeff] : coefficients) {
        value += coeff;
    }
    return value;
}

// Function to calculate the second requirement
int countQuartets(const std::map<char, int> &coefficients, int constTerm, int a, int b, int E) {
    int count = 0;
    for (int x = a; x <= b; x++) {
        for (int y = a; y <= b; y++) {
            for (int z = a; z <= b; z++) {
                for (int t = a; t <= b; t++) {
                    int value = constTerm;
                    value += coefficients.at('x') * x;
                    value += coefficients.at('y') * y;
                    value += coefficients.at('z') * z;
                    value += coefficients.at('t') * t;
                    if (value == E) count++;
                }
            }
        }
    }
    return count;
}

int main() {
    std::ifstream infile("eq4.in");
    std::ofstream outfile("eq4.out");
    
    int C;
    infile >> C;
    
    std::string expr;
    infile >> expr;

    int a, b, E;
    infile >> a >> b >> E;

    int constTerm = 0;
    std::map<char, int> coefficients = {{'x', 0}, {'y', 0}, {'z', 0}, {'t', 0}};

    parseExpression(expr, constTerm, coefficients);

    if (C == 1) {
        int value = calculateValue(coefficients, constTerm);
        outfile << value << std::endl;
    } else if (C == 2) {
        int count = countQuartets(coefficients, constTerm, a, b, E);
        outfile << count << std::endl;
    }

    infile.close();
    outfile.close();
    
    return 0;
}
```

This C++ solution reads an expression from the input file `eq4.in`, parses it to determine the coefficients of variables `x`, `y`, `z`, `t`, and constant terms. Based on the given task (`C`), it either evaluates the expression assuming all variables have a value of 1 or counts the number of distinct quartets of values `(x, y, z, t)` in the range `[a, b]` that satisfy the given equation. The result is written to the file `eq4.out`.

### Explanation:

1. **parseExpression()**: This function extracts and calculates the coefficients of `x`, `y`, `z`, and `t` from the given expression as well as the constant term.
2. **calculateValue()**: This function calculates the mathematical value of the expression when all variables are set to 1.
3. **countQuartets()**: This function counts the number of quartets `(x, y, z, t)` such that the expression evaluates to a given value `E` within the specified range `[a, b]`.
4. **main()**: This function reads the input, calls the necessary functions based on the task (`C`), and writes the output.

The code avoids the use of `cin`, `cout`, `printf()`, or `scanf()` for input and output operations as required.
