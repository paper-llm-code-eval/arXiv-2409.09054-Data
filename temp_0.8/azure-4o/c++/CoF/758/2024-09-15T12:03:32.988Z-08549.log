---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paritate.in` and write to `paritate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În vederea asigurării unei transmiteri cât mai exacte a informaţiilor pe reţea, transmiterea se efectuează caracter cu caracter, fiecare caracter fiind dat prin codul său ASCII, adică o grupă de 8 biţi (octet). Pentru fiecare 8 biţi transmişi se calculează un bit de paritate care are valoarea $0$ (dacă codul ASCII al caracterului conţine un număr par de cifre binare $1$) sau $1$ (în caz contrar). Deoarece în problema noastră se transmit numai caractere ASCII standard, cu codul ASCII din intervalul $[32, 127]$, codul lor ASCII are bitul $7$ (primul bit din stânga) egal cu $0$. Pe această poziţie va fi pus bitul de paritate, economisind astfel câte un bit pentru fiecare caracter transmis. De exemplu, dacă mesajul care trebuie trasmis conţine caracterele `Paritate`, succesiunea de biţi transmisă va fi:
$\textcolor{red}{0}1010000\ \textcolor{red}{1}1100001\ \textcolor{red}{0}1110010\ \textcolor{red}{0}1101001\ \textcolor{red}{0}1110100\ \textcolor{red}{1}1100001\ \textcolor{red}{0}1110100\ \textcolor{red}{0}1100101$

În plus, pe lângă caracterele amintite, în mesaj mai poate să apară un caracter special, caracter care indică trecerea la începutul unui nou rând. Acest caracter are codul ASCII $10$.

# Cerinţă
Să se scrie un program care să verifice dacă un text a fost sau nu transmis corect.

# Date de intrare
Fişierul de intrare `paritate.in` are pe prima linie o succesiune de caractere `0` şi `1` care reprezintă mesajul transmis. Între caractere nu există spaţii. Linia se termină cu caracterul newline (`\n`).

# Date de ieşire
Fişierul de ieşire `paritate.out` are pe prima linie mesajul `DA` dacă textul a fost transmis corect sau `NU` în caz contrar. În cazul în care mesajul de pe prima linie este `DA`, liniile următoare vor conţine textul transmis în clar. În cazul în care mesajul de pe prima linie este `NU`, linia următoare va conţine numerele de ordine ale caracterelor care nu au fost transmise corect, în ordine strict crescătoare, separate prin câte un spaţiu.

# Restricţii şi precizări
- Cei 8 biţi ai codului ASCII a unui caracter se numerotează de la $0$ la $7$, de la dreapta la stânga, cel mai din stânga bit fiind bitul $7$ iar cel mai din dreapta bitul $0$.
- Textul transmis are cel mult $60\ 000$ de caractere.
- Numărul de caractere `0` şi `1` din prima linie a fişierului de intrare este multiplu de $8$.
- Codurile ASCII ale caracterelor din text aparţin mulţimii $\{10, 32, 33, 34, \dots, 127\}$, codul $10$ însemnând trecerea la începutul unui rând nou (newline).
- Nicio linie din fişierul de ieşire nu va avea mai mult de $255$ caractere.
- Caracterele din text sunt numerotate începând de la $0$.
- Mesajele `DA`/`NU` din prima linie a fişierului de ieşire se scriu cu majuscule.

---

Example:
`paritate.in`
```
0101000011100001011100100110100101110100111000010111010001100101
```

`paritate.out`
```
DA
Paritate
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a C++ solution that reads from `paritate.in` and writes to `paritate.out`. The solution checks the parity bit for each byte and verifies the transmitted message accordingly. It uses file I/O operations instead of standard input and output methods like `cin` and `cout`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream infile("paritate.in");
    std::ofstream outfile("paritate.out");
    
    if (!infile.is_open() || !outfile.is_open()) {
        return 1;
    }

    std::string bitstream;
    infile >> bitstream;
    infile.close();

    std::vector<int> incorrect_positions;
    std::string message;
    int n = bitstream.size();
    
    for (int i = 0; i < n; i += 8) {
        std::string byte = bitstream.substr(i, 8);
        int parity_bit = byte[0] - '0';
        int ascii_value = 0;

        for (int j = 1; j < 8; ++j) {
            ascii_value = (ascii_value << 1) | (byte[j] - '0');
        }

        // Count the number of 1s in the ASCII value.
        int count_ones = 0;
        for (int j = 0; j < 7; ++j) {
            if (byte[j + 1] == '1') {
                ++count_ones;
            }
        }

        int calculated_parity_bit = count_ones % 2;

        if (parity_bit != calculated_parity_bit) {
            incorrect_positions.push_back(i / 8);
        } else {
            message += static_cast<char>(ascii_value);
        }
    }

    if (incorrect_positions.empty()) {
        outfile << "DA\n" << message << "\n";
    } else {
        outfile << "NU\n";
        for (size_t i = 0; i < incorrect_positions.size(); ++i) {
            if (i > 0) {
                outfile << " ";
            }
            outfile << incorrect_positions[i];
        }
        outfile << "\n";
    }

    outfile.close();
    return 0;
}
```

### Explanation:

1. **File I/O**: The solution begins by opening `paritate.in` and `paritate.out` for reading and writing respectively.
2. **Reading Input**: It reads the entire bitstream into a string variable.
3. **Processing Each Byte**:
   - It iterates through the bitstream in chunks of 8 bits (1 byte).
   - For each byte, it extracts the parity bit (the first bit) and the ASCII value (the remaining 7 bits).
   - It calculates the number of `1` bits in the 7-bit ASCII value.
   - It verifies the parity bit by checking if the number of `1` bits is even or odd.
4. **Check Parity**: If the parity bit is incorrect, it records the position of the byte. Otherwise, it converts the 7-bit ASCII value to a character and appends it to the message.
5. **Output**: Based on whether any incorrect positions were found, it writes `DA` (yes) or `NU` (no) to the output file, followed by the message or the incorrect positions.

### Efficiency:
This solution efficiently processes the input bitstream in linear time relative to its length, making it suitable for the given constraints.
