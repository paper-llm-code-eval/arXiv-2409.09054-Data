---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to consider these steps:

1. **Understand the Problem:**
   We need to divide a rectangular cake of dimensions \( M \times N \) into the maximum size square pieces such that both dimensions \( M \) and \( N \) can be divided by the side length of the square \( L \).

2. **Find the Greatest Common Divisor (GCD):**
   The largest square size \( L \) that can divide both \( M \) and \( N \) is given by the GCD of \( M \) and \( N \). This is because the GCD is the largest number that divides both \( M \) and \( N \) without leaving any remainder.

3. **Calculate the Number of Squares:**
   Once \( L \) is known, the number of squares is calculated by:
   \[
   \text{Number of squares} = \left(\frac{M}{L}\right) \times \left(\frac{N}{L}\right)
   \]

Given these steps, the fastest approach is to calculate the GCD first and then use it to find the number of pieces and the side length of each piece.

Here's the C++ code that implements this solution:

```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");
    
    int M, N;
    infile >> M >> N;
    
    // Calculate the greatest common divisor (GCD)
    int GCD = std::gcd(M, N);
    
    // Calculate the number of pieces
    int num_pieces = (M / GCD) * (N / GCD);
    
    // Output the result
    outfile << num_pieces << " " << GCD << "\n";
    
    return 0;
}
```

### Explanation of the Code:
1. **Reading Input:**
   - We use `ifstream` to read the input from `tort.in`.
   - The numbers \( M \) and \( N \) are read from the file.

2. **Calculating GCD:**
   - The `std::gcd` function from the `<algorithm>` library is used to calculate the GCD of \( M \) and \( N \).

3. **Calculating the Number of Pieces:**
   - The number of square pieces is computed by dividing \( M \) and \( N \) by their GCD and multiplying the results.

4. **Writing Output:**
   - The result is written to `tort.out` using `ofstream`.

This approach ensures that the solution is efficient, making use of the GCD computation which is well-known to be efficient with a time complexity of \( O(\log(\min(M, N))) \). This solution adheres to the constraints and provides the correct result.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:12:20: error: 'gcd' is not a member of 'std'
   12 |     int GCD = std::gcd(M, N);
      |                    ^~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue arises because the `std::gcd` function is only available in C++17 and later. To fix this, we need to ensure that we are using C++17 standard. Additionally, we should include the `<numeric>` header which defines `std::gcd`.

Here is the corrected and complete C++ code:

```cpp
#include <fstream>
#include <numeric>  // Include this header for std::gcd

int main() {
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");
    
    int M, N;
    infile >> M >> N;
    
    // Calculate the greatest common divisor (GCD)
    int GCD = std::gcd(M, N);
    
    // Calculate the number of pieces
    int num_pieces = (M / GCD) * (N / GCD);
    
    // Output the result
    outfile << num_pieces << " " << GCD << "\n";
    
    return 0;
}
```

### Explanation of the Fix:
1. **Include `<numeric>` Header:**
   - The `<numeric>` header is required to use the `std::gcd` function.

2. **Ensure C++17 Standard Compilation:**
   - Make sure to compile the code with a C++17 compatible compiler. If using `g++`, this can be done with the flag `-std=c++17`.

### Compilation Command:
If you are compiling this code using `g++`, use the following command to ensure C++17 standard is used:
```sh
g++ -std=c++17 -o tort main.cpp
```

This should resolve the compilation issue and produce the correct output.
