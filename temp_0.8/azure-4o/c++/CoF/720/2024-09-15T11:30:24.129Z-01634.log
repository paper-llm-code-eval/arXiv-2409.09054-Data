---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find the largest possible square side length \( L \) that can divide both \( M \) and \( N \). This \( L \) is the greatest common divisor (GCD) of \( M \) and \( N \). Once we have \( L \), the number of square portions is given by \( (M / L) \times (N / L) \).

Here is the efficient C++ code for this task:

```cpp
#include <fstream>

// Function to compute the greatest common divisor (GCD) using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    // Open input and output files
    std::ifstream input("tort.in");
    std::ofstream output("tort.out");

    int M, N;
    // Read the dimensions of the rectangular cake
    input >> M >> N;

    // Compute the greatest common divisor of M and N
    int L = gcd(M, N);

    // Calculate the number of square portions
    int numPortions = (M / L) * (N / L);

    // Write the result to the output file
    output << numPortions << " " << L << std::endl;

    // Close input and output files
    input.close();
    output.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the dimensions \( M \) and \( N \) from the file `tort.in`.
2. **Compute GCD**: We use the Euclidean algorithm to find the GCD of \( M \) and \( N \). This gives us the side length \( L \) of the largest possible square.
3. **Calculate Portions**: The number of portions is calculated as \( (M / L) \times (N / L) \).
4. **Write Output**: Finally, we write the number of portions and the side length \( L \) to the file `tort.out`.

The Euclidean algorithm for computing the GCD is very efficient with a time complexity of \( O(\log(\min(M, N))) \), making this solution very optimal for the given constraints.
