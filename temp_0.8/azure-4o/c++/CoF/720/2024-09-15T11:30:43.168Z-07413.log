---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of dividing a rectangular cake into square portions, the key is to determine the greatest common divisor (GCD) of the two dimensions \(M\) and \(N\). The GCD will be the side length \(L\) of the largest square that can be used to divide the rectangle without leaving any remainder. Once we have \(L\), the number of such squares is given by \(\left(\frac{M}{L}\right) \times \left(\frac{N}{L}\right)\).

Here's the step-by-step plan:

1. Read the dimensions \(M\) and \(N\) from the input file `tort.in`.
2. Compute the GCD of \(M\) and \(N\) to find the size \(L\) of the largest square.
3. Calculate the number of such squares required to cover the entire rectangle.
4. Write the results to the output file `tort.out`.

Here's the C++ code implementing this plan:

```cpp
#include <fstream>
#include <algorithm>

// Function to compute GCD using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    // Open input and output files
    std::ifstream infile("tort.in");
    std::ofstream outfile("tort.out");
    
    int M, N;
    
    // Read the dimensions of the rectangle
    infile >> M >> N;
    
    // Compute the greatest common divisor
    int L = gcd(M, N);
    
    // Calculate the number of square portions
    int numOfSquares = (M / L) * (N / L);
    
    // Write the result to the output file
    outfile << numOfSquares << " " << L << "\n";
    
    // Close files
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:

1. **Reading the Input:**
   - We use `std::ifstream` to read the input file `tort.in`.
   - The dimensions \(M\) and \(N\) are read directly from the file.

2. **Computing the GCD:**
   - The function `gcd` calculates the greatest common divisor of \(M\) and \(N\) using the Euclidean algorithm.

3. **Calculating the Number of Squares:**
   - The side length \(L\) of the largest square is the GCD of \(M\) and \(N\).
   - The number of such squares is given by \((M / L) \times (N / L)\).

4. **Writing the Output:**
   - We use `std::ofstream` to write the result to the output file `tort.out`.

This solution is efficient and runs in logarithmic time relative to the smaller of the two dimensions, owing to the efficiency of the Euclidean algorithm for computing the GCD.
