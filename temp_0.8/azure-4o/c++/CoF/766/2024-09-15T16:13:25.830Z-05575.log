---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `afise.in` and write to `afise.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Campania electorală s-a terminat de mult, dar zidul din parcul central al orașului în care au fost puse afișele este încă într-o formă dezolantă. Ploile și vântul au acționat și au urâțit și mai mult această zonă pe care altă dată erau afișe frumos colorate. Primăria a decis să se ocupe de această problemă. A format o comisie și a decis realizarea unor panouri reclamă care să ascundă porțiunile deteriorate.

Deoarece fondurile sunt mici s-a decis să fie alocate doar un anumit număr de panouri publicitare care trebuie să ocupe o suprafață cât mai mică posibil. Comisia a primit datele din teren sub forma: lungime zid, câte unități sunt ocupate cu afișe ce trebuie acoperite și care este numărul de panouri pe care le poate folosi. De asemenea se primesc ca date și care sunt unitățile de zid ocupate cu afișe deja deteriorate.

# Cerință

Fiind date lungimea zidului, câte unități sunt deteriorate, care este numărul maxim de panouri ce pot fi folosite și care sunt unitățile de zid deteriorate, se cere să se determine lungimea minimă totală a panourilor care sunt folosite pentru a acoperi zona și câte panouri se folosesc. Lungimea minimă o definim ca numărul total de unități de zid acoperite astfel încât să fie mascate zonele problemă. Pentru acoperirea unităților de zid deteriorate, nu este neapărat necesar să se folosească toate panourile. Numărul de panouri folosite fiind limitat există posibilitatea să fie acoperite și zone din zid care sunt curate.

# Date de intrare

Fișierul de intrare `afise.in` conține pe prima linie $3$ valori separate prin câte un spațiu $L \ n \ k$, cu semnificația: $L$ lungimea totală a zidului, $n$ numărul de unități ce urmează a fi acoperite și $k$ numărul maxim de panouri ce pot fi folosite. Pe a doua linie separate prin câte un spațiu sunt $n$ valori $x_1, x_2, \dots, x_n$, unde xi reprezintă unitatea din zid care este acoperită de un afiș vechi. Valorile $x_1, x_2, \dots, x_n$, apar într-o ordine aleatoare.

# Date de ieșire

Fișierul de ieșire `afise.out` conține o singură linie cu două valoari ce reprezintă lungimea minimă totală folosită și numărul de panouri folosite astfel încât toate zonele deteriorate să fie acoperite.

# Restricții și precizări

* $0 < L \leq 1 \ 000$;
* $0 < n \leq L$;
* $0 < k \leq L / 2$;

---

Example:
`afise.in`
```
25 8 3
3 11 6 4 19 15 20 12
```

`afise.out`
```
11 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to ensure we cover all specified units with a minimal amount of panel length using at most the given number of panels. Here’s a detailed plan and the corresponding C++ code:

1. **Read Input:** Read the total length of the wall (`L`), the number of deteriorated units (`n`), and the maximum number of panels (`k`). Then, read the positions of the deteriorated units.

2. **Sort Positions:** Sort the positions of the deteriorated units. This helps in grouping contiguous or nearby units together, which is essential for minimizing the total length of panels used.

3. **Calculate Gaps:** Calculate the gaps between consecutive deteriorated units. This will help in deciding where to place the panels to cover the maximum area with the least number of panels.

4. **Dynamic Programming Approach:** Use dynamic programming to find the optimal way to cover the deteriorated units using the given number of panels. This involves calculating the cost (length) of covering certain segments and determining the minimum cost using up to `k` panels.

5. **Output the Result:** Output the minimal total length of the panels used and the number of panels used.

Below is the C++ code for the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream infile("afise.in");
    std::ofstream outfile("afise.out");
    
    int L, n, k;
    infile >> L >> n >> k;
    
    std::vector<int> positions(n);
    for (int i = 0; i < n; ++i) {
        infile >> positions[i];
    }
    
    std::sort(positions.begin(), positions.end());
    
    // dp array where dp[i][j] will store the minimum length to cover i units with j panels
    std::vector<std::vector<int>> dp(n + 1, std::vector<int>(k + 1, INT_MAX));
    
    // cost array where cost[i][j] will store the length to cover from i to j positions
    std::vector<std::vector<int>> cost(n, std::vector<int>(n, 0));
    
    for (int i = 0; i < n; ++i) {
        for (int j = i; j < n; ++j) {
            cost[i][j] = positions[j] - positions[i] + 1;
        }
    }
    
    for (int i = 0; i <= n; ++i) {
        dp[i][0] = INT_MAX;
    }
    dp[0][0] = 0;
    
    for (int j = 1; j <= k; ++j) {
        for (int i = 1; i <= n; ++i) {
            for (int l = 0; l < i; ++l) {
                if (dp[l][j-1] != INT_MAX) {
                    dp[i][j] = std::min(dp[i][j], dp[l][j-1] + cost[l][i-1]);
                }
            }
        }
    }
    
    int min_length = INT_MAX;
    for (int j = 1; j <= k; ++j) {
        min_length = std::min(min_length, dp[n][j]);
    }
    
    int panels_used = 1;
    for (int j = 1; j <= k; ++j) {
        if (dp[n][j] == min_length) {
            panels_used = j;
            break;
        }
    }
    
    outfile << min_length << " " << panels_used << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

This solution reads input from `afise.in`, processes the data to determine the minimum length of panels required, and writes the result to `afise.out`. The dynamic programming approach ensures the solution is efficient and optimal for the given constraints.
