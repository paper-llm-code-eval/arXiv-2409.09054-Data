---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `interesant.in` and write to `interesant.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o mulțime $S$ care conține $N$ șiruri de caractere formate din litere mici ale alfabetului englezesc.  

Un șir de caractere se numește _interesant_ în raport cu celelalte șiruri ale mulțimii, dacă nu există un alt șir în mulțime care să-l conțină ca subșir. De exemplu, dacă mulțimea $S$ conține șirurile `abc`, `bde` și `abcdef`, atunci singurul șir *interesant* este `abcdef` deoarece `abc` și `bde` nu îl conțin ca subșir. Mai mult, `abc` și `bde` sunt subșiruri în `abcdef`, deci nu sunt *interesante*.

# Cerințe

Fiind dată o mulțime $S$ formată din $N$ șiruri de caractere se cere:

1. Să se determine cel mai lung șir. Dacă sunt mai multe șiruri având aceeași lungime maximă, se cere cel mai mic din punct de vedere lexicografic.
2. Să se determine toate șirurile _interesante_ din  mulțimea $S$.

# Date de intrare


Fișierul de intrare `interesant.in` conține pe prima linie două numere naturale $p$ și $N$, despărțite prin spațiu. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$. Pe următoarele $N$ linii, se găsesc șirurile de caractere, câte unul pe linie.


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai cerința $1$**.

În acest caz, în fișierul de ieșire `interesant.out` se va scrie cel mai lung șir dintre cele citite. Dacă există mai multe șiruri de aceeași lungime, se va scrie cel mai mic din punct de vedere lexicografic.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai cerința $2$**.

În acest caz, fișierul de ieșire `interesant.out` va conține pe prima linie o valoare $K$ ce reprezintă numărul de șiruri _interesante_, iar pe următoarele $K$ linii, șirurile *interesante* **în ordinea în care apar în fișierul de intrare**.


# Restricții și precizări

* $2 \leq N \leq 200$
* Lungimea unui șir va fi cuprinsă între $1$ și $5 \ 000$.
* Un subșir al șirului de caractere $C_0 C_1 C_2 \dots C_k$ se definește ca fiind o succesiune de caractere $C_{i_1} C_{i_2} C_{i_3} \dots C_{i_k}$, unde $0 \leq i_1 < i_2 < i_3 < \dots < i_k \leq k$.
* Fișierul de intrare **NU conține șiruri identice**.

| $p$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 80      |

---

Example:
`interesant.in`
```
1 5
abcacaaz
ad
abcacaad
acd
zyt
```

`interesant.out`
```
abcacaad
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

// Function to check if s1 is a subsequence of s2
bool isSubsequence(const std::string& s1, const std::string& s2) {
    int m = s1.size(), n = s2.size();
    int j = 0; // For index of s1 (or subsequence)
    for (int i = 0; i < n && j < m; i++) {
        if (s1[j] == s2[i]) {
            j++;
        }
    }
    return (j == m);
}

int main() {
    std::ifstream infile("interesant.in");
    std::ofstream outfile("interesant.out");

    int p, N;
    infile >> p >> N;

    std::vector<std::string> strings(N);
    for (int i = 0; i < N; ++i) {
        infile >> strings[i];
    }

    if (p == 1) {
        // Find the longest string, and if multiple, the lexicographically smallest one
        std::string longest = strings[0];
        for (int i = 1; i < N; ++i) {
            if (strings[i].size() > longest.size() ||
                (strings[i].size() == longest.size() && strings[i] < longest)) {
                longest = strings[i];
            }
        }
        outfile << longest << "\n";
    }
    else if (p == 2) {
        std::vector<bool> isInteresting(N, true);

        // Determine interesting strings
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                if (i != j && isSubsequence(strings[i], strings[j])) {
                    isInteresting[i] = false;
                    break;
                }
            }
        }

        // Count and write the interesting strings
        int interestingCount = 0;
        for (int i = 0; i < N; ++i) {
            if (isInteresting[i]) {
                interestingCount++;
            }
        }
        outfile << interestingCount << "\n";
        for (int i = 0; i < N; ++i) {
            if (isInteresting[i]) {
                outfile << strings[i] << "\n";
            }
        }
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - Read input from the file `interesant.in` using `ifstream`.
   - Store the values of `p` and `N`.
   - Read the `N` strings into a vector.

2. **If `p == 1`:**
   - Loop through the strings to find the longest string.
   - If there are multiple longest strings, select the lexicographically smallest one.
   - Write the result to `interesant.out`.

3. **If `p == 2`:**
   - Use a nested loop to check if each string is a subsequence of any other string.
   - Mark strings that are subsequences of others as "not interesting".
   - Count and list all interesting strings.
   - Write the results to `interesant.out`.

The solution optimally checks for subsequences and ensures correct output according to the problem requirements.
