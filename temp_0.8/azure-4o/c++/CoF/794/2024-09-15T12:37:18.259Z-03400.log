---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we should follow these steps:

1. **Reading the Input**: We'll read the input values from the file `numar.in`.
2. **Constructing the Rational Number**: We'll form the number \( q \) from the integer and fractional parts.
3. **Finding Numerator and Denominator**: We need to find suitable integers \( a \) and \( b \) such that the absolute difference \(|a - b|\) is minimized and \( \frac{a}{b} = q \).
4. **Writing the Output**: We'll write the results to `numar.out`.

Let's break down the approach:

- **Reading the Input**: Since we must avoid using standard input/output functions like `cin` or `cout`, we'll use file streams.
- **Forming the Number**: We'll concatenate the integer and fractional parts to form a complete string representation of the number.
- **Finding the Best Fraction**: Using the properties of rational numbers, we'll convert the decimal representation to a fraction by considering the number of decimal places.

Here's the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <algorithm>

// Function to calculate the Greatest Common Divisor
long long gcd(long long a, long long b) {
    while (b != 0) {
        long long temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    std::ifstream infile("numar.in");
    std::ofstream outfile("numar.out");
    
    int ni, nz;
    infile >> ni >> nz;
    
    std::string integerPart = "";
    std::string fractionalPart = "";
    
    for (int i = 0; i < ni; ++i) {
        char digit;
        infile >> digit;
        integerPart += digit;
    }
    
    for (int i = 0; i < nz; ++i) {
        char digit;
        infile >> digit;
        fractionalPart += digit;
    }
    
    // Combine parts to form the number as a string
    std::string numberStr = integerPart + fractionalPart;
    
    // Convert the combined string to a long long integer
    long long a = std::stoll(numberStr);
    
    // Calculate the denominator (10^nz)
    long long b = std::pow(10, nz);
    
    // Reduce the fraction by the greatest common divisor
    long long divisor = gcd(a, b);
    a /= divisor;
    b /= divisor;
    
    // Output the results to numar.out
    outfile << std::to_string(a).length() << std::endl;
    outfile << a << std::endl;
    outfile << std::to_string(b).length() << std::endl;
    outfile << b << std::endl;
    
    return 0;
}
```

### Explanation of the Code:
1. **Reading Input**: We read the integer and fractional parts separately.
2. **Forming the Combined Number**: We concatenate the integer and fractional parts to form the complete number.
3. **Calculating Numerator and Denominator**: 
   - The numerator is the integer formed by concatenating the parts.
   - The denominator is \( 10^{\text{nz}} \), where `nz` is the number of decimal places.
4. **Simplifying the Fraction**: We use the Greatest Common Divisor (GCD) to reduce the fraction.
5. **Writing Output**: We output the lengths and values of `a` and `b`.

This solution ensures that the fraction is in its simplest form and minimizes the difference between the numerator and the denominator. The I/O operations are optimized for performance, adhering to the constraints provided.
