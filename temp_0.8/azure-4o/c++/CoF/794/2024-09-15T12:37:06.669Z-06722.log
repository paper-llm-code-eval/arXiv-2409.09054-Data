---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a solution to the problem written in C++ that reads input from `numar.in` and writes output to `numar.out` without using `cin` or `cout`.

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>

int main() {
    std::ifstream infile("numar.in");
    std::ofstream outfile("numar.out");

    int ni, nz;
    infile >> ni >> nz;

    std::string integerPart = "", fractionalPart = "";

    for (int i = 0; i < ni; ++i) {
        char c;
        infile >> c;
        integerPart += c;
    }

    for (int i = 0; i < nz; ++i) {
        char c;
        infile >> c;
        fractionalPart += c;
    }

    std::string qString = integerPart + fractionalPart;
    long long q = std::stoll(qString);
    long long denominator = 1;

    for (int i = 0; i < nz; ++i) {
        denominator *= 10;
    }
    
    long long num = q;
    long long den = denominator;
    long long gcd = std::__gcd(num, den);
    
    num /= gcd;
    den /= gcd;

    std::string numStr = std::to_string(num);
    std::string denStr = std::to_string(den);

    outfile << numStr.length() << "\n"
            << numStr << "\n"
            << denStr.length() << "\n"
            << denStr << "\n";

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation

1. **Reading Input**:
   - We read `ni` and `nz` from the input file.
   - We then read the integer part and fractional part separately and store them as strings.

2. **Constructing q**:
   - We concatenate the integer and fractional parts to form a complete string representation of the decimal number without the decimal point.

3. **Conversion and Calculation**:
   - We convert the concatenated string to a long long integer `q`.
   - We calculate the denominator by multiplying `10` `nz` times.
   - We then find the greatest common divisor (GCD) of `q` and the denominator to simplify the fraction.

4. **Simplification**:
   - We divide both the numerator and the denominator by their GCD to get the simplest form of the fraction.

5. **Output**:
   - We write the length of the numerator, the numerator itself, the length of the denominator, and the denominator itself to the output file.

This program reads and writes files directly, ensuring it adheres to the constraints of not using `cin`, `cout`, `printf`, or `scanf` for I/O operations.
