---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's lay out a step-by-step approach to solve the problem:

1. **Input Reading**: Read the input from the file `numar.in`. This includes reading the number of digits for the integer and fractional parts.
2. **Construct the Number**: Combine the integer and fractional parts to form the number `q`.
3. **Forming the Rational Number**: Convert `q` into a fraction `a / b` such that `a` and `b` are integers.
4. **Minimize |a - b|**: Consider `a` and `b` such that the absolute difference between them is minimized.
5. **Output Writing**: Write the results to the file `numar.out`.

We will use the `gcd` function from the standard library to simplify our fraction.

Here is the solution implemented in C++:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <numeric> // for std::gcd

int main() {
    std::ifstream fin("numar.in");
    std::ofstream fout("numar.out");

    int ni, nz;
    fin >> ni >> nz;
    
    std::string intPart, fracPart;
    
    // Read integer part
    for (int i = 0; i < ni; ++i) {
        char digit;
        fin >> digit;
        intPart += digit;
    }
    
    // Read fractional part
    for (int i = 0; i < nz; ++i) {
        char digit;
        fin >> digit;
        fracPart += digit;
    }
    
    // Combine integer and fractional parts
    std::string numberString = intPart + fracPart;

    // Construct the numerator `a`
    long long a = std::stoll(numberString);
    // Construct the denominator `b`
    long long b = 1;
    for (int i = 0; i < nz; ++i) {
        b *= 10;
    }
    
    // Simplify the fraction a / b
    long long gcd_ab = std::gcd(a, b);
    a /= gcd_ab;
    b /= gcd_ab;

    // Output the results
    fout << std::to_string(a).size() << "\n" << a << "\n";
    fout << std::to_string(b).size() << "\n" << b << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: We first read the counts `ni` and `nz` from the input file. Then we read the integer part and fractional part separately.
2. **Constructing the Number**:
   - The integer and fractional parts are combined into a single string, then converted to an integer `a`.
   - The denominator `b` is initially set to `10^nz` to account for the position of the decimal point.
3. **Simplifying the Fraction**:
   - The greatest common divisor (GCD) of `a` and `b` is calculated and used to simplify the fraction.
4. **Writing Output**:
   - The size of the numerator and denominator is computed and written to the output file along with their digit compositions.

This solution is optimized for both correctness and performance, ensuring that the input is read and processed efficiently, and the output is written according to the specified format.
