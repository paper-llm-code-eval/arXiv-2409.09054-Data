---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle the problem efficiently, we can use a modified version of Dijkstra's algorithm. Here are the steps:

1. **Graph Representation**:
   - Use an adjacency list to represent the graph.
   - For each objective, store its neighbors with the respective time and wattage required.

2. **Dijkstra's Algorithm**:
   - Use a priority queue to always expand the least time-consuming path.
   - Track the minimum time to each node with the currently available battery power.
   - Extend the algorithm to account for recharging at friendly bases.
   - For each node, consider all possible battery levels (1 through K) to find the smallest feasible battery type.

3. **Output the Result**:
   - The solution needs to print the minimal time found and the smallest battery type that achieves this minimal time.

Below is the complete C++ solution implementing the above approach:

```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <tuple>
#include <climits>
#include <algorithm>

struct Edge {
    int to, time, watts;
};

int main() {
    std::ifstream infile("lanterna.in");
    std::ofstream outfile("lanterna.out");

    int N, K;
    infile >> N >> K;

    std::vector<int> friendly(N + 1);
    for (int i = 1; i <= N; ++i) {
        infile >> friendly[i];
    }

    int M;
    infile >> M;

    std::vector<std::vector<Edge>> adj(N + 1);
    for (int i = 0; i < M; ++i) {
        int a, b, T, W;
        infile >> a >> b >> T >> W;
        adj[a].push_back({b, T, W});
        adj[b].push_back({a, T, W});
    }

    int inf = INT_MAX;
    auto dijkstra = [&](int maxWatts) {
        std::vector<std::vector<int>> dist(N + 1, std::vector<int>(K + 1, inf));
        std::priority_queue<std::tuple<int, int, int>, std::vector<std::tuple<int, int, int>>, std::greater<>> pq;

        dist[1][maxWatts] = 0;
        pq.push({0, 1, maxWatts});

        while (!pq.empty()) {
            auto [curTime, u, curWatts] = pq.top();
            pq.pop();

            if (curTime > dist[u][curWatts]) continue;

            for (const auto& edge : adj[u]) {
                int v = edge.to;
                int time = edge.time;
                int watts = edge.watts;
                if (curWatts >= watts && curTime + time < dist[v][curWatts - watts]) {
                    dist[v][curWatts - watts] = curTime + time;
                    pq.push({curTime + time, v, curWatts - watts});
                }
                if (friendly[v] && maxWatts >= watts && curTime + time < dist[v][maxWatts]) {
                    dist[v][maxWatts] = curTime + time;
                    pq.push({curTime + time, v, maxWatts});
                }
            }
        }

        int minTime = inf;
        for (int watts = 1; watts <= maxWatts; ++watts) {
            minTime = std::min(minTime, dist[N][watts]);
        }
        return minTime;
    };

    int Tmin = inf;
    int Wmin = 0;

    for (int w = 1; w <= K; ++w) {
        int time = dijkstra(w);
        if (time < Tmin) {
            Tmin = time;
            Wmin = w;
        }
    }

    outfile << Tmin << " " << Wmin << std::endl;
    return 0;
}
```

### Explanation:
1. **Input Reading**: We read the input from `lanterna.in` file.
2. **Graph Representation**: The graph is represented using an adjacency list.
3. **Dijkstra's Algorithm**: We use a modified version of Dijkstra's algorithm that considers the battery constraints and allows recharging at friendly bases.
4. **Output**: The result is written to `lanterna.out`.

This solution efficiently finds the minimum time and the smallest feasible battery type to traverse the objectives from 1 to N while considering the constraints.
