---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to determine the maximum possible height \( H \) such that the bulldozer can level the entire terrain. The strategy involves binary searching for the maximum value of \( H \) that satisfies the conditions. 

Here’s the step-by-step approach:

1. **Binary Search Setup**: The height \( H \) can range from 1 to the maximum height in the array \( h \). We'll use binary search to find the maximum valid \( H \).
2. **Feasibility Check for a Given \( H \)**: For each mid-point in the binary search, simulate the bulldozer's operation to check if it can level the ground at that height without running out of soil.
3. **Adjusting the Search Range**: Based on whether the current \( H \) is feasible or not, adjust the search range to either the lower half or the upper half.

The feasibility check involves verifying that the bulldozer's collected soil \( C \) never goes negative. 

Below is the C++ code implementing this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

bool canLevelAtHeight(const std::vector<int> &heights, int H) {
    long long C = 0;
    for (int h : heights) {
        if (h >= H) {
            C += (h - H);
        } else {
            C -= (H - h);
            if (C < 0) return false;
        }
    }
    return true;
}

int main() {
    std::ifstream infile("buldo.in");
    std::ofstream outfile("buldo.out");

    int N;
    infile >> N;

    std::vector<int> heights(N);
    for (int i = 0; i < N; ++i) {
        infile >> heights[i];
    }

    int low = 1;
    int high = *std::max_element(heights.begin(), heights.end());
    int bestH = 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (canLevelAtHeight(heights, mid)) {
            bestH = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    outfile << bestH << std::endl;

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

- **canLevelAtHeight Function**: This function checks if the bulldozer can level the terrain at height \( H \). It simulates the operation as described, ensuring \( C \) (the soil on the blade) never goes negative.
- **Binary Search**: The main function uses binary search to determine the maximum feasible \( H \). It iterates until the search space is exhausted, adjusting the range based on the feasibility check.

### Complexity:
- **Time Complexity**: \( O(N \log(max(h))) \) where \( N \) is the number of zones and \( max(h) \) is the maximum height in the terrain array.
- **Space Complexity**: \( O(N) \) for storing the heights array.

This approach ensures optimal performance given the problem constraints.
