---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently in C++, we need to follow these steps:

1. **Understand the Problem**:
   - We want to find the maximum height \( H \) to which we can level the terrain using a bulldozer.
   - The bulldozer can accumulate extra soil when the current height is above \( H \) and use the accumulated soil when the current height is below \( H \).

2. **Binary Search for Optimization**:
   - We can use Binary Search to find the maximum possible height \( H \).
   - The lower bound of \( H \) is 0 and the upper bound is the maximum height in the input array \( h \).

3. **Validation Function**:
   - For a given height \( H \), simulate the bulldozer operation to check if it can level the terrain to \( H \).

4. **Efficiency**:
   - The validation function runs in \( O(N) \) time.
   - Binary search runs in \( O(\log(\text{max}_h)) \) where \( \text{max}_h \) is the maximum height in the array.

Here is the complete and efficient solution in C++:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

// Function to check if we can level terrain to height H
bool isValidHeight(const std::vector<int>& heights, int H) {
    long long C = 0; // Accumulated soil
    for (int h : heights) {
        if (h >= H) {
            C += (h - H);
        } else {
            C -= (H - h);
            if (C < 0) return false; // Not enough soil to fill
        }
    }
    return true;
}

int main() {
    std::ifstream infile("buldo.in");
    std::ofstream outfile("buldo.out");

    int N;
    infile >> N;
    std::vector<int> heights(N);
    int max_height = 0;

    for (int i = 0; i < N; ++i) {
        infile >> heights[i];
        if (heights[i] > max_height) {
            max_height = heights[i];
        }
    }

    int left = 0, right = max_height, bestH = 0;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (isValidHeight(heights, mid)) {
            bestH = mid;
            left = mid + 1; // Try to find a higher valid height
        } else {
            right = mid - 1; // Try a lower height
        }
    }

    outfile << bestH << '\n';

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We read the input values from `buldo.in`.
   - We store heights in a vector and find the maximum height in the input.

2. **Binary Search**:
   - We perform a binary search between 0 and the maximum height to find the highest possible \( H \).

3. **Validation Function**:
   - For each midpoint \( H \) during the binary search, the `isValidHeight` function checks if it's possible to level the terrain to \( H \) using the bulldozer.

4. **Output the Result**:
   - Finally, we write the result to `buldo.out`.

This solution ensures that we efficiently find the optimal height \( H \) and handle the constraints provided in the problem.
