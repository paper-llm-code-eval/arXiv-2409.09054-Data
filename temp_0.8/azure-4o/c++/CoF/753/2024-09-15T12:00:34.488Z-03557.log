---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `harry.in` and write to `harry.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Tânărul Harry Potter a descoperit într-una din camerele castelului Hogwarts, o hartă, care în urma unei vrăji a făcut să apară un text secret. Textul scris doar cu litere mici ale alfabetului englez, constituie o cheie spre o vrajă nouă folositoare la meciurile de vâjhaț. Cheia nouă se obține astfel:

* din textul secret se formează toate cuvintele posibile din litere aflate pe poziții consecutive
* dintre cuvintele formate se alege cel care este cel mai mare din punct de vedere lexicografic.

Se consideră că două cuvinte $a_1 a_2 a_3 \dots a_k$ < $b_1 b_2 b_3 \dots b_l$, cuvintele fiind date prin caracterele ce le compun, sunt în ordine lexicografică dacă există un indice $i \leq k$ sau $i \leq l$ astfel încât $a_i < b_i$ iar $a_j = b_j$ oricare ar fi $j < i$.

Exemplu: dacă textul găsit de Harry este `abcd` atunci din el se vor obține cuvintele: `a`, `b`, `c`, `d`, `ab`, `bc`, `cd`, `abc`, `bcd`, `abcd`, iar soluția este `d` fiind cel mai mare din punct de vedere lexicografic.

# Cerință

Scrieți un program care, citind textul inițial, determină cuvântul cel mai mare din punct de vedere lexicografic dintre toate cuvintele formate în modul explicat mai sus.

# Date de intrare

Fișierul de intrare `harry.in` conține o singură linie pe care este scris textul inițial.

# Date de ieșire

Fișierul de ieșire `harry.out` va conține pe prima linie cuvântul ce constituie soluție.

# Restricții și precizări

* $1 \leq$ lungime text $\leq 255$;

---

Example:
`harry.in`
```
tatep
```

`harry.out`
```
tep
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a solution for the challenge in C++:

```cpp
#include <fstream>
#include <string>
#include <algorithm>
#include <vector>

int main() {
    // Open input and output files
    std::ifstream input("harry.in");
    std::ofstream output("harry.out");

    std::string text;
    if (input.is_open()) {
        std::getline(input, text);  // Read the entire line from the input file
        input.close();
    }

    std::string maxWord = "";
    std::string currentWord = "";

    int textLength = text.size();

    // Iterate over the text to find the lexicographically largest substring
    for (int i = textLength - 1; i >= 0; --i) {
        currentWord = text[i] + currentWord;
        if (currentWord > maxWord) {
            maxWord = currentWord;
        }
    }

    // Write the result to the output file
    if (output.is_open()) {
        output << maxWord;
        output.close();
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - We open and read the entire content from `harry.in` using an `ifstream`.
   - The content is stored in a `std::string` variable `text`.

2. **Finding the Largest Lexicographical Substring**:
   - We initialize two empty strings, `maxWord` and `currentWord`.
   - We iterate from the end of the string to the beginning. For each character, we prepend it to `currentWord`.
   - If `currentWord` becomes lexicographically larger than `maxWord` during this process, we update `maxWord`.

3. **Writing Output**:
   - We write the largest lexicographical word (substring) to `harry.out` using an `ofstream`.

This solution is efficient, with a time complexity of O(n), where n is the length of the input string. It ensures that we only make a single pass through the string while keeping track of the largest substring encountered. This is optimal given the constraints.
