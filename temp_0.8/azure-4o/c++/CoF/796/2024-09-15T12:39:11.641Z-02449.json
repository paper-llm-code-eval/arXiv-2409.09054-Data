{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/796/2024-09-15T12:39:11.641Z-02449.log",
  "attemptStart": 1726403951.641,
  "attemptEnd": 1726403964.451,
  "attemptDuration": 12.809999942779541,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Train {\n    int line;\n    int arrival_time;\n    int departure_time;\n};\n\nint toMinutes(int hours, int minutes) {\n    return hours * 60 + minutes;\n}\n\nint main() {\n    ifstream infile(\"tren.in\");\n    ofstream outfile(\"tren.out\");\n\n    int T;\n    infile >> T;\n\n    vector<Train> trains;\n    for (int i = 0; i < T; ++i) {\n        int L, H, M, S;\n        infile >> L >> H >> M >> S;\n        int arrival_time = toMinutes(H, M);\n        int departure_time = arrival_time + S;\n        trains.push_back({L, arrival_time, departure_time});\n    }\n\n    // Sort trains by their arrival time\n    sort(trains.begin(), trains.end(), [](const Train &a, const Train &b) {\n        return a.arrival_time < b.arrival_time;\n    });\n\n    int max_trains_same_line = 0;\n    int trains_seen = 0;\n    int max_no_see_time = 0;\n\n    int count_line1 = 0, count_line2 = 0;\n    int last_seen_time = trains[0].arrival_time - 1;\n    int last_departure_line1 = 0, last_departure_line2 = 0;\n\n    for (const auto &train : trains) {\n        if (train.line == 1) {\n            count_line1++;\n            last_departure_line1 = train.departure_time;\n        } else {\n            count_line2++;\n            if (train.arrival_time > last_departure_line1) {\n                trains_seen++;\n                last_departure_line2 = train.departure_time;\n            } else if (train.departure_time > last_departure_line1) {\n                trains_seen++;\n                last_departure_line2 = max(last_departure_line2, train.departure_time);\n            }\n        }\n\n        if (train.line == 1 && train.arrival_time > last_departure_line2) {\n            trains_seen++;\n        }\n\n        max_trains_same_line = max({max_trains_same_line, count_line1, count_line2});\n        max_no_see_time = max(max_no_see_time, train.arrival_time - last_seen_time - 1);\n        last_seen_time = max(last_seen_time, train.departure_time);\n    }\n\n    max_no_see_time = max(max_no_see_time, last_seen_time - last_departure_line1);\n\n    outfile << max_trains_same_line << \" \" << trains_seen << \" \" << max_no_see_time << endl;\n\n    infile.close();\n    outfile.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1969,
  "metadata": {
    "id": 796,
    "examples": [
      {
        "in": "8\n1 14 20 3\n2 14 21 1\n2 14 24 4\n1 14 40 8\n2 14 41 1\n2 14 43 1\n2 14 45 5\n1 14 56 1",
        "out": "5 5 11",
        "explainer": ""
      }
    ],
    "body": "Un elev în clasa a V-a, Rareş, s-a gândit să studieze mersul trenurilor ce trec prin gara din oraşul său, într-o zi. Gara are $2$ linii, numerotate cu $1$ şi $2$, pe care sosesc şi pleacă trenurile. În acea zi, în gară sosesc $T$ trenuri. Pentru fiecare tren din cele $T$, Rareş cunoaşte linia $L$ pe care va sosi, momentul sosirii, adică ora $H$ şi minutul $M$, precum şi durata de timp $S$ de staţionare (exprimată în minute). El a decis ca perioada de studiu a celor $T$ trenuri să înceapă cu momentul sosirii primului tren în gară din cele $T$ şi să se încheie odată cu momentul plecării ultimului tren din cele $T$.\n\nDin sala de aşteptare Rareş poate vedea cele $2$ linii. Rareş are însă o problemă: atunci când un tren se află în gară pe linia $1$, el nu poate vedea trenul staţionat în acelaşi timp pe linia $2$. De exemplu, dacă un tren ajunge în gară pe linia $1$ la ora $14:21$ şi staţionează $5$ minute atunci trenul va pleca din gară la ora $14:26$. Astfel, în intervalul de timp [$14:21-14:26$], Rareş nu poate vedea ce se întâmplă pe linia $2$. Trenul de pe linia $2$ va putea fi vizibil începând cu minutul următor, adică de la $14:27$.\n\n# Cerință\n\nScrieţi un program care să determine pentru un număr $T$ de trenuri care trec prin gară în perioada de studiu din acea zi:\n\n* numărul maxim de trenuri $Z$ care au staţionat pe aceeaşi linie;\n* numărul $X$ de trenuri pe care Rareş le vede;\n* durata de timp maximă $Y$ (exprimată în număr de minute consecutive), din perioada de studiu, în care Rareş nu a văzut niciun tren.\n\n# Date de intrare\n\nFișierul de intrare `tren.in` conține pe prima linie numărul $T$ de trenuri şi pe fiecare din următoarele $T$ linii, în ordinea sosirii trenurilor în gară, câte patru numere naturale $L$, $H$, $M$ şi $S$, separate prin câte un spaţiu, ce reprezintă linia $L$ pe care soseşte trenul, momentul sosirii trenului (ora $H$ şi minutul $M$) şi durata de timp $S$ de staţionare.\n\n\n# Date de ieșire\n\nFişierul de ieşire `tren.out` conţine pe prima linie, separate prin câte un spaţiu, valorile cerute $Z$, $X$ și $Y$ (în această ordine).\n\n# Restricții și precizări\n\n\n* $2 \\leq T \\leq 100$; $0 \\leq H \\leq 23$; $0 \\leq M \\leq 59$; $1 \\leq S \\leq 9$;\n* în acelaşi moment de timp nu pot pleca/sosi mai multe trenuri;\n* în acelaşi moment de timp nu poate pleca un tren şi altul să sosească;\n* pe aceeaşi linie nu pot staţiona mai multe trenuri în acelaşi moment de timp;\n* pentru aflarea corectă a numărului $Z$ se acordă 20% din punctajul pe test;\n* pentru aflarea corectă a numărului $X$ se acordă 40% din punctajul pe test;\n* pentru aflarea corectă a numărului $Y$ se acordă 40% din punctajul pe test.",
    "header": {
      "problem_id": 796,
      "problem_name": "tren",
      "tags": "[Implementation]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "tren.in",
      "output_filename": "tren.out",
      "multiple_solutions": true,
      "original_source": "OJI 2010 V: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "tren.in",
      "output": "tren.out"
    },
    "consoleInteraction": false
  }
}