---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `palindrom.in` and write to `palindrom.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.

Similar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.

Mai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.

# Cerință

Scrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:

1. câte dintre cele $n$ numere sunt palindrom;
2. câte dintre cele $n$ numere sunt aproape palindrom;
3. palindromurile asociate pentru cele $n$ numere citite.

# Date de intrare

Fișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `palindrom.out`:

* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;
* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;
* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.

---

Example:
`palindrom.in`
```
1
7
1221 500 53635 505 7 4004 1410
```

`palindrom.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>

bool isPalindrome(const std::string &str) {
    int len = str.size();
    for (int i = 0; i < len / 2; ++i) {
        if (str[i] != str[len - 1 - i])
            return false;
    }
    return true;
}

bool isAlmostPalindrome(const std::string &str) {
    int len = str.size();
    int diffCount = 0;
    for (int i = 0; i < len / 2; ++i) {
        if (str[i] != str[len - 1 - i])
            ++diffCount;
        if (diffCount > 1)
            return false;
    }
    return diffCount == 1;
}

std::string nextPalindrome(const std::string &str) {
    int len = str.size();
    std::string half = str.substr(0, (len + 1) / 2);
    std::string rev_half = half;
    std::reverse(rev_half.begin(), rev_half.end());
    
    std::string next_pal = (len % 2 == 0) ? (half + rev_half) : (half + rev_half.substr(1));
    
    if (next_pal > str)
        return next_pal;
    
    for (int i = half.size() - 1; i >= 0; --i) {
        if (half[i] != '9') {
            ++half[i];
            break;
        } else {
            half[i] = '0';
        }
    }
    
    if (half[0] == '0') {
        half = "1" + half;
        rev_half = half;
        std::reverse(rev_half.begin(), rev_half.end());
        next_pal = (len % 2 == 0) ? (half + rev_half.substr(1)) : (half + rev_half.substr(1));
    } else {
        rev_half = half;
        std::reverse(rev_half.begin(), rev_half.end());
        next_pal = (len % 2 == 0) ? (half + rev_half) : (half + rev_half.substr(1));
    }
    
    return next_pal;
}

int main() {
    std::ifstream infile("palindrom.in");
    std::ofstream outfile("palindrom.out");
    
    int C, n;
    infile >> C >> n;
    std::vector<std::string> numbers(n);
    
    for (int i = 0; i < n; ++i) {
        infile >> numbers[i];
    }
    
    if (C == 1) {
        int palindromeCount = 0;
        for (const auto &num : numbers) {
            if (isPalindrome(num))
                ++palindromeCount;
        }
        outfile << palindromeCount;
    }
    else if (C == 2) {
        int almostPalindromeCount = 0;
        for (const auto &num : numbers) {
            if (isAlmostPalindrome(num))
                ++almostPalindromeCount;
        }
        outfile << almostPalindromeCount;
    }
    else if (C == 3) {
        for (const auto &num : numbers) {
            outfile << nextPalindrome(num) << " ";
        }
    }
    
    infile.close();
    outfile.close();
    
    return 0;
}
``` 

This C++ program is structured to handle the three different cases based on the input value `C`. Here's a brief rundown of the implementation:

1. **Reading Input**: The program reads the input parameters from `palindrom.in` which include the case type `C`, the number of numbers `n`, and the list of `n` numbers.
2. **Palindrome Check**: The function `isPalindrome` checks if a given string number is a palindrome.
3. **Almost Palindrome Check**: The function `isAlmostPalindrome` checks if a given string number is an almost palindrome.
4. **Next Palindrome Calculation**: The function `nextPalindrome` computes the smallest palindrome greater than a given string number.
5. **Case Handling**: Based on the value of `C`, the program performs the required check and writes the appropriate output to `palindrom.out`.

This solution is designed to be efficient and should handle the upper constraints of the problem effectively.
