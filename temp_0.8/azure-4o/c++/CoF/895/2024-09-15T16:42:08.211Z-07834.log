---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator cibernetic se fac experimente cu roboți. Pe o bandă de lucru se află așezate unul lângă altul, $N$ cuburi galbene și albastre, numeroate în ordine cu valori de la $1$ la $N$. Pentru fiecare cub se cunoaște latura acestuia, exprimată în centimetri, și culoarea, codificată prin simbolul $g$ (pentru galben) sau $a$ (pentru albastru).


~[turnuri-1.png|align=right|width=30%]

Un robot inteligent este programat să construiască turnuri prin așezarea cuburilor unul peste altul. El se află în fața benzii de lucru, analizează fiecare cub în ordine, de la primul la ultimul, și procedează astfel:
* dacă este primul cub, îl lasă la locul lui pe bandă;
* așază cubul numerotat cu $K$ peste cubul numerotat cu $K-1$ doar dacă el are culoarea diferită și latura mai mică decât cubul $K-1$. Această operație se efectuează în cazul în care cubul $K-1$ se află deja într-un turn construit anterior sau dacă el a rămas în poziția inițială. În cazul în care cubul $K$ nu poate fi așezat peste cubul $K-1$, el rămâne la locul lui.


# Cerință

Știind că un turn poate fi format din cel puțin un cub, scrieți un program care să determine:

1. numărul final $T$ al turnurilor de pe bandă și $H$, înălțimea celui mai înalt turn care se poate forma, exprimată în centimetri;
2. cel mai mare număr de cuburi Nmax ce pot forma un turn, dacă cele $N$ cuburi ar putea fi rearanjate inițial pe bandă, unul lângă altul.

# Date de intrare

Fișierul de intrare `turnuri.in` conține:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinței și poate fi $1$ sau $2$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul cuburilor de pe bandă;
* pe fiecare dintre următoarele $N$ linii, câte un număr natural care reprezintă latura unui cub, urmat de un spațiu și simbolul $g$ sau $a$, pentru codificarea culorii cubului.

# Date de ieșire

În fișierul de ieșire `turnuri.out` va conține pentru cerința $1$ pe prima linie două valori, separate printr-un spațiu, ce reprezintă $T$ și $H$. Pentru cerința $2$ fișierul va conține pe prima linie numărul $Nmax$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$ și $1 \leq$ latura unui cub $\leq 500 \ 000$;
* nu există două cuburi cu laturi egale;
* se acordă $10$ puncte din oficiu. Pentru rezolvarea corectă a primei cerințe se acordă $30$ de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă $60$ de puncte.

---

Example:
`turnuri.in`
```
1
6
18 a
13 g
15 a
10 a
8 g
2 a
```

`turnuri.out`
```
3 31
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <limits>
#include <string>

struct Cub {
    int latura;
    char culoare;
};

int main() {
    std::ifstream infile("turnuri.in");
    std::ofstream outfile("turnuri.out");

    int cerinta, N;
    infile >> cerinta >> N;

    std::vector<Cub> cuburi(N);
    for (int i = 0; i < N; ++i) {
        infile >> cuburi[i].latura >> cuburi[i].culoare;
    }

    if (cerinta == 1) {
        std::vector<int> inaltime(N, 0);
        std::vector<int> turnuri;

        inaltime[0] = cuburi[0].latura;
        turnuri.push_back(inaltime[0]);
        int T = 1, H = inaltime[0];

        for (int i = 1; i < N; ++i) {
            if (cuburi[i].culoare != cuburi[i-1].culoare && cuburi[i].latura < cuburi[i-1].latura) {
                inaltime[i] = inaltime[i-1] + cuburi[i].latura;
            } else {
                inaltime[i] = cuburi[i].latura;
                turnuri.push_back(inaltime[i]);
                T++;
            }
            H = std::max(H, inaltime[i]);
        }

        outfile << T << " " << H << "\n";
    } else if (cerinta == 2) {
        std::vector<int> dp(N, 1);
        int Nmax = 1;

        std::sort(cuburi.begin(), cuburi.end(), [](const Cub &a, const Cub &b) {
            return a.latura < b.latura;
        });

        for (int i = 1; i < N; ++i) {
            for (int j = 0; j < i; ++j) {
                if (cuburi[i].culoare != cuburi[j].culoare) {
                    dp[i] = std::max(dp[i], dp[j] + 1);
                }
            }
            Nmax = std::max(Nmax, dp[i]);
        }

        outfile << Nmax << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation
1. **Read Input:**
   - Read `cerinta` to determine which task to solve (1 or 2).
   - Read `N` to get the number of cubes.
   - Read the dimensions and colors of the cubes into a vector of `Cub` structs.

2. **Task 1:**
   - Initialize a vector `inaltime` to store the current height of each tower.
   - Initialize `T` to track the number of towers and `H` to track the highest tower.
   - Iterate over the cubes to construct towers:
     - If the current cube can be placed on the previous cube (according to the rules), update the height.
     - Otherwise, start a new tower.
     - Track the maximum height.

3. **Task 2:**
   - Sort the cubes by their side length.
   - Use dynamic programming to find the longest sequence of alternating color cubes:
     - Initialize a `dp` vector to store the maximum number of cubes that can be stacked ending at each cube.
     - Iterate through the cubes, updating the `dp` values based on valid previous cubes.
     - Track the maximum value in `dp` which represents the largest possible number of cubes in a valid tower.

### Usage
- Ensure the input file `turnuri.in` is in the correct format.
- Run the program; it will output the results to `turnuri.out`.
