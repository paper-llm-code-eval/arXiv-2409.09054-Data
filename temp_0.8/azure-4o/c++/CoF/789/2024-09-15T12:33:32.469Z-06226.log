---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `startrek.in` and write to `startrek.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jean-Luc Picard, căpitanul navei spațiale Enterprise, a constatat că în vecinătatea navei sale au apărut $n$ nave borgiene. Distanțele dintre acestea și nava Enterprise sunt $d_1, d_2, \dots, d_n$. Navele borgiene nu se deplasează unele în raport cu altele și nici în raport cu nava Enterprise. Pozițiile în spațiu ale celor $n$ nave borgiene și poziția navei Enterprise sunt distincte două câte două (nu există două nave care să ocupe același punct în spațiul tridimensional).

La un moment dat, toate cele $n$ nave borgiene declanșează simultan atacul, lansând câte un proiectil în direcția navei Enterprise. Pereții navei Enterprise sunt rezistenți la asemenea atacuri, însă căpitanul decide să distrugă un număr maxim de proiectile cu ajutorul armei laser. Cele n proiectile se deplasează cu vitezele constante $v_1, v_2, \dots, v_n$ exprimate în metri pe secundă. Căpitanul Jean-Luc Picard are la dispoziție o armă laser cu care poate distruge pe rând câte un proiectil. Arma poate fi orientată instantaneu spre oricare navă borgiană. Arma laser poate executa oricâte trageri începând cu momentul declanșării atacului, dar după fiecare tragere are nevoie de $t$ secunde pentru a se reîncărca cu energie. În acest interval de timp nu se poate efectua o altă tragere. Orientarea armei laser spre un anumit proiectil nu consumă timp. De asemenea, timpul scurs între momentul tragerii și distrugerea proiectilului vizat este zero. Căpitanul nu ratează ținta niciodată, iar proiectilele care reușesc să lovească nava Enterprise nu-l pot împiedica pe căpitanul Picard să continue să tragă asupra altor proiectile aflate în mișcare.

# Cerință

Să se găsească numărul maxim de proiectile care pot fi distruse cu arma laser.

# Date de intrare

Fișierul de intrare `startrek.in` conține pe prima linie numerele naturale $n$ și $t$, reprezentând numărul de nave borgiene, respectiv timpul de reîncărcare a armei laser cu energie. Pe linia a doua, sunt $n$ numere naturale $d_1 \ d_2 \ \dots \ d_n$ reprezentând distanțele la care se găsesc navele borgiene față de nava Enterprise. Pe linia a treia se găsesc $n$ numere naturale $v_1, v_2, \dots, v_n$ reprezentând vitezele de deplasare ale celor $n$ proiectile.

# Date de ieșire

În fișierul de ieșire `startrek.out` va conține un număr natural $p$, reprezentând numărul maxim de proiectile distruse.

# Restricții și precizări

* $2 \leq n \leq 4 \ 000$;
* $1 \leq d_1, d_2, \dots, d_n \leq 10 \ 000$;
* $1 \leq v_1, v_2, \dots, v_n$;
* $t \leq 1 \ 000$;
* Dacă momentul în care un proiectil ar trebui să lovească nava coincide cu momentul în care se trage cu arma laser asupra lui, se consideră că Enterprise distruge acel proiectil.
* Dacă viteza unui proiectil este $v$, atunci în timpul $t$, acesta străbate distanța $d = v \cdot t$

---

Example:
`startrek.in`
```
3 4
4 3 6
2 1 1
```

`startrek.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:### Solution Approach

To solve the problem efficiently, the goal is to destroy the maximum number of projectiles before they hit the Enterprise. The key insight is to destroy the projectiles that will hit the Enterprise the fastest first.

1. **Calculate the Time to Impact**: For each projectile, calculate the time it will take to hit the Enterprise. This can be computed as \( \text{time\_to\_impact}[i] = \frac{d_i}{v_i} \).

2. **Sort by Time to Impact**: Sort the projectiles by their time to impact in ascending order. This allows us to prioritize the projectiles that will hit the Enterprise the soonest.

3. **Simulate the Laser Firing**: Iterate through the sorted list of projectiles, and simulate firing the laser. Keep track of the time when the laser can fire next, and if the laser can destroy a projectile before it hits the Enterprise, increment the count of destroyed projectiles.

Here's the implementation of this approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Projectile {
    double time_to_impact;
    int index;
};

bool compareProjectiles(const Projectile &a, const Projectile &b) {
    return a.time_to_impact < b.time_to_impact;
}

int main() {
    std::ifstream fin("startrek.in");
    std::ofstream fout("startrek.out");

    int n, t;
    fin >> n >> t;

    std::vector<int> distances(n);
    std::vector<int> speeds(n);
    std::vector<Projectile> projectiles(n);

    for (int i = 0; i < n; i++) {
        fin >> distances[i];
    }

    for (int i = 0; i < n; i++) {
        fin >> speeds[i];
    }

    for (int i = 0; i < n; i++) {
        projectiles[i] = {static_cast<double>(distances[i]) / speeds[i], i};
    }

    std::sort(projectiles.begin(), projectiles.end(), compareProjectiles);

    int destroyed = 0;
    double currentTime = 0.0;

    for (const auto &proj : projectiles) {
        if (currentTime <= proj.time_to_impact) {
            destroyed++;
            currentTime += t;
        }
    }

    fout << destroyed << std::endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Read Input**: Read the number of projectiles `n` and the reload time `t` from the input file `startrek.in`. Then read the distances and speeds of the projectiles into two vectors.

2. **Calculate Time to Impact**: For each projectile, calculate the time it takes to hit the Enterprise using the formula \( \text{time\_to\_impact}[i] = \frac{d_i}{v_i} \).

3. **Sort Projectiles**: Sort the projectiles based on their time to impact.

4. **Simulate Laser Firing**: Initialize the current time to 0. Iterate through the sorted projectiles and check if the current time is less than or equal to the time to impact of the projectile. If it is, destroy the projectile and increment the destroyed counter. Update the current time by adding the reload time `t`.

5. **Output Result**: Output the number of destroyed projectiles to `startrek.out`.

This solution prioritizes efficiency by using sorting, which has a time complexity of \(O(n \log n)\), making it suitable for the given constraints.
