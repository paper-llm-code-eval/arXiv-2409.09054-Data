---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `startrek.in` and write to `startrek.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jean-Luc Picard, căpitanul navei spațiale Enterprise, a constatat că în vecinătatea navei sale au apărut $n$ nave borgiene. Distanțele dintre acestea și nava Enterprise sunt $d_1, d_2, \dots, d_n$. Navele borgiene nu se deplasează unele în raport cu altele și nici în raport cu nava Enterprise. Pozițiile în spațiu ale celor $n$ nave borgiene și poziția navei Enterprise sunt distincte două câte două (nu există două nave care să ocupe același punct în spațiul tridimensional).

La un moment dat, toate cele $n$ nave borgiene declanșează simultan atacul, lansând câte un proiectil în direcția navei Enterprise. Pereții navei Enterprise sunt rezistenți la asemenea atacuri, însă căpitanul decide să distrugă un număr maxim de proiectile cu ajutorul armei laser. Cele n proiectile se deplasează cu vitezele constante $v_1, v_2, \dots, v_n$ exprimate în metri pe secundă. Căpitanul Jean-Luc Picard are la dispoziție o armă laser cu care poate distruge pe rând câte un proiectil. Arma poate fi orientată instantaneu spre oricare navă borgiană. Arma laser poate executa oricâte trageri începând cu momentul declanșării atacului, dar după fiecare tragere are nevoie de $t$ secunde pentru a se reîncărca cu energie. În acest interval de timp nu se poate efectua o altă tragere. Orientarea armei laser spre un anumit proiectil nu consumă timp. De asemenea, timpul scurs între momentul tragerii și distrugerea proiectilului vizat este zero. Căpitanul nu ratează ținta niciodată, iar proiectilele care reușesc să lovească nava Enterprise nu-l pot împiedica pe căpitanul Picard să continue să tragă asupra altor proiectile aflate în mișcare.

# Cerință

Să se găsească numărul maxim de proiectile care pot fi distruse cu arma laser.

# Date de intrare

Fișierul de intrare `startrek.in` conține pe prima linie numerele naturale $n$ și $t$, reprezentând numărul de nave borgiene, respectiv timpul de reîncărcare a armei laser cu energie. Pe linia a doua, sunt $n$ numere naturale $d_1 \ d_2 \ \dots \ d_n$ reprezentând distanțele la care se găsesc navele borgiene față de nava Enterprise. Pe linia a treia se găsesc $n$ numere naturale $v_1, v_2, \dots, v_n$ reprezentând vitezele de deplasare ale celor $n$ proiectile.

# Date de ieșire

În fișierul de ieșire `startrek.out` va conține un număr natural $p$, reprezentând numărul maxim de proiectile distruse.

# Restricții și precizări

* $2 \leq n \leq 4 \ 000$;
* $1 \leq d_1, d_2, \dots, d_n \leq 10 \ 000$;
* $1 \leq v_1, v_2, \dots, v_n$;
* $t \leq 1 \ 000$;
* Dacă momentul în care un proiectil ar trebui să lovească nava coincide cu momentul în care se trage cu arma laser asupra lui, se consideră că Enterprise distruge acel proiectil.
* Dacă viteza unui proiectil este $v$, atunci în timpul $t$, acesta străbate distanța $d = v \cdot t$

---

Example:
`startrek.in`
```
3 4
4 3 6
2 1 1
```

`startrek.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to maximize the number of projectiles that can be destroyed by the laser before they hit the Enterprise. The key here is to determine the order in which the projectiles will hit the Enterprise and try to destroy them before they do.

Here's the strategy:
1. Calculate the time it takes for each projectile to reach the Enterprise.
2. Sort the projectiles based on their times of arrival.
3. Use a greedy approach to destroy the projectiles in the sorted order, ensuring that each destruction is followed by the recharging time of the laser.

Now, let's implement this in C++ efficiently:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

struct Projectile {
    int distance;
    int speed;
    double timeToHit; // Time to hit the Enterprise
};

bool compare(const Projectile &a, const Projectile &b) {
    return a.timeToHit < b.timeToHit;
}

int main() {
    std::ifstream inFile("startrek.in");
    std::ofstream outFile("startrek.out");

    int n, t;
    inFile >> n >> t;

    std::vector<Projectile> projectiles(n);

    // Read distances
    for (int i = 0; i < n; ++i) {
        inFile >> projectiles[i].distance;
    }

    // Read speeds and calculate times to hit
    for (int i = 0; i < n; ++i) {
        inFile >> projectiles[i].speed;
        projectiles[i].timeToHit = (double)projectiles[i].distance / projectiles[i].speed;
    }

    // Sort projectiles by their time to hit the Enterprise
    std::sort(projectiles.begin(), projectiles.end(), compare);

    int destroyed = 0;
    double currentTime = 0;

    for (const auto &proj : projectiles) {
        if (currentTime <= proj.timeToHit) {
            ++destroyed;
            currentTime += t;
        }
    }

    outFile << destroyed << std::endl;

    return 0;
}
```

### Explanation:
1. **Struct Definition**: We define a `Projectile` struct to hold the distance, speed, and time it takes the projectile to hit the Enterprise.
2. **Compare Function**: We create a compare function to sort projectiles based on their `timeToHit`.
3. **Input Reading**: We read the input from the file and store the data in a vector of `Projectile` structs.
4. **Time Calculation**: For each projectile, calculate the time to hit the Enterprise using the formula `distance / speed`.
5. **Sorting**: Sort the projectiles based on the calculated time to hit.
6. **Greedy Approach**: Iterate through the sorted projectiles, keeping track of the current time. If the projectile can be destroyed (i.e., the current time is less than or equal to the time to hit), increment the destroyed count and update the current time by adding the recharging time `t`.
7. **Output**: Write the result to the output file.

This approach ensures that we destroy the maximum number of projectiles before they can hit the Enterprise. The sorting step ensures that we always consider the projectiles in the order they will hit the Enterprise, allowing the greedy approach to work correctly.
