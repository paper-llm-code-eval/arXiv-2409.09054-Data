---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the problem. This solution reads the input from `ucif.in`, calculates the last digit of the sum \( s = 1^1 + 2^2 + 3^3 + \dots + n^n \), and writes the result to `ucif.out`:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("ucif.in");
    std::ofstream outfile("ucif.out");
    
    int n;
    infile >> n;
    
    int lastDigitSum = 0;
    
    for (int i = 1; i <= n; ++i) {
        int lastDigitPower = 1;
        for (int j = 0; j < i; ++j) {
            lastDigitPower = (lastDigitPower * i) % 10;
        }
        lastDigitSum = (lastDigitSum + lastDigitPower) % 10;
    }
    
    outfile << lastDigitSum << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **File Reading**: The program reads the input number \( n \) from `ucif.in`.
2. **Sum Calculation**: We initialize `lastDigitSum` to 0 to store the running total of the last digits of each term \( i^i \).
3. **Last Digit Calculation**:
   - For each number \( i \) from 1 to \( n \), we compute \( i^i \) modulo 10 to get the last digit of \( i^i \).
   - We use a loop to compute the power \( i^i \) and take modulo 10 at each multiplication step to keep only the last digit.
4. **Sum the Last Digits**: We add the last digit of \( i^i \) to `lastDigitSum` and take modulo 10 to keep only the last digit of the running sum.
5. **File Writing**: Finally, the program writes the result to `ucif.out`.

This solution ensures efficient calculation by keeping track of only the last digits and modular operations, making it very fast even for the upper limit of \( n = 100 \).
