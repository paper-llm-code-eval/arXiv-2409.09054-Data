---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a C++ solution that efficiently computes the last digit of \( s = 1^1 + 2^2 + 3^3 + \dots + n^n \).

This solution focuses on:
1. **Efficient Reading/Writing**: Using file streams for input and output to meet the requirement of not using `cin`, `cout`, `printf()`, or `scanf()`.
2. **Efficient Calculation**: Only storing and computing the last digit of intermediate results to save on computational resources, as the last digit of a number is only influenced by the last digits of its components.

Here is the C++ code:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream input("ucif.in");
    std::ofstream output("ucif.out");

    int n;
    input >> n;

    int last_digit_sum = 0;
    for (int i = 1; i <= n; ++i) {
        int last_digit_base = i % 10;
        int last_digit_power = 1;
        for (int j = 0; j < i; ++j) {
            last_digit_power = (last_digit_power * last_digit_base) % 10;
        }
        last_digit_sum = (last_digit_sum + last_digit_power) % 10;
    }

    output << last_digit_sum << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `ucif.in` using file streams.
2. **Last Digit Calculation**: For each number \(i\) from 1 to \(n\), we calculate \(i^i\) modulo 10 to get the last digit of \(i^i\). This is done using repeated multiplication and taking modulo 10 at each step to ensure we only keep the last digit.
3. **Summing Last Digits**: We maintain a running sum of the last digits of all \(i^i\) values and take modulo 10 at each step to ensure we always have the last digit of the total sum.
4. **Writing Output**: The final result is written to `ucif.out`.

This approach ensures that the computation remains efficient and within the bounds of typical integer operations, avoiding potential overflow issues and maintaining high performance.
