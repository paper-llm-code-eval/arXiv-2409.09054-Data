---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to simulate the growth and reduction of Pinocchio's nose over a given number of days. Here's a breakdown of how we can do this:

1. **Read Input**: We need to read the initial length of the nose `n`, the daily growth rate `p`, and the total number of days `k` from the input file.
2. **Simulate Each Day**:
   - For weekdays (Monday to Friday), the nose grows by `p` centimeters.
   - For weekends (Saturday and Sunday), the nose reduces by `1` centimeter.
3. **Output the Result**: Finally, we write the resulting length of the nose after `k` days to the output file.

Here's the C++ code that does this efficiently:

```cpp
#include <fstream>

int main() {
    std::ifstream infile("pinochio.in");
    std::ofstream outfile("pinochio.out");

    int n, p, k;
    infile >> n >> p >> k;

    int weeks = k / 7;
    int extra_days = k % 7;
    
    // 5 weekdays and 2 weekend days per week
    int nose_length = n + weeks * (5 * p - 2);

    // Process the extra days
    for (int i = 0; i < extra_days; ++i) {
        if (i < 5) {
            nose_length += p; // Weekday
        } else {
            nose_length -= 1; // Weekend day
        }
    }

    outfile << nose_length << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   ```cpp
   std::ifstream infile("pinochio.in");
   std::ofstream outfile("pinochio.out");

   int n, p, k;
   infile >> n >> p >> k;
   ```

2. **Calculating Weekly Changes**:
   - Each week consists of 5 weekdays and 2 weekend days.
   - For each complete week, the nose will increase by `5 * p` (for 5 weekdays) and decrease by `2` (for 2 weekend days).
   - The number of complete weeks is `k / 7`.
   ```cpp
   int weeks = k / 7;
   int extra_days = k % 7;
   
   // 5 weekdays and 2 weekend days per week
   int nose_length = n + weeks * (5 * p - 2);
   ```

3. **Processing Extra Days**:
   - After accounting for the complete weeks, we need to handle the remaining days that do not form a complete week.
   - Depending on whether the day is a weekday or a weekend day, we adjust the nose length accordingly.
   ```cpp
   for (int i = 0; i < extra_days; ++i) {
       if (i < 5) {
           nose_length += p; // Weekday
       } else {
           nose_length -= 1; // Weekend day
       }
   }
   ```

4. **Writing the Output**:
   ```cpp
   outfile << nose_length << "\n";
   ```

This code efficiently calculates the final length of Pinocchio's nose by leveraging the repetitive weekly pattern and only iterating over the remaining days, thus minimizing the number of operations needed.
