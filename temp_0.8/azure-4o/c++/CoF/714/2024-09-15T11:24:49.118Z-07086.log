---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution to the problem:

```cpp
#include <fstream>

int main() {
    std::ifstream inFile("pinochio.in");
    std::ofstream outFile("pinochio.out");

    int n, p, k;
    inFile >> n >> p >> k;

    int weeks = k / 7;
    int remaining_days = k % 7;

    int nose_length = n + weeks * (5 * p - 2);

    for (int i = 0; i < remaining_days; ++i) {
        if (i < 5) { // Monday to Friday (0 to 4)
            nose_length += p;
        } else { // Saturday and Sunday (5 and 6)
            nose_length -= 1;
        }
    }

    outFile << nose_length << std::endl;

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - The code reads the input values `n`, `p`, and `k` from the file `pinochio.in`.

2. **Calculation**:
   - **Weeks Calculation**: Calculate the number of complete weeks (`weeks = k / 7`) and the remaining days (`remaining_days = k % 7`).
   - **Weekly Growth Impact**: For each complete week, the nose grows for 5 days and shrinks for 2 days. Hence, the net effect per week is `(5 * p - 2)`.
   - **Initial Nose Length Update**: Multiply the net growth effect by the number of weeks and add it to the initial nose length `n`.

3. **Remaining Days Handling**:
   - Iterate over the remaining days and adjust the nose length accordingly:
     - For weekdays (Monday to Friday), increase by `p`.
     - For weekends (Saturday and Sunday), decrease by `1`.

4. **Output**:
   - Write the calculated nose length to the output file `pinochio.out`.

### Edge Cases Considered:
- The code correctly handles various lengths of `k`, ensuring proper handling for both complete weeks and any extra days.
- It also respects the growth and shrinkage pattern strictly adhering to the weekday and weekend rules.

This solution is efficient given the constraints and ensures minimal unnecessary computations by leveraging integer division and modulo operations.
