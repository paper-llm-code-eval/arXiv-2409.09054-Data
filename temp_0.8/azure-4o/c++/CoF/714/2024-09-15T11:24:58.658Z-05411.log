---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the problem step by step and then develop an efficient C++ solution:

1. **Understand the Problem:**
   - Pinocchio's nose grows by `p` cm on weekdays (from Monday to Friday).
   - On Saturdays and Sundays, the nose shrinks by 1 cm each day.
   - We need to calculate the length of Pinocchio's nose after `k` days starting with an initial length `n`.

2. **Plan the Solution:**
   - Read the input values `n`, `p`, and `k`.
   - Calculate the total number of complete weeks and the remaining days.
   - For complete weeks:
     - Each week has 5 growth days and 2 shrinking days.
     - Nose grows by `5 * p` cm and shrinks by `2 * 1` cm each week.
   - For remaining days:
     - If the day is a weekday, add `p` cm.
     - If the day is a weekend, subtract 1 cm.
   - Combine the results to get the final length.

3. **Efficient Implementation:**
   - Instead of iterating day-by-day, use arithmetic to calculate the number of weeks and apply the changes directly.

Here is the C++ code implementing this plan:

```cpp
#include <iostream>
#include <fstream>

int main() {
    std::ifstream fin("pinochio.in");
    std::ofstream fout("pinochio.out");

    int n, p, k;
    fin >> n >> p >> k;

    // Calculate the total complete weeks and the remaining days
    int weeks = k / 7;
    int remaining_days = k % 7;

    // Growth and reduction over complete weeks
    int growth_per_week = 5 * p; // 5 weekdays
    int reduction_per_week = 2; // 2 weekends

    // Total length after complete weeks
    int total_length = n + weeks * (growth_per_week - reduction_per_week);

    // Adjust for remaining days
    for (int i = 0; i < remaining_days; ++i) {
        if (i < 5) { // Weekdays
            total_length += p;
        } else { // Weekends
            total_length -= 1;
        }
    }

    fout << total_length << std::endl;

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - We read `n`, `p`, and `k` from `pinochio.in`.

2. **Calculating Complete Weeks:**
   - `weeks = k / 7` gives the number of complete weeks.
   - `remaining_days = k % 7` gives the days left after the complete weeks.

3. **Growth and Reduction Calculation:**
   - For each week, Pinocchio's nose grows `5 * p` cm (for weekdays) and shrinks `2` cm (for weekends).
   - Multiply by the number of weeks to get the total change for complete weeks.

4. **Adjust for Remaining Days:**
   - Iterate through the remaining days, adjusting the nose length based on whether the day is a weekday or weekend.

5. **Output Result:**
   - Write the final nose length to `pinochio.out`.

This code efficiently computes the desired result by leveraging arithmetic operations to avoid unnecessary loops, ensuring fast execution.
