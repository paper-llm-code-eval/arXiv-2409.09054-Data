---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the problem and then provide an efficient solution in C++.

### Problem Breakdown

1. **Initial Parameters**:
    - `n`: Initial length of Pinocchio's nose.
    - `p`: Number of centimeters the nose grows on each weekday.
    - `k`: Total number of days to simulate.

2. **Weekly Pattern**:
    - From Monday to Friday (5 days), the nose grows by `p` centimeters each day.
    - On Saturday and Sunday (2 days), the nose shrinks by 1 centimeter each day.

3. **Simulation Strategy**:
    - For every 7 days:
        - The nose grows by `5 * p` centimeters and shrinks by `2 * 1` centimeters.
    - Compute the number of complete weeks and remaining days.
    - Apply the growth/shrinkage for complete weeks.
    - Handle the remaining days individually.

### Efficient Solution

Given the constraints, iterating through all days up to `k` (up to 256 days) is feasible, but we can also take an approach that utilizes modular arithmetic for efficiency.

Here is the C++ code implementation:

```cpp
#include <fstream>

int main() {
    std::ifstream inFile("pinochio.in");
    std::ofstream outFile("pinochio.out");

    int n, p, k;
    inFile >> n >> p >> k;

    int completeWeeks = k / 7;
    int remainingDays = k % 7;

    // Effect of complete weeks
    n += completeWeeks * (5 * p - 2);

    // Effect of remaining days
    for (int i = 0; i < remainingDays; ++i) {
        if (i < 5) {
            n += p;  // Weekday growth
        } else {
            n -= 1;  // Weekend shrinkage
        }
    }

    outFile << n << "\n";

    return 0;
}
```

### Explanation of the Code

1. **Reading Input**:
    - We use `ifstream` to read the input values `n`, `p`, and `k` from `pinochio.in`.

2. **Calculating Complete Weeks and Remaining Days**:
    - Calculate the number of complete weeks: `completeWeeks = k / 7`.
    - Calculate the number of remaining days after the complete weeks: `remainingDays = k % 7`.

3. **Effect of Complete Weeks**:
    - For each complete week, the net change in nose length is `5 * p - 2` (grows for 5 days, shrinks for 2 days).
    - Multiply this net change by the number of complete weeks and add to the initial length `n`.

4. **Effect of Remaining Days**:
    - Iterate over the remaining days:
      - If it's a weekday (`i < 5`), increase the nose length by `p`.
      - If it's a weekend day (`i >= 5`), decrease the nose length by 1.

5. **Writing Output**:
    - Use `ofstream` to write the final length of the nose to `pinochio.out`.

This approach ensures the solution is efficient and correct, handling even the maximum constraints gracefully.
