---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ code to solve the problem. The code reads the input from `pinochio.in`, processes it according to the problem's requirements, and writes the result to `pinochio.out`. The solution is designed to be efficient for the given constraints:

```cpp
#include <fstream>

int main() {
    std::ifstream fin("pinochio.in");
    std::ofstream fout("pinochio.out");

    int n, p, k;
    fin >> n >> p >> k;

    int full_weeks = k / 7;
    int remaining_days = k % 7;

    // Nasul crește cu 5 * p cm în fiecare săptămână lucratoare și scade cu 2 cm în weekend
    int nas_length = n + full_weeks * (5 * p - 2);

    // Calculăm creșterea pentru zilele rămase
    for (int i = 0; i < remaining_days; ++i) {
        if (i < 5) {
            nas_length += p; // Luni până vineri
        } else {
            nas_length -= 1; // Sâmbătă și duminică
        }
    }

    fout << nas_length;

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation of the Code:
1. **Input Reading**: We use `ifstream` to read the input values from `pinochio.in` and store them in the variables `n` (initial nose length), `p` (daily growth during weekdays), and `k` (total number of days).
2. **Week Calculation**:
   - We first calculate the number of full weeks by dividing `k` by 7 (`full_weeks`).
   - Then we determine the remaining days that do not complete a full week (`remaining_days`).
3. **Nose Length Calculation**:
   - For each full week, the nose grows by `5 * p` centimeters (Monday to Friday) and shrinks by `2` centimeters (Saturday and Sunday). The net change per full week is `5 * p - 2`.
   - We calculate the total growth and subtract the shrinkage for the full weeks.
4. **Remaining Days Calculation**:
   - We iterate through each of the remaining days and adjust the nose length accordingly: for the first 5 days of the week (Monday to Friday), the nose grows by `p` centimeters each day. For the sixth and seventh days (Saturday and Sunday), the nose shrinks by `1` centimeter per day.
5. **Output Writing**: We use `ofstream` to write the final nose length to `pinochio.out`.

This code ensures the correct and efficient computation of Pinocchio's nose length after `k` days given the daily growth and shrinkage patterns.
