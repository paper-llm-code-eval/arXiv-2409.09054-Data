---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

bool is_valoare_panta(const std::string &num) {
    bool increasing = true, decreasing = true;
    for (size_t i = 1; i < num.size(); ++i) {
        if (num[i] < num[i - 1]) increasing = false;
        if (num[i] > num[i - 1]) decreasing = false;
    }
    return increasing || decreasing;
}

int main() {
    std::ifstream infile("valori-panta.in");
    std::ofstream outfile("valori-panta.out");

    if (!infile.is_open() || !outfile.is_open()) {
        return 1;
    }

    int n;
    infile >> n;
    std::vector<std::pair<int, int>> values; // pair of value and its index

    for (int i = 0; i < n; ++i) {
        int val;
        infile >> val;
        if (is_valoare_panta(std::to_string(val))) {
            values.push_back({val, i + 1}); // storing 1-based index
        }
    }

    if (values.empty()) {
        outfile << "NU EXISTA\n";
    } else {
        int count = values.size();
        outfile << count << "\n";

        auto max_elem = std::max_element(values.begin(), values.end());
        outfile << max_elem->first;
        for (const auto &p : values) {
            if (p.first == max_elem->first) {
                outfile << " " << p.second;
            }
        }
        outfile << "\n";

        auto min_elem = std::min_element(values.begin(), values.end());
        outfile << min_elem->first;
        for (const auto &p : values) {
            if (p.first == min_elem->first) {
                outfile << " " << p.second;
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Input/Output Handling**: The program reads from `valori-panta.in` and writes to `valori-panta.out` using `ifstream` and `ofstream`.
2. **Reading Data**: It reads the number of elements `n` and then iteratively reads each element.
3. **Checking for Valoare-Panta**: The `is_valoare_panta` function checks if the number (converted to string) is in increasing or decreasing order.
4. **Storing Valid Elements**: Valid "valoare-panta" elements are stored in a vector along with their original indices.
5. **Output Results**:
    - If no valid elements are found, it outputs "NU EXISTA".
    - Otherwise, it outputs the count of valid elements, the maximum value and its positions, and the minimum value and its positions.

This approach ensures the solution is efficient and meets the problem requirements, handling up to 200,000 elements as specified.
