---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

bool isValoriPanta(int num) {
    std::string s = std::to_string(num);
    bool isIncreasing = true, isDecreasing = true;
    
    for(size_t i = 1; i < s.size(); ++i) {
        if (s[i] < s[i - 1]) isIncreasing = false;
        if (s[i] > s[i - 1]) isDecreasing = false;
    }

    return isIncreasing || isDecreasing;
}

int main() {
    std::ifstream infile("valori-panta.in");
    std::ofstream outfile("valori-panta.out");

    int N;
    infile >> N;

    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        infile >> values[i];
    }

    std::vector<int> valoriPanta;
    std::vector<int> positions;
    for (int i = 0; i < N; ++i) {
        if (isValoriPanta(values[i])) {
            valoriPanta.push_back(values[i]);
            positions.push_back(i + 1); // Store 1-based index
        }
    }

    if (valoriPanta.empty()) {
        outfile << "0\nNU EXISTA\nNU EXISTA\n";
    } else {
        auto minMax = std::minmax_element(valoriPanta.begin(), valoriPanta.end());

        outfile << valoriPanta.size() << "\n";

        outfile << *minMax.second;
        for (size_t i = 0; i < valoriPanta.size(); ++i) {
            if (valoriPanta[i] == *minMax.second) {
                outfile << " " << positions[i];
            }
        }
        outfile << "\n";

        outfile << *minMax.first;
        for (size_t i = 0; i < valoriPanta.size(); ++i) {
            if (valoriPanta[i] == *minMax.first) {
                outfile << " " << positions[i];
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation
1. The function `isValoriPanta` checks if a number is a "valori-panta" by converting it to a string and ensuring that the digits are either entirely non-decreasing or non-increasing.
2. The main function reads the input from the file `valori-panta.in`, processes each number to check if it is a "valori-panta", and collects such numbers along with their positions.
3. Depending on whether any "valori-panta" numbers are found, the output is written accordingly to `valori-panta.out`.

This solution ensures efficient reading and processing of input data, suitable for handling the upper constraint of 200,000 elements.
