---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <climits>
#include <algorithm>

// Function to check if a number is a valley-slope value
bool isValleySlope(int num) {
    std::string str = std::to_string(num);
    int len = str.length();
    bool nonDecreasing = true, nonIncreasing = true;

    // Check if digits are in non-decreasing order when viewed from left to right
    for (int i = 1; i < len; ++i) {
        if (str[i] < str[i - 1]) {
            nonDecreasing = false;
            break;
        }
    }

    // Check if digits are in non-increasing order when viewed from right to left
    for (int i = len - 2; i >= 0; --i) {
        if (str[i] < str[i + 1]) {
            nonIncreasing = false;
            break;
        }
    }

    return nonDecreasing || nonIncreasing;
}

int main() {
    std::ifstream inputFile("valori-panta.in");
    std::ofstream outputFile("valori-panta.out");

    int N;
    inputFile >> N;

    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        inputFile >> values[i];
    }

    std::vector<int> valleySlopeValues;
    std::vector<int> positions;

    for (int i = 0; i < N; ++i) {
        if (isValleySlope(values[i])) {
            valleySlopeValues.push_back(values[i]);
            positions.push_back(i + 1);
        }
    }

    int count = valleySlopeValues.size();
    if (count == 0) {
        outputFile << "NU EXISTA\n";
    } else {
        outputFile << count << "\n";

        auto maxElementIter = std::max_element(valleySlopeValues.begin(), valleySlopeValues.end());
        int maxElement = *maxElementIter;
        outputFile << maxElement;
        for (int i = 0; i < count; ++i) {
            if (valleySlopeValues[i] == maxElement) {
                outputFile << " " << positions[i];
            }
        }
        outputFile << "\n";

        auto minElementIter = std::min_element(valleySlopeValues.begin(), valleySlopeValues.end());
        int minElement = *minElementIter;
        outputFile << minElement;
        for (int i = 0; i < count; ++i) {
            if (valleySlopeValues[i] == minElement) {
                outputFile << " " << positions[i];
            }
        }
        outputFile << "\n";
    }

    inputFile.close();
    outputFile.close();

    return 0;
}
```
