---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <sstream>
#include <string>
#include <algorithm>
#include <limits>

// Function to check if a number is a slope value
bool isSlopeValue(int num) {
    std::string str = std::to_string(num);
    bool increasing = true, decreasing = true;

    for (size_t i = 1; i < str.size(); ++i) {
        if (str[i] < str[i - 1]) increasing = false;
        if (str[i] > str[i - 1]) decreasing = false;
    }

    return increasing || decreasing;
}

int main() {
    std::ifstream inFile("valori-panta.in");
    std::ofstream outFile("valori-panta.out");

    int N;
    inFile >> N;

    std::vector<int> values(N);

    for (int i = 0; i < N; ++i) {
        inFile >> values[i];
    }

    std::vector<int> slopeValues;
    std::vector<int> slopePositions;

    for (int i = 0; i < N; ++i) {
        if (isSlopeValue(values[i])) {
            slopeValues.push_back(values[i]);
            slopePositions.push_back(i + 1); // positions are 1-based
        }
    }

    if (slopeValues.empty()) {
        outFile << "0\nNU EXISTA\nNU EXISTA\n";
        return 0;
    }

    int maxSlopeValue = *std::max_element(slopeValues.begin(), slopeValues.end());
    int minSlopeValue = *std::min_element(slopeValues.begin(), slopeValues.end());

    outFile << slopeValues.size() << "\n";
    outFile << maxSlopeValue;
    for (size_t i = 0; i < slopeValues.size(); ++i) {
        if (slopeValues[i] == maxSlopeValue) {
            outFile << " " << slopePositions[i];
        }
    }
    outFile << "\n";

    outFile << minSlopeValue;
    for (size_t i = 0; i < slopeValues.size(); ++i) {
        if (slopeValues[i] == minSlopeValue) {
            outFile << " " << slopePositions[i];
        }
    }
    outFile << "\n";

    return 0;
}
```

### Explanation of the Solution:

1. **Reading Input:**
   - We use `std::ifstream` to read from `valori-panta.in`.
   - First, we read the number of elements, `N`.
   - Then, we read the vector of `N` values.

2. **Identifying Slope Values:**
   - We define a function `isSlopeValue` to check if a number is a slope value (either strictly increasing or decreasing).
   - We iterate over the vector, checking each number with `isSlopeValue`.

3. **Finding Max and Min Slope Values:**
   - We store all slope values and their positions in separate vectors.
   - If no slope values are found, we output `0` and respective messages.
   - Otherwise, we find the maximum and minimum slope values.

4. **Output:**
   - We use `std::ofstream` to write to `valori-panta.out`.
   - We format the output as described in the problem statement, including the positions of max and min slope values.

### Example Execution:
For the given example:
```
6
126 9621 1212 3678 9231 9621
```
The output will be correctly formatted as:
```
4
9621 2 6
126 1
```
