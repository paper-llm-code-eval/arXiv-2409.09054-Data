---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

bool isIncreasing(std::string s) {
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] <= s[i - 1]) return false;
    }
    return true;
}

bool isDecreasing(std::string s) {
    for (size_t i = 1; i < s.length(); ++i) {
        if (s[i] >= s[i - 1]) return false;
    }
    return true;
}

int main() {
    std::ifstream infile("valori-panta.in");
    std::ofstream outfile("valori-panta.out");

    int N;
    infile >> N;

    std::vector<int> values(N);
    for (int i = 0; i < N; ++i) {
        infile >> values[i];
    }

    std::vector<int> pantaValues;
    for (int i = 0; i < N; ++i) {
        std::string value_str = std::to_string(values[i]);
        if (isIncreasing(value_str) || isDecreasing(value_str)) {
            pantaValues.push_back(values[i]);
        }
    }

    if (pantaValues.empty()) {
        outfile << "NU EXISTA\n";
    } else {
        outfile << pantaValues.size() << "\n";

        auto max_panta = *std::max_element(pantaValues.begin(), pantaValues.end());
        auto min_panta = *std::min_element(pantaValues.begin(), pantaValues.end());

        outfile << max_panta;
        for (int i = 0; i < N; ++i) {
            if (values[i] == max_panta) {
                outfile << " " << (i + 1);
            }
        }
        outfile << "\n";

        outfile << min_panta;
        for (int i = 0; i < N; ++i) {
            if (values[i] == min_panta) {
                outfile << " " << (i + 1);
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `valori-panta.in` using `ifstream`.
2. **Helper Functions**: Two helper functions `isIncreasing` and `isDecreasing` are defined to check if a number's digits are in strictly increasing or decreasing order.
3. **Processing Data**: The code iterates through the input values, converting each to a string to check if it is a `valori-panta` using the helper functions.
4. **Finding the Result**: If no `valori-panta` are found, the program writes "NU EXISTA". If they are found, the program writes the total count, the maximum, and minimum `valori-panta` along with their positions.
5. **Writing Output**: The output is written to `valori-panta.out` using `ofstream`.

This solution ensures efficient reading, processing, and writing while adhering to the constraints and requirements given in the problem statement.
