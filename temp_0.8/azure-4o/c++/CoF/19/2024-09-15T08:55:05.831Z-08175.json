{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 4,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/19/2024-09-15T08:55:05.831Z-08175.log",
  "attemptStart": 1726390505.831,
  "attemptEnd": 1726390567.783,
  "attemptDuration": 61.95199990272522,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nbool isPowerOfTwo(int x) {\n    return (x & (x - 1)) == 0;\n}\n\nint maxSubarraySum(const std::vector<int>& arr) {\n    int maxSum = INT_MIN, currentSum = 0;\n    for (int num : arr) {\n        currentSum = std::max(num, currentSum + num);\n        maxSum = std::max(maxSum, currentSum);\n    }\n    return maxSum;\n}\n\nint getMaxCost(std::vector<int>& A, std::vector<int> powersOf2, int index) {\n    if (index == powersOf2.size()) {\n        return maxSubarraySum(A);\n    }\n\n    int maxCost = maxSubarraySum(A);\n    int len = powersOf2[index];\n\n    for (int i = 0; i + len <= A.size(); ++i) {\n        std::vector<int> newA = A;\n        newA.erase(newA.begin() + i, newA.begin() + i + len);\n        maxCost = std::max(maxCost, getMaxCost(newA, powersOf2, index + 1));\n    }\n\n    return maxCost;\n}\n\nint main() {\n    std::ifstream infile(\"recyclebin.in\");\n    std::ofstream outfile(\"recyclebin.out\");\n\n    int N;\n    infile >> N;\n    std::vector<int> A(N);\n\n    for (int i = 0; i < N; ++i) {\n        infile >> A[i];\n    }\n\n    // All possible powers of 2 up to N\n    std::vector<int> powersOf2;\n    for (int length = 1; length <= N; length *= 2) {\n        powersOf2.push_back(length);\n    }\n\n    int maxCost = getMaxCost(A, powersOf2, 0);\n\n    outfile << maxCost << \"\\n\";\n\n    infile.close();\n    outfile.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5442,
  "metadata": {
    "id": 19,
    "examples": [
      {
        "in": "14\n13 -19 13 -5 -12 11 20 4 -10 1 -7 19 -19 3",
        "out": "76",
        "explainer": ""
      }
    ],
    "body": "Se dă un șir de `N` numere întregi notat cu `A`. O *subsecvență* a șirului `A` este un șir $A_i A_{i+1} A_{i+2} … A_j$ cu `1 ≤ i ≤ j ≤ N`, iar lungimea acestei subsecvențe este egală cu `j – i + 1`. O *operație* constă în alegerea unei subsecvențe din șir și ștergerea acesteia. În cadrul unei operații, **lungimea subsecvenței alese trebuie să fie o putere de`2`**. În cadrul tuturor operațiilor efectuate pe șir, **lungimile subsecvențelor șterse trebuie să fie distincte**.\n\nPentru fiecare subsecvență din șir considerăm suma elementelor ei. Definim *costul* unui șir ca fiind maximul acestor sume, în cazul în care șirul conține cel puțin un număr pozitiv, altfel costul șirului este egal cu `0`.\n\nPutem aplica o succesiune de operații (eventual niciuna) pe șirul `A`. În urma acestor operații se vor șterge anumite elemente din șir, obținându-se astfel o mulțime de șiruri $M=\\{A, A’_1, A’_2, A’_3, ...\\}$.\n\n# Cerinţă\nSă se determine costul maxim posibil ce se poate obține dintr-un șir al mulțimii M.\n\n# Date de intrare\nPrima linie a fișierului de intrare `recyclebin.in` conține un număr întreg `N`.\nA doua linie conține `N` numere întregi, separate prin câte un spațiu, reprezentând valorile șirului `A`.\n\n# Date de ieşire\nAfișați valoarea costului maxim pe prima linie a fișierului de ieșire `recyclebin.out`.\n\n# Restricţii și precizări\n* `1 ≤ N ≤ 1000`\n* $-10^6 ≤ A_i ≤ 10^6$ pentru `1 ≤ i ≤ N`\n* Pentru teste în valoare de `10` puncte `1 ≤ N ≤ 30`\n* Pentru alte teste în valoare de `15` puncte se garantează că există o soluție cu cel mult o operație efectuată\n* Pentru alte teste în valoare de `20` puncte se garantează că există o soluție cu cel mult două operații efectuate\n* Se acordă `10` puncte din oficiu.",
    "header": {
      "problem_id": 19,
      "problem_name": "RecycleBin",
      "tags": "[DP, Mask DP]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "recyclebin.in",
      "output_filename": "recyclebin.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 XI-XII: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "recyclebin.in",
      "output": "recyclebin.out"
    },
    "consoleInteraction": false
  }
}