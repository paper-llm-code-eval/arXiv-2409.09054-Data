{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/19/2024-09-15T08:55:05.945Z-00694.log",
  "attemptStart": 1726390505.945,
  "attemptEnd": 1726390543.242,
  "attemptDuration": 37.29700016975403,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <set>\n\nusing namespace std;\n\nint maxSubarraySum(const vector<int>& arr) {\n    int max_so_far = INT_MIN, max_ending_here = 0;\n    for (int x : arr) {\n        max_ending_here = max_ending_here + x;\n        max_so_far = max(max_so_far, max_ending_here);\n        if (max_ending_here < 0)\n            max_ending_here = 0;\n    }\n    return max(max_so_far, 0);\n}\n\nvoid findMaxCost(const vector<int>& A, int idx, set<int>& usedLengths, int& maxCost) {\n    int currentCost = maxSubarraySum(A);\n    maxCost = max(maxCost, currentCost);\n\n    for (int length = 1; length <= A.size(); length <<= 1) {\n        if (usedLengths.count(length)) continue;\n\n        for (int start = 0; start + length <= A.size(); ++start) {\n            vector<int> newA;\n            newA.reserve(A.size() - length);\n            newA.insert(newA.end(), A.begin(), A.begin() + start);\n            newA.insert(newA.end(), A.begin() + start + length, A.end());\n\n            usedLengths.insert(length);\n            findMaxCost(newA, idx + 1, usedLengths, maxCost);\n            usedLengths.erase(length);\n        }\n    }\n}\n\nint main() {\n    ifstream input(\"recyclebin.in\");\n    ofstream output(\"recyclebin.out\");\n\n    int N;\n    input >> N;\n    vector<int> A(N);\n    for (int i = 0; i < N; ++i) {\n        input >> A[i];\n    }\n\n    int maxCost = maxSubarraySum(A);\n    set<int> usedLengths;\n    findMaxCost(A, 0, usedLengths, maxCost);\n\n    output << maxCost << endl;\n\n    input.close();\n    output.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3630,
  "metadata": {
    "id": 19,
    "examples": [
      {
        "in": "14\n13 -19 13 -5 -12 11 20 4 -10 1 -7 19 -19 3",
        "out": "76",
        "explainer": ""
      }
    ],
    "body": "Se dă un șir de `N` numere întregi notat cu `A`. O *subsecvență* a șirului `A` este un șir $A_i A_{i+1} A_{i+2} … A_j$ cu `1 ≤ i ≤ j ≤ N`, iar lungimea acestei subsecvențe este egală cu `j – i + 1`. O *operație* constă în alegerea unei subsecvențe din șir și ștergerea acesteia. În cadrul unei operații, **lungimea subsecvenței alese trebuie să fie o putere de`2`**. În cadrul tuturor operațiilor efectuate pe șir, **lungimile subsecvențelor șterse trebuie să fie distincte**.\n\nPentru fiecare subsecvență din șir considerăm suma elementelor ei. Definim *costul* unui șir ca fiind maximul acestor sume, în cazul în care șirul conține cel puțin un număr pozitiv, altfel costul șirului este egal cu `0`.\n\nPutem aplica o succesiune de operații (eventual niciuna) pe șirul `A`. În urma acestor operații se vor șterge anumite elemente din șir, obținându-se astfel o mulțime de șiruri $M=\\{A, A’_1, A’_2, A’_3, ...\\}$.\n\n# Cerinţă\nSă se determine costul maxim posibil ce se poate obține dintr-un șir al mulțimii M.\n\n# Date de intrare\nPrima linie a fișierului de intrare `recyclebin.in` conține un număr întreg `N`.\nA doua linie conține `N` numere întregi, separate prin câte un spațiu, reprezentând valorile șirului `A`.\n\n# Date de ieşire\nAfișați valoarea costului maxim pe prima linie a fișierului de ieșire `recyclebin.out`.\n\n# Restricţii și precizări\n* `1 ≤ N ≤ 1000`\n* $-10^6 ≤ A_i ≤ 10^6$ pentru `1 ≤ i ≤ N`\n* Pentru teste în valoare de `10` puncte `1 ≤ N ≤ 30`\n* Pentru alte teste în valoare de `15` puncte se garantează că există o soluție cu cel mult o operație efectuată\n* Pentru alte teste în valoare de `20` puncte se garantează că există o soluție cu cel mult două operații efectuate\n* Se acordă `10` puncte din oficiu.",
    "header": {
      "problem_id": 19,
      "problem_name": "RecycleBin",
      "tags": "[DP, Mask DP]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "recyclebin.in",
      "output_filename": "recyclebin.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 XI-XII: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "recyclebin.in",
      "output": "recyclebin.out"
    },
    "consoleInteraction": false
  }
}