---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a comprehensive C++ solution for the described challenge. This solution reads the input from `grupe.in`, processes the data to find the number of divisors for each element, groups the elements based on their divisor count, sorts these groups, and then writes the required output to `grupe.out`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

// Function to calculate the number of divisors of a given number
int countDivisors(int num) {
    int count = 0;
    for (int i = 1; i * i <= num; i++) {
        if (num % i == 0) {
            count++;
            if (i != num / i) count++;
        }
    }
    return count;
}

int main() {
    ifstream infile("grupe.in");
    ofstream outfile("grupe.out");
    
    int m, n;
    infile >> m >> n;

    vector<vector<int>> matrix(m, vector<int>(n));
    unordered_map<int, vector<int>> groups;

    // Reading the matrix and forming groups based on number of divisors
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            infile >> matrix[i][j];
            int divCount = countDivisors(matrix[i][j]);
            groups[divCount].push_back(matrix[i][j]);
        }
    }

    // Convert the unordered_map into a vector of pairs
    vector<pair<int, vector<int>>> sortedGroups(groups.begin(), groups.end());

    // Custom sorting function
    auto cmp = [](const pair<int, vector<int>>& a, const pair<int, vector<int>>& b) {
        if (a.second.size() != b.second.size())
            return a.second.size() > b.second.size();
        return a.first > b.first;
    };

    // Sort the groups based on the number of elements and divisors
    sort(sortedGroups.begin(), sortedGroups.end(), cmp);

    // Helper function to find the largest value in a group
    auto maxInGroup = [](const vector<int>& group) {
        return *max_element(group.begin(), group.end());
    };

    // Output results for group A
    int divA = sortedGroups[0].first;
    int sizeA = sortedGroups[0].second.size();
    int maxA = maxInGroup(sortedGroups[0].second);
    outfile << divA << " " << sizeA << " " << maxA << endl;

    // Output results for group B, if it exists
    if (sortedGroups.size() > 1) {
        int divB = sortedGroups[1].first;
        int sizeB = sortedGroups[1].second.size();
        int maxB = maxInGroup(sortedGroups[1].second);
        outfile << divB << " " << sizeB << " " << maxB << endl;
    } else {
        outfile << "0 0 0" << endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Read Input**: The program reads the dimensions `m` and `n` and the matrix elements from `grupe.in`.

2. **Calculate Divisors**: For each element in the matrix, the number of divisors is calculated using the `countDivisors` function. This function iterates up to the square root of the number to efficiently count the divisors.

3. **Group Elements**: The elements are grouped based on their divisor counts using an unordered map, where the key is the divisor count and the value is a vector of elements with that divisor count.

4. **Sort Groups**: The groups are then transferred to a vector and sorted based on the custom comparison function. The primary sorting criterion is the number of elements in descending order. If two groups have the same number of elements, the group with the higher divisor count appears first.

5. **Write Output**: The results are written to `grupe.out`. If there's only one group, the second group's details are output as `0 0 0`.

This solution ensures efficient processing and sorting, adhering to the constraints and requirements of the challenge.
