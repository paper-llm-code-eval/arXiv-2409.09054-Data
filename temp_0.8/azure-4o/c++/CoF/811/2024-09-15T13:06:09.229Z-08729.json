{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/811/2024-09-15T13:06:09.229Z-08729.log",
  "attemptStart": 1726405569.229,
  "attemptEnd": 1726405587.079,
  "attemptDuration": 17.84999990463257,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate number of divisors of a number\nint countDivisors(int num) {\n    int count = 0;\n    for (int i = 1; i * i <= num; ++i) {\n        if (num % i == 0) {\n            if (i * i == num) count++;\n            else count += 2;\n        }\n    }\n    return count;\n}\n\nint main() {\n    ifstream inFile(\"grupe.in\");\n    ofstream outFile(\"grupe.out\");\n    \n    int m, n;\n    inFile >> m >> n;\n    \n    vector<vector<int>> matrix(m, vector<int>(n));\n    map<int, vector<int>> divisorGroups;\n    \n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            inFile >> matrix[i][j];\n            int divCount = countDivisors(matrix[i][j]);\n            divisorGroups[divCount].push_back(matrix[i][j]);\n        }\n    }\n    \n    vector<pair<int, vector<int>>> groups;\n    \n    for (auto &group : divisorGroups) {\n        groups.push_back(group);\n    }\n\n    sort(groups.begin(), groups.end(), [](const pair<int, vector<int>>& a, const pair<int, vector<int>>& b) {\n        int sizeA = a.second.size();\n        int sizeB = b.second.size();\n        if (sizeA != sizeB) {\n            return sizeA > sizeB;\n        }\n        return a.first > b.first;\n    });\n    \n    if (groups.size() > 0) {\n        int divCountA = groups[0].first;\n        int countA = groups[0].second.size();\n        int maxA = *max_element(groups[0].second.begin(), groups[0].second.end());\n        outFile << divCountA << \" \" << countA << \" \" << maxA << \"\\n\";\n    }\n    \n    if (groups.size() > 1) {\n        int divCountB = groups[1].first;\n        int countB = groups[1].second.size();\n        int maxB = *max_element(groups[1].second.begin(), groups[1].second.end());\n        outFile << divCountB << \" \" << countB << \" \" << maxB << \"\\n\";\n    } else {\n        outFile << \"0 0 0\\n\";\n    }\n    \n    inFile.close();\n    outFile.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1832,
  "metadata": {
    "id": 811,
    "examples": [
      {
        "in": "2 3\n16 2 4\n10 6 5",
        "out": "4 2 10\n2 2 5",
        "explainer": ""
      },
      {
        "in": "2 3\n2 15 4\n10 6 5",
        "out": "4 3 15\n2 2 5",
        "explainer": ""
      }
    ],
    "body": "Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \\dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.\n\n# Cerință\n\nScrieți un program care citește $m$, $n$, elementele tabloului și afișează:\n* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;\n* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$\n\n# Date de intrare\n\nFișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.\n\n# Date de ieșire\n\nFișierul `grupe.out` va conține:\n- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;\n- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.\n\n# Restricții și precizări\n\n* $1 \\leq m, n \\leq 100$\n* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \\ 000$ și mai mari decât $1$;\n* grupă poate fi compusă dintr-un singur element\n* se acordă $50\\%$ din punctaj pentru afișarea corectă a fiecărei linii",
    "header": {
      "problem_id": 811,
      "problem_name": "grupe",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "grupe.in",
      "output_filename": "grupe.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "grupe.in",
      "output": "grupe.out"
    },
    "consoleInteraction": false
  }
}