---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's an efficient C++ solution for the given problem. The solution reads from `grupe.in` and writes to `grupe.out`.

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

// Function to calculate the number of divisors of a number
int countDivisors(int number) {
    int count = 0;
    for (int i = 1; i * i <= number; ++i) {
        if (number % i == 0) {
            count += (i * i == number) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    std::ifstream fin("grupe.in");
    std::ofstream fout("grupe.out");

    int m, n;
    fin >> m >> n;

    std::vector<std::vector<int>> matrix(m, std::vector<int>(n));
    std::unordered_map<int, std::vector<int>> divisorGroups;

    // Reading the matrix and forming the divisor groups
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            fin >> matrix[i][j];
            int divisors = countDivisors(matrix[i][j]);
            divisorGroups[divisors].push_back(matrix[i][j]);
        }
    }

    // Creating a vector of pairs (number_of_elements, divisors, max_value)
    std::vector<std::tuple<int, int, int>> groups;
    for (const auto& group : divisorGroups) {
        int divisors = group.first;
        const std::vector<int>& elements = group.second;
        int size = elements.size();
        int max_value = *std::max_element(elements.begin(), elements.end());
        groups.emplace_back(size, divisors, max_value);
    }

    // Sorting the groups by number of elements descending, then by divisors descending
    std::sort(groups.begin(), groups.end(), std::greater<>());

    // Outputting results
    if (!groups.empty()) {
        fout << std::get<1>(groups[0]) << " " << std::get<0>(groups[0]) << " " << std::get<2>(groups[0]) << "\n";
    } else {
        fout << "0 0 0\n";
    }

    if (groups.size() > 1) {
        fout << std::get<1>(groups[1]) << " " << std::get<0>(groups[1]) << " " << std::get<2>(groups[1]) << "\n";
    } else {
        fout << "0 0 0\n";
    }

    return 0;
}
```

### Explanation:

1. **Reading Input**: The code reads the input values from `grupe.in` into a 2D matrix.

2. **Counting Divisors**: For each element in the matrix, it calculates the number of divisors using the `countDivisors` function.

3. **Grouping Elements**: The elements are grouped based on their number of divisors using an `unordered_map`.

4. **Sorting Groups**: The groups are sorted first by the number of elements in descending order, then by the number of divisors in descending order.

5. **Outputting Results**: The results for the first and, if available, the second group are written to `grupe.out`.

This code ensures efficient computation and sorting, adhering to the constraints provided.
