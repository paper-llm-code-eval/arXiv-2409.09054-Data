---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a possible approach to solve the challenge:

1. **Read Input**: We'll read the input dimensions `m` and `n` and then the matrix itself.
2. **Calculate Divisor Count**: For each element in the matrix, we'll calculate the number of positive divisors.
3. **Group Elements by Divisor Count**: We'll use a map to group elements based on their divisor count.
4. **Sort Groups**: We'll sort the groups based on the number of elements in each group (descending order). If two groups have the same number of elements, the group with the higher divisor count comes first.
5. **Extract Required Information**: Get the number of divisors, count of elements, and the maximum element for the top two groups (if available).
6. **Write Output**: Output the results to `grupe.out`.

Here's the C++ code implementing the above steps:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

// Function to calculate number of divisors of a number
int countDivisors(int num) {
    int count = 0;
    for (int i = 1; i * i <= num; ++i) {
        if (num % i == 0) {
            if (i * i == num) count++;
            else count += 2;
        }
    }
    return count;
}

int main() {
    ifstream inFile("grupe.in");
    ofstream outFile("grupe.out");
    
    int m, n;
    inFile >> m >> n;
    
    vector<vector<int>> matrix(m, vector<int>(n));
    map<int, vector<int>> divisorGroups;
    
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            inFile >> matrix[i][j];
            int divCount = countDivisors(matrix[i][j]);
            divisorGroups[divCount].push_back(matrix[i][j]);
        }
    }
    
    vector<pair<int, vector<int>>> groups;
    
    for (auto &group : divisorGroups) {
        groups.push_back(group);
    }

    sort(groups.begin(), groups.end(), [](const pair<int, vector<int>>& a, const pair<int, vector<int>>& b) {
        int sizeA = a.second.size();
        int sizeB = b.second.size();
        if (sizeA != sizeB) {
            return sizeA > sizeB;
        }
        return a.first > b.first;
    });
    
    if (groups.size() > 0) {
        int divCountA = groups[0].first;
        int countA = groups[0].second.size();
        int maxA = *max_element(groups[0].second.begin(), groups[0].second.end());
        outFile << divCountA << " " << countA << " " << maxA << "\n";
    }
    
    if (groups.size() > 1) {
        int divCountB = groups[1].first;
        int countB = groups[1].second.size();
        int maxB = *max_element(groups[1].second.begin(), groups[1].second.end());
        outFile << divCountB << " " << countB << " " << maxB << "\n";
    } else {
        outFile << "0 0 0\n";
    }
    
    inFile.close();
    outFile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: We read values of `m` and `n`, then the matrix elements.
2. **Calculating Divisors**: For each element in the matrix, we calculate the number of divisors using the `countDivisors` function.
3. **Grouping Elements**: We use a map `divisorGroups` where key is the number of divisors and value is a vector of elements having that number of divisors.
4. **Sorting Groups**: We then sort these groups primarily by the size of the vector (number of elements) in descending order. If sizes are equal, we sort by the divisor count in descending order.
5. **Extracting Information**: After sorting, we extract the required information for the top two groups.
6. **Writing Output**: Finally, we write the output as specified.

This approach should be efficient given the constraints, as it leverages efficient algorithms and data structures available in C++.
