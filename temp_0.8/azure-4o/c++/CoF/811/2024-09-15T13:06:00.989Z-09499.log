---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution in C++ that meets the requirements of the challenge:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <cmath>

// Function to calculate number of divisors
int countDivisors(int num) {
    int count = 0;
    int sqrt_num = static_cast<int>(std::sqrt(num));
    for (int i = 1; i <= sqrt_num; ++i) {
        if (num % i == 0) {
            count += (i == num / i) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    std::ifstream infile("grupe.in");
    std::ofstream outfile("grupe.out");

    int m, n;
    infile >> m >> n;
    
    std::vector<std::vector<int>> matrix(m, std::vector<int>(n));
    std::unordered_map<int, std::vector<int>> divisorGroups;

    // Read the matrix and group the elements by their number of divisors
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> matrix[i][j];
            int divisors = countDivisors(matrix[i][j]);
            divisorGroups[divisors].push_back(matrix[i][j]);
        }
    }

    // Create a vector of pairs to sort groups by size and then by the number of divisors
    std::vector<std::pair<int, std::vector<int>>> sortedGroups;
    for (auto& group : divisorGroups) {
        sortedGroups.emplace_back(group.first, group.second);
    }

    std::sort(sortedGroups.begin(), sortedGroups.end(), [](const auto& a, const auto& b) {
        if (a.second.size() == b.second.size()) {
            return a.first > b.first;
        }
        return a.second.size() > b.second.size();
    });

    // Function to find the maximum element in a vector
    auto findMax = [](const std::vector<int>& vec) {
        return *std::max_element(vec.begin(), vec.end());
    };

    // Output the results for group A
    int numDivisorsA = sortedGroups[0].first;
    int sizeA = sortedGroups[0].second.size();
    int maxA = findMax(sortedGroups[0].second);
    outfile << numDivisorsA << " " << sizeA << " " << maxA << "\n";

    // Output the results for group B or 0s if there is no group B
    if (sortedGroups.size() > 1) {
        int numDivisorsB = sortedGroups[1].first;
        int sizeB = sortedGroups[1].second.size();
        int maxB = findMax(sortedGroups[1].second);
        outfile << numDivisorsB << " " << sizeB << " " << maxB << "\n";
    } else {
        outfile << "0 0 0\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:

1. **Function to Count Divisors**: `countDivisors` is a helper function to calculate the number of divisors of a given number. It iterates only up to the square root of the number to optimize performance.

2. **Reading Input**: The input is read from the file `grupe.in` into a matrix `matrix`. The number of rows (`m`) and columns (`n`) are read first.

3. **Grouping Elements by Divisors**: As the matrix is read, each element's number of divisors is calculated, and the elements are grouped by this number using an unordered map `divisorGroups`, where the key is the number of divisors and the value is a vector of elements having that number of divisors.

4. **Sorting Groups**: The groups are then sorted by the size of each group (number of elements) in descending order. If two groups have the same size, they are further sorted by the number of divisors in descending order.

5. **Finding Maximum Element in a Group**: A lambda function `findMax` is used to find the maximum value within each group.

6. **Output**: The results for the top two groups (group A and group B) are written to the output file `grupe.out`. If there is no second group, zeros are printed as required.

This solution ensures efficient reading, processing, and output of the required information from the input file to the output file.
