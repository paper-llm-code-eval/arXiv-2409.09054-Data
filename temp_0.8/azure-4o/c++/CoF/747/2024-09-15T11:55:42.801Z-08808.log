---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fetiţele din grupa mare de la grădiniţă culeg flori şi vor să împletească coroniţe pentru festivitatea de premiere. În grădină sunt mai multe tipuri de flori. Fiecare dintre cele $n$ fetiţe culege un buchet având acelaşi număr de flori, însă nu neapărat de acelaşi tip. Pentru a împleti coroniţele fetiţele se împart în grupe. O fetiţă se poate ataşa unui grup numai dacă are cel puţin o floare de acelaşi tip cu cel puţin o altă fetiţă din grupul respectiv.

# Cerinţă
Fiind dat un număr natural $n$ reprezentând numărul fetiţelor şi numărul natural $k$ reprezentând numărul de flori dintr-un buchet, să se determine grupele care se formează.

# Date de intrare
Fişierul de intrare `flori.in` conţine pe prima linie, separate printr-un spaţiu, numerele naturale $n$ şi $k$, reprezentând numărul de fetiţe şi respectiv numărul de flori din fiecare buchet. Fiecare dintre următoarele $n$ linii conţine, pentru fiecare fetiţă, câte $k$ valori separate prin câte un spaţiu reprezentând tipurile de flori culese.

# Date de ieşire
Fişierul de ieşire `flori.out` va conţine pe fiecare linie câte o grupă formată din numerele de ordine ale fetiţelor separate prin câte un spaţiu, în ordine crescătoare, ca în exemplu.

# Restricţii şi precizări
- $1 \leq n \leq 150$
- $1 \leq k \leq 100$
- Tipul unei flori este un număr întreg din intervalul $[0, 100]$.
- Într-o grupă numerele de ordine ale fetiţelor trebuie date în ordine strict crescătoare.
- În fişierul de ieşire grupele vor fi afişate în ordinea crescătoare a numărului de ordine al primei fetiţe din grupă.

---

Example:
`flori.in`
```
5 4
1 2 3 4
5 6 9 6
1 1 1 1
2 4 4 3
7 7 7 7
```

`flori.out`
```
1 3 4
2
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <set>
#include <map>
#include <algorithm>

int main() {
    std::ifstream fin("flori.in");
    std::ofstream fout("flori.out");

    int n, k;
    fin >> n >> k;

    // Read the bouquet data for each girl
    std::vector<std::set<int>> bouquets(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            int flower;
            fin >> flower;
            bouquets[i].insert(flower);
        }
    }

    // To keep track of visited girls
    std::vector<bool> visited(n, false);
    
    // Resulting groups
    std::vector<std::vector<int>> groups;

    // Group creation
    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            std::vector<int> group;
            std::set<int> group_flowers = bouquets[i];
            group.push_back(i + 1);
            visited[i] = true;

            bool added;
            do {
                added = false;
                for (int j = 0; j < n; ++j) {
                    if (!visited[j]) {
                        // Check if this girl's bouquet intersects with the group's flowers
                        std::set<int> intersection;
                        std::set_intersection(group_flowers.begin(), group_flowers.end(),
                                              bouquets[j].begin(), bouquets[j].end(),
                                              std::inserter(intersection, intersection.begin()));

                        if (!intersection.empty()) {
                            group.push_back(j + 1);
                            group_flowers.insert(bouquets[j].begin(), bouquets[j].end());
                            visited[j] = true;
                            added = true;
                        }
                    }
                }
            } while (added);

            // Sort the group before saving
            std::sort(group.begin(), group.end());
            groups.push_back(group);
        }
    }

    // Sort groups by the first girl in each group
    std::sort(groups.begin(), groups.end());

    // Output the groups
    for (const auto& group : groups) {
        for (size_t i = 0; i < group.size(); ++i) {
            if (i > 0) fout << " ";
            fout << group[i];
        }
        fout << "\n";
    }

    return 0;
}
```

### Explanation:
1. **Input Reading**: The code reads the number of girls (`n`) and the number of flowers in each bouquet (`k`). Then, it reads the bouquets of each girl, storing them in a vector of sets for efficient lookup.

2. **Initialization**: A vector `visited` is used to keep track of which girls have already been assigned to a group.

3. **Group Creation**: The code iterates over each girl. If a girl hasn't been visited, it starts a new group with her. It then checks for intersections between the current group's flowers and the bouquets of other unvisited girls. If an intersection is found, the girl is added to the group.

4. **Group Sorting**: Each group is sorted by the girls' indices, and then all groups are sorted by the index of their first member.

5. **Output**: Finally, the groups are written to the output file `flori.out`.

This solution ensures efficient group formation and maintains the required order of groups and members.
