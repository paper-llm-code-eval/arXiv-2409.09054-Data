---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fetiţele din grupa mare de la grădiniţă culeg flori şi vor să împletească coroniţe pentru festivitatea de premiere. În grădină sunt mai multe tipuri de flori. Fiecare dintre cele $n$ fetiţe culege un buchet având acelaşi număr de flori, însă nu neapărat de acelaşi tip. Pentru a împleti coroniţele fetiţele se împart în grupe. O fetiţă se poate ataşa unui grup numai dacă are cel puţin o floare de acelaşi tip cu cel puţin o altă fetiţă din grupul respectiv.

# Cerinţă
Fiind dat un număr natural $n$ reprezentând numărul fetiţelor şi numărul natural $k$ reprezentând numărul de flori dintr-un buchet, să se determine grupele care se formează.

# Date de intrare
Fişierul de intrare `flori.in` conţine pe prima linie, separate printr-un spaţiu, numerele naturale $n$ şi $k$, reprezentând numărul de fetiţe şi respectiv numărul de flori din fiecare buchet. Fiecare dintre următoarele $n$ linii conţine, pentru fiecare fetiţă, câte $k$ valori separate prin câte un spaţiu reprezentând tipurile de flori culese.

# Date de ieşire
Fişierul de ieşire `flori.out` va conţine pe fiecare linie câte o grupă formată din numerele de ordine ale fetiţelor separate prin câte un spaţiu, în ordine crescătoare, ca în exemplu.

# Restricţii şi precizări
- $1 \leq n \leq 150$
- $1 \leq k \leq 100$
- Tipul unei flori este un număr întreg din intervalul $[0, 100]$.
- Într-o grupă numerele de ordine ale fetiţelor trebuie date în ordine strict crescătoare.
- În fişierul de ieşire grupele vor fi afişate în ordinea crescătoare a numărului de ordine al primei fetiţe din grupă.

---

Example:
`flori.in`
```
5 4
1 2 3 4
5 6 9 6
1 1 1 1
2 4 4 3
7 7 7 7
```

`flori.out`
```
1 3 4
2
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <set>
#include <queue>
#include <algorithm>

using namespace std;

void solve() {
    ifstream fin("flori.in");
    ofstream fout("flori.out");

    int n, k;
    fin >> n >> k;

    vector<set<int>> flowers(n);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < k; ++j) {
            int flower_type;
            fin >> flower_type;
            flowers[i].insert(flower_type);
        }
    }

    vector<bool> visited(n, false);
    vector<vector<int>> groups;

    for (int i = 0; i < n; ++i) {
        if (!visited[i]) {
            vector<int> group;
            queue<int> q;
            q.push(i);
            visited[i] = true;

            while (!q.empty()) {
                int current = q.front();
                q.pop();
                group.push_back(current + 1);

                for (int j = 0; j < n; ++j) {
                    if (!visited[j]) {
                        bool has_common_flower = false;
                        for (int flower : flowers[current]) {
                            if (flowers[j].count(flower)) {
                                has_common_flower = true;
                                break;
                            }
                        }
                        if (has_common_flower) {
                            q.push(j);
                            visited[j] = true;
                        }
                    }
                }
            }

            sort(group.begin(), group.end());
            groups.push_back(group);
        }
    }

    sort(groups.begin(), groups.end());

    for (const auto &group : groups) {
        for (int i = 0; i < group.size(); ++i) {
            if (i > 0) fout << " ";
            fout << group[i];
        }
        fout << endl;
    }

    fin.close();
    fout.close();
}

int main() {
    solve();
    return 0;
}
```

### Explanation
1. **Input Reading**:
   - We read the number of girls `n` and the number of flowers per bouquet `k`.
   - Then, for each girl, we read the types of flowers she collects and store them in a set for each girl. This helps in quickly checking for common flowers.

2. **Group Formation**:
   - We use a breadth-first search (BFS) approach to explore and form groups.
   - Starting from an unvisited girl, we use a queue to explore all girls that share at least one common flower, marking them as visited and adding them to the current group.

3. **Sorting and Output**:
   - Each group is sorted in ascending order before being added to the list of groups.
   - The entire list of groups is then sorted based on the first girl's number in each group.
   - Finally, we write the groups to the output file.

4. **Efficiency**:
   - Using sets for flowers ensures efficient lookups.
   - BFS ensures that we explore the graph of girls and their flower connections optimally.

This approach ensures that the solution is both correct and efficient, adhering to the constraints and requirements specified in the challenge.
