---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `munte.in` and write to `munte.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \dots, x_{k-1}, x_k, x_{k+1}, \dots, x_j$ ($1 \leq i < k < j \leq n$) cu proprietatea că $x_i < x_{i+1} < \dots < x_{k-1} < x_k > x_{k+1} > \dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \ 4 \ 6 \ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \ 4 \ 8 \ 1 \ 2 \ 5 \ 0$ conține $2$ secvențe munte: $3 \ 4 \ 8 \ 1$ și $1 \ 2 \ 5 \ 0$.

După determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.

# Cerință

Scrieți un program care citește numerele $n, x_1, x_2, \dots, x_n$ și apoi determină:

1. numărul de secvențe munte din șirul inițial;
2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;
3. numărul de elemente din șirul final care nu mai conține secvențe munte.

# Date de intrare

Fișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \dots, x_n$ separate două câte două prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.

# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq x_i \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.
* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.
* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.
* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.

---

Example:
`munte.in`
```
8
1 2 5 0 6 9 3 4
```

`munte.out`
```
2
4
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's solve the problem step-by-step. We need to determine the number of mountain sequences in the initial list, the total number of mountain sequences after eliminating peaks, and the number of remaining elements when no more mountains exist.

### Outline of the Solution

1. **Input Reading**: Read the input from `munte.in`.
2. **Identify Mountains**: Identify and count mountain sequences.
3. **Remove Peaks**: Remove the peaks of these mountains and repeat until no mountains remain.
4. **Output Results**: Write the results to `munte.out`.

### Detailed Steps

1. **Reading Input**:
    - Use file I/O to read the input numbers.

2. **Identifying Mountains**:
    - Traverse the list and identify sequences that increase to a peak and then decrease.
    - Store the peaks to remove them in the next step.
    
3. **Removing Peaks and Repeating**:
    - Remove the identified peaks from the list.
    - Repeat the mountain identification and peak removal until no mountains are left.

4. **Output the Results**:
    - Write the number of initial mountains, total mountains, and the final list size to the output file.

### C++ Implementation

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

void readInput(const std::string& filename, std::vector<int>& elements) {
    std::ifstream infile(filename);
    if(!infile.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        exit(1);
    }

    int n;
    infile >> n;
    elements.resize(n);
    for(int i = 0; i < n; ++i) {
        infile >> elements[i];
    }
    infile.close();
}

void writeOutput(const std::string& filename, int initialMountains, int totalMountains, int remainingElements) {
    std::ofstream outfile(filename);
    if(!outfile.is_open()) {
        std::cerr << "Error opening file: " << filename << std::endl;
        exit(1);
    }

    outfile << initialMountains << '\n' << totalMountains << '\n' << remainingElements << '\n';
    outfile.close();
}

int findMountainsAndRemovePeaks(std::vector<int>& elements) {
    int mountainsCount = 0;
    std::vector<int> peaksToRemove;

    for (int i = 1; i < elements.size() - 1; ++i) {
        if (elements[i] > elements[i - 1] && elements[i] > elements[i + 1]) {
            int left = i - 1;
            int right = i + 1;
            bool isMountain = true;

            while (left > 0 && elements[left] > elements[left - 1]) --left;
            while (right < elements.size() - 1 && elements[right] > elements[right + 1]) ++right;

            if ((i - left) > 0 && (right - i) > 0 && (right - left + 1) >= 3) {
                mountainsCount++;
                peaksToRemove.push_back(elements[i]);
                i = right; // Move to the end of the current mountain
            }
        }
    }

    // Remove peaks
    for (int peak : peaksToRemove) {
        auto it = std::find(elements.begin(), elements.end(), peak);
        if (it != elements.end()) {
            elements.erase(it);
        }
    }

    return mountainsCount;
}

int main() {
    std::vector<int> elements;
    readInput("munte.in", elements);

    int initialMountains = 0;
    int totalMountains = 0;

    bool hasMountains = true;
    bool firstIteration = true;

    while (hasMountains) {
        int mountains = findMountainsAndRemovePeaks(elements);
        if (mountains == 0) {
            hasMountains = false;
        } else {
            if (firstIteration) {
                initialMountains = mountains;
                firstIteration = false;
            }
            totalMountains += mountains;
        }
    }

    int remainingElements = elements.size();
    writeOutput("munte.out", initialMountains, totalMountains, remainingElements);
    
    return 0;
}
```

### Explanation
- **readInput**: Reads the input file and stores the elements in a vector.
- **writeOutput**: Writes the results to the output file.
- **findMountainsAndRemovePeaks**: Identifies mountain sequences, counts them, and removes their peaks.
- **main**: Orchestrates the reading, processing, and writing operations efficiently.

This solution ensures efficient identification and removal of mountain peaks, optimizing the process with a time complexity manageable within the constraints provided.
