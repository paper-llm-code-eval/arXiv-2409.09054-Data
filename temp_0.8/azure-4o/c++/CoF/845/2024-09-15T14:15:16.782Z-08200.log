---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `munte.in` and write to `munte.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \dots, x_{k-1}, x_k, x_{k+1}, \dots, x_j$ ($1 \leq i < k < j \leq n$) cu proprietatea că $x_i < x_{i+1} < \dots < x_{k-1} < x_k > x_{k+1} > \dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \ 4 \ 6 \ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \ 4 \ 8 \ 1 \ 2 \ 5 \ 0$ conține $2$ secvențe munte: $3 \ 4 \ 8 \ 1$ și $1 \ 2 \ 5 \ 0$.

După determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.

# Cerință

Scrieți un program care citește numerele $n, x_1, x_2, \dots, x_n$ și apoi determină:

1. numărul de secvențe munte din șirul inițial;
2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;
3. numărul de elemente din șirul final care nu mai conține secvențe munte.

# Date de intrare

Fișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \dots, x_n$ separate două câte două prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.

# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq x_i \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.
* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.
* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.
* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.

---

Example:
`munte.in`
```
8
1 2 5 0 6 9 3 4
```

`munte.out`
```
2
4
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution for the given problem, ensuring we read from `munte.in` and write to `munte.out` efficiently:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to detect and remove the peaks of mountains from the sequence
int detectAndRemoveMountains(vector<int>& seq) {
    int mountainCount = 0;
    bool foundMountain = true;

    while (foundMountain) {
        foundMountain = false;
        vector<int> newSeq;
        int n = seq.size();

        for (int i = 1; i < n - 1; ++i) {
            if (seq[i-1] < seq[i] && seq[i] > seq[i+1]) {
                ++mountainCount;
                foundMountain = true;
                newSeq.insert(newSeq.end(), seq.begin(), seq.begin() + i);
                newSeq.insert(newSeq.end(), seq.begin() + i + 1, seq.end());
                seq = newSeq;
                break;
            }
        }

        if (!foundMountain) {
            break;
        }
    }

    return mountainCount;
}

int main() {
    // Read input from "munte.in"
    ifstream infile("munte.in");
    int n;
    infile >> n;
    vector<int> seq(n);

    for (int i = 0; i < n; ++i) {
        infile >> seq[i];
    }
    infile.close();

    // Original mountain detection
    int originalMountainCount = 0;
    for (int i = 1; i < n - 1; ++i) {
        if (seq[i - 1] < seq[i] && seq[i] > seq[i + 1]) {
            ++originalMountainCount;
        }
    }

    // Total mountains detected during the entire process
    int totalMountains = detectAndRemoveMountains(seq);

    // Write output to "munte.out"
    ofstream outfile("munte.out");
    outfile << originalMountainCount << "\n";
    outfile << totalMountains << "\n";
    outfile << seq.size() << "\n";
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The input is read from the file `munte.in`. The first number is `n`, which represents the number of elements in the sequence.
   - The next `n` numbers are the sequence elements which are stored in the vector `seq`.

2. **Original Mountain Detection:**
   - The program counts the number of mountains in the original sequence by checking if an element is greater than its immediate neighbors.

3. **Total Mountain Detection and Removal:**
   - The function `detectAndRemoveMountains` is used to iteratively find and remove peaks (mountains) from the sequence.
   - It returns the total count of mountains detected throughout the entire process.

4. **Writing Output:**
   - The results are written to the file `munte.out` as specified: the number of mountains in the initial sequence, the total number of mountains removed, and the number of elements remaining in the sequence after all mountains have been removed.

This solution ensures efficient processing by iterating through the sequence and removing elements in a way that minimizes unnecessary operations.
