---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `munte.in` and write to `munte.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \dots, x_{k-1}, x_k, x_{k+1}, \dots, x_j$ ($1 \leq i < k < j \leq n$) cu proprietatea că $x_i < x_{i+1} < \dots < x_{k-1} < x_k > x_{k+1} > \dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \ 4 \ 6 \ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \ 4 \ 8 \ 1 \ 2 \ 5 \ 0$ conține $2$ secvențe munte: $3 \ 4 \ 8 \ 1$ și $1 \ 2 \ 5 \ 0$.

După determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.

# Cerință

Scrieți un program care citește numerele $n, x_1, x_2, \dots, x_n$ și apoi determină:

1. numărul de secvențe munte din șirul inițial;
2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;
3. numărul de elemente din șirul final care nu mai conține secvențe munte.

# Date de intrare

Fișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \dots, x_n$ separate două câte două prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.

# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq x_i \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.
* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.
* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.
* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.

---

Example:
`munte.in`
```
8
1 2 5 0 6 9 3 4
```

`munte.out`
```
2
4
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> findPeaks(const vector<int>& arr) {
    vector<int> peaks;
    int n = arr.size();
    for (int i = 1; i < n - 1; ++i) {
        if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
            peaks.push_back(arr[i]);
        }
    }
    return peaks;
}

int main() {
    ifstream infile("munte.in");
    ofstream outfile("munte.out");
    
    int n;
    infile >> n;
    
    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        infile >> arr[i];
    }
    
    int initialMountainCount = 0;
    int totalMountainCount = 0;
    
    while (true) {
        vector<int> peaks = findPeaks(arr);
        if (peaks.empty()) break;
        
        totalMountainCount += peaks.size();
        if (initialMountainCount == 0) {
            initialMountainCount = peaks.size();
        }
        
        for (int peak : peaks) {
            arr.erase(remove(arr.begin(), arr.end(), peak), arr.end());
        }
    }
    
    outfile << initialMountainCount << endl;
    outfile << totalMountainCount << endl;
    outfile << arr.size() << endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation
1. **Reading Input**: We read the input from the file `munte.in`. First, we read the number of elements, `n`, and then the sequence of `n` natural numbers into a vector `arr`.
2. **Finding Peaks**: We define a helper function `findPeaks` which identifies all the peaks in the current array. A peak is defined as an element that is greater than its immediate neighbors.
3. **Counting Mountains**: We initiate a loop to repeatedly find and remove peaks until there are no more peaks left in the array. We keep track of the initial number of peaks and the total number of peaks found across all iterations.
4. **Removing Peaks**: After each iteration of finding peaks, we remove these peaks from the array.
5. **Writing Output**: Finally, we write the results to the file `munte.out`:
   - The number of mountains in the initial sequence.
   - The total number of mountains found across all iterations.
   - The number of elements left in the final sequence that contains no mountains.
