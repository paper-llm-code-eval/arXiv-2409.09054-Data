---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <set>
#include <iterator>
#include <climits>

using namespace std;

const int MAXN = 1'000'000;

// Sieve of Eratosthenes to generate prime numbers up to MAXN
vector<bool> is_prime(MAXN + 1, true);
vector<int> primes;

void sieve() {
    is_prime[0] = is_prime[1] = false;
    for (int i = 2; i * i <= MAXN; ++i) {
        if (is_prime[i]) {
            for (int j = i * i; j <= MAXN; j += i) {
                is_prime[j] = false;
            }
        }
    }
    for (int i = 2; i <= MAXN; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
        }
    }
}

// Function to find the closest prime to a given number
int closest_prime(int x) {
    auto it = lower_bound(primes.begin(), primes.end(), x);
    if (it == primes.end()) return primes.back();
    int p1 = *it;
    if (it == primes.begin()) return p1;
    int p0 = *(--it);
    return (abs(x - p0) <= abs(x - p1)) ? p0 : p1;
}

// Function to calculate the cost of an element
int cost(int x) {
    return abs(x - closest_prime(x));
}

int main() {
    // Reading input from file
    ifstream infile("primprim.in");
    ofstream outfile("primprim.out");

    int C;
    infile >> C;

    int n;
    infile >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i) {
        infile >> arr[i];
    }

    sieve();

    if (C == 1) {
        long long total_cost = 0;
        for (int i = 0; i < n; ++i) {
            total_cost += cost(arr[i]);
        }
        outfile << total_cost << '\n';
    } else {
        int q;
        infile >> q;
        for (int j = 0; j < q; ++j) {
            int i, x, p;
            infile >> i >> x >> p;
            arr[i - 1] = x;

            // Calculate total minimum cost for any p elements
            vector<int> costs;
            for (int k = 0; k < n; ++k) {
                costs.push_back(cost(arr[k]));
            }

            sort(costs.begin(), costs.end());

            long long min_total_cost = 0;
            for (int k = 0; k < p; ++k) {
                min_total_cost += costs[k];
            }

            outfile << min_total_cost << '\n';
        }
    }

    infile.close();
    outfile.close();

    return 0;
}
```
