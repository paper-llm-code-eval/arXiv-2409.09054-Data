---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La proba de sărituri cu schiurile din cadrul jocurilor olimpice de iarnă participă $N$ concurenți, numerotați cu numere de la 1 la N.

Regulile de desfășurare a probei sunt următoarele:
- concurenții evoluează pe rând, în ordine de la $1$ la $N$;
- fiecare concurent va efectua o singură săritură;
- după efectuarea săriturii fiecare concurent primește un anumit punctaj;
- pe tot parcursul concursului, comisia de arbitri are obligația să alcătuiască o listă cu punctajele obținute de concurenți, în ordinea evoluției lor;
- evoluția unui concurent durează exact un minut;
- nu se face pauză între evoluțiile a doi concurenți care au numere de ordine consecutive;
- afișarea punctajului nu necesită timp suplimentar după efectuarea săriturii;
- proba se încheie la un minut după evoluția ultimului concurent.

Pe tot parcursul concursului se ține în mod neoficial și un clasament parțial, pe baza rezultatelor obținute de concurenții care au evoluat până în acel moment. Asta pentru că șeful comisiei de arbitri are o curiozitate aparte și pune $K$ întrebări sub forma următoare: Câte minute s-a ocupat primul loc din clasament cu un punctaj egal cu $X$ puncte? Dacă nici un concurent nu s-a clasat pe primul loc cu $X$ puncte atunci primește ca răspuns valoarea $0$.

# Cerință

Scrieți un program care determină răspunsul pentru fiecare dintre cele $K$ întrebări puse de șeful comisiei de arbitri.

# Date de intrare

În fișierul `schi.in`, pe prima linie este scris un număr natural, $N$ reprezentând numărul de concurenți. 
Pe a doua linie a fișierului sunt scrise cele $N$ numere naturale separate prin câte un spațiu, reprezentând punctajele obținute de fiecare dintre cei $N$ concurenți, în ordinea în care aceștia au evoluat. Pe a treia linie a fișierului este scris numărul natural $K$ ce reprezintă numărul de întrebări puse de șef. Pe a patra linie a fișierului sunt scrise $K$ numere naturale separate prin câte un spațiu, reprezentând valorile $X$ ale punctajelor alese de șeful comisiei de arbitri.

# Date de ieșire

În fișierul `schi.out` se vor scrie $K$ numere, separate prin câte un spațiu, reprezentând, în ordine, răspunsurile la cele $K$ întrebări.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq$ punctajele obținute de concurenți $\leq 1 \ 000 \ 000 \ 000$;
* $0 \leq$ valorile $X$ alese de șeful arbitrilor $\leq 1 \ 000 \ 000 \ 000$;

---

Example:
`schi.in`
```
10
1 6 5 3 6 8 8 6 1 9
6
5 1 6 8 2 9
```

`schi.out`
```
0 1 4 4 0 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this problem efficiently, we need to simulate the competition and maintain the leader's highest score dynamically. We'll also precompute the answers for the queries regarding how long a specific score has held the first place. Let's break down the steps:

1. **Read Input Efficiently**: Since the constraints are large, we should use fast I/O methods.
2. **Simulate Competition**:
   - Keep track of scores and determine when each new score becomes the highest score.
   - Maintain a map of how long each score has been the highest.
3. **Answer Queries**:
   - Use the precomputed map to quickly answer each query.

Here's how we can implement this:

```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

int main() {
    std::ifstream fin("schi.in");
    std::ofstream fout("schi.out");

    int N, K;
    fin >> N;
    std::vector<int> scores(N);
    for (int i = 0; i < N; ++i) {
        fin >> scores[i];
    }
    fin >> K;
    std::vector<int> queries(K);
    for (int i = 0; i < K; ++i) {
        fin >> queries[i];
    }
    fin.close();

    std::unordered_map<int, int> scoreToTime;
    int currentMax = 0;
    int currentMaxTime = 0;
    
    for (int i = 0; i < N; ++i) {
        if (scores[i] > currentMax) {
            currentMax = scores[i];
            currentMaxTime = 0;
        }
        ++currentMaxTime;
        scoreToTime[currentMax] = currentMaxTime;
    }
    
    for (int i = 0; i < K; ++i) {
        int query = queries[i];
        if (scoreToTime.find(query) != scoreToTime.end()) {
            fout << scoreToTime[query] << " ";
        } else {
            fout << "0 ";
        }
    }
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: We use `ifstream` to read the input file and `ofstream` to write to the output file.
2. **Simulate Competition**:
   - We read all the scores into a vector.
   - Then we iterate through the scores, keeping track of the current maximum score and how many minutes it has held the top position.
   - We update this information in an unordered map (`scoreToTime`) where the key is the score and the value is the number of minutes it held the top position.
3. **Answer Queries**:
   - For each query, we check if the score exists in `scoreToTime` and output the corresponding time. If it doesn’t exist, we output `0`.

This solution is efficient due to the use of direct array access and hash map lookups, both of which are O(1) operations on average. The overall complexity is O(N + K), ensuring it handles the upper constraint limits well.
