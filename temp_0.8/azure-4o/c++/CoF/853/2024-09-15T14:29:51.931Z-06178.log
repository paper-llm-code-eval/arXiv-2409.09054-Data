---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `defrag.in` and write to `defrag.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Discul dur (hard disk) este un dispozitiv utilizat pentru stocarea datelor. Stocarea se face pe o suprafață magnetică dispusă pe platane rotunde metalice. Pe un platan, datele sunt organizate în **piste** și **sectoare**, iar zona aflată la intersecția dintre o pistă și un sector poartă denumirea de **cluster**.

Un cluster poate avea două stări: **liber**, dacă nu conține date, sau **ocupat**, atunci când conține date.

Un platan se numește **defragmentat** dacă toți clusterii ocupați de pe fiecare pistă sunt așezați în ordine consecutivă. Defragmentarea se realizează prin mutarea unor clusteri ocupați și are rolul de a micșora timpul de acces la date. Mutarea unui cluster reprezintă transferul datelor de la un cluster ocupat către un cluster liber de pe aceeași pistă.

~[defrag.png|width=90em|align=center]

# Cerință
Cunoscând numărul de piste $P$ și de sectoare $S$ al unui platan, numărul și poziția clusterilor ocupați, să se scrie un program care determină:
1. numărul de piste care au toți clusterii liberi;
2. numărul **minim** de mutări de clusteri, pentru fiecare pistă în parte, astfel încât platanul să devină defragmentat.

# Date de intrare
Pe prima linie a fişierului de intrare `defrag.in` se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$.
Pe a doua linie a fișierului de intrare se găsesc două numere naturale $P$ și $S$, separate printr-un spaţiu, cu semnificaţia din enunţ.
A treia linie conţine un număr natural $C$ reprezentând numărul total de clusteri ocupați de pe platan, iar pe fiecare din următoarele $C$ linii se găsește câte o pereche de valori $p_i$ şi $s_i$, $1 \leq i \leq C$, separate printr-un spaţiu, reprezentând pista, respectiv sectorul unde se află fiecare cluster ocupat.

# Date de ieşire
Fișierul de ieșire este `defrag.out`.
Dacă valoarea lui $V$ este $1$ atunci fişierul de ieşire va conţine pe prima linie un număr natural ce reprezintă numărul de piste care au toți clusterii liberi.
Dacă valoarea lui $V$ este $2$ atunci fişierul de ieşire va conține pe prima linie $P$ numere naturale notate $M_i$, $1 \leq i \leq P$, separate prin câte un singur spațiu, unde $M_i$ reprezintă numărul minim de mutări de clusteri, dintre cei aflați pe pista $i$, astfel încât pe pista $i$ clusterii ocupați să se găsească într-o ordine consecutivă.

# Restricţii şi precizări
- $1 \leq P \leq 100$
- $1 \leq S \leq 360$
- $1 \leq C \leq P \cdot S$
- Pistele sunt numerotate de la $1$ la $P$ începând cu pista exterioară.
- Sectoarele sunt numerotate de la $1$ la $S$ în sensul acelor de ceasornic începând cu sectorul $1$.
- Dacă o pistă are toți clusterii liberi, atunci valoarea cerută la a doua cerință este $0$.
- $20\%$ din teste vor avea valoarea $V = 1$, iar $80\%$ din teste vor avea valoarea $V = 2$.

---

Example:
`defrag.in`
```
1
4 8
10
1 1
1 3
1 5
1 7
4 5
4 1
4 6
4 8
2 2
2 4
```

`defrag.out`
```
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("defrag.in");
    ofstream outfile("defrag.out");

    int V, P, S, C;
    infile >> V >> P >> S >> C;

    vector<vector<int>> clusters(P + 1); // using P+1 for 1-based indexing

    for (int i = 0; i < C; ++i) {
        int p, s;
        infile >> p >> s;
        clusters[p].push_back(s);
    }

    if (V == 1) {
        int free_tracks = 0;
        for (int i = 1; i <= P; ++i) {
            if (clusters[i].empty()) {
                ++free_tracks;
            }
        }
        outfile << free_tracks << endl;
    } 
    else if (V == 2) {
        vector<int> moves(P + 1, 0);

        for (int i = 1; i <= P; ++i) {
            if (!clusters[i].empty()) {
                sort(clusters[i].begin(), clusters[i].end());

                int min_moves = S; // since max sectors is S, this is a safe upper bound
                int cluster_size = clusters[i].size();

                for (int j = 0; j <= cluster_size - 1; ++j) {
                    int moves_needed = 0;
                    for (int k = 0; k < cluster_size; ++k) {
                        if (clusters[i][j] + k < S + 1) {
                            if (clusters[i][j] + k != clusters[i][k]) {
                                moves_needed++;
                            }
                        }
                    }
                    min_moves = min(min_moves, moves_needed);
                }
                moves[i] = min_moves;
            }
        }

        for (int i = 1; i <= P; ++i) {
            outfile << moves[i] << ' ';
        }
        outfile << endl;
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: 
    - The input is read from `defrag.in` using an `ifstream` object.
    - The first line indicates whether the task is to count free tracks (`V == 1`) or calculate the minimum moves (`V == 2`).
    - The second line provides the number of tracks `P` and sectors `S`.
    - The third line gives the number of occupied clusters `C`.
    - Subsequent lines give the positions of these clusters.

2. **Track Cluster Data**:
    - A vector of vectors `clusters` is maintained to store the sectors for each track.

3. **Handling V == 1**:
    - Count the number of free tracks by checking which vectors in `clusters` are empty.

4. **Handling V == 2**:
    - For each track, sort the list of occupied sectors.
    - Calculate the minimum moves needed to make the clusters consecutive.
    - This involves checking each possible starting position for a consecutive block of occupied clusters and counting the number of moves required.

5. **Output Results**:
    - For `V == 1`, output the number of free tracks.
    - For `V == 2`, output the minimum moves for each track.

The algorithm efficiently handles the problem within the constraints provided, ensuring minimal execution time.
