---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the problem and the approach to solve it efficiently:

### Steps to Solve the Problem

1. **Understand the Input and Output:**
   - The input file `aeriana.in` contains a variable `C` which specifies the task (1 or 2), the number of flights `N`, and then for each flight, six numbers representing the flight details.
   - The output file `aeriana.out` should contain the duration of the longest flight in hours and minutes.

2. **Reading the Input:**
   - Use file I/O to read the input data efficiently.

3. **Calculating Flight Duration:**
   - For a given flight with start and end times, calculate the duration considering the possibility that the flight might land the next day.

4. **Identifying Prime Numbers:**
   - Determine if a number (airport code) is prime.

5. **Checking Special Flights:**
   - Determine if a flight is special based on the given conditions (prime departure airport code and arrival airport code divisible by the sum of digits of the departure airport code).

6. **Handling Special Flights:**
   - If a flight is special, swap its departure and arrival times and then calculate the duration.

7. **Tracking Maximum Duration:**
   - Track the maximum flight duration encountered.

### Implementation in C++

Here is the complete C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>

// Function to check if a number is prime
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

// Function to calculate sum of digits of a number
int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

// Function to calculate duration in minutes between two times
int calculateDuration(int H1, int M1, int H2, int M2) {
    int start = H1 * 60 + M1;
    int end = H2 * 60 + M2;
    if (end < start) {
        end += 24 * 60; // Consider next day
    }
    return end - start;
}

int main() {
    std::ifstream infile("aeriana.in");
    std::ofstream outfile("aeriana.out");

    int C, N;
    infile >> C >> N;

    int maxDuration = 0;

    for (int i = 0; i < N; ++i) {
        int A1, A2, H1, M1, H2, M2;
        infile >> A1 >> A2 >> H1 >> M1 >> H2 >> M2;

        int originalDuration = calculateDuration(H1, M1, H2, M2);

        if (C == 1) {
            maxDuration = std::max(maxDuration, originalDuration);
        } else {
            bool special = isPrime(A1) && (A2 % sumOfDigits(A1) == 0);
            if (special) {
                // Swap departure and arrival times
                std::swap(H1, H2);
                std::swap(M1, M2);
            }
            int adjustedDuration = calculateDuration(H1, M1, H2, M2);
            maxDuration = std::max(maxDuration, adjustedDuration);
        }
    }

    int maxHours = maxDuration / 60;
    int maxMinutes = maxDuration % 60;

    outfile << maxHours << " " << maxMinutes << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **Prime Check and Digit Sum Calculation:**
   - `isPrime` function checks if a number is prime.
   - `sumOfDigits` calculates the sum of digits of a number.

2. **Duration Calculation:**
   - `calculateDuration` computes the duration between two times, considering possible next day arrival.

3. **Main Logic:**
   - Read input values.
   - Determine if a flight is special and adjust times if necessary.
   - Calculate and track the maximum duration.
   - Write the result to the output file. 

The provided solution is efficient for the given constraints and handles both tasks (`C = 1` and `C = 2`) as required.
