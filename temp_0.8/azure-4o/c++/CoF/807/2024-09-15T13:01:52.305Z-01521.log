---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `magic.in` and write to `magic.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Rămaşi singuri în pădure, Hansel şi Grettel, ştiu că singura lor şansă de supravieţuire este să găsească şi să intre în Castelul de Turtă Dulce. Poarta castelului este închisă şi pentru a intra este nevoie de un cuvânt magic şi de un număr fermecat.

Zâna cea Bună îi vede pe copii şi pentru că vrea să–i ajute le spune:
„Mergeţi tot înainte, iar în drumul vostru o să întâlniţi copaci pe a căror trunchiuri sunt scrise caractere reprezentând litere sau cifre. Cuvântul magic este format din toate caracterele literă în ordinea în care apar, dar scrise toate cu majuscule. Numărul fermecat este cel mai mic număr cu cifre distincte care se poate forma din caracterele cifră.”

# Cerință

Pentru a-i ajuta pe Hansel şi Grettel să intre în Castelul de Turtă Dulce, scrieţi un program care citeşte un număr natural $n$, apoi $n$ caractere şi determină:

* cuvântul magic;
* numărul fermecat;

# Date de intrare


Pe prima linie a fișierului de intrare `magic.in` se găseste un număr natural $n$, reprezentând numărul de caractere scrise pe copaci. Pe cea de a doua linie sunt $n$ caractere separate prin câte un spaţiu, reprezentând caracterele scrise pe copaci.


# Date de ieșire


Fișierul de ieșire `magic.out` va conține două linii:

* pe prima linie se va scrie un şir de litere mari, reprezentând cuvântul magic;
* pe a doua linie se va scrie un număr natural cu cifre distincte, reprezentând numărul fermecat.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* Caracterele sunt doar cifre sau litere mici ale alfabetului englez.
* Printre cele $n$ caractere se află întotdeauna cel puțin o literă şi cel puţin o cifră.
* Pe fiecare copac este scris un singur caracter.
* Numărul magic începe întotdeauna cu o cifră diferită de zero.
* Pentru rezolvarea cerinţei a) se acordă 40% din punctaj, pentru cerinţa b) 60% din punctaj.

---

Example:
`magic.in`
```
6
c 2 5 5 b 2
```

`magic.out`
```
CB
25
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Below is the C++ code that reads the input from `magic.in`, processes it to determine the "magic word" and the "enchanted number", and then writes the output to `magic.out`.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <set>

int main() {
    std::ifstream infile("magic.in");
    std::ofstream outfile("magic.out");

    int n;
    infile >> n;

    std::vector<char> letters;
    std::set<char> digits_set;

    for (int i = 0; i < n; ++i) {
        char ch;
        infile >> ch;
        if (isalpha(ch)) {
            letters.push_back(toupper(ch));
        } else if (isdigit(ch)) {
            digits_set.insert(ch);
        }
    }

    // Form the magic word
    std::string magic_word(letters.begin(), letters.end());

    // Form the enchanted number
    std::vector<char> digits(digits_set.begin(), digits_set.end());
    std::sort(digits.begin(), digits.end());
    
    std::string enchanted_number(digits.begin(), digits.end());
    
    // Ensure the enchanted number does not start with '0'
    if (enchanted_number[0] == '0') {
        for (size_t i = 1; i < enchanted_number.size(); ++i) {
            if (enchanted_number[i] != '0') {
                std::swap(enchanted_number[0], enchanted_number[i]);
                break;
            }
        }
    }

    outfile << magic_word << "\n" << enchanted_number << "\n";

    return 0;
}
```

### Explanation of the Solution:

1. **Reading the Inputs:**
   - Open `magic.in` for reading and `magic.out` for writing.
   - Read the number of characters `n`.

2. **Processing the Characters:**
   - Loop through the `n` characters.
   - Separate the alphabetic characters and convert them to uppercase, storing them in the `letters` vector.
   - Collect the numeric characters in a set to ensure uniqueness.

3. **Forming the Magic Word:**
   - Convert the `letters` vector to a string, maintaining the order of appearance.

4. **Forming the Enchanted Number:**
   - Convert the set of unique digits to a vector and sort it to get the smallest lexicographical order.
   - Convert this sorted vector to a string.
   - Check if the first character is '0'. If it is, swap it with the first non-zero digit to ensure the enchanted number does not start with '0'.

5. **Writing the Outputs:**
   - Write the `magic_word` and `enchanted_number` to `magic.out`.

This solution ensures efficient processing of input and correct formation of required outputs with a complexity of O(n log n) due to the sorting step.
