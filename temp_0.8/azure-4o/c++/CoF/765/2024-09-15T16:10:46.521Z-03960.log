---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `excel.in` and write to `excel.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel, elev în clasa a VII-a, pasionat de aplicațiile informatice, s-a gândit să-și facă un program care să simuleze cunoscutul produs Excel. Zis și făcut, s-a pus pe treabă și într-o oră a reușit să realizeze un program asemănător Excel-ului, dar care, spre deosebire de original, nu poate face decât o singură operație în celulele sale: suma. Încercați și dumneavoastră să realizați isprava lui Gigel!
Reamintim că o foaie de calcul în Excel se prezintă sub forma unei suprafețe liniate cu linii orizontale și verticale. Prin intersecția lor rezultă dreptunghiuri (numite celule), fiecare celulă având un nume format dintr-o literă și un număr, reprezentând coloana, respectiv linia pe care se află.

~[excel.png|align=center|width=45em]

De exemplu, celula din stânga sus este $A1$, urmată, pe linie, de $B1, C1$, etc. Introducerea unei formule într-o celulă începe întotdeauna cu semnul `=`. De exemplu dacă în celula `C2` scriem `=A2+B2` înseamnă că în această celulă se va scrie rezultatul adunării valorilor din celulele $A2$ și $B2$. Pot exista și celule cu formula `=A5` ceea ce înseamnă că în celula respectivă vom avea un rezultat egal cu cel din celula $A5$. Fiind abia la început și în ceea ce privește programarea și în ceea ce privește aplicația Excel, Gigel se gândește ca programul său să completeze celulele începând cu prima coloană, apoi a doua etc., astfel că formulele care pot apărea în celula ($col$, $lin$) pot folosi datele din coloanele $1$ până la $col-1$ și din celulele aflate pe liniile $1$ până la $lin-1$ din coloana $col$.

# Cerință

Dându-se o foaie de calcul să se înlocuiască toate formulele care apar, prin rezultatele obținute respectând cerințele date în text.

# Date de intrare

Fișierul `excel.in` are pe prima linie două valori $m \ n$, separate printr-un spațiu, reprezentând numărul de coloane, respectiv de linii ale foii de calcul. Pe următoarele $n$ linii se descriu cele $m$ coloane ale foii. O descriere poate fi formată din valori întregi pozitive sau formule separate printr-un singur spațiu. Formulele sunt șiruri de caractere care încep întotdeauna cu semnul `=`. Fișierul de intrare se consideră corect, în sensul că operațiile care apar se pot executa, iar foaia de calcul se poate completa.

# Date de ieșire

Fișierul `excel.out` va conține $n$ linii, pe fiecare linie câte $m$ valori reprezentând rezultatul final al operațiilor realizate în foaia de calcul.

# Restricții și precizări

* $0$ < numărul de coloane $\leq 26$, notate de la `A` la `Z`;
* $0$ < numărul de linii $\leq 50$;
* fiecare linie ce descrie foaia Excel are o lungime maximă $< 256$;
* fiecare valoare numerică din foaia de calcul inițială este un număr pozitiv $\leq 100$;
* formulele care pot să apară în celule se referă doar la operația de adunare.

---

Example:
`excel.in`
```
4 3
11 21 =A1+A2 =A3
10 15 =B1+B2 =A2+B1
=A1+A2 14 21 3
```

`excel.out`
```
11 21 21 21
10 15 36 31
21 14 21 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's tackle the problem step by step in C++:

1. **Read the input file**: We need to read the data from `excel.in`. We'll use file I/O to access and read the data.
2. **Parse the input data**: Extract the number of columns and rows, and then read the cell values/formulas.
3. **Process the cells**: Handle both direct values and formulas. Formulas need to be evaluated based on the values in other cells.
4. **Write the output file**: After processing all cells, write the results to `excel.out`.

Here's the complete C++ code to achieve this:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <sstream>
#include <unordered_map>

using namespace std;

int getColumnIndex(char col) {
    return col - 'A';
}

pair<int, int> parseCellReference(const string &ref) {
    int colIndex = getColumnIndex(ref[0]);
    int rowIndex = stoi(ref.substr(1)) - 1; // Convert 1-based to 0-based
    return {rowIndex, colIndex};
}

int evaluateCell(int row, int col, vector<vector<string>> &grid, vector<vector<int>> &values);

int main() {
    ifstream inputFile("excel.in");
    ofstream outputFile("excel.out");

    int m, n;
    inputFile >> m >> n;
    inputFile.ignore();

    vector<vector<string>> grid(n, vector<string>(m));
    vector<vector<int>> values(n, vector<int>(m, -1));

    for (int i = 0; i < n; ++i) {
        string line;
        getline(inputFile, line);
        stringstream ss(line);
        for (int j = 0; j < m; ++j) {
            ss >> grid[i][j];
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            if (values[i][j] == -1) {
                evaluateCell(i, j, grid, values);
            }
        }
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            outputFile << values[i][j];
            if (j < m - 1) {
                outputFile << " ";
            }
        }
        outputFile << endl;
    }

    inputFile.close();
    outputFile.close();

    return 0;
}

int evaluateCell(int row, int col, vector<vector<string>> &grid, vector<vector<int>> &values) {
    if (values[row][col] != -1) {
        return values[row][col];
    }

    string content = grid[row][col];

    if (content[0] != '=') {
        values[row][col] = stoi(content);
        return values[row][col];
    }

    string formula = content.substr(1);
    stringstream ss(formula);
    string token;
    int sum = 0;
    while (getline(ss, token, '+')) {
        auto [refRow, refCol] = parseCellReference(token);
        sum += evaluateCell(refRow, refCol, grid, values);
    }

    values[row][col] = sum;
    return values[row][col];
}
```

### Explanation:
1. **Helper Functions**:
   - `getColumnIndex`: Converts a column label (A-Z) to an index.
   - `parseCellReference`: Parses a cell reference like `A1` to its respective row and column indices.

2. **evaluateCell**:
   - This function evaluates the value for a cell. If the cell already has a computed value, it returns it.
   - If it's a direct value, it converts the string to an integer.
   - If it's a formula (starts with '='), it parses and computes the sum of the referenced cells.

3. **Main Function**:
   - Reads the `excel.in` file to get the grid dimensions and cell contents.
   - Initializes a 2D grid for storing the cell values or formulas and a 2D vector for the computed values.
   - For each cell, it calls `evaluateCell` to compute its value if not already computed.
   - Writes the computed values to `excel.out`.

This approach ensures that each cell is computed efficiently, respecting the dependencies defined in the formulas.
