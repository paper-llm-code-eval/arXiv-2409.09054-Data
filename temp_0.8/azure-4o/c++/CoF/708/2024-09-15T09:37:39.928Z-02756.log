---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream infile("anagrame.in");
    std::ofstream outfile("anagrame.out");

    if (!infile.is_open() || !outfile.is_open()) {
        return 1;
    }

    std::string word;
    infile >> word;

    // Sort the word to start with the lexicographically smallest permutation
    std::sort(word.begin(), word.end());

    // Use a do-while loop to generate all permutations
    do {
        outfile << word << "\n";
    } while (std::next_permutation(word.begin(), word.end()));

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **File Handling**: The code reads from `anagrame.in` and writes to `anagrame.out`. It uses `std::ifstream` for input and `std::ofstream` for output.
2. **Input Reading**: The word from the input file is read into the string `word`.
3. **Sorting**: The word is sorted lexicographically using `std::sort`. This ensures that the permutations generated are in lexicographical order.
4. **Generating Permutations**: The `std::next_permutation` function is used to generate all permutations of the sorted word in lexicographical order. Each permutation is written to the output file.
5. **File Closing**: Both input and output files are closed at the end to ensure proper resource management.

### Performance Consideration:
- **Sorting**: The initial sorting step is O(n log n), where n is the length of the word.
- **Permutation Generation**: Generating permutations with `std::next_permutation` is efficient and ensures all permutations are generated in lexicographical order.
- **File Operations**: Reading from and writing to files are efficient given the constraints.

### Constraints Handling:
- The word length is at most 10, so the total number of permutations is at most 10! (3,628,800), which is manageable in terms of both time and space within typical constraints.

### Example Verification:
For the input `ana`, the code will produce:
```
aan
ana
naa
```
which is the correct and lexicographically sorted list of anagrams.
