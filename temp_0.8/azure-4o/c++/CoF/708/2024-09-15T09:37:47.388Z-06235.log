---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a solution to the challenge in C++:

```cpp
#include <iostream>
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream infile("anagrame.in");
    std::ofstream outfile("anagrame.out");

    std::string word;
    infile >> word;
    std::vector<std::string> anagrams;

    // Sort the letters of the word to start with the smallest lexicographic permutation
    std::sort(word.begin(), word.end());

    // Generate all permutations and store them
    do {
        anagrams.push_back(word);
    } while (std::next_permutation(word.begin(), word.end()));

    // Write each anagram to the output file
    for (const std::string& anagram : anagrams) {
        outfile << anagram << '\n';
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation

1. **Read Input**:
    - The program reads the input from the file `anagrame.in`.
    
2. **Initial Setup**:
    - We initialize a string `word` to hold the input word.
    - We use a vector `anagrams` to store all generated anagrams.
    
3. **Sort the Input Word**:
    - We sort the letters of the word to ensure that we start with the smallest lexicographic permutation.
    
4. **Generate Permutations**:
    - Using `std::next_permutation`, we generate all lexicographically ordered permutations of the word. Each permutation is added to the `anagrams` vector.
    
5. **Write Output**:
    - Each anagram is written to the file `anagrame.out`.

### Efficiency
- This solution benefits from the `std::next_permutation` function from the C++ Standard Library, which efficiently generates the next lexicographical permutation of the word.
- With a maximum of 10 letters, the number of possible permutations is `10!` (3,628,800). This is feasible to handle within reasonable time and memory limits.

### Compilation and Execution
- To compile the program:
    ```sh
    g++ -o anagrame anagrame.cpp
    ```
- To run the program:
    ```sh
    ./anagrame
    ```

This solution reads from `anagrame.in`, generates all permutations in lexicographical order, and writes them to `anagrame.out`, meeting all the requirements for the challenge.
