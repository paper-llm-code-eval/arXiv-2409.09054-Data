---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's break down the solution step by step to ensure we have an optimal and correct approach:

1. **Input Reading**: We need to read the input from a file named "panglica.in". The first line contains two integers, `N` (number of strips) and `C` (number of colors). The next `N` lines each contain an integer representing the color of the strip.

2. **Finding the Longest Subarray with Same End Colors**: We need to find the longest possible subarray such that the first and last elements of this subarray are of the same color. This will ensure that the ribbon ends with the same color on both ends.

3. **Edge Cases**: There are multiple edge cases we need to consider:
   - If the entire ribbon already has the same color at both ends.
   - If multiple subarrays can be valid, we need to pick the one with minimal cuts from the start.

4. **Output the Result**: Write the results to a file named "panglica.out".

Let's implement the solution:

```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream inFile("panglica.in");
    std::ofstream outFile("panglica.out");

    int N, C;
    inFile >> N >> C;
    
    std::vector<int> colors(N);
    for (int i = 0; i < N; ++i) {
        inFile >> colors[i];
    }

    int maxLength = 0;
    int startCut = 0;
    int endCut = 0;
    int endColor = 0;

    for (int start = 0; start < N; ++start) {
        for (int end = N - 1; end > start; --end) {
            if (colors[start] == colors[end]) {
                int currentLength = end - start + 1;
                if (currentLength > maxLength) {
                    maxLength = currentLength;
                    startCut = start;
                    endCut = N - end - 1;
                    endColor = colors[start];
                }
                break; // No need to check further for this start
            }
        }
    }

    if (maxLength == 0) {
        maxLength = 1;
        endColor = colors[0];
    }

    outFile << maxLength << "\n" << endColor << "\n" << startCut << "\n" << endCut << "\n";

    return 0;
}
```

### Explanation:

- **Reading Input**: We read `N` and `C` and then populate the `colors` vector with the colors of the strips.

- **Nested Loops**: We use nested loops to find pairs of indices `(start, end)` such that `colors[start] == colors[end]`. We calculate the subarray length and keep track of the maximum length found.

- **Break Early**: When we find a valid pair `(start, end)`, we break out of the inner loop to avoid unnecessary checks.

- **Output**: We write the results to `panglica.out`. If no valid subarray is found (which is an edge case), we handle it by setting `maxLength` to 1.

This approach ensures we minimize the cuts from the start and maximize the length of the subarray. The time complexity is O(N^2) in the worst case, but since N is at most 10,000, this is efficient enough for our problem constraints.
