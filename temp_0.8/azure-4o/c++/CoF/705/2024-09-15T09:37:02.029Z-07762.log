---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to determine the longest possible ribbon such that the color at both ends is the same. Here's a step-by-step plan:

1. **Read the Input**: We'll read the values of `N` (the number of strips) and `C` (the number of colors), and then read the list of colors for each strip.
2. **Identify Matching Ends**: We'll check pairs of strips from the start and end to find the longest possible segment where the colors match at both ends.
3. **Calculate Length and Cuts**: Once we identify the longest segment with matching colors at both ends, we'll calculate the number of strips remaining and the number of cuts made at both ends.
4. **Output the Results**: We'll write the results to the output file.

Below is the C++ code that implements this solution:

```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream infile("panglica.in");
    std::ofstream outfile("panglica.out");

    int N, C;
    infile >> N >> C;

    std::vector<int> ribbon(N);
    for (int i = 0; i < N; ++i) {
        infile >> ribbon[i];
    }

    int max_length = 0;
    int start_cuts = 0;
    int end_cuts = 0;
    int color = 0;

    for (int i = 0; i < N; ++i) {
        for (int j = N - 1; j >= i; --j) {
            if (ribbon[i] == ribbon[j]) {
                int length = j - i + 1;
                if (length > max_length) {
                    max_length = length;
                    start_cuts = i;
                    end_cuts = N - j - 1;
                    color = ribbon[i];
                }
                break;
            }
        }
    }

    int remaining_strips = N - start_cuts - end_cuts;
    outfile << remaining_strips << "\n";
    outfile << color << "\n";
    outfile << start_cuts << "\n";
    outfile << end_cuts << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `panglica.in` using `ifstream`.
2. **Finding Matching Ends**: Two nested loops are used to find the longest segment where the colors at both ends match. The outer loop starts from the beginning of the list, and the inner loop starts from the end, moving towards the current position of the outer loop.
3. **Updating the Best Segment**: If a segment is found where the colors match and the length is greater than the previously recorded maximum length, we update the maximum length and record the number of cuts needed at both ends.
4. **Writing Output**: The results are written to `panglica.out` using `ofstream`.

This solution ensures that we examine each possible segment for matching colors at both ends and determine the longest such segment efficiently. This approach runs in O(N^2) time complexity, which should be efficient enough given the constraints.
