---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `divizor.in` and write to `divizor.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un număr natural $N$ format din $m$ cifre și toate cele $m - 1$ numere ce se pot forma succesiv pornind de la numărul inițial $N$, prin mutarea celei mai semnificative cifre a combinației curente la sfârșitul acesteia, după cum se poate observa din exemplele de mai jos.

$N = 12035 \rightarrow 20351 \rightarrow 03512 \rightarrow 35120 \rightarrow 51203$ ($4$ combinații). Se taie zeroul de la inceputul lui $03512$ iar numărul a rămas $3512$.
 
$N = 2121 \rightarrow 1212 \rightarrow 2121 \rightarrow 1212$ ($3$ combinații, $3$ numere)
 
# Cerință
 
Scrieți un program care să citească numărul $N$, să construiască cele $m - 1$ numere și să determine:

1. numărul cu cel mai mare număr de divizori, dintre cele $m$ numere; dacă sunt mai multe astfel de numere printre cele $m$, se vor scrie în fișierul de ieșire toate aceste numere.
2. cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere, iar în cazul în care nu există un astfel de divizor (toate cele $m$ numere sunt prime), se va afișa valoarea $0$.

# Date de intrare

Fișierul `divizor.in` conține o singură linie pe care este scris numărul natural $N$.


# Date de ieșire

Fișierul `divizor.out` va conține:

* pe prima linie numărul sau numerele cu număr maxim de divizori, despărțite prin câte un spațiu
* pe a doua linie, un număr natural reprezentând cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere sau $0$, în cazul în care toate cele $m$ numere sunt numere prime


# Restricții și precizări

* $1 \leq N < 1 \ 000 \ 000$;
* Conform procedurii de formare a combinațiilor, se poate întâmpla să se obțină de mai multe ori același număr. Se vor considera toate combinațiile posibile, chiar dacă există numere care se repetă.
* Cifra $0$ scrisă în fața unui număr se consideră neglijabilă și nu se cere afișată în rezultatul final.
* La toate cerințele se ia în considerare și numărul inițial.
* Divizorul propriu al unui număr este un divizor diferit de $1$ și de număr.
* Se acordă punctaje parțiale: cerința a) 60% din punctaj, cerința b) 40% din punctaj

---

Example:
`divizor.in`
```
212
```

`divizor.out`
```
212
106
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>

// Function to generate rotated numbers
std::vector<int> generateRotations(int N) {
    std::vector<int> rotations;
    std::string s = std::to_string(N);
    int len = s.length();
    
    for (int i = 0; i < len; ++i) {
        rotations.push_back(std::stoi(s));
        std::rotate(s.begin(), s.begin() + 1, s.end());
    }
    
    return rotations;
}

// Function to count divisors of a number
int countDivisors(int num) {
    if (num < 2) return 0; // 1 and below have no proper divisors
    int count = 2; // 1 and the number itself
    for (int i = 2; i <= std::sqrt(num); ++i) {
        if (num % i == 0) {
            count += (i == num / i) ? 1 : 2;
        }
    }
    return count;
}

// Function to find proper divisors of a number
std::vector<int> properDivisors(int num) {
    std::vector<int> divisors;
    for (int i = 2; i <= std::sqrt(num); ++i) {
        if (num % i == 0) {
            divisors.push_back(i);
            if (i != num / i) divisors.push_back(num / i);
        }
    }
    return divisors;
}

int main() {
    std::ifstream fin("divizor.in");
    std::ofstream fout("divizor.out");

    int N;
    fin >> N;

    std::vector<int> rotations = generateRotations(N);
    std::sort(rotations.begin(), rotations.end());
    rotations.erase(std::unique(rotations.begin(), rotations.end()), rotations.end());

    // Find numbers with maximum divisors
    int maxDivisors = 0;
    std::vector<int> maxDivisorNumbers;
    for (int number : rotations) {
        int divCount = countDivisors(number);
        if (divCount > maxDivisors) {
            maxDivisors = divCount;
            maxDivisorNumbers.clear();
            maxDivisorNumbers.push_back(number);
        } else if (divCount == maxDivisors) {
            maxDivisorNumbers.push_back(number);
        }
    }

    for (size_t i = 0; i < maxDivisorNumbers.size(); ++i) {
        fout << maxDivisorNumbers[i];
        if (i < maxDivisorNumbers.size() - 1) fout << " ";
    }
    fout << std::endl;

    // Find the highest proper divisor
    std::set<int> properDivisorsSet;
    for (int number : rotations) {
        std::vector<int> divs = properDivisors(number);
        properDivisorsSet.insert(divs.begin(), divs.end());
    }

    int highestProperDivisor = properDivisorsSet.empty() ? 0 : *properDivisorsSet.rbegin();
    fout << highestProperDivisor << std::endl;

    fin.close();
    fout.close();
    return 0;
}
```

This code performs the following steps:

1. **Generate Rotations**: It generates all the rotations of the given number `N`.
2. **Count Divisors**: It counts the number of divisors for each rotation.
3. **Find Maximum Divisors**: It identifies the number(s) with the maximum number of divisors among the rotations.
4. **Find Proper Divisors**: It finds all proper divisors for each rotation number.
5. **Output Results**: It writes the results to `divizor.out`.

The code reads the input from the file `divizor.in` and writes the output to the file `divizor.out`. It ensures efficiency by using appropriate data structures and algorithms to handle the given constraints.
