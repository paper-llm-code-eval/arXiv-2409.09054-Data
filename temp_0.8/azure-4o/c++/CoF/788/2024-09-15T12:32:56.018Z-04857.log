---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the C++ solution for the given challenge:

```cpp
#include <fstream>
#include <unordered_map>
#include <string>
#include <sstream>
#include <set>

int wordGrade(const std::string& word) {
    int sum = 0;
    for (char c : word) {
        sum += (c - 'a' + 1);
    }
    return sum;
}

int main() {
    std::ifstream fin("grad.in");
    std::ofstream fout("grad.out");
    
    int n;
    std::string text;
    
    fin >> n;
    fin.ignore(); // Ignore the newline character after the number
    std::getline(fin, text);
    
    std::istringstream stream(text);
    std::string word;
    
    std::unordered_map<int, std::set<std::string>> groups;
    int wordCount = 0;
    
    while (stream >> word) {
        int grade = wordGrade(word);
        groups[grade].insert(word);
        wordCount++;
    }
    
    fout << wordCount << std::endl;
    fout << groups.size() << std::endl;
    
    return 0;
}
```

### Explanation:
1. **Reading Input:**
   - The input is read from the file `grad.in`.
   - The first value from the file is `n`, representing the number of characters in the text.
   - The rest of the file contains the text itself.

2. **Processing Text:**
   - We calculate the "grade" of each word. The grade is the sum of the position values of each character in the alphabet (e.g., 'a' -> 1, 'b' -> 2, etc.).
   - We keep track of words and their grades using an unordered_map `groups` where keys are grades and values are sets of words.

3. **Counting Words and Groups:**
   - We iterate through the text, extract each word, compute its grade, and store it in the map.
   - We count the total number of words and the number of unique grades (groups).

4. **Writing Output:**
   - The output is written to the file `grad.out`.
   - The first line contains the number of words.
   - The second line contains the number of unique groups.

This solution ensures that we efficiently count the words and groups with a time complexity of O(n), where n is the number of characters in the text. The use of `unordered_map` and `set` ensures that the operations for inserting and checking group membership are efficient.
