---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <unordered_map>

int main() {
    std::ifstream infile("grad.in");
    std::ofstream outfile("grad.out");

    if (!infile.is_open() || !outfile.is_open()) {
        return 1;
    }

    int n;
    infile >> n;
    infile.ignore();  // Ignore the newline character after the integer input

    std::string text;
    std::getline(infile, text);

    std::unordered_map<int, int> grade_map;
    int word_count = 0;

    std::istringstream iss(text);
    std::string word;

    while (iss >> word) {
        int grade = 0;
        for (char c : word) {
            grade += (c - 'a' + 1);
        }
        grade_map[grade]++;
        word_count++;
    }

    int group_count = grade_map.size();

    outfile << word_count << '\n';
    outfile << group_count << '\n';

    infile.close();
    outfile.close();

    return 0;
}
```

This C++ solution reads the input from `grad.in` file and processes the text to determine the number of words and the number of groups based on the grade of the words. The file output is written to `grad.out`.

### Explanation:

1. **Reading Input**:
    - The input file is opened and the number of characters `n` is read first.
    - The newline character after `n` is ignored.
    - The entire text line is then read.

2. **Processing Text**:
    - Use `unordered_map` to keep track of the grades and their frequencies.
    - Split the text into words using `istringstream`.
    - For each word, calculate its grade and update the `unordered_map`.
    - Count the total number of words while processing them.

3. **Output Results**:
    - The number of words is directly given by the word count.
    - The number of unique grades (groups) is given by the size of the `unordered_map`.

4. **File Handling**:
    - Ensure to close both input and output files after processing.

The code avoids using `cin` and `cout` as per the requirements and handles the input and output via file streams, making it efficient for the given constraints.
