---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem la dispoziție un text format din litere mici ale alfabetului englez și spații. În text cuvintele sunt separate prin unul sau mai multe spații. Fiecare literă din alfabet are asociat un număr ce reprezintă ordinea literei în alfabet. Astfel, `a` are asociat numărul $1$, `b` numărul $2$, `c` numărul $3$ și așa mai departe. Folosind această asociere definim *gradul* unui cuvânt ca fiind suma numerelor asociate fiecărei litere. Spre exemplu cuvântul `bac` are *gradul* $2+1+3=6$.

Folosind cuvintele unui text putem forma grupe de cuvinte. Două cuvinte fac parte din aceeași grupă, dacă au același *grad*.

# Cerință

Să se scrie un program care, pentru un text dat determină numărul de cuvinte și numărul de grupe.

# Date de intrare

Fișierul de intrare `grad.in` are pe prima linie un număr natural $n$ reprezentând numărul de caractere din text, iar pe linia a doua textul.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie numărul de cuvinte, iar pe linia a doua numărul de grupe.

# Restricții și precizări

* $1 \leq n < 255$
* Textul conține cel puțin un cuvânt.
* Primul și ultimul caracter din text este literă.
* Pentru determinarea corectă a numărului de cuvinte se obţine $30\%$ din punctaj. Pentru determinarea corectă a ambelor valori se obtine $100\%$ din punctaj.

---

Example:
`grad.in`
```
17
bac daca aaac bbb
```

`grad.out`
```
4
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the challenge efficiently, we will follow these steps:

1. **Reading the input**: We'll read the entire content of `grad.in` into memory.
2. **Splitting the text into words**: We'll split the text based on spaces to get individual words.
3. **Calculating the grade of each word**: We'll calculate the grade of each word by summing the positions of its letters in the alphabet.
4. **Counting words and groups**: We'll count the total number of words and the number of unique grades to determine the number of groups.
5. **Writing the output**: We'll write the results to `grad.out`.

Let's proceed with the implementation:

```cpp
#include <fstream>
#include <sstream>
#include <unordered_map>
#include <string>

int main() {
    std::ifstream infile("grad.in");
    std::ofstream outfile("grad.out");

    int n;
    infile >> n;
    infile.ignore(); // To ignore the newline character after the number
    std::string text;
    std::getline(infile, text);

    std::stringstream ss(text);
    std::string word;
    
    std::unordered_map<int, int> grade_count_map;
    int word_count = 0;

    while (ss >> word) {
        int grade = 0;
        for (char c : word) {
            grade += (c - 'a' + 1);
        }
        grade_count_map[grade]++;
        word_count++;
    }

    int group_count = grade_count_map.size();

    outfile << word_count << std::endl;
    outfile << group_count << std::endl;

    return 0;
}
```

### Explanation:

1. **Reading the input**:
    - We use `std::ifstream` to open `grad.in` and read the number of characters `n`.
    - We use `ignore()` to skip the newline character after reading `n`.
    - We then read the entire line of text into a `std::string`.

2. **Splitting the text into words**:
    - We use a `std::stringstream` to split the text into words based on spaces.

3. **Calculating the grade of each word**:
    - For each word, we calculate the grade by summing the positions of its letters (`c - 'a' + 1`).

4. **Counting words and groups**:
    - We use an `unordered_map` to count the occurrences of each grade.
    - The size of the map gives the number of unique grades (groups).
    - The total number of words is simply the count of words processed.

5. **Writing the output**:
    - We use `std::ofstream` to write the results to `grad.out`.

This approach is efficient with a time complexity of O(n) where n is the number of characters in the text, as each character is processed a constant number of times. The memory usage is also minimal, making this solution optimal for the given constraints.
