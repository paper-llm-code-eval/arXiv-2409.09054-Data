---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `vraji.in` and write to `vraji.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La Școala de Vrăjitorie Hogswarts, Harry Potter și colegii săi își pun la încercare puterea vrăjilor cu ajutorul baghetelor magice. O vrajă constă în mutarea unuia sau a mai multor obiecte din încăperile școlii în "camera vrăjilor" unde se află adunați toți elevii.

Fiecare dintre cei $n$ "elevi vrăjitori" este înzestrat cu o anumită putere: dacă un elev are puterea $1$, cu o vrajă el aduce $1$ obiect, dacă puterea este $2$ cu o vrajă el va aduce $2$ obiecte, ..., pentru un elev cu puterea de valoare $p$, cu o vrajă el va aduce $p$ obiecte. Pe de altă parte, fiecare elev are o anumită rapiditate (viteză) de efectuare a vrăjilor. Astfel, pe parcursul unei ore, un elev cu viteza $1$ va reuși să facă o singură vrajă, un elev cu viteza $2$ va reuși două vrăji una după alta etc. Evident, un elev cu puterea $3$ și care are viteza $4$, va reuși să aducă până la sfârșitul orei $12$ obiecte ($3$ la prima vrajă, încă $3$ la a doua vrajă, încă $3$ la a treia vrajă și încă $3$ la ultima vrajă).

La sfârșitul orei de vrăjitorie, fiecare elev primește un număr de cutii pentru a ambala în ele numai obiectele aduse de el, astfel încât în fiecare dintre cutiile sale să se afle același număr de obiecte. Profesorul Dumbledore vrea în plus ca fiecare elev să primească același număr de cutii. O soluție simplă ar fi să distribuie fiecărui elev o singură cutie, însă el și-ar dori să distribuie cât mai multe cutii.

# Cerință

Cunoscând pentru fiecare dintre cei $n$ "elevi vrăjitori" ai școlii Hogswarts, puterea cu care este înzestrat și viteza cu care reușește să facă vrăjile, determinați:

1. cel mai mare număr de obiecte ce pot fi aduse până la sfârșitul orei de către un singur "elev vrăjitor";
2. care este numărul maxim de cutii pe care le va primi fiecare elev ținând cont de faptul că fiecare elev va trebui să își distribuie în mod egal obiectele sale în aceste cutii.

# Date de intrare


Din fișierul de intrare `vraji.in` se citește de pe prima linie numărul natural $n$, reprezentând numărul elevilor. De pe următoarele $n$ linii se citesc informațiile despre elevi, câte un elev pe o linie, sub forma a două numere separate prin spațiu, reprezentând puterea și viteza elevului.


# Date de ieșire


Fișierul de ieșire `vraji.out` va conține pe prima linie cel mai mare număr de obiecte ce pot fi aduse în "camera vrăjilor" de către un singur "elev vrăjitor" la sfârșitul orei. Pe cea de-a doua linie va fi scris cel mai mare număr de cutii pe care îl poate primi fiecare elev respectând condițiile din problemă.

# Restricții și precizări

* Numărul $n$ al elevilor, puterea și viteza fiecăruia sunt numere naturale mai mari decât $0$ și mai mici sau egale cu $100$.
* Fiecare cutie va conține numai obiecte ale unui singur "elev vrăjitor".
* Fiecare elev va primi același număr de cutii.

---

Example:
`vraji.in`
```
5
5 2
6 4
3 10
20 2
7 2
```

`vraji.out`
```
40
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the problem and then implement an efficient solution in C++.

### Problem Breakdown

1. **Objective 1**: Determine the maximum number of objects that can be brought to the "camera vrăjilor" by a single student.
   - Each student brings `p * v` objects, where `p` is the power and `v` is the speed.
2. **Objective 2**: Determine the maximum number of boxes each student can receive such that each student can evenly distribute their objects into these boxes.
   - We need to find the greatest common divisor (GCD) of all the total objects each student brings. This is because the maximum number of boxes each student can receive while evenly distributing their objects is the GCD of those total objects.

### Solution Steps

1. **Read Input**: Read the number of students and their respective powers and speeds.
2. **Calculate Total Objects**: For each student, compute the total number of objects they can bring.
3. **Find Maximum Objects**: Identify the maximum number of objects brought by any student.
4. **Compute GCD**: Compute the GCD of all the total objects to determine the maximum number of boxes each student can receive.

### C++ Implementation

Here's how you can implement the solution in C++:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <numeric> // for std::gcd

int main() {
    std::ifstream fin("vraji.in");
    std::ofstream fout("vraji.out");

    int n;
    fin >> n;

    std::vector<int> totalObjects(n);
    int maxObjects = 0;

    for (int i = 0; i < n; ++i) {
        int power, speed;
        fin >> power >> speed;
        totalObjects[i] = power * speed;
        if (totalObjects[i] > maxObjects) {
            maxObjects = totalObjects[i];
        }
    }

    int gcdValue = totalObjects[0];
    for (int i = 1; i < n; ++i) {
        gcdValue = std::gcd(gcdValue, totalObjects[i]);
    }

    fout << maxObjects << "\n" << gcdValue << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation

1. **Reading Input**: We read the number of students and their respective powers and speeds from `vraji.in`.
2. **Calculating Total Objects**: For each student, we calculate the total number of objects they can bring by multiplying their power and speed.
3. **Finding Maximum Objects**: We track the maximum number of objects brought by any student.
4. **Computing GCD**: We use the `std::gcd` function from the `<numeric>` header to compute the greatest common divisor of all the total objects each student brings.
5. **Writing Output**: We write the maximum number of objects and the maximum number of boxes to `vraji.out`.

This solution ensures efficient computation and adheres to the constraints provided.
