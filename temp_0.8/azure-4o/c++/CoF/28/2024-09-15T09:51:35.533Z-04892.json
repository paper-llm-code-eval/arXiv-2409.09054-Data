{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/28/2024-09-15T09:51:35.533Z-04892.log",
  "attemptStart": 1726393895.533,
  "attemptEnd": 1726393920.119,
  "attemptDuration": 24.585999965667725,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <sstream> // Include this header for istringstream\n\nusing namespace std;\n\nbool isTripleIncreasing(const vector<int>& perm, int n) {\n    // Check first n elements are in increasing order\n    for (int i = 1; i < n; ++i) {\n        if (perm[i - 1] >= perm[i]) return false;\n    }\n    // Check last n elements are in increasing order\n    for (int i = n + 1; i < 2 * n; ++i) {\n        if (perm[i - 1] >= perm[i]) return false;\n    }\n    // Check elements at same positions in the two sequences\n    for (int i = 0; i < n; ++i) {\n        if (perm[i] >= perm[n + i]) return false;\n    }\n    return true;\n}\n\nvector<int> getPermutationAtPosition(int n, long long p) {\n    vector<int> perm(2 * n);\n    iota(perm.begin(), perm.end(), 1);\n    long long count = 0;\n    do {\n        if (isTripleIncreasing(perm, n)) {\n            ++count;\n            if (count == p) {\n                return perm;\n            }\n        }\n    } while (next_permutation(perm.begin(), perm.end()));\n    return {};\n}\n\nlong long getPositionOfPermutation(int n, const vector<int>& perm) {\n    vector<int> basePerm(2 * n);\n    iota(basePerm.begin(), basePerm.end(), 1);\n    long long count = 0;\n    do {\n        if (isTripleIncreasing(basePerm, n)) {\n            ++count;\n            if (basePerm == perm) {\n                return count;\n            }\n        }\n    } while (next_permutation(basePerm.begin(), basePerm.end()));\n    return -1;\n}\n\nint main() {\n    ifstream infile(\"permutare.in\");\n    ofstream outfile(\"permutare.out\");\n\n    string line;\n    while (getline(infile, line)) {\n        istringstream iss(line);\n        int type, n;\n        iss >> type >> n;\n        if (type == 1) {\n            long long p;\n            iss >> p;\n            vector<int> perm = getPermutationAtPosition(n, p);\n            for (int i = 0; i < 2 * n; ++i) {\n                if (i > 0) outfile << \" \";\n                outfile << perm[i];\n            }\n            outfile << endl;\n        } else if (type == 2) {\n            vector<int> perm(2 * n);\n            for (int i = 0; i < 2 * n; ++i) {\n                iss >> perm[i];\n            }\n            long long position = getPositionOfPermutation(n, perm);\n            outfile << position << endl;\n        }\n    }\n\n    infile.close();\n    outfile.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3210,
  "metadata": {
    "id": 28,
    "examples": [
      {
        "in": "1 3 2\n2 3 1 3 5 2 4 6\n1 4 1\n2 4 1 2 3 4 5 6 7 8\t",
        "out": "1 2 4 3 5 6\n5\n1 2 3 4 5 6 7 8\n1",
        "explainer": ""
      }
    ],
    "body": "Definim o permutare dublă de ordin `n` ca fiind un șir format din primele `2n` numere naturale nenule:\n$(a_1, a_2, ... , a_n, a_{n+1}, a_{n+2}, ... , a_{2n})$. Această permutare dublă este de trei ori în creștere, dacă sunt adevărate următoarele trei proprietăți:\n1. secvența formată din primele `n` elemente este crescătoare: $a_1 < a_2 < ... < a_n$\n2. secvența formată din ultimele `n` elemente este crescătoare: $a_{n+1} < a_{n+2} < ... < a_{2n}$\n3. perechile ordonate formate din elementele aflate pe poziții identice ale celor două secvențe sunt de asemenea în ordine crescătoare: $a_1 < a_{n+1}, a_2 < a_{n+2}, ... , a_n < a_{2n}$.\n\nDe exemplu permutarea `(1,3,4,2,5,6)` este o permutare dublă de ordin `3`, de trei ori în creștere, pentru că secvențele `(1,3,4)` și `(2,5,6)` formează șiruri crescătoare, iar toate perechile formate din elementele de pe poziții identice: `(1,2), (3,5), (4,6)` formează de asemenea șiruri crescătoare.\n\nUrmătoarele permutări duble nu au proprietatea de trei ori în creștere:\n`(1,4,3,2,5,6)` – secvența `(1,4,3)` nu este crescătoare,\n`(1,3,4,2,6,5)` - secvența `(2,6,5)` nu este crescătoare,\n`(1,4,5,2,3,6)` – perechea `(4,3)` nu este crescătoare.\n\nPentru simplificare în continuare permutarea dublă de trei ori în creștere se va numi permutare.\n\nVom considera toate permutările de ordin n ordonate lexicografic, numerotate începând cu `1`. Tabelul de mai jos conține datele pentru n=3:\npoziție\tpermutare\n| poziție \t| permutare   \t|\n|---------\t|-------------\t|\n| 1       \t| 1 2 3 4 5 6 \t|\n| 2       \t| 1 2 4 3 5 6 \t|\n| 3       \t| 1 2 5 3 4 6 \t|\n| 4       \t| 1 3 4 2 5 6 \t|\n| 5       \t| 1 3 5 2 4 6 \t|\n\nExistă două tipuri de întrebări:\n1. Ce permutare se află pe o poziție dată? \n2. Pe ce poziție se află o permutare dată?\n\nPrima întrebare este codificată astfel: `1 n p` și se compune din valorile \n`1` – tipul întrebării, \n`n` – ordinul permutării, \n`p` – poziția permutării cerute.\n\nA doua întrebare este codificată astfel: $2 n a_1 a_2 ... a_{2n}$ și se compune din valorile \n`2` – tipul întrebării, \n`n` – ordinul permutării, \n$a_1 a_2 ... a_{2n}$ – elementele permutării.\n\n# Exemple\nÎntrebarea  `1 3 2` înseamnă:\n“Ce permutare de ordin `3` se află pe poziția `2` în ordine lexicografică?”  și are răspunsul: `1 2 4 3 5 6`.\nÎntrebarea  `2 3 1 3 5 2 4 6`  înseamnă:\n“Pe ce poziție se află permutarea de ordin `3`: `1 3 5 2 4 6`?” și are răspunsul: `5`.\n\n# Cerința\nSă se răspundă corect la un set de întrebări.\n\n# Date de intrare\nFișierul `permutare.in` conține pe fiecare linie câte o întrebare de orice tip.\n\n# Date de ieșire\nFișierul `permutare.out` va conține pe câte o linie câte un răspuns la fiecare întrebare din fișierul de intrare, în ordinea întrebărilor.\n\n# Restricții și precizări\n* `2 < n < 1 000`;\n* `0 < p ≤ 1 000 000 000` (în cazul întrebărilor de tip `1`);\n* răspunsul la întrebările de tip `2` este `≤  1 000 000 000`;\n* fișierele de intrare vor conține cel mult `2000` de întrebări;\n* pentru teste în valoare de `20` de puncte numărul de întrebări va fi `1000` iar numerele de ordine ce intervin în calcule vor fi mai mici decât `5000`;\n* pentru teste în valoare de `30` de puncte întrebările vor fi de tipul `1`;\n* pentru teste în valoare de `30` de puncte întrebările vor fi de tipul `2`;\n* pentru teste în valoare de `30` de puncte întrebările vor fi mixte.\n* problema va fi evaluată pe teste in valoare de `90` de puncte.\n* se vor acorda `10` puncte din oficiu.",
    "header": {
      "problem_id": 28,
      "problem_name": "permutare",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.4,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "permutare.in",
      "output_filename": "permutare.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 XI-XII: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "permutare.in",
      "output": "permutare.out"
    },
    "consoleInteraction": false
  }
}