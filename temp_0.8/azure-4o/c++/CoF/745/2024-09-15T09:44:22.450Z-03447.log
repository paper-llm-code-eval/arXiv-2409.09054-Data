---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lacusta.in` and write to `lacusta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o matrice dreptunghiulară cu $m$ linii şi $n$ coloane, cu valori naturale. Traversăm matricea pornind de la colţul stânga-sus la colţul dreapta-jos. O traversare constă din mai multe deplasări. La fiecare deplasare se execută un salt pe orizontală şi un pas pe verticală. Un salt înseamnă că putem trece de la o celulă la oricare alta aflată pe aceeaşi linie, iar un pas înseamnă că putem trece de la o celulă la celula aflată imediat sub ea. Excepţie face ultima deplasare (cea în care ne aflăm pe ultima linie), când vom face doar un salt pentru a ajunge în colţul dreapta-jos, dar nu vom mai face şi pasul corespunzător. Astfel traversarea va consta din vizitarea a $2 \cdot m$ celule. 

# Cerinţă

Scrieţi un program care să determine suma minimă care se poate obţine pentru o astfel de traversare.

# Date de intrare


Fişierul de intrare `lacusta.in` conţine pe prima linie două numere naturale separate printr-un spaţiu $m \ n$, reprezentând numărul de linii şi respectiv numărul de coloane ale matricei. Pe următoarele $m$ linii este descrisă matricea, câte $n$ numere pe fiecare linie, separate prin câte un spaţiu.

# Date de ieșire


Fişierul de ieşire `lacusta.out` va conţine o singură linie pe care va fi scrisă suma minimă găsită.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* Valorile elementelor matricei sunt numere întregi din intervalul $[1, 255]$

---

Example:
`lacusta.in`
```
4 5
3 4 5 7 9
6 6 3 4 4
6 3 3 9 6
6 5 3 8 2
```

`lacusta.out`
```
28
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to find a way to minimize the sum while traversing the matrix according to the given rules. 

The constraints allow us to use dynamic programming to keep track of the minimum sums as we traverse the matrix. Let's break down the steps required to implement the solution:

1. **Read the Input:** Instead of using standard input/output functions, we will read the input directly from the file `lacusta.in` and write the output to `lacusta.out`.

2. **Initialize the DP Table:** We'll use a 2D vector `dp` where `dp[i][j]` represents the minimum sum to reach cell `(i, j)` using the allowed moves.

3. **Fill the DP Table:** We'll iterate through each row and update the `dp` table. For each cell `(i, j)`, we'll consider every possible horizontal move from the previous row to the current cell. We'll keep track of the minimum sum for these moves.

4. **Find the Result:** The minimum value in the last row of the `dp` table will be our answer.

Here is the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream fin("lacusta.in");
    std::ofstream fout("lacusta.out");

    int m, n;
    fin >> m >> n;

    std::vector<std::vector<int>> matrix(m, std::vector<int>(n));
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            fin >> matrix[i][j];
        }
    }

    std::vector<std::vector<int>> dp(m, std::vector<int>(n, INT_MAX));

    // Initialize the first row of dp
    for (int j = 0; j < n; ++j) {
        dp[0][j] = matrix[0][j];
    }

    // Fill the dp table
    for (int i = 1; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int min_prev = INT_MAX;
            for (int k = 0; k < n; ++k) {
                if (k != j) { // we are allowed to jump to any cell in the previous row except the one in the same column
                    min_prev = std::min(min_prev, dp[i - 1][k]);
                }
            }
            dp[i][j] = min_prev + matrix[i][j];
        }
    }

    // Find the minimum value in the last row of dp
    int result = INT_MAX;
    for (int j = 0; j < n; ++j) {
        result = std::min(result, dp[m - 1][j]);
    }

    fout << result << std::endl;

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading the Input:**
   - We use `std::ifstream` to read from `lacusta.in`.
   - The matrix dimensions (`m` and `n`) and the matrix itself are read into a 2D vector `matrix`.

2. **DP Initialization:**
   - We initialize the `dp` vector where `dp[i][j]` represents the minimum sum to reach cell `(i, j)`.

3. **DP Table Filling:**
   - For each cell `(i, j)`, we compute the minimum sum to reach this cell by considering all possible jumps from the previous row.
   - We ignore jumps to the same column (as per problem constraints).

4. **Result Extraction:**
   - The answer is the minimum value in the last row of the `dp` table, which is written to `lacusta.out`.

This solution ensures that we efficiently compute the minimum sum as required by the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
4 5
3 4 5 7 9
6 6 3 4 4
6 3 3 9 6
6 5 3 8 2
```
Expected output:
```
28
```
Found output:
```
11
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
