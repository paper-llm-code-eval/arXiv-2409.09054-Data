---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's an efficient solution for the given problem in C++. The implementation reads the input from `pelican.in` and writes the output to `pelican.out`. The algorithm handles the duck movements and rotations as described, performing necessary boundary checks to ensure ducks wrap around the matrix correctly.

```cpp
#include <fstream>
#include <vector>

struct Duck {
    int x, y, d;
};

int main() {
    std::ifstream infile("pelican.in");
    std::ofstream outfile("pelican.out");

    int N, P, K;
    infile >> N >> P >> K;
    
    std::vector<Duck> ducks(P);
    for (int i = 0; i < P; ++i) {
        infile >> ducks[i].x >> ducks[i].y >> ducks[i].d;
    }

    std::vector<std::string> commands(K);
    for (int i = 0; i < K; ++i) {
        infile >> commands[i];
    }

    // Direction vectors for North, East, South, West
    int dx[5] = {0, -1, 0, 1, 0};
    int dy[5] = {0, 0, 1, 0, -1};

    for (const auto& command : commands) {
        char cmd;
        int nr;
        std::stringstream ss(command);
        ss >> cmd >> nr;

        for (auto& duck : ducks) {
            if (cmd == 'A') {
                int steps = nr;
                if (duck.d == 1 || duck.d == 3) {
                    duck.x = (duck.x + dx[duck.d] * steps + N) % N;
                } else {
                    duck.y = (duck.y + dy[duck.d] * steps + N) % N;
                }
            } else if (cmd == 'R') {
                duck.d = (duck.d + nr - 1) % 4 + 1;
            } else if (cmd == 'Z') {
                duck.x = nr / N;
                duck.y = nr % N;
            }
        }
    }

    for (const auto& duck : ducks) {
        outfile << duck.x << ' ' << duck.y << '\n';
    }

    return 0;
}
```

### Explanation

1. **Reading Input**:
    - The input is read from `pelican.in` using `ifstream`.
    - The first line contains the grid size `N`, the number of ducks `P`, and the number of commands `K`.
    - The next `P` lines provide the initial positions and orientations of the ducks.
    - The last `K` lines contain the commands for the ducks.

2. **Duck Structure**:
    - A `Duck` struct is used to store the position `(x, y)` and direction `d` of each duck.

3. **Direction Management**:
    - Arrays `dx` and `dy` are used to translate the direction codes into movements in the coordinate system.
    - Indices of `dx` and `dy` are aligned with direction codes: 1 (North), 2 (East), 3 (South), 4 (West).

4. **Processing Commands**:
    - Each command is read and processed.
    - For `A` (advance), the duck moves in its current direction, wrapping around the grid using modulo arithmetic.
    - For `R` (rotate), the duck's direction is updated by rotating it clockwise.
    - For `Z` (jump), the duck moves to a specific position while retaining its direction.

5. **Writing Output**:
    - The final positions of all ducks are written to `pelican.out` using `ofstream`.

This solution ensures efficient handling of the commands and correctly simulates the behavior of the ducks on the grid. It uses modulo arithmetic for boundary wrapping and processes each command in constant time.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:32:37: error: variable 'std::stringstream ss' has initializer but incomplete type
   32 |         std::stringstream ss(command);
      |                                     ^

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message indicates that there is an issue with the use of `std::stringstream`. To fix this, we need to include the `<sstream>` header, which provides the necessary definitions.

Here's the corrected version of the solution with the appropriate fix:

```cpp
#include <fstream>
#include <vector>
#include <sstream>  // Include the necessary header for std::stringstream

struct Duck {
    int x, y, d;
};

int main() {
    std::ifstream infile("pelican.in");
    std::ofstream outfile("pelican.out");

    int N, P, K;
    infile >> N >> P >> K;
    
    std::vector<Duck> ducks(P);
    for (int i = 0; i < P; ++i) {
        infile >> ducks[i].x >> ducks[i].y >> ducks[i].d;
    }

    std::vector<std::string> commands(K);
    infile.ignore();  // Ignore the newline character after the last number
    for (int i = 0; i < K; ++i) {
        std::getline(infile, commands[i]);
    }

    // Direction vectors for North, East, South, West
    int dx[5] = {0, -1, 0, 1, 0};
    int dy[5] = {0, 0, 1, 0, -1};

    for (const auto& command : commands) {
        char cmd;
        int nr;
        std::stringstream ss(command);
        ss >> cmd >> nr;

        for (auto& duck : ducks) {
            if (cmd == 'A') {
                int steps = nr;
                if (duck.d == 1 || duck.d == 3) {
                    duck.x = (duck.x + dx[duck.d] * steps + N) % N;
                } else {
                    duck.y = (duck.y + dy[duck.d] * steps + N) % N;
                }
            } else if (cmd == 'R') {
                duck.d = (duck.d + nr - 1) % 4 + 1;
            } else if (cmd == 'Z') {
                duck.x = nr / N;
                duck.y = nr % N;
            }
        }
    }

    for (const auto& duck : ducks) {
        outfile << duck.x << ' ' << duck.y << '\n';
    }

    return 0;
}
```

### Explanation of the Fix

1. **Include `<sstream>` Header**:
    - The error was due to the missing inclusion of the `<sstream>` header, which provides the definition for `std::stringstream`.

2. **Reading Commands**:
    - Added `infile.ignore();` to ignore the newline character after reading the integer inputs, ensuring the correct reading of command lines using `std::getline`.

3. **Command Parsing**:
    - Used `std::stringstream` to parse each command properly.

The corrected code now includes all necessary headers and should compile and run as intended, reading from `pelican.in` and writing to `pelican.out` with the specified logic.
