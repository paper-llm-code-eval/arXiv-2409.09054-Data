---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
using namespace std;

struct Duck {
    int x, y, direction;
};

const int dx[4] = {-1, 1, 0, 0}; // N, S, E, W
const int dy[4] = {0, 0, 1, -1};

int main() {
    ifstream fin("pelican.in");
    ofstream fout("pelican.out");

    int N, P, K;
    fin >> N >> P >> K;

    vector<Duck> ducks(P);
    for (int i = 0; i < P; ++i) {
        fin >> ducks[i].x >> ducks[i].y >> ducks[i].direction;
        ducks[i].direction -= 1; // convert to 0-based
    }

    for (int i = 0; i < K; ++i) {
        char command;
        int value;
        fin >> command >> value;

        if (command == 'A') {
            for (int j = 0; j < P; ++j) {
                ducks[j].x = (ducks[j].x + dx[ducks[j].direction] * value + N) % N;
                ducks[j].y = (ducks[j].y + dy[ducks[j].direction] * value + N) % N;
            }
        } else if (command == 'R') {
            for (int j = 0; j < P; ++j) {
                ducks[j].direction = (ducks[j].direction + value) % 4;
            }
        } else if (command == 'Z') {
            for (int j = 0; j < P; ++j) {
                ducks[j].x = value / N;
                ducks[j].y = value % N;
            }
        }
    }

    for (int i = 0; i < P; ++i) {
        fout << ducks[i].x << " " << ducks[i].y << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from the file `pelican.in` using ifstream. We first read the values of N (matrix size), P (number of ducks), and K (number of commands).

2. **Storing Ducks' Initial Positions**: We store the initial positions and directions of the ducks in a vector of structs.

3. **Processing Commands**: 
   - For `A nr` command, we update the position of each duck according to their direction and handle wrapping around the edges using modulo operation.
   - For `R nr` command, we update the direction of each duck by adding the given value and taking modulo 4.
   - For `Z nr` command, we place the duck at the specified position in a straightforward manner.

4. **Writing Output**: The final positions of the ducks are written to the file `pelican.out`.

### Optimizations:
- **Efficient Position Calculation**: By using modular arithmetic, we handle the wrapping around of matrix boundaries efficiently.
- **Direct File I/O**: Using ifstream and ofstream for fast input and output operations.

---------- user ----------


Program result did not match expected result.
Input data:
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```
Expected output:
```
2 4
4 4
2 3
```
Found output:
```
0 1
4 4
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Thank you for pointing out the discrepancy. The issue arises due to incorrect handling of the rotation and updating of positions. Specifically, the direction indices and their corresponding movements might not have been handled accurately, leading to incorrect position updates.

Let's carefully re-implement the solution, ensuring correct handling of directions and positions. Here is the revised implementation:

```cpp
#include <fstream>
#include <vector>
using namespace std;

// Directions: 0 -> North, 1 -> East, 2 -> South, 3 -> West
const int dx[4] = {-1, 0, 1, 0};
const int dy[4] = {0, 1, 0, -1};

struct Duck {
    int x, y, direction;
};

int main() {
    ifstream fin("pelican.in");
    ofstream fout("pelican.out");

    int N, P, K;
    fin >> N >> P >> K;

    vector<Duck> ducks(P);
    for (int i = 0; i < P; ++i) {
        fin >> ducks[i].x >> ducks[i].y >> ducks[i].direction;
        ducks[i].direction -= 1;  // Convert to 0-based direction index
    }

    for (int i = 0; i < K; ++i) {
        char command;
        int value;
        fin >> command >> value;

        if (command == 'A') {
            for (int j = 0; j < P; ++j) {
                ducks[j].x = (ducks[j].x + dx[ducks[j].direction] * value + N) % N;
                ducks[j].y = (ducks[j].y + dy[ducks[j].direction] * value + N) % N;
                // Ensure positive values after modulo operation
                if (ducks[j].x < 0) ducks[j].x += N;
                if (ducks[j].y < 0) ducks[j].y += N;
            }
        } else if (command == 'R') {
            for (int j = 0; j < P; ++j) {
                ducks[j].direction = (ducks[j].direction + value) % 4;
            }
        } else if (command == 'Z') {
            for (int j = 0; j < P; ++j) {
                ducks[j].x = value / N;
                ducks[j].y = value % N;
            }
        }
    }

    for (int i = 0; i < P; ++i) {
        fout << ducks[i].x << " " << ducks[i].y << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation of Fixes:
1. **Direction Mapping**:
   - The directions are mapped as 0 -> North, 1 -> East, 2 -> South, 3 -> West. This was adjusted to ensure correct movement in the matrix.

2. **Correct Handling of Positions**:
   - When a duck moves, we ensure the positions are always positive after applying the modulo operation.

3. **Rotation Handling**:
   - The direction is updated correctly using modulo 4 to ensure a valid direction index.

### Comprehensive Explanation of Differences:
1. **Direction Indices**:
   - In the initial code, the direction indices might not have been mapped correctly, leading to incorrect movement.

2. **Position Updates**:
   - The position updates did not correctly handle the wrapping around the matrix, leading to wrong final positions.

3. **Fixes**:
   - By correctly mapping the directions and ensuring positions remain positive, the implemented solution accurately simulates the commands given to the ducks.

This revised implementation should now correctly handle the movements and rotations as specified in the problem statement.
