{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/43/2024-09-15T15:53:49.292Z-06804.log",
  "attemptStart": 1726415629.292,
  "attemptEnd": 1726415687.986,
  "attemptDuration": 58.694000005722046,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\n// Custom hash function for pair<int, int>\nstruct pair_hash {\n    template <class T1, class T2>\n    size_t operator() (const pair<T1, T2>& p) const {\n        auto h1 = hash<T1>{}(p.first);\n        auto h2 = hash<T2>{}(p.second);\n        return h1 ^ h2; // or use boost::hash_combine\n    }\n};\n\n// Function to compute the greatest common divisor\nint gcd(int a, int b) {\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nint main() {\n    ifstream fin(\"cerc.in\");\n    ofstream fout(\"cerc.out\");\n    \n    int n;\n    fin >> n;\n    vector<tuple<int, int, int>> circles(n);\n    \n    for (int i = 0; i < n; ++i) {\n        int x, y, r;\n        fin >> x >> y >> r;\n        circles[i] = make_tuple(x, y, r);\n    }\n    \n    // Map to store lines and their associated circles\n    unordered_map<pair<int, int>, vector<tuple<int, int, int>>, pair_hash> lines;\n    \n    // Populate the lines map\n    for (const auto& circle : circles) {\n        int x = get<0>(circle);\n        int y = get<1>(circle);\n        \n        int g = gcd(abs(x), abs(y));\n        pair<int, int> slope = {x / g, y / g};\n        \n        // Normalize the slope to ensure consistency\n        if (slope.first < 0 || (slope.first == 0 && slope.second < 0)) {\n            slope.first = -slope.first;\n            slope.second = -slope.second;\n        }\n\n        lines[slope].push_back(circle);\n    }\n    \n    int m = lines.size();\n    int q = 0;\n    int p = 0;\n    \n    // Determine the maximum number of pairwise exterior circles\n    for (auto& line : lines) {\n        vector<tuple<int, int, int>>& circles_on_line = line.second;\n        \n        // Sort circles on the same line by their distance from the origin\n        sort(circles_on_line.begin(), circles_on_line.end(), [](const tuple<int, int, int>& a, const tuple<int, int, int>& b) {\n            int x1 = get<0>(a), y1 = get<1>(a);\n            int x2 = get<0>(b), y2 = get<1>(b);\n            return x1 * x1 + y1 * y1 < x2 * x2 + y2 * y2;\n        });\n        \n        int count = 1;\n        int prev_x = get<0>(circles_on_line[0]), prev_y = get<1>(circles_on_line[0]), prev_r = get<2>(circles_on_line[0]);\n        \n        for (int i = 1; i < circles_on_line.size(); ++i) {\n            int curr_x = get<0>(circles_on_line[i]);\n            int curr_y = get<1>(circles_on_line[i]);\n            int curr_r = get<2>(circles_on_line[i]);\n            // Check if the current circle is exterior to the previous one\n            if (hypot(curr_x - prev_x, curr_y - prev_y) >= prev_r + curr_r) {\n                ++count;\n                prev_x = curr_x;\n                prev_y = curr_y;\n                prev_r = curr_r;\n            }\n        }\n        \n        if (count > q) {\n            q = count;\n            p = 1;\n        } else if (count == q) {\n            ++p;\n        }\n    }\n    \n    // Output the results\n    fout << m << \" \" << q << \" \" << p << endl;\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 10951,
  "metadata": {
    "id": 43,
    "examples": [
      {
        "in": "12\n2 6 1\n3 9 1\n4 12 3\n4 4 2\n9 9 2\n10 10 6\n12 12 1\n6 3 1\n10 5 1\n14 7 2\n14 7 1\n12 4 2",
        "out": "4 3 2",
        "explainer": ""
      }
    ],
    "body": "Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \\in \\{1, 2, ..., n\\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  \n\n# Cerinţă\nSă se scrie un program care să se determine:\na) numărul $m$ de drepte distincte; \nb) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; \nc) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.\n\n# Date de intrare\nFişierul de intrare `cerc.in`  conţine:\n$n$\n$x_1\\ y_1\\ r_1$\n...\n$x_n\\ y_n\\ r_n$\t\n- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri\n- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc \n\n# Date de ieşire\nFişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. \n\n# Restricţii şi precizări\n* $1 ≤ n ≤ 2\\ 000$\n* $1 ≤ x_1, x_2, ..., x_n ≤ 1\\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$\n* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte\n* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune\n* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.",
    "header": {
      "problem_id": 43,
      "problem_name": "cerc",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "cerc.in",
      "output_filename": "cerc.out",
      "multiple_solutions": true,
      "original_source": "OJI 2009 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "cerc.in",
      "output": "cerc.out"
    },
    "consoleInteraction": false
  }
}