{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/43/2024-09-15T10:00:10.320Z-09866.log",
  "attemptStart": 1726394410.32,
  "attemptEnd": 1726394453.451,
  "attemptDuration": 43.13100004196167,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <map>\n#include <set>\n#include <algorithm>\n#include <numeric>\n#include <utility>\n\nusing namespace std;\n\n// Function to compute the greatest common divisor\nint gcd(int a, int b) {\n    return b == 0 ? abs(a) : gcd(b, a % b);\n}\n\nstruct Circle {\n    int x, y, r;\n};\n\n// Function to check if two given circles are exterior to each other\nbool are_exterior(const Circle& c1, const Circle& c2) {\n    int dist_sq = (c1.x - c2.x) * (c1.x - c2.x) + (c1.y - c2.y) * (c1.y - c2.y);\n    int radii_sum_sq = (c1.r + c2.r) * (c1.r + c2.r);\n    return dist_sq > radii_sum_sq;\n}\n\nint main() {\n    ifstream fin(\"cerc.in\");\n    ofstream fout(\"cerc.out\");\n\n    int n;\n    fin >> n;\n\n    vector<Circle> circles(n);\n    for (int i = 0; i < n; ++i) {\n        fin >> circles[i].x >> circles[i].y >> circles[i].r;\n    }\n\n    // Map to store lines represented by their reduced slope (dy/dx)\n    map<pair<int, int>, vector<int>> line_circles;\n\n    for (int i = 0; i < n; ++i) {\n        int x = circles[i].x;\n        int y = circles[i].y;\n\n        // Reduce the slope to its simplest form\n        int g = gcd(x, y);\n        int dx = x / g;\n        int dy = y / g;\n\n        if (dx < 0) {\n            dx = -dx;\n            dy = -dy;\n        } else if (dx == 0 && dy < 0) {\n            dy = -dy;\n        }\n\n        line_circles[{dx, dy}].push_back(i);\n    }\n\n    int m = line_circles.size();\n    int q = 0;\n    int p = 0;\n\n    for (const auto& entry : line_circles) {\n        const vector<int>& indices = entry.second;\n        int sz = indices.size();\n        int max_exterior = 0;\n\n        // Try all combinations of circles on the same line to find the maximum set of mutually exterior circles\n        for (int mask = 1; mask < (1 << sz); ++mask) {\n            vector<int> selected_circles;\n            for (int i = 0; i < sz; ++i) {\n                if (mask & (1 << i)) {\n                    selected_circles.push_back(indices[i]);\n                }\n            }\n\n            bool all_exterior = true;\n            for (int i = 0; i < selected_circles.size() && all_exterior; ++i) {\n                for (int j = i + 1; j < selected_circles.size(); ++j) {\n                    if (!are_exterior(circles[selected_circles[i]], circles[selected_circles[j]])) {\n                        all_exterior = false;\n                        break;\n                    }\n                }\n            }\n\n            if (all_exterior) {\n                max_exterior = max(max_exterior, (int)selected_circles.size());\n            }\n        }\n\n        if (max_exterior > q) {\n            q = max_exterior;\n            p = 1;\n        } else if (max_exterior == q) {\n            p++;\n        }\n    }\n\n    fout << m << \" \" << q << \" \" << p << endl;\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4307,
  "metadata": {
    "id": 43,
    "examples": [
      {
        "in": "12\n2 6 1\n3 9 1\n4 12 3\n4 4 2\n9 9 2\n10 10 6\n12 12 1\n6 3 1\n10 5 1\n14 7 2\n14 7 1\n12 4 2",
        "out": "4 3 2",
        "explainer": ""
      }
    ],
    "body": "Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \\in \\{1, 2, ..., n\\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  \n\n# Cerinţă\nSă se scrie un program care să se determine:\na) numărul $m$ de drepte distincte; \nb) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; \nc) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.\n\n# Date de intrare\nFişierul de intrare `cerc.in`  conţine:\n$n$\n$x_1\\ y_1\\ r_1$\n...\n$x_n\\ y_n\\ r_n$\t\n- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri\n- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc \n\n# Date de ieşire\nFişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. \n\n# Restricţii şi precizări\n* $1 ≤ n ≤ 2\\ 000$\n* $1 ≤ x_1, x_2, ..., x_n ≤ 1\\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$\n* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte\n* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune\n* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.",
    "header": {
      "problem_id": 43,
      "problem_name": "cerc",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "cerc.in",
      "output_filename": "cerc.out",
      "multiple_solutions": true,
      "original_source": "OJI 2009 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "cerc.in",
      "output": "cerc.out"
    },
    "consoleInteraction": false
  }
}