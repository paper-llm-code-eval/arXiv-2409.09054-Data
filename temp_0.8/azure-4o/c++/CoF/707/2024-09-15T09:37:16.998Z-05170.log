---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently in C++, we will implement the logic for generating the n-th term of the "look-and-say" sequence. The key idea is to iterate and build each term from the previous one by counting consecutive digits. We will use file input and output operations to handle the data as specified.

Here's the complete C++ code:

```cpp
#include <fstream>
#include <string>

std::string getNextTerm(const std::string &currentTerm) {
    std::string nextTerm;
    int length = currentTerm.size();
    
    for (int i = 0; i < length;) {
        char currentChar = currentTerm[i];
        int count = 0;
        
        while (i < length && currentTerm[i] == currentChar) {
            ++i;
            ++count;
        }
        
        nextTerm += std::to_string(count) + currentChar;
    }
    
    return nextTerm;
}

int main() {
    std::ifstream inputFile("sir.in");
    std::ofstream outputFile("sir.out");

    int n;
    inputFile >> n;
    
    std::string currentTerm = "1";
    
    for (int i = 1; i < n; ++i) {
        currentTerm = getNextTerm(currentTerm);
    }
    
    outputFile << currentTerm << std::endl;

    inputFile.close();
    outputFile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We read the input integer `n` from the file `sir.in`.

2. **Generating Terms**:
   - We start with the initial term "1".
   - For each iteration from 1 to `n-1`, we generate the next term using the `getNextTerm` function.
   - The `getNextTerm` function takes the current term, counts consecutive digits, and constructs the next term as a string.

3. **Writing Output**:
   - We write the n-th term to the output file `sir.out`.

### Efficiency:
- The algorithm is efficient given the constraints (4 ≤ n ≤ 35).
- It uses string operations to build each term, ensuring that the solution remains within acceptable performance limits. Each generation of term involves linear scans and concatenations, which are efficient for this sequence size.

This approach ensures that the n-th term is generated correctly, and the use of file I/O adheres to the problem requirements. The overall complexity is suitable for the given constraints, ensuring fast execution.
