---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we'll implement the logic to generate the n-th term of the sequence known as the "Look-and-say" sequence. We'll read the input value `n` from the file `sir.in`, generate the n-th term, and then write the result to `sir.out`.

Here's the implementation in C++:

```cpp
#include <fstream>
#include <string>

std::string generateNextTerm(const std::string &currentTerm) {
    std::string nextTerm;
    int length = currentTerm.size();
    for (int i = 0; i < length; i++) {
        int count = 1;
        while (i < length - 1 && currentTerm[i] == currentTerm[i + 1]) {
            i++;
            count++;
        }
        nextTerm += std::to_string(count) + currentTerm[i];
    }
    return nextTerm;
}

int main() {
    std::ifstream inputFile("sir.in");
    std::ofstream outputFile("sir.out");
    int n;

    inputFile >> n;

    std::string term = "1";
    for (int i = 1; i < n; ++i) {
        term = generateNextTerm(term);
    }

    outputFile << term;

    inputFile.close();
    outputFile.close();

    return 0;
}
```

### Explanation of the Code

1. **Include headers:**
    - We include `<fstream>` for file I/O operations and `<string>` for string manipulation.

2. **Function `generateNextTerm`:**
    - This function takes the current term of the sequence as input and generates the next term.
    - It iterates through the current term, counts consecutive identical digits, and constructs the next term by appending the count followed by the digit.

3. **Main function:**
    - We open the input file `sir.in` and read the integer `n`.
    - We initialize the first term of the sequence as `"1"`.
    - We loop `n-1` times, each time generating the next term using the `generateNextTerm` function.
    - After generating the n-th term, we write it to the output file `sir.out`.
    - We close the input and output files.

### Example

Given `sir.in`:
```
4
```

The `sir.out` will contain:
```
1211
```

This solution is efficient for the given constraints and ensures the correct n-th term of the sequence is computed and written to the output file.
