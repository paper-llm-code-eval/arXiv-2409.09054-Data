---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a structured plan to solve the challenge step by step:

1. **Read Input from File**:
    - Read the value of `MAX` from the first line of `text.in`.
    - Read the entire text into a string, preserving paragraph breaks.

2. **Process Each Paragraph**:
    - Split the text into paragraphs based on newlines.
    - For each paragraph, split it further into words.

3. **Format the Text**:
    - For each paragraph, construct lines of text such that each line does not exceed `MAX` characters.
    - Distribute spaces evenly between words for lines that are not the last line of the paragraph.
    - Ensure that any extra spaces are added to the leftmost gaps between words.

4. **Write Output to File**:
    - Write each formatted line into `text.out`.

Now let's implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>

void justifyText(const std::vector<std::string>& words, int maxLineLength, std::ofstream& outputFile) {
    int n = words.size();
    int i = 0;

    while (i < n) {
        int lineLength = words[i].size();
        int j = i + 1;
        
        while (j < n && lineLength + words[j].size() + (j - i) <= maxLineLength) {
            lineLength += words[j].size();
            j++;
        }

        int gaps = j - i - 1;
        int spaces = maxLineLength - lineLength;
        
        if (j == n || gaps == 0) { // Last line or only one word in line
            for (int k = i; k < j; k++) {
                if (k > i) outputFile << " ";
                outputFile << words[k];
            }
            for (int k = outputFile.tellp(); k < maxLineLength; k++) {
                outputFile << " ";
            }
        } else {
            int evenSpaces = spaces / gaps;
            int extraSpaces = spaces % gaps;
            
            for (int k = i; k < j; k++) {
                if (k > i) {
                    int spaceCount = evenSpaces + (extraSpaces-- > 0 ? 1 : 0);
                    for (int s = 0; s < spaceCount; s++) {
                        outputFile << " ";
                    }
                }
                outputFile << words[k];
            }
        }
        outputFile << "\n";
        i = j;
    }
}

void processText(const std::string& text, int maxLineLength, std::ofstream& outputFile) {
    std::istringstream textStream(text);
    std::string line;
    
    while (std::getline(textStream, line)) {
        std::istringstream lineStream(line);
        std::vector<std::string> words;
        std::string word;

        while (lineStream >> word) {
            words.push_back(word);
        }

        if (!words.empty()) {
            justifyText(words, maxLineLength, outputFile);
        } else {
            outputFile << "\n";
        }
    }
}

int main() {
    std::ifstream inputFile("text.in");
    std::ofstream outputFile("text.out");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        return 1;
    }

    int maxLineLength;
    inputFile >> maxLineLength;
    inputFile.ignore(); // ignore the newline

    std::string text;
    std::string line;
    
    while (std::getline(inputFile, line)) {
        text += line + "\n";
    }

    processText(text, maxLineLength, outputFile);

    inputFile.close();
    outputFile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: Reads `MAX` from the first line and the rest of the text, preserving the paragraph structure.
2. **Processing Each Paragraph**: Splits the text into paragraphs and then into words.
3. **Justifying Text**: Distributes spaces evenly across lines, ensuring the last line of each paragraph is left-aligned.
4. **Writing Output**: Writes the justified text to `text.out`.

This approach ensures efficient reading, processing, and writing, adhering to the constraints and requirements of the problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana are mere.       
Ion  are  multe pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Let's analyze the differences between the expected and found results, and identify the root cause of the discrepancy.

### Evaluation of Differences

**Expected Output:**
```
Ana are mere.
Ion  are  multe pere
galbene?
```

**Found Output:**
```
Ana are mere.       
Ion  are  multe pere
galbene?
```

**Differences Identified:**
1. The expected output has no trailing spaces on the first line `Ana are mere.` while the found output contains trailing spaces.
2. The other lines are correctly formatted.

### Root Cause Analysis

The root cause of the discrepancy is that the solution adds spaces to the end of the last line of paragraphs to ensure they reach the `MAX` length, even when the line is already complete. The last line of a paragraph should be left-aligned and not filled with extra spaces to reach `MAX` length.

### Steps to Fix

1. Ensure that for the last line of each paragraph, spaces should not be added to make it reach `MAX` length.
2. Only the intermediate lines should be fully justified with spaces distributed evenly.

### Rewritten Solution

Below is the corrected version of the solution:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>

void justifyLine(const std::vector<std::string>& words, int maxLineLength, std::ofstream& outputFile) {
    int n = words.size();
    int lineLength = 0;

    for (const auto& word : words) {
        lineLength += word.size();
    }

    int spacesToDistribute = maxLineLength - lineLength;
    int gaps = n - 1;

    if (gaps > 0) {
        int evenSpaces = spacesToDistribute / gaps;
        int extraSpaces = spacesToDistribute % gaps;

        for (int i = 0; i < gaps; i++) {
            outputFile << words[i];
            int spaceCount = evenSpaces + (i < extraSpaces ? 1 : 0);
            for (int s = 0; s < spaceCount; s++) {
                outputFile << " ";
            }
        }
        outputFile << words.back();
    } else {
        outputFile << words.front();
    }

    outputFile << "\n";
}

void processText(const std::string& text, int maxLineLength, std::ofstream& outputFile) {
    std::istringstream textStream(text);
    std::string line;

    while (std::getline(textStream, line)) {
        std::istringstream lineStream(line);
        std::vector<std::string> words;
        std::string word;

        while (lineStream >> word) {
            words.push_back(word);
        }

        if (!words.empty()) {
            int lineLength = 0;
            std::vector<std::string> currentLine;

            for (const auto& word : words) {
                if (lineLength + word.size() + (currentLine.empty() ? 0 : 1) <= maxLineLength) {
                    currentLine.push_back(word);
                    lineLength += word.size() + (currentLine.size() > 1 ? 1 : 0);
                } else {
                    justifyLine(currentLine, maxLineLength, outputFile);
                    currentLine = {word};
                    lineLength = word.size();
                }
            }

            // Write the last line left-aligned
            for (size_t i = 0; i < currentLine.size(); i++) {
                if (i > 0) outputFile << " ";
                outputFile << currentLine[i];
            }
            outputFile << "\n";
        } else {
            outputFile << "\n"; // Preserve empty lines
        }
    }
}

int main() {
    std::ifstream inputFile("text.in");
    std::ofstream outputFile("text.out");

    if (!inputFile.is_open() || !outputFile.is_open()) {
        return 1;
    }

    int maxLineLength;
    inputFile >> maxLineLength;
    inputFile.ignore(); // ignore the newline

    std::string text;
    std::string line;
    
    while (std::getline(inputFile, line)) {
        text += line + "\n";
    }

    processText(text, maxLineLength, outputFile);

    inputFile.close();
    outputFile.close();
    
    return 0;
}
```

### Explanation of Changes:

1. **justifyLine function**: This function is responsible for fully justifying intermediate lines by distributing spaces evenly.
2. **processText function**: This function processes the text paragraph by paragraph. It handles the last line of each paragraph separately, ensuring it is left-aligned.
3. For the last line of each paragraph, it outputs the words separated by a single space without adding trailing spaces to reach `MAX` length.

With these changes, the solution adheres to the requirements and handles the alignment properly.
