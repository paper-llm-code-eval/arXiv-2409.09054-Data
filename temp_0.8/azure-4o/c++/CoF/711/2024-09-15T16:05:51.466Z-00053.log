---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem, we need to perform several steps:

1. **Read the `MAX` value and the text content from the input file.**
2. **Split the text into paragraphs and then into words.**
3. **Distribute the words into lines such that each line's length is at most `MAX` characters.**
4. **Align each line to be both left and right justified, except the last line of each paragraph which should only be left justified.**
5. **Write the justified text into the output file.**

Here's the C++ code to achieve this in an efficient manner:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>

void justifyAndWriteLine(std::ofstream &outFile, std::vector<std::string> &words, int maxWidth) {
    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }
    
    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;
    
    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
    for (int i = 0; i < totalSpaces % gaps; ++i) {
        spaceDistribution[i]++;
    }
    
    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < spaceDistribution.size()) {
            outFile << std::string(spaceDistribution[i], ' ');
        }
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX
    
    std::string line, word;
    std::vector<std::string> words;
    
    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
            }
            outFile << '\n';
            continue;
        }
        
        std::istringstream iss(line);
        while (iss >> word) {
            if (!words.empty() && words.back().length() + word.length() + 1 > MAX) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
            }
            words.push_back(word);
        }
    }
    
    if (!words.empty()) {
        for (size_t i = 0; i < words.size() - 1; ++i) {
            outFile << words[i] << ' ';
        }
        outFile << words.back() << '\n';
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

### Explanation

1. **Reading the Input**: We use an `ifstream` to read from `text.in` and an `ofstream` to write to `text.out`. The first line of the input file is read to get the value of `MAX`.

2. **Processing Each Paragraph**:
   - We read each line and tokenize it into words.
   - If a line is empty, it indicates a paragraph break; we handle it accordingly.

3. **Justifying the Text**:
   - The `justifyAndWriteLine` function takes a vector of words and writes a justified line to the output file.
   - Spaces are distributed as evenly as possible between words, with extra spaces added to the leftmost gaps if the spaces don't distribute evenly.

4. **Handling the Last Line**:
   - The last line of each paragraph is treated differently. We simply join the words with a single space between them.

The above solution reads the input once and processes it line by line, ensuring efficient handling of both small and large texts. The additional space complexity is minimal, making it optimal for the given constraints.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'void processText(const string&, const string&)':
main.cpp:36:24: error: 'numeric_limits' is not a member of 'std'
   36 |     inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX
      |                        ^~~~~~~~~~~~~~
main.cpp:36:54: error: expected primary-expression before '>' token
   36 |     inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX
      |                                                      ^
main.cpp:36:57: error: '::max' has not been declared; did you mean 'std::max'?
   36 |     inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX
      |                                                         ^~~
      |                                                         std::max
In file included from /usr/local/include/c++/11.4.0/bits/char_traits.h:39,
                 from /usr/local/include/c++/11.4.0/ios:40,
                 from /usr/local/include/c++/11.4.0/ostream:38,
                 from /usr/local/include/c++/11.4.0/iostream:39,
                 from main.cpp:1:
/usr/local/include/c++/11.4.0/bits/stl_algobase.h:300:5: note: 'std::max' declared here
  300 |     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
      |     ^~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error messages indicate that the `<limits>` header is missing, which provides the `std::numeric_limits` class template. By including this header, we can resolve the compilation errors.

Here is the corrected version of the entire C++ source code:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits> // Include this header for std::numeric_limits

void justifyAndWriteLine(std::ofstream &outFile, std::vector<std::string> &words, int maxWidth) {
    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }
    
    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;
    
    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
    for (int i = 0; i < totalSpaces % gaps; ++i) {
        spaceDistribution[i]++;
    }
    
    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < spaceDistribution.size()) {
            outFile << std::string(spaceDistribution[i], ' ');
        }
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX
    
    std::string line, word;
    std::vector<std::string> words;
    
    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
            }
            outFile << '\n';
            continue;
        }
        
        std::istringstream iss(line);
        while (iss >> word) {
            if (!words.empty() && words.back().length() + word.length() + 1 > MAX) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
            }
            words.push_back(word);
        }
    }
    
    if (!words.empty()) {
        for (size_t i = 0; i < words.size() - 1; ++i) {
            outFile << words[i] << ' ';
        }
        outFile << words.back() << '\n';
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

In this corrected version:

1. **Include the `<limits>` Header**: This header is necessary to use `std::numeric_limits<std::streamsize>`.

2. **Code Logic and Structure**: The logic and the structure of the code remain unchanged. The `justifyAndWriteLine` function handles the justification, and the `processText` function reads input and processes it accordingly.

3. **File Handling**: We read from `"text.in"` and write to `"text.out"` as specified in the problem statement.

Compile and run this corrected code, and it should work properly without any compilation errors.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```
Vasile are multe bomboane bune.
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I see the issue with the original program: the logic for determining when to justify the text and when to move to a new line is incorrect.

The problem lies in how words are collected and written out. Specifically, the program should check if the current word can fit in the current line with existing words, and if it doesn't fit, the current line should be justified and written out before starting a new line.

Let's rewrite the solution to fix this issue by correctly implementing the text justification logic.

Here is the corrected and improved version of the entire C++ source code:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits> // Include this header for std::numeric_limits

void justifyAndWriteLine(std::ofstream &outFile, std::vector<std::string> &words, int maxWidth) {
    if (words.size() == 1) {
        outFile << words[0] << '\n';
        return;
    }

    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;

    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
    for (int i = 0; i < totalSpaces % gaps; ++i) {
        spaceDistribution[i]++;
    }

    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < spaceDistribution.size()) {
            outFile << std::string(spaceDistribution[i], ' ');
        }
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX

    std::string line, word;
    std::vector<std::string> words;
    int currentWidth = 0;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
                currentWidth = 0;
            }
            outFile << '\n';
            continue;
        }

        std::istringstream iss(line);
        while (iss >> word) {
            if (currentWidth + word.length() + (words.empty() ? 0 : 1) > MAX) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
                currentWidth = 0;
            }
            if (!words.empty()) {
                currentWidth += 1; // for the space between words
            }
            words.push_back(word);
            currentWidth += word.length();
        }
    }

    if (!words.empty()) {
        for (size_t i = 0; i < words.size() - 1; ++i) {
            outFile << words[i] << ' ';
        }
        outFile << words.back() << '\n';
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

### Explanation

1. **Reading the Input**: We use an `ifstream` to read from `text.in` and an `ofstream` to write to `text.out`. The first line of the input file is read to get the value of `MAX`.

2. **Processing Each Paragraph**:
   - We read each line and tokenize it into words.
   - If a line is empty, it indicates a paragraph break; we handle it accordingly.

3. **Justifying the Text**:
   - The `justifyAndWriteLine` function takes a vector of words and writes a justified line to the output file.
   - If there's only one word in the line, it's written without additional spaces.
   - Spaces are distributed as evenly as possible between words, with extra spaces added to the leftmost gaps if the spaces don't distribute evenly.

4. **Handling the Last Line**:
   - The last line of each paragraph is treated differently. We simply join the words with a single space between them.

This corrected solution now correctly handles the word wrapping and justification according to the specified rules.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous implementation is that it doesn't handle paragraph breaks correctly and also doesn't handle the last line of each paragraph correctly, ensuring it's left-aligned rather than fully justified. The provided test case highlights these problems.

Let's break down the issues:
1. **Paragraph breaks**: When encountering a blank line, it should be preserved.
2. **Last line of a paragraph**: Should be left-aligned, not fully justified.

To fix this, we need to:
1. Ensure the last line of each paragraph is left-aligned.
2. Preserve paragraph breaks.

Here is the updated solution:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits> // Include this header for std::numeric_limits

void justifyAndWriteLine(std::ofstream &outFile, std::vector<std::string> &words, int maxWidth) {
    if (words.size() == 1) {
        outFile << words[0] << '\n';
        return;
    }

    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;

    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
    for (int i = 0; i < totalSpaces % gaps; ++i) {
        spaceDistribution[i]++;
    }

    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < spaceDistribution.size()) {
            outFile << std::string(spaceDistribution[i], ' ');
        }
    }
    outFile << '\n';
}

void leftAlignAndWriteLine(std::ofstream &outFile, std::vector<std::string> &words) {
    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i != words.size() - 1) {
            outFile << ' ';
        }
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX

    std::string line, word;
    std::vector<std::string> words;
    int currentWidth = 0;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                leftAlignAndWriteLine(outFile, words);
                words.clear();
                currentWidth = 0;
            }
            outFile << '\n';
            continue;
        }

        std::istringstream iss(line);
        while (iss >> word) {
            if (currentWidth + word.length() + (words.empty() ? 0 : 1) > MAX) {
                justifyAndWriteLine(outFile, words, MAX);
                words.clear();
                currentWidth = 0;
            }
            if (!words.empty()) {
                currentWidth += 1; // for the space between words
            }
            words.push_back(word);
            currentWidth += word.length();
        }
    }

    if (!words.empty()) {
        leftAlignAndWriteLine(outFile, words);
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

### Explanation of Changes
1. **Separated Justification and Left Alignment**: I introduced a new function `leftAlignAndWriteLine` to handle the left alignment of the last line of a paragraph.
2. **Correct Handling of Paragraphs**: The function now correctly preserves paragraph breaks by writing an empty line when encountered.
3. **Justify Only When Necessary**: The `justifyAndWriteLine` function is only called when the line is not the last line of a paragraph. Otherwise, `leftAlignAndWriteLine` is used.

### Detailed Steps:
1. **Reading Input**: As before, read the `MAX` value from the first line.
2. **Processing Text**: For each line in the input:
   - If the line is empty, write out the current collected words left-aligned (if any), then write a blank line to maintain the paragraph break.
   - Otherwise, tokenize the line and manage word wrapping.
3. **Writing Output**: For each line, either justify it (if it's not the last line of a paragraph) or left-align it (if it is).

This solution should now correctly handle the test case as well as other similar inputs.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The difference between the expected and found result is due to the handling of words across lines. Specifically, the previous solution failed to properly handle the transition between lines when words from different sentences are involved in the same paragraph.

The key issue lies in determining when to justify a line and when to left-align it. The solution needs to ensure that only complete sentences are justified, while partial sentences that overflow to the next line are left-aligned.

Here is a refined approach to solve the problem:

1. **Read the input and process line by line while maintaining paragraph breaks.**
2. **While processing, keep track of the current line's words and their total length.**
3. **When the current line exceeds `MAX` characters with a new word, justify the current line if it contains multiple words, otherwise just write it left-aligned.**
4. **Ensure the last line of each paragraph is left-aligned.**

Let's rewrite the solution with these considerations:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits> // Include this header for std::numeric_limits

void justifyAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words, int maxWidth) {
    if (words.empty()) return;

    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;

    if (gaps > 0) {
        std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
        for (int i = 0; i < totalSpaces % gaps; ++i) {
            spaceDistribution[i]++;
        }

        for (size_t i = 0; i < words.size(); ++i) {
            outFile << words[i];
            if (i < spaceDistribution.size()) {
                outFile << std::string(spaceDistribution[i], ' ');
            }
        }
    } else {
        outFile << words[0];
    }
    outFile << '\n';
}

void leftAlignAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words) {
    for (size_t i = 0; i < words.size(); ++i) {
        if (i > 0) outFile << ' ';
        outFile << words[i];
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX

    std::string line, word;
    std::vector<std::string> words;
    int currentWidth = 0;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                leftAlignAndWriteLine(outFile, words);
                words.clear();
                currentWidth = 0;
            }
            outFile << '\n';
            continue;
        }

        std::istringstream iss(line);
        while (iss >> word) {
            if (currentWidth + word.length() + (words.empty() ? 0 : 1) > MAX) {
                if (!words.empty()) {
                    justifyAndWriteLine(outFile, words, MAX);
                    words.clear();
                    currentWidth = 0;
                }
            }
            if (!words.empty()) {
                currentWidth += 1; // for the space between words
            }
            words.push_back(word);
            currentWidth += word.length();
        }
    }

    if (!words.empty()) {
        leftAlignAndWriteLine(outFile, words);
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

### Explanation of Changes
1. **Separated Justification and Left Alignment**: The `justifyAndWriteLine` function now correctly handles the case when there is only one word, ensuring it is left-aligned.
2. **Correct Handling of Paragraphs**: The function preserves paragraph breaks by writing an empty line when encountered.
3. **Properly Handle Overflowing Words**: The function checks if the current word can fit in the current line with existing words. If not, it justifies the current line and starts a new one.

### Detailed Steps:
1. **Reading Input**: Read the `MAX` value from the first line.
2. **Processing Text**: For each line in the input:
   - If the line is empty, write out the current collected words left-aligned (if any), then write a blank line to maintain the paragraph break.
   - Otherwise, tokenize the line and manage word wrapping.
3. **Writing Output**: For each line, either justify it (if it's not the last line of a paragraph) or left-align it (if it is).

This solution should now correctly handle the test case as well as other similar inputs.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The found output shows that words are being incorrectly grouped across lines, causing justification issues. Specifically, words from different sentences are being combined into a single line, which results in incorrect spacing.

### Key Issues:
1. **Sentence Handling**: The solution incorrectly groups words from different sentences into a single line.
2. **Line Justification**: The solution applies incorrect spacing when justifying lines, especially when transitioning between lines.

### Correct Approach:
1. **Separate Words and Sentences**: Ensure that words from different sentences are not improperly grouped.
2. **Justification**: Ensure that lines are justified correctly, with additional spaces distributed as required.

Here is the revised solution with corrections:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <limits> // Include this header for std::numeric_limits

void justifyAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words, int maxWidth) {
    if (words.size() == 1) {
        outFile << words[0] << '\n';
        return;
    }

    int totalChars = 0;
    for (const auto &word : words) {
        totalChars += word.length();
    }

    int totalSpaces = maxWidth - totalChars;
    int gaps = words.size() - 1;

    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);
    for (int i = 0; i < totalSpaces % gaps; ++i) {
        spaceDistribution[i]++;
    }

    for (size_t i = 0; i < words.size(); ++i) {
        outFile << words[i];
        if (i < spaceDistribution.size()) {
            outFile << std::string(spaceDistribution[i], ' ');
        }
    }
    outFile << '\n';
}

void leftAlignAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words) {
    for (size_t i = 0; i < words.size(); ++i) {
        if (i > 0) outFile << ' ';
        outFile << words[i];
    }
    outFile << '\n';
}

void processText(const std::string &inputFileName, const std::string &outputFileName) {
    std::ifstream inFile(inputFileName);
    std::ofstream outFile(outputFileName);
    
    int MAX;
    inFile >> MAX;
    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\n'); // Skip to the next line after MAX

    std::string line, word;
    std::vector<std::string> words;
    int currentWidth = 0;

    while (std::getline(inFile, line)) {
        if (line.empty()) {
            if (!words.empty()) {
                leftAlignAndWriteLine(outFile, words);
                words.clear();
                currentWidth = 0;
            }
            outFile << '\n';
            continue;
        }

        std::istringstream iss(line);
        while (iss >> word) {
            if (currentWidth + word.length() + (words.empty() ? 0 : 1) > MAX) {
                if (!words.empty()) {
                    justifyAndWriteLine(outFile, words, MAX);
                    words.clear();
                    currentWidth = 0;
                }
            }
            if (!words.empty()) {
                currentWidth += 1; // for the space between words
            }
            words.push_back(word);
            currentWidth += word.length();
        }

        if (!words.empty()) {
            leftAlignAndWriteLine(outFile, words);
            words.clear();
            currentWidth = 0;
        }
    }
}

int main() {
    processText("text.in", "text.out");
    return 0;
}
```

### Explanation of Changes
1. **Only Left Align When Line is Complete**: Ensure words are left-aligned only when they complete a line and fit within the specified width.
2. **Preserve Sentence Boundaries**: Ensure words from different sentences are not improperly combined into a single line.

### Detailed Steps:
1. **Reading Input**: Read the `MAX` value from the first line.
2. **Processing Text**: For each line in the input:
   - If the line is empty, write out the current collected words left-aligned (if any), then write a blank line to maintain the paragraph break.
   - Otherwise, tokenize the line and manage word wrapping.
3. **Writing Output**: For each line, either justify it if it's not the last line of a paragraph or left-align it if it is.

This solution should now correctly handle the test case as well as other similar inputs by ensuring proper word grouping and spacing.
