---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure! Let's walk through an efficient solution for this text alignment problem in C++.

### Solution Outline
1. **Input Reading**: Read the input from the file `text.in`.
2. **Text Processing**:
   - Split the text into words.
   - Organize the words into lines of length `MAX`.
   - For each line, adjust the spaces to achieve left-right alignment.
3. **Output Writing**: Write the formatted lines to the file `text.out`.

### Detailed Steps:
1. **Read Input**:
   - Read the maximum line length `MAX`.
   - Read the rest of the file content as the text.

2. **Process the Text**:
   - Split the text into paragraphs based on empty lines.
   - For each paragraph, split it into words.
   - Construct lines of words such that the total length of words plus spaces doesn't exceed `MAX`.
   - For each line, except the last line in a paragraph, distribute spaces evenly:
     - Calculate the number of required spaces to fill the line to `MAX`.
     - Distribute the spaces between words, placing extra spaces at the beginning.

3. **Write Output**:
   - Write the formatted lines to `text.out`.

### Solution Code
Here is the efficient solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

void justifyText(ifstream &inputFile, ofstream &outputFile, int maxLen) {
    string line, word;
    vector<string> lines;
    vector<string> currentLine;
    int currentLineLength = 0;

    while (getline(inputFile, line)) {
        if (line.empty()) {
            // Process the collected words into lines
            if (!currentLine.empty()) {
                for (size_t i = 0; i < currentLine.size(); ++i) {
                    lines.push_back(currentLine[i]);
                }
                currentLine.clear();
                currentLineLength = 0;
            }
            lines.push_back("");
            continue;
        }

        istringstream iss(line);
        while (iss >> word) {
            if (currentLineLength + word.length() + (currentLine.empty() ? 0 : 1) > maxLen) {
                // Justify the current line
                int extraSpaces = maxLen - currentLineLength;
                size_t gaps = currentLine.size() - 1;
                if (gaps > 0) {
                    for (size_t i = 0; i < extraSpaces; ++i) {
                        currentLine[i % gaps] += " ";
                    }
                }
                lines.push_back("");
                for (const auto &w : currentLine) {
                    lines.back() += w + " ";
                }
                lines.back().pop_back();  // Remove trailing space
                currentLine.clear();
                currentLineLength = 0;
            }

            currentLine.push_back(word);
            currentLineLength += word.length() + (currentLine.size() == 1 ? 0 : 1);
        }
    }

    // Process the remaining collected words into lines
    if (!currentLine.empty()) {
        for (size_t i = 0; i < currentLine.size(); ++i) {
            lines.push_back(currentLine[i]);
        }
    }

    // Write the justified lines to the output file
    for (const auto &l : lines) {
        outputFile << l << '\n';
    }
}

int main() {
    ifstream inputFile("text.in");
    ofstream outputFile("text.out");

    int maxLen;
    inputFile >> maxLen;
    inputFile.ignore();  // Ignore the newline after reading maxLen

    justifyText(inputFile, outputFile, maxLen);

    return 0;
}
```

### Explanation
1. **Reading MAX**: The first line of the file is read to get the maximum line length `MAX`.
2. **Processing Input**:
   - The input is read line by line.
   - Words are collected until adding another word would exceed `MAX` length.
   - Justification is done by distributing extra spaces evenly.
3. **Handling Paragraphs**: Empty lines are preserved to maintain paragraph separation.
4. **Writing Output**: The processed lines are written to the output file.

This solution ensures efficient processing and formatting of the text.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```
Vasile   are   multe
bomboane
bune.
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
