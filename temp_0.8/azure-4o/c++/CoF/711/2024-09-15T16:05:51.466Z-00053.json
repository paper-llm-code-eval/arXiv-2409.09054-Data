{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/711/2024-09-15T16:05:51.466Z-00053.log",
  "attemptStart": 1726416351.466,
  "attemptEnd": 1726416447.933,
  "attemptDuration": 96.4670000076294,
  "code": "#include <iostream>\n#include <fstream>\n#include <sstream>\n#include <vector>\n#include <string>\n#include <limits> // Include this header for std::numeric_limits\n\nvoid justifyAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words, int maxWidth) {\n    if (words.size() == 1) {\n        outFile << words[0] << '\\n';\n        return;\n    }\n\n    int totalChars = 0;\n    for (const auto &word : words) {\n        totalChars += word.length();\n    }\n\n    int totalSpaces = maxWidth - totalChars;\n    int gaps = words.size() - 1;\n\n    std::vector<int> spaceDistribution(gaps, totalSpaces / gaps);\n    for (int i = 0; i < totalSpaces % gaps; ++i) {\n        spaceDistribution[i]++;\n    }\n\n    for (size_t i = 0; i < words.size(); ++i) {\n        outFile << words[i];\n        if (i < spaceDistribution.size()) {\n            outFile << std::string(spaceDistribution[i], ' ');\n        }\n    }\n    outFile << '\\n';\n}\n\nvoid leftAlignAndWriteLine(std::ofstream &outFile, const std::vector<std::string> &words) {\n    for (size_t i = 0; i < words.size(); ++i) {\n        if (i > 0) outFile << ' ';\n        outFile << words[i];\n    }\n    outFile << '\\n';\n}\n\nvoid processText(const std::string &inputFileName, const std::string &outputFileName) {\n    std::ifstream inFile(inputFileName);\n    std::ofstream outFile(outputFileName);\n    \n    int MAX;\n    inFile >> MAX;\n    inFile.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // Skip to the next line after MAX\n\n    std::string line, word;\n    std::vector<std::string> words;\n    int currentWidth = 0;\n\n    while (std::getline(inFile, line)) {\n        if (line.empty()) {\n            if (!words.empty()) {\n                leftAlignAndWriteLine(outFile, words);\n                words.clear();\n                currentWidth = 0;\n            }\n            outFile << '\\n';\n            continue;\n        }\n\n        std::istringstream iss(line);\n        while (iss >> word) {\n            if (currentWidth + word.length() + (words.empty() ? 0 : 1) > MAX) {\n                if (!words.empty()) {\n                    justifyAndWriteLine(outFile, words, MAX);\n                    words.clear();\n                    currentWidth = 0;\n                }\n            }\n            if (!words.empty()) {\n                currentWidth += 1; // for the space between words\n            }\n            words.push_back(word);\n            currentWidth += word.length();\n        }\n\n        if (!words.empty()) {\n            leftAlignAndWriteLine(outFile, words);\n            words.clear();\n            currentWidth = 0;\n        }\n    }\n}\n\nint main() {\n    processText(\"text.in\", \"text.out\");\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 7366,
  "metadata": {
    "id": 711,
    "examples": [
      {
        "in": "20\nVasile are multe bomboane bune.",
        "out": "Vasile   are   multe\nbomboane bune.",
        "explainer": ""
      },
      {
        "in": "20\nAna are mere.\nIon are multe pere galbene?",
        "out": "Ana are mere.\nIon  are  multe pere\ngalbene?",
        "explainer": ""
      }
    ],
    "body": "Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).\n\\\nFuncţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).\n\nÎn general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.\n\n# Cerinţă\nScrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.\n\n# Date de intrare\nFişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.\nPe următoarele linii este scris textul.\n\n# Date de ieşire\nFişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.\n\n# Restricţii și precizări\n- $2 \\leq MAX \\leq 1\\ 000$\n- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.\n- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.\n- Lungimea unui paragraf nu depăşeşte $1\\ 000$ de caractere.\n- Soluţia este unică.",
    "header": {
      "problem_id": 711,
      "problem_name": "text",
      "tags": "[Strings]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.05,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "text.in",
      "output_filename": "text.out",
      "multiple_solutions": false,
      "original_source": "OJI 2003 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "text.in",
      "output": "text.out"
    },
    "consoleInteraction": false
  }
}