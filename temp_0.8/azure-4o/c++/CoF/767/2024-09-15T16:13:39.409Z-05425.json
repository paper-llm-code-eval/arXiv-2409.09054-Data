{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/767/2024-09-15T16:13:39.409Z-05425.log",
  "attemptStart": 1726416819.409,
  "attemptEnd": 1726416837.4,
  "attemptDuration": 17.991000175476074,
  "code": "#include <fstream>\n#include <vector>\n#include <map>\n#include <utility>\n\nusing namespace std;\n\nint main() {\n    ifstream in(\"dreptc.in\");\n    ofstream out(\"dreptc.out\");\n\n    int N, MaxC;\n    in >> N >> MaxC;\n\n    vector<vector<pair<int, int>>> points_by_color(MaxC + 1);\n\n    for (int i = 0; i < N; ++i) {\n        int x, y, color;\n        in >> x >> y >> color;\n        points_by_color[color].emplace_back(x, y);\n    }\n\n    int max_rectangles = 0;\n\n    for (int color = 1; color <= MaxC; ++color) {\n        auto& points = points_by_color[color];\n        map<int, vector<int>> x_to_ys;\n\n        for (const auto& p : points) {\n            x_to_ys[p.first].push_back(p.second);\n        }\n\n        for (auto it1 = x_to_ys.begin(); it1 != x_to_ys.end(); ++it1) {\n            for (auto it2 = next(it1); it2 != x_to_ys.end(); ++it2) {\n                auto& ys1 = it1->second;\n                auto& ys2 = it2->second;\n\n                map<int, bool> y_exists;\n\n                for (int y : ys1) {\n                    y_exists[y] = true;\n                }\n\n                int y_pairs = 0;\n                for (int y : ys2) {\n                    if (y_exists[y]) {\n                        ++y_pairs;\n                    }\n                }\n\n                max_rectangles += y_pairs * (y_pairs - 1) / 2;\n            }\n        }\n    }\n\n    out << max_rectangles << \"\\n\";\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1458,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}