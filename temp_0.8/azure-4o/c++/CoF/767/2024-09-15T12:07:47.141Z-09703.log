---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>

using namespace std;

int main() {
    ifstream inFile("dreptc.in");
    ofstream outFile("dreptc.out");

    int N, MaxC;
    inFile >> N >> MaxC;

    // Map color to a map of y-coordinates to a vector of x-coordinates
    unordered_map<int, unordered_map<int, vector<int>>> points;
    for (int i = 0; i < N; ++i) {
        int x, y, c;
        inFile >> x >> y >> c;
        points[c][y].push_back(x);
    }

    int maxRectangles = 0;

    // Iterate over each color
    for (int color = 1; color <= MaxC; ++color) {
        auto& y_map = points[color];

        // Iterate over every pair of y coordinates
        for (auto it1 = y_map.begin(); it1 != y_map.end(); ++it1) {
            for (auto it2 = next(it1); it2 != y_map.end(); ++it2) {
                auto& x_vec1 = it1->second;
                auto& x_vec2 = it2->second;

                // Use a set to find common x coordinates
                unordered_map<int, int> x_count;
                for (int x : x_vec1) {
                    x_count[x]++;
                }
                for (int x : x_vec2) {
                    x_count[x]++;
                }

                // Count pairs of common x coordinates
                int common_x_pairs = 0;
                for (auto& pair : x_count) {
                    if (pair.second == 2) {
                        common_x_pairs++;
                    }
                }

                // Calculate the number of rectangles (combinations of 2 x-coordinates from common_x_pairs)
                maxRectangles += (common_x_pairs * (common_x_pairs - 1)) / 2;
            }
        }
    }

    outFile << maxRectangles << endl;

    inFile.close();
    outFile.close();

    return 0;
}
```
