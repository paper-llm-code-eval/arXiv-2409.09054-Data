---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to identify all the possible rectangles that meet the specified criteria. The key here is to leverage the constraints and use appropriate data structures to minimize the computational overhead.

### Approach:

1. **Read the input data**: Parse the input file to extract the points and their colors.
2. **Organize points by color**: Since a valid rectangle must have all vertices of the same color, group points by their color.
3. **Check for rectangles**: For each color group, determine the number of valid rectangles that can be formed. This involves:
   - Using a map to group points by their x-coordinates.
   - For each pair of x-coordinates, identify all pairs of y-coordinates that form valid rectangles.

### Pseudocode:
1. Read `N` and `MaxC`.
2. Read the points and their colors.
3. For each color:
   - Group points by their x-coordinates.
   - For each pair of x-coordinates, identify all y-pairs and count valid rectangles.

### Implementation:

```cpp
#include <fstream>
#include <vector>
#include <map>
#include <utility>

using namespace std;

int main() {
    ifstream in("dreptc.in");
    ofstream out("dreptc.out");

    int N, MaxC;
    in >> N >> MaxC;

    vector<vector<pair<int, int>>> points_by_color(MaxC + 1);

    for (int i = 0; i < N; ++i) {
        int x, y, color;
        in >> x >> y >> color;
        points_by_color[color].emplace_back(x, y);
    }

    int max_rectangles = 0;

    for (int color = 1; color <= MaxC; ++color) {
        auto& points = points_by_color[color];
        map<int, vector<int>> x_to_ys;

        for (const auto& p : points) {
            x_to_ys[p.first].push_back(p.second);
        }

        for (auto it1 = x_to_ys.begin(); it1 != x_to_ys.end(); ++it1) {
            for (auto it2 = next(it1); it2 != x_to_ys.end(); ++it2) {
                auto& ys1 = it1->second;
                auto& ys2 = it2->second;

                map<int, bool> y_exists;

                for (int y : ys1) {
                    y_exists[y] = true;
                }

                int y_pairs = 0;
                for (int y : ys2) {
                    if (y_exists[y]) {
                        ++y_pairs;
                    }
                }

                max_rectangles += y_pairs * (y_pairs - 1) / 2;
            }
        }
    }

    out << max_rectangles << "\n";

    return 0;
}
```

### Explanation:
1. **Reading Input**: The input is read from `dreptc.in` using `ifstream` and written to `dreptc.out` using `ofstream`.
2. **Grouping Points by Color**: We use a vector of vectors to store points grouped by their color.
3. **Counting Rectangles**:
   - For each color, points are grouped by their x-coordinates using a map.
   - For every pair of different x-coordinates, we check for common y-coordinates (forming potential rectangles).
   - The number of valid rectangles is computed using combinations of y-coordinates.

### Complexity:
- **Time Complexity**: O(N^2), due to the nested loops for every color and pair of x-coordinates.
- **Space Complexity**: O(N), for storing points and intermediate mappings.

This approach ensures that the solution is efficient and handles up to the maximum constraints effectively.
