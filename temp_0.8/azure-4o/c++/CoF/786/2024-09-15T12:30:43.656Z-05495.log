---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

// Function to calculate the prime factorization of factorials up to max_n
void calculate_factorial_prime_factors(int max_n, std::vector<std::vector<int>>& prime_powers) {
    std::vector<int> primes;
    std::vector<bool> is_prime(max_n + 1, true);

    // Sieve of Eratosthenes to find all primes up to max_n
    for (int i = 2; i <= max_n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * 2; j <= max_n; j += i) {
                is_prime[j] = false;
            }
        }
    }

    // Calculate prime powers for factorials of all numbers up to max_n
    prime_powers.assign(max_n + 1, std::vector<int>(primes.size(), 0));
    for (int i = 2; i <= max_n; ++i) {
        for (size_t j = 0; j < primes.size(); ++j) {
            int p = primes[j];
            prime_powers[i][j] = prime_powers[i - 1][j];
            int x = i;
            while (x % p == 0) {
                prime_powers[i][j]++;
                x /= p;
            }
        }
    }
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");
    std::vector<int> numbers;
    int n;

    while (infile >> n && n != 0) {
        numbers.push_back(n);
    }

    if (numbers.empty()) {
        return 0;
    }

    int max_n = *max_element(numbers.begin(), numbers.end());
    std::vector<std::vector<int>> prime_powers;
    calculate_factorial_prime_factors(max_n, prime_powers);

    for (int number : numbers) {
        bool first = true;
        for (int power : prime_powers[number]) {
            if (power > 0) {
                if (!first) {
                    outfile << " ";
                }
                outfile << power;
                first = false;
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

Explanation:
1. **Input/Output:** We use `ifstream` and `ofstream` for reading from `factori.in` and writing to `factori.out`, respectively.
2. **Prime Calculation:** We use the Sieve of Eratosthenes to find all prime numbers up to the maximum number in the input. This ensures we have all necessary primes for factorization.
3. **Prime Power Calculation:** We calculate the power of each prime in the factorial of each number up to the maximum number in the input using a nested loop structure.
4. **Output:** For each number from the input, we write the prime powers to the output file in the required format.

This code ensures efficient calculation and handles large inputs by precomputing all necessary values.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:50:18: error: 'max_element' was not declared in this scope
   50 |     int max_n = *max_element(numbers.begin(), numbers.end());
      |                  ^~~~~~~~~~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error is caused by the fact that the `max_element` function is not declared in the current scope. The `max_element` function is part of the `<algorithm>` header, so we need to include this header file.

Here is the corrected version of the code with the necessary include for `<algorithm>`:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <algorithm> // Include for max_element

// Function to calculate the prime factorization of factorials up to max_n
void calculate_factorial_prime_factors(int max_n, std::vector<std::vector<int>>& prime_powers) {
    std::vector<int> primes;
    std::vector<bool> is_prime(max_n + 1, true);

    // Sieve of Eratosthenes to find all primes up to max_n
    for (int i = 2; i <= max_n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * 2; j <= max_n; j += i) {
                is_prime[j] = false;
            }
        }
    }

    // Calculate prime powers for factorials of all numbers up to max_n
    prime_powers.assign(max_n + 1, std::vector<int>(primes.size(), 0));
    for (int i = 2; i <= max_n; ++i) {
        for (size_t j = 0; j < primes.size(); ++j) {
            int p = primes[j];
            prime_powers[i][j] = prime_powers[i - 1][j];
            int x = i;
            while (x % p == 0) {
                prime_powers[i][j]++;
                x /= p;
            }
        }
    }
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");
    std::vector<int> numbers;
    int n;

    while (infile >> n && n != 0) {
        numbers.push_back(n);
    }

    if (numbers.empty()) {
        return 0;
    }

    int max_n = *std::max_element(numbers.begin(), numbers.end());
    std::vector<std::vector<int>> prime_powers;
    calculate_factorial_prime_factors(max_n, prime_powers);

    for (int number : numbers) {
        bool first = true;
        for (int power : prime_powers[number]) {
            if (power > 0) {
                if (!first) {
                    outfile << " ";
                }
                outfile << power;
                first = false;
            }
        }
        outfile << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Include `<algorithm>`:** Added this include to be able to use `std::max_element`.
2. **Namespace Prefix:** Added `std::` prefix to `max_element` to ensure it is correctly resolved from the standard library.

This should fix the compilation error and provide the desired output.
