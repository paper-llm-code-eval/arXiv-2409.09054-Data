---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:### Steps to Solve the Problem

1. **Read Input:**
   - We need to read numbers from the file `factori.in`.
   - Continue reading until a `0` is encountered.

2. **Prime Factorization of Factorials:**
   - For each number `n`, compute the prime factorization of `n!`.
   - This involves identifying all prime numbers up to `n` and determining the exponent of each prime in the factorization of `n!`.

3. **Efficient Prime Calculation:**
   - Use the Sieve of Eratosthenes to generate all prime numbers up to the maximum possible value (60,000).

4. **Counting Prime Factors in Factorials:**
   - For each prime number, count how many times it appears in the factorial of `n` by summing up integer divisions by prime powers.

5. **Output Result:**
   - Write the results to the file `factori.out` in the specified format.

### Implementation

Here is a C++ implementation of the described algorithm:

```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <sstream>

// Function to use Sieve of Eratosthenes to find all primes up to max_n
std::vector<int> sieve(int max_n) {
    std::vector<bool> is_prime(max_n + 1, true);
    std::vector<int> primes;
    is_prime[0] = is_prime[1] = false;

    for (int i = 2; i <= max_n; ++i) {
        if (is_prime[i]) {
            primes.push_back(i);
            for (int j = i * 2; j <= max_n; j += i) {
                is_prime[j] = false;
            }
        }
    }
    return primes;
}

// Function to count the exponent of prime `p` in n!
int count_prime_in_factorial(int n, int p) {
    int count = 0;
    for (int power = p; power <= n; power *= p) {
        count += n / power;
    }
    return count;
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");

    std::string line;
    std::vector<int> numbers;

    while (std::getline(infile, line)) {
        int num = std::stoi(line);
        if (num == 0) break;
        numbers.push_back(num);
    }

    int max_n = 60000;
    std::vector<int> primes = sieve(max_n);

    for (int n : numbers) {
        std::stringstream result;

        bool first = true;
        for (int prime : primes) {
            if (prime > n) break;
            int count = count_prime_in_factorial(n, prime);
            if (count > 0) {
                if (!first) result << " ";
                first = false;
                result << count;
            }
        }
        outfile << result.str() << std::endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation
1. **Sieve of Eratosthenes:** This function generates all prime numbers up to 60,000 efficiently.
2. **Count Prime Exponents:** For each prime, the function counts how many times it appears in the factorial of `n`.
3. **Reading and Writing Files:** We read input from `factori.in`, process numbers until we find a `0`, and write the results to `factori.out`.

### Testing
This implementation should be tested with various inputs to ensure correctness and performance within the constraints. You can use the provided example as a test case:

Input (`factori.in`):
```
2
8
15
10
0
```

Expected Output (`factori.out`):
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```
