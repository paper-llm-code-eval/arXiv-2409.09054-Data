---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the solution into steps before implementing it in C++. 

**Steps to solve the problem**

1. **Read the Input File**: Since we can't use `cin` or `scanf`, we'll use file I/O operations to read the input data from `factori.in`.
2. **Prime Number Calculation**: First, we need a way to identify all prime numbers up to the maximum possible value (60,000). We can use the Sieve of Eratosthenes for this purpose because it is efficient for finding all primes up to a given limit.
3. **Prime Factorization of Factorials**: For each number, we need to compute the prime factorization of its factorial. This involves determining how many times each prime number appears in the prime factorization of all numbers from 1 to n.
4. **Output the Results**: Write the results to `factori.out` in the specified format.

Here's the C++ implementation of the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

// Function to generate primes using Sieve of Eratosthenes
std::vector<int> generatePrimes(int max) {
    std::vector<bool> is_prime(max + 1, true);
    is_prime[0] = is_prime[1] = false;
    for (int p = 2; p * p <= max; ++p) {
        if (is_prime[p]) {
            for (int i = p * p; i <= max; i += p) {
                is_prime[i] = false;
            }
        }
    }
    std::vector<int> primes;
    for (int p = 2; p <= max; ++p) {
        if (is_prime[p]) {
            primes.push_back(p);
        }
    }
    return primes;
}

// Function to calculate the power of a prime in n!
int primePowerInFactorial(int n, int prime) {
    int power = 0;
    while (n > 0) {
        n /= prime;
        power += n;
    }
    return power;
}

int main() {
    std::ifstream infile("factori.in");
    std::ofstream outfile("factori.out");

    std::vector<int> numbers;
    int num;
    while (infile >> num && num != 0) {
        numbers.push_back(num);
    }

    // Generate primes up to 60000
    int max_n = 60000;
    std::vector<int> primes = generatePrimes(max_n);

    // Process each number
    for (int n : numbers) {
        std::vector<int> powers;
        for (int prime : primes) {
            if (prime > n) break;
            int power = primePowerInFactorial(n, prime);
            if (power > 0) {
                powers.push_back(power);
            }
        }

        // Write the output for current number
        for (size_t i = 0; i < powers.size(); ++i) {
            if (i > 0) outfile << " ";
            outfile << powers[i];
        }
        outfile << std::endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

**Explanation of the Code:**

1. **Prime Number Calculation**: The function `generatePrimes` uses the Sieve of Eratosthenes to generate all prime numbers up to 60,000.
2. **Prime Factor Power Calculation**: The function `primePowerInFactorial` calculates the power of a prime number in the factorial of `n` using the formula for the highest power of a prime dividing `n!`.
3. **Main Workflow**:
    - Read all numbers from `factori.in` and store them in a vector.
    - For each number, compute the prime factorization of its factorial.
    - Write the results to `factori.out` in the required format.

This implementation is designed to be efficient and straightforward, adhering to the constraints and requirements of the problem.
