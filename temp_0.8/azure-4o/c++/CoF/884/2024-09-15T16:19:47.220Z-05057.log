---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `joc.in` and write to `joc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Inspiraţi de clasicul joc Tic-Tac-Toe (`X` şi `0`), Teodora şi Ştefan îşi propun să joace ceva asemănător, adăugând jocului clasic câteva reguli noi:

~[joc.png|align=right|width=13em]

- tabla de joc este un pătrat de latură $N$, care este împărţit în $N \cdot N$ celule, aşezate pe $N$ linii şi $N$ coloane; celulele pătratului sunt numerotate de la $1$ la $N^2$ parcurgând liniile de sus în jos, și coloanele de la stânga la dreapta;
- Teodora va marca celulele cu `X` (litera `X`), iar Ştefan cu `0` (cifra `0`);
- în cadrul unei runde, copiii marchează alternativ câte o celulă din pătrat, nemarcată anterior;
- o rundă a jocului este descrisă printr-un șir format din exact $N^2$ numere naturale reprezentând celulele pătratului, în ordinea în care au fost marcate succesiv de cei doi copii;
- jocul are $K$ runde; prima este începută de Teodora, a doua de Ştefan, a treia Teodora, a patra Ştefan şi aşa mai departe;
- o rundă este câştigată de jucătorul care reuşeşte primul să marcheze complet o linie, o coloană, diagonala principală sau una din cele două semidiagonale paralele şi **alăturate** cu aceasta (figura $1$), diagonala secundară sau una din cele două semidiagonale paralele şi **alăturate** acesteia (figura $2$);
- o rundă se încheie fără un câştigător dacă după marcarea celor $N^2$ celule nu există pe tabla de joc nicio linie, coloană, diagonală sau semidiagonală marcate cu acelaşi simbol.

# Cerință

Cunoscând numerele $N, K$ şi cele $K$ şiruri de numere care reprezintă rundele jucate, scrieţi un program care să rezolve una dintre următoarele două cerinţe:
1. Să se determine câte runde a câştigat fiecare copil.
2. Să se determine care este cel mai mare număr de marcări efectuate până la câştigarea unei runde.

# Date de intrare

Fişierul de intrare `joc.in` conţine pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe a doua linie se află două numere naturale $N$ şi $K$, separate prin câte un spaţiu, reprezentând dimensiunea tablei de joc şi respectiv numărul de runde jucate. Pe următoarele $K$ linii sunt descrise rundele de joc, câte o rundă pe câte o linie a fișierului. În cadrul liniilor, numerele sunt separate prin câte un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie două numere naturale $t$ şi $s$, separate printr-un spaţiu, unde $t$ reprezintă numărul de runde câştigate de Teodora, iar $s$ numărul rundelor câştigate de Ştefan.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie numărul cel mai mare de marcări efectuate până la câştigarea unei runde.

# Restricții și precizări

* $3 \leq N \leq 100$;
* $1 \leq K \leq 25$;
* La fiecare joc se câştigă cel puţin o rundă.
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`joc.in`
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```

`joc.out`
```
2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <array>

const std::array<int, 4> delta{-1, 0, 1, 0};  // Direction vectors for 4-way connectivity

// Function to check if a player has won
bool check_win(const std::vector<std::vector<char>> &board, char player, int N) {
    for (int i = 0; i < N; ++i) {
        // Check rows and columns
        if (std::all_of(board[i].begin(), board[i].end(), [player](char c) { return c == player; }) ||
            std::all_of(board.begin(), board.end(), [i, player](const std::vector<char> &row) { return row[i] == player; })) {
            return true;
        }
    }

    // Check main diagonal and the two close diagonals parallel to it
    bool main_diag = true, diag1 = true, diag2 = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][i] != player) main_diag = false;
        if (i > 0 && board[i][i - 1] != player) diag1 = false;
        if (i < N - 1 && board[i][i + 1] != player) diag2 = false;
    }
    if (main_diag || diag1 || diag2) return true;

    // Check secondary diagonal and the two close diagonals parallel to it
    bool sec_diag = true, diag3 = true, diag4 = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][N - i - 1] != player) sec_diag = false;
        if (i > 0 && board[i][N - i] != player) diag3 = false;
        if (i < N - 1 && board[i][N - i - 2] != player) diag4 = false;
    }
    return sec_diag || diag3 || diag4;
}

int main() {
    std::ifstream fin("joc.in");
    std::ofstream fout("joc.out");
    
    int C, N, K;
    fin >> C >> N >> K;
    
    std::vector<std::vector<int>> rounds(K, std::vector<int>(N * N));
    for (int i = 0; i < K; ++i) {
        for (int j = 0; j < N * N; ++j) {
            fin >> rounds[i][j];
        }
    }

    if (C == 1) {
        int t_wins = 0, s_wins = 0;
        for (int r = 0; r < K; ++r) {
            std::vector<std::vector<char>> board(N, std::vector<char>(N, ' '));
            for (int i = 0; i < N * N; ++i) {
                int pos = rounds[r][i] - 1;
                int row = pos / N, col = pos % N;
                board[row][col] = (r % 2 == 0) ? (i % 2 == 0 ? 'X' : '0') : (i % 2 == 0 ? '0' : 'X');
                if (check_win(board, board[row][col], N)) {
                    if (board[row][col] == 'X') ++t_wins;
                    else ++s_wins;
                    break;
                }
            }
        }
        fout << t_wins << " " << s_wins << "\n";
    } else if (C == 2) {
        int max_moves = 0;
        for (int r = 0; r < K; ++r) {
            std::vector<std::vector<char>> board(N, std::vector<char>(N, ' '));
            for (int i = 0; i < N * N; ++i) {
                int pos = rounds[r][i] - 1;
                int row = pos / N, col = pos % N;
                board[row][col] = (r % 2 == 0) ? (i % 2 == 0 ? 'X' : '0') : (i % 2 == 0 ? '0' : 'X');
                if (check_win(board, board[row][col], N)) {
                    if (i + 1 > max_moves) max_moves = i + 1;
                    break;
                }
            }
        }
        fout << max_moves << "\n";
    }
    
    return 0;
}
```
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'bool check_win(const std::vector<std::vector<char> >&, char, int)':
main.cpp:12:18: error: 'all_of' is not a member of 'std'
   12 |         if (std::all_of(board[i].begin(), board[i].end(), [player](char c) { return c == player; }) ||
      |                  ^~~~~~
main.cpp:13:18: error: 'all_of' is not a member of 'std'
   13 |             std::all_of(board.begin(), board.end(), [i, player](const std::vector<char> &row) { return row[i] == player; })) {
      |                  ^~~~~~

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error occurs because `std::all_of` is not recognized, likely due to a missing include for the `<algorithm>` header where `std::all_of` is defined. Let's fix this by including the necessary header and ensure the code is clean and optimized.

Here is the corrected and complete C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

// Function to check if a player has won
bool check_win(const std::vector<std::vector<char>> &board, char player, int N) {
    for (int i = 0; i < N; ++i) {
        // Check rows and columns
        if (std::all_of(board[i].begin(), board[i].end(), [player](char c) { return c == player; }) ||
            std::all_of(board.begin(), board.end(), [i, player](const std::vector<char> &row) { return row[i] == player; })) {
            return true;
        }
    }

    // Check main diagonal and the two close diagonals parallel to it
    bool main_diag = true, diag1 = true, diag2 = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][i] != player) main_diag = false;
        if (i > 0 && board[i][i - 1] != player) diag1 = false;
        if (i < N - 1 && board[i][i + 1] != player) diag2 = false;
    }
    if (main_diag || diag1 || diag2) return true;

    // Check secondary diagonal and the two close diagonals parallel to it
    bool sec_diag = true, diag3 = true, diag4 = true;
    for (int i = 0; i < N; ++i) {
        if (board[i][N - i - 1] != player) sec_diag = false;
        if (i > 0 && board[i][N - i] != player) diag3 = false;
        if (i < N - 1 && board[i][N - i - 2] != player) diag4 = false;
    }
    return sec_diag || diag3 || diag4;
}

int main() {
    std::ifstream fin("joc.in");
    std::ofstream fout("joc.out");
    
    int C, N, K;
    fin >> C >> N >> K;
    
    std::vector<std::vector<int>> rounds(K, std::vector<int>(N * N));
    for (int i = 0; i < K; ++i) {
        for (int j = 0; j < N * N; ++j) {
            fin >> rounds[i][j];
        }
    }

    if (C == 1) {
        int t_wins = 0, s_wins = 0;
        for (int r = 0; r < K; ++r) {
            std::vector<std::vector<char>> board(N, std::vector<char>(N, ' '));
            for (int i = 0; i < N * N; ++i) {
                int pos = rounds[r][i] - 1;
                int row = pos / N, col = pos % N;
                board[row][col] = (r % 2 == 0) ? (i % 2 == 0 ? 'X' : '0') : (i % 2 == 0 ? '0' : 'X');
                if (check_win(board, board[row][col], N)) {
                    if (board[row][col] == 'X') ++t_wins;
                    else ++s_wins;
                    break;
                }
            }
        }
        fout << t_wins << " " << s_wins << "\n";
    } else if (C == 2) {
        int max_moves = 0;
        for (int r = 0; r < K; ++r) {
            std::vector<std::vector<char>> board(N, std::vector<char>(N, ' '));
            for (int i = 0; i < N * N; ++i) {
                int pos = rounds[r][i] - 1;
                int row = pos / N, col = pos % N;
                board[row][col] = (r % 2 == 0) ? (i % 2 == 0 ? 'X' : '0') : (i % 2 == 0 ? '0' : 'X');
                if (check_win(board, board[row][col], N)) {
                    if (i + 1 > max_moves) max_moves = i + 1;
                    break;
                }
            }
        }
        fout << max_moves << "\n";
    }
    
    return 0;
}
```
