---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `gardul.in` and write to `gardul.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doi copii vopsesc un gard alcătuit din $n$ scânduri pe care le vom numerota de la $1$ la $n$ astfel: primul ia o cutie de vopsea roșie cu care vopsește scândurile cu numărul $p$, $2 \cdot p$, $3 \cdot p$, etc. Al doilea procedează la fel, începe de la același capăt al gardului, dar ia o cutie de vopsea albastră și vopsește din $q$ în $q$ scânduri. Astfel, când vor termina de vopsit, gardul va avea multe scânduri nevopsite, unele scânduri vopsite în roșu, altele în albastru, iar altele în violet (cele care au fost vopsite și cu roșu și cu albastru).

# Cerință

Cunoscând numerele $n, p$ și $q$ afișați:

1. câte scânduri rămân nevopsite
2. câte scânduri sunt vopsite în roșu
3. câte scânduri sunt vopsite în albastru
4. câte scânduri sunt vopsite în violet

# Date de intrare

De pe prima linie a fișierului de intrare `gardul.in` se citește valoarea $n$, reprezentând numărul de scânduri din gard. De pe cea de a doua linie a fișierului de intrare se citesc valorile $p$ și $q$ separate de un spațiu.

# Date de ieșire

În fișierul de ieșire `gardul.out` se vor afișa, în ordine, cele patru numere naturale cerute, câte unul pe un rând, ca în exemplu.

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq p, q \leq 40 \ 000$;

---

Example:
`gardul.in`
```
25
4 6
```

`gardul.out`
```
17
4
2
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a C++ solution for the given problem. The code reads input from `gardul.in` and writes the output to `gardul.out`.

```cpp
#include <fstream>
#include <algorithm>

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    std::ifstream fin("gardul.in");
    std::ofstream fout("gardul.out");

    int n, p, q;
    fin >> n >> p >> q;

    // Calculating the count of boards painted by each color and violet
    int red = n / p;
    int blue = n / q;
    int lcm_pq = (p * q) / gcd(p, q);
    int violet = n / lcm_pq;

    // Calculating the count of unpainted boards
    int unpainted = n - (red + blue - violet);

    // Writing the results to output file
    fout << unpainted << '\n';
    fout << red - violet << '\n';
    fout << blue - violet << '\n';
    fout << violet << '\n';

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - The input values `n`, `p`, and `q` are read from `gardul.in`.

2. **Counting Painted Boards**:
   - **Red Boards**: The number of boards painted red is given by `n / p`.
   - **Blue Boards**: The number of boards painted blue is given by `n / q`.
   - **Violet Boards**: These are the boards painted both red and blue. The number of such boards is determined by `n / lcm(p, q)`, where `lcm` stands for the least common multiple of `p` and `q`. We calculate the `lcm` using the formula `lcm(p, q) = (p * q) / gcd(p, q)`.

3. **Counting Unpainted Boards**:
   - The number of unpainted boards is the total number of boards minus the count of boards painted either red or blue. The formula used is `n - (red + blue - violet)`.

4. **Outputting Results**:
   - The results are written to `gardul.out` in the required format.

This approach ensures that the code runs efficiently, adhering to the specified constraints. The use of the greatest common divisor (GCD) function ensures that we can compute the least common multiple (LCM) quickly and accurately, which is essential for determining the number of violet boards.
