---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `gardul.in` and write to `gardul.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doi copii vopsesc un gard alcătuit din $n$ scânduri pe care le vom numerota de la $1$ la $n$ astfel: primul ia o cutie de vopsea roșie cu care vopsește scândurile cu numărul $p$, $2 \cdot p$, $3 \cdot p$, etc. Al doilea procedează la fel, începe de la același capăt al gardului, dar ia o cutie de vopsea albastră și vopsește din $q$ în $q$ scânduri. Astfel, când vor termina de vopsit, gardul va avea multe scânduri nevopsite, unele scânduri vopsite în roșu, altele în albastru, iar altele în violet (cele care au fost vopsite și cu roșu și cu albastru).

# Cerință

Cunoscând numerele $n, p$ și $q$ afișați:

1. câte scânduri rămân nevopsite
2. câte scânduri sunt vopsite în roșu
3. câte scânduri sunt vopsite în albastru
4. câte scânduri sunt vopsite în violet

# Date de intrare

De pe prima linie a fișierului de intrare `gardul.in` se citește valoarea $n$, reprezentând numărul de scânduri din gard. De pe cea de a doua linie a fișierului de intrare se citesc valorile $p$ și $q$ separate de un spațiu.

# Date de ieșire

În fișierul de ieșire `gardul.out` se vor afișa, în ordine, cele patru numere naturale cerute, câte unul pe un rând, ca în exemplu.

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq p, q \leq 40 \ 000$;

---

Example:
`gardul.in`
```
25
4 6
```

`gardul.out`
```
17
4
2
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge in an efficient manner, follow these steps:

1. **Reading the Input**:
   - We need to read the number of planks `n` and the step sizes `p` and `q` from the input file `gardul.in`.

2. **Calculating the Painted Planks**:
   - Planks painted red are indexed by multiples of `p`.
   - Planks painted blue are indexed by multiples of `q`.
   - Planks painted violet are indexed by multiples of the least common multiple (LCM) of `p` and `q` because they are painted by both red and blue.
   
3. **Calculating the Counts**:
   - Planks painted red only: Count of multiples of `p` minus planks that are also multiples of the LCM of `p` and `q`.
   - Planks painted blue only: Count of multiples of `q` minus planks that are also multiples of the LCM of `p` and `q`.
   - Planks painted violet: Count of multiples of the LCM of `p` and `q`.
   - Planks unpainted: Total planks `n` minus the union of painted planks (those painted either red or blue or both).

4. **Efficient Calculation**:
   - Use integer division to compute how many multiples of a number fit in the range `[1, n]`.
   - Use the formula for inclusion-exclusion principle to avoid double-counting the planks painted by both colors.

Here is the C++ code implementing this logic:

```cpp
#include <fstream>
#include <algorithm>
#include <numeric>

int main() {
    std::ifstream fin("gardul.in");
    std::ofstream fout("gardul.out");

    int n, p, q;
    fin >> n >> p >> q;

    auto count_multiples = [](int n, int x) {
        return n / x;
    };

    int red_count = count_multiples(n, p);
    int blue_count = count_multiples(n, q);
    int lcm_pq = std::lcm(p, q);
    int violet_count = count_multiples(n, lcm_pq);

    int red_only_count = red_count - violet_count;
    int blue_only_count = blue_count - violet_count;
    int unpainted_count = n - (red_only_count + blue_only_count + violet_count);

    fout << unpainted_count << "\n";
    fout << red_only_count << "\n";
    fout << blue_only_count << "\n";
    fout << violet_count << "\n";

    return 0;
}
```

### Explanation:
- **`count_multiples(n, x)`**: A lambda function that calculates how many multiples of `x` are there in the range `[1, n]`.
- **`lcm_pq`**: The least common multiple of `p` and `q` calculated using `std::lcm`.
- **Counts Calculation**:
  - `red_count`: Total planks painted red.
  - `blue_count`: Total planks painted blue.
  - `violet_count`: Total planks painted by both colors.
  - `red_only_count`: Red planks excluding those also painted blue.
  - `blue_only_count`: Blue planks excluding those also painted red.
  - `unpainted_count`: Planks that are not painted by either color.

This solution ensures efficient computation and adherence to the constraints. The input/output operations are managed by file streams to meet the problem's requirements.
