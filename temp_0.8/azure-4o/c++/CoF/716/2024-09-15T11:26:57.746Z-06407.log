---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `gardul.in` and write to `gardul.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doi copii vopsesc un gard alcătuit din $n$ scânduri pe care le vom numerota de la $1$ la $n$ astfel: primul ia o cutie de vopsea roșie cu care vopsește scândurile cu numărul $p$, $2 \cdot p$, $3 \cdot p$, etc. Al doilea procedează la fel, începe de la același capăt al gardului, dar ia o cutie de vopsea albastră și vopsește din $q$ în $q$ scânduri. Astfel, când vor termina de vopsit, gardul va avea multe scânduri nevopsite, unele scânduri vopsite în roșu, altele în albastru, iar altele în violet (cele care au fost vopsite și cu roșu și cu albastru).

# Cerință

Cunoscând numerele $n, p$ și $q$ afișați:

1. câte scânduri rămân nevopsite
2. câte scânduri sunt vopsite în roșu
3. câte scânduri sunt vopsite în albastru
4. câte scânduri sunt vopsite în violet

# Date de intrare

De pe prima linie a fișierului de intrare `gardul.in` se citește valoarea $n$, reprezentând numărul de scânduri din gard. De pe cea de a doua linie a fișierului de intrare se citesc valorile $p$ și $q$ separate de un spațiu.

# Date de ieșire

În fișierul de ieșire `gardul.out` se vor afișa, în ordine, cele patru numere naturale cerute, câte unul pe un rând, ca în exemplu.

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq p, q \leq 40 \ 000$;

---

Example:
`gardul.in`
```
25
4 6
```

`gardul.out`
```
17
4
2
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to consider the multiples of \( p \) and \( q \) within the range up to \( n \), and also handle the overlaps of these multiples. Here's the step-by-step approach:

1. **Count the multiples**:
   - Multiples of \( p \): Any number \( k \cdot p \) where \( k \) is an integer, and \( k \cdot p \leq n \).
   - Multiples of \( q \): Any number \( k \cdot q \) where \( k \) is an integer, and \( k \cdot q \leq n \).
   
2. **Calculate overlaps (violet boards)**:
   - Overlaps occur at \( lcm(p, q) \cdot k \) where \( k \) is an integer. Here, \( lcm \) is the least common multiple.
   
3. **Calculate boards**:
   - Red boards are given by multiples of \( p \) minus overlaps.
   - Blue boards are given by multiples of \( q \) minus overlaps.
   - Violet boards are the overlaps.
   - Unpainted boards are the remaining boards after accounting for all painted boards.

Here's the C++ code implementing this logic:

```cpp
#include <fstream>
#include <algorithm>
#include <numeric>

int main() {
    std::ifstream inFile("gardul.in");
    std::ofstream outFile("gardul.out");

    int n, p, q;
    inFile >> n >> p >> q;

    int totalRed = n / p;
    int totalBlue = n / q;
    int lcm_pq = std::lcm(p, q);
    int totalViolet = n / lcm_pq;

    int onlyRed = totalRed - totalViolet;
    int onlyBlue = totalBlue - totalViolet;
    int unpainted = n - (onlyRed + onlyBlue + totalViolet);

    outFile << unpainted << "\n";
    outFile << onlyRed << "\n";
    outFile << onlyBlue << "\n";
    outFile << totalViolet << "\n";

    return 0;
}
```

### Explanation:

1. **Reading Input**:
   - The input is read from `gardul.in` file using `ifstream`.

2. **Counting Multiples**:
   - `totalRed` is the count of boards painted red.
   - `totalBlue` is the count of boards painted blue.
   - `totalViolet` is the count of boards painted both red and blue (overlaps).

3. **Calculating Overlaps and Remaining Boards**:
   - `onlyRed` is calculated by subtracting the overlaps from `totalRed`.
   - `onlyBlue` is calculated by subtracting the overlaps from `totalBlue`.
   - `unpainted` is calculated by subtracting the total painted boards from `n`.

4. **Writing Output**:
   - The results are written to `gardul.out` file using `ofstream`.

This solution ensures efficient counting and leverages the least common multiple to handle overlaps correctly. It reads and writes files as specified, and avoids using `cin`, `cout`, `scanf()`, or `printf()`, adhering to the problem constraints.
