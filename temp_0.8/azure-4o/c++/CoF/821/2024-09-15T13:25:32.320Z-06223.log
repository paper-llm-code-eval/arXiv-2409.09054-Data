---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

int main() {
    ifstream inFile("cifru.in");
    ofstream outFile("cifru.out");

    int N;
    inFile >> N;
    vector<int> discs(N);

    for (int i = 0; i < N; ++i) {
        inFile >> discs[i];
    }

    // 1. Find the largest digit in the initial configuration
    int max_digit = *max_element(discs.begin(), discs.end());

    // 2. Calculate minimum number of moves for all discs to become the same digit
    vector<int> moves(10, 0);

    for (int target_digit = 0; target_digit <= 9; ++target_digit) {
        for (int i = 0; i < N; ++i) {
            int diff = abs(discs[i] - target_digit);
            // Because discs are circular, the minimum of (diff) and (10 - diff) is the actual minimum moves
            moves[target_digit] += min(diff, 10 - diff);
        }
    }

    int min_moves = *min_element(moves.begin(), moves.end());
    
    // 3. Find the smallest digit that can be achieved with the minimal number of moves
    int min_digit = INT_MAX;
    for (int target_digit = 0; target_digit <= 9; ++target_digit) {
        if (moves[target_digit] == min_moves) {
            min_digit = min(min_digit, target_digit);
        }
    }

    // 4. Count the number of possible identical digit combinations with minimal moves
    int num_combinations = 0;
    for (int target_digit = 0; target_digit <= 9; ++target_digit) {
        if (moves[target_digit] == min_moves) {
            num_combinations++;
        }
    }

    outFile << max_digit << endl;
    outFile << min_moves << endl;
    outFile << min_digit << endl;
    outFile << num_combinations << endl;

    inFile.close();
    outFile.close();
    return 0;
}
```

### Explanation:

1. **Reading Input:** The program starts by reading the input from the file `cifru.in`. It reads the number of discs `N` and then the initial positions of the discs into a vector `discs`.

2. **Finding the Largest Digit:** It uses `max_element` from the `<algorithm>` library to find the largest digit present in the initial configuration.

3. **Calculating Minimum Moves:** 
   - It initializes a vector `moves` of size 10 (for each digit from 0 to 9) to store the total number of moves required to make all discs show the same digit.
   - For each potential target digit (from 0 to 9), it calculates the minimum number of moves required to transform each disc to this target digit considering the circular nature of the discs (using `min(diff, 10 - diff)`).

4. **Finding Minimum Moves:** It finds the smallest value in the `moves` vector, which represents the minimum number of moves required.

5. **Finding the Smallest Achievable Digit:** It iterates through the `moves` vector to find the smallest digit that can be achieved with the minimum number of moves.

6. **Counting Identical Combinations:** It counts how many digits can be formed with the minimum number of moves by counting occurrences of `min_moves` in the `moves` vector.

7. **Writing Output:** Finally, it writes the results to `cifru.out`.

This solution ensures that the operations are efficient and the program works within the constraints.
