---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's a step-by-step approach to solve the problem:

1. **Read the Input**: Retrieve the number of discs \( N \) and the digits on each disc from the file `cifru.in`.

2. **Determine the Largest Digit**: Identify the maximum digit from the initial configuration of the discs.

3. **Calculate Minimum Moves**: For each target digit (from 0 to 9), calculate the total number of moves required to convert all discs to this digit. Keep track of the minimum number of moves and the corresponding target digit.

4. **Count Identical Combinations**: For each possible target digit that results in the minimum number of moves, determine how many such digits exist.

5. **Write the Output**: Output the largest digit found, the minimum moves required, the smallest target digit that can be achieved with the minimum moves, and the number of possible identical digit combinations.

Here's the efficient solution implemented in C++:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

int main() {
    std::ifstream fin("cifru.in");
    std::ofstream fout("cifru.out");

    int N;
    fin >> N;
    std::vector<int> discs(N);

    for (int i = 0; i < N; ++i) {
        fin >> discs[i];
    }

    // Finding the largest digit
    int largest_digit = *std::max_element(discs.begin(), discs.end());
    fout << largest_digit << "\n";

    // Calculating the minimum moves for each target digit from 0 to 9
    int min_moves = INT_MAX;
    std::vector<int> moves_for_digit(10, 0);

    for (int target = 0; target <= 9; ++target) {
        int total_moves = 0;
        for (int i = 0; i < N; ++i) {
            int current = discs[i];
            int moves_up = (target - current + 10) % 10;
            int moves_down = (current - target + 10) % 10;
            total_moves += std::min(moves_up, moves_down);
        }
        moves_for_digit[target] = total_moves;
        if (total_moves < min_moves) {
            min_moves = total_moves;
        }
    }

    fout << min_moves << "\n";

    // Finding the smallest digit with the minimum moves and counting possible combinations
    int smallest_digit = 10;
    int count_combinations = 0;

    for (int target = 0; target <= 9; ++target) {
        if (moves_for_digit[target] == min_moves) {
            if (target < smallest_digit) {
                smallest_digit = target;
            }
            count_combinations++;
        }
    }

    fout << smallest_digit << "\n";
    fout << count_combinations << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

### Explanation:
1. **Input Reading**: We use `ifstream` to read from `cifru.in` and store the digits in a vector.
2. **Largest Digit**: We use `std::max_element` to find the largest digit in the list.
3. **Minimum Moves Calculation**: For each target digit from 0 to 9, we calculate the total moves required to convert all discs to that digit. We keep track of the minimum number of moves.
4. **Result Compilation and Output**: We find the smallest target digit that can be achieved with the minimum number of moves and count how many such digits exist. Finally, we write the results to `cifru.out`.

This solution is efficient and should work within the constraints provided.
