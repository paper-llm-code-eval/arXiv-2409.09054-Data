---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Sindbad a descoperit un recipient care conține o poțiune magică și o inscripție care descrie cum se poate deschide poarta unui templu. Urmând instrucțiunile din inscripție, Sindbad a ajuns la un tunel acoperit cu dale pătrate, aliniate astfel încât formează linii și coloane. Tunelul are mai multe linii, iar pe fiecare linie sunt câte $N$ dale. Dalele din tunel sunt numerotate începând cu $1$, astfel încât, parcurgându-le linie cu linie și fiecare linie de la stânga la dreapta, se obține un șir strict crescător de numere naturale consecutive.
\
Sindbad se află la intrare, înaintea primei linii. Pentru a deschide poarta templului, el trebuie să ajungă pe dala numerotată cu $P$, călcând pe un număr minim de dale. Dacă există mai multe astfel de soluții, o va alege pe cea pentru care consumul total de picături de poțiune magică este minim. Pe parcursul deplasării el trebuie să respecte următoarele reguli:

* de la intrare, poate sări pe orice dală aflată pe prima line, fără a consuma poțiune magică;
* de pe o dală numerotată cu $X$, Sindbad poate sări fie pe dala numerotată cu $X + 1$, consumând **o picătură** de poțiune magică, fie pe dala numerotată cu $2 \cdot X$, consumând **două picături** de poțiune magică.

# Cerință

Scrieți un program care citește valorile $N$ și $P$ cu semnificația din enunț și rezolvă următoarele cerințe:
1. afișează numărul minim de dale pe care trebuie să calce pentru a deschide poarta;
2. afișează numărul natural $T$, reprezentând numărul minim de picături de poțiune magică necesare pentru deschiderea porții.

# Date de intrare

Fișierul de intrare `poarta.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află numărul natural $N$, iar pe a treia linie se află numărul natural $P$ cu semnificația din enunț.

# Date de ieșire

Fișierul de ieșire `poarta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $C$.

# Restricții și precizări

* $2 \leq N < 10 \ 000$;
* $P$ este număr natural nenul cu cel mult $1 \ 000$ de cifre; pentru o parte dintre teste, valorând în total $60$ de puncte, $P$ are cel mult $18$ cifre.
* Recipientul conține o cantitate suficientă de poțiune magică.
* Pentru rezolvarea cerinței $1$ se acordă maximum $60$ de puncte, iar pentru rezolvarea cerinței $2$ se acordă maximum $30$ de puncte.

---

Example:
`poarta.in`
```
1
5
9
```

`poarta.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To tackle this challenge efficiently, we'll use a breadth-first search (BFS) approach, which is well-suited for finding the shortest path in an unweighted graph. The idea is to treat each tile as a node and each possible move (either `X + 1` or `2 * X`) as an edge with a specific cost in terms of potion drops.

### Steps:
1. **Read Input**: Read the values of `C`, `N`, and `P` from the input file.
2. **BFS Initialization**: Initialize the BFS with all possible starting nodes (tiles on the first line).
3. **BFS Execution**: For each node, explore the two possible moves and keep track of the minimum steps to reach `P` and the minimum potion drops required.
4. **Output**: Depending on `C`, output either the minimum number of steps or the minimum number of potion drops.

Here's the solution in C++:

```cpp
#include <iostream>
#include <fstream>
#include <queue>
#include <unordered_map>
#include <limits>

#define INF std::numeric_limits<long long>::max()

std::pair<long long, long long> bfs_min_steps_and_potion(int N, long long P) {
    std::queue<std::pair<long long, std::pair<long long, long long>>> q; // {tile, {steps, potion_drops}}
    std::unordered_map<long long, std::pair<long long, long long>> visited; // {tile: {steps, potion_drops}}

    // Initialize BFS with all first line tiles
    for (int i = 1; i <= N; ++i) {
        q.push({i, {1, 0}});
        visited[i] = {1, 0};
    }

    while (!q.empty()) {
        auto [current_tile, info] = q.front();
        q.pop();
        auto [steps, potion_drops] = info;

        if (current_tile == P) {
            return {steps, potion_drops};
        }

        // Move to X + 1
        if (current_tile + 1 <= P) {
            long long new_tile = current_tile + 1;
            long long new_steps = steps + 1;
            long long new_potions = potion_drops + 1;
            if (visited.find(new_tile) == visited.end() || visited[new_tile].second > new_potions) {
                q.push({new_tile, {new_steps, new_potions}});
                visited[new_tile] = {new_steps, new_potions};
            }
        }

        // Move to 2 * X
        if (current_tile * 2 <= P) {
            long long new_tile = current_tile * 2;
            long long new_steps = steps + 1;
            long long new_potions = potion_drops + 2;
            if (visited.find(new_tile) == visited.end() || visited[new_tile].second > new_potions) {
                q.push({new_tile, {new_steps, new_potions}});
                visited[new_tile] = {new_steps, new_potions};
            }
        }
    }

    return {INF, INF}; // We should never hit this line
}

int main() {
    std::ifstream inFile("poarta.in");
    std::ofstream outFile("poarta.out");

    int C, N;
    long long P;
    inFile >> C >> N >> P;

    auto [min_steps, min_potions] = bfs_min_steps_and_potion(N, P);

    if (C == 1) {
        outFile << min_steps << std::endl;
    } else {
        outFile << min_potions << std::endl;
    }

    return 0;
}
```

### Explanation:
1. **Reading Input**: We read the values of `C`, `N`, and `P` from `poarta.in`.
2. **BFS Initialization**: We initialize the BFS with tiles on the first line (tiles `1` to `N`). Each tile is pushed into the queue with steps `1` and potion drops `0`.
3. **BFS Execution**: For each current tile, we explore the two possible moves (`X + 1` and `2 * X`). We update the queue and visited map with the new steps and potion drops if it's more optimal than previously recorded.
4. **Output**: Depending on the requirement (`C`), we output either the minimum steps or the minimum potion drops to reach tile `P`.

This approach ensures that we find the shortest path and the minimum potion drops required in an efficient manner.
