---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Sindbad a descoperit un recipient care conține o poțiune magică și o inscripție care descrie cum se poate deschide poarta unui templu. Urmând instrucțiunile din inscripție, Sindbad a ajuns la un tunel acoperit cu dale pătrate, aliniate astfel încât formează linii și coloane. Tunelul are mai multe linii, iar pe fiecare linie sunt câte $N$ dale. Dalele din tunel sunt numerotate începând cu $1$, astfel încât, parcurgându-le linie cu linie și fiecare linie de la stânga la dreapta, se obține un șir strict crescător de numere naturale consecutive.
\
Sindbad se află la intrare, înaintea primei linii. Pentru a deschide poarta templului, el trebuie să ajungă pe dala numerotată cu $P$, călcând pe un număr minim de dale. Dacă există mai multe astfel de soluții, o va alege pe cea pentru care consumul total de picături de poțiune magică este minim. Pe parcursul deplasării el trebuie să respecte următoarele reguli:

* de la intrare, poate sări pe orice dală aflată pe prima line, fără a consuma poțiune magică;
* de pe o dală numerotată cu $X$, Sindbad poate sări fie pe dala numerotată cu $X + 1$, consumând **o picătură** de poțiune magică, fie pe dala numerotată cu $2 \cdot X$, consumând **două picături** de poțiune magică.

# Cerință

Scrieți un program care citește valorile $N$ și $P$ cu semnificația din enunț și rezolvă următoarele cerințe:
1. afișează numărul minim de dale pe care trebuie să calce pentru a deschide poarta;
2. afișează numărul natural $T$, reprezentând numărul minim de picături de poțiune magică necesare pentru deschiderea porții.

# Date de intrare

Fișierul de intrare `poarta.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află numărul natural $N$, iar pe a treia linie se află numărul natural $P$ cu semnificația din enunț.

# Date de ieșire

Fișierul de ieșire `poarta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $C$.

# Restricții și precizări

* $2 \leq N < 10 \ 000$;
* $P$ este număr natural nenul cu cel mult $1 \ 000$ de cifre; pentru o parte dintre teste, valorând în total $60$ de puncte, $P$ are cel mult $18$ cifre.
* Recipientul conține o cantitate suficientă de poțiune magică.
* Pentru rezolvarea cerinței $1$ se acordă maximum $60$ de puncte, iar pentru rezolvarea cerinței $2$ se acordă maximum $30$ de puncte.

---

Example:
`poarta.in`
```
1
5
9
```

`poarta.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's break down the problem into manageable steps and come up with an efficient solution.

### Problem Breakdown

1. **Input Reading**: We need to read the values of `C`, `N`, and `P` from `poarta.in` without using standard input methods like `cin` or `scanf`.
2. **Graph Representation**: Model the problem as a shortest path problem in an implicit graph where each tile number represents a node.
3. **BFS for Shortest Path**: Use Breadth-First Search (BFS) to find the shortest path and minimum potion consumption from the entrance (tile 1) to the destination (tile `P`).

### Example
For the example provided:
- `C = 1`
- `N = 5`
- `P = 9`

The optimal path to minimize the number of tiles stepped on would be:
1 -> 2 -> 4 -> 8 -> 9

### Optimal Solution

We'll use BFS to ensure the shortest path in terms of number of steps. While doing BFS, we'll also keep track of the potion consumption.

Here's the complete solution in C++:

```cpp
#include <fstream>
#include <queue>
#include <vector>
#include <unordered_map>

using namespace std;

// Define a structure to hold the state of each node
struct NodeState {
    int position;
    int steps;
    int potions;
};

int main() {
    ifstream fin("poarta.in");
    ofstream fout("poarta.out");

    int C, N;
    long long P;
    fin >> C >> N >> P;

    // BFS setup
    queue<NodeState> q;
    unordered_map<long long, pair<int, int>> visited; // position -> (steps, potions)

    // Initialize BFS with the first row tiles
    for (int i = 1; i <= N; ++i) {
        q.push({i, 1, 0});
        visited[i] = {1, 0};
    }

    // Perform BFS
    while (!q.empty()) {
        NodeState current = q.front();
        q.pop();

        // Check if we reached the target tile
        if (current.position == P) {
            if (C == 1) {
                fout << current.steps << "\n";
            } else if (C == 2) {
                fout << current.potions << "\n";
            }
            return 0;
        }

        // Generate next positions
        long long nextPos1 = current.position + 1;
        long long nextPos2 = current.position * 2;

        // Process next positions
        if (visited.find(nextPos1) == visited.end() || 
            (visited[nextPos1].first > current.steps + 1 || 
            (visited[nextPos1].first == current.steps + 1 && visited[nextPos1].second > current.potions + 1))) {
            q.push({nextPos1, current.steps + 1, current.potions + 1});
            visited[nextPos1] = {current.steps + 1, current.potions + 1};
        }

        if (visited.find(nextPos2) == visited.end() || 
            (visited[nextPos2].first > current.steps + 1 || 
            (visited[nextPos2].first == current.steps + 1 && visited[nextPos2].second > current.potions + 2))) {
            q.push({nextPos2, current.steps + 1, current.potions + 2});
            visited[nextPos2] = {current.steps + 1, current.potions + 2};
        }
    }

    // No solution found (should not happen in valid inputs as per problem constraints)
    fout << "-1\n";
    return 0;
}
```

### Explanation
- **Input Reading**: We use `ifstream` to read the input from the file `poarta.in`.
- **BFS Initialization**: Start the BFS from all tiles in the first row.
- **BFS Execution**: For each tile, calculate the next possible tiles (`X + 1` and `2 * X`) and update the BFS queue and visited states accordingly.
- **Output**: Depending on the problem requirement `C`, output either the number of steps or the potion consumption.

This solution should be efficient with respect to both time and space given the problem constraints.
