---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ de $n$ numere naturale distincte, două câte două. Pentru o secvență de $k$ numere ($x_p, x_{p+1}, \dots, x_{p+k-1}$), care începe cu numărul de pe poziția $p$ din șirul dat, definim gradul său ca fiind numărul de numere din secvență, care rămân pe aceleași poziții după ordonarea crescătoare a secvenței. De exemplu, pentru $n=7$ și șirul format din numerele: $1, 5, 7, 4, 6, 2, 9$, secvența formată din numerele $7, 4, 6, 2$ (corespunzătoare lui $p=3$ și $k=4$) are gradul egal cu $2$ deoarece, după ordonarea crescătoare a numerelor din secvență, aceasta devine $2, 4, 6, 7$, numerele $4$ și $6$ rămânând pe aceleași poziții.

# Cerință

Scrieți un program care citește numerele $n$, $k$, $x_1$, $x_2$, $\dots$, $x_n$, cu semnificația din enunț, și apoi determină:

1. gradul întregului șir de numere;
2. poziția primului element din prima secvență de lungime $k$ ce are gradul maxim, precum și gradul acestei secvențe.

# Date de intrare

Fișierul de intrare `grad.in` conține pe prima linie numerele $n$ și $k$, separate printr-un spațiu, iar pe linia următoare $n$ numere naturale distincte $x_1$, $x_2$, $\dots$, $x_n$, corespunzătoare șirului de numere, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie un număr natural reprezentând gradul întregului șir de numere, iar pe următoarea linie două numere naturale, separate printr-un singur spațiu, primul număr reprezentând poziția primului element din prima secvență de lungime $k$ ce are grad maxim și cel de-al doilea număr reprezentând gradul acestei secvențe.

# Restricții și precizări

* $0 < n \leq 10 \ 000$
* $0 < k \leq n$
* Numerele din șir sunt numere naturale strict mai mici decât $32 \ 000$.
* O secvență de numere din șir reprezintă o succesiune de numere din acel șir, aflate pe poziții consecutive.
* Gradul întregului șir de numere este egal cu gradul secvenței de $n$ numere care începe cu numărul de pe poziția $1$ și conține toate cele $n$ numere din șir.
* Pentru rezolvarea corectă a subpunctului 1 se obține $40\%$ din punctaj.
* Pentru determinarea poziției primului element din prima secvență de lungime $k$ ce are grad maxim, se obține $20\%$ din punctaj, iar pentru determinarea gradului maxim de la subpunctul 2 se obține $40\%$ din punctaj.

---

Example:
`grad.in`
```
7 4
1 5 7 4 6 2 9
```

`grad.out`
```
3
3 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

// Function to calculate the degree of a sequence
int calculate_degree(const std::vector<int>& sequence) {
    int degree = 0;
    std::vector<int> sorted_sequence = sequence;
    std::sort(sorted_sequence.begin(), sorted_sequence.end());
    
    for (size_t i = 0; i < sequence.size(); ++i) {
        if (sequence[i] == sorted_sequence[i]) {
            ++degree;
        }
    }
    return degree;
}

int main() {
    std::ifstream infile("grad.in");
    std::ofstream outfile("grad.out");
    
    int n, k;
    infile >> n >> k;
    
    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        infile >> numbers[i];
    }
    
    // Calculate the degree of the entire sequence
    int full_degree = calculate_degree(numbers);
    outfile << full_degree << std::endl;
    
    // Find the sequence of length k with the maximum degree
    int max_degree = 0;
    int starting_position = 1;
    for (int i = 0; i <= n - k; ++i) {
        std::vector<int> subsequence(numbers.begin() + i, numbers.begin() + i + k);
        int current_degree = calculate_degree(subsequence);
        if (current_degree > max_degree) {
            max_degree = current_degree;
            starting_position = i + 1;
        }
    }
    
    outfile << starting_position << " " << max_degree << std::endl;
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input:** 
   - Read `n` and `k` from the file `grad.in`.
   - Read the sequence of `n` numbers.

2. **Degree Calculation:**
   - Define a function `calculate_degree` to determine the degree of a given sequence:
     - Sort the sequence.
     - Compare the original and sorted sequences to count how many numbers remain in the same position.

3. **Full Sequence Degree:**
   - Calculate the degree of the entire sequence directly.

4. **Subsequence Degree Calculation:**
   - Iterate through all possible subsequences of length `k`:
     - For each subsequence, calculate its degree using the `calculate_degree` function.
     - Track the maximum degree found and its starting position.

5. **Writing Output:**
   - Write the degree of the entire sequence.
   - Write the starting position and the maximum degree of the best subsequence of length `k`.

This solution leverages sorting to measure the degree and handles the problem efficiently by iterating over possible subsequences and keeping track of the maximum degree found.
