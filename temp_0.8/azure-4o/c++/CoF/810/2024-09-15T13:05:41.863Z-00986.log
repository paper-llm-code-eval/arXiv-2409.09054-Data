---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ de $n$ numere naturale distincte, două câte două. Pentru o secvență de $k$ numere ($x_p, x_{p+1}, \dots, x_{p+k-1}$), care începe cu numărul de pe poziția $p$ din șirul dat, definim gradul său ca fiind numărul de numere din secvență, care rămân pe aceleași poziții după ordonarea crescătoare a secvenței. De exemplu, pentru $n=7$ și șirul format din numerele: $1, 5, 7, 4, 6, 2, 9$, secvența formată din numerele $7, 4, 6, 2$ (corespunzătoare lui $p=3$ și $k=4$) are gradul egal cu $2$ deoarece, după ordonarea crescătoare a numerelor din secvență, aceasta devine $2, 4, 6, 7$, numerele $4$ și $6$ rămânând pe aceleași poziții.

# Cerință

Scrieți un program care citește numerele $n$, $k$, $x_1$, $x_2$, $\dots$, $x_n$, cu semnificația din enunț, și apoi determină:

1. gradul întregului șir de numere;
2. poziția primului element din prima secvență de lungime $k$ ce are gradul maxim, precum și gradul acestei secvențe.

# Date de intrare

Fișierul de intrare `grad.in` conține pe prima linie numerele $n$ și $k$, separate printr-un spațiu, iar pe linia următoare $n$ numere naturale distincte $x_1$, $x_2$, $\dots$, $x_n$, corespunzătoare șirului de numere, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie un număr natural reprezentând gradul întregului șir de numere, iar pe următoarea linie două numere naturale, separate printr-un singur spațiu, primul număr reprezentând poziția primului element din prima secvență de lungime $k$ ce are grad maxim și cel de-al doilea număr reprezentând gradul acestei secvențe.

# Restricții și precizări

* $0 < n \leq 10 \ 000$
* $0 < k \leq n$
* Numerele din șir sunt numere naturale strict mai mici decât $32 \ 000$.
* O secvență de numere din șir reprezintă o succesiune de numere din acel șir, aflate pe poziții consecutive.
* Gradul întregului șir de numere este egal cu gradul secvenței de $n$ numere care începe cu numărul de pe poziția $1$ și conține toate cele $n$ numere din șir.
* Pentru rezolvarea corectă a subpunctului 1 se obține $40\%$ din punctaj.
* Pentru determinarea poziției primului element din prima secvență de lungime $k$ ce are grad maxim, se obține $20\%$ din punctaj, iar pentru determinarea gradului maxim de la subpunctul 2 se obține $40\%$ din punctaj.

---

Example:
`grad.in`
```
7 4
1 5 7 4 6 2 9
```

`grad.out`
```
3
3 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the challenge and then write the C++ solution step-by-step.

1. **Input Reading**: We need to read the input from the file `grad.in`. This can be done using file I/O operations in C++.
2. **Calculate the Degree of a Sequence**: This involves checking how many elements remain in their original positions after sorting a subarray.
3. **Calculate the Degree of the Entire Array**: This is simply the degree of the sequence that includes the entire array.
4. **Find the Sequence with Maximum Degree**: We need to iterate over all possible subarrays of length `k` and calculate their degrees, storing the maximum degree and the starting position of the first sequence with this degree.

### Implementation

Here's how we can implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to calculate the degree of a sequence
int calculateDegree(const vector<int>& seq) {
    int degree = 0;
    vector<int> sortedSeq = seq;
    sort(sortedSeq.begin(), sortedSeq.end());
    for (size_t i = 0; i < seq.size(); ++i) {
        if (seq[i] == sortedSeq[i]) {
            ++degree;
        }
    }
    return degree;
}

int main() {
    ifstream inputFile("grad.in");
    ofstream outputFile("grad.out");

    int n, k;
    inputFile >> n >> k;
    
    vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        inputFile >> numbers[i];
    }
    
    // Calculate the degree of the entire array
    int fullArrayDegree = calculateDegree(numbers);
    outputFile << fullArrayDegree << endl;
    
    // Calculate the degree of each subarray of length k and find the maximum
    int maxDegree = -1;
    int bestStart = 0;
    for (int i = 0; i <= n - k; ++i) {
        vector<int> subArray(numbers.begin() + i, numbers.begin() + i + k);
        int subArrayDegree = calculateDegree(subArray);
        if (subArrayDegree > maxDegree) {
            maxDegree = subArrayDegree;
            bestStart = i + 1;  // To match the 1-based indexing as required
        }
    }
    
    outputFile << bestStart << " " << maxDegree << endl;

    inputFile.close();
    outputFile.close();
    
    return 0;
}
```

### Explanation
1. **File Operations**: We use `ifstream` and `ofstream` to handle input and output operations. This is more efficient for file handling compared to standard I/O functions.
2. **Calculate Degree**:
   - We sort the subarray and compare each element with the original subarray to count the elements that remain in their original positions.
3. **Iterate for Subarrays**:
   - We create each possible subarray of length `k` starting from each valid position in the array and calculate its degree.
   - We track the maximum degree and the starting position of the first subarray that achieves this degree.

This code should efficiently solve the problem for the given constraints. It ensures the correct reading of input, calculation of degrees, and identification of the subarray with the maximum degree within the constraints provided.
