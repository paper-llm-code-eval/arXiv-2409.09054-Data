---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `patrate.in` and write to `patrate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un elev a desenat un set format din mai multe pătrate care conțin numere naturale nenule, distincte, consecutive, dispuse în număr egal pe laturi. Pe latura fiecărui pătrat sunt scrise un număr impar de valori. În fiecare pătrat, numerele sunt scrise în ordine crescătoare parcurgând laturile sale, începând din colțul stânga-jos, în sensul invers al acelor de ceasornic. Elevul a numerotat pătratele cu $1$, $2$, $3$ etc. , în ordinea strict crescătoare a numărului de valori conținute de fiecare. Diferența dintre cel mai mic număr din pătratul $P$ ($1$ < $P$) și cel mai mare număr din pătratul $P - 1$ este egală cu $1$. Primele **patru** pătrate sunt:

~[patrate.png]

Astfel, primul pătrat conține numerele naturale distincte consecutive de la $1$ la $8$, dispuse câte **trei** pe fiecare latură a pătratului. Al doilea pătrat conține următoarele $16$ numere naturale distincte consecutive, dispuse câte cinci pe fiecare latură. Al treilea pătrat conține următoarele $24$ de numere naturale distincte consecutive, dispuse câte șapte pe fiecare latură. Al patrulea pătrat conține următoarele $32$ de numere naturale distincte consecutive, dispuse câte nouă pe fiecare latură etc.

# Cerință

Scrieți un program care rezolvă următoarele două cerințe:

1. citește un număr natural $M$ și determină numărul $K$ de valori conținute de pătratul numerotat cu $M$;
2. citește un număr natural $N$ și determină numărul $T$ al pătratului care conține numărul $N$ pe una dintre laturi.

# Date de intrare

Fișierul de intrare `patrate.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Dacă $C = 1$, atunci fișierul conține pe a doua linie numărul natural $M$. Dacă $C = 2$, atunci fișierul conține pe a doua linie numărul natural $N$.

# Date de ieșire

Dacă $C = 1$, atunci fișierul de ieșire `patrate.out` conține pe prima linie numărul $K$, reprezentând răspunsul la cerința $1$ a problemei. Dacă $C = 2$, atunci fișierul de ieșire `patrate.out` conține pe prima linie numărul natural $T$, reprezentând răspunsul la cerința $2$.

# Restricții și precizări

* $1 \leq M \leq 260 \ 000 \ 000$;
* $7 \leq N \leq 2 \ 147 \ 302 \ 920$;
* Numerele $N$, $M$, $T$ și $K$ sunt numere naturale
* Nu există două pătrate cu același număr de valori scrise pe laturi
* Pentru rezolvarea corectă a cerinței $1$ se acordă $10$ puncte; pentru rezolvarea corectă a cerinței $2$ se acordă $80$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`patrate.in`
```
1
3
```

`patrate.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we'll break it down into two main parts based on the value of `C` (the requirement type):

1. **Determine the number of values contained in the square numbered with `M` (`C = 1`).**
2. **Determine the number of the square that contains the number `N` (`C = 2`).**

### Insights:
1. The `M`-th square in the sequence has sides of length `2 * M + 1` (since the number of values on each side increases by 2 for each subsequent square starting from 3).
2. The total number of values in the `M`-th square is given by:
   \[
   K = 4 \times (2 \times M + 1) - 4
   \]
   This expression simplifies to:
   \[
   K = 8 \times M
   \]
   This means the `M`-th square contains `8 * M` values.

3. To find the square containing the number `N`, note that the sequence of cumulative values up to the `M`-th square is:
   \[
   S_M = 8 + 16 + 24 + \ldots + 8 \times M
   \]
   The sum of the first `M` terms of the arithmetic series `8, 16, 24, ...` is:
   \[
   S_M = \sum_{i=1}^{M} 8i = 8 \times \left(\frac{M \times (M + 1)}{2}\right) = 4 \times M \times (M + 1)
   \]
   We need to find the smallest `M` such that `S_M >= N`.

### Implementation:
We will implement the solution in C++. The program will read `C` and based on its value, either compute `K` for a given `M` or determine the square containing `N`.

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream infile("patrate.in");
    std::ofstream outfile("patrate.out");

    int C;
    infile >> C;

    if (C == 1) {
        int M;
        infile >> M;

        // Calculate K for the given M
        int K = 8 * M; // Since each M-th square has 8 * M values
        outfile << K << "\n";
    } else if (C == 2) {
        int N;
        infile >> N;

        // We need to determine the smallest M such that 4 * M * (M + 1) >= N
        int left = 1, right = 260000000;
        int result = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            long long sum = 4LL * mid * (mid + 1);

            if (sum >= N) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        outfile << result << "\n";
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **For `C = 1`:** The number `K` of values in the `M`-th square is computed directly as `8 * M`.

2. **For `C = 2`:** We use binary search to efficiently find the smallest `M` such that the cumulative sum of values in the squares from `1` to `M` is at least `N`. This ensures we handle the large input limits efficiently.

This C++ program reads from `patrate.in`, processes the input as required, and writes the result to `patrate.out`. It's designed to be efficient and handle the large constraints specified in the problem description.
