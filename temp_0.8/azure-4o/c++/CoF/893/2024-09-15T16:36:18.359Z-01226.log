---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `patrate.in` and write to `patrate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un elev a desenat un set format din mai multe pătrate care conțin numere naturale nenule, distincte, consecutive, dispuse în număr egal pe laturi. Pe latura fiecărui pătrat sunt scrise un număr impar de valori. În fiecare pătrat, numerele sunt scrise în ordine crescătoare parcurgând laturile sale, începând din colțul stânga-jos, în sensul invers al acelor de ceasornic. Elevul a numerotat pătratele cu $1$, $2$, $3$ etc. , în ordinea strict crescătoare a numărului de valori conținute de fiecare. Diferența dintre cel mai mic număr din pătratul $P$ ($1$ < $P$) și cel mai mare număr din pătratul $P - 1$ este egală cu $1$. Primele **patru** pătrate sunt:

~[patrate.png]

Astfel, primul pătrat conține numerele naturale distincte consecutive de la $1$ la $8$, dispuse câte **trei** pe fiecare latură a pătratului. Al doilea pătrat conține următoarele $16$ numere naturale distincte consecutive, dispuse câte cinci pe fiecare latură. Al treilea pătrat conține următoarele $24$ de numere naturale distincte consecutive, dispuse câte șapte pe fiecare latură. Al patrulea pătrat conține următoarele $32$ de numere naturale distincte consecutive, dispuse câte nouă pe fiecare latură etc.

# Cerință

Scrieți un program care rezolvă următoarele două cerințe:

1. citește un număr natural $M$ și determină numărul $K$ de valori conținute de pătratul numerotat cu $M$;
2. citește un număr natural $N$ și determină numărul $T$ al pătratului care conține numărul $N$ pe una dintre laturi.

# Date de intrare

Fișierul de intrare `patrate.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Dacă $C = 1$, atunci fișierul conține pe a doua linie numărul natural $M$. Dacă $C = 2$, atunci fișierul conține pe a doua linie numărul natural $N$.

# Date de ieșire

Dacă $C = 1$, atunci fișierul de ieșire `patrate.out` conține pe prima linie numărul $K$, reprezentând răspunsul la cerința $1$ a problemei. Dacă $C = 2$, atunci fișierul de ieșire `patrate.out` conține pe prima linie numărul natural $T$, reprezentând răspunsul la cerința $2$.

# Restricții și precizări

* $1 \leq M \leq 260 \ 000 \ 000$;
* $7 \leq N \leq 2 \ 147 \ 302 \ 920$;
* Numerele $N$, $M$, $T$ și $K$ sunt numere naturale
* Nu există două pătrate cu același număr de valori scrise pe laturi
* Pentru rezolvarea corectă a cerinței $1$ se acordă $10$ puncte; pentru rezolvarea corectă a cerinței $2$ se acordă $80$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`patrate.in`
```
1
3
```

`patrate.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to handle two primary tasks based on the input specification:

1. Given a square number `M`, determine the number of values it contains (`K`).
2. Given a number `N`, determine which square (`T`) contains this number on one of its sides.

## Approach

### Task 1: Determine the number of values in a square `M` (`K`)
The number of values on each side of the `M`-th square is given by the sequence of odd numbers starting from 3 (3, 5, 7, 9, ...). 

Thus, for the `M`-th square:
- The side length is `2 * M + 1`.
- The total number of values `K` is `side_length * 4 - 4`.

### Task 2: Determine the square containing number `N` (`T`)
To find which square contains `N`, we need to iterate through the sequence of values until the cumulative number of values surpasses `N`.

Let's derive the steps:
1. Start with the smallest square and keep adding its values.
2. Check if `N` falls within the current square's range.

### C++ Implementation
Here is the C++ solution implementing the above logic. We'll use file I/O to read the input and write the output.

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream fin("patrate.in");
    std::ofstream fout("patrate.out");

    int C;
    fin >> C;

    if (C == 1) {
        long long M;
        fin >> M;
        long long side_length = 2 * M + 1;
        long long K = side_length * 4 - 4;
        fout << K;
    } else if (C == 2) {
        long long N;
        fin >> N;
        long long current_value = 1;
        long long side_length = 3;
        long long square_number = 1;
        long long values_in_square = 4 * side_length - 4;

        while (current_value + values_in_square < N) {
            current_value += values_in_square;
            square_number++;
            side_length += 2;
            values_in_square = 4 * side_length - 4;
        }
        fout << square_number;
    }

    return 0;
}
```

### Explanation:
- **Reading Input:** The program reads the input file to determine which task to perform.
- **Task 1 (C = 1):**
  - Calculate the side length of the `M`-th square.
  - Compute the total number of values `K` using the formula `side_length * 4 - 4`.
- **Task 2 (C = 2):**
  - Initialize the first square and its range.
  - Iterate through subsequent squares, updating the current value range until the range includes `N`.
  - Output the square number `T` where `N` is found.

This solution ensures optimal performance for the given constraints, efficiently handling large values of `M` and `N`.
