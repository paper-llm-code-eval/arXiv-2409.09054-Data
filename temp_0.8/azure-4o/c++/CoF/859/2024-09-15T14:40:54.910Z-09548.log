---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lasere.in` and write to `lasere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un teren reprezentat printr-o matrice cu $n$ linii şi $n$ coloane având elemente numere naturale. În fiecare element al matricei este memorată înălţimea zonei de teren corespunzătoare ca poziţie elementului respectiv. Pe acest teren sunt amplasate $m$ lasere, în poziţii cunoscute. Un laser este îndreptat spre unul dintre cele $4$ puncte cardinale, codificate prin numere astfel: Nord prin valoarea $1$, Est prin valoarea $2$, Sud prin valoarea $3$ şi respectiv Vest prin valoarea $4$. Fiecare laser va executa o singură tragere şi ca urmare va scădea cu $1$ valorile tuturor elementelor din matrice din direcţia sa de tragere, exceptând poziţia laserului respectiv.

După efectuarea tuturor tragerilor, se caută poziţiile tuturor gropilor şi ale tranşeelor. Numim groapă un element din matrice pentru care toate cele $8$ elemente învecinate pe linie, coloană sau diagonale au valori mai mari sau egale decât el. Numim tranşee o secvenţă maximală formată din două sau mai multe gropi situate pe aceeaşi linie, pe coloane consecutive. Secvenţa se numeşte maximală dacă nu mai poate fi prelungită la niciunul dintre capete.

# Cerință

Cunoscând configuraţia terenului şi amplasarea laserelor, să se rezolve una dintre următoarele două cerinţe:
1. să se determine numărul de gropi din teren, după executarea tragerilor;
2. să se determine numărul de tranşee existente, după executarea tragerilor. 

# Date de intrare

Fişierul de intrare `lasere.in` conţine pe prima linie un număr natural $c$ care reprezintă cerinţa ce urmează să fie rezolvată ($1$ sau $2$). Pe a doua linie se află două numere naturale $n$ şi $m$, reprezentând numărul de linii şi de coloane ale matricei, respectiv numărul de lasere. Pe următoarele $n$ linii se află câte $n$ numere naturale, reprezentând elementele matricei. Pe următoarele $m$ linii sunt descrise cele $m$ lasere, câte un laser pe o linie. Pe o linie care descrie un laser se află $3$ numere naturale $i \ j \ d$, cu semnificaţia că se află un laser pe linia $i$ şi coloana $j$, care trage în direcţia $d$. Valorile situate pe aceeaşi linie sunt separate prin spaţiu. 

# Date de ieșire

Fişierul de ieşire `lasere.out` va conţine pe prima linie un singur număr natural. Acest număr reprezintă numărul de gropi (dacă $c=1$) sau numărul de tranşee (dacă $c=2$).

# Restricții și precizări

* $4 \leq n \leq 200$;
* $1 \leq m \leq 200$;
* Numerotarea liniilor şi a coloanelor este de la $1$ la $n$.
* Elementele matricei din fişierul de intrare sunt numere naturale de maxim $4$ cifre.
* Poziţiile laserelor sunt distincte.
* Pentru teste valorând $30\%$ din punctaj cerinţa este $1$.

---

Example:
`lasere.in`
```
1
5 3
1 1 3 4 5
8 7 6 5 4
9 3 5 6 7
1 1 1 9 8
1 1 1 5 6
2 3 3
4 4 4
1 4 2
```

`lasere.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's go through the steps needed to solve the problem efficiently and write the correct C++ code to handle it.

## Steps to Solve the Problem:
1. **Read Input:**
    - Read the value of `c` which determines whether we need to count holes or trenches.
    - Read the sizes `n` and `m`.
    - Read the matrix of terrain heights.
    - Read the laser positions and directions.

2. **Process Laser Shots:**
    - For each laser, decrement the appropriate matrix elements based on its shooting direction.

3. **Count Holes:**
    - For each element in the matrix, check the surrounding 8 elements to determine if it's a hole.

4. **Count Trenches:**
    - Traverse each row to find maximal sequences of holes.

5. **Output the Result:**
    - Based on the value of `c`, output either the number of holes or the number of trenches.

## Example Analysis:
Given the example in `lasere.in`:

```
1
5 3
1 1 3 4 5
8 7 6 5 4
9 3 5 6 7
1 1 1 9 8
1 1 1 5 6
2 3 3
4 4 4
1 4 2
```

After processing the lasers:
- Laser at (2,3) shoots south -> decreases column 3, rows 3 to 5.
- Laser at (4,4) shoots west -> decreases row 4, columns 1 to 3.
- Laser at (1,4) shoots east -> decreases row 1, columns 5.

Resulting matrix:
```
1 1 3 4 4
8 7 5 4 3
9 3 4 5 6
0 0 0 8 7
1 0 0 4 5
```

Now, let's write the C++ code that implements this logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("lasere.in");
    ofstream fout("lasere.out");

    int c, n, m;
    fin >> c >> n >> m;

    vector<vector<int>> matrix(n, vector<int>(n));
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            fin >> matrix[i][j];

    vector<pair<int, pair<int, int>>> lasers(m);
    for (int i = 0; i < m; ++i) {
        int x, y, d;
        fin >> x >> y >> d;
        lasers[i] = {d, {x - 1, y - 1}}; // converting to 0-based index
    }

    for (const auto& laser : lasers) {
        int d = laser.first;
        int x = laser.second.first;
        int y = laser.second.second;
        
        if (d == 1) { // North
            for (int i = 0; i < x; ++i)
                --matrix[i][y];
        } else if (d == 2) { // East
            for (int j = y + 1; j < n; ++j)
                --matrix[x][j];
        } else if (d == 3) { // South
            for (int i = x + 1; i < n; ++i)
                --matrix[i][y];
        } else if (d == 4) { // West
            for (int j = 0; j < y; ++j)
                --matrix[x][j];
        }
    }

    auto is_hole = [&](int i, int j) {
        static const int di[] = {-1, -1, -1, 0, 0, 1, 1, 1};
        static const int dj[] = {-1,  0,  1, -1, 1, -1, 0, 1};
        for (int k = 0; k < 8; ++k) {
            int ni = i + di[k], nj = j + dj[k];
            if (ni >= 0 && ni < n && nj >= 0 && nj < n && matrix[ni][nj] < matrix[i][j])
                return false;
        }
        return true;
    };

    if (c == 1) {
        int num_holes = 0;
        for (int i = 0; i < n; ++i)
            for (int j = 0; j < n; ++j)
                if (is_hole(i, j))
                    ++num_holes;
        fout << num_holes << '\n';
    } else if (c == 2) {
        int num_trenches = 0;
        for (int i = 0; i < n; ++i) {
            int j = 0;
            while (j < n) {
                while (j < n && !is_hole(i, j)) ++j;
                int start = j;
                while (j < n && is_hole(i, j)) ++j;
                if (j - start > 1)
                    ++num_trenches;
            }
        }
        fout << num_trenches << '\n';
    }

    return 0;
}
```

This code reads the input, processes the laser shots to update the matrix, and then either counts the holes or counts the trenches, depending on the value of `c`. It writes the result to the output file as specified.
