---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("virus.in");
    ofstream outfile("virus.out");

    int n;
    infile >> n;

    vector<pair<int, int>> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].first >> intervals[i].second;
    }

    // Sort intervals based on their start times
    sort(intervals.begin(), intervals.end());

    int maxWorkingPeriod = 0;
    int maxIdlePeriod = 0;

    int currentStart = intervals[0].first;
    int currentEnd = intervals[0].second;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].first <= currentEnd) {
            // Merge overlapping intervals
            currentEnd = max(currentEnd, intervals[i].second);
        } else {
            // Calculate the working period of the current merged interval
            maxWorkingPeriod = max(maxWorkingPeriod, currentEnd - currentStart);

            // Calculate the idle period between current merged interval and the next interval
            maxIdlePeriod = max(maxIdlePeriod, intervals[i].first - currentEnd);

            // Move to the next interval
            currentStart = intervals[i].first;
            currentEnd = intervals[i].second;
        }
    }

    // Final check for the last merged interval
    maxWorkingPeriod = max(maxWorkingPeriod, currentEnd - currentStart);

    outfile << maxWorkingPeriod << " " << maxIdlePeriod << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Input Reading:**
   - We read the number of intervals `n` from `virus.in`.
   - We read each interval `[a, b]` into a `vector` of `pair<int, int>`.

2. **Sorting:**
   - We sort the intervals by their starting day. This helps in merging overlapping intervals easily.

3. **Merging Intervals:**
   - We initialize `currentStart` and `currentEnd` with the start and end of the first interval.
   - We iterate through all intervals starting from the second one.
     - If the start of the current interval is less than or equal to `currentEnd`, it means the intervals overlap. We merge them by updating `currentEnd`.
     - If they don't overlap, we update the maximum working period and maximum idle period, then move to the next interval.

4. **Final Check:**
   - After the loop, we ensure the last interval is considered by updating the maximum working period.

5. **Output:**
   - We write the results to `virus.out` as required.

This solution leverages sorting and linear traversal, making it efficient with a time complexity of O(n log n) due to sorting and O(n) for the merging logic. This ensures it runs efficiently for the problem constraints.
