---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, let's break down the problem and plan out the solution step by step.

### Problem Breakdown
1. **Input Reading and Parsing:** We need to read from an input file `virus.in` which contains the number of intervals followed by the intervals themselves.
2. **Merging Intervals:** Since intervals can overlap, we need to merge overlapping intervals to find the continuous periods of work.
3. **Calculating Work and Non-work Periods:** Once we have the merged intervals, we can calculate the longest period of continuous work and the longest period of no work.

### Detailed Steps
1. **Reading the Input:**
    - Read the number of intervals `n`.
    - Read the subsequent lines which contain pairs of integers `[a, b]` representing the start and end of a work period.

2. **Merging Overlapping Intervals:**
    - Sort the intervals based on their start times.
    - Iterate through the sorted intervals and merge them if they overlap or are contiguous.

3. **Calculating Work and Non-work Periods:**
    - Iterate through the merged intervals to determine the longest continuous work period.
    - Also, find the gaps between these merged intervals to determine the longest non-work period.

### Example
Given the example:
```
3
700 1200
300 1000
1500 2100
```
- After sorting and merging the intervals:
  - `[300, 1200]` (merging `[300, 1000]` and `[700, 1200]`)
  - `[1500, 2100]`
- Longest work period: `2100 - 1500 = 600` (Second Interval)
- Longest non-work period: `1500 - 1200 = 300`

### Implementation in C++

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Interval {
    int start, end;
};

bool compareIntervals(const Interval &a, const Interval &b) {
    return a.start < b.start;
}

int main() {
    std::ifstream infile("virus.in");
    std::ofstream outfile("virus.out");

    int n;
    infile >> n;

    std::vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].start >> intervals[i].end;
    }

    // Step 1: Sort intervals based on the start time
    std::sort(intervals.begin(), intervals.end(), compareIntervals);

    // Step 2: Merge the intervals and find the required periods
    std::vector<Interval> mergedIntervals;
    mergedIntervals.push_back(intervals[0]);

    for (int i = 1; i < n; ++i) {
        if (intervals[i].start <= mergedIntervals.back().end) {
            // Overlapping intervals, merge them
            mergedIntervals.back().end = std::max(mergedIntervals.back().end, intervals[i].end);
        } else {
            // No overlap, add to merged intervals list
            mergedIntervals.push_back(intervals[i]);
        }
    }

    // Step 3: Calculate the longest work period (L) and the longest non-work period (P)
    int longestWork = 0;
    int longestNonWork = 0;

    for (const auto &interval : mergedIntervals) {
        longestWork = std::max(longestWork, interval.end - interval.start);
    }

    for (size_t i = 1; i < mergedIntervals.size(); ++i) {
        longestNonWork = std::max(longestNonWork, mergedIntervals[i].start - mergedIntervals[i-1].end);
    }

    // Output results
    outfile << longestWork << " " << longestNonWork << std::endl;

    return 0;
}
```

### Explanation
1. **Reading Input:**
   - The input is read from `virus.in` and stored in a vector of `Interval` structures.
2. **Sorting and Merging Intervals:**
   - Intervals are sorted by their start times.
   - Overlapping or contiguous intervals are merged by adjusting the end time of the previous interval.
3. **Calculating Periods:**
   - The longest work period is derived by scanning the merged intervals.
   - The longest non-work period is derived by looking at gaps between the end of one interval and the start of the next.

This approach ensures efficient processing with a time complexity of \(O(n \log n)\) due to sorting and \(O(n)\) for the merge and period calculation, which is optimal for the given constraints.
