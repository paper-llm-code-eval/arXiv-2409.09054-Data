---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to handle the intervals of days and determine the longest period of continuous work and the longest period of no work. The core idea revolves around sorting the intervals and then merging them to find the required periods.

Here's the step-by-step approach to solve it:

1. **Reading Input:** First, read all the intervals from the input file.
2. **Sorting Intervals:** Sort the intervals based on their start day. This helps in merging overlapping or consecutive intervals.
3. **Merging Intervals:** Traverse through the sorted intervals and merge them if they overlap or are consecutive. While merging, keep track of the longest work period.
4. **Finding Idle Periods:** As you merge the intervals, also keep track of the gaps between the end of one interval and the start of the next interval to determine the longest idle period.
5. **Output the Results:** Write the longest work period and the longest idle period to the output file.

Here's the efficient C++ implementation of the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream infile("virus.in");
    ofstream outfile("virus.out");

    int n;
    infile >> n;

    vector<pair<int, int>> intervals(n);
    for (int i = 0; i < n; ++i) {
        infile >> intervals[i].first >> intervals[i].second;
    }

    // Sort intervals based on the start day
    sort(intervals.begin(), intervals.end());

    // Merging intervals and finding the longest work and idle periods
    int longest_work_period = 0;
    int longest_idle_period = 0;

    int current_start = intervals[0].first;
    int current_end = intervals[0].second;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].first <= current_end) {
            // If intervals overlap or are consecutive, merge them
            current_end = max(current_end, intervals[i].second);
        } else {
            // Calculate the current work period
            longest_work_period = max(longest_work_period, current_end - current_start);

            // Calculate the idle period between current and next interval
            longest_idle_period = max(longest_idle_period, intervals[i].first - current_end);

            // Move to the next interval
            current_start = intervals[i].first;
            current_end = intervals[i].second;
        }
    }

    // Check last work period
    longest_work_period = max(longest_work_period, current_end - current_start);

    outfile << longest_work_period << " " << longest_idle_period << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the number of intervals and the intervals themselves from `virus.in`.
2. **Sorting Intervals:** We sort the intervals based on their starting day.
3. **Merging Intervals:** We initialize `current_start` and `current_end` to track the current merged interval. As we iterate through the sorted intervals, we check for overlaps or consecutiveness to merge them. If we encounter a non-overlapping interval, we update the longest work and idle periods accordingly.
4. **Output the Results:** Finally, we write the longest continuous work period and the longest idle period to `virus.out`.

This approach ensures that the operations are efficient, leveraging sorting (`O(n log n)`) and a single pass to determine the periods (`O(n)`).
