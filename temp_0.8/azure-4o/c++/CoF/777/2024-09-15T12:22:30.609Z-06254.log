---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we'll use the following approach:

1. **Read the input:** Read the number of intervals and the intervals themselves from the file `virus.in`.
2. **Sort the intervals:** This allows us to process them in order and merge overlapping intervals.
3. **Merge intervals:** While merging, we can calculate the longest period of research and the longest period without research.
4. **Output the results:** Write the results to the file `virus.out`.

Here's the step-by-step explanation:

### Step 1: Read the input
We'll read the number of intervals and the intervals themselves. Given the constraints, we need to handle up to 5,000 intervals efficiently.

### Step 2: Sort the intervals
Sorting the intervals by their starting day will help us easily merge overlapping intervals and calculate the periods of continuous research.

### Step 3: Merge intervals and calculate the periods
As we iterate through the sorted intervals, we merge them if they overlap. We also keep track of the longest period of continuous research and the longest period without research.

### Step 4: Output the results
Finally, we write the results to the output file.

### C++ Implementation
Here's the C++ code implementing the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

struct Interval {
    int start, end;
};

bool compareIntervals(const Interval& i1, const Interval& i2) {
    return i1.start < i2.start;
}

int main() {
    std::ifstream inputFile("virus.in");
    std::ofstream outputFile("virus.out");

    int n;
    inputFile >> n;

    std::vector<Interval> intervals(n);
    for (int i = 0; i < n; ++i) {
        inputFile >> intervals[i].start >> intervals[i].end;
    }

    inputFile.close();

    std::sort(intervals.begin(), intervals.end(), compareIntervals);

    int longestWorkingPeriod = 0;
    int longestIdlePeriod = 0;

    int currentStart = intervals[0].start;
    int currentEnd = intervals[0].end;

    for (int i = 1; i < n; ++i) {
        if (intervals[i].start <= currentEnd) {
            // Merge intervals
            currentEnd = std::max(currentEnd, intervals[i].end);
        } else {
            // Calculate the working period
            longestWorkingPeriod = std::max(longestWorkingPeriod, currentEnd - currentStart);

            // Calculate the idle period
            longestIdlePeriod = std::max(longestIdlePeriod, intervals[i].start - currentEnd);

            // Move to the next interval
            currentStart = intervals[i].start;
            currentEnd = intervals[i].end;
        }
    }

    // Last interval check
    longestWorkingPeriod = std::max(longestWorkingPeriod, currentEnd - currentStart);

    outputFile << longestWorkingPeriod << " " << longestIdlePeriod << std::endl;
    outputFile.close();

    return 0;
}
```

### Explanation:
1. **Reading the input:** The code reads the number of intervals and the intervals themselves from `virus.in`.
2. **Sorting the intervals:** The intervals are sorted based on their starting day using the `std::sort` function.
3. **Merging intervals and calculating periods:** As we process each interval, we merge overlapping intervals and calculate the longest periods of work and idle time.
4. **Writing the output:** The results are written to `virus.out`.

This approach ensures that the time complexity is dominated by the sorting step, which is \(O(n \log n)\), making it efficient for the given constraints.
