---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to minimize the number of fridges required to store all reactives within their specified temperature ranges. Here's a clear step-by-step approach:

1. **Input Reading**: Efficiently read the input data from the file.
2. **Sorting**: Sort the reactives based on their maximum temperature in ascending order. This helps in effectively using the available temperature ranges.
3. **Fridge Allocation**: Use a greedy algorithm to allocate reactives to the minimum number of fridges. We keep assigning reactives to the current fridge as long as they fit within the previously assigned reactive's max temperature.

Let's start by writing the code in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Reactive {
    int minTemp;
    int maxTemp;
};

int main() {
    ifstream inFile("reactivi.in");
    ofstream outFile("reactivi.out");

    int N;
    inFile >> N;

    vector<Reactive> reactives(N);
    for (int i = 0; i < N; ++i) {
        inFile >> reactives[i].minTemp >> reactives[i].maxTemp;
    }

    // Sort reactives by their max temperature
    sort(reactives.begin(), reactives.end(), [](const Reactive &a, const Reactive &b) {
        return a.maxTemp < b.maxTemp;
    });

    int fridges = 0;
    int currentMaxTemp = -101;  // Initialize to a value outside the possible temperature range

    for (const auto &reactive : reactives) {
        if (reactive.minTemp > currentMaxTemp) {
            // Need a new fridge
            ++fridges;
            currentMaxTemp = reactive.maxTemp;
        }
    }

    outFile << fridges << endl;

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation of the Code
1. **Reading Input**: We read the number of reactives `N` and then read `minTemp` and `maxTemp` for each reactive into a vector of `Reactive` structures.
2. **Sorting**: We sort the reactives by their `maxTemp`. This is crucial for the greedy algorithm to work correctly.
3. **Greedy Allocation**:
    - We initialize `currentMaxTemp` to a value outside the possible range of temperatures.
    - We iterate over each reactive and check if its `minTemp` is greater than `currentMaxTemp`. If true, it means we need a new fridge, so we increment the fridge count and update `currentMaxTemp` to the current reactive's `maxTemp`.
4. **Output the Result**: Finally, we write the number of fridges needed to `reactivi.out`.

This solution ensures that we are using the minimum number of fridges possible, and it operates efficiently within the given constraints.
