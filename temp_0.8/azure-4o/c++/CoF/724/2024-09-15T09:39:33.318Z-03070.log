---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem, we need to minimize the number of fridges required to store the chemical reagents given their temperature ranges. Here is a step-by-step plan to achieve this:

1. **Read the input data** from the file `reactivi.in`.
2. **Sort the reagents** based on their maximum temperature in ascending order. Sorting helps to efficiently group overlapping intervals.
3. **Use a greedy algorithm** to determine the minimum number of fridges:
   - Start with the first reagent and set the current fridge's temperature to the maximum temperature of that reagent.
   - For each subsequent reagent, check if it fits in the current fridge (i.e., its minimum temperature is less than or equal to the current fridge's temperature).
   - If it does not fit, start a new fridge with that reagent's maximum temperature.
4. **Write the output** to the file `reactivi.out` with the number of fridges used.

Here is the C++ code that implements the above logic:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Reagent {
    int minTemp;
    int maxTemp;
};

bool compareMaxTemp(const Reagent& a, const Reagent& b) {
    return a.maxTemp < b.maxTemp;
}

int main() {
    std::ifstream infile("reactivi.in");
    std::ofstream outfile("reactivi.out");

    int n;
    infile >> n;

    std::vector<Reagent> reagents(n);

    for (int i = 0; i < n; ++i) {
        infile >> reagents[i].minTemp >> reagents[i].maxTemp;
    }

    // Sort reagents by their maximum storage temperature
    std::sort(reagents.begin(), reagents.end(), compareMaxTemp);

    int fridgeCount = 0;
    int currentFridgeTemp = -101; // A temperature lower than any possible minTemp value

    for (const auto& reagent : reagents) {
        if (reagent.minTemp > currentFridgeTemp) {
            // Need a new fridge
            ++fridgeCount;
            currentFridgeTemp = reagent.maxTemp;
        }
    }

    outfile << fridgeCount << std::endl;

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Code
1. **Reading Input**: The input is read from `reactivi.in` file into a vector of `Reagent` structures, each holding the minimum and maximum temperature for a reagent.
2. **Sorting**: The reagents are sorted based on their maximum temperature using the `std::sort` function with a custom comparator.
3. **Greedy Algorithm**: 
   - Initialize a counter for the number of fridges and set the current fridge temperature to a value less than any possible reagent's minTemp.
   - Iterate over the sorted reagents and check if the current reagent can be stored in the current fridge. If not, increment the fridge count and set the current fridge temperature to the maxTemp of the new reagent.
4. **Writing Output**: The result is written to `reactivi.out` file.

This implementation ensures that we are using the minimum number of fridges by always trying to place a reagent in the fridge with the smallest possible temperature that can still accommodate it. This greedy strategy is optimal for this kind of interval covering problem.
