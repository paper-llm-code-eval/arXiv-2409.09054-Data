---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem of determining the minimum number of refrigerators necessary to store all the reactants based on their temperature requirements, we can use a greedy algorithm approach. The idea is to sort the reactants by their maximum temperature in increasing order, and then use a greedy approach to assign each reactant to the existing refrigerators if possible, or to a new refrigerator if necessary. This approach ensures that we use the minimum number of refrigerators.

Here is the C++ code for the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

struct Reactiv {
    int min_temp;
    int max_temp;
};

// Comparator to sort reactants by their maximum temperature in increasing order
bool compare(const Reactiv &a, const Reactiv &b) {
    return a.max_temp < b.max_temp;
}

int main() {
    std::ifstream infile("reactivi.in");
    std::ofstream outfile("reactivi.out");

    int N;
    infile >> N;
    
    std::vector<Reactiv> reactives(N);
    
    for (int i = 0; i < N; ++i) {
        infile >> reactives[i].min_temp >> reactives[i].max_temp;
    }
    
    // Sort the reactives based on their maximum temperatures
    std::sort(reactives.begin(), reactives.end(), compare);
    
    int refrigerators = 0;
    int current_max_temp = -101; // Initialize to a value less than the minimum possible temperature
    
    for (const auto &reactiv : reactives) {
        if (reactiv.min_temp > current_max_temp) {
            // Need a new refrigerator since no existing one can accommodate this reactant
            ++refrigerators;
            current_max_temp = reactiv.max_temp; // Set the temperature of the new refrigerator
        }
    }
    
    outfile << refrigerators << std::endl;

    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
1. **Reading Input**: The program reads the input from the file `reactivi.in`. It first reads the number of reactants, `N`, and then reads the temperature ranges for each reactant and stores them in a vector of `Reactiv` structures.

2. **Sorting**: The reactants are sorted based on their maximum temperature using the `std::sort` function with a custom comparator. This sorting helps to minimize the number of refrigerators by trying to fit each reactant in the already used refrigerators in a greedy manner.

3. **Greedy Assignment**: We iterate through the sorted list of reactants. For each reactant, we check if it can fit in a refrigerator that is currently being used. If not, we increment the number of refrigerators and set the current maximum temperature to the maximum temperature of the new reactant.

4. **Writing Output**: Finally, the program writes the number of refrigerators needed to the output file `reactivi.out`.

### Example Walkthrough:
For the input:
```
3
-10 10
-2 5
20 50
```
- After sorting by maximum temperature, we get: `[-2, 5]`, `[-10, 10]`, `[20, 50]`.
- The algorithm will first pick `[-2, 5]` needing 1 refrigerator.
- It then picks `[-10, 10]` which can fit in the same refrigerator since its min temp `-10` is less than the current max temp `5`.
- Finally, it picks `[20, 50]` which needs a new refrigerator since its min temp `20` is greater than the current max temp `10`.

Thus, the output will be `2` refrigerators.
