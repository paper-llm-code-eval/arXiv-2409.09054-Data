---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the solution implemented in C++:

```cpp
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

void findExpression(int target, const std::vector<int>& digits, std::string& result, int currentSum = 0, int index = 0, std::string currentExpression = "") {
    if (index == digits.size()) {
        if (currentSum == target) {
            result = currentExpression;
        }
        return;
    }

    if (!result.empty()) return;

    if (index == 0) {
        findExpression(target, digits, result, digits[index], index + 1, std::to_string(digits[index]));
    } else {
        findExpression(target, digits, result, currentSum + digits[index], index + 1, currentExpression + "+" + std::to_string(digits[index]));
        findExpression(target, digits, result, currentSum - digits[index], index + 1, currentExpression + "-" + std::to_string(digits[index]));
    }
}

int main() {
    std::ifstream infile("adunscad.in");
    std::ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;

    std::vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    std::string result;
    findExpression(N, digits, result);

    if (result.empty()) {
        outfile << "0";
    } else {
        outfile << result;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **File Input/Output**:
   - We use `ifstream` to read the input data from "adunscad.in".
   - `ofstream` is used to write the output data to "adunscad.out".

2. **Reading Input**:
   - The first line contains two integers, `N` and `M`.
   - The second line contains `M` digits.

3. **Recursive Function `findExpression`**:
   - This function tries to form an expression that evaluates to the target value `N`.
   - The base case checks if all digits have been used and if the current sum matches the target.
   - The recursive case tries adding and subtracting the next digit.

4. **Main Logic**:
   - The main function reads the input, initializes the variables, and calls the `findExpression` function.
   - If a valid expression is found, it is written to the output file.
   - If no valid expression is found, `0` is written to the output file.

This approach ensures that we explore all possible combinations of addition and subtraction to form the target value. Given the constraints, this approach will run efficiently within the provided limits.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Based on your feedback, the current solution failed to find the expected result. The recursive function didn't correctly acknowledge the potential need for a negative starting value or the inclusion of all digits in the expression.

To address this, we need to ensure that the function correctly explores all possible expressions and starts with the correct initial value, including potential negative starting values.

Here is the corrected C++ code:

```cpp
#include <fstream>
#include <vector>
#include <string>

void findExpression(int target, const std::vector<int>& digits, std::string& result, int currentSum = 0, int index = 0, std::string currentExpression = "") {
    if (index == digits.size()) {
        if (currentSum == target) {
            result = currentExpression;
        }
        return;
    }

    if (!result.empty()) return;

    if (index == 0) {
        // Start by trying both positive and negative first digit
        findExpression(target, digits, result, digits[index], index + 1, std::to_string(digits[index]));
        findExpression(target, digits, result, -digits[index], index + 1, "-" + std::to_string(digits[index]));
    } else {
        findExpression(target, digits, result, currentSum + digits[index], index + 1, currentExpression + "+" + std::to_string(digits[index]));
        findExpression(target, digits, result, currentSum - digits[index], index + 1, currentExpression + "-" + std::to_string(digits[index]));
    }
}

int main() {
    std::ifstream infile("adunscad.in");
    std::ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;

    std::vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    std::string result;
    findExpression(N, digits, result);

    if (result.empty()) {
        outfile << "0";
    } else {
        outfile << result;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation:

1. **File Input/Output**:
   - `ifstream` reads input from "adunscad.in".
   - `ofstream` writes output to "adunscad.out".

2. **Reading Input**:
   - The first line contains two integers, `N` and `M`.
   - The second line contains `M` digits.

3. **Recursive Function `findExpression`**:
   - This function attempts to form an expression that evaluates to the target value `N`.
   - The base case checks if all digits have been used and if the current sum matches the target.
   - The recursive case explores both adding and subtracting the next digit.
   - For the first digit, both positive and negative values are attempted to ensure all possible expressions are considered.

4. **Main Logic**:
   - The main function initializes variables and calls `findExpression`.
   - If a valid expression is found, it is written to the output file.
   - If no valid expression is found, `0` is written to the output file.

This updated approach correctly explores the positive and negative options for the first digit and ensures that all possible expressions are considered. This should handle the given constraints and produce the expected results.
