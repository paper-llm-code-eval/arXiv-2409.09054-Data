---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Certainly! Let's break down the challenge and solve it step by step.

### Problem Analysis

1. **Input Details**:
   - First line of input contains integers \( N \) and \( M \).
   - Second line contains \( M \) non-zero decimal digits.

2. **Output Requirements**:
   - Output an arithmetic expression formed by the \( M \) digits that evaluates to \( N \) using only '+' and '-' operators.
   - If no such expression exists, output `0`.

### Constraints

- \( -180 \leq N \leq 180 \)
- \( 2 \leq M \leq 20 \)

### Plan

1. **Read the Input**:
   - Use file I/O to read the input.
   
2. **Recursive Backtracking**:
   - Generate all possible expressions using the given digits.
   - Evaluate each expression.
   - Check if any of the expressions evaluate to \( N \).

3. **Output the Result**:
   - Write the valid expression to the output file.
   - If no such expression exists, write `0`.

### Implementation

We will use a recursive backtracking approach to try all possible combinations of '+' and '-' between the digits. This approach ensures we explore all potential solutions.

Below is the C++ code implementing this approach.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

using namespace std;

int target;
vector<int> digits;
string result;

bool evaluateExpression(const string& expr, int index, int currentSum) {
    if (index == digits.size()) {
        return currentSum == target;
    }

    // Try adding the next digit
    if (evaluateExpression(expr + "+" + to_string(digits[index]), index + 1, currentSum + digits[index])) {
        result = expr + "+" + to_string(digits[index]);
        return true;
    }

    // Try subtracting the next digit
    if (evaluateExpression(expr + "-" + to_string(digits[index]), index + 1, currentSum - digits[index])) {
        result = expr + "-" + to_string(digits[index]);
        return true;
    }

    return false;
}

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;
    target = N;

    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    if (evaluateExpression(to_string(digits[0]), 1, digits[0])) {
        outfile << result << endl;
    } else {
        outfile << "0" << endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation

1. **Reading Input**:
   - We read the values of \( N \) and \( M \) from the input file.
   - We then read the digits into a vector.

2. **Recursive Function**:
   - `evaluateExpression` is the recursive function that constructs the arithmetic expressions.
   - It tries both possible operations (`+` and `-`) at each step and checks if the resulting expression matches the target \( N \).
   - It uses backtracking to explore all possible combinations.

3. **Output**:
   - If a valid expression is found, it writes this expression to the output file.
   - If no valid expression is found, it writes `0`.

This solution ensures that all possible expressions are evaluated, and it operates efficiently within the constraints provided.
---------- user ----------


Program result did not match expected result.
Input data:
```
21 4
3 9 1 8
```
Expected output:
```
3+9+1+8
```
Found output:
```
3+9
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I see the issue with the initial solution. The recursive backtracking approach was not correctly handling the entire expression construction, leading to incomplete expressions being evaluated.

Let's reimplement the solution more robustly. This time, we will use a depth-first search (DFS) approach to generate all possible expressions using both '+' and '-' operators and check if any of them evaluate to \(N\).

Here's the corrected solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

int target;
vector<int> digits;
string result;

bool dfs(string expr, int index, int currentSum) {
    // If we have processed all digits, check if we have reached the target
    if (index == digits.size()) {
        if (currentSum == target) {
            result = expr;
            return true;
        }
        return false;
    }

    // Include the next digit with a '+' operator
    if (dfs(expr + "+" + to_string(digits[index]), index + 1, currentSum + digits[index])) {
        return true;
    }

    // Include the next digit with a '-' operator
    if (dfs(expr + "-" + to_string(digits[index]), index + 1, currentSum - digits[index])) {
        return true;
    }

    return false;
}

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;
    target = N;

    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    // Initialize DFS from the first digit
    if (dfs(to_string(digits[0]), 1, digits[0])) {
        outfile << result << endl;
    } else {
        outfile << "0" << endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Fix

1. **DFS Function (`dfs`)**:
    - The `dfs` function is a depth-first search that recursively constructs all possible expressions using the digits.
    - It appends '+' or '-' before each subsequent digit and updates the current sum accordingly.
    - If we reach the end of the digits and the current sum matches the target, it stores the valid expression in `result`.

2. **Initial Call**:
    - We start the DFS traversal with the first digit, passing its value as the initial sum.
    - This ensures that every digit is included in the expression in the correct order and that we explore all possible combinations of '+' and '-' operators.

3. **Output**:
    - If a valid expression is found that evaluates to the target \(N\), it writes the expression to the output file.
    - If no valid expression is found, it writes `0`.

This solution should now correctly handle the given example and all other possible inputs, correctly generating valid expressions or indicating if none exist.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the initial recursive DFS approach was that it did not correctly handle negative targets or cases that required evaluating the expression accurately with both positive and negative sums. To ensure that all possible expressions are evaluated correctly, let's use a more structured approach with an explicit stack to handle the recursive states.

### New Approach

We will use a BFS (Breadth-First Search) approach that uses a queue to iteratively build expressions. This ensures that we explore all possible combinations of '+' and '-' operators.

### Implementation

Below is the corrected C++ code implementing this BFS approach:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

struct State {
    string expr;
    int index;
    int currentSum;
};

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    // Target value to match
    int target = N;

    // BFS initialization
    queue<State> q;
    q.push({to_string(digits[0]), 1, digits[0]});

    bool found = false;
    string result;

    while (!q.empty() && !found) {
        State current = q.front();
        q.pop();

        // If we've used all digits, check the result
        if (current.index == M) {
            if (current.currentSum == target) {
                result = current.expr;
                found = true;
            }
            continue;
        }

        // Add the next digit with a '+' operator
        q.push({current.expr + "+" + to_string(digits[current.index]), current.index + 1, current.currentSum + digits[current.index]});

        // Add the next digit with a '-' operator
        q.push({current.expr + "-" + to_string(digits[current.index]), current.index + 1, current.currentSum - digits[current.index]});
    }

    if (found) {
        outfile << result << endl;
    } else {
        outfile << "0" << endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Rewrite

1. **BFS Approach**:
    - We use a queue to explore all possible expressions iteratively.
    - Each state in the queue represents a partial expression, the current index in the digit list, and the current sum of the expression.

2. **Initial State**:
    - The BFS starts with the first digit, initializing the queue with a state containing the first digit, index `1`, and the value of the first digit.

3. **State Expansion**:
    - For each state, we consider two new states by adding the next digit with both a '+' and a '-' operator.
    - We push these new states back into the queue for further exploration.

4. **Checking for Solution**:
    - If we reach the end of the digit list and the current sum matches the target, we store the expression and mark it as found.
    - If no such expression is found after the BFS completes, we output `0`.

### Benefits of BFS

- Ensures all possible combinations are explored.
- Avoids issues with recursion depth and stack overflow.
- Provides a clear and structured method to handle expression construction and evaluation.

This approach should correctly handle the given example and other cases, providing valid expressions or indicating if none exist.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

After re-evaluating the solution, I realized that the BFS approach was correct in concept but failed to properly initialize the starting state to account for the possibility of the initial digit being used with a '-' operator to achieve negative values. 

To address this, we need to consider both the possibility of starting the expression with a positive or negative initial digit. To handle this, we will initiate two states: one starting with a positive sign and another with a negative sign for the first digit.

Here is the corrected solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

struct State {
    string expr;
    int index;
    int currentSum;
};

int main() {
    ifstream infile("adunscad.in");
    ofstream outfile("adunscad.out");

    int N, M;
    infile >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        infile >> digits[i];
    }

    // Target value to match
    int target = N;

    // BFS initialization
    queue<State> q;
    q.push({to_string(digits[0]), 1, digits[0]});
    q.push({"-" + to_string(digits[0]), 1, -digits[0]});

    bool found = false;
    string result;

    while (!q.empty() && !found) {
        State current = q.front();
        q.pop();

        // If we've used all digits, check the result
        if (current.index == M) {
            if (current.currentSum == target) {
                result = current.expr;
                found = true;
            }
            continue;
        }

        // Add the next digit with a '+' operator
        q.push({current.expr + "+" + to_string(digits[current.index]), current.index + 1, current.currentSum + digits[current.index]});

        // Add the next digit with a '-' operator
        q.push({current.expr + "-" + to_string(digits[current.index]), current.index + 1, current.currentSum - digits[current.index]});
    }

    if (found) {
        outfile << result << endl;
    } else {
        outfile << "0" << endl;
    }

    infile.close();
    outfile.close();

    return 0;
}
```

### Explanation of the Fix

1. **Initialization**:
    - We initialize the BFS queue with two starting states: one treating the first digit as positive and another treating it as negative. This ensures that expressions starting with a negative first digit are also considered.

2. **State Expansion**:
    - For each state, we create new states by appending the next digit with both '+' and '-' operators.

3. **Solution Checking**:
    - If the end of the digits list is reached, we check if the current sum matches the target. If so, we save the expression and terminate the search.

### Benefits of Double Initialization

- This ensures that the initial digit can be treated as either positive or negative, covering all possible valid arithmetic expressions.
- The BFS approach ensures that all possible expressions are explored without recursion stack overflow issues.

This revised approach should now correctly handle the example input and other edge cases, providing valid expressions or indicating no solution exists.
