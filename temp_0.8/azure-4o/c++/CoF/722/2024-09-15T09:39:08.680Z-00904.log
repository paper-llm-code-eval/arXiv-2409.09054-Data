---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `taxe.in` and write to `taxe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o ţară în care corupţia este în floare şi economia la pământ, pentru a obţine toate aprobările necesare în scopul demarării unei afaceri, investitorul trebuie să treacă prin mai multe camere ale unei clădiri în care se află birouri.

Clădirea are un singur nivel în care birourile sunt lipite unele de altele formând un caroiaj pătrat de dimensiune $n \times n$. Pentru a facilita accesul în birouri, toate camerele vecine au uşi între ele. În fiecare birou se află un funcţionar care pretinde o taxă de trecere prin cameră (taxă ce poate fi, pentru unele camere, egală cu $0$). Investitorul intră încrezător prin colţul din stânga-sus al clădirii (cum se vede de sus planul clădirii) şi doreşte să ajungă în colţul opus al clădirii, unde este ieşirea, plătind o taxă totală cât mai mică.

# Cerinţă

Ştiind că el are în buzunar $S$ _euro_ şi că fiecare funcţionar îi ia taxa de cum intră în birou, se cere să se determine dacă el poate primi aprobările necesare şi, în caz afirmativ, care este suma maximă de bani care îi rămâne în buzunar la ieşirea din clădire.

# Date de intrare


Fişierul de intrare `taxe.in` conţine pe prima linie cele două numere $S$ şi $n$ despărţite printr-un spaţiu, iar pe următoarele $n$ linii câte $n$ numere separate prin spaţii ce reprezintă taxele cerute de funcţionarii din fiecare birou.


# Date de ieșire


Fişierul de ieşire `taxe.out` conţine o singură linie pe care se află numărul maxim de euro care îi rămân în buzunar sau valoarea $–1$ dacă investitorului nu-i ajung banii pentru a obţine aprobarea.

# Restricții și precizări

* $3 \leq N \leq 100$
* $1 \leq S \leq 10 \ 000$
* Valorile reprezentând taxele cerute de funcţionarii din birouri sunt numere naturale, o taxă nedepăşind valoarea de $200$ de _euro_.

---

Example:
`taxe.in`
```
10 3
1 2 5
1 3 1
0 8 1
```

`taxe.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, you can use a dynamic programming approach. The goal is to find the path with the minimum tax from the top-left corner to the bottom-right corner of the grid. Here’s how you can implement this solution:

1. **Initialize a DP table**: Create a 2D table to store the minimum tax required to reach each cell from the starting cell.
2. **Fill the DP table**: Use dynamic programming to fill this table by checking the minimum tax required to reach each cell from its neighbors (either from the left or from the top).
3. **Check feasibility**: After filling the table, check if the minimum tax required to reach the bottom-right corner is less than or equal to the initial amount `S`. If it is, calculate the remaining amount of money; otherwise, output `-1`.

Here is the C++ code to achieve the solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int main() {
    ifstream infile("taxe.in");
    ofstream outfile("taxe.out");

    int S, n;
    infile >> S >> n;

    vector<vector<int>> taxes(n, vector<int>(n));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            infile >> taxes[i][j];
        }
    }

    vector<vector<int>> dp(n, vector<int>(n, INT_MAX));
    dp[0][0] = taxes[0][0];

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (i > 0)
                dp[i][j] = min(dp[i][j], dp[i-1][j] + taxes[i][j]);
            if (j > 0)
                dp[i][j] = min(dp[i][j], dp[i][j-1] + taxes[i][j]);
        }
    }

    int totalTaxes = dp[n-1][n-1];
    if (totalTaxes <= S) {
        outfile << S - totalTaxes << endl;
    } else {
        outfile << -1 << endl;
    }

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation:
1. **Reading Input**:
   - We read the initial amount `S` and the dimension `n` of the grid.
   - We then read the `n x n` grid of taxes into a 2D vector `taxes`.

2. **Initialize DP Table**:
   - We create a `dp` table initialized with `INT_MAX` to store the minimum tax needed to reach each cell.
   - The starting cell's tax is directly copied from the `taxes` input.

3. **Filling DP Table**:
   - We iterate through each cell of the grid.
   - For each cell, we update the minimum tax required to reach it from its top or left neighbor (if they exist).

4. **Output Result**:
   - After filling the `dp` table, we check if the investor can reach the bottom-right corner with the initial amount `S`.
   - If possible, we calculate and output the remaining money; otherwise, we output `-1`.

This ensures that the solution is both correct and efficient, adhering to the problem constraints.
