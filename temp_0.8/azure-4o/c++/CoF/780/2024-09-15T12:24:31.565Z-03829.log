---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve the problem efficiently, we need to simulate the board, place the black rectangles on it, and then count the number of maximal white regions. Here's the step-by-step approach we'll follow:

1. **Reading Input:** Read the number of rectangles, dimensions of the board, and the coordinates of the rectangles from the file `colaj.in`.
2. **Simulating the Board:** Use a 2D grid to represent the board, marking cells covered by black rectangles.
3. **Flood Fill Algorithm:** Use a flood fill (BFS/DFS) algorithm to count the number of maximal white regions.
4. **Writing Output:** Write the result to `colaj.out`.

Let's then implement this in C++:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>

using namespace std;

// A structure to store the coordinates
struct Rect {
    int x1, y1, x2, y2;
};

int main() {
    ifstream fin("colaj.in");
    ofstream fout("colaj.out");
    
    int n, m, p;
    fin >> n >> m >> p;
    
    vector<Rect> rectangles(n);
    for (int i = 0; i < n; i++) {
        fin >> rectangles[i].x1 >> rectangles[i].y1 >> rectangles[i].x2 >> rectangles[i].y2;
    }
    
    // Initialize the board
    vector<vector<bool>> board(m, vector<bool>(p, false));
    
    // Mark black rectangles on the board
    for (const auto &rect : rectangles) {
        for (int x = rect.x1; x < rect.x2; x++) {
            for (int y = rect.y1; y < rect.y2; y++) {
                board[x][y] = true;
            }
        }
    }
    
    // Directions for moving in the grid (up, down, left, right)
    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    // Function to perform BFS and mark the visited cells
    auto bfs = [&](int startX, int startY) {
        queue<pair<int, int>> q;
        q.push({startX, startY});
        board[startX][startY] = true; // Mark as visited
        
        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();
            
            for (const auto &dir : directions) {
                int newX = x + dir.first;
                int newY = y + dir.second;
                
                // Check if the new position is within bounds and not visited
                if (newX >= 0 && newX < m && newY >= 0 && newY < p && !board[newX][newY]) {
                    board[newX][newY] = true;
                    q.push({newX, newY});
                }
            }
        }
    };
    
    int whiteRegions = 0;
    
    // Count the number of white regions using BFS
    for (int x = 0; x < m; x++) {
        for (int y = 0; y < p; y++) {
            if (!board[x][y]) {
                whiteRegions++;
                bfs(x, y);
            }
        }
    }
    
    // Write the result to the output file
    fout << whiteRegions << endl;
    
    return 0;
}
```

### Explanation:
1. **Reading Input:** We read the input values from `colaj.in` using `ifstream`.
2. **Board Initialization:** We initialize a 2D vector `board` of size `m` x `p` where each cell is initially `false`.
3. **Marking Black Rectangles:** For each rectangle, we mark the corresponding cells on the board as `true`.
4. **BFS Function:** We define a BFS function to traverse and mark all connected cells starting from a given cell.
5. **Counting White Regions:** We iterate through all cells in the board, and whenever we find an unvisited cell (`false`), we increment our white region count and call BFS to mark all connected cells.
6. **Writing Output:** Finally, we write the number of white regions to `colaj.out`.

This solution should efficiently solve the problem within the given constraints.
