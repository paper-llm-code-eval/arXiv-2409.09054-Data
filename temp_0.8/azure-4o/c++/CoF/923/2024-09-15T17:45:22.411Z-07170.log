---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `foto.in` and write to `foto.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O fotografie alb-negru a surprins imaginea fulgerelor pe cerul întunecat în timpul unei furtuni electrice. Mărită, fotografia arată ca un caroiaj format din mici pătrate identice, albe sau negre, dispuse alăturat pe $N$ rânduri și $M$ coloane, câte $M$ pe fiecare rând. **Pătratele albe** formează fulgerele din fotografie, iar **pătratele negre** reprezintă cerul. În fotografie, nu există două pătrate albe dispuse alăturat pe același rând. **Un fulger** este format din pătrate albe situate pe rânduri consecutive care respectă următoarele condiții:
- pătratele albe situate pe două rânduri consecutive au un vârf comun sau o latură comună;
- un fulger poate avea un singur pătrat alb pe un rând.

În fotografie, fulgerele sunt **distincte**, ele neavând pătrate albe cu laturi sau vârfuri comune. **Înălțimea unui fulger** este dată de numărul de pătrate albe ale acelui fulger.

\
~[foto.png|align=right|width=30em]
Pentru a putea fi analizată de către programatori, fotografia este codificată cu ajutorul unui tablou bidimensional cu $N$ linii și $M$ coloane, ale cărui elemente sunt $0$ și $1$. Valoarea $0$ este codificarea pătratului negru, iar valoarea $1$ este codificarea pătratului alb.

Având codificarea, programatorii trebuie să găsească numărul maxim $P$ de pătrate negre dispuse alăturat pe același rând, numărul de fulgere $F$ precum și înălțimea maximă $H$ a unui fulger din fotografie. De exemplu, fotografia alăturată este codificată de tabloul $T$ alăturat fotografiei.

# Cerință
Scrieţi un program care citeşte numerele $N$ și $M$, cele $N \cdot M$ elemente ale tabloului $T$ care codifică fotografia, și rezolvă următoarele cerințe:
1) afișează numărul maxim $P$ de pătrate negre dispuse alăturat pe un rând în fotografie;
2) afișează numărul $F$ de fulgere și înălțimea maximă $H$ a unui fulger din fotografie.

# Date de intrare
Fișierul de intrare `foto.in` conține pe prima linie un număr natural $C$ reprezentând cerința care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află cele două numere naturale $N$ și $M$, separate printr-un spațiu, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ valori $0$ sau $1$, separate prin câte un spațiu, reprezentând elementele tabloului care codifică fotografia, în ordinea parcurgerii lor pe rânduri, de sus în jos, și de la stânga la dreapta în cadrul unui rând.

# Date de ieșire
Fişierul de ieşire `foto.out` va conţine, pe o singură linie:
- dacă $C=1$, numărul $P$, reprezentând răspunsul la cerinţa $1$;
- dacă $C=2$, cele două numere $F$ și $H$, în această ordine, separate printr-un singur spațiu, reprezentând răspunsul la cerinţa $2$.

# Restricții și precizări
- $N$ număr natural, $4 \leq N \leq 100$.
- $M$ număr natural, $4 \leq M \leq 100$.
- Pentru rezolvarea cerinței 1:
	- Se acordă 20 de puncte.
	- Fiecare test este în valoare de 2 puncte.
- Pentru rezolvarea cerinței 2:
	- Se acordă 70 de puncte.
	- Fiecare test pentru această cerință este în valoare de 7 puncte:
		- 3 puncte pentru valoarea corectă a lui $F$;
		- 4 puncte pentru valoarea corectă a lui $H$.
	- Această cerință necesită ca **în fișierul de ieșire să existe exact 2 numere**.

---

Example:
`foto.in`
```
1
6 7
0 1 0 0 1 0 0
1 0 0 0 1 0 0
0 0 1 0 0 0 1
0 1 0 0 0 1 0
0 1 0 0 1 0 0
0 0 1 0 1 0 1
```

`foto.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

void solveC1(const vector<vector<int>>& T, int N, int M, ofstream& fout) {
    int maxBlackSeq = 0;
    for (int i = 0; i < N; ++i) {
        int currentBlackSeq = 0;
        for (int j = 0; j < M; ++j) {
            if (T[i][j] == 0) {
                ++currentBlackSeq;
                maxBlackSeq = max(maxBlackSeq, currentBlackSeq);
            } else {
                currentBlackSeq = 0;
            }
        }
    }
    fout << maxBlackSeq << "\n";
}

bool isLightningPart(const vector<vector<int>>& T, int x, int y, int N, int M) {
    if (x == 0) return true;
    if (y > 0 && T[x-1][y-1] == 1) return true;
    if (T[x-1][y] == 1) return true;
    if (y < M-1 && T[x-1][y+1] == 1) return true;
    return false;
}

void solveC2(const vector<vector<int>>& T, int N, int M, ofstream& fout) {
    int F = 0, maxH = 0;
    vector<vector<int>> visited(N, vector<int>(M, 0));
    
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            if (T[i][j] == 1 && !visited[i][j]) {
                ++F;
                int height = 0;
                int x = i, y = j;
                while (x < N && T[x][y] == 1) {
                    visited[x][y] = 1;
                    ++height;
                    bool foundNext = false;
                    for (int dy = -1; dy <= 1; ++dy) {
                        int newY = y + dy;
                        if (newY >= 0 && newY < M && x + 1 < N && T[x + 1][newY] == 1 && !visited[x + 1][newY]) {
                            x = x + 1;
                            y = newY;
                            foundNext = true;
                            break;
                        }
                    }
                    if (!foundNext) break;
                }
                maxH = max(maxH, height);
            }
        }
    }

    fout << F << " " << maxH << "\n";
}

int main() {
    ifstream fin("foto.in");
    ofstream fout("foto.out");

    int C, N, M;
    fin >> C >> N >> M;

    vector<vector<int>> T(N, vector<int>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            fin >> T[i][j];
        }
    }

    if (C == 1) {
        solveC1(T, N, M, fout);
    } else if (C == 2) {
        solveC2(T, N, M, fout);
    }

    return 0;
}
```

### Explanation

1. **Read Input**: Read the input from `foto.in` and store it in the matrix `T`.
2. **Solving for C=1**:
    - Iterate through each row, counting consecutive black squares (0s) and keep track of the maximum count.
3. **Solving for C=2**:
    - Use a visited matrix to keep track of the squares that have already been checked.
    - Iterate through each cell, and if it's white (1) and not visited, start a new lightning.
    - Track the height of the lightning by following white squares on consecutive rows that are adjacent (diagonally or directly below).
    - Keep track of the maximum height of any lightning and the count of lightnings found.
4. **Output**: Write the result to `foto.out` based on the value of `C`.

This solution ensures efficient parsing and processing of input data with nested loops, maintaining an O(N*M) complexity, suitable for the given constraints.
