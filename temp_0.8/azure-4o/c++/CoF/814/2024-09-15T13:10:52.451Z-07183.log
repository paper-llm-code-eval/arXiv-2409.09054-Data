---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here's the full C++ solution for the given problem. The solution reads from `comp.in` and writes to `comp.out` without using `cin`, `cout`, `printf()`, or `scanf()`. 

The approach includes:
1. Parsing the eudorian number format to its integer equivalent.
2. Evaluating the expressions.
3. Comparing the results of the expressions.
4. Outputting the results.

Here's the code:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cctype>
#include <unordered_map>

using namespace std;

unordered_map<char, int> unitMultiplier = {
    {'m', 1000},
    {'s', 100},
    {'z', 10},
    {'u', 1}
};

int parseEudorianNumber(const string& num) {
    int total = 0;
    int length = num.length();
    int value = 0;
    for (int i = 0; i < length; ++i) {
        if (isdigit(num[i])) {
            value = value * 10 + (num[i] - '0');
        } else {
            total += value * unitMultiplier[num[i]];
            value = 0;
        }
    }
    return total;
}

int evaluateExpression(const string& expr) {
    int total = 0;
    size_t pos = 0, nextPos;
    while ((nextPos = expr.find('+', pos)) != string::npos) {
        total += parseEudorianNumber(expr.substr(pos, nextPos - pos));
        pos = nextPos + 1;
    }
    total += parseEudorianNumber(expr.substr(pos));
    return total;
}

int main() {
    ifstream inFile("comp.in");
    ofstream outFile("comp.out");

    int N;
    inFile >> N;
    inFile.ignore();

    vector<int> results;
    int lessThanCount = 0;

    for (int i = 0; i < N; ++i) {
        string line;
        getline(inFile, line);

        size_t pos = line.find('>');
        char comparisonOp = '>';
        if (pos == string::npos) {
            pos = line.find('<');
            comparisonOp = '<';
            lessThanCount++;
        }

        string expr1 = line.substr(0, pos);
        string expr2 = line.substr(pos + 1);

        int value1 = evaluateExpression(expr1);
        int value2 = evaluateExpression(expr2);

        if ((comparisonOp == '>' && value1 > value2) || (comparisonOp == '<' && value1 < value2)) {
            results.push_back(1);
        } else {
            results.push_back(0);
        }
    }

    outFile << lessThanCount << '\n';
    for (int result : results) {
        outFile << result << '\n';
    }

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation
1. **parseEudorianNumber**: Converts a single eudorian number (e.g., `3m2s7u`) to its integer equivalent.
2. **evaluateExpression**: Evaluates an expression consisting of multiple eudorian numbers separated by `+`.
3. **Main Function**:
   - Reads the input from `comp.in`.
   - Parses each line to determine the comparison operator (`<` or `>`).
   - Evaluates both expressions.
   - Compares the evaluated values and records the result.
   - Outputs the count of `<` comparisons and the results of all comparisons to `comp.out`.

### Testing
To test this solution, you can create the `comp.in` file with the example input provided, run the program, and check the `comp.out` file for the correct output.
