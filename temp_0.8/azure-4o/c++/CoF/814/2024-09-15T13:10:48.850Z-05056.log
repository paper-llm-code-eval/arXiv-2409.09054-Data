---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `comp.in` and write to `comp.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Locuitorii planetei Eudora folosesc o reprezentare mai ciudată a numerelor naturale, astfel că orice număr natural va fi scris notând câte mii, sute, zeci, respectiv unități conține acesta. De exemplu, numărul $3207$ se poate reprezenta în mai multe moduri echivalente: $3m2s7u$ ($3$ mii $2$ sute și $7$ unități), $32s0z7u$ ($32$ sute $0$ zeci și $7$ unități), $32s7u$, $3207u$, etc.

Pentru a compara două numere naturale, eudorienii folosesc semnele `<` și `>`, acestea având semnificația cunoscută și pe Terra, iar pentru a calcula suma a două numere naturale utilizează semnul `+`.

Pentru a testa abilitățile pământenilor în privința lucrului cu numere naturale, eudorienii au trimis pe Terra un fișier text ce conține $N$ linii, fiecare linie fiind o comparație de forma: `expresie1 > expresie2` sau `expresie1 < expresie2`.

Observați că o comparație este constituită din două expresii separate prin semnul < sau prin semnul >.

O expresie este compusă dintr-un număr natural sau dintr-o sumă de două sau mai multe numere naturale, toate scrise în forma eudoriană. Fișierul nu conține caractere spațiu.

# Cerință

Scrieți un program care determină câte dintre comparațiile date utilizează semnul <, precum și valoarea de adevăr a fiecărei comparații dintre cele $N$ date (afișând $0$ dacă acea comparație e falsă, respectiv $1$ dacă acea comparație e adevărată).

# Date de intrare

Fișierul de intrare `comp.in` conține pe prima linie numărul natural nenul $N$, reprezentând numărul de comparații, iar pe fiecare dintre următoarele $N$ linii câte un șir de caractere corespunzător unei comparații.

# Date de ieșire

Fișierul de ieșire `comp.out` va conține pe prima linie un număr natural reprezentând numărul de comparații în care se utilizează semnul <. Urmează $N$ linii, fiecare linie conținând doar valoarea $0$ sau valoarea $1$. Valoarea de pe a i-a linie dintre cele $N$ este $0$, dacă cea de-a i-a comparație din fișierul de intrare este falsă, respectiv $1$ în caz contrar.

# Restricții și precizări

* $0 < N \leq 1 \ 000$;
* Numerele din fișier nu depășesc în valoare numărul eudorian $1000m1000s1000z1000u$.
* Lungimea fiecărei linii din fișier este cel mult $250$.

---

Example:
`comp.in`
```
2
120u+7z13u>2s13u
1m11s+2z+1u<2m1s2z5u+0u
```

`comp.out`
```
1
0
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's work through the problem by breaking it down into clear steps:

1. **Parse the Input:**
   - Read the number of comparisons.
   - Extract each comparison from the input file.

2. **Convert Eudorian Numbers to Standard Integers:**
   - Parse Eudorian numbers and convert them into standard integer values for comparison.
   - For each number, identify the segments (m, s, z, u) and calculate their values in the standard form.

3. **Evaluate Expressions:**
   - Handle expressions that involve summation.
   - Compute the total value of an expression by summing up individual Eudorian numbers.

4. **Compare Expressions:**
   - Compare the evaluated values of the two expressions in each comparison.
   - Track the number of comparisons that use the '<' operator.

5. **Output the Results:**
   - Write the number of comparisons using '<' to the output file.
   - Write '0' or '1' based on the truth value of each comparison to the output file.

Below is the complete C++ code to solve the challenge:

```cpp
#include <iostream>
#include <fstream>
#include <string>
#include <regex>

int convertEudorianToInteger(const std::string& eudorian) {
    std::regex re("(\\d+)m|(\\d+)s|(\\d+)z|(\\d+)u");
    std::smatch match;
    std::string::const_iterator searchStart(eudorian.cbegin());
    int total = 0;
    
    while (std::regex_search(searchStart, eudorian.cend(), match, re)) {
        if (match[1].matched) total += std::stoi(match[1]) * 1000;
        if (match[2].matched) total += std::stoi(match[2]) * 100;
        if (match[3].matched) total += std::stoi(match[3]) * 10;
        if (match[4].matched) total += std::stoi(match[4]);
        searchStart = match.suffix().first;
    }
    return total;
}

int evaluateExpression(const std::string& expr) {
    std::regex re("(\\d+m\\d*s\\d*z\\d*u|\\d+m\\d*s\\d*z|\\d+m\\d*s|\\d+m|\\d+s\\d*z\\d*u|\\d+s\\d*z|\\d+s|\\d+z\\d*u|\\d+u)");
    std::smatch match;
    std::string::const_iterator searchStart(expr.cbegin());
    int total = 0;
    
    while (std::regex_search(searchStart, expr.cend(), match, re)) {
        total += convertEudorianToInteger(match[0]);
        searchStart = match.suffix().first;
    }
    return total;
}

int main() {
    std::ifstream infile("comp.in");
    std::ofstream outfile("comp.out");
    
    int N;
    infile >> N;
    infile.ignore();  // To ignore the newline character after N
    
    std::vector<int> results;
    int lessThanCount = 0;
    
    for (int i = 0; i < N; ++i) {
        std::string comparison;
        std::getline(infile, comparison);
        
        std::regex re("(.*)(<|>)(.*)");
        std::smatch match;
        std::regex_match(comparison, match, re);
        
        std::string leftExpr = match[1];
        std::string op = match[2];
        std::string rightExpr = match[3];
        
        int leftValue = evaluateExpression(leftExpr);
        int rightValue = evaluateExpression(rightExpr);
        
        if (op == "<") {
            lessThanCount++;
            results.push_back(leftValue < rightValue);
        } else {
            results.push_back(leftValue > rightValue);
        }
    }
    
    outfile << lessThanCount << "\n";
    for (const auto& result : results) {
        outfile << result << "\n";
    }
    
    infile.close();
    outfile.close();
    
    return 0;
}
```

### Explanation:
- **convertEudorianToInteger:** Converts a single Eudorian number (e.g., `1m2s3z4u`) to its integer equivalent by parsing the parts and summing them up.
- **evaluateExpression:** Evaluates an entire expression which may involve summation of multiple Eudorian numbers by calling `convertEudorianToInteger` for each part and summing the results.
- **Main Function:** Reads the input, processes the comparisons, computes the results, and writes the output.

This solution ensures efficient parsing and calculation while adhering to the problem constraints.
