{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-4o",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-4o/c++/CoF/801/2024-09-15T12:50:17.199Z-00245.log",
  "attemptStart": 1726404617.2,
  "attemptEnd": 1726404630.739,
  "attemptDuration": 13.539000034332275,
  "code": "#include <iostream>\n#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nint main() {\n    std::ifstream infile(\"cladiri.in\");\n    std::ofstream outfile(\"cladiri.out\");\n\n    int long_seism, lat_seism, intensity;\n    infile >> long_seism >> lat_seism >> intensity;\n\n    struct Building {\n        int longitude;\n        int latitude;\n        int resistance;\n    };\n    \n    std::vector<Building> buildings;\n    int long_b, lat_b, res_b;\n\n    while (infile >> long_b >> lat_b >> res_b) {\n        buildings.push_back({long_b, lat_b, res_b});\n    }\n\n    int n = buildings.size();\n    int total_affected = 0;\n    std::unordered_map<int, int> level_count;\n\n    for (const auto& b : buildings) {\n        int level = std::max(abs(b.longitude - long_seism), abs(b.latitude - lat_seism));\n        int effective_intensity = intensity - level;\n        if (effective_intensity >= b.resistance) {\n            total_affected++;\n            level_count[level]++;\n        }\n    }\n\n    int max_affected = 0;\n    std::vector<int> max_levels;\n\n    for (const auto& lc : level_count) {\n        if (lc.second > max_affected) {\n            max_affected = lc.second;\n            max_levels.clear();\n            max_levels.push_back(lc.first);\n        } else if (lc.second == max_affected) {\n            max_levels.push_back(lc.first);\n        }\n    }\n\n    outfile << total_affected << \"\\n\" << max_affected << \"\\n\";\n    std::sort(max_levels.begin(), max_levels.end());\n    for (size_t i = 0; i < max_levels.size(); i++) {\n        if (i > 0) outfile << \" \";\n        outfile << max_levels[i];\n    }\n    outfile << \"\\n\";\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1886,
  "metadata": {
    "id": 801,
    "examples": [
      {
        "in": "12 7 11\n10 9 2\n10 7 3\n13 5 1\n8 11 4\n8 7 6\n15 4 3\n15 9 10\n13 10 1\n16 8 4",
        "out": "8\n3\n2 4",
        "explainer": ""
      },
      {
        "in": "3 3 3\n1 3 5\n2 4 7\n3 2 9",
        "out": "0\n0",
        "explainer": ""
      }
    ],
    "body": "Institutul de Fizică a Pământului studiază efectele unui potențial cutremur folosind simulări computerizate. Harta plană a clădirilor de pe un teritoriu oarecare este reprezentată folosind coordonatele GPS în plan, longitudine și latitudine, față de un reper considerat de coordonate ($0, 0$), ca în figura de mai jos.\n\nFiecare dintre clădirile aflate pe hartă, au două coordonate GPS, (Longitudine, Latitudine) și un Grad de rezistență la cutremure.\nUn cutremur se poate produce în orice punct de coordonate de pe hartă, numit centrul seismului și are o anumită intensitate. Unda de șoc se propagă sub forma unor pătrate concentrice cu centrul seismului, numite nivele (nivelul $0$ reprezintă centrul seismului, nivelul $1$ primul pătrat concentric, nivelul $2$ al doilea pătrat concentric și așa mai departe). Intensitatea slăbește la fiecare pătrat concentric cu centrul seismului cu câte o unitate. Clădirile sunt afectate de cutremur doar dacă gradul lor de rezistență la cutremur este mai mic sau egal cu intensitatea cutremurului în poziția clădirii.\n\n~[cladiri.png]\n\n# Cerință\n\nScrieți un program care să citească coordonatele centrului seismului și intensitatea sa în acel punct, precum și coordonatele clădirilor și gradul lor de rezistență la cutremur, și apoi să determine numărul $N$ total de clădiri afectate; numărul $M$ maxim de clădiri afectate pe un nivel; numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.\n\n# Date de intrare\n\nFișierul de intrare `cladiri.in` conține pe prima linie, trei numere naturale $Long \\ Lat \\ Intensitate$, separate prin câte un spațiu, reprezentând coordonatele centrului seismului și respectiv intensitatea sa. Pe fiecare dintre următoarele linii, până la sfârșitul fișierului, se află câte trei numere naturale $Long \\ Lat \\ Grad$, separate prin câte un spațiu, reprezentând coordonatele unei clădiri, respectiv gradul de rezistență la cutremur.\n\n# Date de ieșire\n\nFișierul de ieșire `cladiri.out` va conține trei linii. Pe prima linie se va scrie numărul natural $N$ reprezentând numărul total de clădiri afectate. Pe a doua linie se va scrie numărul natural $M$ reprezentând numărul maxim de clădiri afectate pe un nivel. Pe a treia linie se vor scrie numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.\n\n# Restricții și precizări\n\n* $0 \\leq$ Long, Lat, Grad, Intensitate $\\leq 10 \\ 000$;\n* $0 <$ număr clădiri $\\leq 100 \\ 000$;\n* În centrul seismului se pot afla clădiri.\n* Nu există mai multe clădiri cu aceleași coordonate.\n* $52$% din punctaj se poate obţine pe teste de intrare cu $0 \\leq Long, Lat, Grad, Intensitate \\leq 100$\n* se acordă punctaje parţiale din punctajul acordat pe fiecare test, astfel: $25$% pentru cerinţa a), $25$% pentru cerinţa b), respectiv $50$% pentru cerinţa c).",
    "header": {
      "problem_id": 801,
      "problem_name": "cladiri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "cladiri.in",
      "output_filename": "cladiri.out",
      "multiple_solutions": true,
      "original_source": "OJI 2010 VIII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "cladiri.in",
      "output": "cladiri.out"
    },
    "consoleInteraction": false
  }
}