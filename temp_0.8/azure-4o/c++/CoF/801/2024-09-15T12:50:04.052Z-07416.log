---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cladiri.in` and write to `cladiri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Institutul de Fizică a Pământului studiază efectele unui potențial cutremur folosind simulări computerizate. Harta plană a clădirilor de pe un teritoriu oarecare este reprezentată folosind coordonatele GPS în plan, longitudine și latitudine, față de un reper considerat de coordonate ($0, 0$), ca în figura de mai jos.

Fiecare dintre clădirile aflate pe hartă, au două coordonate GPS, (Longitudine, Latitudine) și un Grad de rezistență la cutremure.
Un cutremur se poate produce în orice punct de coordonate de pe hartă, numit centrul seismului și are o anumită intensitate. Unda de șoc se propagă sub forma unor pătrate concentrice cu centrul seismului, numite nivele (nivelul $0$ reprezintă centrul seismului, nivelul $1$ primul pătrat concentric, nivelul $2$ al doilea pătrat concentric și așa mai departe). Intensitatea slăbește la fiecare pătrat concentric cu centrul seismului cu câte o unitate. Clădirile sunt afectate de cutremur doar dacă gradul lor de rezistență la cutremur este mai mic sau egal cu intensitatea cutremurului în poziția clădirii.

~[cladiri.png]

# Cerință

Scrieți un program care să citească coordonatele centrului seismului și intensitatea sa în acel punct, precum și coordonatele clădirilor și gradul lor de rezistență la cutremur, și apoi să determine numărul $N$ total de clădiri afectate; numărul $M$ maxim de clădiri afectate pe un nivel; numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Date de intrare

Fișierul de intrare `cladiri.in` conține pe prima linie, trei numere naturale $Long \ Lat \ Intensitate$, separate prin câte un spațiu, reprezentând coordonatele centrului seismului și respectiv intensitatea sa. Pe fiecare dintre următoarele linii, până la sfârșitul fișierului, se află câte trei numere naturale $Long \ Lat \ Grad$, separate prin câte un spațiu, reprezentând coordonatele unei clădiri, respectiv gradul de rezistență la cutremur.

# Date de ieșire

Fișierul de ieșire `cladiri.out` va conține trei linii. Pe prima linie se va scrie numărul natural $N$ reprezentând numărul total de clădiri afectate. Pe a doua linie se va scrie numărul natural $M$ reprezentând numărul maxim de clădiri afectate pe un nivel. Pe a treia linie se vor scrie numerele nivelelor cu $M$ clădiri afectate, în ordinea crescătoare a numerelor acestor nivele.

# Restricții și precizări

* $0 \leq$ Long, Lat, Grad, Intensitate $\leq 10 \ 000$;
* $0 <$ număr clădiri $\leq 100 \ 000$;
* În centrul seismului se pot afla clădiri.
* Nu există mai multe clădiri cu aceleași coordonate.
* $52$% din punctaj se poate obţine pe teste de intrare cu $0 \leq Long, Lat, Grad, Intensitate \leq 100$
* se acordă punctaje parţiale din punctajul acordat pe fiecare test, astfel: $25$% pentru cerinţa a), $25$% pentru cerinţa b), respectiv $50$% pentru cerinţa c).

---

Example:
`cladiri.in`
```
12 7 11
10 9 2
10 7 3
13 5 1
8 11 4
8 7 6
15 4 3
15 9 10
13 10 1
16 8 4
```

`cladiri.out`
```
8
3
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>

struct Building {
    int Long, Lat, Grad;
};

int main() {
    std::ifstream inFile("cladiri.in");
    std::ofstream outFile("cladiri.out");

    int seismLong, seismLat, intensity;
    inFile >> seismLong >> seismLat >> intensity;

    std::vector<Building> buildings;
    int bLong, bLat, bGrad;

    // Read buildings data
    while (inFile >> bLong >> bLat >> bGrad) {
        buildings.push_back({bLong, bLat, bGrad});
    }

    int total_affected = 0;
    std::map<int, int> level_count;

    // Process each building
    for (const auto& building : buildings) {
        int distance = std::max(abs(building.Long - seismLong), abs(building.Lat - seismLat));
        int effective_intensity = intensity - distance;

        if (effective_intensity >= building.Grad) {
            total_affected++;
            level_count[distance]++;
        }
    }

    // Find the maximum affected buildings at any level
    int max_affected = 0;
    for (const auto& pair : level_count) {
        if (pair.second > max_affected) {
            max_affected = pair.second;
        }
    }

    // Identify levels with the maximum affected buildings
    std::vector<int> max_levels;
    for (const auto& pair : level_count) {
        if (pair.second == max_affected) {
            max_levels.push_back(pair.first);
        }
    }

    // Sort levels (if needed, already in a map which maintains order)
    std::sort(max_levels.begin(), max_levels.end());

    // Output results
    outFile << total_affected << '\n';
    outFile << max_affected << '\n';
    for (size_t i = 0; i < max_levels.size(); ++i) {
        if (i > 0) outFile << " ";
        outFile << max_levels[i];
    }
    outFile << '\n';

    return 0;
}
```

### Explanation:
1. **Reading the Input**: The program reads the seismic center's coordinates and intensity from the input file, followed by the buildings' data.
2. **Processing Buildings**:
    - For each building, we calculate its distance from the seismic center using the maximum of the absolute differences of the coordinates (Manhattan distance).
    - We determine the effective intensity of the earthquake at the building's location by subtracting the distance from the original intensity.
    - We count the building as affected if its resistance is less than or equal to the effective intensity.
    - We maintain a count of affected buildings at each distance level using a map.
3. **Finding Maximum Affected Level**:
   - We determine the maximum number of buildings affected at any distance level.
   - We collect all distance levels that have the maximum number of affected buildings.
4. **Output the Results**:
   - The total number of affected buildings.
   - The maximum number of buildings affected at any level.
   - The levels with the maximum number of affected buildings, sorted in ascending order.

This solution is efficient and adheres to the constraints provided, ensuring fast execution even for the upper limits of the input size.
