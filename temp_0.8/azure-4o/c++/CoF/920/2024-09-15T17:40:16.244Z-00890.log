---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the C++ solution to the problem described:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <string>
#include <algorithm>

bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

int getMaxPrimeFromParts(const std::string& numStr, int parts) {
    int maxPrime = 0;
    int len = numStr.size();
    if (parts == 2) {
        for (int i = 1; i < len; ++i) {
            int num1 = std::stoi(numStr.substr(0, i));
            int num2 = std::stoi(numStr.substr(i));
            if (isPrime(num1)) maxPrime = std::max(maxPrime, num1);
            if (isPrime(num2)) maxPrime = std::max(maxPrime, num2);
        }
    } else if (parts == 3) {
        for (int i = 1; i < len - 1; ++i) {
            for (int j = i + 1; j < len; ++j) {
                int num1 = std::stoi(numStr.substr(0, i));
                int num2 = std::stoi(numStr.substr(i, j - i));
                int num3 = std::stoi(numStr.substr(j));
                if (isPrime(num1)) maxPrime = std::max(maxPrime, num1);
                if (isPrime(num2)) maxPrime = std::max(maxPrime, num2);
                if (isPrime(num3)) maxPrime = std::max(maxPrime, num3);
            }
        }
    }
    return maxPrime;
}

int main() {
    std::ifstream input("tai.in");
    std::ofstream output("tai.out");
    int C, N;
    input >> C >> N;
    
    std::vector<int> numbers(N);
    for (int i = 0; i < N; ++i) {
        input >> numbers[i];
    }
    
    int maxPrime = 0;
    
    if (C == 1) {
        for (int num : numbers) {
            if (isPrime(num)) {
                maxPrime = std::max(maxPrime, num);
            }
        }
    } else if (C == 2) {
        for (int num : numbers) {
            maxPrime = std::max(maxPrime, getMaxPrimeFromParts(std::to_string(num), 2));
        }
    } else if (C == 3) {
        for (int num : numbers) {
            maxPrime = std::max(maxPrime, getMaxPrimeFromParts(std::to_string(num), 3));
        }
    }
    
    output << maxPrime;
    
    return 0;
}
```

This solution works as follows:

1. Reads the input values from the file `tai.in`.
2. Checks the value of `C` to determine which task to solve.
3. For `C == 1`, it finds the largest prime number in the given list.
4. For `C == 2` and `C == 3`, it splits each number into the specified number of parts, checks each part for primality, and finds the largest prime number.
5. Outputs the result to the file `tai.out`.

The `isPrime` function is optimized to perform quick primality checks, and the `getMaxPrimeFromParts` function handles splitting the numbers and evaluating the parts.
