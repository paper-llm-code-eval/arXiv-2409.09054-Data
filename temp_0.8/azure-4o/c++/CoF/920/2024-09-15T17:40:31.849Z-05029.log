---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Let's begin by addressing the challenge step by step.

1. **Reading Input**: We'll read from `tai.in` to get the values of `C`, `N`, and the list of numbers.
2. **Checking Primality**: We'll need a function to check if a number is prime.
3. **Finding the Largest Prime**: Based on the value of `C`, we'll perform different tasks:
   - **C = 1**: Find the largest prime in the list of numbers.
   - **C = 2**: Split each number into two parts in all possible ways, check if any of the parts are prime, and find the largest prime.
   - **C = 3**: Split each number into three parts in all possible ways, check if any of the parts are prime, and find the largest prime.

Here is the full C++ solution implementing the above steps:

```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>

// Function to check if a number is prime
bool isPrime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Function to split number into parts
std::vector<int> splitNumber(const std::string& num, int parts) {
    std::vector<int> result;
    int len = num.length();
    if (parts == 2) {
        for (int i = 1; i < len; ++i) {
            int part1 = std::stoi(num.substr(0, i));
            int part2 = std::stoi(num.substr(i));
            result.push_back(part1);
            result.push_back(part2);
        }
    } else if (parts == 3) {
        for (int i = 1; i < len - 1; ++i) {
            for (int j = i + 1; j < len; ++j) {
                int part1 = std::stoi(num.substr(0, i));
                int part2 = std::stoi(num.substr(i, j - i));
                int part3 = std::stoi(num.substr(j));
                result.push_back(part1);
                result.push_back(part2);
                result.push_back(part3);
            }
        }
    }
    return result;
}

int main() {
    std::ifstream inputFile("tai.in");
    std::ofstream outputFile("tai.out");

    int C, N;
    inputFile >> C >> N;

    std::vector<int> numbers(N);
    for (int i = 0; i < N; ++i) {
        inputFile >> numbers[i];
    }

    int largestPrime = 0;
    if (C == 1) {
        // Find the largest prime in the list
        for (int num : numbers) {
            if (isPrime(num) && num > largestPrime) {
                largestPrime = num;
            }
        }
    } else if (C == 2) {
        // Find the largest prime from numbers obtained by splitting into 2 parts
        for (int num : numbers) {
            std::string numStr = std::to_string(num);
            std::vector<int> parts = splitNumber(numStr, 2);
            for (int part : parts) {
                if (isPrime(part) && part > largestPrime) {
                    largestPrime = part;
                }
            }
        }
    } else if (C == 3) {
        // Find the largest prime from numbers obtained by splitting into 3 parts
        for (int num : numbers) {
            std::string numStr = std::to_string(num);
            std::vector<int> parts = splitNumber(numStr, 3);
            for (int part : parts) {
                if (isPrime(part) && part > largestPrime) {
                    largestPrime = part;
                }
            }
        }
    }

    outputFile << largestPrime << std::endl;
    return 0;
}
```

### Explanation:

- **Function `isPrime(int num)`**: Checks if a number is prime by trial division up to the square root of the number.
- **Function `splitNumber(const std::string& num, int parts)`**: Splits the number represented as a string into `parts` parts and returns a vector of integers containing all possible parts.
- **Main logic**:
  - Reads the input values from `tai.in`.
  - Depending on the value of `C`, performs the required prime finding task.
  - Writes the result to `tai.out`.

This solution ensures efficient computation and adheres to the constraints provided.
