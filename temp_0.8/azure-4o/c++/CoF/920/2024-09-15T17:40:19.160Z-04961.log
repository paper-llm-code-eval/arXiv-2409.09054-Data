---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <cmath>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

// Function to check if a number is prime
bool isPrime(long long num) {
    if (num < 2) return false;
    if (num == 2 || num == 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (long long i = 5; i * i <= num; i += 6) {
        if (num % i == 0 || num % (i + 2) == 0) return false;
    }
    return true;
}

// Function to get the largest prime from a vector of numbers
long long getLargestPrime(vector<long long>& nums) {
    long long largest = 0;
    for (long long num : nums) {
        if (isPrime(num)) {
            largest = max(largest, num);
        }
    }
    return largest;
}

// Function to generate all possible splits of a number into p parts
void generateSplits(const string& numStr, int p, vector<long long>& primes) {
    int len = numStr.length();
    if (p == 2) {
        for (int i = 1; i < len; ++i) {
            long long left = stoll(numStr.substr(0, i));
            long long right = stoll(numStr.substr(i));
            primes.push_back(left);
            primes.push_back(right);
        }
    } else if (p == 3) {
        for (int i = 1; i < len - 1; ++i) {
            for (int j = i + 1; j < len; ++j) {
                long long part1 = stoll(numStr.substr(0, i));
                long long part2 = stoll(numStr.substr(i, j - i));
                long long part3 = stoll(numStr.substr(j));
                primes.push_back(part1);
                primes.push_back(part2);
                primes.push_back(part3);
            }
        }
    }
}

int main() {
    ifstream fin("tai.in");
    ofstream fout("tai.out");

    int C, N;
    fin >> C >> N;
    
    vector<long long> nums(N);
    for (int i = 0; i < N; ++i) {
        fin >> nums[i];
    }

    if (C == 1) {
        long long result = getLargestPrime(nums);
        fout << result << endl;
    } else if (C == 2 || C == 3) {
        vector<long long> primes;
        for (long long num : nums) {
            string numStr = to_string(num);
            generateSplits(numStr, C, primes);
        }
        long long result = getLargestPrime(primes);
        fout << result << endl;
    }

    fin.close();
    fout.close();
    
    return 0;
}
```
This C++ program reads the input from the `tai.in` file and writes the output to the `tai.out` file. It handles the three different tasks specified by the variable `C` (1, 2, or 3). The program determines whether numbers are prime, and finds the largest prime number among the original list or from the splits of numbers into two or three parts.
