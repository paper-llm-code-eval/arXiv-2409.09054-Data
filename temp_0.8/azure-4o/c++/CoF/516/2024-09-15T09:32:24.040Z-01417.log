---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tema.in` and write to `tema.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Macarie a primit ca temă la Informatică următorul enunț de problemă: *„Se consideră un șir $A$ cu $N$ numere naturale nenule, numerotate începând de la $1$ până la $N$. Numim **secvență** o succesiune de termeni situați pe **poziții consecutive** în șir, iar **lungimea secvenței** o reprezintă numărul de termeni din care este formată. **Costul unei secvențe** este egal cu produsul dintre suma valorilor prime din secvență și suma celor compuse. Numărul compus este un număr care are cel puțin un divizor natural diferit de $1$ și de el însuși, iar un număr este prim dacă are exact doi divizori naturali distincți, pe $1$ și pe el însuși.”*.

Știm că numărul $1$ nu este nici număr prim, nici compus, deci nu influențează costul niciunei secvențe în care se găsește. Evident, costul unei secvențe care nu conține niciun număr prim sau al unei secvențe care nu conține niciun număr compus este egal cu $0$. De asemenea, suma valorilor prime dintr-o secvență care conține un singur număr prim $X$ este egală cu $X$; în mod similar, suma valorilor compuse dintr-o secvență care conține un singur număr compus $Y$ este egală cu $Y$.


# Cerințe

Ajutați-l pe Macarie să rezolve următoarele două cerințe ale temei:
1. Să se determine lungimea maximă a unei secvențe din șirul $A$ pentru care costul ei este mai mic sau egal decât un număr natural nenul $K$.
2. Presupunem că fiecare număr **compus** din șirul $A$ este înlocuit cu produsul dintre **cel mai mic** factor prim al său și **cel mai mare** factor prim al său. Să se determine secvența de lungime maximă din șirul nou obținut, pentru care cel mai mare divizor comun al numerelor din care este formată este diferit de $1$. Se vor afișa pozițiile primului și ultimului element din secvență. Dacă sunt mai multe astfel de secvențe de lungime maximă, se va afișa cea pentru care poziția primului său element este maximă.

# Date de intrare

Pe prima linie a fișierului de intrare `tema.in` se află trei numere naturale nenule $C$, $N$ și $K$, în această ordine, separate prin câte un spațiu, unde $C$ este numărul cerinței care trebuie rezolvată (1 sau 2), iar $N$ și $K$ au semnificația din enunț. Pe a doua linie se află $N$ numere naturale nenule, separate între ele prin câte un spațiu, reprezentând, în ordine, termenii șirului $A$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `tema.out`:
1. se scrie un număr natural nenul, reprezentând lungimea maximă determinată pentru prima cerință, dacă $C=1$;
2. se scriu două numere naturale nenule, separate printr-un spațiu, reprezentând, în ordine, pozițiile primului, respectiv ultimului element din secvența de lungime maximă, determinată conform celei de a doua cerințe, dacă $C = 2$. 

# Restricții și precizări
* $2\leq N \leq 100 \ 000$;
* $1\leq K \leq 10^{18}$; **Numărul $K$ nu are niciun rol pentru cerința $2$**;
* $1\leq A_i \leq 1 \ 000 \ 000$, pentru fiecare $i$: $1 \leq i \leq N$;
* **În cazul ambelor cerințe, există o secvență soluție ce are lungimea cel puțin egală cu $2$**;
* Există cel puțin un element diferit de $1$ în șirul $A$.
* Pentru $10$ puncte, $C = 1$ și $N = 2$;
* Pentru $25$ de puncte, $C = 1$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 1$ și $5 \ 000 < N$;
* Pentru $10$ puncte, $C = 2$ și $N = 2$;
* Pentru $25$ de puncte, $C = 2$ și $N \leq 4 \ 000$;
* Pentru $15$ puncte, $C = 2$ și $5 \ 000 < N$.

---

Example:
`tema.in`
```
1 10 45
10 2 3 1 4 5 8 2 6 3
```

`tema.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we need to address each of the two possible requirements (determined by `C` in the input). Let's break down the solution step-by-step.

### Step 1: Prime and Composite Number Classification
We need a helper function to check if a number is prime. This will be used in determining the sum of prime and composite numbers in a sequence.

```cpp
bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}
```

### Step 2: Read Input
We need to read the input efficiently from `tema.in` and parse it.

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

ifstream fin("tema.in");
ofstream fout("tema.out");

int main() {
    int C, N;
    long long K;
    fin >> C >> N >> K;
    vector<int> A(N);
    for (int i = 0; i < N; ++i) {
        fin >> A[i];
    }
```

### Step 3: Solve Requirement 1 (C == 1)
For this requirement, we need to find the longest subarray with a cost less than or equal to `K`.

```cpp
    if (C == 1) {
        int maxLength = 0;
        for (int i = 0; i < N; ++i) {
            long long sumPrimes = 0, sumComposites = 0;
            for (int j = i; j < N; ++j) {
                if (isPrime(A[j])) {
                    sumPrimes += A[j];
                } else if (A[j] != 1) {  // Composites, excluding 1
                    sumComposites += A[j];
                }
                long long cost = sumPrimes * sumComposites;
                if (cost <= K) {
                    maxLength = max(maxLength, j - i + 1);
                } else {
                    break;
                }
            }
        }
        fout << maxLength << endl;
    }
```

### Step 4: Solve Requirement 2 (C == 2)
For this requirement, we need to transform the array and then find the longest subarray where the GCD of all elements is greater than 1.

```cpp
    if (C == 2) {
        auto smallestPrimeFactor = [](int n) {
            for (int i = 2; i * i <= n; ++i) {
                if (n % i == 0) return i;
            }
            return n;
        };
        
        auto largestPrimeFactor = [](int n) {
            int largest = 1;
            for (int i = 2; i * i <= n; ++i) {
                while (n % i == 0) {
                    largest = i;
                    n /= i;
                }
            }
            if (n > 1) largest = n;
            return largest;
        };

        vector<int> transformedA(N);
        for (int i = 0; i < N; ++i) {
            if (isPrime(A[i]) || A[i] == 1) {
                transformedA[i] = A[i];
            } else {
                int spf = smallestPrimeFactor(A[i]);
                int lpf = largestPrimeFactor(A[i]);
                transformedA[i] = spf * lpf;
            }
        }

        int maxLen = 0, start = -1, end = -1;
        for (int i = 0; i < N; ++i) {
            int gcd = transformedA[i];
            for (int j = i; j < N; ++j) {
                gcd = __gcd(gcd, transformedA[j]);
                if (gcd == 1) break;
                if (j - i + 1 > maxLen || (j - i + 1 == maxLen && i > start)) {
                    maxLen = j - i + 1;
                    start = i;
                    end = j;
                }
            }
        }
        fout << start + 1 << " " << end + 1 << endl;
    }
    return 0;
}
```

### Full Solution
Here is the full solution in a single block:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <numeric>

using namespace std;

bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6) {
        if (n % i == 0 || n % (i + 2) == 0) return false;
    }
    return true;
}

int main() {
    ifstream fin("tema.in");
    ofstream fout("tema.out");

    int C, N;
    long long K;
    fin >> C >> N >> K;
    vector<int> A(N);
    for (int i = 0; i < N; ++i) {
        fin >> A[i];
    }

    if (C == 1) {
        int maxLength = 0;
        for (int i = 0; i < N; ++i) {
            long long sumPrimes = 0, sumComposites = 0;
            for (int j = i; j < N; ++j) {
                if (isPrime(A[j])) {
                    sumPrimes += A[j];
                } else if (A[j] != 1) {
                    sumComposites += A[j];
                }
                long long cost = sumPrimes * sumComposites;
                if (cost <= K) {
                    maxLength = max(maxLength, j - i + 1);
                } else {
                    break;
                }
            }
        }
        fout << maxLength << endl;
    } else if (C == 2) {
        auto smallestPrimeFactor = [](int n) {
            for (int i = 2; i * i <= n; ++i) {
                if (n % i == 0) return i;
            }
            return n;
        };
        
        auto largestPrimeFactor = [](int n) {
            int largest = 1;
            for (int i = 2; i * i <= n; ++i) {
                while (n % i == 0) {
                    largest = i;
                    n /= i;
                }
            }
            if (n > 1) largest = n;
            return largest;
        };

        vector<int> transformedA(N);
        for (int i = 0; i < N; ++i) {
            if (isPrime(A[i]) || A[i] == 1) {
                transformedA[i] = A[i];
            } else {
                int spf = smallestPrimeFactor(A[i]);
                int lpf = largestPrimeFactor(A[i]);
                transformedA[i] = spf * lpf;
            }
        }

        int maxLen = 0, start = -1, end = -1;
        for (int i = 0; i < N; ++i) {
            int gcd = transformedA[i];
            for (int j = i; j < N; ++j) {
                gcd = __gcd(gcd, transformedA[j]);
                if (gcd == 1) break;
                if (j - i + 1 > maxLen || (j - i + 1 == maxLen && i > start)) {
                    maxLen = j - i + 1;
                    start = i;
                    end = j;
                }
            }
        }
        fout << start + 1 << " " << end + 1 << endl;
    }

    return 0;
}
```

This solution ensures efficiency by leveraging nested loops and optimal checking techniques. It meets the requirements of the problem while adhering to constraints and efficiently reads from and writes to files.
