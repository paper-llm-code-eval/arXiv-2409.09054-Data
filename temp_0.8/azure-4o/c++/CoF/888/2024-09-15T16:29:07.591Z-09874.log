---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently in C++, we'll use two different algorithms based on the value of `V`.

### For V = 1
We need to find the minimum number of dangerous zones (zones with stability less than `G`) that the rover must traverse to reach from `(1, 1)` to `(N, N)`. This can be approached using a modified Breadth-First Search (BFS) where we count dangerous zones.

### For V = 2
We need to determine the maximum weight `G` such that the rover can travel from `(1, 1)` to `(N, N)` without traversing any dangerous zones. This can be approached using Binary Search combined with BFS to check feasibility.

### Implementation Details
1. **Input/Output Handling**: We will use `ifstream` and `ofstream` for reading from `rover.in` and writing to `rover.out`.
2. **2D Grid Traversal**: We'll use BFS for grid traversal to ensure shortest path calculations.
3. **Binary Search**: For the second variant, we'll use binary search to maximize `G`.

Given these details, here's the implementation in C++:

```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>
#include <climits>

using namespace std;

const int dx[4] = {0, 1, 0, -1};
const int dy[4] = {1, 0, -1, 0};

int N, G;
vector<vector<int>> grid;

bool is_valid(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < N;
}

int bfs_min_dangerous_zones() {
    vector<vector<int>> dangerous_zones(N, vector<int>(N, INT_MAX));
    queue<pair<int, int>> q;
    q.push({0, 0});
    dangerous_zones[0][0] = grid[0][0] < G ? 1 : 0;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for (int d = 0; d < 4; ++d) {
            int nx = x + dx[d], ny = y + dy[d];
            if (is_valid(nx, ny)) {
                int new_dangerous = dangerous_zones[x][y] + (grid[nx][ny] < G ? 1 : 0);
                if (new_dangerous < dangerous_zones[nx][ny]) {
                    dangerous_zones[nx][ny] = new_dangerous;
                    q.push({nx, ny});
                }
            }
        }
    }

    return dangerous_zones[N-1][N-1];
}

bool can_traverse_with_G(int weight) {
    if (grid[0][0] < weight || grid[N-1][N-1] < weight) return false;
    vector<vector<bool>> visited(N, vector<bool>(N, false));
    queue<pair<int, int>> q;
    q.push({0, 0});
    visited[0][0] = true;

    while (!q.empty()) {
        auto [x, y] = q.front();
        q.pop();

        for (int d = 0; d < 4; ++d) {
            int nx = x + dx[d], ny = y + dy[d];
            if (is_valid(nx, ny) && !visited[nx][ny] && grid[nx][ny] >= weight) {
                if (nx == N-1 && ny == N-1) return true;
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
    }

    return false;
}

int max_safe_weight() {
    int low = 1, high = 10000, best_weight = 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (can_traverse_with_G(mid)) {
            best_weight = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return best_weight;
}

int main() {
    ifstream fin("rover.in");
    ofstream fout("rover.out");

    int V;
    fin >> V;

    fin >> N;

    if (V == 1) {
        fin >> G;
    }

    grid.resize(N, vector<int>(N));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            fin >> grid[i][j];
        }
    }

    if (V == 1) {
        fout << bfs_min_dangerous_zones() << endl;
    } else {
        fout << max_safe_weight() << endl;
    }

    fin.close();
    fout.close();
    return 0;
}
```

### Explanation
1. **Input Handling**: We read the input using `ifstream` and store the grid in a 2D vector.
2. **BFS for Minimum Dangerous Zones**: We use BFS to find the minimum number of dangerous zones for `V = 1`.
3. **Binary Search for Maximum Safe Weight**: For `V = 2`, we use binary search to find the maximum weight `G` such that the rover can traverse the grid without entering dangerous zones. BFS is used to check the feasibility of each mid-value in the binary search.

This solution ensures optimal performance given the constraints \(1 \leq N \leq 500\).
