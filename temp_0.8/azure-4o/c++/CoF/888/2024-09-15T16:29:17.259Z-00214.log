---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this challenge efficiently, we'll handle each of the two parts separately depending on the value of `V`.

**Part 1:** Calculate the minimum number of dangerous zones traversed for a given weight `G`.
**Part 2:** Determine the maximum weight `G` that allows the rover to traverse from (1,1) to (N,N) without encountering any dangerous zones.

We'll use a Breadth-First Search (BFS) approach for both tasks because it effectively handles shortest path problems in unweighted grids.

Here's the C++ solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

const int INF = 1e9;
const int directions[4][2] = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

int N, G, V;

vector<vector<int>> readInput(const string& filename) {
    ifstream infile(filename);
    infile >> V;
    if (V == 1) {
        infile >> N >> G;
    } else {
        infile >> N;
    }
    vector<vector<int>> A(N, vector<int>(N));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            infile >> A[i][j];
        }
    }
    infile.close();
    return A;
}

int bfsMinDangerousZones(const vector<vector<int>>& A, int G) {
    vector<vector<int>> danger(N, vector<int>(N, INF));
    queue<pair<int, int>> q;
    q.push({0, 0});
    danger[0][0] = (A[0][0] < G) ? 1 : 0;

    while (!q.empty()) {
        int r = q.front().first;
        int c = q.front().second;
        q.pop();

        for (const auto& dir : directions) {
            int nr = r + dir[0], nc = c + dir[1];
            if (nr >= 0 && nr < N && nc >= 0 && nc < N) {
                int new_danger = danger[r][c] + (A[nr][nc] < G ? 1 : 0);
                if (new_danger < danger[nr][nc]) {
                    danger[nr][nc] = new_danger;
                    q.push({nr, nc});
                }
            }
        }
    }
    return danger[N-1][N-1];
}

bool bfsCanReachWithoutDanger(const vector<vector<int>>& A, int G) {
    vector<vector<bool>> visited(N, vector<bool>(N, false));
    queue<pair<int, int>> q;
    q.push({0, 0});
    visited[0][0] = true;

    while (!q.empty()) {
        int r = q.front().first;
        int c = q.front().second;
        q.pop();

        for (const auto& dir : directions) {
            int nr = r + dir[0], nc = c + dir[1];
            if (nr >= 0 && nr < N && nc >= 0 && nc < N && !visited[nr][nc] && A[nr][nc] >= G) {
                visited[nr][nc] = true;
                q.push({nr, nc});
            }
        }
    }
    return visited[N-1][N-1];
}

int findMaxWeight(const vector<vector<int>>& A) {
    int low = 1, high = 10000, ans = 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (bfsCanReachWithoutDanger(A, mid)) {
            ans = mid;
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }
    return ans;
}

int main() {
    vector<vector<int>> A = readInput("rover.in");
    ofstream outfile("rover.out");

    if (V == 1) {
        int result = bfsMinDangerousZones(A, G);
        outfile << result << endl;
    } else if (V == 2) {
        int result = findMaxWeight(A);
        outfile << result << endl;
    }

    outfile.close();
    return 0;
}
```

### Explanation:
1. **Input Reading:**
   - We read the input from `rover.in` and populate the grid `A`.
   - We determine the mode of operation based on the value of `V`.
   
2. **BFS for Minimum Dangerous Zones:**
   - We use BFS to find the minimum number of dangerous zones the rover needs to cross for a given weight `G`.
   - We use a queue to perform BFS and maintain a `danger` matrix to keep track of the minimum dangerous zones encountered to reach each cell.

3. **BFS for Maximum Weight:**
   - We use BFS to check if the rover can reach the destination without crossing any dangerous zones for a given weight `G`.
   - We perform a binary search to find the maximum weight `G` for which the rover can travel safely from (1,1) to (N,N).

4. **Output the result to `rover.out`.**

This solution ensures efficient computation with the given constraints, with a focus on BFS for pathfinding and binary search for optimization.
