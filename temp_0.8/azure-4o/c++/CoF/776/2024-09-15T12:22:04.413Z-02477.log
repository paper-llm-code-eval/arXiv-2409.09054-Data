---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

// Function to count the majority color in the neighborhood
char get_majority_color(const vector<vector<char>>& grid, int x, int y, int n, int m) {
    int red_count = 0;
    int blue_count = 0;
    for (int dx = -1; dx <= 1; ++dx) {
        for (int dy = -1; dy <= 1; ++dy) {
            if (dx == 0 && dy == 0) continue; // skip the cell itself
            int nx = x + dx, ny = y + dy;
            if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
                if (grid[nx][ny] == 'r') red_count++;
                else if (grid[nx][ny] == 'a') blue_count++;
            }
        }
    }
    if (red_count > blue_count) return 'r';
    else if (blue_count > red_count) return 'a';
    else return grid[x][y]; // retain the same color if there's a tie
}

int main() {
    ifstream inFile("culori.in");
    ofstream outFile("culori.out");

    int n, m, t;
    inFile >> n >> m >> t;
    vector<vector<char>> grid(n, vector<char>(m));
    vector<vector<char>> temp(n, vector<char>(m));

    // Read the initial state of the grid
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            inFile >> grid[i][j];
        }
    } 

    // Iterate over the number of time steps
    for (int time = 0; time < t; ++time) {
        // Apply the color change rule to each cell
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                temp[i][j] = get_majority_color(grid, i, j, n, m);
            }
        }
        // Swap the grids
        grid.swap(temp);
    }

    // Write the final state to the output file
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            outFile << grid[i][j];
        }
        outFile << '\n';
    }

    inFile.close();
    outFile.close();

    return 0;
}
```

### Explanation:

1. **Reading Input**: The code reads the input from the file `culori.in` and stores the initial grid configuration in a 2D vector `grid`.

2. **Processing**: For each time step, the code generates a new grid `temp` using the specified rules (counting the majority color in the neighborhood). This is repeated for `t` time steps.

3. **Swapping Grids**: After processing each time step, the `grid` and `temp` vectors are swapped to prepare for the next iteration.

4. **Writing Output**: Finally, the code writes the resulting grid configuration to the output file `culori.out`.

The solution uses efficient vector operations and only swaps the grids after each iteration, minimizing the overhead. This should ensure that the solution is efficient and runs within the constraints provided.
