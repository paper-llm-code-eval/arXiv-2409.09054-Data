---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ code that solves the given problem efficiently. It reads from `culori.in`, processes the fish color changes for `t` time steps, and writes the result to `culori.out`.

```cpp
#include <fstream>
#include <vector>

using namespace std;

// Function to count neighbors and update the color
char getNewColor(int x, int y, const vector<vector<char>> &grid, int n, int m) {
    int redCount = 0, blueCount = 0;
    // Offsets for the 8 neighboring positions
    int dx[] = { -1, -1, -1, 0, 0, 1, 1, 1 };
    int dy[] = { -1, 0, 1, -1, 1, -1, 0, 1 };

    for (int i = 0; i < 8; ++i) {
        int nx = x + dx[i], ny = y + dy[i];
        if (nx >= 0 && nx < n && ny >= 0 && ny < m) {
            if (grid[nx][ny] == 'r') {
                ++redCount;
            } else {
                ++blueCount;
            }
        }
    }

    if (redCount > blueCount) {
        return 'r';
    } else if (blueCount > redCount) {
        return 'a';
    } else {
        return grid[x][y];
    }
}

int main() {
    ifstream input("culori.in");
    ofstream output("culori.out");

    int n, m, t;
    input >> n >> m >> t;
    input.ignore(); // To ignore the newline character after the numbers

    vector<vector<char>> grid(n, vector<char>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            input >> grid[i][j];
        }
    }

    vector<vector<char>> tempGrid = grid;
    for (int time = 0; time < t; ++time) {
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                tempGrid[i][j] = getNewColor(i, j, grid, n, m);
            }
        }
        grid = tempGrid;
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            output << grid[i][j];
        }
        output << '\n';
    }

    input.close();
    output.close();
    return 0;
}
```

### Explanation
1. **Reading Input**: The code reads from `culori.in` to get the dimensions `n`, `m`, and the number of time steps `t`. It then reads the initial grid of fish colors.
2. **Processing the Grid**: It processes the grid for `t` time steps. For each cell, it counts the number of red and blue neighbors and decides the new color based on the majority rule.
3. **Outputting Results**: After `t` time steps, the final grid is written to `culori.out`.

### Efficiency
The code efficiently processes each time step with an `O(n * m)` complexity per step, where `n` and `m` are the dimensions of the grid. Given the constraints, this should be optimal and run efficiently within the provided limits.
