---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>

int main() {
    std::ifstream infile("ocr.in");
    std::ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    std::vector<std::vector<double>> image(n, std::vector<double>(m));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> image[i][j];
        }
    }

    auto computeSums = [&](int i, int j) {
        double sumAbove = 0, sumBelow = 0, sumLeft = 0, sumRight = 0;

        for (int x = 0; x < i; ++x) {
            for (int y = 0; y < m; ++y) {
                sumAbove += image[x][y];
            }
        }

        for (int x = i + 1; x < n; ++x) {
            for (int y = 0; y < m; ++y) {
                sumBelow += image[x][y];
            }
        }

        for (int y = 0; y < j; ++y) {
            for (int x = 0; x < n; ++x) {
                sumLeft += image[x][y];
            }
        }

        for (int y = j + 1; y < m; ++y) {
            for (int x = 0; x < n; ++x) {
                sumRight += image[x][y];
            }
        }

        return std::make_tuple(sumAbove, sumBelow, sumLeft, sumRight);
    };

    int bestI = 0, bestJ = 0;
    double minDiffRow = 1e9, minDiffCol = 1e9;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            auto [sumAbove, sumBelow, sumLeft, sumRight] = computeSums(i, j);

            double diffRow = std::fabs(sumAbove - sumBelow);
            double diffCol = std::fabs(sumLeft - sumRight);

            if (diffRow < minDiffRow || (diffRow == minDiffRow && diffCol < minDiffCol) ||
                (diffRow == minDiffRow && diffCol == minDiffCol && i > bestI) ||
                (diffRow == minDiffRow && diffCol == minDiffCol && i == bestI && j > bestJ)) {
                minDiffRow = diffRow;
                minDiffCol = diffCol;
                bestI = i;
                bestJ = j;
            }
        }
    }

    outfile << bestI + 1 << " " << bestJ + 1 << "\n";

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation
1. **File Reading**: The program reads the input from `ocr.in` and writes the output to `ocr.out`.
2. **Input Parsing**: It parses the number of rows `n` and columns `m` and then reads the matrix of grayscale values.
3. **Compute Sums**: A lambda function `computeSums` is defined to compute the sums of elements above/below a given row `i` and to the left/right of a given column `j`.
4. **Finding the Center of Gravity**: The program iterates over each possible center `(i, j)` and computes the sums using the `computeSums` function. It then calculates the absolute differences for rows and columns and updates the best center position according to the problem requirements.
5. **Output**: Finally, it writes the determined center of gravity to the output file `ocr.out`.

This approach ensures that the solution is both correct and efficient for the given constraints.
---------- user ----------


Failed to compile the program.
```
main.cpp: In lambda function:
main.cpp:48:21: error: 'make_tuple' is not a member of 'std'
   48 |         return std::make_tuple(sumAbove, sumBelow, sumLeft, sumRight);
      |                     ^~~~~~~~~~
main.cpp:5:1: note: 'std::make_tuple' is defined in header '<tuple>'; did you forget to '#include <tuple>'?
    4 | #include <cmath>
  +++ |+#include <tuple>
    5 | 

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly. The error message indicates that the `make_tuple` function from the `<tuple>` header was not included. To fix this, we need to include the `<tuple>` header.

Here is the corrected solution:

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <cmath>
#include <tuple> // Include this header for std::make_tuple

int main() {
    std::ifstream infile("ocr.in");
    std::ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    std::vector<std::vector<double>> image(n, std::vector<double>(m));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> image[i][j];
        }
    }

    auto computeSums = [&](int i, int j) {
        double sumAbove = 0, sumBelow = 0, sumLeft = 0, sumRight = 0;

        for (int x = 0; x < i; ++x) {
            for (int y = 0; y < m; ++y) {
                sumAbove += image[x][y];
            }
        }

        for (int x = i + 1; x < n; ++x) {
            for (int y = 0; y < m; ++y) {
                sumBelow += image[x][y];
            }
        }

        for (int y = 0; y < j; ++y) {
            for (int x = 0; x < n; ++x) {
                sumLeft += image[x][y];
            }
        }

        for (int y = j + 1; y < m; ++y) {
            for (int x = 0; x < n; ++x) {
                sumRight += image[x][y];
            }
        }

        return std::make_tuple(sumAbove, sumBelow, sumLeft, sumRight);
    };

    int bestI = 0, bestJ = 0;
    double minDiffRow = 1e9, minDiffCol = 1e9;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            auto [sumAbove, sumBelow, sumLeft, sumRight] = computeSums(i, j);

            double diffRow = std::fabs(sumAbove - sumBelow);
            double diffCol = std::fabs(sumLeft - sumRight);

            if (diffRow < minDiffRow || (diffRow == minDiffRow && diffCol < minDiffCol) ||
                (diffRow == minDiffRow && diffCol == minDiffCol && i > bestI) ||
                (diffRow == minDiffRow && diffCol == minDiffCol && i == bestI && j > bestJ)) {
                minDiffRow = diffRow;
                minDiffCol = diffCol;
                bestI = i;
                bestJ = j;
            }
        }
    }

    outfile << bestI + 1 << " " << bestJ + 1 << "\n";

    infile.close();
    outfile.close();
    return 0;
}
```

### Explanation of Fix
1. **Include `<tuple>`**: Added `#include <tuple>` to the list of headers so that `std::make_tuple` is recognized and can be used in the code.
2. **Rest of the Code**: Remained unchanged as it logically computes the center of gravity based on the given conditions.

This should now compile and run correctly.
