---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <limits>

using namespace std;

// Function to calculate the sum above and below a given row
void calculateVerticalSums(const vector<vector<double>>& matrix, int row, double& sumAbove, double& sumBelow) {
    sumAbove = 0.0;
    sumBelow = 0.0;
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[0].size(); ++j) {
            if (i < row) {
                sumAbove += matrix[i][j];
            } else if (i > row) {
                sumBelow += matrix[i][j];
            }
        }
    }
}

// Function to calculate the sum to the left and right of a given column
void calculateHorizontalSums(const vector<vector<double>>& matrix, int col, double& sumLeft, double& sumRight) {
    sumLeft = 0.0;
    sumRight = 0.0;
    for (int i = 0; i < matrix.size(); ++i) {
        for (int j = 0; j < matrix[0].size(); ++j) {
            if (j < col) {
                sumLeft += matrix[i][j];
            } else if (j > col) {
                sumRight += matrix[i][j];
            }
        }
    }
}

int main() {
    ifstream infile("ocr.in");
    ofstream outfile("ocr.out");

    int n, m;
    infile >> n >> m;

    vector<vector<double>> matrix(n, vector<double>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            infile >> matrix[i][j];
        }
    }

    double minVerticalDiff = numeric_limits<double>::max();
    double minHorizontalDiff = numeric_limits<double>::max();
    int bestRow = -1;
    int bestCol = -1;

    for (int i = 0; i < n; ++i) {
        double sumAbove, sumBelow;
        calculateVerticalSums(matrix, i, sumAbove, sumBelow);
        double verticalDiff = fabs(sumAbove - sumBelow);

        if (verticalDiff < minVerticalDiff) {
            minVerticalDiff = verticalDiff;
            bestRow = i;
        } else if (verticalDiff == minVerticalDiff) {
            bestRow = max(bestRow, i);
        }
    }

    for (int j = 0; j < m; ++j) {
        double sumLeft, sumRight;
        calculateHorizontalSums(matrix, j, sumLeft, sumRight);
        double horizontalDiff = fabs(sumLeft - sumRight);

        if (horizontalDiff < minHorizontalDiff) {
            minHorizontalDiff = horizontalDiff;
            bestCol = j;
        } else if (horizontalDiff == minHorizontalDiff) {
            bestCol = max(bestCol, j);
        }
    }

    // Convert from 0-based index to 1-based index
    outfile << (bestRow + 1) << " " << (bestCol + 1) << endl;

    infile.close();
    outfile.close();

    return 0;
}
```

This solution reads the matrix data from `ocr.in`, processes it to calculate the sums required for determining the center of gravity, and writes the result to `ocr.out`. The approach ensures that the differences between the sums are minimized as specified, and in the case of ties, the maximum indices are chosen. The combination of efficient sum calculations and comparisons helps to make the algorithm both correct and optimal for the given constraints.
