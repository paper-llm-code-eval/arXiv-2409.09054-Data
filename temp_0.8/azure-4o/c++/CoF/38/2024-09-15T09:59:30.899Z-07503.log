---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `parc.in` and write to `parc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un parc de formă dreptunghiulară este format din zone pietonale şi piste de biciclete. Reprezentând harta parcului într-un sistem cartezian, cu coordonata colţului stânga-jos `(0,0)`, pistele de biciclete sunt reprezentate prin dungi orizontale sau verticale colorate cu gri, iar zonele pietonale au culoarea albă, ca în figura din dreapta.

Vizitatorii parcului se pot plimba liber pe zonele pietonale în orice direcţie, însă pistele de biciclete se vor traversa, în linie dreaptă,  paralel cu axele. În figura alăturată avem un parc de dimensiuni `10 x 8`, cu piste de biciclete verticale între `2` şi `4` respectiv `5` şi `8`, şi  orizontale între `0` şi `1` respectiv între `2` şi `4`. Gigel se află în punctul `A(1 , 1)` şi poate sa ajungă pe drumul cel mai scurt la prietenul lui, în punctul `B(8 , 7)` deplasându-se astfel: porneşte din punctul `(1, 1)` şi parcurge un traseu format din segmente cu extremităţile în punctele de coordonate `(1.5 , 2) (1.5, 4) (2 , 5) (4 , 5) (5 , 7)` şi în final ajunge în punctul de coordonate `(8 , 7)`. 

Lungimea totală a drumului va fi aproximativ `11.4721359`.
\
~[parc.png]
# Cerinţă
Cunoscând dimensiunile parcului, coordonatele lui Gigel, coordonatele prietenului lui şi poziţiile pistelor de biciclete, să se calculeze lungimea drumului minim şi numărul drumurilor distincte de lungime minimă.

# Date de intrare
Fişierul `parc.in` conţine pe prima linie două numere naturale `Xparc` şi `Yparc` separate prin spaţiu, reprezentând dimensiunile parcului în direcţiile `Ox` respectiv `Oy`. Linia a doua va conţine patru numere separate prin spaţiu `xG, yG, xpr` şi `ypr` ce reprezintă coordonatele lui Gigel şi coordonatele prietenului lui. Linia a treia va conţine un număr natural `m`, reprezentând numărul pistelor verticale. Următoarele `m` linii vor conţine perechi de valori de pe axa `Ox` ce delimitează câte o pistă de biciclete verticală. Următoarea linie va conţine un număr natural `n`, reprezentând numărul pistelor orizontale. Următoarele `n` linii vor conţine perechi de valori de pe axa `Oy` ce delimitează câte o pistă de biciclete orizontală.

# Date de ieşire
Fişierul `parc.out` va conţine pe prima linie lungimea minimă a drumului cerut de problemă, un număr real. Linia a doua va conţine numărul drumurilor minime distincte, un număr natural. 

# Restricţii şi precizări
* `0 ≤ xG, xpr ≤ Xparc ≤ 30 000, 0 ≤ yG, ypr ≤ Yparc ≤ 30 000`;
* `0 < m, n < 2000`;
* perechile de numere naturale ce definesc o pistă nu sunt ordonate;
* pistele orizontale, şi cele verticale nu sunt ordonate în fişierul de intrare;
* două piste de aceeaşi direcţie nu se suprapun;
* Gigel şi prietenului lui sunt pe zone pietonale (incluzând şi marginile acestora);
* două drumuri sunt distincte dacă diferă prin cel puţin un punct;
* numărul de drumuri distincte nu va depăşi `1 000 000 000`;
* lungimea drumului din fişierul de ieşire este un număr real ce se va accepta cu eroare maxima de `0.01`;
* nu se admite formatul ştiinţific pentru afişarea numerelor reale; 
* prima cerinţă valorează `40%` din punctaj, iar a doua valorează `60%` din punctaj.

---

Example:
`parc.in`
```
10 8
1 1 8 7
2
5 8 
2 4
2
4 2
0 1
```

`parc.out`
```
11.472136
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To solve this problem efficiently, we need to employ a graph-based approach to navigate the park while avoiding the bike lanes. We will use the A* search algorithm for finding the shortest path between Gigel and his friend because it is an efficient pathfinding algorithm that works well with large grids and obstacles.

Here is a detailed step-by-step approach:

1. **Parse Input**: Read the dimensions of the park, the coordinates of Gigel and his friend, and the positions of vertical and horizontal bike lanes.
2. **Mark Obstacles**: Use a 2D grid to mark the positions of the bike lanes as obstacles.
3. **Implement A* Search Algorithm**:
   - **Heuristic Function**: Use the Euclidean distance as the heuristic.
   - **Priority Queue**: Use a priority queue to explore the most promising nodes first.
   - **Neighbor Nodes**: Only consider movement parallel to the axes, avoiding bike lanes.
4. **Count Unique Paths**: Use a dynamic programming approach to count all the distinct paths of minimal length.

Here's the implementation in C++:

```cpp
#include <iostream>
#include <fstream>
#include <queue>
#include <vector>
#include <cmath>
#include <unordered_set>
#include <iomanip>

using namespace std;

struct Point {
    int x, y;
    bool operator==(const Point &other) const {
        return x == other.x && y == other.y;
    }
};

namespace std {
    template <>
    struct hash<Point> {
        size_t operator()(const Point &p) const {
            return hash<int>()(p.x) ^ hash<int>()(p.y);
        }
    };
}

struct Node {
    Point point;
    double g, f;
    bool operator>(const Node &other) const {
        return f > other.f;
    }
};

double euclidean_distance(Point a, Point b) {
    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));
}

vector<Point> get_neighbors(Point p, int Xparc, int Yparc, const unordered_set<Point> &obstacles) {
    vector<Point> neighbors;
    vector<Point> potential_moves = {{p.x + 1, p.y}, {p.x - 1, p.y}, {p.x, p.y + 1}, {p.x, p.y - 1}};
    for (const auto &move : potential_moves) {
        if (move.x >= 0 && move.x <= Xparc && move.y >= 0 && move.y <= Yparc && obstacles.find(move) == obstacles.end()) {
            neighbors.push_back(move);
        }
    }
    return neighbors;
}

void a_star(Point start, Point goal, int Xparc, int Yparc, const unordered_set<Point> &obstacles, double &min_length, int &path_count) {
    priority_queue<Node, vector<Node>, greater<Node>> open_set;
    unordered_set<Point> closed_set;
    unordered_map<Point, double> g_score;
    unordered_map<Point, int> path_count_map;

    open_set.push({start, 0, euclidean_distance(start, goal)});
    g_score[start] = 0;
    path_count_map[start] = 1;

    while (!open_set.empty()) {
        Node current = open_set.top();
        open_set.pop();

        if (current.point == goal) {
            min_length = current.g;
            path_count = path_count_map[goal];
            return;
        }

        if (closed_set.find(current.point) != closed_set.end()) continue;
        closed_set.insert(current.point);

        for (const auto &neighbor : get_neighbors(current.point, Xparc, Yparc, obstacles)) {
            double tentative_g = current.g + euclidean_distance(current.point, neighbor);
            if (g_score.find(neighbor) == g_score.end() || tentative_g < g_score[neighbor]) {
                g_score[neighbor] = tentative_g;
                double f_score = tentative_g + euclidean_distance(neighbor, goal);
                open_set.push({neighbor, tentative_g, f_score});
                path_count_map[neighbor] = path_count_map[current.point];
            } else if (tentative_g == g_score[neighbor]) {
                path_count_map[neighbor] += path_count_map[current.point];
            }
        }
    }
}

int main() {
    ifstream fin("parc.in");
    ofstream fout("parc.out");

    int Xparc, Yparc;
    fin >> Xparc >> Yparc;
    Point Gigel, Friend;
    fin >> Gigel.x >> Gigel.y >> Friend.x >> Friend.y;

    int m;
    fin >> m;
    unordered_set<Point> vertical_lanes;
    for (int i = 0; i < m; ++i) {
        int x1, x2;
        fin >> x1 >> x2;
        for (int x = min(x1, x2); x <= max(x1, x2); ++x) {
            vertical_lanes.insert({x, 0});
        }
    }

    int n;
    fin >> n;
    unordered_set<Point> horizontal_lanes;
    for (int i = 0; i < n; ++i) {
        int y1, y2;
        fin >> y1 >> y2;
        for (int y = min(y1, y2); y <= max(y1, y2); ++y) {
            horizontal_lanes.insert({0, y});
        }
    }

    unordered_set<Point> obstacles;
    for (const auto &vl : vertical_lanes) {
        for (int y = 0; y <= Yparc; ++y) {
            obstacles.insert({vl.x, y});
        }
    }
    for (const auto &hl : horizontal_lanes) {
        for (int x = 0; x <= Xparc; ++x) {
            obstacles.insert({x, hl.y});
        }
    }

    double min_length = 0;
    int path_count = 0;
    a_star(Gigel, Friend, Xparc, Yparc, obstacles, min_length, path_count);

    fout << fixed << setprecision(6) << min_length << endl;
    fout << path_count << endl;

    return 0;
}
```

### Explanation:
1. **Input Parsing**:
   - Read the park dimensions, coordinates of Gigel and his friend, the number of vertical and horizontal bike lanes, and their positions.
   
2. **Mark Obstacles**:
   - Use an unordered set to mark all the cells occupied by bike lanes as obstacles.
   
3. **A* Search Algorithm**:
   - Use a priority queue to store and prioritize the nodes (points) based on their estimated cost `f = g + h`, where `g` is the cost from the start node to the current node and `h` is the heuristic (Euclidean distance to the goal).
   - Check all possible neighbors of the current node, avoiding obstacles.
   - Track the number of distinct paths with the minimal length using a map.
   
4. **Output the Results**:
   - Write the minimal path length and the number of distinct minimal paths to the output file.

This solution should be efficient and handle the constraints given. The use of A* ensures that we find the shortest path efficiently, and the dynamic programming method helps count the number of distinct shortest paths.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'void a_star(Point, Point, int, int, const std::unordered_set<Point>&, double&, int&)':
main.cpp:53:5: error: 'unordered_map' was not declared in this scope
   53 |     unordered_map<Point, double> g_score;
      |     ^~~~~~~~~~~~~
main.cpp:8:1: note: 'std::unordered_map' is defined in header '<unordered_map>'; did you forget to '#include <unordered_map>'?
    7 | #include <iomanip>
  +++ |+#include <unordered_map>
    8 | 
main.cpp:53:24: error: expected primary-expression before ',' token
   53 |     unordered_map<Point, double> g_score;
      |                        ^
main.cpp:53:26: error: expected primary-expression before 'double'
   53 |     unordered_map<Point, double> g_score;
      |                          ^~~~~~
main.cpp:54:24: error: expected primary-expression before ',' token
   54 |     unordered_map<Point, int> path_count_map;
      |                        ^
main.cpp:54:26: error: expected primary-expression before 'int'
   54 |     unordered_map<Point, int> path_count_map;
      |                          ^~~
main.cpp:57:5: error: 'g_score' was not declared in this scope
   57 |     g_score[start] = 0;
      |     ^~~~~~~
main.cpp:58:5: error: 'path_count_map' was not declared in this scope; did you mean 'path_count'?
   58 |     path_count_map[start] = 1;
      |     ^~~~~~~~~~~~~~
      |     path_count

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
