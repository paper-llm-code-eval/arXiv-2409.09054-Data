---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <iostream>
#include <fstream>
#include <vector>
using namespace std;

#define ll long long

vector<ll> P;
bool isPrime[30001];

void sieve(ll n) {
    for (ll i = 0; i <= n; i++)
        isPrime[i] = true;
    isPrime[0] = isPrime[1] = false;
    for (ll i = 2; i * i <= n; i++) {
        if (isPrime[i]) {
            for (ll j = i * i; j <= n; j += i)
                isPrime[j] = false;
        }
    }
    for (ll i = 2; i <= n; i++) {
        if (isPrime[i])
            P.emplace_back(i);
    }
}

vector<vector<ll>> prime_powers(ll p) {
    vector<vector<ll>> res;
    res.push_back({1});
    ll i = 1;
    while (true) {
        ll pp = p;
        for (ll j = 1; j <= i; j++) {
            pp *= p;
            if (pp > 30000)
                break;
            res.back().push_back(pp);
        }
        if (pp > 30000)
            break;
        res.push_back({pp});
        i++;
    }
    return res;
}

int main() {
    ifstream in("secvente.in");
    ofstream out("secvente.out");
    sieve(30000);
    ll D;
    in >> D;
    while (D--) {
        ll n, p, k;
        in >> n >> p >> k;
        vector<bool> pp(30001);
        for (ll i = 0; i < P.size(); i++) {
            if (p % P[i] == 0)
                pp[P[i]] = true;
        }
        vector<vector<ll>> powers = prime_powers(p);
        vector<ll> pre(30001);
        for (ll i = 1; i <= 30000; i++) {
            pre[i] = pre[i - 1];
            if (pp[i])
                pre[i]++;
        }
        vector<ll> cnt(30001);
        for (ll i = 0; i < n; i++) {
            ll num;
            in >> num;
            if (pp[num])
                cnt[pre[num]]++;
        }
        ll ans = 0, last = -1;
        for (ll i = 0; i < cnt.size(); i++) {
            for (ll j = 0; j < powers.size(); j++) {
                if (cnt[i] >= k - powers[j].size() && i - k + 1 >= 0) {
                    if (i - k + 1 > last) {
                        ans++;
                        last = i;
                    }
                }
            }
        }
        out << ans << "\n";
        last = -1;
        for (ll i = 0; i < cnt.size(); i++) {
            for (ll j = 0; j < powers.size(); j++) {
                if (cnt[i] >= k - powers[j].size() && i - k + 1 >= 0) {
                    if (i - k + 1 > last) {
                        for (ll l = 0; l < powers[j].size(); l++) {
                            out << (i - l) << " ";
                        }
                        out << i << "\n";
                        last = i;
                    }
                }
            }
        }
    }
    return 0;
}
```
