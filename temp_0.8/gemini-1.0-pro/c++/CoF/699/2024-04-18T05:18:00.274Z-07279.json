{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run/ro/temp_0.8/gemini-1.0-pro/c++/CoF/699/2024-04-18T05:18:00.274Z-07279.log",
  "attemptStart": 1713417480.274,
  "attemptEnd": 1713417506.348,
  "attemptDuration": 26.074000120162964,
  "code": "#include <fstream>\n\nusing namespace std;\n\nconst int MAXN = 250;\n\nifstream fin(\"poarta.in\");\nofstream fout(\"poarta.out\");\n\nstruct Queue {\n  int x, y, dist;\n};\n\nstruct Node {\n  int x, y;\n  bool visited;\n};\n\nint n, m;\nNode matrix[MAXN + 2][MAXN + 2];\nint dx[] = {0, 0, 1, -1};\nint dy[] = {1, -1, 0, 0};\nQueue queue[MAXN * MAXN];\n\nint bfs() {\n  int front = 0, rear = 0;\n  queue[rear] = {1, 1, 0};\n  matrix[1][1].visited = true;\n  rear++;\n\n  while (front < rear) {\n    int x = queue[front].x;\n    int y = queue[front].y;\n    int dist = queue[front].dist;\n    front++;\n\n    for (int i = 0; i < 4; i++) {\n      int newx = x + dx[i];\n      int newy = y + dy[i];\n\n      if (newx > 0 && newx <= n && newy > 0 && newy <= n &&\n          !matrix[newx][newy].visited) {\n        queue[rear] = {newx, newy, dist + 1};\n        matrix[newx][newy].visited = true;\n        rear++;\n      }\n    }\n  }\n\n  return queue[rear - 1].dist;\n}\n\nint main() {\n  fin >> n >> m;\n\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++) {\n      matrix[i][j] = {i, j, false};\n    }\n  }\n\n  while (m--) {\n    int x1, y1, x2, y2;\n    fin >> x1 >> y1 >> x2 >> y2;\n    if (x1 != x2 || y1 != y2) {\n      int d = bfs();\n      matrix[x1][y1].visited = false;\n      matrix[x2][y2].visited = false;\n      fout << d << '\\n';\n    } else {\n      fout << 0 << '\\n';\n    }\n  }\n\n  fin.close();\n  fout.close();\n\n  return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1317,
  "metadata": {
    "id": 699,
    "examples": [
      {
        "in": "3\n1 2 3 4\n6 5 3 9\n3 4 1 2",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.\n\n# Cerință\n\nDându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.\n\n# Date de intrare\nFișierul de intrare `poarta.in` are următorul format:\n- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.\n- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).\n\n# Date de ieşire\nPe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.\n\n# Restricții și precizări\n- $1 < p < 5\\ 000$\n- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.\n- **Atenție la cazurile când poziția inițială este identică cu cea finală!**\n- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.\n- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.",
    "header": {
      "problem_id": 699,
      "problem_name": "poarta",
      "tags": "[Graphs, Grid]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "poarta.in",
      "output_filename": "poarta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "poarta.in",
      "output": "poarta.out"
    },
    "consoleInteraction": false
  }
}