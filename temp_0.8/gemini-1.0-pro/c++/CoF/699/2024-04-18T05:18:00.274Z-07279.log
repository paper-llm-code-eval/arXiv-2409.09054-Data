---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.

# Cerință

Dându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.

# Date de intrare
Fișierul de intrare `poarta.in` are următorul format:
- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.
- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).

# Date de ieşire
Pe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.

# Restricții și precizări
- $1 < p < 5\ 000$
- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.
- **Atenție la cazurile când poziția inițială este identică cu cea finală!**
- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.
- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.

---

Example:
`poarta.in`
```
3
1 2 3 4
6 5 3 9
3 4 1 2
```

`poarta.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

using namespace std;

const int MAXN = 250;

ifstream fin("poarta.in");
ofstream fout("poarta.out");

struct Queue {
  int x, y, dist;
};

struct Node {
  int x, y;
  bool visited;
};

int n, m;
Node matrix[MAXN + 2][MAXN + 2];
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
Queue queue[MAXN * MAXN];

int bfs() {
  int front = 0, rear = 0;
  queue[rear] = {1, 1, 0};
  matrix[1][1].visited = true;
  rear++;

  while (front < rear) {
    int x = queue[front].x;
    int y = queue[front].y;
    int dist = queue[front].dist;
    front++;

    for (int i = 0; i < 4; i++) {
      int newx = x + dx[i];
      int newy = y + dy[i];

      if (newx > 0 && newx <= n && newy > 0 && newy <= n &&
          !matrix[newx][newy].visited) {
        queue[rear] = {newx, newy, dist + 1};
        matrix[newx][newy].visited = true;
        rear++;
      }
    }
  }

  return queue[rear - 1].dist;
}

int main() {
  fin >> n >> m;

  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= n; j++) {
      matrix[i][j] = {i, j, false};
    }
  }

  while (m--) {
    int x1, y1, x2, y2;
    fin >> x1 >> y1 >> x2 >> y2;
    if (x1 != x2 || y1 != y2) {
      int d = bfs();
      matrix[x1][y1].visited = false;
      matrix[x2][y2].visited = false;
      fout << d << '\n';
    } else {
      fout << 0 << '\n';
    }
  }

  fin.close();
  fout.close();

  return 0;
}
```
