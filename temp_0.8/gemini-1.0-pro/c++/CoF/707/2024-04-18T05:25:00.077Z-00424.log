---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <cstring>
#include <fstream>

int N, L;
char sir[17001], aux[17001];

int main() {
  std::ifstream fin("sir.in");
  fin >> N;
  fin.close();
  sir[0] = '1';
  L = 1;
  for (int i = 1; i < N; i++) {
    int p = 0, u = 0;
    while (p < L) {
      int cnt = 1;
      while (p + cnt < L && sir[p] == sir[p + cnt]) { cnt++; }
      aux[u++] = cnt + '0';
      aux[u++] = sir[p];
      p += cnt;
    }
    memcpy(sir, aux, sizeof(aux));
    L = u;
  }
  std::ofstream fout("sir.out");
  fout << sir << "\n";
  fout.close();
}
```
