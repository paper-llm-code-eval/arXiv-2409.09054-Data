{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run/ro/temp_0.8/gemini-1.0-pro/c++/CoF/793/2024-04-18T06:41:17.919Z-01596.log",
  "attemptStart": 1713422477.919,
  "attemptEnd": 1713422491.779,
  "attemptDuration": 13.860000133514404,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nifstream fin(\"livada.in\");\nofstream fout(\"livada.out\");\n\nint main() {\n    int m, n, p;\n    fin >> m >> n >> p;\n    vector<int> v(p);\n    vector<vector<int>> livada(m, vector<int>(n));\n    vector<bool> majoritar(m, false);\n    int maxConsecutive = 0;\n    int maxConsecutiveCount = 0;\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            fin >> livada[i][j];\n        }\n        for (int j = 0; j < n; j++) {\n            v[livada[i][j]]++;\n        }\n        int maxCount = 0;\n        for (int j = 0; j < p; j++) {\n            maxCount = max(maxCount, v[j]);\n        }\n        if (maxCount > (n / 2)) {\n            majoritar[i] = true;\n        }\n        for (int j = 0; j < p; j++) {\n            int count = 0;\n            for (int k = 0; k < n; k++) {\n                if (livada[i][k] == j) {\n                    count++;\n                } else {\n                    maxConsecutiveCount = max(maxConsecutiveCount, count);\n                    count = 0;\n                }\n            }\n            maxConsecutiveCount = max(maxConsecutiveCount, count);\n        }\n        for (int j = 0; j < p; j++) {\n            v[j] = 0;\n        }\n    }\n    int count = 0;\n    for (int i = 0; i < m; i++) {\n        if (majoritar[i]) {\n            count++;\n        }\n    }\n    fout << count << endl;\n    fout << maxConsecutiveCount << endl;\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1493,
  "metadata": {
    "id": 793,
    "examples": [
      {
        "in": "4 7 9\n2 1 2 3 8 2 2\n4 7 2 4 9 7 4\n5 5 2 5 5 5 7\n2 3 2 3 2 3 1",
        "out": "2\n3",
        "explainer": ""
      }
    ],
    "body": "Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.\nCuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\\lfloor n/2 \\rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\\lfloor y \\rfloor$ se înţelege partea întreagă a numărului real $y$)*.\n\n# Cerință\n\nCunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:\n\n* pe câte rânduri din livadă există un soi majoritar;\n* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.\n\n# Date de intrare\n\n\nFişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.\n\n\n# Date de ieșire\n\n\nFişierul de ieşire `livada.out` va conţine două linii:\n\n* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;\n* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.\n\n\n# Restricții și precizări\n\n* $1 \\leq m \\leq 100$;\n* $1 \\leq n \\leq 700 \\ 000$;\n* $1 \\leq m \\cdot n \\leq 700 \\ 000$;\n* $1 \\leq p \\leq 998 \\ 560 \\ 000$;\n* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \\ 000$.\n* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.",
    "header": {
      "problem_id": 793,
      "problem_name": "livada",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 8,
      "console_input": false,
      "input_filename": "livada.in",
      "output_filename": "livada.out",
      "multiple_solutions": true,
      "original_source": "OJI 2010 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "8m",
    "filename": {
      "input": "livada.in",
      "output": "livada.out"
    },
    "consoleInteraction": false
  }
}