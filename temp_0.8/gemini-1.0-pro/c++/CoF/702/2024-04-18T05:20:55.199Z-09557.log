---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `lascoala.in` and write to `lascoala.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Directorul unei școli dorește să premieze la sfârșitul anului școlar pe cei mai buni elevi la învățătură. Pentru acest lucru el are de rezolvat două probleme:

1. Să determine câți elevi vor fi premiați dintre cei $n$ elevi ai școlii. După discuții aprinse cu ceilalți profesori se hotărăște în Consiliul Profesoral ca numărul premianților să fie $n - k$, unde $k$ este cel mai mare număr pătrat perfect mai mic strict decât $n$. De exemplu, pentru $n = 150$, $k$ este $144$ (pentru că $144$ = $12^2$), deci vor fi premiați $150 - 144 = 6$ elevi.
2. Pentru a fi cât mai multă liniște la premiere, în Consiliul Profesoral se ia decizia ca elevii care nu vor fi premiați să fie așezați pe terenul de sport pe rânduri de câte $p$ elevi (unde $p^2 = k$). În acest scop, directorul a numerotat elevii nepremiați de la $1$ la $k$ și a hotărât ca elevii să fie așezați în ordinea descrescătoare a numerelor asociate.

# Cerință

Scrieți un program care citește $n$, numărul de elevi din școală și calculează numărul de elevi premiați precum și modul de așezare a elevilor nepremiați.

# Date de intrare


Fișierul de intrare `lascoala.in` va conține numărul $n$.


# Date de ieșire

Fișierul de ieșire `lascoala.out` va conține pe prima linie numărul de elevi premiați, iar pe următoarele linii așezarea elevilor nepremiați.


# Restricții și precizări

* $2 \leq n \leq 700$;

---

Example:
`lascoala.in`
```
35
```

`lascoala.out`
```
10
25 24 23 22 21
20 19 18 17 16
15 14 13 12 11
10 9 8 7 6
5 4 3 2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <cmath>
#include <cstdint>

int main() {
    std::ifstream in("lascoala.in", std::ios::binary);
    std::ofstream out("lascoala.out", std::ios::binary);

    uint32_t n;
    in.read(reinterpret_cast<char *>(&n), sizeof(n));

    // find the largest perfect square lower than n
    uint32_t k = 0;
    for (uint32_t i = 2; i * i <= n; ++i) {
        k = i * i;
    }

    uint32_t p = std::sqrt(k);

    // write the number of students that will be awarded
    out.write(reinterpret_cast<char *>(&n), sizeof(n));
    out.write(reinterpret_cast<char *>(&k), sizeof(k));
    out.write(reinterpret_cast<char *>(&p), sizeof(p));

    // write the order in which the students should be seated
    uint32_t count = 0;
    for (uint32_t i = k; i >= 1; --i) {
        out.write(reinterpret_cast<char *>(&i), sizeof(i));
        count++;
        if (count == p) {
            count = 0;
            out.write("\n", 1);
        }
    }
    out.close();

    return 0;
}
```
