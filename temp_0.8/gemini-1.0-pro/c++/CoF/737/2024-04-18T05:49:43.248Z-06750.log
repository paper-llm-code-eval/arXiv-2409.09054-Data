---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <bits/stdc++.h>
using namespace std;

int minimum(int a, int b) {
    if (a < b)
        return a;
    return b;
}

int maximum(int a, int b) {
    if (a > b)
        return a;
    return b;
}

int main() {
    ifstream fin("multimi.in");
    ofstream fout("multimi.out");

    int n;
    fin >> n;

    int start[n], end[n];
    for (int i = 0; i < n; i++) {
        fin >> start[i] >> end[i];
    }

    int start_inter = start[0], end_inter = end[0];
    for (int i = 1; i < n; i++) {
        start_inter = maximum(start_inter, start[i]);
        end_inter = minimum(end_inter, end[i]);
    }

    if (start_inter > end_inter)
        fout << "multimea vida";
    else {
        for (int i = start_inter; i <= end_inter; i++)
            fout << i << " ";
    }

    return 0;
}
```
