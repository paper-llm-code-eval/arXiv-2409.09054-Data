---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
using namespace std;

int main()
{
    ifstream in("multimi.in");
    ofstream out("multimi.out");

    int n, a, b, st[31] = {0}, dr[31] = {0};
    in >> n;
    for (int i = 1; i <= n; i++)
    {
        in >> a >> b;
        st[i] = a;
        dr[i] = b;
    }

    int iMin = 31, iMax = 0;
    for (int i = 1; i <= n; i++)
    {
        iMin = min(iMin, st[i]);
        iMax = max(iMax, dr[i]);
    }

    bool exista = false;
    for (int i = iMin; i <= iMax; i++)
    {
        bool ok = true;
        for (int j = 1; j <= n; j++)
            if (i < st[j] || i > dr[j])
            {
                ok = false;
                break;
            }
        if (ok)
        {
            if (exista) out << ' ';
            exista = true;
            out << i;
        }
    }
    if (!exista) out << "multimea vida";
    return 0;
}
```
