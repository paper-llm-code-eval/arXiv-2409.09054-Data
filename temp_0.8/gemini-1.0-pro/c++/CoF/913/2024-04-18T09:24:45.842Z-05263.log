---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `paralele.in` and write to `paralele.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Avem o matrice de dimensiuni $N \cdot M$, cu elemente $0$ și $1$. Numim segment o secvență de cel puțin două valori $1$ aflate una lângă alta, toate pe aceeași linie, sau toate pe aceeași coloană a matricei.

# Cerință

Se cere determinarea numărului de perechi de segmente:

1. aflate pe linii distincte ale matricei;
2. aflate pe coloane distincte ale matricei;

# Date de intrare

Fișierul `paralele.in` conține pe prima linie, separate prin câte un spațiu trei valori naturale, în ordine: $T, N$ și $M$. Dacă $T$ este $1$ se rezolvă doar cerința $1$, iar dacă $T$ este $2$ se rezolvă doar cerința $2$.
Începând cu linia a doua se află elementele matricei, o linie a matricei pe o linie a fișierului. Elementele de pe aceeași linie se separă prin câte un spațiu.

# Date de ieșire

Fișierul `paralele.out` conține pe prima linie un număr natural reprezentând valoarea cerută.

# Restricții și precizări

* $1 \leq T \leq 2$;

|#|Punctaj|Restricții|
|-|-|--------|
|1|30|$T = 1, N = 2, 2 \leq M \leq 500$ și toate elementele $1$ de pe oricare dintre linii, dacă există, formează o secvență compactă.|
|2|30|$T = 2, 2 \leq N \leq 500, 2 \leq M \leq 500$ si pe oricare coloană sunt maximum două valori de 1 alăturate.|
|3|9|$T = 1, 2 \leq N \leq 500, 2 \leq M \leq 500$|
|4|9|$T = 2, 2 \leq N \leq 500, 2 \leq M \leq 500$|
|5|12|$T = 1, 35 \ 000 \leq N \leq 40 \ 000, 8 \leq M \leq 10$|
|6|10|puncte din oficiu|

---

Example:
`paralele.in`
```
1 5 6
0 1 1 1 0 0
1 0 0 0 0 0
0 0 0 1 0 0
1 1 0 1 1 0
0 1 1 0 0 0
```

`paralele.out`
```
11
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```c++
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream in("paralele.in");
    int T, N, M;
    in >> T >> N >> M;
    std::vector<std::vector<bool>> mat(N, std::vector<bool>(M));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            int x;
            in >> x;
            mat[i][j] = x;
        }
    }
    in.close();
    int cnt1 = 0, cnt2 = 0;
    if (T == 1) {
        for (int i = 0; i < N; ++i) {
            bool ok = false;
            int st = -1, dr = -1;
            for (int j = 0; j < M; ++j) {
                if (mat[i][j]) {
                    if (!ok) {
                        st = j;
                        ok = true;
                    }
                } else {
                    if (ok) {
                        dr = j - 1;
                        cnt1 += dr - st + 1;
                        ok = false;
                    }
                }
            }
            if (ok) {
                cnt1 += M - st;
            }
        }
    } else {
        for (int j = 0; j < M; ++j) {
            bool ok = false;
            int st = -1, dr = -1;
            for (int i = 0; i < N; ++i) {
                if (mat[i][j]) {
                    if (!ok) {
                        st = i;
                        ok = true;
                    }
                } else {
                    if (ok) {
                        dr = i - 1;
                        cnt2 += dr - st + 1;
                        ok = false;
                    }
                }
            }
            if (ok) {
                cnt2 += N - st;
            }
        }
    }
    std::ofstream out("paralele.out");
    out << (T == 1 ? cnt1 : cnt2) << '\n';
    out.close();
    return 0;
}
```
