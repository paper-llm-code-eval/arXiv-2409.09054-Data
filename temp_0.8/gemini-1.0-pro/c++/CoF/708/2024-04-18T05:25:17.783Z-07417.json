{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run/ro/temp_0.8/gemini-1.0-pro/c++/CoF/708/2024-04-18T05:25:17.783Z-07417.log",
  "attemptStart": 1713417917.783,
  "attemptEnd": 1713417942.869,
  "attemptDuration": 25.085999965667725,
  "code": "#include <algorithm>\n#include <vector>\n#include <fstream>\n#include <iostream>\nusing namespace std;\n\nvector<string> anagrame;\n\nvoid backtrack(string cuv, string anagrama, bool* used) {\n    if (cuv.size() == anagrama.size()) {\n        if (find(anagrame.begin(), anagrame.end(), anagrama) == anagrame.end()) {\n            anagrame.push_back(anagrama);\n        }\n        return;\n    }\n    for (int i = 0; i < cuv.size(); i++) {\n        if (!used[i]) {\n            used[i] = true;\n            anagrama.push_back(cuv[i]);\n            backtrack(cuv, anagrama, used);\n            anagrama.pop_back();\n            used[i] = false;\n        }\n    }\n}\n\nint main() {\n    ifstream in(\"anagrame.in\");\n    ofstream out(\"anagrame.out\");\n    string cuv;\n    in >> cuv;\n    sort(cuv.begin(), cuv.end());\n    bool used[11];\n    fill(used, used + 11, false);\n    backtrack(cuv, \"\", used);\n    sort(anagrame.begin(), anagrame.end());\n    for (int i = 0; i < anagrame.size(); i++) {\n        out << anagrame[i] << \"\\n\";\n    }\n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1463,
  "metadata": {
    "id": 708,
    "examples": [
      {
        "in": "ana",
        "out": "aan\nana\nnaa",
        "explainer": ""
      }
    ],
    "body": "Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.\n\n# Cerință\n\nScrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.\n\n# Date de intrare\n\nFişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.\n\n\n# Date de ieșire\n\nFişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.\n\n# Restricții și precizări\n\n* Cuvântul dat are cel mult $10$ litere mici.\n* Cuvântul $x = x_1 \\ x_2 \\dots x_n$ precede cuvântul $y = y_1 \\ y_2 \\dots y_n$ dacă există un indice $k \\in {1, 2, \\dots, n}$ astfel încât $x_i = y_i$, $i \\in {1, 2, \\dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.",
    "header": {
      "problem_id": 708,
      "problem_name": "anagrame",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "anagrame.in",
      "output_filename": "anagrame.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 VIII: Problema 2 (Modificată)"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "anagrame.in",
      "output": "anagrame.out"
    },
    "consoleInteraction": false
  }
}