{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "gemini-1.0-pro",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/gemini-1.0-pro/python/CoF/650/2024-04-20T13:27:03.911Z-05172.log",
  "attemptStart": 1713619623.911,
  "attemptEnd": 1713619634.019,
  "attemptDuration": 10.108000040054321,
  "code": "with open(\"yinyang.in\", \"r\") as f:\n    n, m = map(int, f.readline().split())\n    a = [list(map(int, f.readline().split())) for _ in range(n)]\n\n# Check if the matrix is already yin-yang\nis_yin_yang = True\nfor i in range(n):\n    for j in range(1, m):\n        if a[i][j] < a[i][j - 1]:\n            is_yin_yang = False\nfor j in range(m):\n    for i in range(1, n):\n        if a[i][j] < a[i - 1][j]:\n            is_yin_yang = False\nif is_yin_yang:\n    with open(\"yinyang.out\", \"w\") as f:\n        f.write(\"0\\n\")\n    exit()\n\n# Compute the number of inversions in each row and column\nrow_inv = [0] * n\ncol_inv = [0] * m\nfor i in range(n):\n    for j in range(m):\n        for k in range(j + 1, m):\n            if a[i][j] > a[i][k]:\n                row_inv[i] += 1\nfor j in range(m):\n    for i in range(n):\n        for k in range(i + 1, n):\n            if a[i][j] > a[k][j]:\n                col_inv[j] += 1\n\n# Compute the minimum number of operations\nmin_ops = float('inf')\nfor i in range(n):\n    for j in range(1, m):\n        min_ops = min(min_ops, row_inv[i] + col_inv[j - 1] + col_inv[j])\nfor j in range(m):\n    for i in range(1, n):\n        min_ops = min(min_ops, row_inv[i - 1] + row_inv[i] + col_inv[j])\n\n# Output the minimum number of operations\nwith open(\"yinyang.out\", \"w\") as f:\n    if min_ops == float('inf'):\n        f.write(\"-1\\n\")\n    else:\n        f.write(str(min_ops) + \"\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1199,
  "metadata": {
    "id": 650,
    "examples": [
      {
        "in": "2 3\n1 2 4\n3 5 6",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2 3\n6 6 5\n4 6 2",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se dă o matrice $A$ cu $N$ linii și $M$ coloane, cu valori cuprinse între $1$ și $N \\cdot M$ inclusiv, nu neapărat distincte. O **operație** constă în selectarea a două linii sau două coloane consecutive și interschimbarea acestora (swap). O matrice **yin-yang** este o matrice în care $A[i][j] \\geq A[i][j – 1]$, pentru orice pereche $(i, j)$ cu $1 \\leq i \\leq N$ și $2 \\leq j \\leq M$ și $A[i][j] \\geq A[i – 1][j]$, pentru orice pereche $(i, j)$ cu $2 \\leq i \\leq N$ și $1 \\leq j \\leq M$.\n\n# Cerinţă\n\nSă se determine numărul minim de operații necesare pentru a transforma matricea dată într-o matrice yin-yang.\n\n# Date de intrare\n\nÎn fișierul de intrare `yinyang.in` se află scrise pe prima linie numerele naturale $N$ și $M$, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ numere naturale, reprezentând elementele matricei date $A$. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\n\nÎn fișierul `yinyang.out` se va scrie numărul minim de operații cerut sau $-1$ dacă nu există soluție.\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 100$;\n* Pentru teste în valoare de $9$ puncte: $1 \\leq N, M \\leq 5$;\n- Pentru alte teste în valoare de $18$ puncte: $N = 1$;\n- Pentru alte teste în valoare de $36$ de puncte elementele din matrice sunt **DISTINCTE**.",
    "header": {
      "problem_id": 650,
      "problem_name": "yinyang",
      "tags": "[Ad hoc, Sorting]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "yinyang.in",
      "output_filename": "yinyang.out",
      "multiple_solutions": false,
      "original_source": "OJI 2019 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "yinyang.in",
      "output": "yinyang.out"
    },
    "consoleInteraction": false
  }
}