---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# open files
fin = open('valori-panta.in', 'r')
fout = open('valori-panta.out', 'w')

# read the number of elements
n = int(fin.readline())

# create a vector with the elements
v = list(map(int, fin.readline().split()))

# count the number of values-pantă
nr_values_panta = 0

# find the greatest and the smallest values-pantă and their positions
greatest_value_panta = 0
smallest_value_panta = 1000000000
positions_greatest_value_panta = []
positions_smallest_value_panta = []

for i in range(n):
    ok1 = True
    ok2 = True
    # check if the element is a value-pantă
    for j in range(1, len(str(v[i]))):
        if int(str(v[i])[j]) < int(str(v[i])[j - 1]):
            ok1 = False
        if int(str(v[i])[j]) > int(str(v[i])[j - 1]):
            ok2 = False
    if ok1 or ok2:
        nr_values_panta += 1
        if v[i] > greatest_value_panta:
            greatest_value_panta = v[i]
            positions_greatest_value_panta = [i + 1]
        elif v[i] == greatest_value_panta:
            positions_greatest_value_panta.append(i + 1)
        if v[i] < smallest_value_panta:
            smallest_value_panta = v[i]
            positions_smallest_value_panta = [i + 1]
        elif v[i] == smallest_value_panta:
            positions_smallest_value_panta.append(i + 1)

# write the number of values-pantă
fout.write(str(nr_values_panta) + '\n')

# write the greatest value-pantă and its positions
if nr_values_panta > 0:
    fout.write(str(greatest_value_panta))
    for position in positions_greatest_value_panta:
        fout.write(' ' + str(position))
    fout.write('\n')

# write the smallest value-pantă and its positions
if nr_values_panta > 0:
    fout.write(str(smallest_value_panta))
    for position in positions_smallest_value_panta:
        fout.write(' ' + str(position))
else:
    fout.write('NU EXISTA')

# close files
fin.close()
fout.close()
```
