---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient function to calculate the number of divisors
def count_divisors(x):
    count = 0
    i = 1
    while i * i < x:
        if x % i == 0:
            count += 2
        i += 1
    if i * i == x:
        count += 1
    return count

# Function to solve the first challenge
def min_num_max_force(numbers):
    max_force = 0
    min_num = float('inf')
    for num in numbers:
        force = count_divisors(num)
        if force > max_force or (force == max_force and num < min_num):
            max_force = force
            min_num = num
    return min_num

# Function to solve the second challenge
def max_length_same_force(numbers):
    force_dict = {}
    for num in numbers:
        force = count_divisors(num)
        if force in force_dict:
            force_dict[force] += 1
        else:
            force_dict[force] = 1
    return max(force_dict.values())

# Read input file
with open('forta.in', 'r') as file:
    c = int(file.readline())
    n = int(file.readline())
    numbers = list(map(int, file.readline().split()))

# Compute the output
if c == 1:
    result = min_num_max_force(numbers)
else:
    result = max_length_same_force(numbers)

# Write output file
with open('forta.out', 'w') as file:
    file.write(str(result))
```

This code meets the requirements of reading from a file named `forta.in`, computing the result based on the challenge given, and writing the result to a file named `forta.out`. It does not use `input()` or `print()` for I/O operations. The performance is optimized with an efficient divisor counting function.
