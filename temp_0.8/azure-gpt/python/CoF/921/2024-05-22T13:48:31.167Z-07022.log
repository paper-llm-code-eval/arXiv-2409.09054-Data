---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from collections import defaultdict

# Function to calculate the strength of a number
def strength(x):
    divisors = 2  # 1 and x itself
    for i in range(2, int(x**0.5) + 1):
        if x % i == 0:
            divisors += 1 if i == x // i else 2
    return divisors

# Read input data
with open('forta.in', 'r') as fin:
    c = int(fin.readline().strip())
    n = int(fin.readline().strip())
    numbers = list(map(int, fin.readline().split()))

# Process the numbers based on the problem requirement
if c == 1:
    # Finding the number with maximum strength and then the smallest one among them
    max_strength = 0
    num_with_max_strength = float('inf')
    for num in numbers:
        current_strength = strength(num)
        if current_strength > max_strength:
            max_strength = current_strength
            num_with_max_strength = num
        elif current_strength == max_strength:
            num_with_max_strength = min(num_with_max_strength, num)
    result = num_with_max_strength
elif c == 2:
    # Counting the occurrences of strengths
    strength_counts = defaultdict(int)
    for num in numbers:
        strength_counts[strength(num)] += 1
    result = max(strength_counts.values())

# Write the output data
with open('forta.out', 'w') as fout:
    fout.write(str(result) + '\n')
```

This script should be saved as a `.py` file and then run after the `forta.in` file has been placed in the same directory. The script reads the data from `forta.in`, processes it according to the problem statement, and writes the result to `forta.out`. It optimizes the strength calculation by only iterating up to the square root of the number in question.
