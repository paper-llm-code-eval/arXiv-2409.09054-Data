---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from collections import defaultdict

def count_divisors(num):
    divisors_count = 0
    for i in range(1, int(num**0.5) + 1):
        if num % i == 0:
            divisors_count += 1 if i * i == num else 2
    return divisors_count

def solve_criterion_one(numbers):
    max_force = float('-inf')
    min_number_with_max_force = float('inf')
    for number in numbers:
        force = count_divisors(number)
        if force > max_force or (force == max_force and number < min_number_with_max_force):
            max_force = force
            min_number_with_max_force = number
    return min_number_with_max_force

def solve_criterion_two(numbers):
    force_dict = defaultdict(int)
    for number in numbers:
        force = count_divisors(number)
        force_dict[force] += 1
    max_length = max(force_dict.values())
    return max_length

with open('forta.in', 'r') as file:
    c = int(file.readline().strip())
    n = int(file.readline().strip())
    numbers = list(map(int, file.readline().split()))

result = solve_criterion_one(numbers) if c == 1 else solve_criterion_two(numbers)

with open('forta.out', 'w') as file:
    file.write(str(result))
```

This solution counts divisors in an efficient way, by only iterating up to the square root of the number, and if a divisor is found, adds 1 if it's a perfect square or 2 for the pair of divisors. For criterion one, it tracks the maximum force and the smallest number associated with it, while for criterion two, it uses a dictionary to store the count of numbers with the same force to later find the maximum sequence length.
