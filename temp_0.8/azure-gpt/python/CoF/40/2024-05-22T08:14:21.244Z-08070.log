---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ubuntzei.in` and write to `ubuntzei.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Trei ubuntzei au hotărât ca anul acesta să petreacă ziua de 1 Mai pe malul Mării Negre împreună cu prietenii lor, motiv pentru care au pus la cale o excursie pe un traseu care să plece din oraşul lor Cluj-Napoca spre Vama Veche, unde nisipul îi aşteaptă. 

În ţara ubuntzeilor există $N$ localităţi, numerotate de la $1$ la $N$, legate între ele prin $M$ şosele bidirecţionale de diferite lungimi. Localitatea de plecare a ubuntzeilor, oraşul Cluj-Napoca, este numerotată cu $1$, iar localitatea destinaţie, Vama Veche, cu $N$. Între oricare două localităţi există cel mult o şosea. Fiecare şosea uneşte două localităţi distincte şi se poate călători între oricare două localităţi circulând numai pe şosele. 

Prietenii ubuntzeilor locuiesc în $K$ localităţi distincte, diferite de Cluj-Napoca şi Vama Veche. Pentru a nu călători singuri, cei trei ubuntzei vor să treacă prin cele $K$ localităţi în care locuiesc prietenii lor, şi apoi, împreună cu aceştia, să-şi continue excursia către mare.

Nerăbdători să ajungă cât mai repede la destinaţie, ubuntzeii s-au hotărât să îşi stabilească un traseu de lungime minimă care să treacă prin toate cele $K$ localităţi. 

# Cerinţă
Scrieţi un program care să determine, pentru ubuntzei, lungimea minimă $L$ a unui traseu de la Cluj-Napoca la Vama Veche ce trece prin toate cele $K$ localităţi.

# Date de intrare
Prima linie a fişierului de intrare `ubuntzei.in` conţine două numere naturale $N\ M$, separate printr-un spaţiu, cu semnificaţia din enunţ. A doua linie a fişierului conţine $K + 1$ numere naturale distincte: $K\ C_1\ C_2\ ...\ C_K$, separate prin câte un spaţiu, $K$ având semnificaţia din enunţ iar $C_1, C_2, ..., C_K$ reprezentând cele $K$ localităţi în care locuiesc prietenii. Fiecare din următoarele $M$ linii conţine câte trei numere naturale $x\ y\ z$, separate prin câte un spaţiu, reprezentând o şosea care leagă localitatea $x$ de localitatea $y$ şi are lungimea $z$.

# Date de ieşire
Fişierul de ieşire `ubuntzei.out` va conţine numărul natural $L$ reprezentând lungimea minimă căutată.

# Restricţii şi precizări
* $1 ≤ N ≤ 2\ 000$
* $1 ≤ M ≤ 10\ 000$
* $0 ≤ K ≤ \min\{15, N – 2\}$
* $2 ≤ C_1, C_2, ..., C_K ≤ N – 1$
* Traseul poate trece de mai multe ori prin oricare localitate.
* Costul unei muchii va fi cuprins între $1$ şi $10^5$.
* Pentru primele $20%$ din teste $K = 0$.
* Pentru primele $50%$ din teste $K ≤ 10$.
* Pentru primele $70%$ din teste $N ≤ 200$.

---

Example:
`ubuntzei.in`
```
4 5 
1 2
1 2 1
1 3 1
2 3 1
2 4 4
3 4 2
```

`ubuntzei.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from collections import defaultdict
import heapq

# Read the input data from 'ubuntzei.in'
with open('ubuntzei.in', 'r') as file:
    N, M = map(int, file.readline().strip().split())
    K_plus_friends = list(map(int, file.readline().strip().split()))
    K = K_plus_friends[0]
    friends = [0] + K_plus_friends[1:] + [N - 1]
    graph = defaultdict(list)
    for _ in range(M):
        x, y, z = map(int, file.readline().strip().split())
        graph[x].append((y, z))
        graph[y].append((x, z))

# Dijkstra's algorithm to find shortest paths from a given node to all other nodes.
def dijkstra(start):
    distances = {node: float('inf') for node in range(1, N + 1)}
    distances[start] = 0
    queue = [(0, start)]
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))
    return distances

# Precompute all the shortest paths between friends' cities
shortest_paths = {city: dijkstra(city) for city in friends}

# Calculate the shortest path passing through all friends' cities
def calculate_min_route():
    # Use Dynamic Programming to find the shortest Hamiltonian path
    # dp[mask][i] represents the shortest path to reach the state where cities in mask are visited and the current city is i
    dp = [[float('inf')] * (K + 2) for _ in range(1 << (K + 2))]
    for i in range(K + 2):
        dp[1 << i][i] = shortest_paths[1][friends[i]]

    for mask in range(1 << (K + 2)):
        for u in range(K + 2):
            if mask & (1 << u):
                for v in range(K + 2):
                    if not mask & (1 << v):
                        next_mask = mask | (1 << v)
                        dp[next_mask][v] = min(dp[next_mask][v],
                                                dp[mask][u] + shortest_paths[friends[u]][friends[v]])

    return min(dp[(1 << (K + 2)) - 1])

# Calculate and write the output to 'ubuntzei.out'
with open('ubuntzei.out', 'w') as file:
    file.write(f"{calculate_min_route()}\n")
```
```
---------- user ----------


Expected program to write result to `ubuntzei.out` and read from `ubuntzei.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from collections import defaultdict
import heapq

def read_input(filename='ubuntzei.in'):
    with open(filename, 'r') as file:
        N, M = map(int, file.readline().strip().split())
        friends_info = list(map(int, file.readline().strip().split()))
        K = friends_info[0]
        friends = [1] + friends_info[1:] + [N]
        edges = [tuple(map(int, file.readline().strip().split())) for _ in range(M)]
    return N, M, K, friends, edges

def write_output(min_length, filename='ubuntzei.out'):
    with open(filename, 'w') as file:
        file.write(f"{min_length}\n")

def dijkstra(graph, start, N):
    distances = {node: float('inf') for node in range(1, N + 1)}
    distances[start] = 0
    queue = [(0, start)]
    heapq.heapify(queue)
    while queue:
        current_distance, current_node = heapq.heappop(queue)
        if current_distance > distances[current_node]:
            continue
        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(queue, (distance, neighbor))
    return distances

def calculate_min_route(N, K, friends, edges):
    graph = defaultdict(list)
    for x, y, z in edges:
        graph[x].append((y, z))
        graph[y].append((x, z))
    
    all_distances = {friend: dijkstra(graph, friend, N) for friend in friends}
    
    dp = [[float('inf')] * (K + 2) for _ in range(1 << (K + 2))]
    for i in range(K + 2):
        dp[1 << i][i] = 0  # Distance to itself is 0
    
    for mask in range(1 << (K + 2)):
        for u in range(K + 2):
            if mask & (1 << u):
                for v in range(K + 2):
                    if u != v and not mask & (1 << v):
                        next_mask = mask | (1 << v)
                        dp[next_mask][v] = min(dp[next_mask][v],
                                               dp[mask][u] + all_distances[friends[u]][friends[v]])

    return min(dp[-1])

# Main execution
N, M, K, friends, edges = read_input()
min_length = calculate_min_route(N, K, friends, edges)
write_output(min_length)
```
