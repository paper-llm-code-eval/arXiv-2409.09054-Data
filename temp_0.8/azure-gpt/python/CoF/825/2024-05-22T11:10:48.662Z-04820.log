---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `deal.in` and write to `deal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică are la grădiniță $N$ turnuri cu înălțimile $h_1, h_2, \dots, h_N$. Când așază în linie niște turnuri, cel puțin două, astfel încât înălțimile lor să fie în ordine crescătoare, Vasilică spune că a construit un deal. Înălțimea dealului este egală cu înălțimea celui mai înalt turn folosit. Iată, de exemplu, că așezând în ordine turnurile cu înălțimile $2 \ 4 \ 4 \ 7 \ 9$ a format un deal cu înălțimea $9$.

Vasilică și-ar dori să așeze în linie cele $N$ turnuri, formând o succesiune de dealuri astfel încât suma înălțimilor dealurilor formate să fie maximă.

# Cerință

Scrieți un program care, cunoscând înălțimile celor $N$ turnuri, va determina suma înălțimilor dealurilor ce se pot forma așezând în linie cele $N$ turnuri, maximă posibil.

# Date de intrare

Fișierul de intrare `deal.in` conține pe prima linie numărul natural $N$. Pe cea de a doua linie se află $N$ numere naturale separate prin spații, reprezentând înălțimile celor $N$ turnuri.

# Date de ieșire

Fișierul de ieșire `deal.out` va conține o singură linie pe care va fi scris un număr natural reprezentând cerința problemei.

# Restricții și precizări

* $2 \leq N \leq 100 \ 000$;
* $1 \leq $ Înălțimile turnurilor $ \leq 100 \ 000$;
* Dacă după aranjarea turnurilor $h_i \leq h_{i+1}$ atunci turnurile $i$ și $i + 1$ fac parte din același deal.

---

Example:
`deal.in`
```
7
10 2 2 2 7 5 2
```

`deal.out`
```
22
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def maximize_hill_sum(heights):
    stack = []
    total_sum = 0
    for h in heights:
        while stack and stack[-1] > h:
            total_sum += stack.pop()
        if not stack or stack[-1] != h:
            stack.append(h)
    return total_sum + sum(stack)

def read_input(file_path):
    with open(file_path, 'r') as f:
        f.readline()  # Skip the first line, as we don't need N
        heights = list(map(int, f.readline().split()))
    return heights

def write_output(file_path, result):
    with open(file_path, 'w') as f:
        f.write(str(result))

# Read the heights from 'deal.in'
heights = read_input('deal.in')

# Calculate the maximum possible sum of hill heights
result = maximize_hill_sum(heights)

# Write the result to 'deal.out'
write_output('deal.out', result)
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Reads the heights from 'deal.in' and writes the result to 'deal.out'
with open('deal.in', 'r') as fin:
    N = int(fin.readline().strip())
    heights = list(map(int, fin.readline().split()))

# This function calculates the maximum possible sum of hill heights
def maximize_hill_sum(heights):
    max_sum = 0
    current_hill = 0
    for h in heights:
        if h > current_hill:
            max_sum += h
            current_hill = h
        else:
            max_sum += current_hill
    return max_sum

# Calculate the maximum possible sum of hill heights
result = maximize_hill_sum(heights)

# Write the result to 'deal.out'
with open('deal.out', 'w') as fout:
    fout.write(str(result))
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_heights_from_file(file_path):
    with open(file_path, 'r') as file:
        file.readline()  # Skip the first line as we don't need N
        heights = list(map(int, file.readline().strip().split()))
    return heights

def write_result_to_file(file_path, result):
    with open(file_path, 'w') as file:
        file.write(str(result) + '\n')

def calculate_max_sum_of_hills(heights):
    max_sum = 0
    prev_height = 0
    for height in sorted(heights, reverse=True):
        if height > prev_height:
            max_sum += height
            prev_height = height
    return max_sum

heights = read_heights_from_file('deal.in')
max_sum = calculate_max_sum_of_hills(heights)
write_result_to_file('deal.out', max_sum)
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def maximize_hill_sum(heights):
    # Use a stack to track the current sequence of increasing hill heights
    stack = []
    total_sum = 0
    for h in heights:
        # If we encounter a smaller height, we finish the current hill and start a new one
        while stack and stack[-1] > h:
            total_sum += stack.pop()
        # If the stack is empty or the current height is different, we start a new hill
        if not stack or stack[-1] != h:
            stack.append(h)
    # Add the remaining heights in the stack to the total sum
    return total_sum + sum(set(stack))

# Read heights from 'deal.in'
with open('deal.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().split()))

# Calculate the maximum possible sum of hill heights
result = maximize_hill_sum(heights)

# Write the result to 'deal.out'
with open('deal.out', 'w') as file:
    file.write(f"{result}\n")
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# This function will read the heights from the file 'deal.in'
def read_heights():
    with open('deal.in', 'r') as fin:
        fin.readline()  # Skip the first line as we don't need N
        heights = list(map(int, fin.readline().split()))
    return heights

# This function will write the result to the file 'deal.out'
def write_result(result):
    with open('deal.out', 'w') as fout:
        fout.write(str(result) + '\n')

# This function finds the maximum possible sum of hills
def find_max_hill_sum(heights):
    # Sort the heights in non-decreasing order
    heights.sort()
    max_sum = 0
    current_hill = 0
    for height in heights:
        if height > current_hill:
            max_sum += height
            current_hill = height
        else:
            max_sum += current_hill
    return max_sum

# Read the heights from 'deal.in'
heights = read_heights()

# Calculate the maximum possible sum of hills
max_hill_sum = find_max_hill_sum(heights)

# Write the result to 'deal.out'
write_result(max_hill_sum)
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to calculate the maximum possible sum of hill heights
def maximize_hill_sum(heights):
    # Use a stack to maintain the current hill heights
    stack = []
    total_sum = 0
    for h in heights:
        # While the current height is less than the top of the stack,
        # pop elements from the stack and add them to the total sum
        while stack and h < stack[-1]:
            total_sum += stack.pop()
        # If the stack is empty or the current height is not at the top of the stack,
        # push the current height onto the stack
        if not stack or stack[-1] < h:
            stack.append(h)
    # Add the remaining elements in the stack to the total sum
    total_sum += sum(stack)
    return total_sum

# Read the heights from 'deal.in'
with open('deal.in', 'r') as fin:
    fin.readline()  # Discard the first line as it is not required
    heights = list(map(int, fin.readline().split()))

# Calculate the maximum possible sum of hill heights
max_sum = maximize_hill_sum(heights)

# Write the result to 'deal.out'
with open('deal.out', 'w') as fout:
    fout.write(str(max_sum) + '\n')
```
```
---------- user ----------


Expected program to write result to `deal.out` and read from `deal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the heights from deal.in
with open('deal.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().split()))

# This function calculates the maximum sum of the hills
def maximize_hill_sum(heights):
    max_sum = 0
    current_max_height = 0
    for h in sorted(heights, reverse=True):
        if h > current_max_height:
            max_sum += h
            current_max_height = h
    return max_sum

# Calculate the maximum sum of the hills
max_sum = maximize_hill_sum(heights)

# Write the result to deal.out
with open('deal.out', 'w') as file:
    file.write(str(max_sum) + '\n')
```
```
