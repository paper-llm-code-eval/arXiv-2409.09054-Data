---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# The following Python code is designed to solve the Immortal puzzle

# Define the directions for possible moves
directions = [(-2, 0), (2, 0), (0, -2), (0, 2)]

# Check if a position is within the boundaries of the grid
def is_valid(x, y, n, m):
    return 1 <= x <= n and 1 <= y <= m

# Recursive function to find a sequence of moves that leaves only one immortal
def solve(n, m, immortals, sequence, x, y):
    # Base case: if only one immortal is left
    if len(immortals) == 1:
        return True

    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        mx, my = x + dx // 2, y + dy // 2

        # Check if the next move is valid and the middle cell has an immortal
        if is_valid(nx, ny, n, m) and (mx, my) in immortals:
            # Apply the move
            sequence.append((x, y, nx, ny))
            immortals.remove((mx, my))

            # Try to solve the remaining problem
            if solve(n, m, immortals, sequence, nx, ny):
                return True

            # Backtrack if the move didn't lead to a solution
            sequence.pop()
            immortals.add((mx, my))

    return False

# Read data from the input file
with open('immortal.in', 'r') as fin:
    n, m, i = map(int, fin.readline().split())
    immortals = set(tuple(map(int, fin.readline().split())) for _ in range(i))

# Prepare the output data
sequence = []

# Find the initial position of the first immortal to start the sequence
start_x, start_y = next(iter(immortals))

# Solve the puzzle and write the result to the output file
if solve(n, m, immortals, sequence, start_x, start_y):
    with open('immortal.out', 'w') as fout:
        for move in sequence:
            fout.write(f"{move[0]} {move[1]} {move[2]} {move[3]}\n")
else:
    with open('immortal.out', 'w') as fout:
        fout.write("No solution found\n")
```

This code includes the following key components:
- `is_valid` function: It ensures that a given position is within the grid.
- `solve` function: It is a recursive function that performs a depth-first search to find a valid sequence of moves that lead to only one immortal remaining. It uses backtracking to undo moves that do not eventually lead to a solution.
- I/O operations: The code reads from the file `immortal.in` and writes the solution to `immortal.out`.

This is the most efficient solution I can provide that tries all possible sequences of moves and ensures that the constraints are met. This code should be able to find a solution quickly for the given input size restrictions.
