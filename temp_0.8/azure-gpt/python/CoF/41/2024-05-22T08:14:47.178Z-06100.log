---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Backtracking algorithm for the Immortal challenge
def find_solution(board, immortal, x, y, sol, n, m):
    # Movements: up, down, left, right
    dx = [-2, 2, 0, 0]
    dy = [0, 0, -2, 2]

    # Base case: one immortal left
    if len(immortal) == 1:
        return True

    # Try each possible move
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        mx = x + dx[i] // 2
        my = y + dy[i] // 2

        # Check if move is inside the board and the target cell is occupied by another immortal
        if 1 <= nx <= n and 1 <= ny <= m and board[nx][ny] == 0 and board[mx][my] == 1:
            # Perform the move
            board[x][y] = board[mx][my] = 0
            board[nx][ny] = 1
            immortal.remove((mx, my))
            sol.append((x, y, nx, ny))

            # Recursively solve the rest of the problem
            if find_solution(board, immortal, nx, ny, sol, n, m):
                return True

            # Backtrack if move did not lead to solution
            board[x][y] = board[mx][my] = 1
            board[nx][ny] = 0
            immortal.append((mx, my))
            sol.pop()

    return False

def solve_immortal(n, m, immortal_positions):
    board = [[0] * (m + 1) for _ in range(n + 1)]
    immortal = set(immortal_positions)
    sol = []

    # Fill the board with immortals
    for x, y in immortal_positions:
        board[x][y] = 1

    # Try to find a solution starting from each immortal
    for x, y in immortal_positions:
        if find_solution(board, immortal, x, y, sol, n, m):
            break

    return sol

# Read from 'immortal.in'
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortal_positions = [tuple(map(int, file.readline().split())) for _ in range(I)]

# Solve the challenge
solution = solve_immortal(n, m, immortal_positions)

# Write to 'immortal.out'
with open('immortal.out', 'w') as file:
    for move in solution:
        file.write(' '.join(map(str, move)) + '\n')
```

This solution uses a backtracking algorithm to find the sequence of battles that leaves only one immortal standing. Note that the provided input and output file names are hard-coded as per the requirements. Backtracking finds a valid solution by exploring each possible move recursively and backtracking when a move does not lead to a solution. The solution assumes that for the given constraints, a solution always exists.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 60, in <module>
    solution = solve_immortal(n, m, immortal_positions)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 49, in solve_immortal
    if find_solution(board, immortal, x, y, sol, n, m):
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 33, in find_solution
    immortal.append((mx, my))
    ^^^^^^^^^^^^^^^
AttributeError: 'set' object has no attribute 'append'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly, let's correct the issue with the set object not having an 'append' method. The correct method for adding an element to a set is `add`. And for removing an element from a set, we should use `discard` or `remove`. Let's rewrite the entire solution with these fixes:

```python
# Backtracking algorithm for the Immortal challenge
def find_solution(board, immortal, x, y, sol, n, m):
    # Movements: up, down, left, right
    dx = [-2, 2, 0, 0]
    dy = [0, 0, -2, 2]

    # Base case: one immortal left
    if len(immortal) == 1:
        return True

    # Try each possible move
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        mx = x + dx[i] // 2
        my = y + dy[i] // 2

        # Check if move is inside the board and the target cell is occupied by another immortal
        if 1 <= nx <= n and 1 <= ny <= m and board[nx][ny] == 0 and board[mx][my] == 1:
            # Perform the move
            board[x][y] = board[mx][my] = 0
            board[nx][ny] = 1
            immortal.discard((mx, my))
            sol.append((x, y, nx, ny))

            # Recursively solve the rest of the problem
            if find_solution(board, immortal, nx, ny, sol, n, m):
                return True

            # Backtrack if move did not lead to solution
            board[x][y] = board[mx][my] = 1
            board[nx][ny] = 0
            immortal.add((mx, my))
            sol.pop()

    return False

def solve_immortal(n, m, immortal_positions):
    board = [[0] * (m + 1) for _ in range(n + 1)]
    immortal = set(immortal_positions)
    sol = []

    # Fill the board with immortals
    for x, y in immortal_positions:
        board[x][y] = 1

    # Try to find a solution starting from each immortal
    for x, y in immortal_positions:
        if find_solution(board, immortal, x, y, sol, n, m):
            return sol

    return sol

# Read from 'immortal.in'
with open('immortal.in', 'r') as file:
    n, m, I = map(int, file.readline().split())
    immortal_positions = [tuple(map(int, file.readline().split())) for _ in range(I)]

# Solve the challenge
solution = solve_immortal(n, m, immortal_positions)

# Write to 'immortal.out'
with open('immortal.out', 'w') as file:
    for move in solution:
        file.write(' '.join(map(str, move)) + '\n')
```

This updated solution should now work correctly without any attribute errors. It uses the `add` method to add an item to the set and `discard` to remove an item without raising an error if the item does not exist.
