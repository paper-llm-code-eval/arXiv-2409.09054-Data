---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def is_valid_move(board, x, y, dx, dy):
    n, m = len(board), len(board[0])
    nx, ny = x + dx, y + dy
    jump_x, jump_y = x + dx // 2, y + dy // 2
    return 0 <= nx < n and 0 <= ny < m and board[jump_x][jump_y] and not board[nx][ny]

def find_move(board, immortal_positions):
    for x, y in immortal_positions:
        for dx, dy in [(-2, 0), (2, 0), (0, -2), (0, 2)]:
            if is_valid_move(board, x, y, dx, dy):
                return x, y, x + dx, y + dy
    return None

def simulate_fight(board, immortal_positions, path):
    if len(immortal_positions) == 1:
        return True

    current_move = find_move(board, immortal_positions)
    if current_move:
        x_start, y_start, x_end, y_end = current_move
        board[x_start][y_start] = 0
        board[(x_start + x_end) // 2][(y_start + y_end) // 2] = 0
        board[x_end][y_end] = 1

        updated_positions = immortal_positions.copy()
        updated_positions.remove((x_start, y_start))
        updated_positions.remove(((x_start + x_end) // 2, (y_start + y_end) // 2))
        updated_positions.append((x_end, y_end))

        path.append(current_move)
        if simulate_fight(board, updated_positions, path):
            return True

        # Backtrack
        board[x_start][y_start] = 1
        board[(x_start + x_end) // 2][(y_start + y_end) // 2] = 1
        board[x_end][y_end] = 0
        path.pop()

    return False

# Read the input
with open('immortal.in') as f:
    n, m, I = map(int, f.readline().split())
    immortal_positions = [tuple(map(lambda x: int(x) - 1, f.readline().split())) for _ in range(I)]

# Initialize the board
board = [[0] * m for _ in range(n)]
for x, y in immortal_positions:
    board[x][y] = 1

path = []
simulate_fight(board, immortal_positions, path)

# Write the output
with open('immortal.out', 'w') as f:
    for move in path:
        f.write(f"{move[0] + 1} {move[1] + 1} {move[2] + 1} {move[3] + 1}\n")
```
This code defines a backtracking solution to find a valid sequence of fights that leaves only one immortal standing. The `simulate_fight` function tries all possible moves for each immortal and backtracks if a move doesn't lead to a solution. The moves are stored in a `path` list and written to `immortal.out` once a solution is found. This solution assumes that there is always at least one sequence of fights that leads to a single surviving immortal, as per the problem statement constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
3 4 4
1 2
2 1
3 2
3 3
```
Expected output:
```
3 3 3 1
3 1 1 1
1 1 1 3
```
Found output:
```

```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The original code has a couple of issues that need to be addressed. The `find_move` function does not consider all the immortal positions as potential starting points. Moreover, the backtracking logic in the `simulate_fight` function is not properly revisiting the previous states. The code needs to be modified to correctly find a path that results in one remaining immortal.

Here is an improved version of the code that addresses these issues:

```python
def can_jump(board, x1, y1, x2, y2):
    if 0 <= x2 < len(board) and 0 <= y2 < len(board[0]):
        return board[x1][y1] and board[(x1 + x2) // 2][(y1 + y2) // 2] and not board[x2][y2]
    return False

def find_solution(board, x, y, remaining):
    if remaining == 1:
        return [(x, y)]
    
    board[x][y] = 0  # Mark the current immortal as "in battle"
    directions = [(-2, 0), (2, 0), (0, -2), (0, 2)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        mx, my = (x + nx) // 2, (y + ny) // 2
        if can_jump(board, x, y, nx, ny):
            board[mx][my] = 0  # The immortal being jumped over is removed
            solution = find_solution(board, nx, ny, remaining - 1)
            if solution:
                return [(x, y, nx, ny)] + solution
            board[mx][my] = 1  # Backtrack
    board[x][y] = 1  # Unmark the immortal if no solution found starting from here
    return None

with open('immortal.in', 'r') as f:
    n, m, I = map(int, f.readline().strip().split())
    immortals = [tuple(map(int, f.readline().strip().split())) for _ in range(I)]

# Initialize the board
board = [[0 for _ in range(m)] for _ in range(n)]
for x, y in immortals:
    board[x - 1][y - 1] = 1  # Mark the immortal positions

# Try to find the solution starting from each initial immortal position
for x, y in immortals:
    solution = find_solution(board, x - 1, y - 1, I)
    if solution:
        with open('immortal.out', 'w') as f:
            for x1, y1, x2, y2 in solution:
                f.write(f"{x1 + 1} {y1 + 1} {x2 + 1} {y2 + 1}\n")
        break  # Solution found, no need to continue
```

In this version, we start from each initial immortal position and try to find a solution using recursion and backtracking. The `can_jump` function checks if a jump from one position to another is valid. If a valid sequence of moves is found that results in one remaining immortal, the moves are written to `immortal.out`. If we cannot find a solution from the current position, we backtrack and try a different one. The loop breaks as soon as a solution is found.
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

I apologize for any confusion. Below you will find the fixed and improved version of the solution. It's designed to read from `immortal.in` and write to `immortal.out` without using `input()` or `print()` for I/O operations.

```python
def jump_possible(board, x1, y1, x2, y2):
    if (0 <= x2 < len(board)) and (0 <= y2 < len(board[0])):
        is_target_empty = board[x2][y2] == 0
        is_middle_occupied = board[(x1 + x2) // 2][(y1 + y2) // 2] == 1
        return is_target_empty and is_middle_occupied
    return False

def make_jump(board, path, x, y, remaining):
    if remaining == 1:
        return True

    board[x][y] = 0
    directions = [(-2, 0), (2, 0), (0, -2), (0, 2)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if jump_possible(board, x, y, nx, ny):
            board[(x + nx) // 2][(y + ny) // 2] = 0
            if make_jump(board, path, nx, ny, remaining - 1):
                path.append((x + 1, y + 1, nx + 1, ny + 1))
                return True
            board[(x + nx) // 2][(y + ny) // 2] = 1
    board[x][y] = 1
    return False

with open('immortal.in', 'r') as file:
    n, m, i = map(int, file.readline().split())
    immortals = [tuple(map(int, line.split())) for line in file]

board = [[0] * m for _ in range(n)]
for x, y in immortals:
    board[x - 1][y - 1] = 1

path = []
for x, y in immortals:
    if make_jump(board, path, x - 1, y - 1, i):
        path.reverse()
        with open('immortal.out', 'w') as file:
            for jump in path:
                file.write(f"{jump[0]} {jump[1]} {jump[2]} {jump[3]}\n")
        break
```

This code defines a recursive function `make_jump` that attempts to find a sequence of valid jumps that results in only one immortal remaining on the board. The function `jump_possible` checks whether a jump from `(x1, y1)` to `(x2, y2)` is valid. The path of successful jumps is recorded in reverse order and then written to `immortal.out` in the correct order. If the recursive function finds a solution, it writes it to the output file and breaks out of the loop.
