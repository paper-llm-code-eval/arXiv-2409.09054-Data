---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `abx.in` and write to `abx.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr natural $n$ se numește putere dacă există două numere naturale $a$, $b$, $a \geq 1$, $b \geq 2$ astfel încât $n = a^b$. De exemplu, numerele $32$, $169$, $1$ sunt puteri ($32=2^5$, $169=13^2$, $1=1^2$), iar $72$, $2000$ și $31$ nu sunt puteri.
Se citesc numerele naturale $N$, $M$ și un șir de $N$ numere naturale $x_1, x_2, \dots, x_N$ din intervalul $[1,M]$.

# Cerință
Pentru fiecare din cele $N$ numere $x_i$ determinați câte un număr natural $r_i$ din intervalul $[1,M]$, cu proprietatea că $r_i$ este o putere și pentru orice altă putere $p$ din intervalul $[1,M]$ este îndeplinită condiția $|x_i – r_i| \leq |x_i – p|$, unde $|x|$ reprezintă valoarea absolută a lui $x$ (modulul).
Dacă există două puteri egal depărtate de $x_i$ se va alege puterea cea mai mică. De exemplu pentru numărul $26$, dintre puterile $25$ și $27$ va fi ales numărul $25$.

# Date de intrare
Fișierul de intrare `abx.in` conține pe prima linie două numere $N$ și $M$, iar pe fiecare dintre următoarele $N$ linii se găsește câte un număr natural $x_i$ ($1 \leq i \leq N$), cu semnificația de mai sus.
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `abx.out` va conține $N$ linii, pe fiecare linie $i$ ($1 \leq i \leq N$) aflându-se numărul natural $r_i$ cu semnificația din enunț.

# Restricții și precizări
- $1 \leq N \leq 5\ 000$
- $10 \leq M \leq 10^{18}$
- Pentru teste valorând 40 de puncte, $M \leq 5\ 000$.
- Pentru teste valorând 70 de puncte, $M \leq 10^9$.

---

Example:
`abx.in`
```
8 1000
345
99
999
500
123
124
99
256
```

`abx.out`
```
343
100
1000
512
121
125
100
256
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Efficient algorithm to find the closest perfect power to each number in a list
from bisect import bisect_left

def generate_powers(up_to):
    powers = {1}
    base = 2
    while base * base <= up_to:
        power = base * base
        while power <= up_to:
            powers.add(power)
            power *= base
        base += 1
    return sorted(powers)

def closest_power(x, powers):
    idx = bisect_left(powers, x)
    if idx == 0:
        return powers[0]
    if idx == len(powers):
        return powers[-1]
    return min(powers[idx - 1], powers[idx], key=lambda p: (abs(x - p), p))

# Reading the input
with open('abx.in', 'r') as infile:
    N, M = map(int, infile.readline().split())
    numbers = [int(infile.readline()) for _ in range(N)]

# Precompute the powers up to M
powers = generate_powers(M)

# Finding the closest power for each number and writing the output
with open('abx.out', 'w') as outfile:
    for number in numbers:
        outfile.write(f'{closest_power(number, powers)}\n')
```
```
---------- user ----------


Expected program to write result to `abx.out` and read from `abx.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Efficient algorithm to find the closest perfect power to each number in a list
from bisect import bisect_left

def generate_powers(up_to):
    powers = {1}
    base = 2
    while base*base <= up_to:
        power = base
        while power <= up_to:
            powers.add(power)
            power *= base
        base += 1
    return sorted(powers)

def closest_power(x, powers):
    idx = bisect_left(powers, x)
    if idx == 0:
        return powers[0]
    elif idx == len(powers):
        return powers[-1]
    else:
        before = powers[idx-1]
        after = powers[idx]
        return before if x - before <= after - x else after

# Reading the input from abx.in
with open('abx.in', 'r') as infile:
    N, M = map(int, infile.readline().split())
    numbers = [int(infile.readline()) for _ in range(N)]

# Precompute the powers up to M
powers = generate_powers(M)

# Finding the closest power for each number and writing the output to abx.out
with open('abx.out', 'w') as outfile:
    for number in numbers:
        r_i = closest_power(number, powers)
        outfile.write(f'{r_i}\n')
```
