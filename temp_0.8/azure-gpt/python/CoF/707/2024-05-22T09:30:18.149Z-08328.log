---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to get the nth term of the sequence
def get_nth_term(n):
    term = "1"
    for _ in range(n - 1):
        next_term = ""
        i = 0
        while i < len(term):
            count = 1
            while i + 1 < len(term) and term[i] == term[i + 1]:
                i += 1
                count += 1
            next_term += str(count) + term[i]
            i += 1
        term = next_term
    return term

# Read from sir.in
with open('sir.in', 'r') as infile:
    n = int(infile.readline().strip())

# Get the nth term and write to sir.out
with open('sir.out', 'w') as outfile:
    outfile.write(get_nth_term(n))
```

This code will read the value of n from `sir.in`, compute the nth term of the sequence, and write it to `sir.out`. It avoids using `input()` and `print()` as per the requirements and directly interacts with the file system for I/O operations.
