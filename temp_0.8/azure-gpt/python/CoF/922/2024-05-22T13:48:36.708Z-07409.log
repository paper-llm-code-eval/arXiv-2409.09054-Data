---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `furnica.in` and write to `furnica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cercetătorii au descoperit că activitatea miriapodelor este stimulată de culoarea galben și de aceea o furnică este supusă unui experiment. Pe marginea mesei pe care se realizează experimentul s-au lipit una lângă alta, $N$ foi dreptunghiulare, de culoare galbenă, numerotate în ordine, de la stânga la dreapta, de la $1$ la $N$. Furnica se află pe masă, în fața primei foi și urmează un traseu deplasându-se doar pe laturile libere ale foilor (care nu sunt lipite de alte foi sau de masă), pe verticală sau orizontală, (așa cum indică săgețile din imaginea de mai jos), ajungând din nou pe masă. Știind că în urcare furnica parcurge un centimetru în $5$ secunde, în coborâre parcurge un centimetru în $2$ secunde, iar dacă se deplasează pe orizontală parcurge un centimetru în $3$ secunde, ajutați-i pe cercetători să obțină unele date.

~[furnica.png|width=35em]

# Cerință

Scrieţi un program care să rezolve următoarele cerințe:

1. determină timpul (exprimat în secunde) necesar furnicii pentru a parcurge tot traseul menționat;
2. determină lungimea maximă (exprimată în centimetri) a unei porțiuni de traseu în care furnica NU coboară deloc;
3. determină ce număr de ordine are foaia pe care se află furnica după $T$ secunde.

# Date de intrare


Fișierul de intrare `furnica.in` conţine:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinţei şi poate avea valorile $1, 2$ sau $3$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul foilor galbene dacă cerința este $1$ sau $2$, respectiv două numere naturale $N$ și $T$, dacă cerința este $3$.
* pe următoarele $N$ linii, câte două numere naturale, ce reprezintă laturile foilor (exprimate în centimetri), în ordinea numerotării acestora. Primul număr reprezintă dimensiunea laturii orizontale, iar cel de-al doilea număr reprezintă dimensiunea laturii verticale a foii galbene. 
* numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.


# Date de ieșire


Fișierul de ieșire `furnica.out` va conține o singură linie pe care va fi scris un număr natural ce reprezintă rezultatul determinat pentru cerința $C$.


# Restricții și precizări

* $1 \leq N,T \leq 10 \ 000$; laturile foilor sunt numere naturale nenule cu cel mult nouă cifre fiecare;
* dacă furnica ajunge într-un punct aflat la îmbinarea a două foi, se consideră că se află pe foaia din stânga;
* pentru orice $T$ furnica se va afla pe una din foi;
* pentru fiecare cerință se acordă $30$ de puncte.

---

Example:
`furnica.in`
```
1
5
3 9
5 9
2 6
2 13
1 4
```

`furnica.out`
```
151
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# furnica.py

def read_input(file_name):
    with open(file_name, 'r') as file:
        data = file.readlines()
    return data

def write_output(file_name, result):
    with open(file_name, 'w') as file:
        file.write(str(result))

def main():
    data = read_input('furnica.in')
    C, *NT = map(int, data[0].split())
    N = NT[0]
    if C == 3:
        T = NT[1]

    sheets = [tuple(map(int, line.split())) for line in data[1:]]

    if C == 1:
        total_time = 0
        for width, height in sheets:
            total_time += 5 * height + 3 * (width - 1) * 2
        total_time += 3 * (sheets[-1][0] - 1)  # Last horizontal segment
        write_output('furnica.out', total_time)

    elif C == 2:
        max_non_descending = max(width - 1 for width, _ in sheets)
        write_output('furnica.out', max_non_descending * 3)

    elif C == 3:
        current_time = 0
        for i, (width, height) in enumerate(sheets):
            ascent_time = 5 * height
            horizontal_time = 3 * (width - 1)
            descent_time = 2 * height if i < N - 1 else 0
            segment_time = ascent_time + horizontal_time + descent_time

            if current_time + segment_time >= T:
                time_left = T - current_time
                if time_left < ascent_time:
                    write_output('furnica.out', i + 1)
                elif time_left < ascent_time + horizontal_time:
                    write_output('furnica.out', i + 1)
                else:
                    write_output('furnica.out', i + 2)
                break
            current_time += segment_time

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `furnica.out` and read from `furnica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input data from 'furnica.in'
with open('furnica.in', 'r') as file:
    lines = file.readlines()

C = int(lines[0].split()[0])
N = int(lines[0].split()[1])
sheets = [tuple(map(int, line.split())) for line in lines[1:N+1]]

if C == 3:
    T = int(lines[0].split()[2])

# Function to calculate the total time to traverse all sheets
def calculate_total_time(sheets):
    total_time = 0
    for l, h in sheets:
        total_time += 5 * h  # Time to climb up
        total_time += 3 * (l - 1)  # Time to move horizontally (except the last l)
    total_time += 2 * sum(h for _, h in sheets[:-1])  # Time to climb down (except the last h)
    return total_time

# Function to find the longest horizontal stretch without descending
def longest_flat_stretch(sheets):
    return max(l - 1 for l, _ in sheets)

# Function to find the position of the ant after T seconds
def find_position_after_time(sheets, T):
    time_elapsed = 0
    for index, (l, h) in enumerate(sheets):
        climb_time = 5 * h
        horizontal_time = 3 * (l - 1)
        descent_time = 2 * h if index < N - 1 else 0
        
        segment_time = climb_time + horizontal_time + descent_time
        if time_elapsed + segment_time > T:
            return index + 1
        time_elapsed += segment_time
    return N  # In case T is after completing the last sheet

# Solve the problem based on the task C
if C == 1:
    result = calculate_total_time(sheets)
elif C == 2:
    result = longest_flat_stretch(sheets) * 3  # Convert to time by multiplying by 3
elif C == 3:
    result = find_position_after_time(sheets, T)

# Write the result to 'furnica.out'
with open('furnica.out', 'w') as file:
    file.write(str(result))
```
```
---------- user ----------


Expected program to write result to `furnica.out` and read from `furnica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
