---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pluricex.in` and write to `pluricex.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).

Directorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.

# Cerinţă
Scrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.

# Date de intrare
Fişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\dots$, $d_{nr}$.

Primul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieşire
Fişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.

# Restricţii şi precizări
- $0 < n \leq 22$
- $0 < k \leq 8$
- $0 < D \leq 10$
- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\ 000$.
- Spunem că vectorul $(x_1, x_2, \dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \leq j < i$, iar $x_i < y_i$.
- Pentru $20\%$ din teste soluţia este unică.

---

Example:
`pluricex.in`
```
6 3 5
1 2
2 1 4
3 2 4 3
1 5
2 3 1
1 3
```

`pluricex.out`
```
2 3 4
3 4 5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from itertools import combinations

def read_input(filename):
    with open(filename, 'r') as file:
        n, k, D = map(int, file.readline().split())
        students = []
        for _ in range(n):
            line = list(map(int, file.readline().split()))
            students.append(set(line[1:]))  # Store the disciplines as a set
        return n, k, D, students

def write_output(filename, teams):
    with open(filename, 'w') as file:
        for team in teams:
            file.write(' '.join(map(str, team)) + '\n')

def can_form_team(team, D, students):
    disciplines_covered = set()
    for student in team:
        disciplines_covered.update(students[student-1])
    return len(disciplines_covered) == D

def find_teams(n, k, D, students):
    possible_teams = []
    for team in combinations(range(1, n+1), k):
        if can_form_team(team, D, students):
            possible_teams.append(team)
    return possible_teams

def main():
    n, k, D, students = read_input('pluricex.in')
    teams = find_teams(n, k, D, students)
    write_output('pluricex.out', teams)

main()
```
```
This Python code reads from `pluricex.in`, processes the information to find all possible teams that cover all disciplines, and writes the teams to `pluricex.out`. The code uses combinations from the itertools module to generate all possible teams and checks if each team covers all disciplines.
---------- user ----------


Expected program to write result to `pluricex.out` and read from `pluricex.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from itertools import combinations

def read_input(filename):
    with open(filename, 'r') as file:
        n, k, D = map(int, file.readline().split())
        student_disciplines = [0] * n  # Initialize a list to hold the disciplines bit mask for each student
        for i in range(n):
            data = list(map(int, file.readline().split()))
            for discipline in data[1:]:
                student_disciplines[i] |= 1 << (discipline - 1)
        return n, k, D, student_disciplines

def write_output(filename, teams):
    with open(filename, 'w') as file:
        for team in sorted(teams):  # Sort teams lexicographically
            file.write(' '.join(str(student) for student in team) + '\n')

def find_teams(n, k, D, student_disciplines):
    all_disciplines_mask = (1 << D) - 1  # Bit mask with D bits set to 1
    teams = []
    for team in combinations(range(1, n + 1), k):
        team_disciplines_mask = 0
        for student in team:
            team_disciplines_mask |= student_disciplines[student - 1]  # Combine disciplines of all team members
        if team_disciplines_mask == all_disciplines_mask:
            teams.append(team)
    return teams

def main():
    n, k, D, student_disciplines = read_input('pluricex.in')
    teams = find_teams(n, k, D, student_disciplines)
    write_output('pluricex.out', teams)

if __name__ == "__main__":
    main()
```
This updated Python code uses bitwise operations to efficiently combine discipline sets for each team and checks if the team covers all disciplines before writing the result to 'pluricex.out'. It ensures lexicographic order by sorting the teams before writing them to the file.
