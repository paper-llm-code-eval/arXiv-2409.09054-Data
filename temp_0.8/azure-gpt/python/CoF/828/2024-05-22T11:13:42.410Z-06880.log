---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pasiunea Mirunei este să coloreze. Vacanţa trecută şi-a petrecut-o la bunica ei la ţară şi pentru că se cam plictisea s-a gândit să vopsească gardul de la casa bunicii.

Gardul este compus din $N$ scânduri dispuse una lângă alta. Miruna a găsit în garajul bunicii $5$ cutii de vopsea de culori diferite: **albă**, **albastră**, **roşie**, **verde** şi **galbenă**. Când a vopsit gardul, Miruna a respectat următoarele reguli:
-	Dacă o scândură era vopsită cu **alb**, următoarea scândură o vopsea obligatoriu cu **albastru**
-	Dacă o scândură era vopsită cu **albastru**, atunci următoarea scândură o vopsea cu **alb** sau **roşu**
-	Dacă o scândură era vopsită cu **roşu**, atunci următoarea scândură o vopsea cu **albastru** sau **verde**
-	Dacă o scândură era vopsită cu **verde**, atunci următoarea scândură o vopsea cu **roșu** sau **galben**
-	Dacă o scândură era vopsită cu **galben**, atunci următoarea scândură o vopsea obligatoriu cu **verde**

După ce a și-a terminat treaba Miruna își admira “opera de artă” și se întreba în câte moduri diferite ar fi putut să vopsească gardul bunicii. 

# Cerinţă

Ajutați-o pe Miruna să găsească răspunsul la întrebarea sa.

# Date de intrare


Fişierul `culori.in` conţine pe prima sa linie un singur număr natural $N$.


# Date de ieșire


Fişierul de ieşire `culori.out` va conţine pe prima sa linie un singur număr întreg reprezentând numărul de moduri diferite în care Miruna ar fi putut să vopsească gardul bunicii.


# Restricții și precizări

* $1 \leq N \leq 5 \ 000$;
* Pentru $25\%$ dintre teste $N \leq 45$.

---

Example:
`culori.in`
```
4
```

`culori.out`
```
24
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient Python solution for the problem

def count_ways(n):
    # Initialize the count arrays
    count_a = [0] * (n + 1)  # White
    count_b = [0] * (n + 1)  # Blue
    count_c = [0] * (n + 1)  # Red
    count_d = [0] * (n + 1)  # Green
    count_e = [0] * (n + 1)  # Yellow
    
    # Base cases
    count_a[1] = 1
    count_b[1] = 1
    count_c[1] = 1
    count_d[1] = 1
    count_e[1] = 1

    # Fill the arrays using the given constraints
    for i in range(2, n + 1):
        count_a[i] = count_b[i - 1]
        count_b[i] = count_a[i - 1] + count_c[i - 1]
        count_c[i] = count_b[i - 1] + count_d[i - 1]
        count_d[i] = count_c[i - 1] + count_e[i - 1]
        count_e[i] = count_d[i - 1]

    # Total ways to paint the fence is the sum of all last values
    return count_a[n] + count_b[n] + count_c[n] + count_d[n] + count_e[n]

# Read from 'culori.in'
with open('culori.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate the result
result = count_ways(n)

# Write to 'culori.out'
with open('culori.out', 'w') as file:
    file.write(str(result))
```

This code snippet defines a function `count_ways(n)` that calculates the number of different ways to color the fence using dynamic programming. It then reads the number of boards from the input file `culori.in`, computes the result, and writes it to the output file `culori.out`.
