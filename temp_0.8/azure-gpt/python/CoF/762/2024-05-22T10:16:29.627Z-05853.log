---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cod.in` and write to `cod.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dexter a moștenit o avere fabuloasă, dar este închisă într-un seif. Unchiul său, cel care i-a lăsat averea, a dorit să îl pună la încercare astfel: a umplut o cutie foarte mare cu bilețele pe care sunt scrise numere naturale din mulțimea $\{0, 1, 2, \dots, 99\}$. Pe fiecare bilețel este scris un singur număr. Dexter trebuie să formeze perechi de bilețele care au scrise pe ele același număr. La sfârșit, vor rămâne câteva bilețele fără pereche. Codul de acces la seif este format din numerele rămase pe bilețelele fără pereche, așezate în ordine crescătoare și fără spațiu între ele.

# Cerință

Scrieți un program care să furnizeze codul de acces la seif.

# Date de intrare

Fișierul de intrare `cod.in` conține pe prima linie numărul natural n, reprezentând numărul bilețelelor aflate în cutie. Pe următoarea linie a fișierului se află cele n numere scrise pe bilețele, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `cod.out` va conține pe prima linie numerele din care este compus codul, în ordine crescătoare și fără spații între ele.

# Restricții și precizări

* $1 \leq n \leq 90 \ 000$;

---

Example:
`cod.in`
```
10
11 3 11 11 12 2 11 12 3 11
```

`cod.out`
```
211
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the input data
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    numbers = list(map(int, file.readline().strip().split()))

# Count the occurrences of each number and identify the ones with odd occurrences
counter = [0] * 100
for number in numbers:
    counter[number] += 1

# Extract the numbers with odd occurrences and sort them
odd_numbers = sorted([str(i) for i, count in enumerate(counter) if count % 2 != 0])

# Write the output data
with open('cod.out', 'w') as file:
    file.write(''.join(odd_numbers))
```

This solution uses an array to count the occurrences of each number, which is a very efficient way of tracking paired and unpaired numbers. After identifying the numbers with odd occurrences, it sorts them and writes them to the output file without spaces as required.
---------- user ----------


Program result did not match expected result.
Input data:
```
10
11 3 11 11 12 2 11 12 3 11
```
Expected output:
```
211
```
Found output:
```
112
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the original solution, it seems that the code correctly identifies the unpaired numbers but sorts them in numerical order rather than the order required by the problem statement. The problem requires the numbers to be listed in ascending order without considering their numerical value but rather their string representation. For example, '11' should come before '2' when sorted as strings, because '1' comes before '2' in lexicographical order. 

The original code sorts them numerically, which is why '2' came before '11'. To fix this issue, we need to sort the numbers based on their string representation.

Let's fix the code:

```python
# Read the input data
with open('cod.in', 'r') as file:
    n = int(file.readline().strip())
    numbers = list(map(int, file.readline().strip().split()))

# Count the occurrences of each number and identify the ones with odd occurrences
counter = [0] * 100
for number in numbers:
    counter[number] += 1

# Extract the numbers with odd occurrences and sort them by their string representation
odd_numbers = sorted((str(i) for i, count in enumerate(counter) if count % 2 != 0), key=int)

# Write the output data
with open('cod.out', 'w') as file:
    file.write(''.join(odd_numbers))
```

This modification to the sorting key ensures that the numbers are sorted lexicographically by their string representation, which matches the expected output for the given input data.
