---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().split())

# Initialize the count for the digit appearances
count = 0

# Create a function to count the occurrences of c in a number
def count_digit_occurrences(number, digit):
    return str(number).count(str(digit))

# Iterate through the numbers from 1 to n and count the occurrences
for i in range(1, n + 1):
    count += count_digit_occurrences(i, c)

# Write the output data to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(count))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, digit = map(int, file.readline().split())

# Function to count occurrences of a digit in all numbers up to n
def count_digit(n, digit):
    count = 0
    length = len(str(n))
    for x in range(length):
        # Compute the weight of the current position
        weight = 10 ** x
        # Calculate the current round and remainder values
        round_down = n // (weight * 10)
        remainder = n % (weight * 10)
        
        # Count all the full rounds for the current position
        count += round_down * weight
        
        # Count the additional occurrences in the last incomplete round
        # Only applies to positions other than the last one
        if x > 0:
            # Take the digit at the current position in the remainder
            current_digit = (remainder // weight) % 10
            if current_digit > digit:
                count += weight
            elif current_digit == digit:
                count += remainder % weight + 1
        
        # Special handling for the last digit
        if x == 0 and digit == 0:
            count -= weight
    
    return count

# Find the total count of the specified digit in all numbers up to n
total_count = count_digit(n, digit)

# Write the output data to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(total_count))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient function to count the occurrences of a digit in the numbers from 1 to n
def count_occurrences(n, digit):
    count = 0
    factor = 1
    while factor <= n:
        higher = n // (factor * 10)
        current = (n // factor) % 10
        lower = n - (n // factor) * factor
        
        if current > digit:
            count += (higher + 1) * factor
        elif current == digit:
            count += higher * factor + lower + 1
        else:
            count += higher * factor
        
        factor *= 10
    return count

# Read the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().split())

# Count the occurrences of the digit c in numbers from 1 to n
occurrences = count_occurrences(n, c)

# Write the output data to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(occurrences))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient function to find the number of occurrences of a digit
def find_occurrences(n, c):
    count = 0
    power = 1
    while n // power > 0:
        high = n // (10 * power)
        current = (n // power) % 10
        low = n % power
        
        if current > c:
            count += (high + 1) * power
        elif current == c:
            count += high * power + low + 1
        else:
            count += high * power
        
        if c == 0:
            count -= power
        power *= 10
    return count

# Read the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().split())

# Calculate the occurrences of the digit c in the range from 1 to n
occurrences = find_occurrences(n, c)

# Write the output data to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(occurrences))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient method to count the occurrences of a digit from 1 to n
def digit_occurrences(n, digit):
    count = 0
    factor = 1
    while factor <= n:
        higher = n // (factor * 10)
        lower = n % (factor * 10)
        digit_at_factor = (lower // factor) % 10
        count += higher * factor
        if digit_at_factor > digit:
            count += factor
        elif digit_at_factor == digit:
            count += lower % factor + 1
        factor *= 10
    return count

# Reading the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().split())

# Calculate the number of occurrences of the digit c
occurrences = digit_occurrences(n, c)

# Writing the result to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(occurrences))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the input data from cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().strip().split())

def count_occurrences(n, digit):
    count, factor = 0, 1

    while factor <= n:
        higher = n // (factor * 10)
        current = (n // factor) % 10
        lower = n - (n // factor) * factor

        if current > digit:
            count += (higher + 1) * factor
        elif current == digit:
            count += higher * factor + lower + 1
        else:
            count += higher * factor
        
        # Correct the count for occurrences of the digit in the higher places
        if digit == 0:
            count -= factor

        factor *= 10

    return count

# Calculate the number of occurrences of digit c from 1 to n
total_count = count_occurrences(n, c)

# Write the output data to cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(total_count))
```
```
---------- user ----------


Expected program to write result to `cifre.out` and read from `cifre.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to count the occurrences of a digit c in the numbers from 1 to n.
def count_digit_occurrences(n, c):
    count = 0
    power_of_ten = 1
    while n // power_of_ten > 0:
        # Calculate the higher and lower parts of the number
        higher = n // (power_of_ten * 10)
        lower = n % power_of_ten
        digit = (n // power_of_ten) % 10

        # Count all the occurrences of the digit c in the lower part of the number
        count += higher * power_of_ten
        if digit > c:
            count += power_of_ten
        elif digit == c:
            count += lower + 1

        # Special case when the digit is zero
        if c == 0 and power_of_ten > 1:
            count -= power_of_ten

        power_of_ten *= 10
    return count

# Read the input data from cifre.in.
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().strip().split())

# Get the number of occurrences of the digit c.
occurrences = count_digit_occurrences(n, c)

# Write the output data to cifre.out.
with open('cifre.out', 'w') as file:
    file.write(str(occurrences))
```
```
