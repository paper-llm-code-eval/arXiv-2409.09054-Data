---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Functia care calculeaza numarul de aparitii al cifrei c in numerele de la 1 la n
def count_digit_occurrences(n, c):
    count, factor, x = 0, 1, n
    while factor <= n:
        digit = (x // factor) % 10
        count += (x // (factor * 10)) * factor
        if digit > c:
            count += factor
        elif digit == c:
            count += (n % factor) + 1
        factor *= 10
    return count

# Citirea datelor de intrare din fisierul cifre.in
with open('cifre.in', 'r') as file:
    n, c = map(int, file.readline().split())

# Calculul numarului de aparitii al cifrei c
result = count_digit_occurrences(n, c)

# Scrierea rezultatului in fisierul cifre.out
with open('cifre.out', 'w') as file:
    file.write(str(result))
```

Acest cod trebuie salvat într-un fișier `.py` și executat într-un mediu care permite accesul la sistemul de fișiere pentru a citi din `cifre.in` și a scrie în `cifre.out`. Dacă fișierul de intrare conține numerele date în exemplu (`15 1`), fișierul de ieșire va conține numărul `8`, conform așteptărilor.
