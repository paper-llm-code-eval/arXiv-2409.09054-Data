---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the content from the "paranteze.in" file
with open('paranteze.in', 'r') as file:
    lines = file.readlines()

# Prepare the output list
output = []

# Skip the first line as it contains the number of test cases only
for line in lines[1:]:
    stack = []
    # Extract the encoded parentheses and convert them to integers
    _, *encoded_parentheses = map(int, line.split())
    # Initialize a flag for a correct sequence
    is_correct = True
    # Check each encoded parenthesis
    for p in encoded_parentheses:
        # If it's an opening bracket, push to the stack
        if p == 0 or p == 2:
            stack.append(p)
        # If it's a closing bracket, check if it matches the last opening bracket
        elif stack and ((p == 1 and stack[-1] == 0) or (p == 3 and stack[-1] == 2)):
            stack.pop()
        else:
            # If not, the sequence is incorrect
            is_correct = False
            break
    # If stack is empty, all brackets were matched correctly
    if is_correct and not stack:
        output.append('Da\n')
    else:
        output.append('Nu\n')

# Write the results to the "paranteze.out" file
with open('paranteze.out', 'w') as file:
    file.writelines(output)
```

This Python script reads the encoded parentheses sequences from `paranteze.in`, verifies the correctness of each sequence using a stack, and writes the result `Da` or `Nu` to `paranteze.out` for each sequence. It uses a file read/write approach without the use of `input()` or `print()`.
