---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `paranteze.in` and write to `paranteze.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm şiruri formate din paranteze de două tipuri: paranteze rotunde şi paranteze drepte. Parantezele se codifică în felul următor: paranteză rotundă deschisă cu $0$, paranteză rotundă închisă cu $1$, paranteză dreaptă deschisă cu $2$, paranteză dreaptă închisă cu $3$. Spre deosebire de convenţia uzuală din matematică, aici pot exista şi paranteze rotunde incluse în paranteze drepte şi paranteze drepte incluse în paranteze rotunde. Nu putem asocia unei paranteze rotunde deschise o paranteză dreaptă închisă sau viceversa.

# Cerință

Să se decidă dacă un astfel de şir este corect construit, în sensul că putem asocia corect două câte două parantezele de fiecare tip


# Date de intrare

Fişierul de intrare `paranteze.in` conţine pe prima linie numărul $n$ (numărul de şiruri ale testului). 

Apoi pe fiecare din liniile $2, 3, \dots, n+1$ se află numerele $L \ c_1 \ c_2 \ \dots \ c_L$, numărul natural $L$ reprezintă lungimea unui şir de paranteze codificat conform enunţului. 

Valorile $c_1, c_2, \dots, c_L$ reprezintă codurile respective. Toate numerele sunt despărţite prin câte un spaţiu.

# Date de ieșire

În fişierului de ieșire `paranteze.out` se va scrie $n$ linii. Pe câte o linie va fi scris câte un mesaj. Pe fiecare linie se va scrie unul din mesajele `Da`, respectiv `Nu`, reprezentând rezultatele verificării corectitudinii şirurilor. Ordinea lor corespunde ordinii şirurilor din fişierul de intrare

# Restricții și precizări

* $1 \leq n \leq 10$;
* Fiecare valoare $L$ îndeplineşte condiţia: $1 \leq L \leq 500$.

---

Example:
`paranteze.in`
```
8
6 0 2 3 1 0 1
6 2 0 1 0 1 3
4 0 2 1 3
6 2 0 0 3 1 1
6 2 2 0 1 1 3
6 2 0 0 1 3 0
10 2 2 0 1 0 1 3 3 0 1
10 0 0 0 1 1 1 0 2 3 1
```

`paranteze.out`
```
Da
Da
Nu
Nu
Nu
Nu
Da
Da
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read from input file
with open('paranteze.in', 'r') as file:
    lines = file.readlines()

# Parse the number of test cases
num_tests = int(lines[0].strip())

# Prepare the output
output_lines = []

# Function to check if the parentheses sequence is valid
def is_valid_parentheses(seq):
    stack = []
    # Mapping of closing parentheses to their corresponding opening parentheses
    close_to_open = {1: 0, 3: 2}
    for par in seq:
        # If it's an opening parenthesis, push it onto the stack
        if par in close_to_open.values():
            stack.append(par)
        else:
            # If the stack is empty or the top of the stack doesn't match the current closing parenthesis, return False
            if not stack or close_to_open[par] != stack.pop():
                return False
    # If the stack is empty, all parentheses were matched
    return len(stack) == 0

# Process each test case
for line in lines[1:]:
    # Parse the sequence of parentheses
    _, *seq = map(int, line.split())
    # Check if the sequence is valid and add the result to the output list
    output_lines.append('Da\n' if is_valid_parentheses(seq) else 'Nu\n')

# Write to output file
with open('paranteze.out', 'w') as file:
    file.writelines(output_lines)
```
```
---------- user ----------


Expected program to write result to `paranteze.out` and read from `paranteze.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly, here is the corrected solution respecting the constraints of the programming challenge:

```python
# Read from input file
with open('paranteze.in', 'r') as file:
    lines = file.readlines()

# Prepare the output
output_lines = []

# Function to check if the parentheses sequence is valid
def is_valid_parentheses(seq):
    stack = []
    # Mapping of closing parentheses to their corresponding opening parentheses
    close_to_open = {1: 0, 3: 2}
    for par in seq:
        # If it's an opening parenthesis, push it onto the stack
        if par in close_to_open.values():
            stack.append(par)
        else:
            # If the stack is empty or the top of the stack doesn't match the current closing parenthesis, return False
            if not stack or close_to_open[par] != stack.pop():
                return False
    # If the stack is empty, all parentheses were matched
    return len(stack) == 0

# Process each test case
for line in lines[1:]:
    # Parse the sequence of parentheses
    _, *seq = map(int, line.split())
    # Check if the sequence is valid and add the result to the output list
    output_lines.append('Da\n' if is_valid_parentheses(seq) else 'Nu\n')

# Write to output file
with open('paranteze.out', 'w') as file:
    file.writelines(output_lines)
```
