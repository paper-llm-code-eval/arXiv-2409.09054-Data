---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Sindbad a descoperit un recipient care conține o poțiune magică și o inscripție care descrie cum se poate deschide poarta unui templu. Urmând instrucțiunile din inscripție, Sindbad a ajuns la un tunel acoperit cu dale pătrate, aliniate astfel încât formează linii și coloane. Tunelul are mai multe linii, iar pe fiecare linie sunt câte $N$ dale. Dalele din tunel sunt numerotate începând cu $1$, astfel încât, parcurgându-le linie cu linie și fiecare linie de la stânga la dreapta, se obține un șir strict crescător de numere naturale consecutive.
\
Sindbad se află la intrare, înaintea primei linii. Pentru a deschide poarta templului, el trebuie să ajungă pe dala numerotată cu $P$, călcând pe un număr minim de dale. Dacă există mai multe astfel de soluții, o va alege pe cea pentru care consumul total de picături de poțiune magică este minim. Pe parcursul deplasării el trebuie să respecte următoarele reguli:

* de la intrare, poate sări pe orice dală aflată pe prima line, fără a consuma poțiune magică;
* de pe o dală numerotată cu $X$, Sindbad poate sări fie pe dala numerotată cu $X + 1$, consumând **o picătură** de poțiune magică, fie pe dala numerotată cu $2 \cdot X$, consumând **două picături** de poțiune magică.

# Cerință

Scrieți un program care citește valorile $N$ și $P$ cu semnificația din enunț și rezolvă următoarele cerințe:
1. afișează numărul minim de dale pe care trebuie să calce pentru a deschide poarta;
2. afișează numărul natural $T$, reprezentând numărul minim de picături de poțiune magică necesare pentru deschiderea porții.

# Date de intrare

Fișierul de intrare `poarta.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$). Pe a doua linie se află numărul natural $N$, iar pe a treia linie se află numărul natural $P$ cu semnificația din enunț.

# Date de ieșire

Fișierul de ieșire `poarta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $C$.

# Restricții și precizări

* $2 \leq N < 10 \ 000$;
* $P$ este număr natural nenul cu cel mult $1 \ 000$ de cifre; pentru o parte dintre teste, valorând în total $60$ de puncte, $P$ are cel mult $18$ cifre.
* Recipientul conține o cantitate suficientă de poțiune magică.
* Pentru rezolvarea cerinței $1$ se acordă maximum $60$ de puncte, iar pentru rezolvarea cerinței $2$ se acordă maximum $30$ de puncte.

---

Example:
`poarta.in`
```
1
5
9
```

`poarta.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(filename):
    with open(filename, 'r') as file:
        C = int(file.readline().strip())
        N = int(file.readline().strip())
        P = int(file.readline().strip())
    return C, N, P

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def solve_c1(N, P):
    steps = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
        else:
            P -= 1
        steps += 1
    return steps + 1  # Include the first jump onto the tiles

def solve_c2(N, P):
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            drops += 2
        else:
            P -= 1
            drops += 1
    return drops

def main():
    C, N, P = read_input('poarta.in')
    result = solve_c1(N, P) if C == 1 else solve_c2(N, P)
    write_output('poarta.out', result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_input(filename):
    with open(filename, 'r') as file:
        C = int(file.readline().strip())
        N = int(file.readline().strip())
        P = int(file.readline().strip())
    return C, N, P

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def min_jumps(P, N):
    steps = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
        else:
            P -= 1
        steps += 1
    return steps + 1  # Include the first jump onto the tiles

def min_drops(P, N):
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            drops += 2
        else:
            P -= 1
            drops += 1
    return drops

def main():
    C, N, P = read_input('poarta.in')
    if C == 1:
        result = min_jumps(P, N)
    else:
        result = min_drops(P, N)
    write_output('poarta.out', result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def solve_challenge(N, P, part):
    # Starting from P, we try to reach back to the first row
    steps = 0
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            drops += 2  # Cost for jumping to the double
        else:
            P -= 1
            drops += 1  # Cost for jumping to the next tile
        steps += 1
    # The final step onto the first row
    steps += 1
    return steps if part == 1 else drops

# Read input
with open('poarta.in', 'r') as file:
    C = int(file.readline())
    N = int(file.readline())
    P = int(file.readline())

# Process
result = solve_challenge(N, P, C)

# Write output
with open('poarta.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from 'poarta.in'
with open('poarta.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())
    P = int(file.readline().strip())

# Define function to calculate the number of steps or potion drops
def calculate(N, P, C):
    steps = 0
    drops = 0
    while P > N:
        # If P is even, we can divide it by 2 (jump to the double)
        # This costs 2 drops of potion
        if P % 2 == 0:
            P //= 2
            if C == 2:
                drops += 2
        # If P is odd, we subtract 1 (jump to the next tile)
        # This costs 1 drop of potion
        else:
            P -= 1
            if C == 2:
                drops += 1
        steps += 1
    # Add the initial jump to the first row of tiles
    steps += 1

    return drops if C == 2 else steps

# Calculate the result based on the value of C
result = calculate(N, P, C)

# Write the result to 'poarta.out'
with open('poarta.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to calculate the minimum number of tiles to step on
def min_steps(P, N):
    steps = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
        else:
            P -= 1
        steps += 1
    return steps + 1  # Include the initial step onto the first tile

# Function to calculate the minimum number of potion drops
def min_drops(P, N):
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            drops += 2
        else:
            P -= 1
            drops += 1
    return drops  # No potion needed for the initial step

# Read from 'poarta.in'
with open('poarta.in', 'r') as file:
    C = int(file.readline())
    N = int(file.readline())
    P = int(file.readline())

# Solve the challenge based on the part specified (C)
if C == 1:
    result = min_steps(P, N)
else:
    result = min_drops(P, N)

# Write to 'poarta.out'
with open('poarta.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to calculate the minimum number of tiles to step on and potion drops
def calculate_steps_and_drops(N, P):
    steps = 0
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            drops += 2  # 2 drops for doubling the position
        else:
            P -= 1
            drops += 1  # 1 drop for incrementing the position
        steps += 1
    return steps + 1, drops  # Include the initial step onto the first tile

# Read from 'poarta.in'
with open('poarta.in', 'r') as file:
    C = int(file.readline())
    N = int(file.readline())
    P = int(file.readline())

# Calculate the result
steps, drops = calculate_steps_and_drops(N, P)
result = steps if C == 1 else drops

# Write to 'poarta.out'
with open('poarta.out', 'w') as file:
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `poarta.out` and read from `poarta.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input from 'poarta.in'
with open('poarta.in', 'r') as fin:
    C = int(fin.readline().strip())
    N = int(fin.readline().strip())
    P = int(fin.readline().strip())

# Solve the problem
def solve(N, P, is_part_two):
    steps = 0
    drops = 0
    while P > N:
        if P % 2 == 0:
            P //= 2
            steps += 1
            drops += 2
        else:
            P -= 1
            steps += 1
            drops += 1

    # Add the initial jump onto the tiles
    steps += 1
    
    # Return the number of steps for part one or the number of potion drops for part two
    return drops if is_part_two else steps

# Get the result based on the part of the problem we are solving
result = solve(N, P, C == 2)

# Write the result to 'poarta.out'
with open('poarta.out', 'w') as fout:
    fout.write(str(result) + '\n')
```
```
