---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir format din $N$ numere naturale nenule. Elementele șirului sunt numerotate de la stânga la dreapta începând cu poziția $1$.

# Cerință

Scrieți un program care să determine răspunsul pentru întrebări de următoarele tipuri:

1. Care este cea mai din stânga poziție care conține o valoare strict mai mare decât toate cele din dreapta sa? – întrebare de tipul $1$
2. Care sunt pozițiile care conțin valori strict mai mari decât toate cele din stânga lor? – întrebare de tipul $2$
3. Dacă fiecărui element aflat între prima și ultima apariție a maximului i-am mări valoarea pentru a ajunge egal cu maximul, care este suma totală a valorilor adăugate? – întrebare de tipul $3$

# Date de intrare

Fișierul de intrare `sir.in` conține pe prima linie un număr $C$ (care poate fi $1$, $2$ sau $3$), indicând tipul întrebării. Pe linia a doua se află un număr natural $N$, reprezentând numărul de elemente din șir. Pe a treia linie a fișierului de intrare se află $N$ numere naturale, reprezentând elementele șirului, date de la stânga la dreapta (cel mai din stânga are poziția $1$ și cel mai din dreapta are poziția $N$). Numerele de pe această linie sunt separate prin câte un spațiu.

# Date de ieșire

Dacă $C = 1$, fișierul de ieșire `sir.out` trebuie să conțină un număr natural ce reprezintă răspunsul la o întrebare de tipul $1$. Dacă $C = 2$, fișierul de ieșire trebuie să conțină, separați prin câte un spațiu și în ordine crescătoare, indicii determinați ca răspuns la o întrebare de tipul $2$. Dacă $C = 3$, fișierul de ieșire trebuie să conțină un număr ce reprezintă răspunsul la o întrebare de tipul $3$.

# Restricții și precizări

* $1 \leq C \leq 3$;
* $1 \leq N \leq 100 \ 000$;
* Numerele din șirul dat sunt cuprinse între $1$ și $10 \ 000$ inclusiv.
* Pentru teste în valoare de $24$ de puncte avem $C = 1$.
* Pentru teste în valoare de $32$ de puncte avem $C = 2$.
* Pentru teste în valoare de $44$ de puncte avem $C = 3$.

---

Example:
`sir.in`
```
1
7
3 2 2 5 3 5 4
```

`sir.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from sir.in
with open('sir.in', 'r') as fin:
    C = int(fin.readline().strip())
    N = int(fin.readline().strip())
    array = list(map(int, fin.readline().split()))

# Define the output based on the question type
output = []

if C == 1:
    max_from_right = array[-1]
    left_position = N
    for i in range(N-2, -1, -1):
        if array[i] > max_from_right:
            max_from_right = array[i]
            left_position = i + 1
    output.append(str(left_position))

elif C == 2:
    max_so_far = 0
    for i in range(N):
        if array[i] > max_so_far:
            max_so_far = array[i]
            output.append(str(i + 1))

elif C == 3:
    total_added = 0
    max_value = max(array)
    first_max_index = array.index(max_value)
    last_max_index = N - 1 - array[::-1].index(max_value)
    for i in range(first_max_index, last_max_index + 1):
        total_added += max_value - array[i]
    output.append(str(total_added))

# Write to sir.out
with open('sir.out', 'w') as fout:
    fout.write(' '.join(output))
```
This code reads data from the file 'sir.in', computes the required output based on the question type, and writes the result to the file 'sir.out'. The solutions for each question type aim to be efficient by iterating over the array elements only as much as necessary.
