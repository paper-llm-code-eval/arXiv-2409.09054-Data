---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `235.in` and write to `235.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Definim o putere a lui $3$ un număr de forma $3^k$, ($k$ număr natural strict pozitiv), o putere a lui $5$ un număr de forma $5^k$ (k număr natural strict pozitiv), iar o putere a lui $2$ un număr de forma $2^k$ ($k$ număr natural strict pozitiv).
Se dă un șir de $n$ numere naturale. Plecând de la acest șir, formăm un nou șir prin eliminarea tuturor numerele care nu sunt puteri ale lui $3$ și nici puteri ale lui $5$. Ordinea relativă între numerele care nu sunt eliminate se păstrează.

# Cerințe

- Să se determine câte numere conține șirul nou format.
- Să se determine de asemenea numărul de secvențe având lungimea egală cu o putere a lui $2$ existente în șirul nou format în care numărul de puteri ale lui $3$ este egal cu numărul de puteri ale lui $5$. O secvență este formată din elemente aflate pe poziții consecutive în acest șir nou format, iar lungimea unei secvențe este egală cu numărul de elemente pe care aceasta îl conține.

# Date de intrare

Pe prima linie in fișierul `235.in` se afla un număr natural $n$. Pe fiecare dintre următoarele $n$ linii câte un număr natural mai mare decât $1$ reprezentând numerele șirului inițial.

# Date de ieșire

Pe prima linie a fișierului `235.out` se va afla o valoare naturală $m$ care va reprezenta numărul de elemente rămase în șir după eliminare. Pe a doua linie se va afla o valoare naturală $S$ reprezentând numărul de secvențe din șirul nou format care au proprietățile cerute.

# Restricții și precizări

* $2 \leq n \leq 500 \ 000$;
* Numerele din șirul inițial sunt numere naturale din intervalul [$2, 2 \cdot 10^9$].
* Se garantează că $m \leq 40 \ 000$; pentru fiecare set de date de intrare.
* Pentru determinarea corectă a valorii numărului $m$ se acordă $30$% din punctaj iar pentru determinarea corectă a ambelor valori ($m$ şi $s$) se acordă $100$% din punctaj.

---

Example:
`235.in`
```
8
625
125
5
9
15
81
100
125
```

`235.out`
```
6
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def is_power_of(base, num):
    while num % base == 0:
        num //= base
    return num == 1

def is_power_of_2(num):
    return num & (num - 1) == 0 and num > 1

def process_sequence(seq):
    count_3 = count_5 = count_seq = 0
    for length in range(2, len(seq) + 1):
        if is_power_of_2(length):
            for start in range(len(seq) - length + 1):
                subseq = seq[start:start + length]
                if subseq.count(3) == subseq.count(5):
                    count_seq += 1
    return count_seq

with open('235.in', 'r') as file:
    n = int(file.readline().strip())
    numbers = []
    for _ in range(n):
        number = int(file.readline().strip())
        if is_power_of(3, number):
            numbers.append(3)
        elif is_power_of(5, number):
            numbers.append(5)

m = len(numbers)
s = process_sequence(numbers)

with open('235.out', 'w') as file:
    file.write(f"{m}\n{s}\n")
```
This solution checks each number to see if it's a power of 3 or 5 and constructs a new sequence with the number 3 or 5 to represent powers of 3 or 5, respectively. It then counts the sequences of lengths that are powers of 2 where the count of 3s equals the count of 5s.
