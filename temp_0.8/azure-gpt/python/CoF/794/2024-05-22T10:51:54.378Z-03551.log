---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from fractions import Fraction

def read_input(filename):
    with open(filename, "r") as f:
        ni, nz = map(int, f.readline().split())
        integer_part = int(''.join(f.readline().split()))
        decimal_part = int(''.join(f.readline().split()))
        return integer_part, decimal_part, nz

def calculate_fraction(integer_part, decimal_part, nz):
    numerator = integer_part * (10**nz) + decimal_part
    denominator = 10**nz
    fraction = Fraction(numerator, denominator)
    return fraction.numerator, fraction.denominator

def write_output(filename, a, b):
    with open(filename, "w") as f:
        f.write(str(len(str(a))) + "\n")
        f.write(str(a) + "\n")
        f.write(str(len(str(b))) + "\n")
        f.write(str(b) + "\n")

def solve_challenge():
    integer_part, decimal_part, nz = read_input("numar.in")
    a, b = calculate_fraction(integer_part, decimal_part, nz)
    write_output("numar.out", a, b)

solve_challenge()
```

The strategy for this solution is to first read the input file and construct the full number as a numerator by combining the integer and decimal parts, then calculate the denominator as 10 to the power of the number of decimal places. We then use the `Fraction` class from the Python `fractions` module to simplify the fraction and minimize the difference between `a` and `b`. Finally, we write the results to the output file, adhering to the specified format.
