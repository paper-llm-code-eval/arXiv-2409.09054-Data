---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read data from file
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().strip().split()))

# Find maximum height H
total_dirt, min_dirt = 0, 0
for height in heights:
    total_dirt += height
    min_dirt = min(min_dirt, total_dirt)

H = (total_dirt - min_dirt) // N

# Write result to file
with open('buldo.out', 'w') as file:
    file.write(str(H) + '\n')
```
---------- user ----------


Program result did not match expected result.
Input data:
```
4
5 2 1 6
```
Expected output:
```
2
```
Found output:
```
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The provided solution incorrectly calculates the value of H by dividing the adjusted total volume of dirt by the number of zones, N. The correct approach to finding the maximum height H is to determine the value of H such that the dirt can be redistributed without ever having a negative amount of dirt on the bulldozer blade. We must find the maximum H for which the total amount of dirt removed up to any point is less than or equal to the total amount of dirt added up to that point.

Here's the corrected code:

```python
# Read data from file
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().strip().split()))

# Calculate the prefix sum of heights and find the minimum prefix sum
# The minimum prefix sum indicates the lowest point the bulldozer blade can be set
# without running out of dirt when leveling the ground.
prefix_sums = [0] * N
current_sum = 0
for i, height in enumerate(heights):
    current_sum += height
    prefix_sums[i] = current_sum

# The maximum height H is then the total amount of dirt divided by N,
# adjusted by the minimum prefix sum.
total_dirt = prefix_sums[-1]
min_prefix_sum = min(prefix_sums)
H = (total_dirt - min_prefix_sum) // N

# Write result to file
with open('buldo.out', 'w') as file:
    file.write(str(H) + '\n')
```

This solution correctly identifies the maximum possible height H such that the bulldozer can level the entire length of the terrain without running out of dirt. It calculates the prefix sums of the heights and then uses the minimum prefix sum to adjust the total amount of dirt, ensuring that there is always enough dirt on the blade to fill the lower areas. The resulting H is then written to the output file.
