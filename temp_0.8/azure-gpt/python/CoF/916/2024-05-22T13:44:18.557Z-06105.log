---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `buldo.in` and write to `buldo.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Dorești să nivelezi terenul pe care l-ai cumpărat, care are lățimea de $1$ metru și lungimea de $N$ metri, fiind alcătuit din $N$ zone succesive, fiecare zonă având lungimea de $1$ metru. Terenul se reprezintă ca un șir de $N$ numere naturale $h_1, h_2, h_3, \ldots, h_N$ reprezentând înălțimile în metri pe care le au zonele din terenul inițial, privite de la stânga spre dreapta.
\
Pentru a nivela terenul ai închiriat un buldozer care funcționează astfel. Se alege o înălțime $H$ (număr natural) la care ridicăm lama buldozerului. Inițial buldozerul are pe lamă o cantitate $C=0$ metri cubi de pământ. Buldozerul începe să meargă de la stânga la dreapta și când ajunge la zona $i$, în funcție de înălțimea $h_i$ a acesteia, se va afla în una dintre următoarele situații:
- dacă $h_i \geq H$ atunci cantitatea suplimentară $h_i - H$ se adaugă la $C$ și nivelul zonei ajunge la $H$.
- dacă $h_i < H$ atunci se scade din $C$ diferența $H - h_i$ pentru a aduce nivelul zonei la nivelul $H$.

\
Remarcăm faptul că $H$ trebuie ales inițial astfel încât de fiecare dată când buldozerul ajunge în a doua situație să aibă pe lamă suficient pământ ($C \geq H - h_i$). După ce buldozerul parcurge cele $N$ zone de lungime $1$, pe lama buldozerului e posibil să mai rămână pământ, dar asta nu te interesează, pentru că la capătul din dreapta al terenului este un râu, și pământul rămas se va vărsa acolo.

# Cerință
Scrieți un program care calculează înălțimea maximă $H$ la care poate fi ridicată lama, astfel încât terenul să poată fi nivelat la acea înălțime.

# Date de intrare
Fișierul de intrare `buldo.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, separate prin câte un spațiu, cele $N$ numere naturale $h_1$, $h_2$, $h_3$, $\dots$, $h_N$, cu semnificația din enunț.

# Date de ieșire
Fișierul de ieșire `buldo.out` va conține o singură linie, pe care va fi scris numărul natural $H$ cerut.

# Restricții și precizări
- $1 \leq N \leq 100\ 000$
- Înălțimile sunt numere naturale, $1 \leq h_i \leq 1\ 000\ 000\ 000$, pentru orice $i$, $1 \leq i \leq N$.
- Pentru teste în valoare de 50 de puncte, $N \leq 1\ 000$ și $h_i \leq 1\ 000$, pentru orice $i$, $1 \leq i \leq N$.

---

Example:
`buldo.in`
```
4
5 2 1 6
```

`buldo.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the input data from buldo.in
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().split()))

# Initialize variables to store the sum of heights and the minimum height
total_height = sum(heights)
min_height = total_height // N

# Adjust the minimum height if it is not achievable with the given dirt
dirt = 0
for height in heights:
    dirt += height - min_height

# If there is extra dirt, increment the minimum height
while dirt >= N:
    dirt -= N
    min_height += 1

# Write the output to buldo.out
with open('buldo.out', 'w') as file:
    file.write(str(min_height))
```
---------- user ----------


Program result did not match expected result.
Input data:
```
4
5 2 1 6
```
Expected output:
```
2
```
Found output:
```
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial solution made incorrect assumptions about how to determine the maximum possible height $H$. It attempted to find an average height by dividing the sum of heights by the number of zones, and then adjusting that height. However, this method does not take into account the condition that we must always have enough dirt on the blade of the bulldozer to raise any lower zones to the height $H$.

A correct approach would be to perform a binary search to find the maximum height $H$. We need to consider that if a certain height $H$ is possible, any height lower than $H$ is also possible, because we would have more than enough dirt. Conversely, if a height $H$ is not possible, any height greater than $H$ will also not be possible, because we would not have sufficient dirt.

Here's a revised solution using binary search:

```python
def can_level(heights, N, H):
    dirt = 0
    for height in heights:
        if height >= H:
            dirt += height - H
        else:
            dirt -= H - height
            if dirt < 0:
                return False
    return True

# Read the input data from buldo.in
with open('buldo.in', 'r') as file:
    N = int(file.readline().strip())
    heights = list(map(int, file.readline().split()))

# Binary search for the maximum possible height H
lo, hi = 0, max(heights)
while lo <= hi:
    mid = (lo + hi) // 2
    if can_level(heights, N, mid):
        lo = mid + 1
    else:
        hi = mid - 1

# The maximum height is the highest successful H
max_height = hi

# Write the output to buldo.out
with open('buldo.out', 'w') as file:
    file.write(str(max_height))
```

In this solution, we have a helper function `can_level` that takes the list of heights, the number of zones, and a candidate height $H$. It iterates through the zones to check if it's possible to level the entire ground to height $H$ without running out of dirt.

The main part of the solution then performs a binary search over the range of possible heights, using `can_level` to check each candidate height. The search narrows down the range until it finds the maximum height that can be used to level the ground.

Let's test this solution against the provided example:

Input data (`buldo.in`):
```
4
5 2 1 6
```

Expected output (`buldo.out`):
```
2
```
