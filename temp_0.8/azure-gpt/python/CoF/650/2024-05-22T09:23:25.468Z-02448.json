{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 4,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/650/2024-05-22T09:23:25.468Z-02448.log",
  "attemptStart": 1716369805.468,
  "attemptEnd": 1716369951.461,
  "attemptDuration": 145.99300003051758,
  "code": "from collections import deque\n\n# Helper function to swap rows or columns\ndef swap(matrix, x, is_row):\n    new_matrix = [list(row) for row in matrix]  # Make a copy of the matrix\n    if is_row:\n        new_matrix[x], new_matrix[x + 1] = new_matrix[x + 1], new_matrix[x]\n    else:\n        for row in new_matrix:\n            row[x], row[x + 1] = row[x + 1], row[x]\n    return new_matrix\n\n# Check if matrix is a yin-yang matrix\ndef check_yin_yang(matrix):\n    for i in range(len(matrix)):\n        for j in range(1, len(matrix[i])):\n            if matrix[i][j] < matrix[i][j - 1]:\n                return False\n    for j in range(len(matrix[0])):\n        for i in range(1, len(matrix)):\n            if matrix[i][j] < matrix[i - 1][j]:\n                return False\n    return True\n\n# Find the minimum number of moves to reach a yin-yang matrix\ndef min_moves(matrix):\n    rows, cols = len(matrix), len(matrix[0])\n    visited = set()\n    queue = deque([(matrix, 0)])\n    while queue:\n        current_matrix, moves = queue.popleft()\n        matrix_tuple = tuple(tuple(row) for row in current_matrix)\n        if matrix_tuple in visited:\n            continue\n        visited.add(matrix_tuple)\n        if check_yin_yang(current_matrix):\n            return moves\n        for x in range(rows - 1):\n            swapped_matrix = swap(current_matrix, x, True)\n            queue.append((swapped_matrix, moves + 1))\n        for x in range(cols - 1):\n            swapped_matrix = swap(current_matrix, x, False)\n            queue.append((swapped_matrix, moves + 1))\n    return -1\n\n# Read input, process data, and write output\nwith open('yinyang.in', 'r') as file:\n    N, M = map(int, file.readline().strip().split())\n    matrix = [list(map(int, file.readline().strip().split())) for _ in range(N)]\n\nmin_ops = min_moves(matrix)\n\nwith open('yinyang.out', 'w') as file:\n    file.write(f\"{min_ops}\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4722,
  "metadata": {
    "id": 650,
    "examples": [
      {
        "in": "2 3\n1 2 4\n3 5 6",
        "out": "0",
        "explainer": ""
      },
      {
        "in": "2 3\n6 6 5\n4 6 2",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se dă o matrice $A$ cu $N$ linii și $M$ coloane, cu valori cuprinse între $1$ și $N \\cdot M$ inclusiv, nu neapărat distincte. O **operație** constă în selectarea a două linii sau două coloane consecutive și interschimbarea acestora (swap). O matrice **yin-yang** este o matrice în care $A[i][j] \\geq A[i][j – 1]$, pentru orice pereche $(i, j)$ cu $1 \\leq i \\leq N$ și $2 \\leq j \\leq M$ și $A[i][j] \\geq A[i – 1][j]$, pentru orice pereche $(i, j)$ cu $2 \\leq i \\leq N$ și $1 \\leq j \\leq M$.\n\n# Cerinţă\n\nSă se determine numărul minim de operații necesare pentru a transforma matricea dată într-o matrice yin-yang.\n\n# Date de intrare\n\nÎn fișierul de intrare `yinyang.in` se află scrise pe prima linie numerele naturale $N$ și $M$, cu semnificația din enunț. Pe fiecare dintre următoarele $N$ linii se află câte $M$ numere naturale, reprezentând elementele matricei date $A$. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\n\nÎn fișierul `yinyang.out` se va scrie numărul minim de operații cerut sau $-1$ dacă nu există soluție.\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 100$;\n* Pentru teste în valoare de $9$ puncte: $1 \\leq N, M \\leq 5$;\n- Pentru alte teste în valoare de $18$ puncte: $N = 1$;\n- Pentru alte teste în valoare de $36$ de puncte elementele din matrice sunt **DISTINCTE**.",
    "header": {
      "problem_id": 650,
      "problem_name": "yinyang",
      "tags": "[Ad hoc, Sorting]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "yinyang.in",
      "output_filename": "yinyang.out",
      "multiple_solutions": false,
      "original_source": "OJI 2019 X: Problema 3"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "yinyang.in",
      "output": "yinyang.out"
    },
    "consoleInteraction": false
  }
}