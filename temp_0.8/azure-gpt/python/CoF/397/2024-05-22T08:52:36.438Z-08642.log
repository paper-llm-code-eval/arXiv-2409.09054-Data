---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def parse_equation(equation):
    # Replace minus with +- for easy split and handle x without a leading number
    equation = equation.replace('-', '+-').replace('=+-', '=-').replace('x', '1x')
    parts = equation.split('=')
    
    # Initialize coefficients and constants
    a_left, a_right, b_left, b_right = 0, 0, 0, 0
    
    # Helper function to process each side of the equation
    def process_side(side):
        a, b = 0, 0
        for term in side.split('+'):
            if 'x' in term:
                a += int(term[:-1])  # Coefficient of x
            elif term:  # Avoid empty terms resulting from split
                b += int(term)  # Constant term
        return a, b
    
    # Process both sides of the equation
    a_left, b_left = process_side(parts[0])
    a_right, b_right = process_side(parts[1])
    
    return a_left, a_right, b_left, b_right

def solve_equation(a_left, a_right, b_left, b_right):
    a = a_left - a_right  # Final coefficient of x
    b = b_right - b_left  # Final constant
    
    # Check for infinite solutions or impossible
    if a == 0 and b == 0:
        return 'infinit'
    elif a == 0:
        return 'imposibil'
    else:
        return f'{b / a:.4f}'

def main():
    with open('ecuatii.in', 'r') as fin:
        equations = fin.readlines()
    
    # First line contains the number of equations
    n = int(equations[0].strip())
    solutions = []
    
    for i in range(1, n + 1):
        a_left, a_right, b_left, b_right = parse_equation(equations[i].strip())
        solution = solve_equation(a_left, a_right, b_left, b_right)
        solutions.append(solution)
    
    with open('ecuatii.out', 'w') as fout:
        for solution in solutions:
            fout.write(solution + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ecuatii.out` and read from `ecuatii.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def parse_term(term):
    # Returns the coefficient and the constant part of a term
    if 'x' in term:
        if term == 'x':
            return 1, 0
        elif term == '-x':
            return -1, 0
        else:
            return int(term.replace('x', '')), 0
    else:
        return 0, int(term)

def solve_equations(input_file, output_file):
    with open(input_file, 'r') as fin:
        n = int(fin.readline().strip())  # read number of equations
        equations = [fin.readline().strip() for _ in range(n)]

    results = []

    for eq in equations:
        # Split the equation into the left and right side
        left_side, right_side = eq.split('=')

        # Initialize coefficients and constants
        coef_left, const_left, coef_right, const_right = 0, 0, 0, 0

        # Process left side terms
        for term in left_side.replace('-', '+-').split('+'):
            if term:  # Skip empty strings
                coef, const = parse_term(term)
                coef_left += coef
                const_left += const

        # Process right side terms
        for term in right_side.replace('-', '+-').split('+'):
            if term:  # Skip empty strings
                coef, const = parse_term(term)
                coef_right += coef
                const_right += const
        
        # Move all x terms to the left and all numbers to the right
        coef = coef_left - coef_right
        const = const_right - const_left

        # Check if there are no x terms, it's either impossible or infinite solutions
        if coef == 0:
            if const == 0:
                result = "infinit"
            else:
                result = "imposibil"
        # If there are x terms, calculate solution
        else:
            result = "{:.4f}".format(const / coef)
        
        results.append(result)

    with open(output_file, 'w') as fout:
        fout.write('\n'.join(results))
        fout.write('\n')  # Ensure last line also has a newline

# Calling main function to solve equations
solve_equations('ecuatii.in', 'ecuatii.out')
```
