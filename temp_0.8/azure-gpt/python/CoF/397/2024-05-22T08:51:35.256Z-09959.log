---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def solve_equation(equation):
    def simplify(expr):
        factors, constants, x_multiplier = [], [], 0
        sign = 1
        num = ''
        for char in expr:
            if char in '+-':
                if num:
                    if num[-1] == 'x':
                        x_multiplier += sign * int(num[:-1] or '1')
                    else:
                        constants.append(sign * int(num))
                sign = 1 if char == '+' else -1
                num = ''
            else:
                num += char
        if num:
            if num[-1] == 'x':
                x_multiplier += sign * int(num[:-1] or '1')
            else:
                constants.append(sign * int(num))
        return x_multiplier, sum(constants)

    lhs, rhs = equation.split('=')
    lx, lc = simplify(lhs)
    rx, rc = simplify(rhs)
    x_total = lx - rx
    c_total = rc - lc
    if x_total == 0:
        if c_total == 0:
            return "infinit\n"
        else:
            return "imposibil\n"
    else:
        return f"{c_total / x_total:.4f}\n"

with open('ecuatii.in', 'r') as fin:
    n = int(fin.readline())
    equations = [fin.readline().strip() for _ in range(n)]

with open('ecuatii.out', 'w') as fout:
    for equation in equations:
        fout.write(solve_equation(equation))
```
```

This solution reads from 'ecuatii.in', processes each equation by simplifying both sides and then solving for 'x', and writes the output to 'ecuatii.out'. It handles infinite and impossible cases and outputs the result with four decimal places where appropriate.
---------- user ----------


Expected program to write result to `ecuatii.out` and read from `ecuatii.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def solve_equation(equation):
    def simplify(expr):
        x_coefficient, constant_term = 0, 0
        num, sign = '', 1
        for char in expr + '+':  # Add a '+' to process the last number
            if char.isdigit() or char == 'x':
                num += char
            else:  # char is '+' or '-'
                if 'x' in num:
                    x_coefficient += sign * int(num.replace('x', '') or '1')
                else:
                    constant_term += sign * int(num)
                num = ''
                sign = 1 if char == '+' else -1
        return x_coefficient, constant_term

    # Split the equation into left and right sides
    left_side, right_side = equation.split('=')
    # Simplify both sides of the equation
    x_left, c_left = simplify(left_side)
    x_right, c_right = simplify(right_side)
    # Move all x terms to the left and constants to the right
    x_total = x_left - x_right
    c_total = c_right - c_left

    # Check if there are no x terms, which indicates infinite or no solution
    if x_total == 0:
        if c_total == 0:
            return "infinit\n"
        else:
            return "imposibil\n"
    else:
        solution = c_total / x_total
        return f"{solution:.4f}\n"

# Read equations from the input file
with open('ecuatii.in', 'r') as f_in:
    n = int(f_in.readline().strip())
    equations = [f_in.readline().strip() for _ in range(n)]

# Solve each equation and write the result to the output file
with open('ecuatii.out', 'w') as f_out:
    for eq in equations:
        f_out.write(solve_equation(eq))
```
