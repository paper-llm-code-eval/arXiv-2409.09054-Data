---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from the input file
with open('ecuatii.in', 'r') as file:
    n = int(file.readline().strip())
    equations = [file.readline().strip() for _ in range(n)]

# Function to parse and solve an equation
def solve_equation(equation):
    left_side, right_side = equation.split('=')
    
    def parse_side(side):
        coeff_x = 0
        const = 0
        term = ''
        sign = 1
        for char in side:
            if char in '+-':
                if term:
                    if 'x' in term:
                        coeff_x += sign * int(term.replace('x', '') or '1')
                    else:
                        const += sign * int(term)
                sign = 1 if char == '+' else -1
                term = ''
            else:
                term += char
        if term:
            if 'x' in term:
                coeff_x += sign * int(term.replace('x', '') or '1')
            else:
                const += sign * int(term)
        return coeff_x, const
    
    coeff_x_left, const_left = parse_side(left_side)
    coeff_x_right, const_right = parse_side(right_side)
    
    coeff_x = coeff_x_left - coeff_x_right
    const = const_right - const_left
    
    if coeff_x == 0:
        if const == 0:
            return 'infinit'
        else:
            return 'imposibil'
    else:
        solution = const / coeff_x
        return f'{solution:.4f}'
        
# Solve each equation and write to the output file
with open('ecuatii.out', 'w') as file:
    for equation in equations:
        solution = solve_equation(equation)
        file.write(solution + '\n')
```

This code reads the equations from `ecuatii.in`, processes each equation to find the coefficients and constants, solves the equation, and writes the solutions to `ecuatii.out`. The solutions are formatted to 4 decimal places, or `infinit`/`imposibil` as required.
