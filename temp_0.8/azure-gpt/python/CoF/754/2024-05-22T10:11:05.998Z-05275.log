---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doamna directoare trebuie să împartă elevii din clasele a VII-a în $k$ grupe pentru un concurs. Numărul de elevi din oricare două grupe trebuie să difere cel mult cu $1$, iar numărul de fete și de băieți din fiecare grupă trebuie să difere tot cu cel mult $1$. Știind că sunt maxim $200$ de elevi în clasele a VII-a, doamna directoare, după ce formează grupele, dorește să fie verificat dacă acestea sunt bine realizate (fiecare copil să apară într-o singură grupă și grupele să satisfacă condițiile cerute).

Spre exemplu:
- Pentru $10$ copii în clasele a VII-a, un număr de $3$ grupe, șirul care indică componența fete sau băieți: `fbfbfbfbfb` cu semnificația copilul cu numărul de ordine $1$ este fată, cel cu numărul $2$ este băiat, etc..
- Prima grupă are $3$ copii și componența: $1 \ 2 \ 10$;
- Grupa a doua are $3$ copii și componența: $3 \ 4 \ 9$;
- Grupa a treia are $4$ copii și componența: $5 \ 6 \ 7 \ 8$;
- Răspunsul este: grupele au fost corect alcătuite.
- Numerele ce formează o grupă reprezintă numărul de ordine pe care îl are fiecare copil în șirul inițial.

# Cerință

Scrieți un program care, cunoscând numărul total de copii, numărul de grupe, un șir format din caracterele `f` și `b` pentru fiecare copil dacă este fată sau băiat, numărul de copii din fiecare grupă și componența grupelor, răspunde prin `DA` sau `NU` dacă s-au constituit corect sau nu grupele de copii. Pentru fiecare grupă se va preciza numărul de fete și numărul de băieți din grupa respectivă. Grupele sunt corect constituite dacă sunt cuprinși toți copiii, numărul de copii din grupe diferă prin cel mult un copil și pentru fiecare grupă numărul de fete și de băieți diferă prin cel mult $1$.

# Date de intrare

Fișierul `grupe.in` conține pe prima linie numerele naturale $n$ și $k$, reprezentând numărul de elevi din clasele a VII-a și respectiv numărul de grupe pe care dorește să-l realizeze directoarea. Pe următoarea linie se află un șir de $n$ caractere `f` și `b` format astfel: dacă elevul cu numărul de ordine $i$ este fată, caracterul de pe poziția $i$ din șir este `f`; dacă elevul cu numărul de ordine $i$ este băiat, caracterul de pe poziția $i$ din șir este `b`. Următoarele $k$ linii vor avea următoarea structură: numărul de copii din grupă urmat de numerele de ordine ale copiilor care formează grupa respectivă.

# Date de ieșire

Fișierul de ieșire `grupe.out` va conține pe primele $k$ linii câte două valori numere naturale reprezentând numărul de băieți și numărul de fete din fiecare grupă, separate prin câte un spațiu și pe ultimul rând cuvântul `DA` dacă grupele sunt constituite corect sau cuvântul `NU` în caz contrar.

# Restricții și precizări

* $1 \leq n, k \leq 200$;

---

Example:
`grupe.in`
```
10 3
fbfbfbfbfb
3 1 2 10
3 3 4 9
4 5 6 7 8
```

`grupe.out`
```
2 1
1 2
2 2
DA
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read data from file
with open('grupe.in', 'r') as file:
    n, k = map(int, file.readline().split())
    genders = file.readline().strip()
    groups = [tuple(map(int, line.split()[1:])) for line in file]

# Initialize data structures
assigned_students = set()
correct_groups = True
group_genders = []

# Process each group
for group in groups:
    boys = girls = 0
    for student in group:
        # Check if student was already assigned
        if student in assigned_students:
            correct_groups = False
            break
        assigned_students.add(student)
        if genders[student - 1] == 'f':
            girls += 1
        elif genders[student - 1] == 'b':
            boys += 1
    group_genders.append((boys, girls))
    # Check gender balance within the group
    if abs(boys - girls) > 1:
        correct_groups = False
    # Exit early if groups are already incorrect
    if not correct_groups:
        break

# Check if all students are assigned and balance between groups
min_size = len(groups[0])
max_size = len(groups[0])
for group in groups:
    group_size = len(group)
    if group_size < min_size:
        min_size = group_size
    if group_size > max_size:
        max_size = group_size
if max_size - min_size > 1 or len(assigned_students) != n:
    correct_groups = False

# Write data to file
with open('grupe.out', 'w') as file:
    for boys, girls in group_genders:
        file.write(f"{boys} {girls}\n")
    file.write('DA\n' if correct_groups else 'NU\n')
```

This Python solution satisfies all of the challenge's requirements. It reads from `grupe.in`, processes the data, and writes the result to `grupe.out`. The checks ensure that no student is in more than one group, that the groups are balanced in size and gender, and that all students are assigned to a group.
