---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_matrix(file_path):
    with open(file_path, 'r') as file:
        c, n, m, k = map(int, file.readline().split())
        matrix = [list(map(int, file.readline().split())) for _ in range(n)]
    return c, n, m, k, matrix

def write_result(file_path, max_profit, config):
    with open(file_path, 'w') as file:
        file.write(f"{max_profit}\n{' '.join(map(str, config))}\n")

def compute_prefix_sums(matrix, n, m):
    prefix_sums = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sums[i][j] = matrix[i-1][j-1] + prefix_sums[i-1][j] \
                                 + prefix_sums[i][j-1] - prefix_sums[i-1][j-1]
    return prefix_sums

def max_submatrix_sum(prefix_sums, n, m, k, exact_size=False):
    max_sum = float('-inf')
    config = (0, 0, 0, 0)
    for i1 in range(1, n - k + 2):
        for i2 in range(i1 + k - 1, n + 1) if exact_size else i1 + k:
            for j1 in range(1, m - k + 2):
                for j2 in range(j1 + k - 1, m + 1) if exact_size else j1 + k:
                    current_sum = prefix_sums[i2][j2] - prefix_sums[i1-1][j2] \
                                  - prefix_sums[i2][j1-1] + prefix_sums[i1-1][j1-1]
                    if current_sum > max_sum:
                        max_sum = current_sum
                        config = (i1, j1, i2, j2)
    return max_sum, config

def solve(file_in, file_out):
    c, n, m, k, matrix = read_matrix(file_in)
    prefix_sums = compute_prefix_sums(matrix, n, m)
    if c == 1:
        max_sum, config = max_submatrix_sum(prefix_sums, n, m, k, True)
    else:
        max_sum, config = max_submatrix_sum(prefix_sums, n, m, k, False)
    write_result(file_out, max_sum, config)

solve('cetate.in', 'cetate.out')
```
```
The code above should be saved in a `.py` file (e.g., `solution.py`), and then executed in an environment where the `cetate.in` file exists. The `solve` function will take care of reading the input, processing it, and writing the output to `cetate.out`.
---------- user ----------


Expected program to write result to `cetate.out` and read from `cetate.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def max_submatrix_sum(matrix, n, m, k, exact_size):
    max_sum = None
    config = (0, 0, 0, 0)
    for x in range(n):
        for y in range(m):
            if x + k <= n and y + k <= m:
                sub_sum = sum(matrix[i][y:y+k] for i in range(x, x+k))
                if max_sum is None or sub_sum > max_sum:
                    max_sum = sub_sum
                    config = (x+1, y+1, x+k, y+k)
            elif not exact_size:
                for sub_k_x in range(1, min(k, n - x) + 1):
                    for sub_k_y in range(1, min(k, m - y) + 1):
                        sub_sum = sum(matrix[i][y:y+sub_k_y] for i in range(x, x+sub_k_x))
                        if max_sum is None or sub_sum > max_sum:
                            max_sum = sub_sum
                            config = (x+1, y+1, x+sub_k_x, y+sub_k_y)
    return max_sum, config

with open('cetate.in', 'r') as fin:
    c = int(fin.readline())
    n, m, k = map(int, fin.readline().split())
    matrix = [list(map(int, fin.readline().split())) for _ in range(n)]

exact_size = c == 1
max_sum, (i1, j1, i2, j2) = max_submatrix_sum(matrix, n, m, k, exact_size)

with open('cetate.out', 'w') as fout:
    fout.write(f"{max_sum}\n{i1} {j1} {i2} {j2}\n")
```
The code above defines a function `max_submatrix_sum` that calculates the maximum profit of a submatrix with the given constraints and then writes the results to the `cetate.out` file without using `input()` or `print()`. The solution reads from `cetate.in` and considers both exact and non-exact submatrix sizes based on the challenge requirement `c`.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 26, in <module>
    max_sum, (i1, j1, i2, j2) = max_submatrix_sum(matrix, n, m, k, exact_size)
                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 7, in max_submatrix_sum
    sub_sum = sum(matrix[i][y:y+k] for i in range(x, x+k))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: unsupported operand type(s) for +: 'int' and 'list'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def compute_prefix_sums(matrix):
    n, m = len(matrix), len(matrix[0])
    prefix_sums = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, m + 1):
            prefix_sums[i][j] = matrix[i-1][j-1] + prefix_sums[i][j-1] + prefix_sums[i-1][j] - prefix_sums[i-1][j-1]
    return prefix_sums

def max_submatrix_sum(prefix_sums, n, m, k, c):
    max_sum = float('-inf')
    config = (0, 0, 0, 0)
    for i1 in range(1, n - k + 2) if c == 1 else range(1, n + 1):
        for j1 in range(1, m - k + 2) if c == 1 else range(1, m + 1):
            for i2 in range(i1 + k - 1, n + 1) if c == 1 else range(i1, n + 1):
                for j2 in range(j1 + k - 1, m + 1) if c == 1 else range(j1, m + 1):
                    if c == 1 or (i2 - i1 + 1 <= k and j2 - j1 + 1 <= k):
                        current_sum = prefix_sums[i2][j2] - prefix_sums[i1-1][j2] - prefix_sums[i2][j1-1] + prefix_sums[i1-1][j1-1]
                        if current_sum > max_sum:
                            max_sum = current_sum
                            config = (i1, j1, i2, j2)
    return max_sum, config

# Read input data
with open('cetate.in', 'r') as fin:
    c = int(fin.readline())
    n, m, k = map(int, fin.readline().split())
    matrix = [list(map(int, fin.readline().split())) for _ in range(n)]

# Compute prefix sums and find the maximum profit submatrix
prefix_sums = compute_prefix_sums(matrix)
max_profit, (i1, j1, i2, j2) = max_submatrix_sum(prefix_sums, n, m, k, c)

# Write output data
with open('cetate.out', 'w') as fout:
    fout.write(f"{max_profit}\n{i1} {j1} {i2} {j2}\n")
```

The rewritten solution fixes the issue by using a prefix sum matrix and properly computing the sum of submatrices. It reads from `cetate.in` and writes to `cetate.out`, and it should now handle both challenge requirements correctly.
