---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `tren.in` and write to `tren.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un elev în clasa a V-a, Rareş, s-a gândit să studieze mersul trenurilor ce trec prin gara din oraşul său, într-o zi. Gara are $2$ linii, numerotate cu $1$ şi $2$, pe care sosesc şi pleacă trenurile. În acea zi, în gară sosesc $T$ trenuri. Pentru fiecare tren din cele $T$, Rareş cunoaşte linia $L$ pe care va sosi, momentul sosirii, adică ora $H$ şi minutul $M$, precum şi durata de timp $S$ de staţionare (exprimată în minute). El a decis ca perioada de studiu a celor $T$ trenuri să înceapă cu momentul sosirii primului tren în gară din cele $T$ şi să se încheie odată cu momentul plecării ultimului tren din cele $T$.

Din sala de aşteptare Rareş poate vedea cele $2$ linii. Rareş are însă o problemă: atunci când un tren se află în gară pe linia $1$, el nu poate vedea trenul staţionat în acelaşi timp pe linia $2$. De exemplu, dacă un tren ajunge în gară pe linia $1$ la ora $14:21$ şi staţionează $5$ minute atunci trenul va pleca din gară la ora $14:26$. Astfel, în intervalul de timp [$14:21-14:26$], Rareş nu poate vedea ce se întâmplă pe linia $2$. Trenul de pe linia $2$ va putea fi vizibil începând cu minutul următor, adică de la $14:27$.

# Cerință

Scrieţi un program care să determine pentru un număr $T$ de trenuri care trec prin gară în perioada de studiu din acea zi:

* numărul maxim de trenuri $Z$ care au staţionat pe aceeaşi linie;
* numărul $X$ de trenuri pe care Rareş le vede;
* durata de timp maximă $Y$ (exprimată în număr de minute consecutive), din perioada de studiu, în care Rareş nu a văzut niciun tren.

# Date de intrare

Fișierul de intrare `tren.in` conține pe prima linie numărul $T$ de trenuri şi pe fiecare din următoarele $T$ linii, în ordinea sosirii trenurilor în gară, câte patru numere naturale $L$, $H$, $M$ şi $S$, separate prin câte un spaţiu, ce reprezintă linia $L$ pe care soseşte trenul, momentul sosirii trenului (ora $H$ şi minutul $M$) şi durata de timp $S$ de staţionare.


# Date de ieșire

Fişierul de ieşire `tren.out` conţine pe prima linie, separate prin câte un spaţiu, valorile cerute $Z$, $X$ și $Y$ (în această ordine).

# Restricții și precizări


* $2 \leq T \leq 100$; $0 \leq H \leq 23$; $0 \leq M \leq 59$; $1 \leq S \leq 9$;
* în acelaşi moment de timp nu pot pleca/sosi mai multe trenuri;
* în acelaşi moment de timp nu poate pleca un tren şi altul să sosească;
* pe aceeaşi linie nu pot staţiona mai multe trenuri în acelaşi moment de timp;
* pentru aflarea corectă a numărului $Z$ se acordă 20% din punctajul pe test;
* pentru aflarea corectă a numărului $X$ se acordă 40% din punctajul pe test;
* pentru aflarea corectă a numărului $Y$ se acordă 40% din punctajul pe test.

---

Example:
`tren.in`
```
8
1 14 20 3
2 14 21 1
2 14 24 4
1 14 40 8
2 14 41 1
2 14 43 1
2 14 45 5
1 14 56 1
```

`tren.out`
```
5 5 11
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def parse_time(line):
    return tuple(map(int, line.split()))

def load_trains(filename):
    with open(filename, 'r') as file:
        T = int(file.readline().strip())
        trains = [parse_time(file.readline().strip()) for _ in range(T)]
    return trains

def save_result(filename, Z, X, Y):
    with open(filename, 'w') as file:
        file.write(f"{Z} {X} {Y}\n")

def calculate_stationing(trains):
    last_seen = None
    max_stationed = [0, 0]
    visible_trains = 0
    max_invisible_duration = 0
    current_invisible_duration = 0
    for line, H, M, S in trains:
        time = H * 60 + M
        if last_seen is None or time > last_seen[1]:
            visible_trains += 1
            if current_invisible_duration > max_invisible_duration:
                max_invisible_duration = current_invisible_duration
            current_invisible_duration = 0
        else:
            current_invisible_duration = time - last_seen[0]
        max_stationed[line - 1] += 1
        last_seen = (time, time + S)
    
    if current_invisible_duration > max_invisible_duration:
        max_invisible_duration = current_invisible_duration
        
    max_trains_same_line = max(max_stationed)
    
    return max_trains_same_line, visible_trains, max_invisible_duration

def main():
    trains = load_trains('tren.in')
    Z, X, Y = calculate_stationing(trains)
    save_result('tren.out', Z, X, Y)

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains_from_file(file_path):
    with open(file_path, 'r') as file:
        trains = [list(map(int, line.split())) for line in file.readlines()[1:]]
    return trains

def write_result_to_file(file_path, Z, X, Y):
    with open(file_path, 'w') as file:
        file.write(f"{Z} {X} {Y}")

def calculate_trains_data(trains):
    last_seen = {1: -1, 2: -1}
    station_count = {1: 0, 2: 0}
    max_stationed = 0
    visible_trains = 0
    max_invisible_duration = 0
    current_invisible_time = 0

    for line, H, M, S in trains:
        arrival_time = H * 60 + M
        departure_time = arrival_time + S

        if last_seen[3 - line] < arrival_time:
            visible_trains += 1
            current_invisible_time = 0
        else:
            current_invisible_time = max(current_invisible_time, arrival_time - last_seen[3 - line])

        max_invisible_duration = max(max_invisible_duration, current_invisible_time)
        last_seen[line] = departure_time
        station_count[line] += 1
        max_stationed = max(max_stationed, station_count[line])

    # Calculate final invisible duration if the last train was not seen
    if last_seen[1] > last_seen[2]:
        max_invisible_duration = max(max_invisible_duration, last_seen[1] - last_seen[2])
    elif last_seen[2] > last_seen[1]:
        max_invisible_duration = max(max_invisible_duration, last_seen[2] - last_seen[1])

    return max_stationed, visible_trains, max_invisible_duration

def tren_challenge():
    trains = read_trains_from_file('tren.in')
    Z, X, Y = calculate_trains_data(trains)
    write_result_to_file('tren.out', Z, X, Y)

tren_challenge()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains_from_file():
    with open('tren.in', 'r') as file:
        T = int(file.readline().strip())
        trains = [tuple(map(int, line.split())) for line in file.readlines()]
    return trains

def write_result_to_file(Z, X, Y):
    with open('tren.out', 'w') as file:
        file.write(f"{Z} {X} {Y}\n")

def calculate_trains_data(trains):
    trains_on_track = {1: [], 2: []}
    max_trains_same_line = 0
    visible_trains = 0
    max_invisible_duration = 0
    study_period_start = trains[0][1] * 60 + trains[0][2]  # Convert start time to minutes
    study_period_end = study_period_start

    for L, H, M, S in trains:
        arrival = H * 60 + M
        departure = arrival + S

        # Update study period end time
        study_period_end = max(study_period_end, departure)

        # Check if the train is visible
        if not trains_on_track[3 - L] or trains_on_track[3 - L][-1][1] < arrival:
            visible_trains += 1

        # Add train to its track
        trains_on_track[L].append((arrival, departure - 1))  # -1 because train leaves at the end of the minute

        # Update maximum trains on the same line
        max_trains_same_line = max(max_trains_same_line, len(trains_on_track[L]))

        # Remove trains that have left from the track
        trains_on_track[L] = [t for t in trains_on_track[L] if t[1] >= arrival]

    # Calculate the maximum duration with no visible trains
    current_time = study_period_start
    while current_time <= study_period_end:
        if (not trains_on_track[1] or trains_on_track[1][0][0] > current_time) and \
                (not trains_on_track[2] or trains_on_track[2][0][0] > current_time):
            invisible_start = current_time
            while current_time <= study_period_end and \
                    (not trains_on_track[1] or trains_on_track[1][0][0] > current_time) and \
                    (not trains_on_track[2] or trains_on_track[2][0][0] > current_time):
                current_time += 1
            max_invisible_duration = max(max_invisible_duration, current_time - invisible_start)
        else:
            current_time += 1

    return max_trains_same_line, visible_trains, max_invisible_duration

def tren_challenge():
    trains = read_trains_from_file()
    Z, X, Y = calculate_trains_data(trains)
    write_result_to_file(Z, X, Y)

tren_challenge()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains():
    with open('tren.in', 'r') as file:
        T = int(file.readline())
        trains = [tuple(map(int, file.readline().split())) for _ in range(T)]
    return trains

def write_output(Z, X, Y):
    with open('tren.out', 'w') as file:
        file.write(f"{Z} {X} {Y}")

def process_trains(trains):
    max_trains_line = [0, 0]  # Max trains on each line
    visible_trains = 0        # Total visible trains
    max_time_invisible = 0    # Max time without seeing a train

    # Sort trains by arrival time
    trains.sort(key=lambda x: (x[1], x[2]))

    # Initialize visibility windows for both lines
    visibility = {1: 0, 2: 0}

    # Process each train
    for train in trains:
        line, H, M, S = train
        arrival = H * 60 + M
        departure = arrival + S

        # Check if this train is visible
        if arrival >= visibility[3 - line]:  # 3 - line gives the opposite line number
            visible_trains += 1
            visibility[line] = max(visibility[line], departure)

        # Update max trains on the same line
        max_trains_line[line - 1] += 1

        # Check for time invisible
        if line == 1 and visibility[1] > visibility[2]:
            max_time_invisible = max(max_time_invisible, visibility[1] - visibility[2])
        elif line == 2 and visibility[2] > visibility[1]:
            max_time_invisible = max(max_time_invisible, visibility[2] - visibility[1])

    Z = max(max_trains_line)
    X = visible_trains
    Y = max_time_invisible

    return Z, X, Y

def main():
    trains = read_trains()
    Z, X, Y = process_trains(trains)
    write_output(Z, X, Y)

main()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains():
    with open('tren.in', 'r') as file:
        trains = [tuple(map(int, line.split())) for line in file.readlines()[1:]]
    return trains

def write_output(Z, X, Y):
    with open('tren.out', 'w') as file:
        file.write(f"{Z} {X} {Y}\n")

def process_trains(trains):
    max_trains_line = [0, 0]  # Max trains on each line
    visible_trains = 0        # Total visible trains
    max_time_invisible = 0    # Max time without seeing a train

    # Sort trains by arrival time
    trains.sort(key=lambda x: (x[1], x[2]))

    # Initialize visibility windows for both lines
    visibility = {1: 0, 2: 0}
    last_departure = {-1: 0}  # Last departure time from any line

    # Process each train
    for train in trains:
        line, H, M, S = train
        arrival = H * 60 + M
        departure = arrival + S

        # Check if this train is visible
        if arrival >= visibility[3 - line]:  # 3 - line gives the opposite line number
            visible_trains += 1
            visibility[line] = departure
        else:
            # Update max invisible time
            invisible_time = arrival - visibility[3 - line]
            max_time_invisible = max(max_time_invisible, invisible_time)

        # Update max trains on the same line
        max_trains_line[line - 1] += 1

        # Update last departure time
        last_departure[-1] = max(last_departure[-1], departure)

    # Final check for the max invisible time at the end of the observation window
    if last_departure[-1] > visibility[1] and last_departure[-1] > visibility[2]:
        max_time_invisible = max(max_time_invisible, last_departure[-1] - max(visibility[1], visibility[2]))

    Z = max(max_trains_line)
    X = visible_trains
    Y = max_time_invisible

    return Z, X, Y

def main():
    trains = read_trains()
    Z, X, Y = process_trains(trains)
    write_output(Z, X, Y)

main()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains():
    with open('tren.in', 'r') as file:
        T = int(file.readline())
        trains = [tuple(map(int, file.readline().split())) for _ in range(T)]
    return trains

def write_output(Z, X, Y):
    with open('tren.out', 'w') as file:
        file.write(f"{Z} {X} {Y}\n")

def process_trains(trains):
    timeline = {}
    for L, H, M, S in trains:
        arrival = H * 60 + M
        departure = arrival + S
        timeline[arrival] = timeline.get(arrival, (0, 0))
        timeline[departure] = timeline.get(departure, (0, 0))
        timeline[arrival] = (timeline[arrival][0] + (1 if L == 1 else 0),
                             timeline[arrival][1] + (1 if L == 2 else 0))
        timeline[departure] = (timeline[departure][0] - (1 if L == 1 else 0),
                               timeline[departure][1] - (1 if L == 2 else 0))

    Z = max(max(v[0] for v in timeline.values()), max(v[1] for v in timeline.values()))
    X = 0
    Y = 0

    on_track = [0, 0]
    max_invisible_time = 0
    start_invisible = None
    for time in sorted(timeline.keys()):
        on_track[0] += timeline[time][0]
        on_track[1] += timeline[time][1]
        if on_track[0] > 0 and on_track[1] > 0:
            if start_invisible is not None:
                max_invisible_time = max(max_invisible_time, time - start_invisible)
                start_invisible = None
        else:
            X += 1
            if start_invisible is None:
                start_invisible = time

    if start_invisible is not None:
        max_invisible_time = max(max_invisible_time, time - start_invisible)

    Y = max_invisible_time
    return Z, X, Y

def main():
    trains = read_trains()
    Z, X, Y = process_trains(trains)
    write_output(Z, X, Y)

main()
```
```
---------- user ----------


Expected program to write result to `tren.out` and read from `tren.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_trains_from_file():
    with open('tren.in', 'r') as file:
        T = int(file.readline().strip())
        trains = [list(map(int, file.readline().strip().split())) for _ in range(T)]
    return trains

def write_result_to_file(Z, X, Y):
    with open('tren.out', 'w') as file:
        file.write(f"{Z} {X} {Y}\n")

def calculate_trains_data(trains):
    # Initialize counters for each line
    trains_on_line = {1: 0, 2: 0}
    # Initialize max counters for output
    max_trains_same_line = 0
    visible_trains = len(trains)  # Initially, all trains are assumed visible
    max_invisible_duration = 0
    # Track the last train's departure time by line
    last_departure = {1: 0, 2: 0}
    # Track the start of an invisible period
    invisible_start = None

    for L, H, M, S in trains:
        arrival_time = H * 60 + M
        departure_time = arrival_time + S

        # If a train is arriving on one line and a train is still visible on the other line,
        # then the arriving train cannot be seen by Rareș.
        if last_departure[3 - L] > arrival_time:
            visible_trains -= 1  # The current train is not visible

        # If no trains are visible, start timing an invisible period
        if last_departure[1] <= arrival_time and last_departure[2] <= arrival_time:
            if invisible_start is None:  # Start a new invisible period
                invisible_start = arrival_time
        else:  # At least one train is visible
            if invisible_start is not None:
                # End the current invisible period and calculate its duration
                invisible_duration = arrival_time - invisible_start
                max_invisible_duration = max(max_invisible_duration, invisible_duration)
                invisible_start = None  # Reset invisible period start

        # Update the departure time for the current line
        last_departure[L] = max(last_departure[L], departure_time)

        # Increment the count of trains on the current line
        trains_on_line[L] += 1
        # Update the max number of trains on the same line
        max_trains_same_line = max(max_trains_same_line, trains_on_line[L])

    # Check if there was an ongoing invisible period at the end
    if invisible_start is not None:
        # End the current invisible period using the latest departure time seen
        last_departure_time = max(last_departure.values())
        invisible_duration = last_departure_time - invisible_start
        max_invisible_duration = max(max_invisible_duration, invisible_duration)

    Z = max_trains_same_line
    X = visible_trains
    Y = max_invisible_duration

    return Z, X, Y

def tren_challenge():
    trains = read_trains_from_file()
    Z, X, Y = calculate_trains_data(trains)
    write_result_to_file(Z, X, Y)

tren_challenge()
```
```
