---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `balaur.in` and write to `balaur.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

A fost o dată un balaur cu $6$ capete. Într-o zi, Făt-Frumos s-a supărat și i-a tăiat un cap. Peste noapte i-au crescut alte $6$ capete în loc. Pe același gât! A doua zi, Făt-Frumos iar i-a tăiat un cap, dar peste noapte balaurului i-au crescut în loc alte $6$ capete... și tot așa timp de $n$ zile. În cea de a ($n+1$)-a zi, Făt-Frumos s-a plictisit și a plecat acasă!

# Cerință

Scrieți un program care citește $n$, numărul de zile, și calculează câte capete avea balaurul după $n$ zile.

# Date de intrare


Fișierul de intrare `balaur.in` va conține numărul $n$.


# Date de ieșire


Fișierul de ieșire `balaur.out` va conține un singur număr reprezentînd câte capete avea balaurul după $n$ zile.


# Restricții și precizări

* $1 \leq n \leq 400 \ 000 \ 000$

---

Example:
`balaur.in`
```
3
```

`balaur.out`
```
15
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# balaur.py

def calculate_heads(n):
    return 5 * n + 1

def main():
    with open('balaur.in', 'r') as fin:
        n = int(fin.readline().strip())
    heads = calculate_heads(n)
    with open('balaur.out', 'w') as fout:
        fout.write(str(heads))

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the number of days from balaur.in
with open('balaur.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate the number of heads after n days
# Initial heads = 6
# Each day, heads increase by 5 since one is cut off and 6 grow back
heads = 6 + (n * 5) - 5  # Subtract 5 because on the first day there were already 6 heads

# Write the result to balaur.out
with open('balaur.out', 'w') as file:
    file.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
with open('balaur.in', 'r') as fin:
    n = int(fin.readline())

heads = 5 * n + 1

with open('balaur.out', 'w') as fout:
    fout.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Efficient solution to read from balaur.in and write to balaur.out

with open('balaur.in', 'r') as file_input:
    n = int(file_input.read().strip())

# Since the dragon gains 5 new heads each day (loses one, grows six), after n days:
heads_after_n_days = 1 + 5 * n

with open('balaur.out', 'w') as file_output:
    file_output.write(str(heads_after_n_days))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read from balaur.in
with open('balaur.in', 'r') as fin:
    n = int(fin.readline())

# Calculate the number of heads
heads = 6 + (n - 1) * 5

# Write to balaur.out
with open('balaur.out', 'w') as fout:
    fout.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read the number of days from balaur.in
with open('balaur.in', 'r') as file:
    n = int(file.readline())

# Calculate the number of heads
# Each day, the dragon starts with one less head than it had the day before,
# and ends the day with 6 more heads than it started with.
# This is equivalent to adding 5 heads each day to the initial 6 heads,
# but since the process started after the first head was cut, we subtract 5.
heads = 6 + (n - 1) * 5

# Write the result to balaur.out
with open('balaur.out', 'w') as file:
    file.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open balaur.in file for reading
with open('balaur.in', 'r') as fin:
    # Read the number of days n from the file
    n = int(fin.readline().strip())

# Calculate the number of heads after n days
# On the first day, balaur has 6 heads. Each day after, it grows 5 more heads.
heads = 6 + 5 * (n - 1)

# Open balaur.out file for writing
with open('balaur.out', 'w') as fout:
    # Write the number of heads to the file
    fout.write(str(heads))
```
```
