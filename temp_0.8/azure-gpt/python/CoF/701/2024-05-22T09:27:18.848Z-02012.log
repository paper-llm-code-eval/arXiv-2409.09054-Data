---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `balaur.in` and write to `balaur.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

A fost o dată un balaur cu $6$ capete. Într-o zi, Făt-Frumos s-a supărat și i-a tăiat un cap. Peste noapte i-au crescut alte $6$ capete în loc. Pe același gât! A doua zi, Făt-Frumos iar i-a tăiat un cap, dar peste noapte balaurului i-au crescut în loc alte $6$ capete... și tot așa timp de $n$ zile. În cea de a ($n+1$)-a zi, Făt-Frumos s-a plictisit și a plecat acasă!

# Cerință

Scrieți un program care citește $n$, numărul de zile, și calculează câte capete avea balaurul după $n$ zile.

# Date de intrare


Fișierul de intrare `balaur.in` va conține numărul $n$.


# Date de ieșire


Fișierul de ieșire `balaur.out` va conține un singur număr reprezentînd câte capete avea balaurul după $n$ zile.


# Restricții și precizări

* $1 \leq n \leq 400 \ 000 \ 000$

---

Example:
`balaur.in`
```
3
```

`balaur.out`
```
15
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# balaur.py
def main():
    with open('balaur.in', 'r') as fin:
        n = int(fin.read().strip())

    # Calculate the total number of heads after n days
    # Initial number of heads is 6
    # Each day one head is cut and 6 new heads grow on the same neck
    # So, it's like adding 5 new heads each day
    total_heads = 6 + 5 * n

    with open('balaur.out', 'w') as fout:
        fout.write(str(total_heads))

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# balaur_solution.py
with open('balaur.in', 'r') as fin:
    n = int(fin.read().strip())

# Each day, 5 new heads are effectively added (6 grow back, 1 is cut).
total_heads = 6 + (n * 5)

with open('balaur.out', 'w') as fout:
    fout.write(str(total_heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read n from "balaur.in"
with open('balaur.in', 'r') as file:
    n = int(file.readline().strip())

# Calculate the total number of heads
heads = 6 + n * 5

# Write the result to "balaur.out"
with open('balaur.out', 'w') as file:
    file.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input file
with open('balaur.in', 'r') as fin:
    # Read the number of days
    n = int(fin.readline())

# Calculate the number of heads after n days
# Initial heads: 6, each day 5 more heads are added
heads = 6 + (n * 5)

# Open the output file
with open('balaur.out', 'w') as fout:
    # Write the number of heads to the output file
    fout.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read from "balaur.in"
with open('balaur.in', 'r') as file_in:
    n = int(file_in.readline())

# Calculate the number of heads after n days
heads = 6 + n * 5

# Write to "balaur.out"
with open('balaur.out', 'w') as file_out:
    file_out.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input file and read the number of days n
with open('balaur.in', 'r') as fin:
    n = int(fin.readline())

# Calculate the number of heads after n days
# Start with 6 heads and each day 5 more heads are added
heads = 6 + n * 5

# Open the output file and write the number of heads
with open('balaur.out', 'w') as fout:
    fout.write(str(heads))
```
```
---------- user ----------


Expected program to write result to `balaur.out` and read from `balaur.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Open the input file and read the number of days n
with open('balaur.in', 'r') as fin:
    n = int(fin.readline())

# Calculate the number of heads after n days
# Start with 6 heads and each day 5 more heads are added
heads = 6 + n * 5

# Open the output file and write the number of heads
with open('balaur.out', 'w') as fout:
    fout.write(str(heads))
```
