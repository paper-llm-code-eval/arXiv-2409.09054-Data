---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `test.in` and write to `test.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Georgel vrea să-i testeze cunoștințele de matematică lui Săndel. Pentru aceasta, îi propune lui Săndel două numere naturale $a$ și $b$. Cu prima cifră a numărului $a$, plasată în locul primei cifre a numărului $b$ se formează un nou număr. Un alt număr se formează cu prima cifră a numărului $a$ plasată în locul ultimei cifre a numărului $b$. Se obțin două noi numere cu a doua cifră a numărului $a$ plasată în locul primei cifre a numărului $b$, respectiv în locul ultimei cifre a numărului $b$. Se continuă formarea și altor numere după aceleași reguli, până când se epuizează cifrele numărului $a$ (dacă numărul $a$ are $3$ cifre, atunci se vor forma $6$ numere).

# Cerință

Cunoscând cele două numere $a$ și $b$, Săndel va trebui să găsească cel mai mare număr prim format conform regulii de mai sus, știind că se iau în calcul pentru această determinare și valorile inițiale ale numerelor $a$ și $b$. În cazul în care nu există niciun număr prim, conform cerințelor de mai sus, se va afișa cel mai mare număr care se poate forma, știind că se iau în calcul și valorile inițiale ale numerelor $a$ și $b$.

# Date de intrare

De pe prima linie a fișierului de intrare `test.in` se citesc cele două numere $a$ și $b$, în această ordine.


# Date de ieșire

Pe prima linie a fișierului de ieșire `test.out` se va afișa numărul cerut.


# Restricții și precizări

* $10 \leq a, b \leq 1 \ 000 \ 000$

---

Example:
`test.in`
```
19 913
```

`test.out`
```
919
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

# Read data from file
with open('test.in', 'r') as file:
    a, b = map(int, file.readline().split())

# Convert b to string and get the prefix and suffix for later replacements
b_str = str(b)
b_len = len(b_str)
b_prefix = b_str[1:]
b_suffix = b_str[:-1]

# Convert a to string for digit extraction
a_str = str(a)

# Initialize the list to store all generated numbers
generated_numbers = [a, b]

# Generate new numbers by replacing first and last digits of b with each digit of a
for digit in a_str:
    generated_numbers.append(int(digit + b_prefix))
    generated_numbers.append(int(b_suffix + digit))

# Sort the list in descending order to check larger numbers for primality first
generated_numbers.sort(reverse=True)

# Initialize the maximum prime number found
max_prime = None

# Find the largest prime number in the generated list
for number in generated_numbers:
    if is_prime(number):
        max_prime = number
        break

# If no prime number is found, the largest number is the first in the sorted list
if max_prime is None:
    max_prime = generated_numbers[0]

# Write the result to file
with open('test.out', 'w') as file:
    file.write(str(max_prime))
```
This solution first generates all the possible numbers according to the rules, then it sorts them in descending order and checks for primality starting with the largest number. Once a prime number is found, it breaks out of the loop to avoid unnecessary calculations. If no prime number is found, the largest generated number is used as the result. The is_prime function is implemented using the 6k ± 1 optimization.
