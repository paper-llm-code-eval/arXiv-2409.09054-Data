---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def primes_sieve(limit):
    limitn = limit+1
    not_prime = set()
    primes = []

    for i in range(2, limitn):
        if i in not_prime:
            continue

        for f in range(i*2, limitn, i):
            not_prime.add(f)

        primes.append(i)

    return primes

def kth_prime_divisor(n, k, primes):
    for prime in primes:
        while n % prime == 0:
            n //= prime
            k -= 1
            if k == 0:
                return prime
    return n

def solve_task1(n, k, primes):
    return kth_prime_divisor(n, k, primes)

def solve_task2(cards, primes):
    total = 0
    for n, k in cards:
        total += kth_prime_divisor(n, k, primes)
    return total

def write_output(filename, content):
    with open(filename, 'w') as file:
        file.write(str(content) + '\n')

def read_input(filename):
    with open(filename) as file:
        lines = file.readlines()
    return lines

def main():
    lines = read_input('cufar.in')
    p, n = map(int, lines[0].strip().split())
    
    primes = primes_sieve(1000000)
    
    if p == 1:
        n, k = map(int, lines[1].strip().split())
        magic_value = solve_task1(n, k, primes)
        write_output('cufar.out', magic_value)
    elif p == 2:
        cards = [tuple(map(int, line.strip().split())) for line in lines[1:]]
        cipher = solve_task2(cards, primes)
        write_output('cufar.out', cipher)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `cufar.out` and read from `cufar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Efficient sieve of Eratosthenes implementation to generate all prime numbers up to the limit
def sieve_of_eratosthenes(limit):
    sieve = [True] * (limit + 1)
    primes = []
    for num in range(2, limit + 1):
        if sieve[num]:
            primes.append(num)
            for multiple in range(num * num, limit + 1, num):
                sieve[multiple] = False
    return primes

# Function to find the k-th prime divisor of a given number 'n'
def find_kth_prime_divisor(n, k, primes):
    prime_divisor_count = 0
    for prime in primes:
        while n % prime == 0:
            n //= prime
            prime_divisor_count += 1
            if prime_divisor_count == k:
                return prime
        if n == 1:
            break
    return -1  # Return -1 if the k-th prime divisor does not exist

# Main function to handle task selection and file operations
def main():
    # Read input data from 'cufar.in'
    with open('cufar.in', 'r') as file:
        lines = file.readlines()

    # Parse the task and number of cases
    p, n = map(int, lines[0].split())

    # Generate all prime numbers up to 1,000,000
    primes = sieve_of_eratosthenes(1000000)

    if p == 1:
        # Handle task 1: Find the k-th prime divisor of a single number
        single_number, k = map(int, lines[1].split())
        magic_value = find_kth_prime_divisor(single_number, k, primes)
        # Write the magic value to 'cufar.out'
        with open('cufar.out', 'w') as file:
            file.write(f"{magic_value}\n")
    elif p == 2:
        # Handle task 2: Find the sum of k-th prime divisors of multiple numbers
        cipher_sum = 0
        for i in range(1, n + 1):
            number, k = map(int, lines[i].split())
            cipher_sum += find_kth_prime_divisor(number, k, primes)
        # Write the cipher sum to 'cufar.out'
        with open('cufar.out', 'w') as file:
            file.write(f"{cipher_sum}\n")

# Call the main function
if __name__ == "__main__":
    main()
```
