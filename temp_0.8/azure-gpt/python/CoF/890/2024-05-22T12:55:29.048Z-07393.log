---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from math import sqrt

# Function to get the k-th prime factor
def kth_prime_factor(n, k):
    prime_factors = []
    # Count factors of 2
    while n % 2 == 0:
        prime_factors.append(2)
        n //= 2
    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used
    for i in range(3, int(sqrt(n)) + 1, 2):
        # While i divides n, append i and divide n
        while n % i == 0:
            prime_factors.append(i)
            n //= i
    # If n is a prime number greater than 2, then append it
    if n > 2:
        prime_factors.append(n)
    # Return the k-th prime factor
    return prime_factors[k - 1]

# Read from cufar.in and write to cufar.out
def solve_challenge():
    # Open and read the input file
    with open('cufar.in', 'r') as file_in:
        p, n = map(int, file_in.readline().split())
        if p == 1:
            number, k = map(int, file_in.readline().split())
            magic_value = kth_prime_factor(number, k)
            # Write the magic value to the output file
            with open('cufar.out', 'w') as file_out:
                file_out.write(str(magic_value))
        elif p == 2:
            magic_sum = 0
            for _ in range(n):
                number, k = map(int, file_in.readline().split())
                magic_sum += kth_prime_factor(number, k)
            # Write the sum of magic values to the output file
            with open('cufar.out', 'w') as file_out:
                file_out.write(str(magic_sum))

# Execute the problem solution
solve_challenge()
```
```
---------- user ----------


Expected program to write result to `cufar.out` and read from `cufar.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from math import isqrt

# Optimize prime factorization
def prime_factors(n, k):
    # Factor out multiples of 2
    count = 0
    while n % 2 == 0:
        count += 1
        if count == k:
            return 2
        n //= 2
    # Check odd factors
    p = 3
    while p <= isqrt(n) + 1:
        while n % p == 0:
            count += 1
            if count == k:
                return p
            n //= p
        p += 2
    # If n is left as a prime number
    if n > 1:
        count += 1
        if count == k:
            return n
    return -1  # If k is larger than the number of prime factors

# Read from 'cufar.in' and write to 'cufar.out'
def solve_challenge():
    with open('cufar.in', 'r') as fin:
        p, n = map(int, fin.readline().split())

        if p == 1:  # Solve only task 1
            number, k = map(int, fin.readline().split())
            result = prime_factors(number, k)
            with open('cufar.out', 'w') as fout:
                fout.write(str(result))

        elif p == 2:  # Solve only task 2
            cipher = 0
            for _ in range(n):
                number, k = map(int, fin.readline().split())
                cipher += prime_factors(number, k)
            with open('cufar.out', 'w') as fout:
                fout.write(str(cipher))

# Execute the problem solution
solve_challenge()
```
