---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `galbeni.in` and write to `galbeni.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

După ce au descoperit ascunzătoarea piratului Spânu, marinarii de pe corabia “Speranţa” au hotărât să ofere sătenilor o parte din comoara acestuia. Întrucât comoara avea un număr nelimitat de bani din aur, numiţi galbeni, singura problemă a marinarilor a fost regula după care să împartă banii.

După îndelungi discuţii au procedat astfel: i-au rugat pe săteni să se aşeze în ordine la coadă şi să vină, pe rând, unul câte unul pentru a-şi ridica galbenii cuveniţi. Primul sătean a fost rugat să îşi aleagă numărul de galbeni, cu condiţia ca acest număr să fie format din exact $K$ cifre. Al doilea sătean va primi un număr de galbeni calculat astfel: se înmulţeşte numărul de galbeni ai primului sătean cu toate cifrele nenule ale acelui număr, rezultatul se înmulţeşte cu $8$ şi apoi se împarte la $9$ păstrându-se doar ultimele $K$ cifre ale câtului împărţirii. Dacă numărul obţinut are mai puţin de $K$ cifre, atunci acestuia i se adaugă la final cifra $9$, până când se completează $K$ cifre.

Pentru a stabili câţi galbeni primeşte al treilea sătean, se aplică aceeaşi regulă, dar pornind de la numărul de galbeni ai celui de-al doilea sătean. Regula se aplică în continuare fiecărui sătean, plecând de la numărul de galbeni primiţi de săteanul care a stat la coadă exact în faţa lui. 

# Cerința

Cunoscând numărul de galbeni aleşi de primul sătean, determinaţi numărul de galbeni pe care îl va primi al $N$-lea sătean.

# Date de intrare
Fișierul de intrare `galbeni.in` conține pe prima linie cele $3$ numere naturale nenule $S$, $K$, $N$ separate prin câte un spaţiu, unde $S$ reprezintă numărul de galbeni ales de primul sătean, $K$ este numărul de cifre ale numărului $S$, iar $N$ reprezintă numărul de ordine al săteanului pentru care se cere să determinaţi numărul de galbeni primiţi.

# Date de ieșire
Fișierul de ieșire `galbeni.out` va conține pe unica sa linie un număr natural reprezentând rezultatul determinat.

# Restricții și precizări
* $2 \leq N \leq 1 \ 000 \ 000 \ 000$;
* $1 \leq K \leq 3$;
* Se garantează că $S$ are exact $K$ cifre.

---

Example:
`galbeni.in`
```
51 2 3
```

`galbeni.out`
```
77
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def calculate_galbeni(S, K, N):
    mod_val = 10**K
    result = S
    for _ in range(1, N):
        non_zero_product = 1
        temp = result
        while temp > 0:
            digit = temp % 10
            if digit != 0:
                non_zero_product *= digit
            temp //= 10
        result = ((result * non_zero_product * 8) // 9) % mod_val
        if len(str(result)) < K:
            result = int(str(result) + '9'*(K - len(str(result))))
    return result

with open('galbeni.in', 'r') as file_in:
    S, K, N = map(int, file_in.readline().split())

galbeni = calculate_galbeni(S, K, N)

with open('galbeni.out', 'w') as file_out:
    file_out.write(str(galbeni))
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def multiply_non_zero_digits(number):
    product = 1
    while number > 0:
        digit = number % 10
        if digit != 0:
            product *= digit
        number //= 10
    return product

def next_galbeni(current_galbeni, K):
    non_zero_product = multiply_non_zero_digits(current_galbeni)
    next_value = (current_galbeni * non_zero_product * 8) // 9
    next_value_str = str(next_value).zfill(K)  # Pad with 9's if necessary
    return int(next_value_str[-K:])  # Keep only last K digits

def calculate_galbeni(S, K, N):
    result = S
    for _ in range(2, N + 1):  # Start from 2 because first galbeni is given
        result = next_galbeni(result, K)
    return result

# Read from 'galbeni.in'
with open('galbeni.in', 'r') as file_in:
    S, K, N = map(int, file_in.readline().split())

# Calculate the N-th galbeni
galbeni = calculate_galbeni(S, K, N)

# Write to 'galbeni.out'
with open('galbeni.out', 'w') as file_out:
    file_out.write(f"{galbeni}\n")
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_next_galbeni(S, K):
    product = 1
    for digit in str(S):
        if digit != '0':
            product *= int(digit)
    S = (S * product * 8) // 9
    S_str = str(S).zfill(K)  # Ensure the number has K digits
    return int(S_str[-K:])  # Return the last K digits

# Read from 'galbeni.in'
with open('galbeni.in', 'r') as file_in:
    S, K, N = map(int, file_in.readline().split())

# Calculate the number of galbeni for the N-th villager
for _ in range(2, N + 1):  # Start from the second villager
    S = calculate_next_galbeni(S, K)

# Write to 'galbeni.out'
with open('galbeni.out', 'w') as file_out:
    file_out.write(f'{S}\n')
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_next_galbeni(S, K):
    product = 1
    for digit in str(S):
        if digit != '0':
            product *= int(digit)
    S = (S * product * 8) // 9
    while len(str(S)) < K:
        S = int(str(S) + '9')
    return S if len(str(S)) == K else int(str(S)[-K:])

# Read from 'galbeni.in'
with open('galbeni.in', 'r') as file_in:
    S, K, N = map(int, file_in.readline().split())

# Initialize galbeni for the first villager
galbeni = S

# Calculate the number of galbeni for the N-th villager
for _ in range(1, N):
    galbeni = calculate_next_galbeni(galbeni, K)

# Write to 'galbeni.out'
with open('galbeni.out', 'w') as file_out:
    file_out.write(f'{galbeni}\n')
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to calculate galbeni for the N-th villager
def calculate_galbeni(S, K, N):
    result = S
    mod_val = 10**K
    for _ in range(1, N):
        non_zero_product = 1
        temp = result
        # Multiply all non-zero digits of the current result
        while temp > 0:
            digit = temp % 10
            if digit != 0:
                non_zero_product *= digit
            temp //= 10
        # Apply the given formula, and keep only the last K digits
        result = ((result * non_zero_product * 8) // 9) % mod_val
        if len(str(result)) < K:
            result = int(str(result) + '9'*(K - len(str(result))))
    return result

# Read from 'galbeni.in'
with open('galbeni.in', 'r') as file_in:
    S, K, N = map(int, file_in.readline().split())

# Calculate the N-th galbeni
galbeni = calculate_galbeni(S, K, N)

# Write to 'galbeni.out'
with open('galbeni.out', 'w') as file_out:
    file_out.write(str(galbeni) + '\n')
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read from 'galbeni.in'
with open('galbeni.in', 'r') as file:
    S, K, N = map(int, file.readline().split())

# Calculate the next galbeni amount based on the current amount
def get_next_galbeni(current, K):
    multiply = 1
    for digit in str(current):
        if digit != '0':
            multiply *= int(digit)
    next_galbeni = ((current * multiply * 8) // 9) % (10 ** K)
    next_galbeni_str = str(next_galbeni).zfill(K)  # Ensure K digits
    return int(next_galbeni_str)

# Calculate the N-th galbeni amount
for _ in range(1, N):
    S = get_next_galbeni(S, K)

# Write to 'galbeni.out'
with open('galbeni.out', 'w') as file:
    file.write(f"{S}\n")
```
```
---------- user ----------


Expected program to write result to `galbeni.out` and read from `galbeni.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Function to calculate the product of non-zero digits of a number
def product_of_non_zero_digits(number):
    product = 1
    while number > 0:
        digit = number % 10
        if digit != 0:
            product *= digit
        number //= 10
    return product

# Function to calculate the number of galbeni for the N-th villager
def calculate_galbeni(S, K, N):
    mod_val = 10**K
    for i in range(2, N + 1):
        S = (S * product_of_non_zero_digits(S) * 8 // 9) % mod_val
        if S < mod_val // 10:
            S = int(str(S) + '9')
    return S

# Reading from 'galbeni.in'
with open('galbeni.in', 'r') as fin:
    S, K, N = map(int, fin.readline().strip().split())

# Calculating the result
result = calculate_galbeni(S, K, N)

# Writing to 'galbeni.out'
with open('galbeni.out', 'w') as fout:
    fout.write(str(result) + '\n')
```
```
