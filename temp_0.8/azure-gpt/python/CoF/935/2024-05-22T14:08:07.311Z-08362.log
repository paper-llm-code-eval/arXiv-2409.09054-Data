---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `exclusiv.in` and write to `exclusiv.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră doi vectori care conțin numere naturale: $s$ cu $M$ elemente și $v$ cu $N$ elemente. Numim secvență *$i$-exclusivă* o secvență a vectorului $s$ care nu conține niciuna dintre valorile $v_1, v_2, \dots, v_i$.

# Cerință

Scrieți un program care să determine, pentru orice $1 \leq i \leq N$, lungimea maximă a unei secvențe *$i$-exclusive*.

# Date de intrare

Fișierul de intrare `exclusiv.in` conține pe prima linie numerele naturale $M$ și $N$. Pe linia a doua se află $M$ numere naturale reprezentând elementele vectorului $s$, iar pe linia a treia $N$ numere naturale reprezentând elementele vectorului $v$. Valorile scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `exclusiv.out` va conține $N$ linii. Pe linia $i$ va fi scris un număr natural care reprezintă lungimea maximă a unei secvențe *$i$-exclusive*.

# Restricții și precizări

* $1 \leq N \leq 2 \ 000$
* $3 \leq M \leq 100 \ 000$
* Vectorii s și v conțin numere naturale mai mici sau egale cu $2 \ 000 \ 000 \ 000$, memorate începând cu poziția $1$.
* Valorile din fiecare vector nu sunt obligatoriu distincte două câte două.
* O subsecvență nevidă în s este formată din elemente situate pe poziții consecutive ($s_i, s_{i+1}, \dots, s_j$), $i \leq j$. O subsecvență *$i$-exclusivă* poate fi și vidă, lungimea ei fiind $0$.
* Pentru teste valorând $10$ puncte $N = 1$.
* Pentru alte teste valorând $30$ de puncte $1 < N \leq 50$ si $M \leq 1 \ 000$.
* Pentru alte teste valorând $40$ de puncte $50 < N \leq 2 \ 000$, si $1 \ 000 < M \leq 2 \ 000$.
* Pentru alte valorând $20$ de puncte $N = 2 \ 000$, si $10^4 < M \leq 10^5$.

---

Example:
`exclusiv.in`
```
20 6
11 5 11 7 2 10 11 9 2 77 88 88 88 2 7 2 2 77 2 11
11 5 7 9 5 2
```

`exclusiv.out`
```
12
12
7
6
6
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def read_input(file_name):
    with open(file_name, 'r') as file:
        M, N = map(int, file.readline().split())
        s = list(map(int, file.readline().split()))
        v = list(map(int, file.readline().split()))
    return M, N, s, v

def write_output(file_name, results):
    with open(file_name, 'w') as file:
        for result in results:
            file.write(str(result) + '\n')

def calculate_exclusive_sequences(M, N, s, v):
    results = []
    exclude_set = set()
    max_length = 0
    current_length = 0
    for value in v:
        exclude_set.add(value)
        for num in s:
            if num not in exclude_set:
                current_length += 1
                max_length = max(max_length, current_length)
            else:
                current_length = 0
        results.append(max_length)
        max_length = 0
        current_length = 0
    return results

def main():
    M, N, s, v = read_input('exclusiv.in')
    results = calculate_exclusive_sequences(M, N, s, v)
    write_output('exclusiv.out', results)

if __name__ == '__main__':
    main()
```

Please make sure to have the file `exclusiv.in` in the same directory as this script for it to be able to read the input data, and it will create the `exclusiv.out` file with the results.
