---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `lacusta.in` and write to `lacusta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră o matrice dreptunghiulară cu $m$ linii şi $n$ coloane, cu valori naturale. Traversăm matricea pornind de la colţul stânga-sus la colţul dreapta-jos. O traversare constă din mai multe deplasări. La fiecare deplasare se execută un salt pe orizontală şi un pas pe verticală. Un salt înseamnă că putem trece de la o celulă la oricare alta aflată pe aceeaşi linie, iar un pas înseamnă că putem trece de la o celulă la celula aflată imediat sub ea. Excepţie face ultima deplasare (cea în care ne aflăm pe ultima linie), când vom face doar un salt pentru a ajunge în colţul dreapta-jos, dar nu vom mai face şi pasul corespunzător. Astfel traversarea va consta din vizitarea a $2 \cdot m$ celule. 

# Cerinţă

Scrieţi un program care să determine suma minimă care se poate obţine pentru o astfel de traversare.

# Date de intrare


Fişierul de intrare `lacusta.in` conţine pe prima linie două numere naturale separate printr-un spaţiu $m \ n$, reprezentând numărul de linii şi respectiv numărul de coloane ale matricei. Pe următoarele $m$ linii este descrisă matricea, câte $n$ numere pe fiecare linie, separate prin câte un spaţiu.

# Date de ieșire


Fişierul de ieşire `lacusta.out` va conţine o singură linie pe care va fi scrisă suma minimă găsită.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* Valorile elementelor matricei sunt numere întregi din intervalul $[1, 255]$

---

Example:
`lacusta.in`
```
4 5
3 4 5 7 9
6 6 3 4 4
6 3 3 9 6
6 5 3 8 2
```

`lacusta.out`
```
28
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Lacusta Challenge

def read_matrix(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        matrix = [list(map(int, file.readline().split())) for _ in range(m)]
    return m, n, matrix

def write_result(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def find_minimum_path_sum(m, n, matrix):
    # Initialize the cost matrix with infinity
    cost = [[float('inf')] * n for _ in range(m)]
    # Start with the top-left corner
    cost[0][0] = 2 * matrix[0][0]
    # Fill the first row of cost matrix
    for j in range(1, n):
        cost[0][j] = cost[0][j-1] + matrix[0][j]

    # Calculate costs for the rest of the matrix
    for i in range(1, m):
        # Calculate costs for the first column, only downward move is possible
        cost[i][0] = cost[i-1][0] + matrix[i][0]
        # Calculate costs for the rest of the columns
        for j in range(1, n):
            # Find the minimum cost to reach current cell
            for k in range(n):
                if k != j:  # We cannot stay in the same column
                    cost[i][j] = min(cost[i][j], cost[i-1][k] + matrix[i][k] + matrix[i][j])
            # If it's the last row, we need to consider the final horizontal jump to the bottom-right corner
            if i == m - 1:
                cost[i][j] += matrix[i][n-1]
        # Add the minimum cost for a downward move from the previous row
        for j in range(n):
            cost[i][0] = min(cost[i][0], cost[i][j])

    # The minimum path sum will be the cost to reach the bottom-right corner
    return cost[-1][-1]

# Main execution
m, n, matrix = read_matrix('lacusta.in')
result = find_minimum_path_sum(m, n, matrix)
write_result('lacusta.out', result)
```

This python code defines a function to read the matrix from a file, another function to write the result to a file, and a function `find_minimum_path_sum` to compute the minimum path sum for the given matrix challenge. The solution is efficient in terms of space and time complexity, considering the problem's constraints.
