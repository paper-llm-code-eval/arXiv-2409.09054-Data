---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `labirint.in` and write to `labirint.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.

Notăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.


# Cerință


Pentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.


# Date de intrare


Pe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.


# Date de ieșire


în fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.


# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.
* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.


| # | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 10      | $1 \leq N, M \leq 50$, $d_0 = N + M - 1$ |
| 2 | 30      | $1 \leq N, M \leq 50$      |
| 3 | 60      | Fără restricții suplimentare.      |

---

Example:
`labirint.in`
```
5 6
010001
000101
011001
010010
001000
```

`labirint.out`
```
010000
000100
001001
010010
001000
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the Python code solution for the given challenge:

```python
# Python code to solve the labyrinth challenge.
from collections import deque

# Function to read the labyrinth layout from the input file.
def read_labyrinth(filename):
    with open(filename, 'r') as file:
        N, M = map(int, file.readline().split())
        labyrinth = [list(map(int, list(file.readline().strip()))) for _ in range(N)]
    return N, M, labyrinth

# Function to write the result to the output file.
def write_result(filename, result):
    with open(filename, 'w') as file:
        file.writelines(''.join(str(cell) for cell in row) + "\n" for row in result)

# Function to perform a BFS and calculate minimum distances.
def bfs_min_distances(labyrinth, N, M):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # right, down, left, up
    visited = [[False] * M for _ in range(N)]
    distances = [[float('inf')] * M for _ in range(N)]
    queue = deque([(0, 0)])
    distances[0][0] = 1
    visited[0][0] = True

    while queue:
        x, y = queue.popleft()
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < M and not visited[nx][ny] and labyrinth[nx][ny] == 0:
                visited[nx][ny] = True
                distances[nx][ny] = distances[x][y] + 1
                queue.append((nx, ny))
    return distances

# Function to solve the labyrinth challenge.
def labyrinth_challenge(input_file, output_file):
    N, M, labyrinth = read_labyrinth(input_file)
    min_distances = bfs_min_distances(labyrinth, N, M)
    d0 = min_distances[N - 1][M - 1]

    result = [[0] * M for _ in range(N)]
    for i in range(N):
        for j in range(M):
            if labyrinth[i][j] == 1:
                labyrinth[i][j] = 0
                new_min_distances = bfs_min_distances(labyrinth, N, M)
                d_ij = new_min_distances[N - 1][M - 1]
                result[i][j] = 1 if d_ij < d0 else 0
                labyrinth[i][j] = 1

    write_result(output_file, result)

# Main function to execute the program.
if __name__ == '__main__':
    labyrinth_challenge('labirint.in', 'labirint.out')
```

This code reads the labyrinth from `labirint.in`, performs breadth-first search (BFS) to find the shortest path and then checks if changing any wall to a free space decreases the length of the shortest path. The result is written to `labirint.out` as required.
