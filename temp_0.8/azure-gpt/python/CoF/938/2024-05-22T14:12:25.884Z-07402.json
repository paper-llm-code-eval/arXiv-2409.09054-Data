{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/938/2024-05-22T14:12:25.884Z-07402.log",
  "attemptStart": 1716387145.884,
  "attemptEnd": 1716387162.048,
  "attemptDuration": 16.164000034332275,
  "code": "from collections import deque\n\n# Read and parse the labirint.in file\nwith open('labirint.in', 'r') as file:\n    N, M = map(int, file.readline().split())\n    labirint = [list(map(int, list(line.strip()))) for line in file]\n\n# Use BFS to find the shortest distance to each cell\ndef bfs():\n    queue = deque([(0, 0)])\n    distances = [[-1] * M for _ in range(N)]\n    distances[0][0] = 1\n    while queue:\n        x, y = queue.popleft()\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < M and labirint[nx][ny] == 0 and distances[nx][ny] == -1:\n                distances[nx][ny] = distances[x][y] + 1\n                queue.append((nx, ny))\n    return distances\n\n# Get the distance matrix\ndistance_matrix = bfs()\n\n# Initialize the output matrix with zeros\noutput_matrix = [[0] * M for _ in range(N)]\n\n# If the path exists, set d0 to the distance at the bottom-right corner\nd0 = distance_matrix[N - 1][M - 1]\n\n# Determine the output values\nfor i in range(N):\n    for j in range(M):\n        # If the cell is a wall and it's not at the start or end\n        if labirint[i][j] == 1 and (i, j) not in [(0, 0), (N - 1, M - 1)]:\n            labirint[i][j] = 0  # Temporarily make the wall a path\n            new_distances = bfs()\n            if new_distances[N - 1][M - 1] != -1 and new_distances[N - 1][M - 1] < d0:\n                output_matrix[i][j] = 1  # A shorter path exists\n            labirint[i][j] = 1  # Restore the wall\n\n# Write the output_matrix to labirint.out file\nwith open('labirint.out', 'w') as file:\n    for line in output_matrix:\n        file.write(''.join(map(str, line)) + '\\n')\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1533,
  "metadata": {
    "id": 938,
    "examples": [
      {
        "in": "5 6\n010001\n000101\n011001\n010010\n001000",
        "out": "010000\n000100\n001001\n010010\n001000",
        "explainer": ""
      }
    ],
    "body": "Un labirint este descris ca fiind o matrice binară cu $N$ linii și $M$ coloane, cu semnificația că $0$ reprezintă o poziție liberă, iar $1$ reprezintă o poziție în care se află un zid. Un drum în labirint este un traseu în matrice care începe cu poziția $(1, 1)$ și ajunge în poziția $(N, M)$ prin deplasare doar pe poziții care au valoarea 0 și sunt vecine cu poziția curentă, pe una din cele patru direcții: sus, jos, stânga, dreapta. Lungimea unui drum este egală cu numărul de poziții vizitate.\n\nNotăm cu $d_0$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$. Fie $d(i, j)$ lungimea drumului minim de la poziția $(1, 1)$ la poziția $(N, M)$, dacă poziției $(i, j)$ i se atribuie valoarea $0$. Observăm că dacă poziția $(i, j)$ conține inițial un $0$, atunci $d_0 = d(i, j)$.\n\n\n# Cerință\n\n\nPentru fiecare poziție $(i, j)$, să se verifice dacă $d(i, j) < d_0$.\n\n\n# Date de intrare\n\n\nPe prima linie a fișierului `labirint.in` se află două numere naturale $N$ și $M$, dimensiunile matricei binare ce descrie labirintul, apoi pe următoarele $N$ linii se vor afla câte $M$ valori binare, ce reprezint˘a elementele matricei care descrie labirintul, neseparate prin spații.\n\n\n# Date de ieșire\n\n\nîn fișierul `labirint.out` se vor scrie $N$ linii, iar pe fiecare linie se vor scrie $M$ cifre, neseparate prin spații. Cifra a $j$-a de pe linia a $i$-a este $1$ dacă și numai dacă $d(i, j) < d_0$, altfel este $0$.\n\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 1 \\ 000$;\n* Pe pozițiile $(1, 1)$ și $(N, M)$ se vor afla valori $0$.\n* Se garantează că există un drum în matricea inițială între pozițiile $(1, 1)$ și $(N, M)$.\n\n\n| # | Punctaj | Restricții          |\n| - | ------- | ------------------- |\n| 1 | 10      | $1 \\leq N, M \\leq 50$, $d_0 = N + M - 1$ |\n| 2 | 30      | $1 \\leq N, M \\leq 50$      |\n| 3 | 60      | Fără restricții suplimentare.      |",
    "header": {
      "problem_id": 938,
      "problem_name": "Labirint",
      "tags": "[Grid, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "labirint.in",
      "output_filename": "labirint.out",
      "multiple_solutions": false,
      "original_source": "OJI 2021 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "labirint.in",
      "output": "labirint.out"
    },
    "consoleInteraction": false
  }
}