---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def justify_text(words, max_width):
    if not words:
        return ""
    line = words[0]
    for i in range(1, len(words)):
        if len(line) + len(words[i]) + 1 <= max_width:
            line += ' ' + words[i]
        else:
            spaces_to_add = max_width - len(line)
            space_slots = line.count(' ')
            if space_slots == 0 or i == len(words):  # Single word or last line
                line += ' ' * spaces_to_add
            else:
                extra_spaces = spaces_to_add // space_slots
                extra_in_first_slots = spaces_to_add % space_slots
                line_parts = line.split(' ')
                for j in range(extra_in_first_slots):  # Add extra spaces in the first slots
                    line_parts[j] += ' '
                line = (' ' * extra_spaces).join(line_parts)
            yield line
            line = words[i]
    yield line  # Last line or single word

with open('text.in', 'r') as fin:
    max_width = int(fin.readline())
    text = fin.read()

paragraphs = text.split('\n')
with open('text.out', 'w') as fout:
    for paragraph in paragraphs:
        words = paragraph.split()
        for justified_line in justify_text(words, max_width):
            fout.write(justified_line + '\n')
```

This code reads the maximum line width from `text.in`, processes the paragraphs, and writes the justified text into `text.out`. It justifies each paragraph according to the specifications, ensuring that spaces are distributed as uniformly as possible.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```
Vasile  are  multe
bomboane bune.
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The primary issue in the provided implementation lies in the logic for adding extra spaces to the line. The `justify_text` function is not correctly distributing the additional spaces at the beginning of the line. This caused the output to distribute spaces uniformly from left to right across all spaces rather than prioritizing the beginning of the line.

Here's the corrected solution:

```python
def distribute_spaces(words, max_width):
    if len(words) == 1:
        return words[0] + ' ' * (max_width - len(words[0]))
    total_spaces = max_width - sum(len(word) for word in words)
    spaces_between_words, extra = divmod(total_spaces, len(words) - 1)
    for i in range(extra):
        words[i] += ' '
    return (' ' * spaces_between_words).join(words)

with open('text.in', 'r') as fin:
    max_width = int(fin.readline().strip())
    lines = fin.readlines()

with open('text.out', 'w') as fout:
    for paragraph in lines:
        if paragraph.strip() == '':  # empty line
            fout.write('\n')
            continue
        words = paragraph.split()
        line_words = []
        current_length = 0
        for word in words:
            if current_length + len(word) + len(line_words) <= max_width:  # +1 for space
                line_words.append(word)
                current_length += len(word)
            else:
                fout.write(distribute_spaces(line_words, max_width) + '\n')
                line_words = [word]
                current_length = len(word)
        # Write last line of the paragraph (left-justified)
        fout.write(' '.join(line_words) + '\n')
```

This code defines a `distribute_spaces` function that correctly distributes spaces between words, prioritizing the beginning of the line. The program reads from `text.in`, processes each paragraph to justify the text, and writes the result to `text.out`. The last line of each paragraph is left-justified, as per the requirement.
