---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def justify_text(words, max_width):
    if not words:
        return [""]
    lines = []
    index = 0
    while index < len(words):
        # Start line with the first word.
        count = len(words[index])
        last = index + 1
        # Add words until we reach the max width.
        while last < len(words) and count + len(words[last]) + (last - index) <= max_width:
            count += len(words[last])
            last += 1
        # Determine the number of spaces needed.
        line = ""
        spaces_to_insert = max_width - count
        if last == len(words) or last == index + 1:
            # Last line or single word in a line.
            for i in range(index, last):
                line += words[i] + ' '
            line = line.rstrip()
            line += ' ' * (max_width - len(line))
        else:
            # Middle of text; distribute spaces evenly.
            spaces_between_words = spaces_to_insert // (last - index - 1)
            extra_spaces = spaces_to_insert % (last - index - 1)
            for i in range(index, last - 1):
                line += words[i] + ' ' * (spaces_between_words + (i - index < extra_spaces))
            line += words[last - 1]
        lines.append(line)
        index = last
    return lines

def read_and_justify(file_in, file_out, max_width):
    with open(file_in, 'r') as fin:
        max_width = int(fin.readline())
        words = []
        paragraphs = []
        for line in fin:
            if line == '\n':  # Empty line denoting new paragraph.
                paragraphs.append(words)
                words = []
            else:
                words.extend(line.strip().split())
        paragraphs.append(words)  # Add last paragraph.
    
    with open(file_out, 'w') as fout:
        for words in paragraphs:
            justified = justify_text(words, max_width)
            for line in justified:
                fout.write(line + '\n')
            if words:  # Write paragraph separation.
                fout.write('\n')

# Invoke the function with the desired file paths and max_width.
read_and_justify('text.in', 'text.out', 20)
```

This solution defines a function `justify_text` to justify a list of words to a certain width, and then a function `read_and_justify` that reads the input file, processes the input to separate words and paragraphs, justifies the text, and writes the output to the output file.

Please note that to use this code, the `max_width` value should be set according to the input file's first line, or the code could be modified to read the `max_width` from the file as well.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous implementation comes down to an incorrect handling of paragraphs. Each paragraph should be treated independently, and a new line should be added only after a paragraph is finished, not when a single line ends. This error caused the lines to not break correctly between paragraphs. I will correct the implementation by processing one paragraph at a time, adding an extra line break at the end of each paragraph, except the last one.

Here's the corrected version, which reads the `max_width` from the file as well:

```python
def justify_paragraph(paragraph, max_width):
    lines = []
    current_line = []
    current_length = 0

    for word in paragraph:
        if current_length + len(current_line) + len(word) > max_width:
            # Distribute spaces and form a line
            spaces_needed = max_width - current_length
            gap_count = len(current_line) - 1
            if gap_count > 0:
                even_spaces = spaces_needed // gap_count
                extra_spaces = spaces_needed % gap_count
                line = ""
                for i, w in enumerate(current_line):
                    line += w
                    if i < gap_count:
                        line += ' ' * (even_spaces + (1 if i < extra_spaces else 0))
            else:
                line = current_line[0] + ' ' * spaces_needed
            lines.append(line)

            current_line = [word]
            current_length = len(word)
        else:
            current_line.append(word)
            current_length += len(word)

    # Append the last line of the paragraph
    lines.append(' '.join(current_line).ljust(max_width))

    return lines

def read_and_justify(input_file, output_file):
    with open(input_file, 'r') as fin:
        max_width = int(fin.readline())
        paragraphs = fin.read().split('\n\n')  # Split paragraphs by double newline

    justified_text = []

    for paragraph in paragraphs:
        words = paragraph.split()
        justified_text.extend(justify_paragraph(words, max_width))
        justified_text.append('')  # Paragraph separator

    # Remove the last empty line added as paragraph separator
    if justified_text[-1] == '':
        justified_text.pop()

    with open(output_file, 'w') as fout:
        for line in justified_text:
            fout.write(line + '\n')

# Invoke the function with the desired file paths.
read_and_justify('text.in', 'text.out')
```

This solution reads the maximum width from the first line of the input file. It then processes each paragraph separately, justifying the text according to the requirements. After justifying each paragraph, it adds an extra line break as a separator between paragraphs, except after the last paragraph. This should provide the correct output as per the expected results.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Ana are mere.
Ion are multe pere galbene?
```
Expected output:
```
Ana are mere.
Ion  are  multe pere
galbene?
```
Found output:
```
Ana  are  mere.  Ion
are    multe    pere
galbene?
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found result is due to the incorrect handling of paragraphs. The implementation incorrectly concatenated the last line of the first paragraph with the first line of the second paragraph. Each paragraph should be justified independently, and there should be no merging of lines between paragraphs.

Let's correct the solution by ensuring that paragraphs are processed separately, preserving paragraph boundaries, and that the justification does not carry over from one paragraph to the next:

```python
def justify_text(words, max_width):
    line = words[0]
    for i in range(1, len(words)):
        if len(line) + len(words[i]) + 1 > max_width:
            yield line
            line = words[i]
        else:
            spaces_needed = max_width - len(line) - len(words[i])
            spaces_to_insert = spaces_needed // (i - line.count(' '))
            extra_spaces = spaces_needed % (i - line.count(' '))
            
            # Add the extra spaces to the leftmost gaps first
            line_splits = line.split(' ')
            line = (' ' * (spaces_to_insert + 1)).join(line_splits[:extra_spaces + 1])
            if extra_spaces + 1 < len(line_splits):
                line += (' ' * spaces_to_insert).join(line_splits[extra_spaces + 1:])
                
            line += ' ' + words[i]
    yield line.ljust(max_width)

def process_paragraphs(input_file, output_file, max_width):
    with open(input_file, 'r') as fin:
        paragraphs = fin.read().strip().split('\n\n')

    with open(output_file, 'w') as fout:
        for paragraph_index, paragraph in enumerate(paragraphs):
            words = paragraph.split()
            justified_lines = list(justify_text(words, max_width))
            for line_index, line in enumerate(justified_lines):
                fout.write(line)
                if line_index < len(justified_lines) - 1:
                    fout.write('\n')
            if paragraph_index < len(paragraphs) - 1:
                fout.write('\n\n')

def main():
    with open('text.in') as f:
        max_width = int(f.readline().strip())
    process_paragraphs('text.in', 'text.out', max_width)

main()
```

This corrected solution ensures that each paragraph is processed independently. It uses a generator function `justify_text` to yield justified lines for a single paragraph, respecting the maximum page width. Then, the `process_paragraphs` function writes the justified lines to the output file, preserving paragraph breaks, and ensuring that space distribution starts anew for each paragraph. The `main` function is a wrapper to read the maximum width and invoke the justification on the input file.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```
20Vasile  are multe
bomboane bune.
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
