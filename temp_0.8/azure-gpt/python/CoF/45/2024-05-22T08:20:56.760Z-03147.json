{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 4,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/45/2024-05-22T08:20:56.760Z-03147.log",
  "attemptStart": 1716366056.76,
  "attemptEnd": 1716366209.01,
  "attemptDuration": 152.25,
  "code": "MOD = 30011\n\ndef dfs(node, graph, dp, K):\n    # Initialize the current node's dp array with 1's up to K\n    dp[node] = [1] * (K + 1)\n    \n    for child in graph[node]:\n        dfs(child, graph, dp, K)\n        \n        # Calculate prefix sums for child's dp array\n        prefix_sums = [0] * (K + 2)\n        for i in range(1, K + 2):\n            prefix_sums[i] = (prefix_sums[i - 1] + dp[child][i - 1]) % MOD\n        \n        # Update the current node's dp array\n        for carrots in range(K, 0, -1):\n            dp[node][carrots] = (dp[node][carrots] * (prefix_sums[carrots] - prefix_sums[1] + MOD)) % MOD\n\n# Read the input data from file\nwith open('iepuri.in', 'r') as file:\n    N, K = map(int, file.readline().split())\n    graph = [[] for _ in range(N + 1)]\n    for _ in range(1, N):\n        a, b = map(int, file.readline().split())\n        graph[a].append(b)\n\n# Find the root node (Rilă Iepurilă) by identifying the node with no parents\nroot = 1  # Assuming the root is 1 if not provided\nparents = [True] + [False] * N\nfor children in graph[1:]:\n    for child in children:\n        parents[child] = True\nroot = parents.index(False)\n\n# Initialize the dp array\ndp = [[0] * (K + 1) for _ in range(N + 1)]\n\n# Perform DFS and compute the dp values\ndfs(root, graph, dp, K)\n\n# Write the result to the output file\nwith open('iepuri.out', 'w') as file:\n    # The result is the sum of ways to distribute 1 to K carrots to the root rabbit\n    result = sum(dp[root][1:]) % MOD\n    file.write(f\"{result}\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4356,
  "metadata": {
    "id": 45,
    "examples": [
      {
        "in": "9 4\n7 2\n7 3\n7 4\n3 5\n3 6\n5 8\n5 9\n6 1",
        "out": "9",
        "explainer": ""
      }
    ],
    "body": "Un gospodar are $N$ iepuri (pe care i-a numerotat de la $1$ la $N$) şi foarte mulţi morcovi. Ce e mai deosebit în această gospodărie este că iepurii sunt organizaţi ierarhic, în funcţie de vârstă, autoritate şi nevoile nutriţionale. Astfel, fiecare iepure are exact un şef direct (exceptându-l pe Rilă Iepurilă, care este şeful cel mare, şeful tuturor iepurilor). Orice iepure poate avea 0, 1 sau mai mulţi subordonaţi direcţi. Orice iepure-şef va mânca cel puţin un morcov mai puţin decât fiecare dintre subordonaţii săi direcţi.\n\nGospodarul nu se poate hotărî câţi morcovi să dea fiecărui iepure şi ar vrea să ştie în câte moduri poate împărţi morcovi la iepuri ştiind că fiecare iepure poate să mănânce minim un morcov şi maxim $K$ morcovi.\n\n# Cerinţă\nScrieţi un program care calculează numărul de posibilităţi modulo $30 \\ 011$ de a împărţi morcovi la cei $N$ iepuri ştiind că orice iepure poate mânca între $1$ şi $K$ morcovi şi trebuie să mănânce cu cel puţin un morcov mai puţin decât fiecare dintre iepurii care îi sunt subordonaţi direcţi. \n\n# Date de intrare\nFişierul de intrare `iepuri.in` conţine: \n- pe prima linie două numere naturale $N$ şi $K$, separate printr-un spaţiu, reprezentând numărul de iepuri, respectiv numărul maxim de morcovi ce pot fi mâncaţi de un iepure.\n- pe fiecare din următoarele $N-1$ linii se află câte două numere naturale distincte $a$ şi $b$, cuprinse între $1$ şi $N$, separate printr-un spaţiu, cu semnificaţia că iepurele $a$ este şeful direct al iepurelui $b$.\n\n# Date de ieşire\nFişierul  de ieşiere `iepuri.out` va conţine numărul de moduri de a împărţi morcovii conform condiţiilor specificate în enunţ, modulo $30 \\ 011$.\n\n# Restricţii şi precizări\n* $1 ≤ N, K ≤ 100$\n* Numărul ce trebuie scris în fişierul de ieşire va fi afişat modulo $30 \\ 011$.",
    "header": {
      "problem_id": 45,
      "problem_name": "iepuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.02,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "iepuri.in",
      "output_filename": "iepuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2008 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "iepuri.in",
      "output": "iepuri.out"
    },
    "consoleInteraction": false
  }
}