---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# pelican.py
def execute_command(positions, command, N):
    command_type, value = command.split()
    value = int(value)
    
    if command_type == 'A':
        for i, (x, y, d) in enumerate(positions):
            if d == 1:
                positions[i] = (x - value) % N, y, d
            elif d == 2:
                positions[i] = x, (y + value) % N, d
            elif d == 3:
                positions[i] = (x + value) % N, y, d
            elif d == 4:
                positions[i] = x, (y - value) % N, d
    elif command_type == 'R':
        for i, (x, y, d) in enumerate(positions):
            positions[i] = x, y, (d + value - 1) % 4 + 1
    elif command_type == 'Z':
        positions.append((value // N, value % N, positions.pop()[2]))
   
def main():
    with open('pelican.in', 'r') as fin:
        N, P, K = map(int, fin.readline().split())
        positions = [tuple(map(int, fin.readline().split())) for _ in range(P)]
        commands = [fin.readline().strip() for _ in range(K)]
    
    for command in commands:
        execute_command(positions, command, N)
    
    with open('pelican.out', 'w') as fout:
        for x, y, _ in positions:
            fout.write(f'{x} {y}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# pelican_efficient.py
def process_commands(N, P, K, ducks, commands):
    # Dictionary for direction moves
    dir_moves = {1: (-1, 0), 2: (0, 1), 3: (1, 0), 4: (0, -1)}
    
    for command in commands:
        if command[0] == 'A':
            for i in range(P):
                dx, dy = dir_moves[ducks[i][2]]
                ducks[i] = ((ducks[i][0] + dx * command[1]) % N, (ducks[i][1] + dy * command[1]) % N, ducks[i][2])
        elif command[0] == 'R':
            for i in range(P):
                ducks[i] = (ducks[i][0], ducks[i][1], (ducks[i][2] + command[1] - 1) % 4 + 1)
        elif command[0] == 'Z':
            for i in range(P):
                ducks[i] = (command[1] // N, command[1] % N, ducks[i][2])
    return ducks

def read_input(filename):
    with open(filename, 'r') as file:
        N, P, K = map(int, file.readline().split())
        ducks = [tuple(map(int, file.readline().split())) for _ in range(P)]
        commands = []
        for _ in range(K):
            command = file.readline().split()
            commands.append((command[0], int(command[1])))
    return N, P, K, ducks, commands

def write_output(filename, ducks):
    with open(filename, 'w') as file:
        for duck in ducks:
            file.write(f'{duck[0]} {duck[1]}\n')

def main():
    N, P, K, ducks, commands = read_input('pelican.in')
    ducks = process_commands(N, P, K, ducks, commands)
    write_output('pelican.out', ducks)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def move_ducks(ducks, N):
    for i in range(len(ducks)):
        x, y, d = ducks[i]
        if d == 1: x = (x - 1) % N
        elif d == 2: y = (y + 1) % N
        elif d == 3: x = (x + 1) % N
        elif d == 4: y = (y - 1) % N
        ducks[i] = (x, y, d)

def rotate_ducks(ducks, degree):
    for i in range(len(ducks)):
        x, y, d = ducks[i]
        d = ((d - 1 + (degree // 90)) % 4) + 1
        ducks[i] = (x, y, d)

def teleport_ducks(ducks, positions, N):
    for i in range(len(ducks)):
        position = positions[i]
        ducks[i] = (position // N, position % N, ducks[i][2])

def execute_commands(commands, ducks, N):
    for command in commands:
        if command[0] == 'A':
            for _ in range(command[1]):
                move_ducks(ducks, N)
        elif command[0] == 'R':
            rotate_ducks(ducks, command[1] * 90)
        elif command[0] == 'Z':
            teleport_ducks(ducks, [command[1]] * len(ducks), N)

def parse_command(command):
    parts = command.split()
    return (parts[0], int(parts[1]))

# Read input data
with open('pelican.in', 'r') as file:
    N, P, K = map(int, file.readline().split())
    ducks = [tuple(map(int, file.readline().split())) for _ in range(P)]
    commands = [parse_command(file.readline().strip()) for _ in range(K)]

# Process commands
execute_commands(commands, ducks, N)

# Write output data
with open('pelican.out', 'w') as file:
    for x, y, _ in ducks:
        file.write(f'{x} {y}\n')
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def execute_commands(N, positions, commands):
    for cmd, val in commands:
        if cmd == "A":  # Advance
            for i, (x, y, d) in enumerate(positions):
                if d == 1:  # North
                    x = (x - val) % N
                elif d == 2:  # East
                    y = (y + val) % N
                elif d == 3:  # South
                    x = (x + val) % N
                elif d == 4:  # West
                    y = (y - val) % N
                positions[i] = (x, y, d)
        elif cmd == "R":  # Rotate
            for i, (x, y, d) in enumerate(positions):
                d = (d - 1 + val) % 4 + 1
                positions[i] = (x, y, d)
        elif cmd == "Z":  # Fly
            for i in range(len(positions)):
                positions[i] = (val // N, val % N, positions[i][2])

def main():
    with open('pelican.in', 'r') as f:
        N, P, K = map(int, f.readline().split())
        positions = [tuple(map(int, f.readline().split())) for _ in range(P)]
        commands = [tuple(f.readline().split()) for _ in range(K)]
        commands = [(cmd[0], int(cmd[1])) for cmd in commands]

    execute_commands(N, positions, commands)

    with open('pelican.out', 'w') as f:
        for x, y, _ in positions:
            f.write(f'{x} {y}\n')

main()
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def execute_command(position, command, N):
    x, y, d = position
    cmd_type, cmd_value = command
    cmd_value = int(cmd_value)
    
    if cmd_type == 'A':
        if d == 1:  # North
            x = (x - cmd_value) % N
        elif d == 2:  # East
            y = (y + cmd_value) % N
        elif d == 3:  # South
            x = (x + cmd_value) % N
        elif d == 4:  # West
            y = (y - cmd_value) % N

    elif cmd_type == 'R':
        d = (d + cmd_value - 1) % 4 + 1

    elif cmd_type == 'Z':
        x, y = cmd_value // N, cmd_value % N

    return x, y, d

def main():
    with open('pelican.in', 'r') as fin:
        N, P, K = map(int, fin.readline().split())
        positions = [tuple(map(int, fin.readline().split())) for _ in range(P)]
        commands = [fin.readline().split() for _ in range(K)]

    for command in commands:
        for i in range(P):
            positions[i] = execute_command(positions[i], command, N)

    with open('pelican.out', 'w') as fout:
        for x, y, d in positions:
            fout.write(f'{x} {y}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Define the movement function
def move(pos, direction, steps, N):
    if direction == 1:  # North
        return (pos[0] - steps) % N, pos[1]
    elif direction == 3:  # South
        return (pos[0] + steps) % N, pos[1]
    elif direction == 2:  # East
        return pos[0], (pos[1] + steps) % N
    elif direction == 4:  # West
        return pos[0], (pos[1] - steps) % N

# Define the rotation function
def rotate(direction, rotations):
    return (direction - 1 + rotations) % 4 + 1

# Define the main function
def main():
    # Read from pelican.in
    with open('pelican.in', 'r') as file:
        N, P, K = map(int, file.readline().split())
        ducks = [(tuple(map(int, file.readline().split()))) for _ in range(P)]
        commands = [file.readline().strip().split() for _ in range(K)]

    # Execute each command
    for command in commands:
        if command[0] == 'A' or command[0] == 'R':
            value = int(command[1])
            for i in range(P):
                if command[0] == 'A':
                    ducks[i] = move(ducks[i][:2], ducks[i][2], value, N) + (ducks[i][2],)
                elif command[0] == 'R':
                    ducks[i] = (ducks[i][0], ducks[i][1], rotate(ducks[i][2], value))
        elif command[0] == 'Z':
            value = int(command[1])
            new_position = (value // N, value % N)
            for i in range(P):
                ducks[i] = new_position + (ducks[i][2],)

    # Write to pelican.out
    with open('pelican.out', 'w') as file:
        for duck in ducks:
            file.write(f'{duck[0]} {duck[1]}\n')

# Run the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# First, define a function to execute the commands
def execute_commands(ducks, commands, N):
    for command in commands:
        action, value = command[0], int(command[1])
        if action == 'A':
            for i in range(len(ducks)):
                x, y, d = ducks[i]
                if d == 1: # North
                    ducks[i] = (x - value) % N, y, d
                elif d == 2: # East
                    ducks[i] = x, (y + value) % N, d
                elif d == 3: # South
                    ducks[i] = (x + value) % N, y, d
                elif d == 4: # West
                    ducks[i] = x, (y - value) % N, d
        elif action == 'R':
            for i in range(len(ducks)):
                x, y, d = ducks[i]
                ducks[i] = x, y, (d + value - 1) % 4 + 1
        elif action == 'Z':
            for i in range(len(ducks)):
                ducks[i] = value // N, value % N, ducks[i][2]

# Read the input data
with open('pelican.in', 'r') as f:
    N, P, K = map(int, f.readline().split())
    ducks = [tuple(map(int, f.readline().split())) for _ in range(P)]
    commands = [f.readline().split() for _ in range(K)]

# Execute the commands
execute_commands(ducks, commands, N)

# Write the output data
with open('pelican.out', 'w') as f:
    for duck in ducks:
        f.write(f"{duck[0]} {duck[1]}\n")
```
```
