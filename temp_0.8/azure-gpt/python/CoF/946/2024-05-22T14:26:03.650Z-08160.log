---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(file_path):
    with open(file_path, 'r') as file:
        data = file.readlines()
    return data

def write_output(file_path, data):
    with open(file_path, 'w') as file:
        file.writelines('\n'.join(data))

def process_commands(N, ducks, commands):
    for command in commands:
        cmd_type, cmd_value = command[0], int(command[1])
        for duck in ducks:
            if cmd_type == 'A':
                if duck[2] == 1:
                    duck[0] = (duck[0] - cmd_value) % N
                elif duck[2] == 2:
                    duck[1] = (duck[1] + cmd_value) % N
                elif duck[2] == 3:
                    duck[0] = (duck[0] + cmd_value) % N
                elif duck[2] == 4:
                    duck[1] = (duck[1] - cmd_value) % N
            elif cmd_type == 'R':
                duck[2] = (duck[2] + cmd_value - 1) % 4 + 1
            elif cmd_type == 'Z':
                duck[0], duck[1] = cmd_value // N, cmd_value % N
    return ducks

def main():
    data = read_input('pelican.in')
    N, P, K = map(int, data[0].split())
    ducks = [list(map(int, line.split())) for line in data[1:P+1]]
    commands = [line.split() for line in data[P+1:P+1+K]]
    final_positions = process_commands(N, ducks, commands)
    final_positions_str = [' '.join(map(str, [pos[0], pos[1]])) for pos in final_positions]
    write_output('pelican.out', final_positions_str)

if __name__ == "__main__":
    main()
```
```
This code defines functions to read and write from files, process the commands given to the ducks, and the main logic to tie everything together. It handles the commands for advance 'A', rotate 'R', and teleport 'Z' properly according to the problem statement.

To execute the code, save it in a `.py` file and make sure that the `pelican.in` file is in the same directory as the script. After running the script, the results will be written to the `pelican.out` file.
---------- user ----------


Expected program to write result to `pelican.out` and read from `pelican.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Define a function to process each command and move the ducks accordingly.
def move_duck(N, position, direction, cmd_type, cmd_value):
    if cmd_type == 'A':  # Advance
        if direction == 1:
            position[0] = (position[0] - cmd_value) % N
        elif direction == 2:
            position[1] = (position[1] + cmd_value) % N
        elif direction == 3:
            position[0] = (position[0] + cmd_value) % N
        elif direction == 4:
            position[1] = (position[1] - cmd_value) % N
    elif cmd_type == 'R':  # Rotate
        direction = (direction + cmd_value - 1) % 4 + 1
    elif cmd_type == 'Z':  # Teleport
        position[0], position[1] = cmd_value // N, cmd_value % N
    return position, direction

# Read the input data from 'pelican.in'.
with open('pelican.in', 'r') as file:
    N, P, K = map(int, file.readline().split())
    ducks = [list(map(int, file.readline().split())) for _ in range(P)]
    commands = [file.readline().split() for _ in range(K)]

# Process each command for all ducks.
for cmd_type, cmd_value in commands:
    cmd_value = int(cmd_value)
    for i in range(P):
        ducks[i][:2], ducks[i][2] = move_duck(N, ducks[i][:2], ducks[i][2], cmd_type, cmd_value)

# Write the final positions of the ducks to 'pelican.out'.
with open('pelican.out', 'w') as file:
    file.writelines(' '.join(map(str, duck[:2])) + '\n' for duck in ducks)
```
This code reads the input file `pelican.in`, applies all the commands to update the positions and orientations of the ducks, and writes the final positions to the output file `pelican.out`. It is optimized to handle a large number of commands and ducks by using efficient list operations and minimizing the number of write operations to the file.
