{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/699/2024-05-22T09:25:33.898Z-02422.log",
  "attemptStart": 1716369933.898,
  "attemptEnd": 1716369963.838,
  "attemptDuration": 29.94000005722046,
  "code": "from collections import defaultdict\n\ndef read_data(filename):\n    with open(filename, 'r') as file:\n        p = int(file.readline().strip())\n        moves = [list(map(int, file.readline().strip().split())) for _ in range(p)]\n    return p, moves\n\ndef write_result(filename, result):\n    with open(filename, 'w') as file:\n        file.write(str(result))\n\ndef calculate_min_moves(p, moves):\n    # Create dictionaries to track initial and final positions.\n    final_to_initial = {tuple(move[2:4]): tuple(move[0:2]) for move in moves}\n    initial_to_final = {tuple(move[0:2]): tuple(move[2:4]) for move in moves}\n\n    # Find cycles and chains to calculate the number of moves.\n    visited = set()\n    moves_count = 0\n\n    for final_pos in final_to_initial:\n        if final_pos not in visited:\n            current = final_pos\n            chain_length = 0\n            while current in final_to_initial and current not in visited:\n                visited.add(current)\n                current = final_to_initial[current]\n                chain_length += 1\n\n            # If we have made a full cycle, it takes chain_length moves,\n            # otherwise it takes chain_length + 1 moves (for chains).\n            if current in initial_to_final and initial_to_final[current] == final_pos:\n                moves_count += chain_length  # Cycle\n            else:\n                moves_count += chain_length + 1  # Chain\n\n    return moves_count\n\ndef main():\n    p, moves = read_data('poarta.in')\n    result = calculate_min_moves(p, moves)\n    write_result('poarta.out', result)\n\n# Entry point\nif __name__ == \"__main__\":\n    main()\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1805,
  "metadata": {
    "id": 699,
    "examples": [
      {
        "in": "3\n1 2 3 4\n6 5 3 9\n3 4 1 2",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.\n\n# Cerință\n\nDându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.\n\n# Date de intrare\nFișierul de intrare `poarta.in` are următorul format:\n- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.\n- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).\n\n# Date de ieşire\nPe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.\n\n# Restricții și precizări\n- $1 < p < 5\\ 000$\n- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.\n- **Atenție la cazurile când poziția inițială este identică cu cea finală!**\n- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.\n- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.",
    "header": {
      "problem_id": 699,
      "problem_name": "poarta",
      "tags": "[Graphs, Grid]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "poarta.in",
      "output_filename": "poarta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "poarta.in",
      "output": "poarta.out"
    },
    "consoleInteraction": false
  }
}