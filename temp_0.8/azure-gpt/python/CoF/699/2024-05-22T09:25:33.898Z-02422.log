---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `poarta.in` and write to `poarta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.

# Cerință

Dându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.

# Date de intrare
Fișierul de intrare `poarta.in` are următorul format:
- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.
- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).

# Date de ieşire
Pe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.

# Restricții și precizări
- $1 < p < 5\ 000$
- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.
- **Atenție la cazurile când poziția inițială este identică cu cea finală!**
- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.
- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.

---

Example:
`poarta.in`
```
3
1 2 3 4
6 5 3 9
3 4 1 2
```

`poarta.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def read_data(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    p = int(lines[0].strip())
    moves = []
    for i in range(1, p+1):
        x1, y1, x2, y2 = map(int, lines[i].strip().split())
        moves.append(((x1, y1), (x2, y2)))
    return p, moves

def write_result(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def calculate_min_moves(p, moves):
    count = 0
    occupied = {}
    for pos in moves:
        if pos[0] == pos[1]:
            continue
        if pos[1] in occupied:
            occupied[occupied[pos[1]]], occupied[pos[0]] = pos[0], None
        else:
            occupied[pos[0]] = pos[1]
    for pos in moves:
        if pos[0] != pos[1] and pos[0] not in occupied:
            count += 1
            current = pos[1]
            while current in occupied:
                count += 1
                current = occupied[current]
    return count

def main():
    p, moves = read_data('poarta.in')
    result = calculate_min_moves(p, moves)
    write_result('poarta.out', result)

if __name__ == "__main__":
    main()
```
Please note that the code above should be saved in a `.py` file and then run in an environment where the `poarta.in` file is present. The output will be written to the `poarta.out` file as per the specifications.
---------- user ----------


Program result did not match expected result.
Input data:
```
3
1 2 3 4
6 5 3 9
3 4 1 2
```
Expected output:
```
4
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous implementation does not handle the problem correctly. In the given task, for each crew, we want to determine the minimum movements to get from their initial position to the final position. However, since all crews move at the same time, we need to consider the scenario where a crew moves to a position that another crew is supposed to move to—creating a sequence of movements to handle.

Here's the corrected solution:

```python
from collections import defaultdict

def read_data(filename):
    with open(filename, 'r') as file:
        p = int(file.readline().strip())
        moves = [list(map(int, file.readline().strip().split())) for _ in range(p)]
    return p, moves

def write_result(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def calculate_min_moves(p, moves):
    # Create dictionaries to track initial and final positions.
    final_to_initial = {tuple(move[2:4]): tuple(move[0:2]) for move in moves}
    initial_to_final = {tuple(move[0:2]): tuple(move[2:4]) for move in moves}

    # Find cycles and chains to calculate the number of moves.
    visited = set()
    moves_count = 0

    for final_pos in final_to_initial:
        if final_pos not in visited:
            current = final_pos
            chain_length = 0
            while current in final_to_initial and current not in visited:
                visited.add(current)
                current = final_to_initial[current]
                chain_length += 1

            # If we have made a full cycle, it takes chain_length moves,
            # otherwise it takes chain_length + 1 moves (for chains).
            if current in initial_to_final and initial_to_final[current] == final_pos:
                moves_count += chain_length  # Cycle
            else:
                moves_count += chain_length + 1  # Chain

    return moves_count

def main():
    p, moves = read_data('poarta.in')
    result = calculate_min_moves(p, moves)
    write_result('poarta.out', result)

# Entry point
if __name__ == "__main__":
    main()
```

This solution reads the data from the input file, then calculates the number of moves using a dictionary to find cycles and chains. It then writes the result to the output file. A cycle does not need an additional move to complete, whereas a chain requires an additional move because it does not end on a starting position of any crew.
