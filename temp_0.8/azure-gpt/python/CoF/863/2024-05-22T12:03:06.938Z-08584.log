---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `panda.in` and write to `panda.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O rezervație de urși panda, privită de sus, are formă dreptunghiulară și este compusă din $n$ rânduri identice, iar pe fiecare rând sunt $m$ țarcuri identice cu baza pătrată. Țarcurile sunt îngrădite și sunt prevăzute cu uși către toate cele $4$ țarcuri vecine. Ușile sunt prevăzute cu câte un cod de acces, ca atare acestea se închid și se deschid automat. Prin acest sistem, unele ţarcuri sunt accesibile ursuleților, iar altele le sunt interzise acestora. În $T$ țarcuri se găsește mâncare pentru ursuleți.

Ursuleții din rezervație poartă câte un microcip care le deschide automat ușile țarcurilor unde pot intra și închide automat uşile țarcurilor interzise. Un țarc este **accesibil** ursulețului dacă ultimele $S$ cifre ale reprezentărilor binare ale codului țarcului și ale codului $k$ de pe microcip sunt complementare. (Exemplu: pentru $S=8$, `11101011` și `00010100` sunt complementare).

Într-un țarc este un ursuleț căruia i s-a făcut foame. Ursulețul se deplasează doar paralel cu laturile dreptunghiului. Trecerea dintr-un țarc în altul vecin cu el se face într-o secundă.

# Cerinţă

Cunoscând $n$ și $m$ dimensiunile rezervației, codurile de acces de la fiecare dintre cele $n \cdot m$ țarcuri, coordonatele celor $T$ țarcuri cu mâncare, coordonatele țarcului $L$ și $C$ unde se află inițial  ursulețul, codul $k$ al microcipului său și numărul $S$, determinați:

1. Numărul $X$ de țarcuri care îndeplinesc proprietatea că ultimele $S$ cifre din reprezentarea binară a codului lor sunt complementare cu ultimele $S$ cifre din reprezentarea binară a codului $k$ purtat de ursuleț, cu excepția țarcului în care se află acesta inițial. 
2. Numărul minim de secunde $Smin$ în care poate ajunge la un țarc cu mâncare precum și numărul de țarcuri cu mâncare $nt$ la care poate ajunge în acest timp minim.


# Date de intrare


Fişierul de intrare `panda.in` conţine:

- pe prima linie un număr natural $p$. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea  $2$ 
- pe a doua  linie trei numere naturale $n$, $m$ și $T$ separate prin câte un spațiu, cu semnificațiile din enunț
- pe linia a treia patru numere naturale nenule $L$, $C$, $k$ și $S$, separate prin câte un spațiu, cu semnificațiile din enunț
- pe următoarele $T$ linii câte două numere naturale reprezentând coordonatele țarcurilor cu mâncare
- pe următoarele $n$ linii câte $m$ numere naturale, separate prin câte un spațiu, reprezentând codurile de acces la ușile din cele $n \cdot m$ țarcuri ale rezervației.  


# Date de ieșire


Dacă valoarea lui $p$ este $1$, **se va rezolva numai punctul 1 din cerință**. 

În acest caz, în fişierul de ieşire `panda.out` se va scrie un singur număr natural $X$, reprezentând numărul total de țarcuri pe care le poate accesa ursulețul, cu excepția țarcului în care se află acesta inițial.

Dacă valoarea lui $p$ este $2$, **se va rezolva numai punctul 2 din cerință**. 

În acest caz, fişierul de ieşire `panda.out` va conține numerele naturale naturale $Smin$ și $nt$, în această ordine, separate printr-un spațiu. 


# Restricții și precizări

* $2 \leq n, m \leq 500$
* $1 \leq S \leq 8$
* $1 \leq T < n \cdot m$
* $0 \leq k < 10\ 000$
* $0 \leq$ valorile codurilor $< 10 \ 000$
* Pentru toate testele problemei există soluție, adică ursulețul poate ajunge la cel puțin unul dintre țarcurile cu mâncare.
* Mâncarea se poate găsi și în zone inaccesibile.
* Pentru rezolvarea corectă a primei cerinţe se acordă $20$ de puncte, iar pentru cerința a doua se acordă $80$ de puncte.
* Pentru $24\%$ dintre teste, se garantează  $m \leq 50$  și $n \leq 50$.
* Pentru $20\%$ dintre teste, se garantează  $S=1$.
* Pentru determinarea corectă a numărului $Smin$ se acordă $75\%$ din punctajul testului, iar pentru determinarea corectă a numărului $nt$ se acordă $25\%$ din punctajul testului.

---

Example:
`panda.in`
```
1
5 6 4
3 5 1 1
1 2 
5 1 
2 1
4 3
15 1278 3 1278 1278 1 
16 17 18 19 254 20
21 25 26 254 254 254
27 28 29 3 2 254
2 254 4 254 254 254
```

`panda.out`
```
19
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_data(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
        data = [list(map(int, line.rstrip().split())) for line in lines]
    return data


def write_output(file_path, result):
    with open(file_path, 'w') as file:
        if isinstance(result, tuple):
            file.write(f"{result[0]} {result[1]}")
        else:
            file.write(str(result))


def count_accessible_enclosures(n, m, enclosures, L, C, k, S):
    count = 0
    mask = (1 << S) - 1
    k_masked = k & mask
    complement = mask ^ k_masked
    for row in range(n):
        for col in range(m):
            if row == L - 1 and col == C - 1:
                continue
            if enclosures[row][col] & mask == complement:
                count += 1
    return count


def bfs_shortest_path(n, m, enclosures, food_locations, L, C, k, S):
    from collections import deque

    dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    mask = (1 << S) - 1
    k_masked = k & mask
    complement = mask ^ k_masked
    visited = [[False] * m for _ in range(n)]
    queue = deque()
    L -= 1
    C -= 1
    queue.appendleft((L, C, 0))
    visited[L][C] = True
    min_time = float('inf')
    food_count = 0

    while queue:
        x, y, time = queue.pop()
        if (x + 1, y + 1) in food_locations:
            if time < min_time:
                min_time = time
                food_count = 1
            elif time == min_time:
                food_count += 1
        for dx, dy in dirs:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and (enclosures[nx][ny] & mask == complement):
                visited[nx][ny] = True
                queue.appendleft((nx, ny, time + 1))

    return min_time, food_count


def main():
    data = read_data('panda.in')
    p, dimensions, food_data, start_data = data[0][0], data[1], data[2:2 + data[1][2]], data[2 + data[1][2]]
    n, m, T = dimensions
    L, C, k, S = start_data
    enclosures = data[3 + T:]
    food_locations = {(r, c) for r, c in food_data}

    result = 0
    if p == 1:
        result = count_accessible_enclosures(n, m, enclosures, L, C, k, S)
    elif p == 2:
        result = bfs_shortest_path(n, m, enclosures, food_locations, L, C, k, S)

    write_output('panda.out', result)


if __name__ == "__main__":
    main()
```
```
This Python code block represents a solution to the given programming challenge. It includes functions to read input from a file, write output to a file, count accessible enclosures, find the shortest path using BFS (Breadth-First Search), and the main logic that determines which part of the task to execute based on the input. It utilizes bitwise operations to check for enclosure accessibility and deque from collections for efficient BFS implementation.
---------- user ----------


Expected program to write result to `panda.out` and read from `panda.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def complement(last_s_bits, s):
    """Generate the complement of the last S bits of the given number."""
    mask = (1 << s) - 1  # Create a mask with S bits set to 1
    return last_s_bits ^ mask

def read_data(filename):
    """Read data from the input file."""
    with open(filename, 'r') as file:
        data = [list(map(int, line.split())) for line in file]
    return data

def write_data(filename, data):
    """Write data to the output file."""
    with open(filename, 'w') as file:
        if isinstance(data, tuple):
            file.write(f"{data[0]} {data[1]}")
        else:
            file.write(str(data))

def task1(n, m, enclosures, L, C, k, s_mask):
    """Solve task 1 of the problem."""
    k_complement = complement(k & s_mask, S)
    count = 0
    for i in range(n):
        for j in range(m):
            if (i + 1, j + 1) != (L, C) and (enclosures[i][j] & s_mask) == k_complement:
                count += 1
    return count

def task2(n, m, enclosures, food_locations, L, C, k, S):
    """Solve task 2 of the problem using BFS."""
    from collections import deque
    k_complement = complement(k & s_mask, S)
    visited = [[False] * m for _ in range(n)]
    queue = deque([(L - 1, C - 1, 0)])
    visited[L - 1][C - 1] = True
    min_time = float('inf')
    min_time_count = 0

    while queue:
        x, y, time = queue.popleft()
        if time > min_time:
            break
        if (x + 1, y + 1) in food_locations:
            min_time = time
            min_time_count += 1
            continue
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and (enclosures[nx][ny] & s_mask) == k_complement:
                visited[nx][ny] = True
                queue.append((nx, ny, time + 1))

    return min_time, min_time_count

# Read input data
data = read_data('panda.in')
p = data[0][0]
n, m, T = data[1]
L, C, k, S = data[2]
food_locations = set(tuple(row) for row in data[3:3 + T])
enclosures = data[3 + T:]
s_mask = (1 << S) - 1

# Solve the problem
result = None
if p == 1:
    result = task1(n, m, enclosures, L, C, k, s_mask)
else:
    result = task2(n, m, enclosures, food_locations, L, C, k, S)

# Write output data
write_data('panda.out', result)
```
