---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ozn.in` and write to `ozn.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O invazie de $N$ farfurii zburătoare (denumite uzual OZN) dă bătăi de cap autorităților. În fiecare astfel de OZN se află extratereștri care au ca misiune distrugerea planetei noastre. Radarul care a detectat invazia are un ecran similar cu planul XOY. Fiecare OZN este reprezentat pe ecran printr-un segment de dreaptă.

Pentru anihilarea OZN-urilor, autoritățile dispun de $K$ arme laser. Armele sunt poziționate pe sol (ilustrat pe ecranul radarului prin axa OX). Fiecare armă emite o rază laser, ilustrată pe ecran printr-o paralelă cu axa OY. Dacă o rază laser intersectează segmentul de pe ecranul radarului corespunzător unui OZN, raza va omorî toți extratereștrii aflați în OZN-ul respectiv.

Din păcate, în preajmă se află doar un militar specializat în arme laser, așa că autoritățile doresc să știe exact ce armă trebuie să folosească acesta pentru a distruge cât mai mulți extratereștri.

# Cerință

Ajutați autoritățile să determine numărul de extratereștri care pot fi anihilați cu fiecare armă din dotare.

# Date de intrare

Fișierul de intrare `ozn.in` conține pe prima linie două numere naturale separate prin spațiu $N \ K$ reprezentând numărul de OZN-uri și respectiv numărul de arme laser. Pe următoarele $N$ linii sunt descrise cele $N$ OZN-uri, câte unul pe linie. Un OZN este descris prin $5$ numere naturale separate prin câte un spațiu $x1 \ y1 \ x2 \ y2 \ nr$, reprezentând în ordine coordonatele capetelor segmentului corespunzător ($x1, y1$), ($x2, y2$), iar $nr$ – numărul de extratereștri din el. Pe ultima linie se găsesc $K$ numere naturale $a_1, a_2, a_3, \dots , a_K$, separate prin câte un spațiu, reprezentând coordonatele pe axa OX (abscisele) unde sunt amplasate armele laser.

# Date de ieșire

Fișierul de ieșire `ozn.out` va conține $K$ linii. Pe linia $i$ va fi scris numărul total de extratereștri care pot fi distruși cu arma $i$, considerând armele numerotate în ordinea în care acestea apar în fișierul de intrare.

# Restricții și precizări

* $1 \leq N \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq$ orice coordonată din fișierul de intrare $\leq 2 \ 000 \ 000$;
* $1 \leq nr \leq 100$, pentru orice OZN
* $x1 < x2$, pentru orice OZN
* Pe ecranul radarului segmentele ce descriu navele se pot intersecta.
* Dacă raza laser trece prin unul dintre capetele unui OZN atunci acesta este distrus.
* Pentru $50$ % dintre testele de intrare $1 \leq N \cdot K \leq 10 \ 000 \ 000$;

---

Example:
`ozn.in`
```
5 3
1 1 3 2 2
2 3 4 1 3
6 5 8 5 8
5 1 7 1 6
6 2 7 4 1
3 7 5
```

`ozn.out`
```
5
15
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from ozn.in
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = [tuple(map(int, line.split())) for line in file.readlines()[:-1]]
    lasers = list(map(int, file.readlines()[-1].split()))

# Initialize the result list with zeros
results = [0] * K

# Calculate the number of extraterrestrials destroyed by each laser
for ozn in ozn_data:
    x1, y1, x2, y2, count = ozn
    for i, laser_x in enumerate(lasers):
        if x1 <= laser_x <= x2:  # Check if laser intersects the OZN
            results[i] += count

# Write to ozn.out
with open('ozn.out', 'w') as file:
    for result in results:
        file.write(str(result) + '\n')
```

This code should read the input file `ozn.in`, perform the calculations, and write the results to the `ozn.out` file following the problem's requirements. Please remember to have the `ozn.in` file in the same directory as this script for it to work correctly.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 5, in <module>
    lasers = list(map(int, file.readlines()[-1].split()))
                           ~~~~~~~~~~~~~~~~^^^^
IndexError: list index out of range

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error in the original code is caused by attempting to read from the file again after already iterating over its lines, which leaves the file cursor at the end of the file, resulting in an empty list when `file.readlines()` is called. To fix this, we should split the input reading into two separate loops, one for reading the OZN data and the other for reading the laser positions.

Here's the corrected solution:

```python
# Read from ozn.in
with open('ozn.in', 'r') as file:
    N, K = map(int, file.readline().split())
    ozn_data = [tuple(map(int, file.readline().split())) for _ in range(N)]
    lasers = list(map(int, file.readline().split()))

# Initialize the result list with zeros
results = [0] * K

# Create a map to store the number of extraterrestrials for each laser position
laser_map = {laser: 0 for laser in lasers}

# Calculate the number of extraterrestrials destroyed by each laser
for x1, y1, x2, y2, count in ozn_data:
    for laser in lasers:
        if x1 <= laser <= x2 or x2 <= laser <= x1:  # Check if laser intersects the OZN
            laser_map[laser] += count

# Write to ozn.out
with open('ozn.out', 'w') as file:
    for laser in lasers:
        file.write(f"{laser_map[laser]}\n")
```

This code addresses the issue by ensuring that all lines from the input file are read in one pass. Then it processes the OZN data and writes the results to the output file. It keeps track of the aliens destroyed by each laser using a dictionary that maps each laser's position to the count of aliens destroyed.
