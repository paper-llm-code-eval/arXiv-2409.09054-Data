---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ozn.in` and write to `ozn.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O invazie de $N$ farfurii zburătoare (denumite uzual OZN) dă bătăi de cap autorităților. În fiecare astfel de OZN se află extratereștri care au ca misiune distrugerea planetei noastre. Radarul care a detectat invazia are un ecran similar cu planul XOY. Fiecare OZN este reprezentat pe ecran printr-un segment de dreaptă.

Pentru anihilarea OZN-urilor, autoritățile dispun de $K$ arme laser. Armele sunt poziționate pe sol (ilustrat pe ecranul radarului prin axa OX). Fiecare armă emite o rază laser, ilustrată pe ecran printr-o paralelă cu axa OY. Dacă o rază laser intersectează segmentul de pe ecranul radarului corespunzător unui OZN, raza va omorî toți extratereștrii aflați în OZN-ul respectiv.

Din păcate, în preajmă se află doar un militar specializat în arme laser, așa că autoritățile doresc să știe exact ce armă trebuie să folosească acesta pentru a distruge cât mai mulți extratereștri.

# Cerință

Ajutați autoritățile să determine numărul de extratereștri care pot fi anihilați cu fiecare armă din dotare.

# Date de intrare

Fișierul de intrare `ozn.in` conține pe prima linie două numere naturale separate prin spațiu $N \ K$ reprezentând numărul de OZN-uri și respectiv numărul de arme laser. Pe următoarele $N$ linii sunt descrise cele $N$ OZN-uri, câte unul pe linie. Un OZN este descris prin $5$ numere naturale separate prin câte un spațiu $x1 \ y1 \ x2 \ y2 \ nr$, reprezentând în ordine coordonatele capetelor segmentului corespunzător ($x1, y1$), ($x2, y2$), iar $nr$ – numărul de extratereștri din el. Pe ultima linie se găsesc $K$ numere naturale $a_1, a_2, a_3, \dots , a_K$, separate prin câte un spațiu, reprezentând coordonatele pe axa OX (abscisele) unde sunt amplasate armele laser.

# Date de ieșire

Fișierul de ieșire `ozn.out` va conține $K$ linii. Pe linia $i$ va fi scris numărul total de extratereștri care pot fi distruși cu arma $i$, considerând armele numerotate în ordinea în care acestea apar în fișierul de intrare.

# Restricții și precizări

* $1 \leq N \leq 20 \ 000$;
* $1 \leq K \leq 20 \ 000$;
* $1 \leq$ orice coordonată din fișierul de intrare $\leq 2 \ 000 \ 000$;
* $1 \leq nr \leq 100$, pentru orice OZN
* $x1 < x2$, pentru orice OZN
* Pe ecranul radarului segmentele ce descriu navele se pot intersecta.
* Dacă raza laser trece prin unul dintre capetele unui OZN atunci acesta este distrus.
* Pentru $50$ % dintre testele de intrare $1 \leq N \cdot K \leq 10 \ 000 \ 000$;

---

Example:
`ozn.in`
```
5 3
1 1 3 2 2
2 3 4 1 3
6 5 8 5 8
5 1 7 1 6
6 2 7 4 1
3 7 5
```

`ozn.out`
```
5
15
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_data(file_name):
    with open(file_name, 'r') as f:
        data = f.read().splitlines()
    return data

def write_data(file_name, data):
    with open(file_name, 'w') as f:
        f.writelines("\n".join(str(line) for line in data))

def main():
    data = read_data('ozn.in')
    N, K = map(int, data[0].split())
    ufos = [tuple(map(int, line.split())) for line in data[1:N+1]]
    lasers = list(map(int, data[N+1].split()))
    
    # Initialize array to store the count of destroyed extraterrestrials for each laser
    destroyed_counts = [0] * K
    
    # For each laser, check if it intersects with any UFO
    for i, laser_x in enumerate(lasers):
        for x1, y1, x2, y2, aliens in ufos:
            if x1 <= laser_x <= x2:
                # Add the number of extraterrestrials in the UFO to the count for the current laser
                destroyed_counts[i] += aliens

    # Write the results to the output file
    write_data('ozn.out', destroyed_counts)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `ozn.out` and read from `ozn.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read the input data from 'ozn.in'
with open('ozn.in', 'r') as fin:
    N, K = map(int, fin.readline().split())
    ufos = [list(map(int, fin.readline().split())) for _ in range(N)]
    lasers = list(map(int, fin.readline().split()))

# Initialize an array to store the count of destroyed extraterrestrials for each laser
destroyed_counts = [0] * K

# For each laser, check if it intersects with any UFO
for i in range(K):
    laser_x = lasers[i]
    for x1, y1, x2, y2, aliens in ufos:
        if x1 <= laser_x <= x2:
            # Add the number of extraterrestrials in the UFO to the count for the current laser
            destroyed_counts[i] += aliens

# Write the results to the output file 'ozn.out'
with open('ozn.out', 'w') as fout:
    for count in destroyed_counts:
        fout.write(str(count) + '\n')
```
