---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def max_ribbon_same_color(file_in, file_out):
    # Read the input data
    with open(file_in, "r") as fin:
        n, c = map(int, fin.readline().split())
        colors = [int(fin.readline().strip()) for _ in range(n)]
    
    # Initialize variables to store the max length and color
    max_length = 0
    max_color = 0
    start_cut = 0
    end_cut = 0
    
    # Initialize a dictionary to store the length of ribbon for each color
    color_lengths = {}
    
    # Processing to calculate the max length for each color
    for color in colors:
        if color in color_lengths:
            color_lengths[color] += 1
        else:
            color_lengths[color] = 1
            
        # Check if the current color sequence is longer than the max found
        if color_lengths[color] > max_length:
            max_length = color_lengths[color]
            max_color = color
    
    # Finding the start and end cut
    for i in range(n):
        if colors[i] == max_color:
            start_cut = i
            break

    for i in range(n - 1, -1, -1):
        if colors[i] == max_color:
            end_cut = n - 1 - i
            break
    
    # Calculate the remaining length after cuts
    remaining_length = max_length
    
    # Write the results to the output file
    with open(file_out, "w") as fout:
        fout.write(str(remaining_length) + "\n")
        fout.write(str(max_color) + "\n")
        fout.write(str(start_cut) + "\n")
        fout.write(str(end_cut) + "\n")

# Call the function with the input and output file names
max_ribbon_same_color("panglica.in", "panglica.out")
```
```
---------- user ----------


Expected program to write result to `panglica.out` and read from `panglica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def longest_ribbon_with_same_color_ends(colors, n):
    max_length = 0
    max_color = 0
    start_cut = 0
    end_cut = 0
    
    # Initialize dictionaries to store the lengths and positions
    color_start = {}
    color_end = {}
    
    # Loop through the colors and populate the dictionaries
    for i, color in enumerate(colors):
        if color not in color_start:
            color_start[color] = i
        color_end[color] = i
    
    # Find the longest ribbon with the same color on both ends
    for color in color_start:
        length = color_end[color] - color_start[color] + 1
        if length > max_length or (length == max_length and color_start[color] < color_start[max_color]):
            max_length = length
            max_color = color
            start_cut = color_start[color]
            end_cut = n - 1 - color_end[color]
    
    return max_length, max_color, start_cut, end_cut

# Read from panglica.in
with open('panglica.in', 'r') as file:
    n, c = map(int, file.readline().split())
    colors = [int(file.readline().strip()) for _ in range(n)]

# Get the result
length, color, start_cut, end_cut = longest_ribbon_with_same_color_ends(colors, n)

# Write to panglica.out
with open('panglica.out', 'w') as file:
    file.write(f"{length}\n{color}\n{start_cut}\n{end_cut}\n")
```
