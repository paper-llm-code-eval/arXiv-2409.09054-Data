---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read the input data from panglica.in
with open("panglica.in", "r") as file:
    N, C = map(int, file.readline().split())
    colors = [int(file.readline().strip()) for _ in range(N)]

# Initialize variables to keep track of the best solution
max_length = 0
best_color = 0
start_cut = 0
end_cut = 0

# Dictionary to keep track of the last position for each color
position_dict = {}

# Iterate over the colors to find the longest ribbon with same color at both ends
for i in range(N):
    color = colors[i]
    # Check if color has appeared before, meaning there is a potential ribbon
    if color in position_dict:
        # Calculate the length of the ribbon
        length = i - position_dict[color] + 1
        # If the length is greater than max_length, update the best solution
        if length > max_length or (length == max_length and position_dict[color] < start_cut):
            max_length = length
            best_color = color
            start_cut = position_dict[color]
            end_cut = N - i - 1
    # Update the position of the current color
    position_dict[color] = i

# Write the output data to panglica.out
with open('panglica.out', 'w') as file:
    file.write(f"{max_length}\n{best_color}\n{start_cut}\n{end_cut}\n")
```
```
---------- user ----------


Expected program to write result to `panglica.out` and read from `panglica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Below is the corrected solution, written in a markdown code block to adhere to your request:

```python
# Read the input data from panglica.in
with open("panglica.in", "r") as file:
    N, C = map(int, file.readline().split())
    colors = [int(file.readline().strip()) for _ in range(N)]

# Initialize variables to keep track of the best solution
max_length = 0
best_color = 0
start_cut = 0
end_cut = 0

# Dictionary to keep track of the first and last position for each color
position_dict = {}

# Iterate over the colors to find the longest ribbon with same color at both ends
for i, color in enumerate(colors):
    if color not in position_dict:
        position_dict[color] = [i, i]
    else:
        position_dict[color][1] = i

# Find the longest section with the same color on both ends
for color, positions in position_dict.items():
    length = positions[1] - positions[0] + 1
    if length > max_length or (length == max_length and positions[0] < start_cut):
        max_length = length
        best_color = color
        start_cut = positions[0]
        end_cut = N - positions[1] - 1

# Write the output data to panglica.out
with open('panglica.out', 'w') as file:
    file.write(f"{max_length}\n{best_color}\n{start_cut}\n{end_cut}\n")
```
