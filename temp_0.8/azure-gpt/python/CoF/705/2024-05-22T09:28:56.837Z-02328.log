---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read data from file
with open('panglica.in', 'r') as file:
    N, C = map(int, file.readline().strip().split())
    colors = [int(file.readline().strip()) for _ in range(N)]

# Initialize variables
max_length = 0
color_at_ends = 0
cut_start = 0
cut_end = 0

# Create a dictionary to store the indices of colors
color_indices = {c: [] for c in range(1, C + 1)}

# Populate the dictionary with the indices of colors
for i, color in enumerate(colors):
    color_indices[color].append(i)

# Find the longest ribbon with the same color at both ends
for color, indices in color_indices.items():
    if len(indices) > 1 and indices[-1] - indices[0] + 1 > max_length:
        max_length = indices[-1] - indices[0] + 1
        color_at_ends = color
        cut_start = indices[0]
        cut_end = N - indices[-1] - 1

# Write data to file
with open('panglica.out', 'w') as file:
    file.write(f"{max_length}\n{color_at_ends}\n{cut_start}\n{cut_end}\n")
```
```
---------- user ----------


Expected program to write result to `panglica.out` and read from `panglica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Below is the revised solution that reads from `panglica.in` and writes to `panglica.out` without using `input()` or `print()`:

```python
# Open the input file
with open('panglica.in', 'r') as file:
    N, C = map(int, file.readline().split())
    ribbon = [int(file.readline()) for _ in range(N)]

# Initialize variables
max_length = 0
color_at_ends = 0
cut_start = 0
cut_end = 0

# Scan from the start to find the first occurrence of each color
first_occurrence = {}
for i in range(N):
    if ribbon[i] not in first_occurrence:
        first_occurrence[ribbon[i]] = i

# Scan from the end to find the last occurrence of each color and determine the maximum ribbon length
for i in range(N - 1, -1, -1):
    color = ribbon[i]
    if color in first_occurrence:
        length = i - first_occurrence[color] + 1
        if length > max_length:
            max_length = length
            color_at_ends = color
            cut_start = first_occurrence[color]
            cut_end = N - i - 1

# Open the output file
with open('panglica.out', 'w') as file:
    file.write(f"{max_length}\n{color_at_ends}\n{cut_start}\n{cut_end}\n")
```

This code reads the input data from `panglica.in`, processes it to find the longest ribbon with the same color at both ends, and then writes the results to `panglica.out`. It avoids using `input()` or `print()` and strictly uses file operations to handle the input and output as required.
