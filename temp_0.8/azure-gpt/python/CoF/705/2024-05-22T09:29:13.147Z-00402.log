---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def solve_ribbon():
    with open('panglica.in', 'r') as f:
        n, c = map(int, f.readline().split())
        colors = [int(f.readline().strip()) for _ in range(n)]

    max_length = 0
    color_at_ends = 0
    cut_start = 0
    cut_end = 0

    start = 0
    while start < n:
        end = start
        while end < n and colors[start] == colors[end]:
            end += 1
        length = end - start
        if length > max_length or (length == max_length and start < cut_start):
            max_length = length
            color_at_ends = colors[start]
            cut_start = start
            cut_end = n - end
        start = end

    with open('panglica.out', 'w') as f:
        f.write(f"{max_length}\n{color_at_ends}\n{cut_start}\n{cut_end}\n")

solve_ribbon()
```
```
This python code represents the solution for the given challenge. It reads data from `panglica.in`, processes it to find the longest possible ribbon with the same color on both ends, and writes the results to `panglica.out`.
---------- user ----------


Expected program to write result to `panglica.out` and read from `panglica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
with open('panglica.in', 'r') as file:
    n, c = map(int, file.readline().split())
    ribbon = [int(file.readline()) for _ in range(n)]

ribbon_length = 0
cut_from_start = 0
cut_from_end = 0
color = 0

# Use dictionaries to store the start and end indices of each color
color_start = {}
color_end = {}

# Scan the ribbon and populate color_start and color_end
for i in range(n):
    if ribbon[i] not in color_start:
        color_start[ribbon[i]] = i
    color_end[ribbon[i]] = i

for col in range(1, c+1):
    if col in color_start and col in color_end:
        length = color_end[col] - color_start[col] + 1
        if length > ribbon_length or (length == ribbon_length and color_start[col] < cut_from_start):
            ribbon_length = length
            color = col
            cut_from_start = color_start[col]
            cut_from_end = n - color_end[col] - 1

with open('panglica.out', 'w') as file:
    file.write(f"{ribbon_length}\n{color}\n{cut_from_start}\n{cut_from_end}\n")
```
```
---------- user ----------


Expected program to write result to `panglica.out` and read from `panglica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read from panglica.in
with open('panglica.in', 'r') as file:
    n, c = map(int, file.readline().strip().split())
    ribbon_colors = [int(file.readline().strip()) for _ in range(n)]

# Initialize variables
max_length = 0
color = 0
cut_start = 0
cut_end = 0

# Iterate over each possible color
for current_color in range(1, c + 1):
    length = 0
    start = 0
    end = n - 1
    while start < n and ribbon_colors[start] != current_color:
        start += 1
    while end >= 0 and ribbon_colors[end] != current_color:
        end -= 1
    # Calculate the current length if the same color is found at both ends
    if start < n and ribbon_colors[start] == current_color:
        length = end - start + 1
    # If current length is greater, or equal but with fewer cuts from the start
    if length > max_length or (length == max_length and start < cut_start):
        max_length = length
        color = current_color
        cut_start = start
        cut_end = n - end - 1

# Write to panglica.out
with open('panglica.out', 'w') as file:
    file.write(f"{max_length}\n{color}\n{cut_start}\n{cut_end}\n")
```
