---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `submit.in` and write to `submit.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasilică se antrenează pe un site de probleme cu evaluare online. Când el trimite pe site soluţia la o problemă, aceasta este evaluată pe un anumit număr de teste. Punctajul obţinut la problema respectivă va fi egal cu suma punctajelor obţinute la fiecare test. Punctajele asociate testelor pot fi diferite. În plus, dacă problema a fost complet rezolvată (a obţinut punctaj maxim la toate testele), Vasilică primeşte şi un bonus. 

Vasilică poate trimite soluţia la o problemă de mai multe ori. Când trimite soluţia prima dată, punctajul se calculează în modul prezentat anterior. Când trimite soluţia a doua oară, Vasilică va fi penalizat cu două puncte (adică din punctajul total obţinut la problemă se scad două puncte). Când trimite soluţia a treia oară penalizarea este de $4$ puncte, a patra oară de $6$ puncte ş.a.m.d. Observaţi că la fiecare nouă încercare penalizarea creşte cu două puncte.

# Cerință

Date fiind rezultatele obţinute pe teste de Vasilică la fiecare soluţie trimisă, să se determine punctajul maxim pe care el l-a obţinut la problema respectivă.

# Date de intrare

Fișierul de intrare `submit.in` conține pe prima linie numărul natural $N$ reprezentând numărul de teste pe care este evaluată soluţia. 

Pe cea de a doua linie se află $N$ numere naturale separate prin spaţii $P_1, P_2, \dots, P_N$, reprezentând în ordine punctajul acordat pentru fiecare dintre cele $N$ teste. 

Pe cea de a treia linie se află numărul natural $B$ reprezentând bonusul (numărul de puncte acordate în cazul în care pentru toate testele soluţia obţine punctaj pe toate testele). 

Pe a patra linie este scris un număr natural $M$ reprezentând numărul de soluţii trimise de Vasilică la problemă. 

Urmează $M$ linii, fiecare linie conţinând rezultatele obţinute pe teste la cele $M$ soluţii trimise de Vasilică, în ordinea trimiterii lor. Pe cea de a $i$-a linie dintre cele $M$ sunt scrise $N$ valori din mulţimea $\{0, 1\}$, separate prin spaţii; a $j$-a valoare este $0$ dacă testul $j$ nu a fost rezolvat corect, respectiv $1$ dacă testul $j$ a fost corect rezolvat (obţinând punctajul maxim alocat pe test).

# Date de ieșire

Fișierul de ieșire `submit.out` va conţine o singură linie pe care va fi scris punctajul maxim obţinut de Vasilică la problema respectivă.

# Restricții și precizări

* $1 \leq N, M \leq 100$;
* $0 \leq P_i, B \leq 100$;

---

Example:
`submit.in`
```
4
10 5 5 20
13
3
0 0 0 0
1 1 1 1
0 1 0 1
```

`submit.out`
```
51
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read data from submit.in
with open('submit.in', 'r') as fin:
    N = int(fin.readline().strip())
    P = list(map(int, fin.readline().strip().split()))
    B = int(fin.readline().strip())
    M = int(fin.readline().strip())
    results = [list(map(int, fin.readline().strip().split())) for _ in range(M)]

# Calculate the score for each submission and keep track of the maximum score
max_score = 0
penalty = 0  # starts with no penalty and increases by 2 with each submission
for result in results:
    score = sum(p * r for p, r in zip(P, result))
    if all(result):
        score += B  # add bonus if all tests passed
    score -= penalty
    if score > max_score:
        max_score = score
    penalty += 2

# Write the maximum score to submit.out
with open('submit.out', 'w') as fout:
    fout.write(str(max_score) + '\n')
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read data from submit.in
with open('submit.in', 'r') as fin:
    N = int(fin.readline().strip())
    P = list(map(int, fin.readline().strip().split()))
    B = int(fin.readline().strip())
    M = int(fin.readline().strip())
    submissions = [list(map(int, fin.readline().strip().split())) for _ in range(M)]

# Calculate the score for each submission
max_score = 0
penalty = 0
for i, submission in enumerate(submissions):
    score = sum(P[j] if submission[j] else 0 for j in range(N))
    if all(submission):
        score += B
    score -= penalty
    max_score = max(max_score, score)
    penalty += 2

# Write the maximum score to submit.out
with open('submit.out', 'w') as fout:
    fout.write(str(max_score) + '\n')
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the file submit.in for reading and submit.out for writing
with open('submit.in', 'r') as fin, open('submit.out', 'w') as fout:
    # Read the number of tests N
    N = int(fin.readline().strip())
    # Read the points for each test
    P = list(map(int, fin.readline().strip().split()))
    # Read the bonus points B
    B = int(fin.readline().strip())
    # Read the number of submissions M
    M = int(fin.readline().strip())

    # Initialize the maximum score to 0
    max_score = 0

    # Read each submission and calculate the score
    for i in range(M):
        submission = list(map(int, fin.readline().strip().split()))
        score = sum(p * s for p, s in zip(P, submission))
        # Add bonus points if all tests passed
        if all(submission):
            score += B
        # Subtract the penalty for multiple submissions
        score -= 2 * i
        # Update the maximum score
        max_score = max(max_score, score)

    # Write the maximum score to submit.out
    fout.write(str(max_score) + '\n')
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read data from submit.in
with open('submit.in', 'r') as fin:
    N = int(fin.readline().strip())
    P = list(map(int, fin.readline().strip().split()))
    B = int(fin.readline().strip())
    M = int(fin.readline().strip())
    submissions = [list(map(int, fin.readline().strip().split())) for _ in range(M)]

# Initialize maximum score and penalty
max_score, penalty = 0, 0

# Calculate the score for each submission
for i, submission in enumerate(submissions):
    score = sum(p * s for p, s in zip(P, submission)) - penalty
    if all(submission):
        score += B
    max_score = max(max_score, score)
    penalty += 2

# Write the maximum score to submit.out
with open('submit.out', 'w') as fout:
    fout.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read data from submit.in
with open('submit.in', 'r') as fin:
    N = int(fin.readline())
    scores = list(map(int, fin.readline().split()))
    B = int(fin.readline())
    M = int(fin.readline())
    max_score = -1

    for attempt in range(M):
        submission = list(map(int, fin.readline().split()))
        current_score = sum(score * res for score, res in zip(scores, submission)) - attempt * 2
        if all(submission):
            current_score += B
        max_score = max(max_score, current_score)

# Write the maximum score to submit.out
with open('submit.out', 'w') as fout:
    fout.write(f"{max_score}\n")
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input and output files
with open('submit.in', 'r') as input_file, open('submit.out', 'w') as output_file:
    # Read the number of tests N
    N = int(input_file.readline())
    # Read the points for each test
    test_points = list(map(int, input_file.readline().split()))
    # Read the bonus points
    bonus_points = int(input_file.readline())
    # Read the number of submissions M
    M = int(input_file.readline())

    # Initialize the maximum score
    max_score = 0
    # For each submission, calculate the score and apply penalties and bonuses
    for submission_index in range(M):
        # Read the submission results
        results = list(map(int, input_file.readline().split()))
        # Calculate the score for the current submission
        score = sum(test_points[i] * results[i] for i in range(N)) - 2 * submission_index
        # Add the bonus if all tests passed
        if all(results):
            score += bonus_points
        # Update the maximum score
        max_score = max(max_score, score)

    # Write the maximum score to the output file
    output_file.write(str(max_score))
```
```
---------- user ----------


Expected program to write result to `submit.out` and read from `submit.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input and output files
with open('submit.in', 'r') as input_file, open('submit.out', 'w') as output_file:
    # Read the number of tests N
    N = int(input_file.readline())
    # Read the points for each test
    test_points = list(map(int, input_file.readline().split()))
    # Read the bonus points
    bonus_points = int(input_file.readline())
    # Read the number of submissions M
    M = int(input_file.readline())

    # Initialize the maximum score and penalty
    max_score = 0
    penalty = 0

    # For each submission, calculate the score and apply penalties and bonuses
    for _ in range(M):
        # Read the submission results
        results = list(map(int, input_file.readline().split()))
        # Calculate the score for the current submission
        score = sum(test_points[j] * result for j, result in enumerate(results)) - penalty
        # Add the bonus if all tests passed
        if all(results):
            score += bonus_points
        # Update the maximum score
        max_score = max(max_score, score)
        # Increase the penalty for the next submission
        penalty += 2

    # Write the maximum score to the output file
    output_file.write(str(max_score) + '\n')
```
```
