---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def find_center_of_gravity(matrix):
    n, m = len(matrix), len(matrix[0])

    # Calculate prefix sums for rows and columns
    row_sum = [sum(matrix[i]) for i in range(n)]
    col_sum = [sum(matrix[i][j] for i in range(n)) for j in range(m)]

    # Calculate cumulative sums for rows and columns
    for i in range(1, n):
        row_sum[i] += row_sum[i - 1]
    for j in range(1, m):
        col_sum[j] += col_sum[j - 1]

    # Find row with minimum absolute difference
    min_row_diff = float('inf')
    best_row = -1
    for i in range(n):
        upper_sum = row_sum[i - 1] if i > 0 else 0
        lower_sum = row_sum[n - 1] - row_sum[i]
        diff = abs(upper_sum - lower_sum)
        if diff < min_row_diff:
            min_row_diff = diff
            best_row = i

    # Find column with minimum absolute difference
    min_col_diff = float('inf')
    best_col = -1
    for j in range(m):
        left_sum = col_sum[j - 1] if j > 0 else 0
        right_sum = col_sum[m - 1] - col_sum[j]
        diff = abs(left_sum - right_sum)
        if diff < min_col_diff:
            min_col_diff = diff
            best_col = j

    return best_row + 1, best_col + 1

# Read input from 'ocr.in'
with open('ocr.in', 'r') as fin:
    n, m = map(int, fin.readline().split())
    matrix = [list(map(float, fin.readline().split())) for _ in range(n)]

# Find the center of gravity
center_row, center_col = find_center_of_gravity(matrix)

# Write output to 'ocr.out'
with open('ocr.out', 'w') as fout:
    fout.write(f"{center_row} {center_col}\n")
```
```
---------- user ----------


Expected program to write result to `ocr.out` and read from `ocr.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read the image representation from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = [list(map(float, line.split())) for line in file]

# Calculate the prefix sums for rows and columns
row_prefix_sums = [0] * n
col_prefix_sums = [0] * m
for i in range(n):
    for j in range(m):
        row_prefix_sums[i] += image[i][j]
        col_prefix_sums[j] += image[i][j]
    if i > 0:
        row_prefix_sums[i] += row_prefix_sums[i - 1]
for j in range(1, m):
    col_prefix_sums[j] += col_prefix_sums[j - 1]

# Function to find the minimum difference index
def find_min_diff_index(prefix_sums):
    total_sum = prefix_sums[-1]
    min_diff = total_sum
    min_index = 0
    for i, prefix_sum in enumerate(prefix_sums):
        upper_sum = prefix_sum
        lower_sum = total_sum - prefix_sum
        diff = abs(upper_sum - lower_sum)
        # Update the minimum difference and index if needed
        if diff <= min_diff:
            min_diff = diff
            min_index = i
    return min_index + 1  # Indices are 1-based in the output

# Determine the center of gravity
center_row = find_min_diff_index(row_prefix_sums)
center_col = find_min_diff_index(col_prefix_sums)

# Write the result to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_row} {center_col}\n')
```
---------- user ----------


Program result did not match expected result.
Input data:
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```
Expected output:
```
3 3
```
Found output:
```
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial solution incorrectly calculates the prefix sums by summing the entire row or column up to the current index. Instead, we need to calculate the sum of elements before and after the current index separately for each position, to minimize the absolute difference of these sums. The center of gravity is determined by the position where these differences are minimized for both rows and columns. I'll now provide a corrected solution that adheres to these requirements.

```python
# Function to find the index with the minimum absolute difference between the sums
# of elements before and after the index
def find_center(arr, total):
    min_diff, index, running_sum = float('inf'), 0, 0
    for i, value in enumerate(arr):
        before, after = running_sum, total - running_sum - value
        diff = abs(before - after)
        if diff < min_diff:
            min_diff = diff
            index = i
        running_sum += value
    return index + 1  # +1 for 1-based index

# Read the image representation from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().split())
    image = [list(map(float, line.split())) for line in file]

# Calculate the sums of each row and column
row_sums = [sum(row) for row in image]
col_sums = [sum(image[i][j] for i in range(n)) for j in range(m)]

# Find the row and column of the center of gravity
center_row = find_center(row_sums, sum(row_sums))
center_col = find_center(col_sums, sum(col_sums))

# Write the result to 'ocr.out'
with open('ocr.out', 'w') as file:
    file.write(f'{center_row} {center_col}\n')
```

Explanation of the differences and the fix:
- The previous solution considered the prefix sums up to a certain index, which does not match the requirement to minimize the difference in sums on either side of a line through the center of gravity.
- The modified `find_center` function calculates the sums before and after the current index for each row and column, which corresponds to the "above" and "below" (or "left" and "right") parts of the image as required.
- The corrected solution ensures that the absolute differences in sums before and after each element are minimized, as per the definition of the center of gravity. This change should now yield the expected results for the given input.
