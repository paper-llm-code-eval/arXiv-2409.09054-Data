---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to read the image from 'ocr.in'
def read_image(file_path):
    with open(file_path, 'r') as f:
        n, m = map(int, f.readline().split())
        return [list(map(float, f.readline().split())) for _ in range(n)]

# Function to write the center of gravity to 'ocr.out'
def write_center(file_path, center):
    with open(file_path, 'w') as f:
        f.write(f"{center[0]} {center[1]}\n")

# Function to find the center of gravity of the image
def find_center(image):
    n = len(image)
    m = len(image[0])

    # Pre-compute prefix sums for rows and columns
    row_prefix_sum = [0] * (n + 1)
    col_prefix_sum = [0] * (m + 1)

    for i in range(n):
        for j in range(m):
            row_prefix_sum[i + 1] += image[i][j]
            col_prefix_sum[j + 1] += image[i][j]

    # Find row with minimum difference
    row_diff = float('inf')
    row_center = -1
    for i in range(1, n + 1):
        upper_sum = sum(row_prefix_sum[:i])
        lower_sum = sum(row_prefix_sum[i:])
        diff = abs(upper_sum - lower_sum)
        if diff < row_diff:
            row_diff = diff
            row_center = i

    # Find column with minimum difference
    col_diff = float('inf')
    col_center = -1
    for j in range(1, m + 1):
        left_sum = sum(col_prefix_sum[:j])
        right_sum = sum(col_prefix_sum[j:])
        diff = abs(left_sum - right_sum)
        if diff < col_diff:
            col_diff = diff
            col_center = j

    return (row_center, col_center)

# Read the image, find the center, and write the result
image = read_image('ocr.in')
center = find_center(image)
write_center('ocr.out', center)
```

This Python solution reads the image from `ocr.in`, calculates the center of gravity, and writes the output to `ocr.out`. The `find_center` function calculates prefix sums for each row and column to efficiently find the row and column with the minimum difference in sums above/below and left/right, respectively. The `read_image` and `write_center` functions handle file I/O.
---------- user ----------


Program result did not match expected result.
Input data:
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```
Expected output:
```
3 3
```
Found output:
```
4 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The original solution incorrectly computed the prefix sums by summing the entire rows and columns up to a certain point, which does not correctly represent the sums of the areas determined by a potential center of gravity. Additionally, the search for the center of gravity must be done in a way that considers the sum of all elements above, below, to the left, and to the right of every possible center point, not just by comparing cumulative sums. We should also take into account that if multiple centers of gravity are found, the one with the highest row index and then the highest column index should be selected.

Let's rewrite the solution with these points in mind. We will calculate the cumulative sums correctly and implement the logic to find the correct center of gravity:

```python
# Read from 'ocr.in' and write to 'ocr.out' without using input() or print()

def find_center_of_gravity(matrix, n, m):
    # Calculate the prefix sum for rows and columns
    row_prefix = [0] * n
    column_prefix = [0] * m
    for i in range(n):
        for j in range(m):
            row_prefix[i] += matrix[i][j]
            column_prefix[j] += matrix[i][j]

    # Find the row for the center of gravity
    upper_sum = 0
    best_row = 0
    for i in range(n):
        upper_sum += row_prefix[i]
        lower_sum = sum(row_prefix) - upper_sum
        if upper_sum >= lower_sum:
            best_row = i
            break

    # Find the column for the center of gravity
    left_sum = 0
    best_col = 0
    for j in range(m):
        left_sum += column_prefix[j]
        right_sum = sum(column_prefix) - left_sum
        if left_sum >= right_sum:
            best_col = j
            break

    return best_row + 1, best_col + 1  # Indices are 1-based

# Read the image from 'ocr.in'
with open('ocr.in', 'r') as file:
    n, m = map(int, file.readline().strip().split())
    matrix = [list(map(float, file.readline().strip().split())) for _ in range(n)]

# Find the center of gravity and write to 'ocr.out'
center_of_gravity = find_center_of_gravity(matrix, n, m)
with open('ocr.out', 'w') as file:
    file.write(f"{center_of_gravity[0]} {center_of_gravity[1]}")
```

This solution computes the cumulative sum (prefix sum) for each row and column separately and then starts from the top row and leftmost column to find the row and column where the cumulative sum above and to the left is approximately equal to the sum below and to the right, respectively. Once found, it outputs the center of gravity's 1-based row and column indices to `ocr.out`.
