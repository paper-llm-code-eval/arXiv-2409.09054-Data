{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/741/2024-05-22T09:58:52.811Z-08551.log",
  "attemptStart": 1716371932.811,
  "attemptEnd": 1716371953.469,
  "attemptDuration": 20.657999992370605,
  "code": "def find_center_of_gravity(matrix, n, m):\n    # Calculate the prefix sums for rows and columns\n    row_prefix_sums = [0] * (n + 1)\n    col_prefix_sums = [0] * (m + 1)\n    \n    for i in range(1, n + 1):\n        row_prefix_sums[i] = row_prefix_sums[i - 1] + sum(matrix[i - 1])\n    \n    for j in range(1, m + 1):\n        col_prefix_sums[j] = col_prefix_sums[j - 1] + sum(matrix[i][j - 1] for i in range(n))\n    \n    # Find the row and column with the minimum absolute difference\n    min_diff_row, center_row = float('inf'), 0\n    min_diff_col, center_col = float('inf'), 0\n    \n    for i in range(1, n + 1):\n        upper_sum = row_prefix_sums[i - 1]\n        lower_sum = row_prefix_sums[n] - row_prefix_sums[i]\n        diff = abs(upper_sum - lower_sum)\n        if diff <= min_diff_row:\n            min_diff_row = diff\n            center_row = i\n    \n    for j in range(1, m + 1):\n        left_sum = col_prefix_sums[j - 1]\n        right_sum = col_prefix_sums[m] - col_prefix_sums[j]\n        diff = abs(left_sum - right_sum)\n        if diff <= min_diff_col:\n            min_diff_col = diff\n            center_col = j\n    \n    return center_row, center_col\n\n# Read from 'ocr.in'\nwith open('ocr.in', 'r') as f:\n    n, m = map(int, f.readline().split())\n    matrix = [list(map(float, f.readline().split())) for _ in range(n)]\n\n# Find the center of gravity\ncenter_row, center_col = find_center_of_gravity(matrix, n, m)\n\n# Write to 'ocr.out'\nwith open('ocr.out', 'w') as f:\n    f.write(f\"{center_row} {center_col}\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1531,
  "metadata": {
    "id": 741,
    "examples": [
      {
        "in": "5 5\n0.1 0.2 0.1 0.2 0.1\n0.1 0.2 0.3 0.1 0.1\n0.2 0.3 0.1 0.1 0.3\n0.4 0.1 0.1 0.1 0.2\n0.2 0.2 0.3 0.3 0.1",
        "out": "3 3",
        "explainer": ""
      },
      {
        "in": "5 10\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3\n0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4\n0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.6",
        "out": "4 6",
        "explainer": ""
      }
    ],
    "body": "O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.\nCentrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.\nSă considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).\n\n~[ocr.png|width=30em]\n\n# Cerință\n\nScrieți un program care să determine centrul de gravitate al unei imagini scanate.\n\n# Date de intrare\n\nFișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.\n\n# Date de ieșire\n\nFișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.\n\n# Restricții și precizări\n\n* $1 \\leq n, m \\leq 50$;\n* Valorile reale sunt exprimate cu maximum două zecimale\n* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).",
    "header": {
      "problem_id": 741,
      "problem_name": "ocr",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "ocr.in",
      "output_filename": "ocr.out",
      "multiple_solutions": false,
      "original_source": "OJI 2005 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "ocr.in",
      "output": "ocr.out"
    },
    "consoleInteraction": false
  }
}