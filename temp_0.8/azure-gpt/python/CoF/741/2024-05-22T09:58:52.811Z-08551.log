---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def find_center_of_gravity(matrix, n, m):
    # Calculate the prefix sums for rows and columns
    row_prefix_sums = [0] * (n + 1)
    col_prefix_sums = [0] * (m + 1)
    
    for i in range(1, n + 1):
        row_prefix_sums[i] = row_prefix_sums[i - 1] + sum(matrix[i - 1])
    
    for j in range(1, m + 1):
        col_prefix_sums[j] = col_prefix_sums[j - 1] + sum(matrix[i][j - 1] for i in range(n))
    
    # Find the row and column with the minimum absolute difference
    min_diff_row, center_row = float('inf'), 0
    min_diff_col, center_col = float('inf'), 0
    
    for i in range(1, n + 1):
        upper_sum = row_prefix_sums[i - 1]
        lower_sum = row_prefix_sums[n] - row_prefix_sums[i]
        diff = abs(upper_sum - lower_sum)
        if diff <= min_diff_row:
            min_diff_row = diff
            center_row = i
    
    for j in range(1, m + 1):
        left_sum = col_prefix_sums[j - 1]
        right_sum = col_prefix_sums[m] - col_prefix_sums[j]
        diff = abs(left_sum - right_sum)
        if diff <= min_diff_col:
            min_diff_col = diff
            center_col = j
    
    return center_row, center_col

# Read from 'ocr.in'
with open('ocr.in', 'r') as f:
    n, m = map(int, f.readline().split())
    matrix = [list(map(float, f.readline().split())) for _ in range(n)]

# Find the center of gravity
center_row, center_col = find_center_of_gravity(matrix, n, m)

# Write to 'ocr.out'
with open('ocr.out', 'w') as f:
    f.write(f"{center_row} {center_col}\n")
```
