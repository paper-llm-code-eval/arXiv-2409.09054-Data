---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cartonase.in` and write to `cartonase.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel are $N$ cartonașe. Fiecare cartonaș are înscrise două numere (un număr, $s$, în partea stângă, și celălalt număr, $d$, în partea dreaptă). El a așezat cartonașele într-un șir, lipite unul de celălalt, astfel încât numărul din partea dreaptă a primului cartonaș este lipit de numărul din partea stângă a celui de-al doilea cartonaș, numărul din partea dreaptă a celui de al doilea cartonaș este lipit de numărul din partea stângă a celui de-al treilea cartonaș etc. Spunem că două cartonașe alăturate "se potrivesc" dacă numărul din dreapta al primului cartonaș este egal cu numărul din stânga al celui de al doilea cartonaș. Ionel observă că sunt perechi de cartonașe alăturate care "se potrivesc" și chiar secvențe de mai multe cartonașe alăturate, în care primul "se potrivește" cu al doilea, al doilea "se potrivește" cu al treilea, etc.

# Cerință
Scrieţi un program care să citească numărul $N$ de cartonașe, numerele înscrise pe fiecare cartonaș și determină:
1) Numărul de perechi de cartonașe care "se potrivesc".
2) Numărul de cartonașe din cea mai lungă secvență în care fiecare două cartonașe alăturate "se potrivesc".
3) Numărul de secvențe cu număr maxim de cartonașe care "se potrivesc".

# Date de intrare
Fişierul de intrare `cartonase.in` conţine doar numere naturale nenule:
- pe prima linie se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie a fișierului se găsește numărul natural $N$, cu semnificația din enunț.
- pe fiecare dintre următoarele $N$ linii se află, în acestă ordine, câte două numere naturale $s$ şi $d$, separate printr-un spațiu, cu semnificația din enunț pentru un cartonaș. Perechile de numere sunt date în ordinea în care cartonașele corespunzătoare lor apar în șirul lui Ionel.

# Date de ieșire
Fişierul de ieşire `cartonase.out` va conţine pe prima linie un număr natural reprezentând răspunsul la cerința specificată.

# Restricții și precizări
- $1 \leq N \leq 500$
- $1 \leq s \leq 10\ 000$
- $1 \leq d \leq 10\ 000$
- Pentru rezolvarea fiecărei cerințe se obțin câte 30 de puncte.

---

Example:
`cartonase.in`
```
1
5
2 10
10 5
10 2
2 10
37 5
```

`cartonase.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from file
with open('cartonase.in', 'r') as file:
    c = int(file.readline().strip())
    n = int(file.readline().strip())
    cartonase = [tuple(map(int, file.readline().split())) for _ in range(n)]

# Calculate results based on the task c
def solve_task(c, cartonase):
    # Task 1: Count matching pairs
    if c == 1:
        return sum(1 for i in range(n - 1) if cartonase[i][1] == cartonase[i + 1][0])

    # Auxiliary function to calculate longest matching sequence
    def longest_sequence(cartonase):
        max_len = 1
        current_len = 1
        for i in range(n - 1):
            if cartonase[i][1] == cartonase[i + 1][0]:
                current_len += 1
                max_len = max(max_len, current_len)
            else:
                current_len = 1
        return max_len

    # Task 2: Find the length of the longest sequence
    if c == 2:
        return longest_sequence(cartonase)

    # Task 3: Count how many times the longest sequence occurs
    if c == 3:
        max_len = longest_sequence(cartonase)
        count = 0
        current_len = 1
        for i in range(n - 1):
            if cartonase[i][1] == cartonase[i + 1][0]:
                current_len += 1
                if current_len == max_len:
                    count += 1
                    current_len = 1  # Restart the count after a max sequence
            else:
                current_len = 1
        return count

# Get the solution for the task and write to file
result = solve_task(c, cartonase)
with open('cartonase.out', 'w') as file:
    file.write(str(result) + '\n')
```

This code snippet reads from an input file `cartonase.in`, processes the cartonase data according to the task specified on the first line (either 1, 2, or 3), and then writes the result to an output file `cartonase.out`. The code is designed to handle the three tasks efficiently by iterating through the cartonase data only as much as needed for each task.
