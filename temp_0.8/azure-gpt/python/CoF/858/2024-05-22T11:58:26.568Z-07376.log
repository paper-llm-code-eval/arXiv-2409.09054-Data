---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ech.in` and write to `ech.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Numim _număr echilibrat_ un număr natural pentru care suma cifrelor de pe poziții pare este egală cu suma cifrelor de pe poziții impare.
De exemplu numărul $13552$ este _echilibrat_, pentru că $1+5+2=8=3+5$.

# Cerință

Dat fiind un număr natural $N$ să se determine cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Date de intrare

Fișierul de intrare `ech.in` conține pe prima linie numărul natural $N$.

# Date de ieșire

Fișierul de ieșire `ech.out` va conține o singură linie pe care va fi scris cel mai mic _număr echilibrat_, strict mai mare decât $N$.

# Restricții și precizări

* Numărul $N$ are cel mult $23$ de cifre.
* Pentru teste valorând $40\%$ din punctaj, $N$ are cel mult $18$ cifre.

---

Example:
`ech.in`
```
99
```

`ech.out`
```
110
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the number from the input file
with open('ech.in', 'r') as file:
    N = int(file.readline().strip())

# Function to check if a number is balanced
def is_balanced(num):
    str_num = str(num)
    odd_sum = sum(int(str_num[i]) for i in range(0, len(str_num), 2))
    even_sum = sum(int(str_num[j]) for j in range(1, len(str_num), 2))
    return odd_sum == even_sum

# Find the smallest balanced number greater than N
def find_smallest_balanced(num):
    while True:
        num += 1
        if is_balanced(num):
            return num

# Find the result and write it to the output file
result = find_smallest_balanced(N)
with open('ech.out', 'w') as file:
    file.write(str(result))
```

This code defines a function to check if a number is balanced by calculating the sum of digits at odd and even indices, then it defines another function to find the smallest balanced number greater than the provided number `N`. It increments `N` by one until it finds a balanced number, then writes the result to an output file.
