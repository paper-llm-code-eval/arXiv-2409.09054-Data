---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from collections import defaultdict

# Function to calculate gcd of two numbers
def gcd(x, y):
    while y:
        x, y = y, x % y
    return x

# Read input data from turist.in
with open('turist.in', 'r') as file:
    M, N = map(int, file.readline().strip().split())
    l, c = map(int, file.readline().strip().split())
    K = int(file.readline().strip())
    cities = [tuple(map(int, file.readline().strip().split())) for _ in range(K)]

# Initialize a dictionary to count cities on the same line
lines = defaultdict(int)

# Go through all the cities and count how many are on the same line as the tourist's position
for city_l, city_c in cities:
    # Calculate the direction (delta_l, delta_c)
    delta_l = city_l - l
    delta_c = city_c - c
    
    # Normalize the direction by their greatest common divisor to avoid duplicates
    if delta_l == 0 and delta_c == 0:
        continue
    gcd_val = gcd(abs(delta_l), abs(delta_c))
    direction = (delta_l // gcd_val, delta_c // gcd_val)
    
    lines[direction] += 1

# Find the maximum number of cities on any line
max_cities = max(lines.values(), default=0)

# Write output data to turist.out
with open('turist.out', 'w') as file:
    file.write(f'{max_cities}\n')
```

This solution reads from `turist.in`, calculates the greatest common direction for each city in relation to the tourist's starting position, and writes the result to `turist.out`. The use of greatest common divisor (GCD) ensures that cities lying on the same line, regardless of the distance, are counted together. The solution avoids using `input()` or `print()` as requested.
