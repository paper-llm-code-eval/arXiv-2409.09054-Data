---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:````markdown
```python
from collections import defaultdict

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def read_input(filename):
    with open(filename, 'r') as file:
        M, N = map(int, file.readline().split())
        l, c = map(int, file.readline().split())
        k = int(file.readline().strip())
        cities = [tuple(map(int, file.readline().split())) for _ in range(k)]
    return M, N, l, c, k, cities

def write_output(filename, max_cities):
    with open(filename, 'w') as file:
        file.write(str(max_cities))

def find_max_cities(M, N, l, c, cities):
    directions = defaultdict(int)
    for city_l, city_c in cities:
        delta_l = city_l - l
        delta_c = city_c - c
        d = gcd(abs(delta_l), abs(delta_c))
        if d != 0:  # Make sure cities are not at the same position
            directions[(delta_l // d, delta_c // d)] += 1
    return max(directions.values(), default=0)

def main():
    M, N, l, c, k, cities = read_input('turist.in')
    max_cities = find_max_cities(M, N, l, c, cities)
    write_output('turist.out', max_cities)

if __name__ == "__main__":
    main()
```
````

This solution reads the input from `turist.in`, calculates the maximum number of cities the tourist can visit in a straight line from his starting position, and writes the output to `turist.out`.

The key part of the solution is the `find_max_cities` function, which calculates the direction vectors from the tourist's starting position to each city. These vectors are normalized to their smallest integer representation by dividing by the greatest common divisor (GCD). The normalized direction vectors are then used as keys in a dictionary to count the number of cities in each direction. The maximum count of cities in any direction is then returned as the result.
---------- user ----------


Expected program to write result to `turist.out` and read from `turist.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the corrected solution as per the instructions, which reads from `turist.in` and writes to `turist.out` without using `input()` or `print()` functions:

```python
from collections import defaultdict
from math import gcd

def read_input(filename):
    with open(filename, 'r') as file:
        M, N = map(int, file.readline().split())
        l, c = map(int, file.readline().split())
        k = int(file.readline().strip())
        cities = [tuple(map(int, file.readline().split())) for _ in range(k)]
    return M, N, l, c, k, cities

def write_output(filename, max_cities):
    with open(filename, 'w') as file:
        file.write(str(max_cities) + '\n')

def find_max_cities(M, N, l, c, cities):
    directions = defaultdict(int)
    for city_l, city_c in cities:
        delta_l = city_l - l
        delta_c = city_c - c
        # Ensure we're not considering the same point as the tourist is at
        if delta_l == 0 and delta_c == 0:
            continue
        # Normalize direction by GCD
        d = gcd(delta_l, delta_c)
        norm_direction = (delta_l // d, delta_c // d)
        directions[norm_direction] += 1
    # The maximum number of cities that can be visited in a straight line
    return max(directions.values(), default=0)

def main():
    M, N, l, c, k, cities = read_input('turist.in')
    max_cities = find_max_cities(M, N, l, c, cities)
    write_output('turist.out', max_cities)

if __name__ == "__main__":
    main()
```

This solution will read the input from the file `turist.in`, process it to find the maximum number of cities the tourist can visit in any direction, and then write the result to `turist.out`. The solution avoids using `input()` for reading and `print()` for output, adhering strictly to file I/O operations.
