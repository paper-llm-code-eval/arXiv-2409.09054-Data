---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cufere.in` and write to `cufere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[cufar.png|align=right|width=25%]

Alex, eroina din *Minecraft*, este foarte curajoasă și harnică. De-a lungul timpului, ea a depozitat în $n$ cufere tot felul de obiecte fragile (de exemplu ouă) sau dure (de exemplu pietre).

Un cufăr este o cutie de lemn cu $27$ de compartimente dispuse pe $3$ rânduri, câte $9$ pe fiecare rând. Într-un compartiment poate fi depozitat un grup de unul sau mai multe obiecte **identice**: maximum $16$ obiecte fragile sau maximum $64$ de obiecte dure. Pot fi mai multe compartimente care să conțină același tip de obiecte, iar unele compartimente pot fi goale.

Alex a etichetat atât compartimentele, cât și obiectele, cu numere construite după următoarea regulă:
* un obiect are drept etichetă un număr natural cuprins între $10$ și $99$, inclusiv, astfel: un număr prim, dacă este fragil, sau un număr compus, dacă este dur;
* toate obiectele identice primesc aceeași etichetă;
* un compartiment are drept etichetă un număr natural format din două valori alipite: numărul obiectelor din grupul depozitat în el, urmat de eticheta comună a acestora (de exemplu dacă eticheta compartimentului este $1994$, înseamnă că în el este depozitat un grup de $19$ obiecte, fiecare având eticheta $94$);
* compartimentele goale sunt etichetate cu $0$.

Alex vrea să **rearanjeze** obiectele din cufere, astfel încât:
* să fie valorificat spațiul, adică să fie ocupate cât mai puține cufere și, în cadrul unui cufăr, cât mai puține compartimente;
* să fie ocupate compartimentele din cuferele disponibile la rând, începând cu primul cufăr, și, în cadrul unui cufăr, începând cu primul rând și, în cadrul unui rând, de la stânga la dreapta. Cu alte cuvinte, se umple mai întâi cufărul $1$, începând cu rândul $1$, și pe fiecare rând de la stânga la dreapta, apoi cufărul al doilea, în aceeași manieră, și așa mai departe;
* obiectele sunt preluate în ordinea crescătoare a etichetelor și din totalul obiectelor identice se formează mai întâi grupuri cu număr maxim de obiecte, și doar ultimul grup poate fi, eventual, incomplet;
* fiecare din aceste grupuri se depozitează, pe măsura formării, în câte un compartiment al cufărului curențiar dacă acesta se umple, se trece la cufărul următor.

După rearanjarea obiectelor, compartimentele sunt etichetate din nou, după aceeași regulă.

# Cerință

Dându-se cele $n$ cufere, care conțin obiectele în ordinea inițială, Alex vă roagă să realizați un program care să determine:
1. pentru fiecare etichetă distinctă de obiect întâlnit în cele $n$ cufere, numărul total al obiectelor cu acea etichetă;
2. noile etichete ale compartimentelor care compun cele $n$ cufere, după rearanjarea obiectelor.

# Date de intrare

Fișierul de intrare `cufere.in` conține pe prima linie numărul $c$ reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural nenul $n$, cu semnificația din enunț, iar pe fiecare din următoarele $3n$ linii, câte $9$ numere, reprezentând etichetele inițiale ale compartimentelor aflate pe câte un rând al unui cufăr, în ordinea în care ele se află în cufere, de la primul cufăr, până la ultimul, în cadrul fiecărui cufăr de la primul rând până la al treilea, iar în cadrul fiecărui rând de la stânga la dreapta. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire

Fișierul `cufere.out` va conține fie răspunsul pentru cerința $1$ (dacă $c = 1$), fie răspunsul pentru cerința $2$ (dacă $c = 2$). 
\
Pentru cerința $1$, pentru fiecare etichetă distinctă, în ordine strict crescătoare, se va afișa o pereche formată din eticheta respectivă și numărul obiectelor cu această etichetă. Fiecare pereche de numere va fi afișată pe câte o linie.
\
Pentru cerința $2$, etichetele compartimentelor vor fi afișate corespunzător plasării lor în cufere, câte $9$ pe fiecare linie a fișierului, de la primul cufăr până la ultimul, în cadrul fiecărui cufăr de la primul rând până la al treilea, iar în cadrul fiecărui rând de la stânga la dreapta.
\
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Restricții și precizări
* $c \in \{1,2\}$;
* $1 \leq n \leq 10 \ 000$;
* Eticheta unui obiect este cuprinsă intre $10$ și $99$, inclusiv.
* În cazul cerinței $2$, se vor afișa etichetele pentru toate compartimentele, chiar dacă ele sunt goale sau provin din cufere complet goale.
* Pentru $40$ de puncte, $c = 1$;
* Pentru $60$ de puncte, $c = 2$.

---

Example:
`cufere.in`
```
1
2
1488 1573 1437 4465 1099 1073 0 499 765
537 1173 4288 1273 2299 1555 1241 655 841
1141 237 5621 199 921 621 3465 1315 4155
1099 341 4765 6155 355 1099 6088 3988 255
4955 155 1329 1932 3099 114 3020 855 5555
1173 1388 673 2533 1488 1473 4033 2099 2065
```

`cufere.out`
```
14 1
15 13
20 30
21 71
29 13
32 19
33 65
37 21
41 34
55 241
65 152
73 79
88 182
99 107
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Code to solve the programming challenge

def is_fragile(label):
    return label in {11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    return lines

def write_output(filename, content):
    with open(filename, 'w') as file:
        for line in content:
            file.write(' '.join(str(x) for x in line) + '\n')

def solve_task1(sorted_items):
    distinct_labels = sorted(set(item[1] for item in sorted_items))
    label_counts = [(label, sum(item[0] for item in sorted_items if item[1] == label)) for label in distinct_labels]
    return label_counts

def solve_task2(sorted_items, n):
    MAX_FRAGILE = 16
    MAX_DURABLE = 64
    inventory = [[0 for _ in range(9)] for _ in range(3*n)]
    row, col, chest = 0, 0, 0

    for count, label in sorted_items:
        while count > 0:
            max_count = MAX_FRAGILE if is_fragile(label) else MAX_DURABLE
            to_fill = min(count, max_count)
            inventory[chest*3 + row][col] = int(f"{to_fill}{label}")
            count -= to_fill
            col += 1
            if col == 9:
                col = 0
                row += 1
            if row == 3:
                row = 0
                chest += 1
    return inventory

def main():
    lines = read_input("cufere.in")
    task, n = int(lines[0]), int(lines[1])
    items = []
    for line in lines[2:]:
        items.extend(int(x) for x in line.split())

    sorted_items = sorted(((x//100, x%100) for x in items if x != 0), key=lambda x: x[1])
    
    if task == 1:
        result = solve_task1(sorted_items)
        write_output("cufere.out", [[x[0], x[1]] for x in result])
    elif task == 2:
        result = solve_task2(sorted_items, n)
        write_output("cufere.out", result)

main()
```

This Python code snippet represents a solution to the programming challenge. It defines a series of functions to handle input/output and the logic required to solve both tasks 1 and 2 of the challenge. The `main` function orchestrates reading the input, processing it, and writing the output based on the task requirements. Note that this code expects the input file `cufere.in` to exist in the same directory as the script and will write the output to `cufere.out` file in the same directory.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
2
1488 1573 1437 4465 1099 1073 0 499 765
537 1173 4288 1273 2299 1555 1241 655 841
1141 237 5621 199 921 621 3465 1315 4155
1099 341 4765 6155 355 1099 6088 3988 255
4955 155 1329 1932 3099 114 3020 855 5555
1173 1388 673 2533 1488 1473 4033 2099 2065
```
Expected output:
```
114 1315 3020 6421 721 1329 1932 6433 133
1637 537 1641 1641 241 6455 6455 6455 4955
6465 6465 2465 1673 1673 1673 1673 1573 6488
6488 5488 6499 4399 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
```
Found output:
```
114 1315 3020 5621 921 621 1329 1932 2533
4033 1437 537 237 1241 841 1141 341 1555
655 4155 6155 355 255 4955 155 855 5555
4465 765 3465 4765 2065 1573 1073 1173 1273
1173 673 1473 1488 4288 6088 3988 1388 1488
1099 499 2299 199 1099 1099 3099 2099 0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the output does not match the expected result because of an issue in the logic used to distribute the objects into the compartments. From the expected output, we can see that the objects are not just sorted by their labels, but also grouped by the maximum quantity possible for fragile and durable objects (16 for fragile, 64 for durable), and then arranged within the chests following the specified order.

To fix the code:

1. Each object needs to be grouped by its label and the count of objects totaled.
2. For each label, we have to distribute the objects respecting the maximum stack size for fragile or durable items.
3. We have to fill the cufere (chests) following the specified order.

Let's rewrite the solution incorporating these changes:

```python
def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num**0.5)+1):
        if num % i == 0:
            return False
    return True

def read_data():
    with open('cufere.in', 'r') as fin:
        task = int(fin.readline().strip())
        n = int(fin.readline().strip())
        compartments = [list(map(int, fin.readline().split())) for _ in range(3*n)]
    return task, n, compartments

def write_data(data):
    with open('cufere.out', 'w') as fout:
        for item in data:
            fout.write(' '.join(map(str, item)) + '\n')

def process_compartments(compartments):
    items = {}
    for comp in compartments:
        for num in comp:
            if num == 0:
                continue
            quantity, label = divmod(num, 100)
            items[label] = items.get(label, 0) + quantity
    return items

def task1(items):
    return sorted((label, count) for label, count in items.items())

def task2(items, n):
    sorted_items = sorted(((label, count) for label, count in items.items()), key=lambda x: x[0])
    result = [[0]*9 for _ in range(3*n)]
    chest, row, col = 0, 0, 0
    for label, total in sorted_items:
        max_stack = 16 if is_prime(label) else 64
        while total > 0:
            stack = min(total, max_stack)
            result[chest*3 + row][col] = stack*100 + label
            total -= stack
            col += 1
            if col > 8:
                col = 0
                row += 1
            if row > 2:
                row = 0
                chest += 1
    return result

def main():
    task, n, compartments = read_data()
    items = process_compartments(compartments)
    if task == 1:
        result = task1(items)
    else:
        result = task2(items, n)
    write_data(result)

main()
```

This revised solution processes the compartments to count the total number of each item first. Then it either sorts and writes these totals for task 1 or arranges the objects in the compartments for task 2, observing the maximum stack sizes and the specified order of placement. After implementing these changes, the code should produce the correct output for both tasks.
