---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from math import prod, isqrt
from collections import defaultdict

# Efficient function to check if a number is a perfect power
def is_perfect_power(x, n):
    root = int(round(x**(1/n)))
    return root ** n == x

# Fast prime factorization using trial division
def prime_factors(n):
    factors = defaultdict(int)
    # Count the number of 2s that divide n
    while n % 2 == 0:
        factors[2] += 1
        n //= 2
    # n must be odd at this point
    for i in range(3, isqrt(n) + 1, 2):
        # While i divides n, save i and divide n
        while n % i == 0:
            factors[i] += 1
            n //= i
    # If n is a prime number greater than 2
    if n > 2:
        factors[n] += 1
    return factors

# Read input
with open('expresie.in', 'r') as fin:
    m = int(next(fin).strip())
    n = int(next(fin).strip())
    nums = list(map(int, next(fin).strip().split()))

# Calculate the product and check if it's a perfect power
product = prod(nums)
is_perfect = is_perfect_power(product, m)

# Write output
with open('expresie.out', 'w') as fout:
    if not is_perfect:
        fout.write('0\n')
    else:
        fout.write('1\n')
        # Find the m-th root of the product
        root_m = int(product ** (1/m))
        # Get the prime factors of the root
        factors = prime_factors(root_m)
        for prime, exp in sorted(factors.items()):
            fout.write(f'{prime} {exp}\n')
```
