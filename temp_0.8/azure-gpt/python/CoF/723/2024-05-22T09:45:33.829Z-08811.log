---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient solution to factorize and check if root is a natural number

from math import sqrt, isqrt, gcd
from collections import defaultdict

# Function to factorize the number
def factorize(number):
    factors = defaultdict(int)
    for i in range(2, isqrt(number) + 1):
        while number % i == 0:
            factors[i] += 1
            number //= i
    if number > 1:
        factors[number] += 1
    return factors

# Read input data
with open('expresie.in', 'r') as file:
    m = int(file.readline().strip())
    n = int(file.readline().strip())
    numbers = list(map(int, file.readline().split()))

# Compute the product and check if its m-th root is a natural number
root_is_natural = True
final_factors = defaultdict(int)

for number in numbers:
    for prime, power in factorize(number).items():
        final_factors[prime] += power

for prime in final_factors:
    if final_factors[prime] % m != 0:
        root_is_natural = False
        break

# Write output data
with open('expresie.out', 'w') as file:
    if not root_is_natural:
        file.write('0\n')
    else:
        file.write('1\n')
        for prime in sorted(final_factors):
            if (power := final_factors[prime] // m) > 0:
                file.write(f'{prime} {power}\n')
```

This solution reads the input, factorizes each number, aggregates the factors, checks if the m-th root is a natural number, and if so, outputs the prime factorization of the root in the required format.
