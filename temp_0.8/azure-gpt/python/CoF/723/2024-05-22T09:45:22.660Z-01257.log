---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient code to solve the challenge

from math import prod, isqrt
from collections import defaultdict

# Function to check if a number is a perfect power of m
def is_perfect_power(number, m):
    root = int(round(number ** (1 / m)))
    return root ** m == number

# Function to prime factorize a number
def prime_factors(n):
    pf = {}
    # Count the number of times 2 divides the number
    while n % 2 == 0:
        pf[2] = pf.get(2, 0) + 1
        n //= 2
    # n must be odd at this point, so a skip of 2 can be used
    for i in range(3, isqrt(n) + 1, 2):
        # While i divides n, count and divide by i
        while n % i == 0:
            pf[i] = pf.get(i, 0) + 1
            n //= i
    # If n is a prime number greater than 2
    if n > 2:
        pf[n] = pf.get(n, 0) + 1
    return pf

# Read data from file
with open('expresie.in', 'r') as file:
    m = int(file.readline().strip())
    n = int(file.readline().strip())
    numbers = list(map(int, file.readline().strip().split()))

# Calculate the product of the numbers
product = prod(numbers)

# Check if the root is an integer and if it is a perfect power of m
if is_perfect_power(product, m):
    # Calculate the prime factors of the root
    root = int(product ** (1 / m))
    factors = prime_factors(root)
    # Write the result to the file
    with open('expresie.out', 'w') as file:
        file.write('1\n')
        for factor, exponent in sorted(factors.items()):
            file.write(f'{factor} {exponent}\n')
else:
    # Write 0 to the file if the root is not an integer
    with open('expresie.out', 'w') as file:
        file.write('0\n')
```
