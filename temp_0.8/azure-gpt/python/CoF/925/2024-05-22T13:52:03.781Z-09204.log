---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `datorii.in` and write to `datorii.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o țară îndepărtată, economia este în criză. Cea mai mare problemă este lipsa de capital care creează blocaje financiare. De exemplu, o firmă $X$ poate avea datorii către o firmă $Y$ pe care nu le poate plăti, deoarece o altă firmă $Z$ are datorii către firma $X$ pe care nu le-a plătit, ș.a.m.d.

Există o listă cu toate datoriile firmelor sub forma următoare: $X > Y \ S$, cu semnificația “firma $X$ datorează firmei $Y$ suma $S$”. Este posibil ca $X$ să aibă mai multe datorii la firma $Y$ (în funcție de contractele derulate împreună) sau chiar ca $X$ să aibă datorii la $Y$ și $Y$ să aibă datorii la $X$.

# Cerință

Cunoscând lista cu datoriile firmelor, scrieți un program care să rezolve următoarele cerințe:

1. Determină numărul de firme distincte care apar în această listă;
2. Realizează o situație financiară a firmelor distincte din această listă, scrise în ordine lexicografică; pentru fiecare firmă se vor determina două valori $SD \ SP$, unde $SD$ reprezintă suma totală a datoriilor pe care firma le are către alte firme, iar $SP$ este totalul sumelor pe care firma trebuie să le primească de la alte firme.

# Date de intrare


Fișierul de intrare `datorii.in` conține pe prima linie un număr natural $C$ reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$). Pe a doua linie se află un număr natural $D$ care reprezintă numărul de înregistrări existente în lista datoriilor firmelor. Pe următoarele $D$ linii sunt descrise datoriile firmelor, în forma specificată în enunț, câte o datorie pe o linie.


# Date de ieșire

Fișierul de ieșire `datorii.out` va conține răspunsul la cerința $C$ specificată în fișierul de intrare. Dacă $C = 1$ fișierul va conține un număr natural, reprezentând numărul de firme distincte care apar în lista menționată. Dacă $C = 2$ fișierul va conține pentru fiecare dintre firmele distincte din lista menționată câte un singur triplet de forma $X \ SD \ SP$, unde $X$ este numele firmei, iar $SD$ și $SP$ au semnificația din enunț pentru firma $X$; tripletele vor fi scrise astfel încât numele firmelor să apară în ordine lexicografică, fiecare triplet pe câte o linie a fișierului, iar $X$, $SD$ și $SP$ vor fi separate prin câte un singur spațiu.


# Restricții și precizări

* Există în total cel mult $6 \ 000$ de firme distincte în lista menționată de datorii.
* Numele unei firme este format din maximum $20$ de caractere (litere mari și mici ale alfabetului englez, cifre, spații); se face distincție între literele mari și literele mici în numele firmelor; nu există alte restricții referitoare la numele firmelor.
* Două firme distincte au nume distincte. O firmă nu poate avea datorii la ea însăși.
* În descrierea unei datorii ($X > Y \ S$) există un singur spațiu între $X$ și >, un singur spațiu între > și $Y$, respectiv un singur spațiu între $Y$ și $S$.
* $1 \leq D \leq 80 \ 000$;
* Sumele datorate de firme sunt numere naturale nenule $\leq 10^6$;
* Dacă $X$ și $Y$ sunt numele a două firme distincte, iar $k$ ($k \geq 0$) este valoarea maximă cu proprietatea că secvența formată din primele $k$ caractere din $X$ este identică cu secvența formată din primele caractere din $Y$, spunem că $X$ precedă din punct de vedere lexicografic pe $Y$ dacă $X$ are doar $k$ caractere sau dacă al ($k + 1$)-lea caracter din $X$ este mai mic decât al ($k + 1$)-lea caracter din $Y$.
* Pentru teste valorând $30$ de puncte cerința este $1$.
* Pentru teste valorând $60$ de puncte cerința este $2$.
* Pentru teste valorând $40$ de puncte $D \leq 1 \ 000$.
* Pentru teste valorând $45$ de puncte numele firmelor nu conțin spații.

---

Example:
`datorii.in`
```
1
4
Vasile Inc > Anatolia 100
ana > Anatolia 10
ana > Vasilescu Inc 5
Popa25 PF > Anatolia 30
```

`datorii.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# datorii.py

def read_input(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    return lines

def parse_debts(lines):
    debts = {}
    for line in lines[1:]:
        debitor, creditor, amount = line.split()
        amount = int(amount)
        if debitor not in debts:
            debts[debitor] = {'owes': 0, 'owed': 0}
        if creditor not in debts:
            debts[creditor] = {'owes': 0, 'owed': 0}
        debts[debitor]['owes'] += amount
        debts[creditor]['owed'] += amount
    return debts

def write_output(file_path, result, task):
    with open(file_path, 'w') as file:
        if task == 1:
            file.write(str(result))
        else:
            for company in sorted(result.keys()):
                file.write(f"{company} {result[company]['owes']} {result[company]['owed']}\n")

def main():
    lines = read_input('datorii.in')
    task = int(lines[0].strip())
    debts = parse_debts(lines[2:])
    
    if task == 1:
        distinct_companies = len(debts)
        write_output('datorii.out', distinct_companies, task)
    else:
        write_output('datorii.out', debts, task)

if __name__ == "__main__":
    main()
```

You need to save this code to a file named `datorii.py`, and then run it in an environment where the `datorii.in` file is available in the same directory. Upon execution, the script will read from `datorii.in`, perform the necessary computations, and write the result to `datorii.out` as per the challenge requirements.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 41, in <module>
    main()
  File "/app/app.py", line 32, in main
    debts = parse_debts(lines[2:])
            ^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 11, in parse_debts
    debitor, creditor, amount = line.split()
    ^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: too many values to unpack (expected 3)

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error occurs because there is an assumption in `parse_debts` that all lines contain exactly three values to unpack, but some company names may contain spaces, leading to more values being split. To fix this, I will modify the `parse_debts` function to handle company names with spaces.

Here's the corrected code, which should be saved to `datorii.py`:

```python
# datorii.py

def read_input(file_path):
    with open(file_path, 'r') as file:
        task = int(file.readline().strip())
        num_debts = int(file.readline().strip())
        debts = [file.readline().strip() for _ in range(num_debts)]
    return task, debts

def parse_debts(debts):
    company_debts = {}
    for debt in debts:
        parts = debt.rsplit(' ', 1)
        debitor_creditor = parts[0].rsplit(' > ', 1)
        debitor = debitor_creditor[0]
        creditor = debitor_creditor[1]
        amount = int(parts[1])

        if debitor not in company_debts:
            company_debts[debitor] = {'owes': 0, 'owed': 0}
        if creditor not in company_debts:
            company_debts[creditor] = {'owes': 0, 'owed': 0}
        company_debts[debitor]['owes'] += amount
        company_debts[creditor]['owed'] += amount
    return company_debts

def write_output(file_path, task, result):
    with open(file_path, 'w') as file:
        if task == 1:
            file.write(f"{result}\n")
        else:
            for company in sorted(result):
                file.write(f"{company} {result[company]['owes']} {result[company]['owed']}\n")

def main():
    task, debts = read_input('datorii.in')
    parsed_debts = parse_debts(debts)
    
    if task == 1:
        distinct_companies = len(parsed_debts)
        write_output('datorii.out', task, distinct_companies)
    else:
        write_output('datorii.out', task, parsed_debts)

if __name__ == "__main__":
    main()
```

In this fix, I've changed the `read_input` function to return the task and the debts as separate variables and updated the `parse_debts` function to properly handle company names with spaces. The `write_output` function now takes in the task as a separate argument to determine the output format. This code should handle company names with spaces correctly and adhere to the input/output requirements. Make sure you have the `datorii.in` file in the same directory before running the script.
