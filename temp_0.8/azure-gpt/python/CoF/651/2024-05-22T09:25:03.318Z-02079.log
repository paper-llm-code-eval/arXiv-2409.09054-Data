---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cmmdc.in` and write to `cmmdc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir $a_1, a_2, \dots, a_n$  de numere naturale nenule.

# Cerință

Să se determine răspunsul pentru una dintre următoarele cerințe:

1. Cel mai mare divizor comun al celor $n$ numere.
2. Cel mai mare divizor comun care se poate obține alegând exact $n - 1$ elemente din șir.
3. Cel mai mare divizor comun care se poate obține alegând exact $n - 2$ elemente din șir.

# Date de intrare

Fișierul de intrare `cmmdc.in` conține pe prima linie un număr natural $T$ reprezentând cerința cerută ($1$, $2$ sau $3$), pe a doua linie se află numărul natural nenul $n$, iar pe următoarele $n$ linii se găsesc, câte un numărul pe fiecare linie, cele $n$ elemente ale șirului.

# Date de ieșire

În fișierul `cmmdc.out` se va afișa răspunsul pentru cerința cerută.

# Restricții și precizări

* $2 \leq a_i \leq 2^{63} - 1$ oricare $1 \leq i \leq n$ (numerele sunt de tip `long long`)

|#|Punctaj|Restricții|
|-|-|--------|
|1|16|$T = 1$, $3 \leq n \leq 100 \ 000$ și $a_i \leq 50 \ 000 \ 000$, pentru $1 \leq i \leq n$|
|2|20|$T = 1$ și $3 \leq n \leq 100 \ 000$|
|3|21|$T = 2$ și $3 \leq n \leq 3 \ 000$|
|4|21|$T = 2$ și $3 \leq n \leq 100 \ 000$|
|5|12|$T = 3$ și $3 \leq n \leq 300$|
|6|10|$T = 3$ și $3 \leq n \leq 2 \ 000$|

---

Example:
`cmmdc.in`
```
1
5
48
40
20
16
80
```

`cmmdc.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from math import gcd
from functools import reduce

def compute_gcd(numbers):
    return reduce(gcd, numbers)

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    T = int(lines[0].strip())
    n = int(lines[1].strip())
    numbers = [int(line.strip()) for line in lines[2:]]
    return T, n, numbers

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def main():
    T, n, numbers = read_input('cmmdc.in')

    if T == 1:
        result = compute_gcd(numbers)
    elif T == 2 and n >= 3:
        # Approach for T=2: Calculate the gcd excluding one element at a time
        result = 0
        for i in range(n):
            temp_numbers = numbers[:i] + numbers[i+1:]
            current_gcd = compute_gcd(temp_numbers)
            result = max(result, current_gcd)
    elif T == 3 and n >= 4:
        # Approach for T=3: Calculate the gcd excluding two elements at a time
        result = 0
        for i in range(n):
            for j in range(i+1, n):
                temp_numbers = numbers[:i] + numbers[i+1:j] + numbers[j+1:]
                current_gcd = compute_gcd(temp_numbers)
                result = max(result, current_gcd)
    else:
        result = 0

    write_output('cmmdc.out', result)

if __name__ == '__main__':
    main()
```

This code first defines a function to compute the gcd of a list of numbers. It then reads input from `cmmdc.in` and processes it according to the value of `T`. For `T=1`, it simply computes the gcd of all numbers. For `T=2` and `T=3`, it computes the gcd by excluding one or two elements respectively and finds the maximum gcd. Finally, it writes the result to `cmmdc.out`.
