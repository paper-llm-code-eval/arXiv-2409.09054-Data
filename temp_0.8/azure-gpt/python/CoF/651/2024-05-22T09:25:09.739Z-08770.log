---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cmmdc.in` and write to `cmmdc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir $a_1, a_2, \dots, a_n$  de numere naturale nenule.

# Cerință

Să se determine răspunsul pentru una dintre următoarele cerințe:

1. Cel mai mare divizor comun al celor $n$ numere.
2. Cel mai mare divizor comun care se poate obține alegând exact $n - 1$ elemente din șir.
3. Cel mai mare divizor comun care se poate obține alegând exact $n - 2$ elemente din șir.

# Date de intrare

Fișierul de intrare `cmmdc.in` conține pe prima linie un număr natural $T$ reprezentând cerința cerută ($1$, $2$ sau $3$), pe a doua linie se află numărul natural nenul $n$, iar pe următoarele $n$ linii se găsesc, câte un numărul pe fiecare linie, cele $n$ elemente ale șirului.

# Date de ieșire

În fișierul `cmmdc.out` se va afișa răspunsul pentru cerința cerută.

# Restricții și precizări

* $2 \leq a_i \leq 2^{63} - 1$ oricare $1 \leq i \leq n$ (numerele sunt de tip `long long`)

|#|Punctaj|Restricții|
|-|-|--------|
|1|16|$T = 1$, $3 \leq n \leq 100 \ 000$ și $a_i \leq 50 \ 000 \ 000$, pentru $1 \leq i \leq n$|
|2|20|$T = 1$ și $3 \leq n \leq 100 \ 000$|
|3|21|$T = 2$ și $3 \leq n \leq 3 \ 000$|
|4|21|$T = 2$ și $3 \leq n \leq 100 \ 000$|
|5|12|$T = 3$ și $3 \leq n \leq 300$|
|6|10|$T = 3$ și $3 \leq n \leq 2 \ 000$|

---

Example:
`cmmdc.in`
```
1
5
48
40
20
16
80
```

`cmmdc.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to compute the GCD (Greatest Common Divisor) using the Euclidean algorithm
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Read from cmmdc.in
with open('cmmdc.in', 'r') as file:
    T = int(file.readline().strip())
    n = int(file.readline().strip())
    numbers = [int(file.readline().strip()) for _ in range(n)]

# Based on T, compute the answer
if T == 1:
    # Find the GCD of all numbers
    answer = numbers[0]
    for num in numbers[1:]:
        answer = gcd(answer, num)
elif T == 2 and n <= 3000:
    # Find the GCD of all numbers except one
    # Since n is small enough, we can afford to remove each number and calculate the GCD of the rest
    answer = 0
    for i in range(n):
        temp_numbers = numbers[:i] + numbers[i+1:]
        current_gcd = temp_numbers[0]
        for num in temp_numbers[1:]:
            current_gcd = gcd(current_gcd, num)
        answer = max(answer, current_gcd)
elif T == 2:
    # For larger n, we use prefix and suffix arrays
    prefix_gcd = [0] * n
    suffix_gcd = [0] * n
    prefix_gcd[0] = numbers[0]
    suffix_gcd[-1] = numbers[-1]

    for i in range(1, n):
        prefix_gcd[i] = gcd(prefix_gcd[i-1], numbers[i])
        suffix_gcd[n-i-1] = gcd(suffix_gcd[n-i], numbers[n-i-1])

    answer = suffix_gcd[1]
    for i in range(1, n-1):
        answer = max(answer, gcd(prefix_gcd[i-1], suffix_gcd[i+1]))
    answer = max(answer, prefix_gcd[-2])
elif T == 3:
    # Find the GCD of all numbers except two
    # For small n, check all pairs
    answer = 0
    for i in range(n):
        for j in range(i+1, n):
            temp_numbers = numbers[:i] + numbers[i+1:j] + numbers[j+1:]
            current_gcd = temp_numbers[0]
            for num in temp_numbers[1:]:
                current_gcd = gcd(current_gcd, num)
            answer = max(answer, current_gcd)

# Write to cmmdc.out
with open('cmmdc.out', 'w') as file:
    file.write(str(answer))
```
