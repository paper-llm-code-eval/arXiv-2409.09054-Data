---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `excel.in` and write to `excel.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel, elev în clasa a VII-a, pasionat de aplicațiile informatice, s-a gândit să-și facă un program care să simuleze cunoscutul produs Excel. Zis și făcut, s-a pus pe treabă și într-o oră a reușit să realizeze un program asemănător Excel-ului, dar care, spre deosebire de original, nu poate face decât o singură operație în celulele sale: suma. Încercați și dumneavoastră să realizați isprava lui Gigel!
Reamintim că o foaie de calcul în Excel se prezintă sub forma unei suprafețe liniate cu linii orizontale și verticale. Prin intersecția lor rezultă dreptunghiuri (numite celule), fiecare celulă având un nume format dintr-o literă și un număr, reprezentând coloana, respectiv linia pe care se află.

~[excel.png|align=center|width=45em]

De exemplu, celula din stânga sus este $A1$, urmată, pe linie, de $B1, C1$, etc. Introducerea unei formule într-o celulă începe întotdeauna cu semnul `=`. De exemplu dacă în celula `C2` scriem `=A2+B2` înseamnă că în această celulă se va scrie rezultatul adunării valorilor din celulele $A2$ și $B2$. Pot exista și celule cu formula `=A5` ceea ce înseamnă că în celula respectivă vom avea un rezultat egal cu cel din celula $A5$. Fiind abia la început și în ceea ce privește programarea și în ceea ce privește aplicația Excel, Gigel se gândește ca programul său să completeze celulele începând cu prima coloană, apoi a doua etc., astfel că formulele care pot apărea în celula ($col$, $lin$) pot folosi datele din coloanele $1$ până la $col-1$ și din celulele aflate pe liniile $1$ până la $lin-1$ din coloana $col$.

# Cerință

Dându-se o foaie de calcul să se înlocuiască toate formulele care apar, prin rezultatele obținute respectând cerințele date în text.

# Date de intrare

Fișierul `excel.in` are pe prima linie două valori $m \ n$, separate printr-un spațiu, reprezentând numărul de coloane, respectiv de linii ale foii de calcul. Pe următoarele $n$ linii se descriu cele $m$ coloane ale foii. O descriere poate fi formată din valori întregi pozitive sau formule separate printr-un singur spațiu. Formulele sunt șiruri de caractere care încep întotdeauna cu semnul `=`. Fișierul de intrare se consideră corect, în sensul că operațiile care apar se pot executa, iar foaia de calcul se poate completa.

# Date de ieșire

Fișierul `excel.out` va conține $n$ linii, pe fiecare linie câte $m$ valori reprezentând rezultatul final al operațiilor realizate în foaia de calcul.

# Restricții și precizări

* $0$ < numărul de coloane $\leq 26$, notate de la `A` la `Z`;
* $0$ < numărul de linii $\leq 50$;
* fiecare linie ce descrie foaia Excel are o lungime maximă $< 256$;
* fiecare valoare numerică din foaia de calcul inițială este un număr pozitiv $\leq 100$;
* formulele care pot să apară în celule se referă doar la operația de adunare.

---

Example:
`excel.in`
```
4 3
11 21 =A1+A2 =A3
10 15 =B1+B2 =A2+B1
=A1+A2 14 21 3
```

`excel.out`
```
11 21 21 21
10 15 36 31
21 14 21 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read data from the input file
with open('excel.in', 'r') as fin:
    m, n = map(int, fin.readline().split())
    sheet = [fin.readline().split() for _ in range(n)]

# Function to evaluate the formulas
def evaluate(cell):
    if isinstance(cell, int):
        return cell
    elif cell[0] != '=':
        return int(cell)
    else:
        operands = cell[1:].split('+')
        return sum(sheet[int(operand[1:]) - 1][ord(operand[0]) - ord('A')] for operand in operands)

# Compute the results
for i in range(n):
    for j in range(m):
        sheet[i][j] = evaluate(sheet[i][j])

# Write results to the output file
with open('excel.out', 'w') as fout:
    for row in sheet:
        fout.write(' '.join(map(str, row)) + '\n')
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 19, in <module>
    sheet[i][j] = evaluate(sheet[i][j])
                  ^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 14, in evaluate
    return sum(sheet[int(operand[1:]) - 1][ord(operand[0]) - ord('A')] for operand in operands)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: unsupported operand type(s) for +: 'int' and 'str'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error occurred because the `evaluate` function is trying to sum up values before they are converted to integers. When a cell is a reference to another cell, we need to recursively evaluate it first. The initial function is trying to sum strings that represent cell references, which causes a `TypeError`. 

To fix the issue, we need to ensure that references are fully evaluated before summing their values. Here is the corrected solution:

```python
def evaluate(cell, sheet):
    if isinstance(cell, int):
        return cell
    elif cell.startswith('='):
        operands = cell[1:].split('+')
        return sum(evaluate(sheet[ord(operand[0]) - ord('A')][int(operand[1:]) - 1], sheet) for operand in operands)
    else:
        return int(cell)

# Read data from the input file
with open('excel.in', 'r') as fin:
    m, n = map(int, fin.readline().split())
    sheet = [fin.readline().split() for _ in range(n)]

# Convert all formulas and strings to integers
for i in range(n):
    for j in range(m):
        if sheet[i][j].startswith('=') or sheet[i][j].isdigit():
            sheet[i][j] = evaluate(sheet[i][j], sheet)

# Write results to the output file
with open('excel.out', 'w') as fout:
    for row in sheet:
        fout.write(' '.join(map(str, row)) + '\n')
```

This updated code includes a corrected `evaluate` function that can process both numeric values and formulas properly, handling references to other cells recursively. When it encounters a formula, it parses the references, evaluates them, and sums up their values. The main loop has been modified to ensure all cells are evaluated before they are written to the output file.
---------- user ----------


Program result did not match expected result.
Input data:
```
4 3
11 21 =A1+A2 =A3
10 15 =B1+B2 =A2+B1
=A1+A2 14 21 3
```
Expected output:
```
11 21 21 21
10 15 36 31
21 14 21 3
```
Found output:
```
11 21 32 32
10 15 25 31
32 14 21 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution does not properly handle the dependencies between cells because it attempts to evaluate formulas in the order they are read from the file. However, as specified in the challenge, when evaluating cell (col, lin), we can only use data from columns 1 to col-1 and rows 1 to lin-1 in column col. So we need to evaluate cells in a top-down and left-to-right order.

Let's correct the algorithm to respect this dependency:

```python
# Read data from the input file
with open('excel.in', 'r') as fin:
    m, n = map(int, fin.readline().split())
    sheet = [fin.readline().split() for _ in range(n)]

# Function to evaluate a cell's formula
def evaluate_formula(formula, sheet):
    # Remove the '=' and split by '+'
    parts = formula[1:].split('+')
    total = 0
    for part in parts:
        col = ord(part[0]) - ord('A')
        row = int(part[1:]) - 1
        total += evaluate_cell(row, col, sheet)
    return total

# Function to evaluate a cell's value or formula
def evaluate_cell(row, col, sheet):
    value_or_formula = sheet[row][col]
    # If it's an integer, return it
    if isinstance(value_or_formula, int):
        return value_or_formula
    # If it's a formula, evaluate it
    if value_or_formula.startswith('='):
        value = evaluate_formula(value_or_formula, sheet)
        # Store computed value to avoid re-computation
        sheet[row][col] = value
        return value
    # It's an integer in string form, convert and return
    value = int(value_or_formula)
    sheet[row][col] = value
    return value

# Evaluate the entire sheet
for i in range(n):
    for j in range(m):
        sheet[i][j] = evaluate_cell(i, j, sheet)

# Write the evaluated sheet to the output file
with open('excel.out', 'w') as fout:
    for row in sheet:
        fout.write(' '.join(map(str, row)) + '\n')
```

This solution iterates over each cell in a top-down and left-to-right order, evaluating each cell as needed. If the cell contains a formula, the `evaluate_formula` function is called, which parses the formula and sums the values of the referenced cells, which have already been evaluated. The computed value is stored in the cell to avoid re-evaluating it in the future. If the cell contains a number, it is simply converted to an integer. The evaluated sheet is then written to the output file.
