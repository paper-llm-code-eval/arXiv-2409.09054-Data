---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `excel.in` and write to `excel.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel, elev în clasa a VII-a, pasionat de aplicațiile informatice, s-a gândit să-și facă un program care să simuleze cunoscutul produs Excel. Zis și făcut, s-a pus pe treabă și într-o oră a reușit să realizeze un program asemănător Excel-ului, dar care, spre deosebire de original, nu poate face decât o singură operație în celulele sale: suma. Încercați și dumneavoastră să realizați isprava lui Gigel!
Reamintim că o foaie de calcul în Excel se prezintă sub forma unei suprafețe liniate cu linii orizontale și verticale. Prin intersecția lor rezultă dreptunghiuri (numite celule), fiecare celulă având un nume format dintr-o literă și un număr, reprezentând coloana, respectiv linia pe care se află.

~[excel.png|align=center|width=45em]

De exemplu, celula din stânga sus este $A1$, urmată, pe linie, de $B1, C1$, etc. Introducerea unei formule într-o celulă începe întotdeauna cu semnul `=`. De exemplu dacă în celula `C2` scriem `=A2+B2` înseamnă că în această celulă se va scrie rezultatul adunării valorilor din celulele $A2$ și $B2$. Pot exista și celule cu formula `=A5` ceea ce înseamnă că în celula respectivă vom avea un rezultat egal cu cel din celula $A5$. Fiind abia la început și în ceea ce privește programarea și în ceea ce privește aplicația Excel, Gigel se gândește ca programul său să completeze celulele începând cu prima coloană, apoi a doua etc., astfel că formulele care pot apărea în celula ($col$, $lin$) pot folosi datele din coloanele $1$ până la $col-1$ și din celulele aflate pe liniile $1$ până la $lin-1$ din coloana $col$.

# Cerință

Dându-se o foaie de calcul să se înlocuiască toate formulele care apar, prin rezultatele obținute respectând cerințele date în text.

# Date de intrare

Fișierul `excel.in` are pe prima linie două valori $m \ n$, separate printr-un spațiu, reprezentând numărul de coloane, respectiv de linii ale foii de calcul. Pe următoarele $n$ linii se descriu cele $m$ coloane ale foii. O descriere poate fi formată din valori întregi pozitive sau formule separate printr-un singur spațiu. Formulele sunt șiruri de caractere care încep întotdeauna cu semnul `=`. Fișierul de intrare se consideră corect, în sensul că operațiile care apar se pot executa, iar foaia de calcul se poate completa.

# Date de ieșire

Fișierul `excel.out` va conține $n$ linii, pe fiecare linie câte $m$ valori reprezentând rezultatul final al operațiilor realizate în foaia de calcul.

# Restricții și precizări

* $0$ < numărul de coloane $\leq 26$, notate de la `A` la `Z`;
* $0$ < numărul de linii $\leq 50$;
* fiecare linie ce descrie foaia Excel are o lungime maximă $< 256$;
* fiecare valoare numerică din foaia de calcul inițială este un număr pozitiv $\leq 100$;
* formulele care pot să apară în celule se referă doar la operația de adunare.

---

Example:
`excel.in`
```
4 3
11 21 =A1+A2 =A3
10 15 =B1+B2 =A2+B1
=A1+A2 14 21 3
```

`excel.out`
```
11 21 21 21
10 15 36 31
21 14 21 3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def evaluate_cell(expression, grid, row, col):
    if expression.startswith('='):
        parts = expression[1:].split('+')
        total = 0
        for part in parts:
            col_index = ord(part[0]) - ord('A')
            row_index = int(part[1:]) - 1
            total += grid[row_index][col_index]
        return total
    else:
        return int(expression)

def process_excel_sheet(input_filename, output_filename):
    with open(input_filename, 'r') as file:
        cols, rows = map(int, file.readline().split())
        grid = []
        for _ in range(rows):
            grid.append(file.readline().split())

    for row in range(rows):
        for col in range(cols):
            grid[row][col] = evaluate_cell(grid[row][col], grid, row, col)

    with open(output_filename, 'w') as file:
        for row in grid:
            file.write(' '.join(map(str, row)) + '\n')

process_excel_sheet('excel.in', 'excel.out')
```

This Python code defines a function `evaluate_cell` to evaluate the content of an individual cell, whether it's a formula or a numeric value. Another function `process_excel_sheet` reads the input file, processes each cell, and writes the final results to the output file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 28, in <module>
    process_excel_sheet('excel.in', 'excel.out')
  File "/app/app.py", line 22, in process_excel_sheet
    grid[row][col] = evaluate_cell(grid[row][col], grid, row, col)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 8, in evaluate_cell
    total += grid[row_index][col_index]
TypeError: unsupported operand type(s) for +=: 'int' and 'str'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def evaluate_cell(expression, grid):
    if expression.startswith('='):
        parts = expression[1:].split('+')
        total = 0
        for part in parts:
            col_index = ord(part[0]) - ord('A')
            row_index = int(part[1:]) - 1
            total += int(grid[row_index][col_index])
        return total
    else:
        return int(expression)

def process_excel_sheet(input_filename, output_filename):
    with open(input_filename, 'r') as file:
        cols, rows = map(int, file.readline().split())
        grid = [next(file).split() for _ in range(rows)]

    for row in range(rows):
        for col in range(cols):
            grid[row][col] = evaluate_cell(grid[row][col], grid)

    with open(output_filename, 'w') as file:
        for row in grid:
            file.write(' '.join(map(str, row)) + '\n')

process_excel_sheet('excel.in', 'excel.out')
```

The `evaluate_cell` function now ensures that the result of evaluating a cell is an integer by converting the value retrieved from the grid before adding it to the total. The grid is now initialized by reading all the lines directly within the list comprehension. The fixed code processes the cells as required and writes the output to the specified file.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 26, in <module>
    process_excel_sheet('excel.in', 'excel.out')
  File "/app/app.py", line 20, in process_excel_sheet
    grid[row][col] = evaluate_cell(grid[row][col], grid)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 8, in evaluate_cell
    total += int(grid[row_index][col_index])
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: invalid literal for int() with base 10: '=A1+A2'

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error is due to attempting to convert a cell expression to an integer before it has been evaluated. This happens because the grid can contain unevaluated formulas at the time they are being used in other cell calculations. To fix this, we must ensure that all cells on which the current cell depends have been evaluated first.

Here is the corrected Python code:

```python
def evaluate_cell(expression, grid, evaluated_cells):
    if expression.startswith('='):
        parts = expression[1:].split('+')
        total = 0
        for part in parts:
            col_index = ord(part[0]) - ord('A')
            row_index = int(part[1:]) - 1
            if (row_index, col_index) not in evaluated_cells:
                grid[row_index][col_index] = evaluate_cell(grid[row_index][col_index], grid, evaluated_cells)
                evaluated_cells.add((row_index, col_index))
            total += grid[row_index][col_index]
        return total
    else:
        return int(expression)

def process_excel_sheet(input_filename, output_filename):
    with open(input_filename, 'r') as file:
        cols, rows = map(int, file.readline().split())
        grid = []
        for _ in range(rows):
            grid.append(file.readline().split())

    evaluated_cells = set()
    for row in range(rows):
        for col in range(cols):
            if (row, col) not in evaluated_cells:
                grid[row][col] = evaluate_cell(grid[row][col], grid, evaluated_cells)
                evaluated_cells.add((row, col))

    with open(output_filename, 'w') as file:
        for row in grid:
            file.write(' '.join(map(str, row)) + '\n')

process_excel_sheet('excel.in', 'excel.out')
```

This code introduces a set called `evaluated_cells` to keep track of cells that have been evaluated, ensuring that cells are evaluated in a proper order that respects their dependencies. When a cell's value is calculated, it's added to this set, and any subsequent references to it will use the evaluated value. This should handle the proper evaluation of cells with formulas that reference other cells.
