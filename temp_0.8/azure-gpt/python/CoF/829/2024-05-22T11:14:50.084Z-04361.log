---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `betasah.in` and write to `betasah.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Jocul **betasah** se joacă folosindu-se doar piese asemănătoare damelor clasicului șah, numite tot *dame*. Suprafața de joc are o formă triunghiulară și este formată din $N \cdot (N+1) / 2$ pătrate identice dispuse pe $N$ rânduri și $N$ coloane. Rândurile se numerotează de sus in jos, de la $1$ la $N$. Coloanele se numerotează de la stânga la dreapta, de la $1$ la $N$. Primul rând conține un singur pătrat, al doilea rând conține două pătrate alăturate, $\dots$, al $N$-lea rând conține $N$ pâtrate alăturate, ca în suprafețele de joc cu $N=6$ din figurile de mai jos. Din cele $N \cdot (N+1) / 2$ pătrate, $K$ sunt gri, iar restul sunt albe. Poziția fiecărui pătrat de pe suprafața de joc este dată de rândul și coloana în care acesta este situat.

~[betasah.png]

Pe suprafața de joc sunt așezate $D$ dame în $D$ pătrate albe distincte, ocupându-le. Într-un pătrat alb **poate fi așezată o singură damă**, iar într-un pătrat gri **nu poate fi așezată nicio damă**. Poziția unei dame pe suprafața de joc este dată de poziția pătratului alb în care este așezată damă.
Damele pot accesa orice pătrat alb neocupat situat pe direcțiile: verticală, orizontală sau diagonală, numerotate de la $1$ la $8$ în **figura $b$)**. Accesul pe o direcție se face trecând din pătrat alb în pătrat alb (doar pătrate albe neocupate) până la întâlnirea unui pătrat gri sau a unui pătrat alb ocupat de o altă damă sau până la terminarea suprafeței de joc.
Numim **pătrat accesibil** orice pătrat alb neocupat (de pe suprafața de joc) care ar putea fi accesat de cel puțin una din cele $D$ dame.
De exemplu, pentru suprafața de joc din **figura $c$)** numărul de pătrate accesibile (marcate cu $X$) de pe suprafață este $11$; pentru suprafața de joc cu $N=6, D=3$ și $K=4$ din **figura $d$)** numărul de pătrate accesibile de pe suprafață este $13$. În figura $e$) sunt marcate cu $X$ pătratele accesibile fiecărei dame de pe suprafața de joc din figura $d$).

~[betasah2.png]

# Cerință

Scrieți un program care să citească numerele naturale $N \ D \ K$, pozițiile damelor și ale pătratelor gri pe suprafața de joc și care să determine:

* numărul maxim $M$ de pătrate albe conținute de un rând al suprafeței de joc;
* numărul $P$ de pătrate accesibile de pe suprafața de joc.

# Date de intrare


Fișierul de intrare `betasah.in` conține:

* pe prima linie cele trei numere naturale $N \ D \ K$, separate prin câte un spațiu, cu semnificația din enunț;
* pe linia $i+1$ două numere naturale nenule $x_i \ y_i$, separate prin câte un spațiu, reprezentând poziția damei $i$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $i = 1,2,3,\dots,D$;
* pe linia $D+1+j$ două numere naturale nenule $z_j \ t_j$, separate printr-un singur spațiu, reprezentând poziția pătratului gri $j$ pe suprafața de joc (rândul $x_i$ și coloana $y_i$), pentru $j = 1, 2, 3, \dots , K$.


# Date de ieșire


Fișierul de ieșire `betasah.out` va conține pe prima linie numărul natural $M$ și pe a doua linie numărul natural $P$, cu semnificația din enunț.

# Restricții și precizări

* $2 \leq N \leq 1 \ 000$;
* $1 \leq D \leq 100$;
* $1 \leq K \leq 50$;
* $D + K \leq N \cdot (N+1) / 2$;
* $1 \leq y_i \leq xi \leq N$;
* $1 \leq t_j \leq zj \leq N$;
* numărul $M$ se va scrie obligatoriu pe prima linie a fișierului de ieșire `betasah.in`.
* numărul $P$ se va scrie obligatoriu pe a doua linie a fișierului de ieșire `betasah.out`.
* pentru rezolvarea corectă a cerinței $1$) se acordă $20$% din punctaj, iar pentru rezolvarea corectă a cerinței $2$) se acordă $80$% din punctaj.

---

Example:
`betasah.in`
```
6 3 4
3 2
5 2
5 4
3 1
4 3
6 4
1 1
```

`betasah.out`
```
5
13
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def get_accessible_squares(N, queens, grey_squares):
    accessible = set()
    board = [[True] * i for i in range(1, N + 1)]

    # Mark grey squares and queens
    for r, c in grey_squares + queens:
        board[r - 1][c - 1] = False

    # Check all directions for each queen
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]
    for queen in queens:
        qr, qc = queen
        qr, qc = qr - 1, qc - 1
        for dr, dc in directions:
            r, c = qr + dr, qc + dc
            while 0 <= r < len(board) and 0 <= c < len(board[r]) and board[r][c]:
                accessible.add((r + 1, c + 1))
                r += dr
                c += dc
    return accessible

# Read input data
with open('betasah.in', 'r') as file:
    N, D, K = map(int, file.readline().split())
    queens = [tuple(map(int, file.readline().split())) for _ in range(D)]
    grey_squares = [tuple(map(int, file.readline().split())) for _ in range(K)]

# Process
max_row_white = N  # Maximum number of white squares is when no grey square is in the last row
accessible_squares = get_accessible_squares(N, queens, grey_squares)

# Write output data
with open('betasah.out', 'w') as file:
    file.write(f"{max_row_white}\n")
    file.write(f"{len(accessible_squares)}\n")
```
```
This solution represents the board as a list of lists, with True indicating a white square and False indicating a square occupied by a queen or a grey square. It then calculates all accessible squares from each queen's position in all directions until it hits a non-white square or the edge of the board. The accessible squares are stored in a set to avoid duplicates. Finally, the output is written to 'betasah.out' as specified.
---------- user ----------


Expected program to write result to `betasah.out` and read from `betasah.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Function to check if a move is within the board and not blocked by a grey square or another queen
def is_valid_move(board, x, y, N):
    return 0 <= x < N and 0 <= y <= x and board[x][y] == 0

# Function to count accessible squares for each queen
def count_accessible_squares(board, queens, N):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (1, 1), (-1, 1), (1, -1)]
    accessible = set()
    for qx, qy in queens:
        for dx, dy in directions:
            x, y = qx, qy
            while is_valid_move(board, x + dx, y + dy, N):
                x += dx
                y += dy
                accessible.add((x, y))
    return len(accessible)

# Read input data from 'betasah.in'
with open('betasah.in', 'r') as file:
    N, D, K = map(int, file.readline().split())
    queens = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(D)]
    grey_squares = [tuple(map(lambda x: int(x) - 1, file.readline().split())) for _ in range(K)]

# Initialize board
board = [[0] * (i + 1) for i in range(N)]

# Place queens and grey squares on the board
for x, y in queens:
    board[x][y] = 1
for x, y in grey_squares:
    board[x][y] = 2

# Calculate the number of accessible squares
accessible_count = count_accessible_squares(board, queens, N)

# Calculate the maximum number of white squares in a row
max_row_white = max(len(row) - row.count(2) for row in board)

# Write output data to 'betasah.out'
with open('betasah.out', 'w') as file:
    file.write(f"{max_row_white}\n{accessible_count}\n")
```
This updated solution initializes the board with zeros (representing white squares), places queens with a value of 1, and grey squares with a value of 2. The `count_accessible_squares` function calculates, for each queen, the number of accessible squares by checking each of the eight directions until it hits a non-white square. The `is_valid_move` function checks whether a square is within the board limits and not blocked. The maximum number of white squares in any row is calculated by finding the row with the maximum count of zeros, and the count of accessible squares is output to `betasah.out`.
