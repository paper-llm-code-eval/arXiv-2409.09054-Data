---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from itertools import combinations

# Read the numbers from the file
with open('numere.in', 'r') as f:
    numbers = list(map(int, f.readline().split()))

# Helper function to calculate all possible submultime (subsets) summing to a target sum
def find_submultimi(numbers, target):
    for r in range(1, len(numbers)):
        for combo in combinations(numbers, r):
            if sum(combo) == target:
                return list(combo)
    return []

# Find all pairs of submultime with equal sum
pair_count = 0
max_sum = 0
max_pair = ([], [])

# Check each combination of numbers and keep track of the sum and pair with the highest sum
for i in range(1, 1 << len(numbers)):
    subset_a = [numbers[j] for j in range(len(numbers)) if (i & (1 << j))]
    subset_a_sum = sum(subset_a)
    remaining = [num for num in numbers if num not in subset_a]
    subset_b = find_submultimi(remaining, subset_a_sum)
    if subset_b:
        pair_count += 1
        if subset_a_sum > max_sum:
            max_sum = subset_a_sum
            max_pair = (subset_a, subset_b)

# Write the result to the file
with open('numere.out', 'w') as f:
    f.write(f"{pair_count} {max_sum}\n")
    f.write(' '.join(map(str, max_pair[0])) + '\n')
    f.write(' '.join(map(str, max_pair[1])) + '\n')
```

This code solves the challenge by first calculating all possible pairs of submultime with equal sum, and then selecting the pair that has the highest sum. The results are written to `numere.out` as required.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
115 276
78 97 69 32
60 49 86 71 10
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous code is that it overcounts the number of submultime pairs. It does not properly handle the distinctness of submultimi combinations, which leads to the same pairs being counted multiple times. The expected output suggests that we should have a total of 65 unique pairs, but the previous code finds 115 pairs due to redundant counting.

We will need to re-implement the solution with the following changes:
- Use a set to store unique submultimi pairs (since submultimi are interchangeable, we need a representation that disregards order).
- Optimize the search to avoid redundant calculations.

Below is the revised solution that implements these changes:

```python
from itertools import combinations

# Helper function to get a bitmask of numbers based on a subset
def bitmask(numbers, subset):
    return sum((1 << numbers.index(x)) for x in subset)

# Read the numbers from the file
with open('numere.in', 'r') as f:
    numbers = list(map(int, f.readline().split()))

# Initialize variables
all_subsets = {}
max_sum = 0
max_pair = ([], [])
pair_count = 0
unique_pairs = set()

# Generate all possible subsets of numbers with their sums
for r in range(1, len(numbers)):
    for combo in combinations(numbers, r):
        combo_sum = sum(combo)
        if combo_sum not in all_subsets:
            all_subsets[combo_sum] = []
        all_subsets[combo_sum].append(combo)

# Find all unique pairs of subsets with the same sum
for subset_sum in all_subsets:
    subsets = all_subsets[subset_sum]
    for i in range(len(subsets)):
        for j in range(i + 1, len(subsets)):
            if not bitmask(numbers, subsets[i]) & bitmask(numbers, subsets[j]):
                unique_pairs.add((subsets[i], subsets[j]))
                if subset_sum > max_sum:
                    max_sum = subset_sum
                    max_pair = (subsets[i], subsets[j])

pair_count = len(unique_pairs)

# Write the result to the file
with open('numere.out', 'w') as f:
    f.write(f"{pair_count} {max_sum}\n")
    f.write(' '.join(map(str, max_pair[0])) + '\n')
    f.write(' '.join(map(str, max_pair[1])) + '\n')
```

This code now uses a set (`unique_pairs`) to ensure that each pair of submultimi is unique and not counted more than once. It generates all possible non-empty subsets and records them by their sum. Then, it looks for pairs of subsets that have the same sum and no common elements (using bitwise representation to check for intersections). Finally, it writes the number of unique pairs and one pair with the max sum to the output file.
