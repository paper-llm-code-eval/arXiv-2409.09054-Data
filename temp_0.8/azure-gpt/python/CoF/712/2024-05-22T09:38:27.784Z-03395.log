---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read input numbers from "numere.in"
with open("numere.in", "r") as fin:
    numbers = list(map(int, fin.readline().split()))

# Function to generate all possible subset sums along with the subsets
def subset_sums(nums):
    subset_sum = {}
    n = len(nums)
    for i in range(1, 1 << n):
        subset = []
        current_sum = 0
        for j in range(n):
            if i & (1 << j):
                subset.append(nums[j])
                current_sum += nums[j]
        subset = tuple(sorted(subset))  # Convert to tuple for hashing
        if current_sum not in subset_sum:
            subset_sum[current_sum] = []
        subset_sum[current_sum].append(subset)
    return subset_sum

# Function to find the maximum sum and its subsets
def find_max_equal_subset_sum(subset_sum):
    max_sum = 0
    pair_count = 0
    max_sum_subsets = ([], [])
    for sum_value, subsets in subset_sum.items():
        if len(subsets) > 1:
            for i in range(len(subsets)):
                for j in range(i+1, len(subsets)):
                    if not set(subsets[i]).intersection(subsets[j]):  # Check if subsets are disjoint
                        pair_count += 1
                        if sum_value > max_sum:
                            max_sum = sum_value
                            max_sum_subsets = (subsets[i], subsets[j])
    return pair_count, max_sum, max_sum_subsets

# Generate all possible subset sums
subset_sum = subset_sums(numbers)

# Find the maximum sum and its subsets
pair_count, max_sum, max_sum_subsets = find_max_equal_subset_sum(subset_sum)

# Write the output to "numere.out"
with open("numere.out", "w") as fout:
    fout.write(f"{pair_count} {max_sum}\n")
    fout.write(" ".join(map(str, max_sum_subsets[0])) + "\n")
    fout.write(" ".join(map(str, max_sum_subsets[1])) + "\n")
```
This Python code solves the problem by first generating all possible subset sums and then identifying subsets with the same sum that are disjoint, keeping track of the pair with the maximum sum. It writes the result to the specified output file.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
65 276
32 69 78 97
10 49 60 71 86
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The expected output and the found output differ in the order of the subsets. The challenge specifies that the order of submulţimilor (subsets) in perechi (pairs) does not matter, so the order difference between the expected and found output is not a concern.

However, the subsets within the output themselves are ordered differently. This discrepancy arises because the subsets are being sorted before being added to the dictionary. Sorting is not necessary and not part of the requirements, so it can be removed. Moreover, the output asks for one of the pairs with the maximum sum, not necessarily the lexicographically smallest one.

Here is a revised solution without sorting the subsets but still ensuring they are disjoint and have the maximum sum. Additionally, I will simplify the code to directly write the result to the output file without storing unnecessary intermediate variables. This revised solution should meet all the conditions of the problem statement:

```python
# Read input numbers from "numere.in"
with open("numere.in", "r") as fin:
    numbers = list(map(int, fin.readline().split()))

# Function to generate all possible subset sums along with the subsets
def subset_sums(nums):
    subset_sum = {}
    n = len(nums)
    for i in range(1, 1 << n):
        subset = []
        current_sum = 0
        for j in range(n):
            if i & (1 << j):
                subset.append(nums[j])
                current_sum += nums[j]
        if current_sum not in subset_sum:
            subset_sum[current_sum] = []
        subset_sum[current_sum].append(subset)
    return subset_sum

# Function to find the maximum sum and its subsets
def find_max_equal_subset_sum(subset_sum):
    max_sum = -1
    max_sum_subsets = ([], [])
    pair_count = 0
    for sum_value, subsets in subset_sum.items():
        if len(subsets) > 1:
            for i in range(len(subsets)):
                for j in range(i+1, len(subsets)):
                    if not set(subsets[i]).intersection(subsets[j]):  # Check if subsets are disjoint
                        pair_count += 1
                        if sum_value > max_sum:
                            max_sum = sum_value
                            max_sum_subsets = (subsets[i], subsets[j])
    return pair_count, max_sum, max_sum_subsets

# Generate all possible subset sums
subset_sum = subset_sums(numbers)

# Find the maximum sum and its subsets
pair_count, max_sum, max_sum_subsets = find_max_equal_subset_sum(subset_sum)

# Write the output to "numere.out"
with open("numere.out", "w") as fout:
    fout.write(f"{pair_count} {max_sum}\n")
    fout.write(" ".join(map(str, max_sum_subsets[0])) + "\n")
    fout.write(" ".join(map(str, max_sum_subsets[1])) + "\n")
```

This solution should give the correct number of pairs and one of the pairs with the maximum sum, without sorting the subsets. The output may still differ in order compared to the expected output but will be a correct solution as per the problem statement.
