{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/712/2024-05-22T09:38:27.898Z-00655.log",
  "attemptStart": 1716370707.898,
  "attemptEnd": 1716370752.347,
  "attemptDuration": 44.448999881744385,
  "code": "from itertools import combinations\n\n# Helper function to get a bitmask of numbers based on a subset\ndef bitmask(numbers, subset):\n    return sum((1 << numbers.index(x)) for x in subset)\n\n# Read the numbers from the file\nwith open('numere.in', 'r') as f:\n    numbers = list(map(int, f.readline().split()))\n\n# Initialize variables\nall_subsets = {}\nmax_sum = 0\nmax_pair = ([], [])\npair_count = 0\nunique_pairs = set()\n\n# Generate all possible subsets of numbers with their sums\nfor r in range(1, len(numbers)):\n    for combo in combinations(numbers, r):\n        combo_sum = sum(combo)\n        if combo_sum not in all_subsets:\n            all_subsets[combo_sum] = []\n        all_subsets[combo_sum].append(combo)\n\n# Find all unique pairs of subsets with the same sum\nfor subset_sum in all_subsets:\n    subsets = all_subsets[subset_sum]\n    for i in range(len(subsets)):\n        for j in range(i + 1, len(subsets)):\n            if not bitmask(numbers, subsets[i]) & bitmask(numbers, subsets[j]):\n                unique_pairs.add((subsets[i], subsets[j]))\n                if subset_sum > max_sum:\n                    max_sum = subset_sum\n                    max_pair = (subsets[i], subsets[j])\n\npair_count = len(unique_pairs)\n\n# Write the result to the file\nwith open('numere.out', 'w') as f:\n    f.write(f\"{pair_count} {max_sum}\\n\")\n    f.write(' '.join(map(str, max_pair[0])) + '\\n')\n    f.write(' '.join(map(str, max_pair[1])) + '\\n')\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1856,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}