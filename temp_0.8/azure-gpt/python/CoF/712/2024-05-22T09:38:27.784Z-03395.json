{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/712/2024-05-22T09:38:27.784Z-03395.log",
  "attemptStart": 1716370707.784,
  "attemptEnd": 1716370756.548,
  "attemptDuration": 48.76400017738342,
  "code": "# Read input numbers from \"numere.in\"\nwith open(\"numere.in\", \"r\") as fin:\n    numbers = list(map(int, fin.readline().split()))\n\n# Function to generate all possible subset sums along with the subsets\ndef subset_sums(nums):\n    subset_sum = {}\n    n = len(nums)\n    for i in range(1, 1 << n):\n        subset = []\n        current_sum = 0\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(nums[j])\n                current_sum += nums[j]\n        if current_sum not in subset_sum:\n            subset_sum[current_sum] = []\n        subset_sum[current_sum].append(subset)\n    return subset_sum\n\n# Function to find the maximum sum and its subsets\ndef find_max_equal_subset_sum(subset_sum):\n    max_sum = -1\n    max_sum_subsets = ([], [])\n    pair_count = 0\n    for sum_value, subsets in subset_sum.items():\n        if len(subsets) > 1:\n            for i in range(len(subsets)):\n                for j in range(i+1, len(subsets)):\n                    if not set(subsets[i]).intersection(subsets[j]):  # Check if subsets are disjoint\n                        pair_count += 1\n                        if sum_value > max_sum:\n                            max_sum = sum_value\n                            max_sum_subsets = (subsets[i], subsets[j])\n    return pair_count, max_sum, max_sum_subsets\n\n# Generate all possible subset sums\nsubset_sum = subset_sums(numbers)\n\n# Find the maximum sum and its subsets\npair_count, max_sum, max_sum_subsets = find_max_equal_subset_sum(subset_sum)\n\n# Write the output to \"numere.out\"\nwith open(\"numere.out\", \"w\") as fout:\n    fout.write(f\"{pair_count} {max_sum}\\n\")\n    fout.write(\" \".join(map(str, max_sum_subsets[0])) + \"\\n\")\n    fout.write(\" \".join(map(str, max_sum_subsets[1])) + \"\\n\")\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2031,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}