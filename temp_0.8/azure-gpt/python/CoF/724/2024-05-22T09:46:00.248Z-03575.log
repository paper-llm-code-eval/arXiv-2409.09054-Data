---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(filename):
    with open(filename, 'r') as file:
        N = int(file.readline().strip())
        intervals = [tuple(map(int, file.readline().split())) for _ in range(N)]
    return intervals

def write_output(filename, fridges_count):
    with open(filename, 'w') as file:
        file.write(str(fridges_count))

def min_fridges_required(intervals):
    # Sort the intervals based on their end values.
    intervals.sort(key=lambda x: x[1])
    fridges_count = 0
    current_end = -101  # Start outside the possible temperature range

    for interval in intervals:
        if interval[0] > current_end:
            # We need a new fridge whenever the start of the current interval
            # is greater than the end of the previous intervals combined
            fridges_count += 1
            current_end = interval[1]

    return fridges_count

def main():
    intervals = read_input('reactivi.in')
    fridges_count = min_fridges_required(intervals)
    write_output('reactivi.out', fridges_count)

if __name__ == '__main__':
    main()
```
```

---------- user ----------


Expected program to write result to `reactivi.out` and read from `reactivi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Here's the corrected solution that reads from `reactivi.in` and writes to `reactivi.out`, without using `input()` or `print()` for data IO.

```markdown
```python
# Read data from the input file
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    reactivi = [tuple(map(int, line.split())) for line in file]

# Sort the reagents by their maximum storage temperature
reactivi.sort(key=lambda x: x[1])

# Determine the minimum number of refrigerators required
fridges = 1
current_max_temp = reactivi[0][1]

for i in range(1, N):
    if reactivi[i][0] > current_max_temp:
        fridges += 1
        current_max_temp = reactivi[i][1]

# Write the result to the output file
with open('reactivi.out', 'w') as file:
    file.write(str(fridges))
```
```
---------- user ----------


Expected program to write result to `reactivi.out` and read from `reactivi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Below is the updated solution that reads from `reactivi.in` and writes the result to `reactivi.out` without using `input()` or `print()`.

```python
# Define functions to read from and write to files
def read_input(filename):
    with open(filename, 'r') as file:
        N = int(file.readline().strip())
        intervals = [tuple(map(int, file.readline().split())) for _ in range(N)]
    return intervals

def write_output(filename, fridges_count):
    with open(filename, 'w') as file:
        file.write(str(fridges_count))

def min_fridges_required(intervals):
    # Sort the intervals based on their maximum temperature
    intervals.sort(key=lambda x: x[1])
    fridges_count = 0
    current_max_temp = -101  # Initialize with a temperature lower than the minimum possible

    for interval in intervals:
        if interval[0] > current_max_temp:
            # Start a new fridge if the current reagent's minimum temperature is higher than the current max temperature
            fridges_count += 1
            current_max_temp = interval[1]

    return fridges_count

# Main function to tie the logic together
def main():
    intervals = read_input('reactivi.in')
    fridges_count = min_fridges_required(intervals)
    write_output('reactivi.out', fridges_count)

# Invoke the main function
if __name__ == '__main__':
    main()
``` 

Ensure this script is saved to a `.py` file. When it's executed, it will read the input data from `reactivi.in`, process it to determine the minimum number of fridges required, and then write the output to `reactivi.out`.
