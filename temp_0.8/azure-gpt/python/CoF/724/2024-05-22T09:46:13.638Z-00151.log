---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def compute_min_fridges(intervals):
    intervals.sort(key=lambda x: x[1])
    count = 0
    last_max = -101
    
    for min_temp, max_temp in intervals:
        if min_temp > last_max:
            last_max = max_temp
            count += 1
            
    return count

# Read data from file
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    reactivi = [tuple(map(int, line.split())) for line in file.readlines()]

# Compute result
min_fridges = compute_min_fridges(reactivi)

# Write result to file
with open('reactivi.out', 'w') as file:
    file.write(f'{min_fridges}\n')
```
```
---------- user ----------


Expected program to write result to `reactivi.out` and read from `reactivi.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read data from file
with open('reactivi.in', 'r') as file:
    N = int(file.readline().strip())
    intervals = [tuple(map(int, line.split())) for line in file]

# Sort by ending temperature of intervals
intervals.sort(key=lambda x: x[1])

# Initialize the count of fridges and the last temperature of the last fridge
fridges = 1
last_temperature = intervals[0][1]

# Iterate over the reactivi intervals to find minimum number of fridges
for i in range(1, N):
    if intervals[i][0] > last_temperature:
        fridges += 1
        last_temperature = intervals[i][1]

# Write result to file
with open('reactivi.out', 'w') as file:
    file.write(str(fridges))
```
---------- user ----------


Program exited with code 125.
stdout:
```

```
stderr:
```
docker: Error response from daemon: cannot start a stopped process: unknown.

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error message you're seeing is not related to the Python code itself but rather an issue with starting the Docker container in which the code would run. The message "docker: Error response from daemon: cannot start a stopped process: unknown." suggests there was an attempt to start a process in a Docker container that was stopped or not running correctly.

Since this is beyond the control of the Python code, there's not much that can be done in the code to fix a Docker daemon issue. However, I can rewrite the Python solution to ensure it is correct and follows your instructions. The Python code itself should execute without errors once any issues with the Docker environment are resolved. Here is the corrected Python solution:

```python
# Define the function to calculate the minimum number of fridges required
def calculate_min_fridges(reactivi):
    # Sort the reactivi by their maximum temperature in ascending order
    reactivi.sort(key=lambda x: x[1])
    fridges = 0
    last_max = float('-inf')

    for min_temp, max_temp in reactivi:
        if min_temp > last_max:
            fridges += 1
            last_max = max_temp

    return fridges

# Read data from 'reactivi.in'
with open('reactivi.in', 'r') as file_in:
    N = int(file_in.readline().strip())
    reactivi = [tuple(map(int, line.split())) for line in file_in.readlines()]

# Compute the minimum number of fridges required
min_fridges = calculate_min_fridges(reactivi)

# Write the result to 'reactivi.out'
with open('reactivi.out', 'w') as file_out:
    file_out.write(str(min_fridges))
```

Please note that this code is intended to be run in an environment where Docker is working correctly, and the file `reactivi.in` is present with the correct input format. If you're still encountering issues with Docker, you may need to resolve those before running any code.
