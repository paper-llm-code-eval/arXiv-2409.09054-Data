---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cerc.in` and write to `cerc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \in \{1, 2, ..., n\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  

# Cerinţă
Să se scrie un program care să se determine:
a) numărul $m$ de drepte distincte; 
b) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; 
c) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.

# Date de intrare
Fişierul de intrare `cerc.in`  conţine:
$n$
$x_1\ y_1\ r_1$
...
$x_n\ y_n\ r_n$	
- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri
- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc 

# Date de ieşire
Fişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. 

# Restricţii şi precizări
* $1 ≤ n ≤ 2\ 000$
* $1 ≤ x_1, x_2, ..., x_n ≤ 1\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$
* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte
* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune
* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.

---

Example:
`cerc.in`
```
12
2 6 1
3 9 1
4 12 3
4 4 2
9 9 2
10 10 6
12 12 1
6 3 1
10 5 1
14 7 2
14 7 1
12 4 2
```

`cerc.out`
```
4 3 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from collections import defaultdict
from fractions import Fraction
from math import gcd

def read_input(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
    circles = []
    for line in lines[1:]:
        x, y, r = map(int, line.split())
        circles.append((x, y, r))
    return circles

def write_output(filename, m, q, p):
    with open(filename, 'w') as file:
        file.write(f"{m} {q} {p}\n")

def calculate_lines_and_max_circles(circles):
    lines = defaultdict(set)
    for x, y, r in circles:
        if x == 0:  # Vertical line
            slope = 'inf'
        else:
            slope = Fraction(y, x)
        lines[slope].add((x, y, r))
    
    max_circles = 0
    num_lines_with_max_circles = 0
    for slope, circles_on_line in lines.items():
        # Sort circles on the line based on their distance from the origin and radius
        sorted_circles = sorted(circles_on_line, key=lambda c: (c[0]**2 + c[1]**2, c[2]))
        # Count the number of non-overlapping circles on the line
        count = 1
        prev_circle = sorted_circles[0]
        for circle in sorted_circles[1:]:
            if (circle[0] - prev_circle[0])**2 + (circle[1] - prev_circle[1])**2 >= (circle[2] + prev_circle[2])**2:
                prev_circle = circle
                count += 1
        if count > max_circles:
            max_circles = count
            num_lines_with_max_circles = 1
        elif count == max_circles:
            num_lines_with_max_circles += 1
      
    return len(lines), max_circles, num_lines_with_max_circles

def main():
    circles = read_input('cerc.in')
    m, q, p = calculate_lines_and_max_circles(circles)
    write_output('cerc.out', m, q, p)

if __name__ == "__main__":
    main()
```

Explanation:
- The `read_input` function reads the file `cerc.in` and converts the data into a list of tuples (x, y, r) for each circle.
- The `write_output` function writes the output to `cerc.out` in the required format.
- The `calculate_lines_and_max_circles` function creates a mapping of slopes to sets of circles. The slope is calculated as a `Fraction` to ensure precision without using floats. Vertical lines have a slope of 'inf'.
- The function then iterates over each line, sorts the circles based on their distance from the origin (and by radius to break ties), and determines the largest set of non-overlapping circles.
- The `main` function orchestrates the reading of input, calculation of lines and circles, and writing of output.
- The solution avoids the use of `input()` and `print()` as per the given constraints, and instead uses file I/O operations.

To run the code, make sure to save the input data in a file named `cerc.in` and execute this Python script in the same directory. After the script is executed, the output will be written to `cerc.out`.
