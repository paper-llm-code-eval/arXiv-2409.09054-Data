---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from math import gcd

def main():
    with open("tort.in", "r") as fin:
        M, N = map(int, fin.readline().split())

    L = gcd(M, N)
    num_portions = (M * N) // (L * L)

    with open("tort.out", "w") as fout:
        fout.write(f"{num_portions} {L}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from math import gcd

# Read from tort.in
with open("tort.in", "r") as fin:
    M, N = map(int, fin.readline().split())

# Calculate the size of the largest possible square (GCD of M and N)
# and the number of such squares
L = gcd(M, N)
num_portions = (M * N) // (L * L)

# Write to tort.out
with open("tort.out", "w") as fout:
    fout.write(f"{num_portions} {L}\n")
```
```
---------- user ----------


Expected program to write result to `tort.out` and read from `tort.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from math import gcd

def main():
    with open("tort.in", "r") as fin:
        M, N = map(int, fin.readline().split())

    L = gcd(M, N)
    num_portions = (M * N) // (L * L)

    with open("tort.out", "w") as fout:
        fout.write(f"{num_portions} {L}\n")

if __name__ == "__main__":
    main()
```
