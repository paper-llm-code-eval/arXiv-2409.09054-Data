---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read data from file
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = list(map(int, file.readline().split()))
    pc = list(map(int, file.readline().split()))

# Sort both lists in non-ascending order
pb.sort(reverse=True)
pc.sort(reverse=True)

# Replace the weapons when it's advantageous
for i in range(min(N, M)):
    if pc[i] > pb[i]:
        pb[i] = pc[i]

# Calculate the maximum power sum
max_power_sum = sum(pb)

# Write the result to file
with open('arme.out', 'w') as file:
    file.write(str(max_power_sum))
```
---------- user ----------


Program result did not match expected result.
Input data:
```
3 2
3 1 7
4 5
```
Expected output:
```
16
```
Found output:
```
12
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the initial solution, I can see that there is a mistake. The initial solution is only trying to replace the guns in order, but we should be looking to swap the weakest gun on the belt with the strongest gun on the wall, in order to maximize the sum of the powers.

To fix this, we need to make sure that we are always swapping the lowest power gun from `pb` (the belt) with the highest possible power gun from `pc` (the wall), until we run out of replacements or all guns on the wall are weaker than the ones on the belt.

Let's implement this corrected logic:

```python
# Read data from file
with open('arme.in', 'r') as file:
    N, M = map(int, file.readline().split())
    pb = list(map(int, file.readline().split()))
    pc = list(map(int, file.readline().split()))

# Sort both lists: pb in ascending order and pc in descending order
pb.sort()
pc.sort(reverse=True)

# Replace the weakest weapons on the belt with the strongest from the wall
for i in range(min(N, M)):
    if pc[i] > pb[i]:
        pb[i] = pc[i]
    else:
        # If the current weapon on the wall is weaker, no more swaps can increase the power
        break

# Calculate the maximum power sum
max_power_sum = sum(pb)

# Write the result to file
with open('arme.out', 'w') as file:
    file.write(str(max_power_sum))
```

Explanation of changes: The `pb` list is now sorted in ascending order, so the weakest guns are at the start of the list. The `pc` list is still sorted in descending order. We only replace the guns if the gun from the wall is stronger than the one on the belt. If we find a gun on the wall that is not stronger, we break out of the loop early, as all subsequent guns on the wall will also be weaker (because `pc` is sorted in descending order).

Let's verify the logic against the example:

Input data:
```
3 2
3 1 7
4 5
```

- `pb` after sorting in ascending order: [1, 3, 7]
- `pc` after sorting in descending order: [5, 4]

We replace the first gun (power 1) with a gun from the wall (power 5), and the second gun (power 3) with a gun from the wall (power 4). The resulting `pb` list will be: [5, 4, 7].

Now, we sum the powers: 5 + 4 + 7 = 16, which matches the expected output.
