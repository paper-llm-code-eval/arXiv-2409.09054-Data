---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un copil construiește un triunghi cu numerele naturale nenule astfel:

* în vârful triunghiului scrie valoarea $1$;
* completează liniile triunghiului de sus în jos, iar căsuțele de pe aceeași linie de la stânga la dreapta cu numere naturale consecutive, ca în figurile următoare.

~[numere.png]

În figura din stânga este ilustrat un astfel de triunghi având $5$ linii, conținând numerele naturale de la $1$ la $15$. În acest triunghi copilul începe să construiască drumuri, respectând următoarele reguli:

* orice drum începe din $1$;
* din orice căsuță se poate deplasa fie în căsuța situată pe linia următoare în stânga sa (deplasare codificată cu $1$), fie în căsuța situată pe linia următoare în dreapta sa (deplasare codficată cu $2$);
* orice drum va fi descris prin succesiunea deplasărilor efectuate.

De exemplu, drumul ilustrat în figura din dreapta poate fi descris astfel: $1$, $2$, $2$, $2$.

# Cerință

Scrieți un program care rezolvă următoarele două cerințe:

* citește descrierea unui drum și afișează numărul la care se termină drumul;
* citește un număr natural nenul $K$, determină un drum care se termină cu numărul $K$ pentru care suma numerelor prin care trece drumul este maximă și afișează această sumă.

# Date de intrare

Fișierul de intrare `numere.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată ($1$ sau $2$).

* Dacă $C$ este egal cu $1$, a doua linie din fișier conține un număr natural $N$, reprezentând lungimea drumului, iar a treia linie din fișier conține descrierea drumului sub forma a $N$ valori, $1$ sau $2$, separate între ele prin câte un spațiu.
* Dacă $C$ este egal cu $2$, a doua linie din fișier conține numărul natural $K$.

# Date de ieșire

Fișierul de ieșire `numere.out` va conține o singură linie pe care va fi scris un singur număr natural. Dacă $C = 1$, va fi scris numărul cu care se termină drumul descris în fișierul de intrare. Dacă $C = 2$, va fi scrisă suma maximă a numerelor aflate pe un drum care se termină cu numărul $K$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se acordă $40$ de puncte; pentru rezolvarea corectă a cerinței $2$ se acordă $50$ de puncte. $10$ puncte se acordă din oficiu.

---

Example:
`numere.in`
```
1
4
1 2 1 2
```

`numere.out`
```
13
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def get_triangle_number(row, col):
    return row * (row - 1) // 2 + col

def calculate_path_end(length, moves):
    row, col = 1, 1
    for move in moves:
        row += 1
        col += move - 1
    return get_triangle_number(row, col)

def max_sum_path(k):
    # reverse engineer to find the row and column of K
    row = int((-1 + (1 + 8 * k) ** 0.5) / 2)
    col = k - row * (row - 1) // 2
    
    # calculate sum by adding the diagonal numbers above it
    sum_path = k
    while row > 1 and col > 1:
        row -= 1
        col -= 1
        sum_path += get_triangle_number(row, col)
    
    # if K is not on the left edge add the right diagonal
    if col > 1:
        for i in range(row - 1, 0, -1):
            sum_path += get_triangle_number(i, i)
    
    return sum_path

with open('numere.in', 'r') as file_in:
    task = int(file_in.readline().strip())
    if task == 1:
        length = int(file_in.readline().strip())
        path = list(map(int, file_in.readline().split()))
        result = calculate_path_end(length, path)
    elif task == 2:
        k = int(file_in.readline().strip())
        result = max_sum_path(k)

with open('numere.out', 'w') as file_out:
    file_out.write(str(result))
```

This code processes the input according to the given task in `numere.in`, computes the solution, and writes it to `numere.out`. The approach for each task has been optimized to run with the least computation necessary. Task 1 calculates the end of the path based on the given directions, while Task 2 finds the path with the maximum sum ending at a given number by backtracking from the number to the top of the triangle.
