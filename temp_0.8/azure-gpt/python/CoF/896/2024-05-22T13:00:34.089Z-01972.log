---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `puzzle.in` and write to `puzzle.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mihai a primit de ziua lui un joc de puzzle. Jocul are $N$ piese confecționate prin lipirea unor bucăți de dimensiune $1 \cdot 1$ (ilustrate în figurile de mai jos prin `X`); aceste bucăți le vom numi în continuare, pe scurt, `X`-uri. Pentru confecționarea unei piese se respectă următoarele reguli:

* `X`-urile sunt așezate unul peste altul, formând coloane ce pot avea înălțimi diferite, apoi coloanele se aliniază în partea de jos și se lipesc între ele, una după cealaltă, de la stânga spre dreapta;
* Pe o coloană sunt cel mult $9$ `X`-uri;
* Toate piesele au același număr de coloane.

~[puzzle.jpg|align=center]

În figurile $1, 2, 3, 4$ sunt piese de puzzle care respectă regulile descrise, iar în figura $5$ și în figura $6$ **NU** sunt piese de puzzle, pentru că nu pot fi obținute prin lipirea unor coloane de $X$-uri, una după cealaltă, de la stânga spre dreapta.
Fiind mic, Mihai nu poate rezolva puzzle-ul, dar poate face o singură operație: alege două piese și le îmbină în dreptul laturilor de sus, răsturnând una dintre piese sus-jos (fără să o rotească sau să o răstoarne stânga-dreapta). Dacă în urma acestei operații el obține un dreptunghi format din coloane complete de $X$-uri, toate coloanele având aceeași înălțime, este mulțumit. De exemplu, piesa din figura $1$ și cea din figura $2$ pot fi îmbinate în modul descris.
În figura $7$ este piesa din figura $2$ răsturnată sus-jos. În figura $8$ este ilustrat dreptunghiul care se obține din piesa din figura $1$ și piesa din figura $2$ răsturnată sus-jos.
Observați că, dacă am roti piesa din figura $4$, am putea să o îmbinăm cu piesa din figura $1$, dar rotația nu este permisă.
Vom codifica o piesă printr-un număr natural, fiecare cifră din număr reprezentând (în ordine de la stânga la dreapta) câte $X$-uri se află pe coloana corespunzătoare din piesă.
De exemplu:
- piesa din figura $1$ este codificată $4232$;
- piesa din figura $2$ este codificată $1323$;
- piesa din figura $3$ este codificată $4444$;
- piesa din figura $4$ este codificată $3231$.

# Cerință

Determinați care este numărul de moduri în care Mihai poate alege câte două piese dintre cele $N$ pentru a face o operație în modul descris mai sus.

# Date de intrare

Fișierul de intrare `puzzle.in` conține pe prima linie un număr natural $N$ ce reprezintă numărul de piese din joc. Pe linia a doua se găsesc $N$ numere naturale, separate prin câte un singur spațiu, reprezentând codificările celor $N$ piese.

# Date de ieșire

Fișierul de ieșire `puzzle.out` va conține o singură linie pe care va fi scris numărul cerut.

# Restricții și precizări

* $2 \leq N \leq 10^5$;
* Numerele care reprezintă codificările pieselor au același număr de cifre (cel mult $5$) și nu conțin cifra $0$.
* Într-o operație nu contează care dintre piese este răsturnată, ca urmare perechea formată din piesa $a$ și piesa $b$ este considerată ca fiind aceeași cu perechea formată din piesa $b$ și piesa $a$.
* Dreptunghiul obținut în urma unei operații poate avea înălțimea mai mare decât $9$.
* Pentru teste valorând $30$ de puncte $N \leq 1 \ 000$.

---

Example:
`puzzle.in`
```
5
222 432 234 123 111
```

`puzzle.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def reverse_num(num):
    return int(str(num)[::-1])

def main():
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    heights = {}
    for piece in pieces:
        reversed_piece = reverse_num(piece)
        if reversed_piece in heights:
            heights[reversed_piece] += 1
        else:
            heights[reversed_piece] = 1

    # Count the combinations
    combinations = 0
    for count in heights.values():
        combinations += count * (count - 1) // 2

    with open('puzzle.out', 'w') as fout:
        fout.write(f'{combinations}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def reverse_num(num):
    return int(str(num)[::-1])

def main():
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    complements = {}
    for piece in pieces:
        # Compute the complement of each piece by subtracting each digit from 9
        complement = int(''.join(str(9 - int(digit)) for digit in str(piece)))
        complements[complement] = complements.get(complement, 0) + 1

    # Count the combinations
    combinations = 0
    for count in complements.values():
        combinations += count * (count - 1) // 2

    with open('puzzle.out', 'w') as fout:
        fout.write(f'{combinations}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    # Calculate the sum for each piece to use it as a key in the dictionary
    sums = {}
    for piece in pieces:
        total = sum(int(digit) for digit in str(piece))
        sums[total] = sums.get(total, 0) + 1

    # Count the combinations
    combinations = 0
    for count in sums.values():
        combinations += count * (count - 1) // 2

    with open('puzzle.out', 'w') as fout:
        fout.write(f'{combinations}\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    # Read the input from 'puzzle.in'
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    # Initialize a dictionary to store the complementary pieces counts
    complements = {}

    # Calculate the complement for each piece
    for piece in pieces:
        # The complement is calculated as the 'inverse' of the piece
        # where each digit d is replaced by (9 - d)
        complement = int(''.join(str(9 - int(d)) for d in str(piece)))
        complements[complement] = complements.get(complement, 0) + 1

    # Calculate the number of ways Mihai can choose two pieces
    ways = 0
    for count in complements.values():
        if count > 1:
            # If there are more than one piece with the same complement,
            # Mihai can pick any two of them, which is 'count choose 2'
            ways += count * (count - 1) // 2

    # Write the result to 'puzzle.out'
    with open('puzzle.out', 'w') as fout:
        fout.write(f'{ways}\n')

# Execute the main function
if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def complement(piece):
    return ''.join(str(9 - int(x)) for x in str(piece))

def main():
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    # Create a dictionary to count occurrences of each piece complement
    counts = {}
    for piece in pieces:
        comp = complement(piece)
        counts[comp] = counts.get(comp, 0) + 1

    # Calculate the total number of ways to combine pieces
    total_ways = 0
    for count in counts.values():
        # Combine each unique piece with its complement
        total_ways += count * (count - 1) // 2

    # Write the result to 'puzzle.out'
    with open('puzzle.out', 'w') as fout:
        fout.write(str(total_ways))

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    # Create a dictionary to store the height profiles of the pieces
    profiles = {}

    # Calculate the height profile for each piece
    for piece in pieces:
        # The profile is a tuple with each digit subtracted from 10
        profile = tuple(10 - int(c) for c in str(piece))
        profiles[profile] = profiles.get(profile, 0) + 1

    # Calculate the number of ways to combine two pieces
    ways = 0
    for count in profiles.values():
        # For each profile, the number of ways to combine two pieces is
        # the number of pairs that can be formed with that profile
        ways += count * (count - 1) // 2

    # Write the result to 'puzzle.out'
    with open('puzzle.out', 'w') as fout:
        fout.write(f'{ways}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `puzzle.out` and read from `puzzle.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Calculate the complement of a puzzle piece
def complement(piece):
    comp = 0
    factor = 1
    while piece > 0:
        digit = piece % 10
        comp += (9 - digit) * factor
        piece //= 10
        factor *= 10
    return comp

# Main function to solve the puzzle challenge
def main():
    # Read input from file
    with open('puzzle.in', 'r') as fin:
        n = int(fin.readline().strip())
        pieces = list(map(int, fin.readline().strip().split()))

    # Dictionary to hold the count of complements
    comp_count = {}

    # Calculate and count the complements
    for piece in pieces:
        piece_comp = complement(piece)
        if piece_comp in comp_count:
            comp_count[piece_comp] += 1
        else:
            comp_count[piece_comp] = 1

    # Count the number of valid combinations
    combinations = 0
    for count in comp_count.values():
        combinations += (count * (count - 1)) // 2

    # Write output to file
    with open('puzzle.out', 'w') as fout:
        fout.write(str(combinations) + '\n')

# Execute the program
if __name__ == '__main__':
    main()
```
```
