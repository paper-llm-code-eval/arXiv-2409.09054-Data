---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ de $n$ numere naturale distincte, două câte două. Pentru o secvență de $k$ numere ($x_p, x_{p+1}, \dots, x_{p+k-1}$), care începe cu numărul de pe poziția $p$ din șirul dat, definim gradul său ca fiind numărul de numere din secvență, care rămân pe aceleași poziții după ordonarea crescătoare a secvenței. De exemplu, pentru $n=7$ și șirul format din numerele: $1, 5, 7, 4, 6, 2, 9$, secvența formată din numerele $7, 4, 6, 2$ (corespunzătoare lui $p=3$ și $k=4$) are gradul egal cu $2$ deoarece, după ordonarea crescătoare a numerelor din secvență, aceasta devine $2, 4, 6, 7$, numerele $4$ și $6$ rămânând pe aceleași poziții.

# Cerință

Scrieți un program care citește numerele $n$, $k$, $x_1$, $x_2$, $\dots$, $x_n$, cu semnificația din enunț, și apoi determină:

1. gradul întregului șir de numere;
2. poziția primului element din prima secvență de lungime $k$ ce are gradul maxim, precum și gradul acestei secvențe.

# Date de intrare

Fișierul de intrare `grad.in` conține pe prima linie numerele $n$ și $k$, separate printr-un spațiu, iar pe linia următoare $n$ numere naturale distincte $x_1$, $x_2$, $\dots$, $x_n$, corespunzătoare șirului de numere, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie un număr natural reprezentând gradul întregului șir de numere, iar pe următoarea linie două numere naturale, separate printr-un singur spațiu, primul număr reprezentând poziția primului element din prima secvență de lungime $k$ ce are grad maxim și cel de-al doilea număr reprezentând gradul acestei secvențe.

# Restricții și precizări

* $0 < n \leq 10 \ 000$
* $0 < k \leq n$
* Numerele din șir sunt numere naturale strict mai mici decât $32 \ 000$.
* O secvență de numere din șir reprezintă o succesiune de numere din acel șir, aflate pe poziții consecutive.
* Gradul întregului șir de numere este egal cu gradul secvenței de $n$ numere care începe cu numărul de pe poziția $1$ și conține toate cele $n$ numere din șir.
* Pentru rezolvarea corectă a subpunctului 1 se obține $40\%$ din punctaj.
* Pentru determinarea poziției primului element din prima secvență de lungime $k$ ce are grad maxim, se obține $20\%$ din punctaj, iar pentru determinarea gradului maxim de la subpunctul 2 se obține $40\%$ din punctaj.

---

Example:
`grad.in`
```
7 4
1 5 7 4 6 2 9
```

`grad.out`
```
3
3 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(file_name):
    with open(file_name, 'r') as file:
        n, k = map(int, file.readline().split())
        sequence = list(map(int, file.readline().split()))
    return n, k, sequence

def write_output(file_name, full_sequence_grade, first_max_grade_position, max_subsequence_grade):
    with open(file_name, 'w') as file:
        file.write(f"{full_sequence_grade}\n")
        file.write(f"{first_max_grade_position} {max_subsequence_grade}\n")

def calculate_full_sequence_grade(sequence):
    return sum(1 for i, val in enumerate(sequence) if val == sorted(sequence)[i])

def calculate_subsequence_grade(sequence, k):
    max_grade = first_max_grade_position = 0
    for i in range(len(sequence) - k + 1):
        subsequence = sequence[i:i+k]
        sorted_subsequence = sorted(subsequence)
        current_grade = sum(1 for j, val in enumerate(subsequence) if val == sorted_subsequence[j])
        if current_grade > max_grade:
            max_grade = current_grade
            first_max_grade_position = i + 1
    return first_max_grade_position, max_grade

def main():
    n, k, sequence = read_input("grad.in")
    full_sequence_grade = calculate_full_sequence_grade(sequence)
    first_max_grade_position, max_subsequence_grade = calculate_subsequence_grade(sequence, k)
    write_output("grad.out", full_sequence_grade, first_max_grade_position, max_subsequence_grade)

if __name__ == "__main__":
    main()
```
```
This code should solve the challenge with efficiency in mind, reading the input from the 'grad.in' file, and writing the output to the 'grad.out' file. It calculates both the full sequence grade and the first maximum subsequence grade with its position and adheres to the requirement of not using `input()` or `print()`.

---------- user ----------


Expected program to write result to `grad.out` and read from `grad.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Read the input data from grad.in
with open('grad.in', 'r') as file:
    n, k = map(int, file.readline().split())
    sequence = list(map(int, file.readline().split()))

# Calculate the degree of the full sequence
full_sequence_degree = sum(sequence[i] == sorted(sequence)[i] for i in range(n))

# Initialize variables for subsequence degree calculation
max_degree = 0
first_max_degree_position = 0

# Calculate the degree of each subsequence of length k
for i in range(n - k + 1):
    subsequence = sequence[i:i+k]
    sorted_subsequence = sorted(subsequence)
    degree = sum(subsequence[j] == sorted_subsequence[j] for j in range(k))
    if degree > max_degree:
        max_degree = degree
        first_max_degree_position = i + 1

# Write the output data to grad.out
with open('grad.out', 'w') as file:
    file.write(f"{full_sequence_degree}\n")
    file.write(f"{first_max_degree_position} {max_degree}\n")
```
This Python solution reads the data from `grad.in`, processes it according to the problem statement, and writes the results to `grad.out`, all without using `input()` or `print()` functions.
