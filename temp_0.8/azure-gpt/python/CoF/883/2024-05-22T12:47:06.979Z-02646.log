---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cursuri.in` and write to `cursuri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.

# Cerință

Cunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:

1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.
2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.

# Date de intrare

În fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq K \leq 1 \ 000$;
* $1 \leq a_i < b_i \leq 100 \ 000$;
* În cazul cerinței $2$ se garantează că pentru toate testele există soluție
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`cursuri.in`
```
1
4 2
2 16
1 3
3 18
1 20
```

`cursuri.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution for the programming challenge

def solve_task1(courses, K):
    # Sort courses by end time (using lambda for custom sort)
    courses.sort(key=lambda x: x[1])
    
    # Array to keep track of the end time of courses in each classroom
    classrooms = [0] * K
    
    # Counter for the maximum number of courses that can be scheduled
    max_courses = 0
    
    for course in courses:
        for i in range(K):
            # Check if the i-th classroom is free for the current course
            if classrooms[i] <= course[0]:
                # Schedule the course in the i-th classroom
                classrooms[i] = course[1]
                max_courses += 1
                break
    
    return max_courses

def solve_task2(courses, N, K):
    # Find the duration of the longest course
    max_duration = max(course[1] - course[0] for course in courses)
    
    # Binary search to find the maximum possible duration
    left, right = 1, max_duration
    while left < right:
        middle = (left + right + 1) // 2
        # Try to schedule all courses with the current duration
        count, end_times = 0, []
        for ai, bi in sorted(courses, key=lambda x: x[0]):
            end_times = [et for et in end_times if et > ai]
            if len(end_times) < K:
                end_times.append(ai + middle)
                count += 1
            end_times.sort()
        # If all courses can be scheduled, try a larger duration
        if count >= N:
            left = middle
        else:
            right = middle - 1
    
    return left

def read_input(filename):
    with open(filename, 'r') as file:
        task = int(file.readline().strip())
        N, K = map(int, file.readline().strip().split())
        courses = [tuple(map(int, file.readline().strip().split())) for _ in range(N)]
    return task, N, K, courses

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def main():
    task, N, K, courses = read_input('cursuri.in')
    
    if task == 1:
        result = solve_task1(courses, K)
    elif task == 2:
        result = solve_task2(courses, N, K)
    
    write_output('cursuri.out', result)

if __name__ == "__main__":
    main()
```

This Python code solves the task described in the challenge. It reads data from `cursuri.in` and writes the result to `cursuri.out`. The first task uses a greedy algorithm that sorts courses by their end times and then schedules them in available classrooms. The second task performs a binary search to find the maximum possible course duration that allows all courses to be scheduled in the available classrooms.
