---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `formula1.in` and write to `formula1.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La o cursă de Formula 1, fiecare echipă participantă își construiește propria mașină cu care va concura. Numerotarea mașinilor în concurs este realizată de organizatori cu ajutorul unor stegulețe pătrate ce conțin alternativ, pe fiecare rând (pe orizontală și verticală), pătrățele albe și negre de dimensiuni identice. În figura următoare sunt prezentate, în ordine, stegulețele primelor 4 mașini din concurs. Observăm că fiecare steguleț are cu două rânduri (pe orizontală și verticală) mai mult decât stegulețul precedent, iar în toate cele patru colțuri ale oricărui steguleț se află un pătrățel negru.

~[formula1.jpg]

# Cerință

Scrieți un program care citește două numere naturale $K$ și $N$ și determină:

1. Câte pătrățele albe și negre sunt în total pe stegulețul mașinii cu numărul $K$;
2. Notând cu $A$ numărul total de pătrățele albe de pe stegulețele primelor $N$ mașini din concurs, câte pătrățele albe și negre sunt în total pe cel mai mare steguleț care conține cel mult $A$ pătrățele albe.

# Date de intrare

Fișierul de intrare `formula1.in` conține pe prima linie un număr natural $C$. Pentru toate testele de intrare, numărul $C$ poate avea doar valoarea $1$ sau valoarea $2$ și reprezintă numărul cerinței care trebuie rezolvată. Pe a doua linie a fișierului `formula1.in` se găsesc, în ordine, numerele naturale $K$ și $N$.

# Date de ieșire

Dacă $C = 1$, se va rezolva cerința $1$. În acest caz, fișierul de ieșire `formula1.out` va conține pe prima linie un număr natural reprezentând numărul total de pătrățele existente pe stegulețul mașinii cu numărul $K$.
Dacă $C = 2$, se va rezolva cerința $2$. În acest caz, fișierul de ieșire `formula1.out` va conține pe prima linie un număr natural reprezentând numărul total de pătrățele existente pe cel mai mare steguleț ce conține cel mult $A$ pătrățele albe.

# Restricții și precizări

* $1 \leq K \leq 100 \ 000$;
* $1 \leq N \leq 500 \ 000$;
* Pentru rezolvarea corectă a primei cerințe se obțin $20$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se obțin $80$ de puncte.

---

Example:
`formula1.in`
```
1
3 4
```

`formula1.out`
```
25
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def calculate_squares(k):
    # Each flag has 2 rows and columns more than the previous flag.
    # The first flag has a size of 1x1, so the k-th flag will have a size of (k*2-1)x(k*2-1).
    total_squares = (k * 2 - 1) ** 2
    return total_squares

def calculate_white_squares(n):
    white_squares = 0
    for i in range(1, n + 1):
        # The number of white squares for each flag can be calculated as the total number of squares
        # minus the number of black squares. For a (2k-1)x(2k-1) flag, there are k^2 white squares.
        white_squares += (i ** 2)
    return white_squares

def calculate_largest_flag(white_squares):
    # We need to find the largest flag size that contains at most `white_squares` white squares.
    # We start with a flag size of 1 and keep increasing it until we exceed the number of white squares.
    flag_size = 1
    while (flag_size // 2 + 1) ** 2 <= white_squares:
        flag_size += 2
    # We then return the total number of squares for the largest possible flag.
    return (flag_size - 2) ** 2

# Read from 'formula1.in'
with open('formula1.in', 'r') as infile:
    c = int(infile.readline().strip())
    k, n = map(int, infile.readline().split())

# Process the input based on the challenge value of C
if c == 1:
    result = calculate_squares(k)
elif c == 2:
    white_squares = calculate_white_squares(n)
    result = calculate_largest_flag(white_squares)

# Write to 'formula1.out'
with open('formula1.out', 'w') as outfile:
    outfile.write(f'{result}\n')
```
```
---------- user ----------


Expected program to write result to `formula1.out` and read from `formula1.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def calculate_total_squares(k):
    # Each side of the k-th flag will have 2k - 1 squares.
    side_length = 2 * k - 1
    total_squares = side_length * side_length  # Total squares is side length squared.
    return total_squares

def calculate_white_squares_for_flag(k):
    # For a flag of size (2k - 1), the number of white squares is k^2
    return k * k

def calculate_white_squares_up_to_n(n):
    # Sum of white squares for flags 1 to n
    return sum([calculate_white_squares_for_flag(i) for i in range(1, n + 1)])

def calculate_max_flag_size(a):
    # Find the largest flag size that has at most A white squares
    k = 1  # Starting from the first flag
    while calculate_white_squares_for_flag(k + 1) <= a:
        k += 1
    # Return the total number of squares for the largest flag that fits A white squares
    return calculate_total_squares(k)

# Read from 'formula1.in'
with open('formula1.in', 'r') as infile:
    c = int(infile.readline().strip())
    k, n = map(int, infile.readline().split())

# Process the input based on the challenge value of C and write to 'formula1.out'
with open('formula1.out', 'w') as outfile:
    if c == 1:
        result = calculate_total_squares(k)
        outfile.write(f'{result}\n')
    elif c == 2:
        # First, calculate the total number of white squares up to N
        total_white_squares = calculate_white_squares_up_to_n(n)
        result = calculate_max_flag_size(total_white_squares)
        outfile.write(f'{result}\n')
```
