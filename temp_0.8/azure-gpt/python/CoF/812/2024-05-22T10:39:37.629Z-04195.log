---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `litere.in` and write to `litere.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Algorel a primit un joc care conține $n$ jetoane pe care sunt scrise litere mari ale alfabetului. Fiecare literă are asociat un cod format dintr-o singură cifră nenulă. Jetoanele se așează în ordinea dată inițial, iar prin citirea literelor de pe acestea, de la primul la ultimul jeton, se formează un cuvânt. Dacă se citesc numerele de pe fiecare jeton, începând de la primul la ultimul, se obține un număr $k_1$. Jocul continuă la fel, dar se așează jetoanele începând de la al doilea la ultimul, obținându-se un nou număr $k_2$. Apoi, se așează jetoanele începând de la al treilea la ultimul, obținându-se un nou număr $k_3$, ș.a.m.d. până se ajunge la așezarea doar a ultimului jeton, caz în care se obține numărul $k_n$.

# Cerință

Scrieți un program care citește numărul $n$ de jetoane, cele $n$ litere asociate jetoanelor, precum și codurile asociate literelor, în ordinea apariției lor și afișează:

* numărul de perechi de litere consecutive din cuvântul inițial care au proprietatea că o literă este vocală și cealaltă este consoană (ordinea lor nu contează);
* numărul $k_1$, format din așezarea inițială a jetoanelor;
* suma $k_1 + k_2 + \dots + k_n$.



# Date de intrare

Fișierul de intrare `litere.in` va conține pe prima linie valoarea lui $n$, reprezentând numărul de jetoane, pe a doua linie un cuvânt format din $n$ litere mari (de la `A` la `Z`); literele sunt scrise una după alta, fără să fie separate cu spații, astfel încât prima literă este cea aflată pe primul jeton, a doua literă pe al doilea jeton ș.a.m.d. Pe a treia linie din fișier se află un număr $m$ ce reprezintă numărul de litere distincte, iar pe a patra linie $m$ valori reprezentând codurile literelor distincte ce apar în cuvânt. Codurile sunt date în ordinea apariției literelor în cuvânt și sunt numere naturale nenule formate dintr-o singură cifră, separate printr-un spațiu, pentru fiecare literă codul fiind dat o singură dată, chiar dacă litera se repetă.

# Date de ieșire

Fișierul de ieșire `litere.out` va conține pe prima linie numărul de perechi de litere consecutive din cuvânt care au proprietatea că o literă este vocală și cealaltă consoană (ordinea lor nu contează), pe a doua linie numărul $k_1$, (format din așezarea inițială a jetoanelor), iar pe a treia linie suma $k_1 + k_2 + \dots + k_n$.

# Restricții și precizări

* $0 < n \leq 10 \ 000$;
* $0 < m < 27$;
* Se acordă punctaje parțiale astfel:
	- $20$% pentru afișarea valorii corecte pe prima linie din fișierul rezultat (cerința $1$);
	- $40$% pentru afișarea valorii corecte pe a doua linie din fișierul rezultat (cerința $2$);
	- $40$% pentru afișarea valorii corecte pe a treia linie din fișierul rezultat (cerința $3$).

---

Example:
`litere.in`
```
3
CSC
2
1 2
```

`litere.out`
```
0
121
143
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_from_file(filename):
    with open(filename, 'r') as file:
        return file.readlines()

def write_to_file(filename, data):
    with open(filename, 'w') as file:
        file.write('\n'.join(map(str, data)))

def main():
    lines = read_from_file('litere.in')
    n = int(lines[0])
    word = lines[1].strip()
    m = int(lines[2])
    codes = list(map(int, lines[3].split()))

    # Codify the letters
    letter_dict = {}
    word_idx = 0
    for i in range(m):
        while word[word_idx] in letter_dict:
            word_idx += 1
        letter_dict[word[word_idx]] = codes[i]

    # Count vocal-consonant pairs
    vowels = set('AEIOU')
    pairs_count = sum(
        (word[i] in vowels) ^ (word[i + 1] in vowels) for i in range(n - 1)
    )

    # Calculate k_1
    k_1 = int(''.join(str(letter_dict[letter]) for letter in word))

    # Calculate sum of all k values
    k_sum = sum(
        int(''.join(str(letter_dict[word[j]]) for j in range(i, n)))
        for i in range(n)
    )

    write_to_file('litere.out', [pairs_count, k_1, k_sum])

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('litere.in', 'r') as file:
        n = int(file.readline())
        word = file.readline().strip()
        m = int(file.readline())
        codes = dict(zip(file.readline().strip().split(), map(str, range(1, m + 1))))

    # Initialize the sum of k values
    k_sum = 0
    # Initialize k_1
    k_1 = ''
    # Initialize vocal-consonant pairs count
    pairs_count = 0
    vowels = set('AEIOU')
    # Collect the first k value and count vocal-consonant pairs
    for i, letter in enumerate(word):
        k_1 += codes[letter]
        if i < n - 1 and ((letter in vowels) ^ (word[i + 1] in vowels)):
            pairs_count += 1

    # Convert k_1 to integer
    k_1 = int(k_1)
    k_sum += k_1 * (10 ** (n - 1))

    # Calculate the sum of the rest of k values
    for i in range(1, n):
        k_i = int(k_1 % (10 ** (n - i)))
        k_sum += k_i * (10 ** (n - i - 1))

    with open('litere.out', 'w') as file:
        file.write(f"{pairs_count}\n{k_1}\n{k_sum}\n")

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('litere.in') as fin:
        n = int(fin.readline().strip())
        word = fin.readline().strip()
        m = int(fin.readline().strip())
        letter_codes = dict(zip(word, map(int, fin.readline().strip().split())))

    vowels = set("AEIOU")
    consonants = set("BCDFGHJKLMNPQRSTVWXYZ")
    k_values = []
    pairs_count = 0

    for i in range(n):
        # Check for vowel-consonant pairs
        if i > 0 and ((word[i] in vowels and word[i-1] in consonants) or (word[i] in consonants and word[i-1] in vowels)):
            pairs_count += 1

        # Calculate the k values
        k_values.append(''.join(str(letter_codes[letter]) for letter in word[i:]))

    # Convert k values to integers
    k_values = [int(k) for k in k_values]
    
    # Calculate k_1 and the sum of k values
    k_1 = k_values[0]
    k_sum = sum(k_values)

    with open('litere.out', 'w') as fout:
        fout.write(f"{pairs_count}\n{k_1}\n{k_sum}\n")

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_pairs(word):
    vowels = "AEIOU"
    pairs_count = 0
    for i in range(len(word) - 1):
        if (word[i] in vowels) != (word[i + 1] in vowels):
            pairs_count += 1
    return pairs_count

def main():
    with open('litere.in', 'r') as file:
        n = int(file.readline().strip())
        word = file.readline().strip()
        m = int(file.readline().strip())
        codes = list(map(int, file.readline().strip().split()))

    # Create a dictionary to map letters to their codes
    letter_to_code = {word[i]: codes[i] for i in range(m)}

    # Calculate the number of vowel-consonant pairs
    pairs_count = calculate_pairs(word)

    # Compute k_1 and the sum of all k values
    k_1 = ''.join(str(letter_to_code[letter]) for letter in word)
    k_1_value = int(k_1)
    k_sum_value = k_1_value
    multiplier = 10 ** (n - 1)

    for i in range(1, n):
        k_sum_value += int(k_1[i:]) * multiplier
        multiplier //= 10

    with open('litere.out', 'w') as file:
        file.write(f"{pairs_count}\n{k_1_value}\n{k_sum_value}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('litere.in', 'r') as fin:
        n = int(fin.readline())
        word = fin.readline().strip()
        _ = int(fin.readline())
        codes = list(map(int, fin.readline().split()))

    # Create a mapping for letter to its corresponding code
    letter_to_code = {word[i]: codes[i] for i in range(len(set(word)))}

    # Count vowel-consonant pairs
    vowels = set('AEIOU')
    pairs_count = 0
    for i in range(1, n):
        if (word[i] in vowels) ^ (word[i-1] in vowels):
            pairs_count += 1

    # Calculate k_1 and the sum of all k values
    k_values = [letter_to_code[letter] for letter in word]
    k_1 = int(''.join(map(str, k_values)))
    k_total = sum(k_1 // (10 ** i) for i in range(n))

    with open('litere.out', 'w') as fout:
        fout.write(f'{pairs_count}\n{k_1}\n{k_total}\n')

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Open the input file and read the values
with open('litere.in', 'r') as file:
    n = int(file.readline())
    word = file.readline().strip()
    m = int(file.readline())
    codes = file.readline().split()

# Create a dictionary to map each letter to its code
code_mapping = {word[i]: codes[i] for i in range(m)}

# Determine vowels and consonants
vowels = 'AEIOU'
consonants = 'BCDFGHJKLMNPQRSTVWXYZ'

# Initialize the count of vowel-consonant pairs
vc_pairs = 0
for i in range(1, n):
    if (word[i] in vowels and word[i-1] in consonants) or (word[i] in consonants and word[i-1] in vowels):
        vc_pairs += 1

# Calculate the initial k value and the sum of all k values
k_values = [code_mapping[letter] for letter in word]
k_1 = ''.join(k_values)
k_sum = int(k_1)

# Using the formula to calculate the sum of all the k values
k_sum *= ((10 ** n) - 1) // 9

# Open the output file and write the results
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k_1}\n{k_sum}\n")
```
---------- user ----------


Expected program to write result to `litere.out` and read from `litere.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Define the function to compute the sum of the k values
def compute_k_sum(k_1, n):
    k_sum = k_1
    multiplier = 10 ** (n - 1)
    for i in range(1, n):
        k_sum += (k_1 // 10**i) * multiplier
        multiplier //= 10
    return k_sum

# Open the input file and read the values
with open('litere.in', 'r') as file:
    n = int(file.readline())
    word = file.readline().strip()
    m = int(file.readline())
    codes = list(map(int, file.readline().split()))

# Create a dictionary to map each letter to its code
code_mapping = dict(zip(word, codes))

# Initialize the count of vowel-consonant pairs and k_1 as a string
vc_pairs = 0
k_1_str = ''

# Define vowels for the check
vowels = set("AEIOU")

# Compute vc_pairs and k_1
for i in range(n):
    k_1_str += str(code_mapping[word[i]])
    if i < n - 1 and ((word[i] in vowels) != (word[i + 1] in vowels)):
        vc_pairs += 1

# Convert k_1 to integer
k_1 = int(k_1_str)

# Compute the sum of the k values
k_sum = compute_k_sum(k_1, n)

# Open the output file and write the results
with open('litere.out', 'w') as file:
    file.write(f"{vc_pairs}\n{k_1}\n{k_sum}\n")
```
