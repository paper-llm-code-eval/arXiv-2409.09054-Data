---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `concurs.in` and write to `concurs.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În orașul $X$ va avea loc o nouă ediție a concursului $Y$, la care participă trei echipe având numerele de concurs $1$, $2$ și $3$. Echipele pot avea număr diferit de concurenți. 

Ordinea în care participanții intră în concurs este una oarecare. Fiecare concurent are de susținut $9$ probe. La fiecare probă, un concurent obține un punctaj exprimat printr-un număr natural, cuprins între $0$ și $10$, inclusiv.

La scurt timp după ce un concurent a susținut toate cele $9$ probe, se afișează performanța concurentului sub forma a două numere naturale, astfel:

* primul număr poate fi $1$, $2$ sau $3$ și reprezintă echipa din care face parte concurentul;
* al doilea număr este obținut prin concatenarea (alipirea) numerelor ce reprezintă punctajele **nenule** obținute de concurent la cele $9$ probe. Dacă un concurent are punctaj $0$ la toate probele atunci al doilea număr este $0$.

Punctajul total al unui concurent se obține adunând punctajele obținute de acesta la cele $9$ probe. Punctajul unei echipe se obține adunând punctajele totale obtinute de membrii acesteia. De exemplu, afișajul $2\ 14102172$ semnifică faptul că acest concurent face parte din echipa $2$ și are punctajele nenule $1$, $4$, $10$, $2$, $1$, $7$ și $2$, la $7$ dintre cele 9 probe susținute. La celelalte două probe a avut punctajul $0$. Punctajul său total este $27$, contribuția sa la punctajul echipei $2$ fiind de $27$ de puncte.

Este declarată campioană echipa cu punctajul cel mai mare. Dacă mai multe echipe au obținut cel mai mare punctaj, atunci toate aceste echipe sunt declarate campioane. Totuși, dacă toate echipele au totalizat $0$ puncte, atunci nicio echipă nu este declarată campioană.

# Cerință

Cunoscând numărul $N$ de concurenți, echipele din care fac parte precum și punctajele obținute de fiecare dintre ei, să se determine:

1. punctajul maxim obținut de un concurent și numărul de concurenți care au obținut acest punctaj;
2. numărul sau numerele de concurs ale echipelor declarate campioane, în ordine crescătoare, și punctajul obținut de acestea. Dacă toate echipele au punctajul final $0$, se va afișa textul `FARA CAMPION`.

# Date de intrare

Fișierul de intrare `concurs.in` conține pe prima linie un număr $C$ (care poate fi $1$ sau $2$), indicând cerința de rezolvat. 
Pe a doua linie se găsește un număr natural $N$ reprezentând numărul de concurenți, iar pe fiecare dintre următoarele $N$ linii se găsesc câte două numere naturale, separate printr-un spațiu, reprezentând echipa și punctajele fiecăruia dintre cei $N$ concurenți, în ordinea intrării în concurs.

# Date de ieșire

1. Dacă $C = 1$, fișierul de ieșire `concurs.out` va conține pe o singură linie două numere naturale, separate printr-un spațiu, reprezentând punctajul maxim obținut de un concurent și numărul de concurenți care au obținut acest punctaj.
2. Dacă $C = 2$, fișierul de ieșire va conține pe o singură linie textul `FARA CAMPION` dacă toate echipele au la final punctajul $0$. În caz contrar linia va conține două, trei sau patru numere naturale separate prin câte un spațiu, reprezentând numărul sau numerele de concurs ale echipelor declarate campioane, în ordine crescătoare, și apoi punctajul obținut de acestea.

# Restricții și precizări

* $1 \leq N \leq 100 \ 000$;
* Pentru teste în valoare de $35$ de puncte avem $C = 1$.
* Pentru teste în valoare de $65$ de puncte avem $C = 2$.

---

Example:
`concurs.in`
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```

`concurs.out`
```
31 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Reading the input from the file concurs.in
with open('concurs.in', 'r') as file:
    lines = file.readlines()

C = int(lines[0].strip())
N = int(lines[1].strip())

# Preparing data structures
max_score = 0
max_score_count = 0
team_scores = [0, 0, 0]

# Processing the data
for i in range(2, N+2):
    team, *scores = map(int, lines[i].split())
    total_score = sum(scores)
    # Updating maximum score and its count
    if total_score > max_score:
        max_score = total_score
        max_score_count = 1
    elif total_score == max_score:
        max_score_count += 1
    # Updating team scores
    team_scores[team-1] += total_score

# Writing the output to the file concurs.out
with open('concurs.out', 'w') as file:
    if C == 1:
        file.write(f"{max_score} {max_score_count}\n")
    elif C == 2:
        max_team_score = max(team_scores)
        if max_team_score == 0:
            file.write('FARA CAMPION\n')
        else:
            winning_teams = [str(index + 1) for index, score in enumerate(team_scores) if score == max_team_score]
            file.write(' '.join(winning_teams) + f" {max_team_score}\n")
```
---------- user ----------


Program result did not match expected result.
Input data:
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```
Expected output:
```
31 4
```
Found output:
```
3101971 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the code and comparing it with the expected output, I identified the issue. The implementation takes the numbers as they are given, which means it does not remove the scores of 0 before calculating the total score. The total score should only include non-zero scores. 

Let's correct this by filtering out the scores of 0 before summing up the scores. We should also take into account that the scores are not separate integers but concatenated into a single number in the input file. This requires us to parse the scores differently, by converting the number into a string and iterating through its characters, skipping '0's.

Here is the corrected solution:

```python
# Reading the input from the file concurs.in
with open('concurs.in', 'r') as file:
    lines = file.readlines()

C = int(lines[0].strip())
N = int(lines[1].strip())

# Preparing data structures
max_score = 0
max_score_count = 0
team_scores = [0, 0, 0]

# Processing the data
for i in range(2, N+2):
    team, scores_concat = lines[i].split()
    team = int(team)
    # Parse the concatenated scores, ignoring '0's.
    scores = [int(score) for score in scores_concat if score != '0']
    total_score = sum(scores)
    # Updating maximum score and its count
    if total_score > max_score:
        max_score = total_score
        max_score_count = 1
    elif total_score == max_score:
        max_score_count += 1
    # Update team scores
    team_scores[team-1] += total_score

# Writing the output to the file concurs.out
with open('concurs.out', 'w') as file:
    if C == 1:
        file.write(f"{max_score} {max_score_count}\n")
    elif C == 2:
        max_team_score = max(team_scores)
        if max_team_score == 0:
            file.write('FARA CAMPION\n')
        else:
            winning_teams = [str(index + 1) for index, score in enumerate(team_scores) if score == max_team_score]
            file.write(' '.join(winning_teams) + f" {max_team_score}\n")
```
This code will correctly consider non-zero scores to calculate each contestant's total score. It should now output the expected result for the given input.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```
Expected output:
```
31 4
```
Found output:
```
28 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The differences in the expected and found result seem to stem from a misunderstanding of the input format for the scores. The scores for each contestant are not concatenated into a single number; instead, they are provided as individual numbers but need to be treated as a string during concatenation if they are non-zero.

The corrected logic should iterate through each of these individual scores after converting them to a string and concatenate them if they are non-zero. Then, it should sum up only the non-zero scores to compute the total score for each contestant.

Here is a reworked solution:

```python
# Reading the input from the file concurs.in
with open('concurs.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())

    # Initializing variables for the maximum score and count
    max_score = 0
    max_score_count = 0
    # Initializing the team scores
    team_scores = [0, 0, 0]

    for _ in range(N):
        data = file.readline().strip().split()
        team = int(data[0])
        scores = list(map(int, data[1:]))
        total_score = sum(scores)
        # Update the team's score
        team_scores[team - 1] += total_score
        # Check if this is the new maximum score
        if total_score > max_score:
            max_score = total_score
            max_score_count = 1
        elif total_score == max_score:
            max_score_count += 1

# Writing the output to the file concurs.out
with open('concurs.out', 'w') as file:
    if C == 1:
        file.write(f"{max_score} {max_score_count}\n")
    elif C == 2:
        max_team_score = max(team_scores)
        if max_team_score == 0:
            file.write('FARA CAMPION\n')
        else:
            champions = ' '.join(str(i + 1) for i, score in enumerate(team_scores) if score == max_team_score)
            file.write(f"{champions} {max_team_score}\n")
```

This code correctly processes each contestant's scores as individual numbers and updates the maximum score, the count of maximum scores, and the team scores appropriately. It should now provide the expected output for the given input.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```
Expected output:
```
31 4
```
Found output:
```
3101971 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon careful examination, I see that the previous solutions misunderstood how the scores for each contestant are given in the input file. In the input file, the scores for each contestant are not provided individually but as a concatenated string of digits representing the scores for each of the 9 events, which we need to parse correctly.

We must convert the concatenated scores to a string, filter out the '0's, and then calculate the sum of the remaining digits to find the total score for each contestant. We must also count the frequency of the maximum score.

Here is the corrected solution:

```python
# Read the input from 'concurs.in'
with open('concurs.in', 'r') as file:
    C = int(file.readline().strip())  # Read the task number
    N = int(file.readline().strip())  # Read the number of contestants
    scores = []  # List to keep track of all scores
    team_scores = [0, 0, 0]  # List to keep track of team scores

    for _ in range(N):
        team, score_str = file.readline().split()
        team = int(team) - 1  # Convert team to 0-indexed
        # Remove '0's and calculate the total score
        score = sum(int(digit) for digit in score_str if digit != '0')
        scores.append(score)
        team_scores[team] += score

# Calculate the max score and the number of occurrences
max_score = max(scores)
max_score_count = scores.count(max_score)

# Prepare the output for 'concurs.out'
output = ""
if C == 1:
    output = f"{max_score} {max_score_count}\n"
else:  # C == 2
    # Find the winning teams (there might be more than one)
    winning_score = max(team_scores)
    if winning_score == 0:
        output = "FARA CAMPION\n"
    else:
        # Append the team numbers (1-indexed) of the winning teams
        winning_teams = [str(i + 1) for i, score in enumerate(team_scores) if score == winning_score]
        output = ' '.join(winning_teams) + f" {winning_score}\n"

# Write the output to 'concurs.out'
with open('concurs.out', 'w') as file:
    file.write(output)
```

This solution should now correctly compute the highest score and its frequency for C=1 and the winning teams for C=2, according to the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
7
1 1111973
2 3101971
1 1999
2 1010101
3 1010101
3 0
3 1371910
```
Expected output:
```
31 4
```
Found output:
```
28 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy in the output is due to a mistake in parsing the score strings. Rather than considering each character as an individual score, the code incorrectly sums up all non-zero digits. However, the scores should be taken as integers in the range of 0 to 10, not as individual digits.

To fix the solution, we need to split the score string correctly. Since the input format states that the scores are concatenated without any delimiter, and each score is a number between 0 and 10 (inclusive), we must handle them as single or double-digit numbers.

Let me implement a solution that properly parses the scores by checking for '10's and splitting the rest as single digits, while also fixing the logic for the rest of the task:

```python
# Read the input from 'concurs.in'
with open('concurs.in', 'r') as file:
    C = int(file.readline().strip())
    N = int(file.readline().strip())
    scores = []
    team_scores = [0, 0, 0]
    
    for _ in range(N):
        line = file.readline().strip().split()
        team = int(line[0]) - 1
        score_str = line[1]
        score_list = []
        
        # Parse score string by checking for '10's
        i = 0
        while i < len(score_str):
            if score_str[i] == '1' and i + 1 < len(score_str) and score_str[i + 1] == '0':
                score_list.append(10)
                i += 2
            elif score_str[i] != '0':
                score_list.append(int(score_str[i]))
                i += 1
            else:
                i += 1
        
        # Calculate total score for the contestant
        total_score = sum(score_list)
        scores.append(total_score)
        team_scores[team] += total_score

max_score = max(scores)
max_score_count = scores.count(max_score)

# Write the output to 'concurs.out'
with open('concurs.out', 'w') as file:
    if C == 1:
        file.write(f"{max_score} {max_score_count}\n")
    else:
        # Handle the case when all teams have 0 points
        if all(score == 0 for score in team_scores):
            file.write("FARA CAMPION\n")
        else:
            max_team_score = max(team_scores)
            winning_teams = [str(idx + 1) for idx, score in enumerate(team_scores) if score == max_team_score]
            file.write(f"{' '.join(winning_teams)} {max_team_score}\n")
```

This solution should now correctly parse the scores (handling '10' as a double-digit score), count the maximum score occurrences, and identify the winning teams or declare "FARA CAMPION" if all teams have 0 points.
