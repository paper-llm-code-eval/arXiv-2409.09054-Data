{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/504/2024-05-22T09:02:47.249Z-02909.log",
  "attemptStart": 1716368567.249,
  "attemptEnd": 1716368620.018,
  "attemptDuration": 52.76899981498718,
  "code": "from math import atan2, degrees\nfrom collections import defaultdict\n\ndef read_segments(file_path):\n    with open(file_path, 'r') as file:\n        n = int(file.readline().strip())\n        segments = [tuple(map(int, file.readline().split())) for _ in range(n)]\n    return segments\n\ndef write_max_aligned(file_path, max_aligned):\n    with open(file_path, 'w') as file:\n        file.write(str(max_aligned) + '\\n')\n\ndef calculate_segment_angles(segments):\n    angle_count = defaultdict(int)\n    for x1, y1, x2, y2 in segments:\n        angle = atan2(y2 - y1, x2 - x1)\n        angle = degrees(angle) % 180  # Convert to degrees and modulo 180 to align angles on opposite sides\n        angle_count[angle] += 1\n        perpendicular_angle = (angle + 90) % 180\n        angle_count[perpendicular_angle] += 1\n    return angle_count\n\ndef find_max_aligned_segments(angle_count):\n    return max(angle_count.values())\n\n# Read segments from file\nsegments = read_segments('arhitect.in')\n\n# Calculate angles for all segments\nangle_count = calculate_segment_angles(segments)\n\n# Find the maximum number of aligned segments\nmax_aligned = find_max_aligned_segments(angle_count)\n\n# Write the result to file\nwrite_max_aligned('arhitect.out', max_aligned)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2066,
  "metadata": {
    "id": 504,
    "examples": [
      {
        "in": "3\n1 1 1 3\n4 1 1 4\n5 2 7 4",
        "out": "2",
        "explainer": ""
      },
      {
        "in": "6\n1 7 9 9\n4 5 8 6\n9 3 4 2\n2 7 3 2\n9 2 8 6\n5 2 4 6",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "~[arhitect.jpg|align=right|width=20em]\n\nConstrucția unei noi clădiri a fost finalizată! Frank, celebrul arhitect a  făcut o poză cu fațada. Nu este chiar mulțumit de poză deoarece a observat o înclinație a pozei relativ la orizontală. Asta se poate repara printr-o rotație, iar Frank se întreabă dacă procesul de îndreptare nu ar putea fi automatizat.\n\nCu acest scop, imaginea este transformată într-o mulțime de segmente din plan, detectate automat cu algoritmi speciali, ca în imaginea din dreapta. Segmentele care se obțin sunt identificate prin cele două extremități, puncte având coordonate numere naturale, în sistemul *xOy*: ($x_1$, $y_1$), ($x_2$, $y_2$). Un segment este numit *aliniat* cu axele dacă este orizontal (paralel cu axa *Ox*, deci $y_1=y_2$) sau vertical (paralel cu axa *Oy*, deci $x_1=x_2$).\nPrin rotația imaginii în ansamblu, o parte dintre segmente devin *aliniate* cu cele două axe.\n\n# Cerință\n\nScrieți un program care pentru o mulțime de segmente determină numărul maxim de segmente care se pot *alinia*, prin rotirea cu un același unghi a tuturor segmentelor. Unghiul de rotație poate fi orice număr real.\n\n# Date de intrare\n\nFişierul de intrare `arhitect.in` conţine pe prima linie numărul de segmente $N$ și pe următoarele $N$ linii câte patru numere întregi separate prin câte un spațiu $x_1$, $y_1$, $x_2$, $y_2$, în această ordine, cu semnificația din enunț, coordonatele ce definesc extremitățile segmentelor.\n\n# Date de ieșire\n\nFișierul de ieșire `arhitect.out` conține pe prima linie numărul maxim de segmente determinat.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 100 \\ 000$ și $1 \\leq x_1, y_1, x_2, y_2 \\leq 1 \\ 000 \\ 000 \\ 000$;\n* Toate segmentele au lungime nenulă;\n* Pentru $40$ de puncte, segmentele inițiale sunt paralele cu *Ox*, *Oy* sau cu bisectoarele axelor de coordonate.\n* Pentru $60$ de puncte, fără resticții suplimentare.",
    "header": {
      "problem_id": 504,
      "problem_name": "arhitect",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.3,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "arhitect.in",
      "output_filename": "arhitect.out",
      "multiple_solutions": false,
      "original_source": "OJI 2023 X: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "arhitect.in",
      "output": "arhitect.out"
    },
    "consoleInteraction": false
  }
}