---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def best_path(m, n, food):
    # Create a matrix to store the maximum food collected up to each cell
    dp = [[0] * n for _ in range(m)]
    # Create a matrix to store the path taken to reach each cell
    path = [[[] for _ in range(n)] for _ in range(m)]
    
    # Initialize the starting point
    dp[0][0] = food[0][0]
    path[0][0] = [(1, 1)]
    
    # Fill in the dp and path matrices
    for i in range(m):
        for j in range(n):
            if i == 0 and j == 0:
                continue
            if i > 0:
                if dp[i-1][j] + food[i][j] > dp[i][j]:
                    dp[i][j] = dp[i-1][j] + food[i][j]
                    path[i][j] = path[i-1][j] + [(i+1, j+1)]
            if j > 0:
                if dp[i][j-1] + food[i][j] > dp[i][j]:
                    dp[i][j] = dp[i][j-1] + food[i][j]
                    path[i][j] = path[i][j-1] + [(i+1, j+1)]
    
    # Return the last cell's value of dp (maximum food) and path
    return dp[-1][-1], path[-1][-1]

def read_input(filename):
    with open(filename, 'r') as file:
        m, n = map(int, file.readline().split())
        food = [list(map(int, file.readline().split())) for _ in range(m)]
    return m, n, food

def write_output(filename, cells_visited, max_food, path):
    with open(filename, 'w') as file:
        file.write(f"{cells_visited} {max_food}\n")
        for cell in path:
            file.write(f"{cell[0]} {cell[1]}\n")

def main():
    m, n, food = read_input('mouse.in')
    max_food, path = best_path(m, n, food)
    cells_visited = len(path)
    write_output('mouse.out', cells_visited, max_food, path)

if __name__ == "__main__":
    main()
```

This code reads the input data from `mouse.in`, processes it to find the optimal path that collects the most food, and writes the result to `mouse.out`. It does not use `input()` or `print()` functions for I/O operations as per the requirements.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial solution does not correctly determine the optimal path for the mouse because it only considers moving right or down at each step, without the possibility of backtracking that could lead to a higher total food count. This is why the found output in the initial solution is incorrect. The mouse must be able to move up or left as needed, as long as it hasn't visited a cell before.

To fix this, we need to approach the problem using backtracking to explore all possible paths from the initial cell to the destination cell, while accumulating the total amount of food eaten. We need to keep track of the path that results in the maximum food intake.

Here's the rewritten solution that uses backtracking:

```python
# Define the four possible movements (right, down, left, up)
movements = [(0, 1), (1, 0), (0, -1), (-1, 0)]

# Check if a move is valid
def is_valid(x, y, visited, m, n):
    return 0 <= x < m and 0 <= y < n and not visited[x][y]

# Backtracking function to find the best path
def find_best_path(x, y, m, n, grid, visited, current_food, best_food, current_path, best_path):
    # Base case: if we've reached the bottom right corner, update the best path if needed
    if x == m - 1 and y == n - 1:
        current_food += grid[x][y]
        current_path.append((x + 1, y + 1))
        if current_food > best_food[0]:
            best_food[0] = current_food
            best_path[0] = current_path[:]
        current_path.pop()
        return

    # Mark the current cell as visited and add it to the current path
    visited[x][y] = True
    current_food += grid[x][y]
    current_path.append((x + 1, y + 1))

    # Explore all four possible movements
    for dx, dy in movements:
        new_x, new_y = x + dx, y + dy
        if is_valid(new_x, new_y, visited, m, n):
            find_best_path(new_x, new_y, m, n, grid, visited, current_food, best_food, current_path, best_path)

    # Backtrack: unmark the current cell as visited and remove it from the current path
    visited[x][y] = False
    current_food -= grid[x][y]
    current_path.pop()

def main():
    # Read the input
    with open('mouse.in', 'r') as file:
        m, n = map(int, file.readline().split())
        grid = [list(map(int, file.readline().split())) for _ in range(m)]

    # Initialize visited matrix, best path and food count
    visited = [[False] * n for _ in range(m)]
    best_food = [0]
    best_path = [[]]

    # Start from the top-left corner (0, 0)
    find_best_path(0, 0, m, n, grid, visited, 0, best_food, [], best_path)

    # Write the output
    with open('mouse.out', 'w') as file:
        file.write(f"{len(best_path[0])} {best_food[0]}\n")
        for cell in best_path[0]:
            file.write(f"{cell[0]} {cell[1]}\n")

if __name__ == "__main__":
    main()
```

This solution includes a `find_best_path` function that uses recursion and backtracking to explore all possible paths that the mouse can take while avoiding revisiting cells. It keeps track of the current path and food intake and updates the best path found whenever a new path with a higher food intake is found.

Please note that this solution may not be the most time-efficient for very large grids due to the nature of the backtracking algorithm, but it will find the correct path for the given problem constraints.
