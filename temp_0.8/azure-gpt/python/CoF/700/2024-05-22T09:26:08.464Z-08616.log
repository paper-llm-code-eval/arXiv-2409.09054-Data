---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the input data
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = [list(map(int, file.readline().split())) for _ in range(m)]

# Initialize the dp array with tuples containing the max food collected and the move history
dp = [[(0, []) for _ in range(n)] for _ in range(m)]
dp[0][0] = (grid[0][0], [(1, 1)])

# Fill the dp array
for i in range(m):
    for j in range(n):
        if i > 0:
            prev_food, prev_path = dp[i-1][j]
            if prev_food + grid[i][j] > dp[i][j][0]:
                dp[i][j] = (prev_food + grid[i][j], prev_path + [(i+1, j+1)])
        if j > 0:
            prev_food, prev_path = dp[i][j-1]
            if prev_food + grid[i][j] > dp[i][j][0]:
                dp[i][j] = (prev_food + grid[i][j], prev_path + [(i+1, j+1)])

# Get the result from the last cell
max_food, path = dp[-1][-1]

# Write the output data
with open('mouse.out', 'w') as file:
    file.write(f"{len(path)} {max_food}\n")
    for pos in path:
        file.write(f"{pos[0]} {pos[1]}\n")
```
This solution assumes that there is a path from the start to the end that maximizes the food collected. It calculates the maximum amount of food that can be collected at each cell, as well as the path to that cell. The output is the path that collects the most food while reaching the opposite corner of the grid.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon review, the original solution I provided was incorrect as it only considered moving to the right or down at each step, but it did not backtrack to explore all possible paths. In other words, it did not explore all possible paths that the mouse could take to reach the opposite corner. The problem requires that we explore a path that may involve moving both to the right and down, and possibly back up or to the left if necessary, as long as the mouse does not enter a room more than once. We need to implement a depth-first search (DFS) algorithm that explores all possible paths and keeps track of the maximum food collected.

Let's rewrite the solution to correctly use DFS and record all visited paths:

```python
def dfs(x, y, m, n, grid, visited, current_path, best_result):
    # Base case: Reached the bottom-right corner
    if x == m - 1 and y == n - 1:
        current_food = sum(grid[r-1][c-1] for r, c in current_path)
        if current_food > best_result[0]:
            best_result[0] = current_food
            best_result[1] = current_path.copy()
        return
    # Recursive case: Explore all possible adjacent rooms
    for dx, dy in [(0, 1), (1, 0), (-1, 0), (0, -1)]:
        nx, ny = x + dx, y + dy
        if 0 <= nx < m and 0 <= ny < n and not visited[nx][ny]:
            visited[nx][ny] = True
            current_path.append((nx + 1, ny + 1))
            dfs(nx, ny, m, n, grid, visited, current_path, best_result)
            visited[nx][ny] = False
            current_path.pop()

# Read the input data
with open('mouse.in', 'r') as file:
    m, n = map(int, file.readline().split())
    grid = [list(map(int, file.readline().split())) for _ in range(m)]

# Initialize variables for DFS
visited = [[False for _ in range(n)] for _ in range(m)]
visited[0][0] = True  # Starting point is visited
best_result = [0, []]  # Stores the max food collected and the corresponding path

# Start DFS from the top-left corner (1, 1)
dfs(0, 0, m, n, grid, visited, [(1, 1)], best_result)

# Write the output data
with open('mouse.out', 'w') as file:
    max_food, path = best_result
    file.write(f"{len(path)} {max_food}\n")
    for pos in path:
        file.write(f"{pos[0]} {pos[1]}\n")
```

This solution initializes a `visited` matrix to track which rooms have been visited and a `best_result` list to keep track of the maximum food collected and the path taken to achieve it. The `dfs` function is a recursive function that explores all possible paths to reach the bottom-right corner. When a path reaches the bottom-right corner, the function calculates the total food collected and updates `best_result` if the current path has collected more food than any previous path.
