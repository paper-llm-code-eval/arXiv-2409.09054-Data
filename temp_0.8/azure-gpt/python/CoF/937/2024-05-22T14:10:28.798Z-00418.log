---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `tunel.in` and write to `tunel.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[tunel.png|align=right]

Tommy este un motan alintat care adoră să se plimbe prin orice tunel. De aceea, stăpânii lui i-au construit o nouă jucărie, formată din $N$ tuneluri interconectate (etichetate cu numerele distincte de la $1$ la $N$. Toate tunelurile au aceeași lungime, sunt formate din $M$ elemente unitare identice (numerotate cu numerele distincte de la $1$ la $M$) și au ieșiri la ambele capete. Conectarea dintre două tuneluri alăturate se face printr-un element unitar numit pasaj. În exemplul din Figura $1$, jucăria este formată din $4$ tuneluri, fiecare tunel fiind format din $9$ elemente unitare.

Pentru a fi mai provocator, stăpânii motanului plasează în ultimul element unitar al ultimului tunel o recompensă.

~[tunel1.png]

Motan isteț, Tommy a învățat deja toate regulile jocului:

* poate intra prin capătul din stânga al oricărui tunel (prin elementul unitar 1);
* nu trece de multe ori prin același pasaj;
* dacă nu se află lângă un pasaj, continuă să meargă prin tunel către dreapta;
* dacă ajunge la un pasaj, atunci trece prin acesta în tunelul alăturat;
* dacă ajunge în ultimul element unitar al tunelului etichetat cu $N$, atunci Tommy iese din acest tunel cu recompensă, chiar dacă ar exista un pasaj ce conectează acest ultim element la ultimul element din tunelul $N - 1$ (vezi Figura 2.b);
* dacă ajunge în ultimul element unitar al tunelului etichetat cu $N - 1$ și există un pasaj care conectează acest element cu ultimul element unitar al tunelului etichetat cu $N$, atunci Tommy trece prin acest pasaj în ultimul element din ultimul tunel, ia recompensa și iese din tunel Figura 2.a). În cazul în care acest pasaj nu există, Tommy iese din tunelul $N - 1$ fără recompensă;
* dacă ajunge în ultimul element unitar al unui tunel cu eticheta mai mică decât $N - 1$, atunci Tommy iese din tunel fără recompensă.

Ajutați-l pe Tommy să ajungă cât mai repede la recompensă respectând regulile jocului!


# Cerință

Scrieţi un program care citește numerele naturale $N, M și X$, iar apoi determină:

* eticheta tunelului prin care iese Tommy dacă intră în tunelul cu eticheta $X$ respectând regulile jocului;
* numărul $L$ de elemente unitare (ale tunelurilor și ale pasajelor) prin care Tommy ar trebui să treacă, respectând regulile jocului, pentru a ajunge la recompensă.

# Date de intrare

Fișierul `tunel.in` conține pe prima linie un număr natural $C$ reprezentând cerința din problemă care trebuie rezolvată $1$ sau $2$.

A doua linie a fișierului conține cele trei numere naturale $N, M și X$, separate prin câte un spațiu, cu semnificația din enunț. Următoarele $N - 1$ linii descriu pasajele dintre tuneluri. Prima linie dintre cele $N - 1$ indică pasajele dintre tunelurile etichetate cu $1$ și $2$, următoarea linie indică pasajele dintre tunelurile etichetate cu $2$ și $3$, $\dots$, ultima dintre cele $N - 1$ linii indică pasajele dintre tunelurile etichetate cu $N - 1$ și $N$.

Primul număr din fiecare astfel de linie reprezintă numărul $P$ de pasaje, iar următoarele $P$ numere distincte, scrise în ordine crescătoare, reprezintă pozițiile elementelor unitare (dintre cele două tuneluri) conectate prin cele $P$ pasaje.

# Date de ieșire

Dacă $C = 1$, fișierul `tunel.out` va conține pe prima linie un număr natural reprezentând răspunsul la cerința $1$.

Dacă $C = 2$, fișierul `tunel.out` va conține pe prima linie numărul natural $L$ reprezentând răspunsul la cerința $2$.

# Restricții și precizări

* $3 \leq N \leq 1 \ 000$;
* $4 \leq M \leq 20 \ 000$;
* $1 \leq P \leq M−2$;
* Pot exista cel mult $150 \ 000$ pasaje care interconectează tunelurile.
* Pot exista pasaje învecinate care să conecteze elementele unitare din două tuneluri alăturate (vezi Figura $1$) în care tunelurile $1$ și $2$ sunt interconectate prin pasajele învecinate dintre elementele $6$, respectiv $7$).
* Primul element unitar din fiecare tunel nu este conectat la niciun pasaj.
* Ultimul element unitar din tunelurile etichetate cu $1, 2, \dots, N - 2$ nu este conectat la niciun pasaj.
* Oricare element unitar poate fi conectat la cel mult un pasaj.
* Oricare două tuneluri etichetate cu numere consecutive sunt interconectate prin cel puțin un pasaj.
* Pentru fiecare intrare într-un tunel există traseu către ieșire.
* Pentru fiecare test există cel puțin o intrare într-un tunel prin care Tommy poate ajunge la ieșirea cu recompensă din tunelul $N$.
* Pentru cerința $1$ se acordă $40$ de puncte. iar pentru cerința $2$ se acordă $60$ de puncte.

---

Example:
`tunel.in`
```
1
4 9 4
3 2 4 6
2 3 5
3 4 6 9
```

`tunel.out`
```
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(filepath):
    with open(filepath, 'r') as file:
        lines = file.readlines()
    return lines

def write_output(filepath, data):
    with open(filepath, 'w') as file:
        file.write(str(data) + '\n')

def find_exit_tunnel(N, M, X, passages):
    visited = [False] * (N + 1)
    current_tunnel = X
    while True:
        if current_tunnel == N or visited[current_tunnel]:
            break
        visited[current_tunnel] = True
        if M in passages[current_tunnel - 1] and current_tunnel < N:
            current_tunnel += 1
        else:
            break
    return current_tunnel

def count_steps(N, M, X, passages):
    visited = [False] * (N + 1)
    steps = 0
    current_tunnel = X
    while True:
        if current_tunnel == N or visited[current_tunnel]:
            break
        visited[current_tunnel] = True
        steps += M  # count steps in the current tunnel
        if M in passages[current_tunnel - 1] and current_tunnel < N:
            current_tunnel += 1
            steps += 1  # count passage step
        else:
            break
    return steps

def solve_challenge(C, N, M, X, passages):
    if C == 1:
        return find_exit_tunnel(N, M, X, passages)
    elif C == 2:
        return count_steps(N, M, X, passages)

# Read input data
lines = read_input('tunel.in')
C = int(lines[0].strip())
N, M, X = map(int, lines[1].split())
passages = [[] for _ in range(N - 1)]
for i in range(N - 1):
    passage_data = list(map(int, lines[i + 2].split()))
    P = passage_data[0]
    passages[i] = passage_data[1:P+1]

# Solve the challenge
result = solve_challenge(C, N, M, X, passages)

# Write output data
write_output('tunel.out', result)
```
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_input(filepath):
    with open(filepath, 'r') as file:
        C = int(file.readline())
        N, M, X = map(int, file.readline().split())
        passages = [list(map(int, line.split()[1:])) for line in file]
    return C, N, M, X, passages

def write_output(filepath, data):
    with open(filepath, 'w') as file:
        file.write(str(data) + '\n')

def find_exit_tunnel(N, M, X, passages):
    visited = [False] * (N + 1)
    current_tunnel = X
    while True:
        if current_tunnel == N or visited[current_tunnel]:
            break
        visited[current_tunnel] = True
        if current_tunnel < N and M in passages[current_tunnel - 1]:
            current_tunnel += 1
        else:
            break
    return current_tunnel

def count_steps(N, M, X, passages):
    visited = [False] * (N + 1)
    steps = 0
    current_tunnel = X
    while True:
        if current_tunnel == N or visited[current_tunnel]:
            break
        visited[current_tunnel] = True
        steps += M  # count steps in the current tunnel
        if current_tunnel < N and M in passages[current_tunnel - 1]:
            current_tunnel += 1
            steps += 1  # count passage step
        else:
            break
    return steps

def solve_challenge(C, N, M, X, passages):
    if C == 1:
        return find_exit_tunnel(N, M, X, passages)
    elif C == 2:
        return count_steps(N, M, X, passages)

# Read input data
C, N, M, X, passages = read_input('tunel.in')

# Solve the challenge
result = solve_challenge(C, N, M, X, passages)

# Write output data
write_output('tunel.out', result)
```
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def find_exit_tunnel(N, M, X, passages):
    current_tunnel = X
    while current_tunnel < N and M in passages[current_tunnel - 1]:
        current_tunnel += 1
    return current_tunnel

def count_steps(N, M, X, passages):
    steps = 0
    current_tunnel = X
    while current_tunnel < N and M in passages[current_tunnel - 1]:
        steps += M + 1  # count steps in the current tunnel and the passage
        current_tunnel += 1
    steps += M  # count steps in the last tunnel
    return steps

# Read input data from 'tunel.in'
with open('tunel.in', 'r') as file:
    C = int(file.readline())
    N, M, X = map(int, file.readline().split())
    passages = [list(map(int, file.readline().split()[1:])) for _ in range(N - 1)]

# Solve the challenge and write output data to 'tunel.out'
with open('tunel.out', 'w') as file:
    if C == 1:
        result = find_exit_tunnel(N, M, X, passages)
    elif C == 2:
        result = count_steps(N, M, X, passages)
    file.write(str(result) + '\n')
```
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def read_data():
    with open('tunel.in', 'r') as file:
        lines = file.readlines()
    C = int(lines[0])
    N, M, X = map(int, lines[1].split())
    passages = []
    for line in lines[2:]:
        passages.append(list(map(int, line.split()))[1:])
    return C, N, M, X, passages

def write_data(result):
    with open('tunel.out', 'w') as file:
        file.write(str(result) + '\n')

def traverse_tunnels(N, M, X, passages):
    current_tunnel = X
    steps = 0

    # Create a list of exits based on passages between tunnels
    exits = [0] * N
    for i, passage in enumerate(passages):
        exits[i] = passage[-1]  # Taking the last element as the exit passage

    # Traverse tunnels
    while current_tunnel < N:
        steps += exits[current_tunnel - 1] - (1 if current_tunnel > 1 else 0)
        if exits[current_tunnel - 1] != M:
            break
        current_tunnel += 1

    # If Tommy is not in the last tunnel, he will exit without reward
    if current_tunnel < N:
        steps += M - exits[current_tunnel - 1]

    return current_tunnel, steps

# Main execution
def main():
    C, N, M, X, passages = read_data()
    if C == 1:
        # For task 1, find the exit tunnel
        result, _ = traverse_tunnels(N, M, X, passages)
    else:
        # For task 2, count the total steps
        _, result = traverse_tunnels(N, M, X, passages)
    write_data(result)

main()
```
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def solve_tunel_challenge():
    with open('tunel.in', 'r') as fin:
        C = int(fin.readline())
        N, M, X = map(int, fin.readline().split())
        passages = [list(map(int, line.split()[1:])) for line in fin]

    exit_tunnel = X
    total_steps = (X - 1) * M  # initial steps in the tunnels before the starting tunnel

    for tunnel in range(X, N):
        if M in passages[tunnel - 1]:
            total_steps += M
            exit_tunnel = tunnel + 1
        else:
            total_steps += M - 1  # We subtract 1 because Tommy never steps into the last unit if not exiting
            break

    with open('tunel.out', 'w') as fout:
        if C == 1:
            fout.write(f'{exit_tunnel}\n')
        elif C == 2:
            total_steps += 1  # We add 1 for the step where the reward is taken
            fout.write(f'{total_steps}\n')

solve_tunel_challenge()
```
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Read input data from 'tunel.in'
with open('tunel.in', 'r') as file:
    lines = file.readlines()
    C = int(lines[0].strip())
    N, M, X = map(int, lines[1].strip().split())
    passages = [list(map(int, line.strip().split())) for line in lines[2:]]

# Process the data according to the challenge requirements
if C == 1:
    # Find the label of the tunnel from where Tommy exits
    tunnel = X
    for i in range(X - 1, N - 1):
        if M in passages[i][1:]:
            tunnel += 1
        else:
            break
    result = tunnel
elif C == 2:
    # Find the number of unit elements Tommy needs to pass to get the reward
    steps = (X - 1) * M  # Steps until the current tunnel
    for i in range(X - 1, N - 1):
        if M in passages[i][1:]:
            steps += M + 1  # Steps through the tunnel and the passage
        else:
            steps += M  # Steps through the last tunnel
            break
    result = steps

# Write output data to 'tunel.out'
with open('tunel.out', 'w') as file:
    file.write(str(result) + '\n')
```
---------- user ----------


Expected program to write result to `tunel.out` and read from `tunel.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def solve_tunnel_challenge():
    with open('tunel.in', 'r') as file:
        C = int(file.readline())
        N, M, X = map(int, file.readline().split())
        passages = []
        for _ in range(N - 1):
            _, *passage = map(int, file.readline().split())
            passages.append(passage)

    if C == 1:
        for tunnel in range(X - 1, N - 1):
            if M not in passages[tunnel]:
                break
            X += 1
        result = X
    else:
        steps = 0
        for tunnel in range(X - 1, N - 1):
            steps += M
            if M not in passages[tunnel]:
                break
            steps += 1  # for the passage

        # Plus one for the reward
        steps += 1 if X == N else M
        result = steps

    with open('tunel.out', 'w') as file:
        file.write(f"{result}\n")

solve_tunnel_challenge()
```
```
