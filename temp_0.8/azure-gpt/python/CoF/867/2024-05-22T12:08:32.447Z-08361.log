---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `palindrom.in` and write to `palindrom.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.

Similar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.

Mai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.

# Cerință

Scrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:

1. câte dintre cele $n$ numere sunt palindrom;
2. câte dintre cele $n$ numere sunt aproape palindrom;
3. palindromurile asociate pentru cele $n$ numere citite.

# Date de intrare

Fișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `palindrom.out`:

* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;
* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;
* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.

---

Example:
`palindrom.in`
```
1
7
1221 500 53635 505 7 4004 1410
```

`palindrom.out`
```
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def is_palindrom(number):
    return str(number) == str(number)[::-1]

def is_almost_palindrom(number):
    num_str = str(number)
    differences = 0
    for i in range(len(num_str) // 2):
        if num_str[i] != num_str[-(i + 1)]:
            differences += 1
            if differences > 1:
                return False
    return differences == 1

def next_palindrom(number):
    length = len(str(number))
    if length == 1:
        return number if number == 9 else number + 1
    half = str(number)[:length // 2 + length % 2]
    incremented_half = str(int(half) + 1)
    if len(incremented_half) > len(half):  # Handle carry over
        if length % 2 == 0:
            return int(incremented_half + incremented_half[:-1][::-1])
        else:
            return int(incremented_half + incremented_half[-2::-1])
    mirror = half + half[:-1][::-1] if length % 2 == 0 else half + half[::-1][1:]
    return int(mirror) if int(mirror) > number else int(incremented_half + incremented_half[::-1][1:])
    
def process_file(filename_in, filename_out):
    with open(filename_in, 'r') as file_in:
        lines = file_in.readlines()
        C = int(lines[0].strip())
        n = int(lines[1].strip())
        numbers = list(map(int, lines[2].strip().split()))

    result = 0
    if C == 1:
        result = sum(1 for number in numbers if is_palindrom(number))
    elif C == 2:
        result = sum(1 for number in numbers if is_almost_palindrom(number))
    else:
        result = ' '.join(str(next_palindrom(number)) for number in numbers)
    
    with open(filename_out, 'w') as file_out:
        file_out.write(str(result) + '\n')

process_file('palindrom.in', 'palindrom.out')
```
```
---------- user ----------


Expected program to write result to `palindrom.out` and read from `palindrom.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def is_palindrom(number):
    return str(number) == str(number)[::-1]

def is_almost_palindrom(number):
    num_str = str(number)
    differences = 0
    for i in range(len(num_str) // 2):
        if num_str[i] != num_str[-(i + 1)]:
            differences += 1
            if differences > 1:
                return False
    return differences == 1

def next_palindrom(number):
    number += 1
    while True:
        if is_palindrom(number):
            return number
        number += 1

def count_palindroms(numbers):
    return sum(is_palindrom(num) for num in numbers)

def count_almost_palindroms(numbers):
    return sum(is_almost_palindrom(num) for num in numbers)

def associated_palindroms(numbers):
    return [next_palindrom(num) for num in numbers]

with open('palindrom.in', 'r') as file_in:
    C = int(file_in.readline().strip())
    n = int(file_in.readline().strip())
    numbers = list(map(int, file_in.readline().strip().split()))

if C == 1:
    result = count_palindroms(numbers)
elif C == 2:
    result = count_almost_palindroms(numbers)
elif C == 3:
    result = associated_palindroms(numbers)
    result = ' '.join(map(str, result))

with open('palindrom.out', 'w') as file_out:
    file_out.write(str(result) + '\n')
```
