---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm următorul şir:

`a`$,$ `b`$,$ `ba`$,$ `bab`$,$ `babba`$,$ `babbabab`$, \dots$

# Cerință

Scrieţi un program care să determine care este cel de-al $n$-lea termen al şirului

# Date de intrare

Fişierul de intrare `sir.in` conţine o singură linie pe care se află numărul natural $n$.

# Date de ieșire

Fişierul de ieşire `sir.out` va conţine o singură linie pe care se află al $n$-lea termen din şir

# Restricții și precizări

* $1 \leq n \leq 20$;

---

Example:
`sir.in`
```
4
```

`sir.out`
```
bab
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# sir.py
def generate_sequence(n):
    sequence = ["a", "b"]
    for i in range(2, n):
        sequence.append(sequence[i-1] + sequence[i-2])
    return sequence[n-1]

with open('sir.in', 'r') as file_in:
    n = int(file_in.readline().strip())

result = generate_sequence(n)

with open('sir.out', 'w') as file_out:
    file_out.write(result)
```

Make sure to save this code in a file named `sir.py` and run it in an environment where the files `sir.in` and `sir.out` can be created and modified. The code reads the value of `n` from `sir.in`, generates the sequence up to the nth term, and writes the nth term to `sir.out`.
