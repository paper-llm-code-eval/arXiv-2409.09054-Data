---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read the input data from telecabina.in
with open('telecabina.in', 'r') as f:
    n = int(f.readline().strip())
    stations = [tuple(map(int, f.readline().split())) for _ in range(n)]

# Initialize variables
total_people = 0
consumption = 0
special_stations = 0
ascending = True if stations[1][0] > stations[0][0] else False

# Process the data
for i in range(1, n):
    total_people += stations[i-1][1]
    altitude_diff = abs(stations[i][0] - stations[i-1][0])
    is_ascending = stations[i][0] > stations[i-1][0]

    # Calculate consumption based on ascending or descending
    if is_ascending:
        consumption += altitude_diff * 3
        if not ascending:
            special_stations += 1
            ascending = True
    else:
        consumption += altitude_diff
        if ascending:
            special_stations += 1
            ascending = False

# Write the output data to telecabina.out
with open('telecabina.out', 'w') as f:
    f.write(str(total_people) + '\n')
    f.write(str(consumption) + '\n')
    f.write(str(special_stations) + '\n')
```
```
---------- user ----------


Expected program to write result to `telecabina.out` and read from `telecabina.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Open the input file and read the number of stations and their data
with open('telecabina.in', 'r') as file:
    n = int(file.readline())
    stations = [list(map(int, line.split())) for line in file.readlines()]

# Initialize variables
people_count = 0  # Total number of people reaching the city
fuel_consumed = 0  # Total fuel consumption
special_stations = -1  # Number of special stations
prev_altitude = stations[0][0]

# Loop over stations to calculate the output values
for altitude, people in stations:
    # Add the number of people at the current station
    people_count += people
    
    # Calculate fuel consumption based on the change in altitude
    if altitude > prev_altitude:
        # Ascending
        fuel_consumed += (altitude - prev_altitude) * 3
    else:
        # Descending
        fuel_consumed += (prev_altitude - altitude)

    # Check if the station is a special station
    if (altitude > prev_altitude) != (prev_altitude > stations[max(0, stations.index([prev_altitude, people]) - 1)][0]):
        special_stations += 1

    # Update the previous altitude for the next iteration
    prev_altitude = altitude

# Correct for the first station not being special by default
if special_stations < 0:
    special_stations = 0

# Write the results to the output file
with open('telecabina.out', 'w') as file:
    file.write(f"{people_count}\n")
    file.write(f"{fuel_consumed}\n")
    file.write(f"{special_stations}\n")
```
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 26, in <module>
    if (altitude > prev_altitude) != (prev_altitude > stations[max(0, stations.index([prev_altitude, people]) - 1)][0]):
                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ValueError: [1200, 2] is not in list

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Open the input file and read the number of stations and their data
with open('telecabina.in', 'r') as file:
    n = int(file.readline())
    stations = [list(map(int, file.readline().split())) for _ in range(n)]

# Initialize variables
people_count = 0  # Total number of people reaching the city
fuel_consumed = 0  # Total fuel consumption
special_stations = 0  # Number of special stations
ascending = None  # Initialize with no direction

# Process each station starting from the second one
for i in range(1, n):
    # Update people count with the number of people from the previous station
    people_count += stations[i-1][1]

    # Calculate altitude difference and fuel consumption
    altitude_diff = stations[i][0] - stations[i-1][0]
    if altitude_diff > 0:  # ascending
        fuel_consumed += altitude_diff * 3
        if ascending == False:  # previous was descending
            special_stations += 1
        ascending = True
    else:  # descending
        fuel_consumed += abs(altitude_diff)
        if ascending == True:  # previous was ascending
            special_stations += 1
        ascending = False

# Write the results to the output file
with open('telecabina.out', 'w') as file:
    file.write(f"{people_count}\n")
    file.write(f"{fuel_consumed}\n")
    file.write(f"{special_stations}\n")
```
