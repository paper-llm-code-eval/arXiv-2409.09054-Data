---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(file_path):
    with open(file_path, 'r') as file:
        N = int(file.readline().strip())
        disks = [int(file.readline().strip()) for _ in range(N)]
    return N, disks


def write_output(file_path, max_digit, min_moves, min_digit, combinations):
    with open(file_path, 'w') as file:
        file.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{combinations}\n")


def solve_challenge(N, disks):
    # Cerință 1: Find the maximum digit
    max_digit = max(disks)

    # Cerință 2:
    # To find the minimum number of moves, we should find the median digit
    # because we are moving half of the disks up and half of them down.
    disks.sort()
    median_digit = disks[N // 2]
    min_moves = sum(abs(disk - median_digit) for disk in disks)

    # Cerință 3: The minimum digit will be the median after the min_moves are performed
    min_digit = median_digit

    # Cerință 4: Count the number of combinations of identical digits that can be obtained
    # by performing the minimum number of moves.
    # We should consider that if N is even, we have two medians to check.
    if N % 2 == 1:
        combinations = 1
    else:
        second_median = disks[N // 2 - 1]
        min_moves_second = sum(abs(disk - second_median) for disk in disks)
        combinations = 1 if min_moves_second > min_moves else 2

    return max_digit, min_moves, min_digit, combinations


# Read the input data
N, disks = read_input('cifru.in')

# Process the data
max_digit, min_moves, min_digit, combinations = solve_challenge(N, disks)

# Write the output data
write_output('cifru.out', max_digit, min_moves, min_digit, combinations)
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the complete solution, implemented with all requirements in mind:

```markdown
```python
def solve_cifru(disks):
    # Calculate the maximum digit on any disk
    max_digit = max(disks)

    # Count the occurrences of each digit
    count = [0] * 10
    for disk in disks:
        count[disk] += 1

    # Find the digit that requires the minimum number of moves
    moves = [0] * 10
    for i in range(10):
        for j in range(10):
            moves[i] += count[j] * min(abs(i - j), 10 - abs(i - j))

    min_moves = min(moves)
    min_digit = moves.index(min_moves)

    # Count the combinations of identical digits
    combinations = moves.count(min_moves)

    return max_digit, min_moves, min_digit, combinations

# Read input from 'cifru.in'
with open('cifru.in', 'r') as file:
    N = int(file.readline().strip())
    disks = [int(file.readline().strip()) for _ in range(N)]

# Process and solve the challenge
max_digit, min_moves, min_digit, combinations = solve_cifru(disks)

# Write output to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{combinations}\n")
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Here's the revised complete solution to the problem:

```python
# Read input from 'cifru.in'
with open('cifru.in', 'r') as file:
    N = int(file.readline())
    disks = [int(file.readline()) for _ in range(N)]

# Calculate the maximum digit on any disk
max_digit = max(disks)

# Calculate the frequency of each digit
frequency = [0] * 10
for digit in disks:
    frequency[digit] += 1

# Calculate the minimum number of moves and the corresponding digit
min_moves = float('inf')
min_digit = -1
combinations = 0

# For each target digit, calculate the number of moves and update the minimum if needed
for target in range(10):
    moves = 0
    for digit in range(10):
        moves += frequency[digit] * min(abs(target - digit), 10 - abs(target - digit))
    if moves < min_moves:
        min_moves = moves
        min_digit = target
        combinations = 1
    elif moves == min_moves:
        combinations += 1

# Write output to 'cifru.out'
with open('cifru.out', 'w') as file:
    file.write(f"{max_digit}\n{min_moves}\n{min_digit}\n{combinations}\n")
```

This code addresses the problem in the most efficient way, avoiding unnecessary computations and direct computation of the number of moves for each possible target digit. It then writes the results to 'cifru.out' as requested.
