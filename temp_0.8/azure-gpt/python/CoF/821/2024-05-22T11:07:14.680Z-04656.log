---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `cifru.in` and write to `cifru.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Costel a descoperit într-o debara servieta cu cifru a tatălui său. Cifrul este compus din $4$ discuri metalice pe care sunt inscripționate cifrele de la $0$ la $9$. Fiecare disc se poate mișca individual, de sus în jos sau de jos în sus, formându-se combinații de cifre. De multe ori, datorită comodității, combinația ce permite deschiderea servietei este formată numai din cifre identice: $0000, 1111$ etc.

Costel își imaginează un cifru compus din $N$ discuri metalice, fiecare având inscripționate cifrele de la $0$ la $9$, fiecare putând fi deplasat în cele două direcții specificate anterior. Prin mutare Costel înțelege deplasarea unui disc în sus sau în jos, cu o singură poziție, adică deplasarea discului până la cifra precedentă, respectiv următoare celei curente.

# Cerință

Realizați un program care, cunoscând poziția inițială a fiecărui disc dintre cele N discuri ale cifrului, determină și afișează:

1. cifra cea mai mare care apare pe discurile cifrului în forma inițială;
2. numărul minim de mutări necesare pentru ca numărul obținut pe cifru să fie compus numai din cifre identice, număr necesar deschiderii servietei;
3. cifra cea mai mică ce se poate obține în urma efectuării numărului minim de mutări determinat;
4. numărul de combinații formate din cifre identice, care se poate obține în urma efectuării numărului minim de mutări determinat.

# Date de intrare

Fișierul `cifru.in` conține:

* pe prima linie numărul natural $N$ reprezentând numărul discurilor;
* pe următoarele $N$ linii câte o cifră, reprezentând cifra curentă de pe fiecare disc al cifrului.

# Date de ieșire

În fișierul de ieșire `cifru.out` se vor afișa, pe linii separate, cele $4$ valori solicitate.

# Restricții și precizări

* $1 < N \leq 100 \ 000$;
* Un disc poate să rămână nemișcat.
* Pentru rezolvarea corectă a cerinței $1$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $2$ se acordă $40\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $3$ se acordă $20\%$ din punctajul fiecărui test
* Pentru rezolvarea corectă a cerinței $4$ se acordă $20\%$ din punctajul fiecărui test

---

Example:
`cifru.in`
```
4
7
3
9
0
```

`cifru.out`
```
9
7
0
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def compute_disc_cypher(filename_in, filename_out):
    with open(filename_in, 'r') as file:
        N = int(file.readline().strip())
        discs = [int(file.readline().strip()) for _ in range(N)]

    most_common_digit = max(set(discs), key=discs.count)
    max_digit = max(discs)
    min_digit = min(discs)
    moves_required = sum(min(abs(disc - most_common_digit), 10 - abs(disc - most_common_digit)) for disc in discs)

    # Determine the minimum digit to be obtained
    move_counts = [0] * 10
    for disc in discs:
        for i in range(10):
            move_counts[i] += min(abs(disc - i), 10 - abs(disc - i))
    min_moves = min(move_counts)
    min_digit_after_moves = move_counts.index(min_moves)

    # Calculate the number of combinations after min moves
    combinations = 0
    for i in range(10):
        if move_counts[i] == min_moves:
            combinations += 1

    with open(filename_out, 'w') as file:
        file.write(f"{max_digit}\n{moves_required}\n{min_digit_after_moves}\n{combinations}\n")

compute_disc_cypher('cifru.in', 'cifru.out')
```
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
# Compute the number of moves required to reach the target digit for each disc
def moves_to_target(disc, target):
    return min(abs(disc - target), 10 - abs(disc - target))

# Open the input file
with open('cifru.in', 'r') as fin:
    # Read the number of discs
    N = int(fin.readline())
    # Read the initial positions of the discs
    discs = [int(fin.readline()) for _ in range(N)]

# Find the most frequent digit (mode) and the max digit
max_digit = max(discs)

# Calculate the moves required for each digit to become the mode
moves = [0] * 10
for disc in discs:
    for target in range(10):
        moves[target] += moves_to_target(disc, target)

# Find the minimum moves required and the corresponding digit(s)
min_moves = min(moves)
digits_with_min_moves = [i for i, m in enumerate(moves) if m == min_moves]
min_digit_after_moves = min(digits_with_min_moves)
combinations = len(digits_with_min_moves)

# Write the output to the output file
with open('cifru.out', 'w') as fout:
    fout.write(f'{max_digit}\n{sum(moves_to_target(d, max_digit) for d in discs)}\n{min_digit_after_moves}\n{combinations}\n')
```
---------- user ----------


Expected program to write result to `cifru.out` and read from `cifru.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Open the input file
with open('cifru.in', 'r') as fin:
    # Read the number of discs
    N = int(fin.readline())
    # Read the initial positions of the discs
    discs = [int(fin.readline()) for _ in range(N)]

# Find the maximum digit
max_digit = max(discs)

# Calculate the histogram of the digits
histogram = [0] * 10
for disc in discs:
    histogram[disc] += 1

# Find the digit that requires the minimum total moves
min_moves = float('inf')
min_digit_after_moves = 0
combinations = 0
for target_digit in range(10):
    moves = sum(min(abs(disc - target_digit), 10 - abs(disc - target_digit)) for disc in discs)
    if moves < min_moves:
        min_moves = moves
        min_digit_after_moves = target_digit
        combinations = 1
    elif moves == min_moves:
        combinations += 1

# Write the output to the output file
with open('cifru.out', 'w') as fout:
    fout.write(f'{max_digit}\n{min_moves}\n{min_digit_after_moves}\n{combinations}\n')
```
