---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `partitura.in` and write to `partitura.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[partitura.png|align=right|width=25%]

Mihai s-a decis în sfârșit să compună o melodie. Fără să știe de unde să înceapă, a scris pe o foaie $n$ note muzicale. Fiecare notă muzicală este definită de două valori reprezentând durata și înălțimea acesteia astfel:
* **durata** este exprimată printr-o fracție de forma $\displaystyle \frac{1}{2^x}$, unde $x$ este un număr natural nenul;
* **înălțimea** este exprimată printr-un număr natural nenul $y$.

Durata unui grup de note este egală cu suma duratelor notelor din grup. Pentru a compune o melodie corect din punct de vedere muzical, el trebuie să distribuie toate notele în grupuri disjuncte, astfel încât durata fiecărui grup să fie $1$. Mihai definește **scorul unui grup** de note ca fiind suma înălțimilor tuturor notelor din grup, ridicată la pătrat. De asemenea, el definește **scorul unei melodii** ca fiind suma scorurilor tuturor grupurilor de note formate
care pot forma un grup.

Mihai vrea să afle care este scorul maxim al unei melodii pe care îl poate obține după gruparea tuturor notelor date.

# Cerință

Dându-se $n$ note sub forma a $n$ perechi de numere, $x$ și $y$, să se afișeze scorul maxim ce poate fi obținut după gruparea tuturor notelor date în grupuri disjuncte.

# Date de intrare

Fișierul de intrare `partitura.in` va conține pe prima linie un număr natural $n$, reprezentând numărul de note, iar pe următoarele $n$ linii se vor afla câte două numere naturale $x$ și $y$ separate prin câte un spațiu, cu semnificația din enunț, pentru fiecare din cele $n$ note.

# Date de ieșire

Fișierul de ieșire `partitura.out` va conține un singur număr natural reprezentând scorul maxim cerut.

# Restricții și precizări
* $1 \leq n \leq 300 \ 000$;
* $1 \leq x \leq 18$;
* $1 \leq y \leq 10 \ 000$;
* Se garantează că se pot distribui toate notele date în grupuri de durată $1$.
* Pentru $20$ de puncte, $n \leq 4$, $x = 1$;
* Pentru $22$ de puncte, $x = 1$;
* Pentru $17$ puncte, pentru toate notele, $x$ are aceeași valoare;
* Pentru $41$ de puncte, nu există restricții suplimentare.

---

Example:
`partitura.in`
```
5
2 3
3 2
2 1
2 2
3 5
```

`partitura.out`
```
169
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution to the programming challenge

def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        notes = [tuple(map(int, line.split())) for line in file]
    return n, notes

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def calculate_maximum_score(n, notes):
    durations = {}
    for x, y in notes:
        duration = 2 ** x
        if duration in durations:
            durations[duration].append(y)
        else:
            durations[duration] = [y]
    # Sort the heights in descending order for each duration
    for duration in durations:
        durations[duration].sort(reverse=True)
    score = 0
    while durations:
        current_sum = 0
        current_heights = []
        for duration in list(durations):
            while durations[duration] and current_sum + duration <= 2 ** 18:
                current_sum += duration
                current_heights.append(durations[duration].pop())
                if current_sum == 2 ** 18:
                    break
            if not durations[duration]:
                del durations[duration]
            if current_sum == 2 ** 18:
                break
        score += sum(current_heights) ** 2
    return score

# Read input, calculate the score, and write output
n, notes = read_input('partitura.in')
max_score = calculate_maximum_score(n, notes)
write_output('partitura.out', max_score)
```

This code reads input from `partitura.in` and writes output to `partitura.out` as required, and it calculates the maximum score according to the specified rules. Note that the solution avoids using `input()` and `print()` functions for file operations and instead uses file reading and writing. The groups of notes are formed by accumulating durations until a full group (with a total duration of 1) is formed, then the scores are calculated by squaring the sum of the heights within each group. The complexity of the algorithm is efficient, considering that the notes are pre-sorted in descending order based on their heights, and the groups are formed by always choosing the largest heights available that fit into the remaining duration of the group.
---------- user ----------


Program result did not match expected result.
Input data:
```
6
1 3
2 2
1 4
2 2
2 2
2 2
```
Expected output:
```
113
```
Found output:
```
225
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous implementation tried to form groups by continuously adding the biggest available note heights until a full group is formed. However, the implementation did not guarantee that the groups formed had the maximum possible score since it didn't consider all possible combinations of notes that could form a full group.

To fix this, we need a different approach. We can use a greedy algorithm that always tries to match notes of durations that complement each other to make a full group (i.e., their total duration sums to 1). For instance, a note with a duration of $\frac{1}{2^1}$ should be matched with a note of duration $\frac{1}{2^2}$, etc., until the group is complete.

Here is the corrected Python solution:

```python
from collections import defaultdict
from queue import PriorityQueue

def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        notes = [tuple(map(int, line.split())) for line in file]
    return n, notes

def write_output(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result) + '\n')

def calculate_maximum_score(n, notes):
    # Group notes by their duration
    durations = defaultdict(PriorityQueue)
    for x, y in notes:
        durations[x].put(-y)  # Use negative values for max heap

    # Calculate the maximum score
    score = 0
    while durations:
        current_sum = 0
        current_heights = []
        for x in sorted(durations.keys(), reverse=True):
            while not durations[x].empty() and current_sum + 2**(-x) <= 1:
                current_height = -durations[x].get()
                current_heights.append(current_height)
                current_sum += 2**(-x)
            if durations[x].empty():
                del durations[x]
        score += sum(current_heights) ** 2

    return score

# Read input, calculate the score, and write output
n, notes = read_input('partitura.in')
max_score = calculate_maximum_score(n, notes)
write_output('partitura.out', max_score)
```

The corrected implementation uses a priority queue (max heap using Python's `PriorityQueue`) to always extract the note with the maximum height for each duration. We loop through each unique duration in descending order to form groups that sum up to a total duration of 1. After forming each group, we calculate its score by summing the heights and squaring the sum, and then adding this to the total score.

Let's test this corrected implementation with the new input data provided:
```
6
1 3
2 2
1 4
2 2
2 2
2 2
```

The expected output for this test case is `113`.

Now, let's run the solution with this input data and check if we get the expected output.
