{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/507/2024-05-22T09:07:42.345Z-04567.log",
  "attemptStart": 1716368862.345,
  "attemptEnd": 1716368910.197,
  "attemptDuration": 47.85199999809265,
  "code": "from collections import defaultdict\nfrom queue import PriorityQueue\n\ndef read_input(filename):\n    with open(filename, 'r') as file:\n        n = int(file.readline().strip())\n        notes = [tuple(map(int, line.split())) for line in file]\n    return n, notes\n\ndef write_output(filename, result):\n    with open(filename, 'w') as file:\n        file.write(str(result) + '\\n')\n\ndef calculate_maximum_score(n, notes):\n    # Group notes by their duration\n    durations = defaultdict(PriorityQueue)\n    for x, y in notes:\n        durations[x].put(-y)  # Use negative values for max heap\n\n    # Calculate the maximum score\n    score = 0\n    while durations:\n        current_sum = 0\n        current_heights = []\n        for x in sorted(durations.keys(), reverse=True):\n            while not durations[x].empty() and current_sum + 2**(-x) <= 1:\n                current_height = -durations[x].get()\n                current_heights.append(current_height)\n                current_sum += 2**(-x)\n            if durations[x].empty():\n                del durations[x]\n        score += sum(current_heights) ** 2\n\n    return score\n\n# Read input, calculate the score, and write output\nn, notes = read_input('partitura.in')\nmax_score = calculate_maximum_score(n, notes)\nwrite_output('partitura.out', max_score)\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2153,
  "metadata": {
    "id": 507,
    "examples": [
      {
        "in": "5\n2 3\n3 2\n2 1\n2 2\n3 5",
        "out": "169",
        "explainer": ""
      },
      {
        "in": "6\n1 3\n2 2\n1 4\n2 2\n2 2\n2 2",
        "out": "113",
        "explainer": ""
      }
    ],
    "body": "~[partitura.png|align=right|width=25%]\n\nMihai s-a decis în sfârșit să compună o melodie. Fără să știe de unde să înceapă, a scris pe o foaie $n$ note muzicale. Fiecare notă muzicală este definită de două valori reprezentând durata și înălțimea acesteia astfel:\n* **durata** este exprimată printr-o fracție de forma $\\displaystyle \\frac{1}{2^x}$, unde $x$ este un număr natural nenul;\n* **înălțimea** este exprimată printr-un număr natural nenul $y$.\n\nDurata unui grup de note este egală cu suma duratelor notelor din grup. Pentru a compune o melodie corect din punct de vedere muzical, el trebuie să distribuie toate notele în grupuri disjuncte, astfel încât durata fiecărui grup să fie $1$. Mihai definește **scorul unui grup** de note ca fiind suma înălțimilor tuturor notelor din grup, ridicată la pătrat. De asemenea, el definește **scorul unei melodii** ca fiind suma scorurilor tuturor grupurilor de note formate\ncare pot forma un grup.\n\nMihai vrea să afle care este scorul maxim al unei melodii pe care îl poate obține după gruparea tuturor notelor date.\n\n# Cerință\n\nDându-se $n$ note sub forma a $n$ perechi de numere, $x$ și $y$, să se afișeze scorul maxim ce poate fi obținut după gruparea tuturor notelor date în grupuri disjuncte.\n\n# Date de intrare\n\nFișierul de intrare `partitura.in` va conține pe prima linie un număr natural $n$, reprezentând numărul de note, iar pe următoarele $n$ linii se vor afla câte două numere naturale $x$ și $y$ separate prin câte un spațiu, cu semnificația din enunț, pentru fiecare din cele $n$ note.\n\n# Date de ieșire\n\nFișierul de ieșire `partitura.out` va conține un singur număr natural reprezentând scorul maxim cerut.\n\n# Restricții și precizări\n* $1 \\leq n \\leq 300 \\ 000$;\n* $1 \\leq x \\leq 18$;\n* $1 \\leq y \\leq 10 \\ 000$;\n* Se garantează că se pot distribui toate notele date în grupuri de durată $1$.\n* Pentru $20$ de puncte, $n \\leq 4$, $x = 1$;\n* Pentru $22$ de puncte, $x = 1$;\n* Pentru $17$ puncte, pentru toate notele, $x$ are aceeași valoare;\n* Pentru $41$ de puncte, nu există restricții suplimentare.",
    "header": {
      "problem_id": 507,
      "problem_name": "partitura",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.3,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "partitura.in",
      "output_filename": "partitura.out",
      "multiple_solutions": false,
      "original_source": "OJI 2023 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "partitura.in",
      "output": "partitura.out"
    },
    "consoleInteraction": false
  }
}