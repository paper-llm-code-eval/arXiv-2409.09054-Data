---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `partitura.in` and write to `partitura.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[partitura.png|align=right|width=25%]

Mihai s-a decis în sfârșit să compună o melodie. Fără să știe de unde să înceapă, a scris pe o foaie $n$ note muzicale. Fiecare notă muzicală este definită de două valori reprezentând durata și înălțimea acesteia astfel:
* **durata** este exprimată printr-o fracție de forma $\displaystyle \frac{1}{2^x}$, unde $x$ este un număr natural nenul;
* **înălțimea** este exprimată printr-un număr natural nenul $y$.

Durata unui grup de note este egală cu suma duratelor notelor din grup. Pentru a compune o melodie corect din punct de vedere muzical, el trebuie să distribuie toate notele în grupuri disjuncte, astfel încât durata fiecărui grup să fie $1$. Mihai definește **scorul unui grup** de note ca fiind suma înălțimilor tuturor notelor din grup, ridicată la pătrat. De asemenea, el definește **scorul unei melodii** ca fiind suma scorurilor tuturor grupurilor de note formate
care pot forma un grup.

Mihai vrea să afle care este scorul maxim al unei melodii pe care îl poate obține după gruparea tuturor notelor date.

# Cerință

Dându-se $n$ note sub forma a $n$ perechi de numere, $x$ și $y$, să se afișeze scorul maxim ce poate fi obținut după gruparea tuturor notelor date în grupuri disjuncte.

# Date de intrare

Fișierul de intrare `partitura.in` va conține pe prima linie un număr natural $n$, reprezentând numărul de note, iar pe următoarele $n$ linii se vor afla câte două numere naturale $x$ și $y$ separate prin câte un spațiu, cu semnificația din enunț, pentru fiecare din cele $n$ note.

# Date de ieșire

Fișierul de ieșire `partitura.out` va conține un singur număr natural reprezentând scorul maxim cerut.

# Restricții și precizări
* $1 \leq n \leq 300 \ 000$;
* $1 \leq x \leq 18$;
* $1 \leq y \leq 10 \ 000$;
* Se garantează că se pot distribui toate notele date în grupuri de durată $1$.
* Pentru $20$ de puncte, $n \leq 4$, $x = 1$;
* Pentru $22$ de puncte, $x = 1$;
* Pentru $17$ puncte, pentru toate notele, $x$ are aceeași valoare;
* Pentru $41$ de puncte, nu există restricții suplimentare.

---

Example:
`partitura.in`
```
5
2 3
3 2
2 1
2 2
3 5
```

`partitura.out`
```
169
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read input data
with open('partitura.in', 'r') as file:
    n = int(file.readline().strip())
    notes = [list(map(int, line.split())) for line in file]

# Initialize a dictionary to store lists of pitches (y) keyed by the corresponding duration (1/2^x)
duration_to_pitches = {}

for x, y in notes:
    duration = 1 / (2 ** x)
    if duration not in duration_to_pitches:
        duration_to_pitches[duration] = []
    duration_to_pitches[duration].append(y)

# Sort pitches in descending order for each duration to maximize the score
for pitches in duration_to_pitches.values():
    pitches.sort(reverse=True)

# Function to calculate score of a group
def calc_group_score(group):
    return sum(group) ** 2

# Greedy algorithm to form groups with total duration 1 and maximum possible score
max_score = 0
while duration_to_pitches:
    group = []
    current_duration = 0.0
    deletions = []  # Durations to delete after forming a group

    for duration, pitches in sorted(duration_to_pitches.items()):
        while pitches and current_duration + duration <= 1:
            group.append(pitches.pop())
            current_duration += duration
            if not pitches:  # If no pitches left for this duration, schedule it for deletion
                deletions.append(duration)
        if current_duration == 1:
            break

    # Remove empty duration lists
    for duration in deletions:
        del duration_to_pitches[duration]

    # Calculate and add the score of the formed group
    max_score += calc_group_score(group)

# Write output data
with open('partitura.out', 'w') as file:
    file.write(str(max_score))
```

This solution uses a greedy approach to form groups of notes with a total duration of 1, always choosing the highest available pitches first to maximize the individual group's score. After forming each group, it calculates the group's score, adds it to the maximum score, and removes the used pitches from the list. If a list of pitches becomes empty, it removes that duration from the dictionary. The solution continues until no more groups can be formed. Finally, it writes the maximum score to the output file.
