---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pagini.in` and write to `pagini.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În podul casei, Andrei a găsit coperta unei cărţi vechi de-a bunicului său, şi împrăştiate prin mai multe cutii, paginile rupte din această carte. El se gândeşte că i-ar face o mare bucurie bunicului dacă ar reface cartea şi ar prinde paginile acesteia în copertă.

După ce a strâns laolaltă toate paginile găsite, Andrei îşi dă seama că acestea nu sunt puse în ordine şi o parte dintre ele s-au pierdut. Astfel, se hotărăşte să prindă împreună cu o agrafă paginile ce ar trebui aranjate una după alta în carte.

Cunoscând numărul fiecărei pagini din carte, găsite de Andrei, determinaţi care este numărul de agrafe de care are nevoie Andrei şi care este cel mai mare număr de pagini ce au fost prinse împreună cu o agrafă.

# Cerință

Să se scrie un program care să determine numărul de agrafe necesare pentru paginile cărţii şi cel mai mare număr de pagini ce au fost prinse împreună cu o agrafă.

# Date de intrare

Fişierul de intrare `pagini.in` conţine pe prima linie numărul $n$ de pagini, iar pe următoarele $n$ linii câte un singur număr natural nenul, reprezentând numărul unei pagini din carte.

# Date de ieșire

Fişierul de ieşire `pagini.out` va conţine

- pe prima linie un singur număr reprezentând numărul de agrafe
- pe a doua linie un singur număr reprezentând cel mai mare număr de pagini ce au fost prinse împreună cu o agrafă. 

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* Valorile din vector sunt cel mult egale cu $10^6$
* Testele si restricțiile au fost refăcute pentru standardele anului $2023$

---

Example:
`pagini.in`
```
12
11
40
27
21
13
10
5
2
4
25
26
12
```

`pagini.out`
```
3
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the input data
with open('pagini.in', 'r') as file:
    n = int(file.readline().strip())
    pages = [int(file.readline().strip()) for _ in range(n)]

# Sort the pages to find consecutive ones
pages.sort()

# Initialize the variables for the number of staples and the maximum length
staples_count = 0
max_length = 1
current_length = 1

# Iterate through the sorted pages to count staples and find the max length
for i in range(1, n):
    if pages[i] == pages[i - 1] + 1:
        current_length += 1
        max_length = max(max_length, current_length)
    else:
        if current_length > 1:
            staples_count += 1
        current_length = 1

# If the last sequence of pages is consecutive, count the last staple
if current_length > 1:
    staples_count += 1

# Write the output data
with open('pagini.out', 'w') as file:
    file.write(f'{staples_count}\n{max_length}\n')
```

This code reads the page numbers from "pagini.in", sorts them to find consecutive pages, counts the number of staples needed and the maximum number of pages that can be stapled together, and finally writes the results to "pagini.out".
