---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read the input data from 'siruri.in'
with open('siruri.in', 'r') as file:
    n = int(file.readline().strip())
    x = list(map(int, file.readline().split()))

# Create a sorted list of tuples where each tuple contains the value of x[i] and its index i
sorted_x = sorted((val, i) for i, val in enumerate(x))

# Create the result vector y with n elements initialized to 0
y = [0] * n

# Assign ranks to the elements in y based on their sorted positions
for rank, (_, i) in enumerate(sorted_x, 1):
    y[i] = rank

# Write the output data to 'siruri.out'
with open('siruri.out', 'w') as file:
    file.write(' '.join(map(str, y)))
```

This code follows the described steps, where we leverage the fact that the sorted tuples will have increasing values of `x`, and we can simply enumerate them starting from `1` to give the corresponding ranks for the `y` vector. The ranks are then assigned back to their original positions using the indices saved in the tuples.
