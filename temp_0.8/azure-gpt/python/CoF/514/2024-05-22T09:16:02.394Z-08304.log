---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to calculate the cost for a number 'a'
# This function uses precomputed prime numbers up to a certain limit
def cost(a, primes):
    # If 'a' is a prime number, the cost is 0
    if a in primes:
        return 0

    # Binary search for the nearest prime
    left, right = 0, len(primes) - 1
    while left <= right:
        mid = (left + right) // 2
        if primes[mid] < a:
            left = mid + 1
        else:
            right = mid - 1

    # After binary search, 'left' points to the smallest prime not less than 'a'
    # and 'right' to the largest prime not greater than 'a'
    if left == len(primes):
        return a - primes[right]
    if right < 0:
        return primes[left] - a
    return min(primes[left] - a, a - primes[right])

# Function to generate a list of prime numbers up to a certain limit
def sieve(limit):
    prime = [True] * (limit + 1)
    p = 2
    while p * p <= limit:
        if prime[p]:
            for i in range(p * p, limit + 1, p):
                prime[i] = False
        p += 1

    primes = [p for p in range(2, limit) if prime[p]]
    return primes

# Main program logic
def process(filename_input, filename_output):
    with open(filename_input, 'r') as fin:
        c = int(fin.readline().strip())
        n = int(fin.readline().strip())
        elements = list(map(int, fin.readline().strip().split()))

        # Precompute primes up to 2 * the maximum possible value in the elements
        primes = sieve(2 * max(elements))

        if c == 1:
            # Calculate the sum of costs for all elements
            total_cost = sum(cost(a, primes) for a in elements)
            with open(filename_output, 'w') as fout:
                fout.write(str(total_cost) + '\n')
        else:
            q = int(fin.readline().strip())
            results = []

            for _ in range(q):
                i, x, p = map(int, fin.readline().strip().split())
                elements[i-1] = x  # Replace the element at position 'i' with 'x'
                costs = sorted(cost(a, primes) for a in elements)  # Calculate and sort costs
                results.append(str(sum(costs[:p])))  # Sum of minimum total costs for 'p' positions

            with open(filename_output, 'w') as fout:
                fout.write('\n'.join(results) + '\n')

# Call the function with the provided filenames
process('primprim.in', 'primprim.out')
```

Keep in mind that the actual efficiency of this code can only be properly determined by running it on a platform that accepts the problem statement and has the corresponding testing framework. The code should work for the given constraints, but further optimizations might be necessary depending on the test cases and the execution environment.
