---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution to the challenge

from bisect import bisect_left

# Generate a list of prime numbers up to a certain limit using Sieve of Eratosthenes
def sieve(limit=1000000):
    primes = []
    sieve = [True] * (limit + 1)
    for num in range(2, limit + 1):
        if sieve[num]:
            primes.append(num)
            for multiple in range(num * num, limit + 1, num):
                sieve[multiple] = False
    return primes

# Find the closest prime to a given number
def closest_prime(num, primes):
    pos = bisect_left(primes, num)
    if pos == len(primes):
        return primes[-1]
    if pos == 0:
        return primes[0]
    before = primes[pos - 1]
    after = primes[pos]
    if after - num < num - before:
        return after
    else:
        return before

# Calculate the cost of a number
def cost(num, primes):
    cprime = closest_prime(num, primes)
    return abs(cprime - num)

# Precompute prime numbers and store them in a list
primes = sieve()

# Read input from primprim.in
with open('primprim.in', 'r') as fin:
    lines = fin.readlines()
    C = int(lines[0].strip())
    n = int(lines[1].strip())
    array = list(map(int, lines[2].strip().split()))

    # Process the first requirement
    if C == 1:
        total_cost = sum(cost(num, primes) for num in array)
        with open('primprim.out', 'w') as fout:
            fout.write(str(total_cost) + '\n')

    # Process the second requirement
    elif C == 2:
        q = int(lines[3].strip())
        operations = [list(map(int, line.strip().split())) for line in lines[4:4+q]]
        results = []

        for op in operations:
            i, x, p = op
            array[i-1] = x  # Replace the element at position i with x
            sorted_array = sorted(array, key=lambda num: cost(num, primes))
            min_cost_sum = sum(cost(sorted_array[i], primes) for i in range(p))
            results.append(min_cost_sum)

        with open('primprim.out', 'w') as fout:
            for result in results:
                fout.write(str(result) + '\n')
```
