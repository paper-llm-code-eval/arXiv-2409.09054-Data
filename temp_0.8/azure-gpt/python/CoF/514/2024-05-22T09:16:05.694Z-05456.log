---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution for the programming challenge

import math

# Function to check if a number is prime
def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

# Function to find the closest prime number to the given number
def closest_prime(num):
    if num == 1:
        return 2
    x = num
    while not is_prime(x):
        x += 1
    y = num - 1
    while y > 1 and not is_prime(y):
        y -= 1
    if x - num < num - y:
        return x
    else:
        return y

# Function to calculate the cost for a number
def cost(num):
    prime = closest_prime(num)
    return abs(num - prime)

# Task 1: Calculate the sum of costs for the initial array
def task1(arr):
    return sum(cost(x) for x in arr)

# Task 2: Perform operations and calculate the cost after each operation
def task2(arr, operations):
    costs = [cost(x) for x in arr]
    results = []
    for i, x, p in operations:
        # Update the array and the costs
        arr[i - 1] = x
        costs[i - 1] = cost(x)
        # Calculate the sum of the minimum costs for p elements
        results.append(sum(sorted(costs)[:p]))
    return results

# Main function to read input, process data, and write output
def main():
    with open('primprim.in', 'r') as f:
        C = int(f.readline())
        n = int(f.readline())
        arr = list(map(int, f.readline().split()))
        if C == 2:
            q = int(f.readline())
            operations = [tuple(map(int, f.readline().split())) for _ in range(q)]

    if C == 1:
        result = [task1(arr)]
    else:
        result = task2(arr, operations)

    with open('primprim.out', 'w') as f:
        for res in result:
            f.write(f"{res}\n")

main()
```

This code snippet includes the necessary functions for checking if a number is prime, finding the closest prime, and calculating the cost. It then defines the two main tasks and the main function to handle file I/O operations. It's optimized to the extent that it uses list comprehensions, avoids unnecessary calculations, and does not use external libraries other than `math` for square root calculations.
