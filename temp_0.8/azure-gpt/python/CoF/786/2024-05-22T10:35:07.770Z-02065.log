---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `factori.in` and write to `factori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a aflat la matematică definiția factorialului unui număr natural nenul $n$. Acesta este produsul tuturor numerelor naturale începând cu $1$ și terminând cu numărul respectiv și se notează cu $n!$. Astfel, factorialul numărului natural $6$ este $6! = 1 \cdot 2 \cdot 3 \cdot 4 \cdot 5 \cdot 6$ și este egal cu $720$. Factorialele numerelor naturale cresc însă extrem de repede. De exemplu, $7! = 5040$ în timp ce $10! = 3628800$.

Fiind un bun matematician, Gigel a imaginat o altă metodă de a indica factorialul unui număr. Astfel, el știe că un număr natural nenul se poate descompune în factori primi. De exemplu $720$ poate fi scris ca $2^4 \cdot 3^2 \cdot 5^1$. Gigel codifică descompunerea în factori primi astfel: $4 \ 2 \ 1$ însemnând faptul că în descompunerea lui $720$ în factori primi apare factorul $2$ de $4$ ori, factorul $3$ apare de două ori și factorul $5$ apare o dată. Cu alte cuvinte, Gigel indică pentru fiecare număr prim $\leq n$ puterea la care acesta apare în descompunerea în factori primi a lui $n!$.

# Cerință

Scrieți un program care să citească o secvență de numere naturale nenule și care să afișeze în modul descris în enunț factorialele numerelor citite.

# Date de intrare

Fișierul de intrare `factori.in` conține mai multe numere naturale nenule, câte un număr pe linie. Ultima linie a fișierului de intrare conține valoarea $0$ indicând faptul că setul de numere s-a terminat.

# Date de ieșire

Fișierul de ieșire `factori.out` va conține câte o linie pentru fiecare număr nenul din fișierul de intrare. Pe linia $i$ din fișierul de ieșire va fi descrisă descompunerea în factori primi a factorialului numărului de pe linia $i$ din fișierul de intrare, în modul descris în enunț. Numerele scrise pe aceeași linie vor fi separate prin câte un spațiu.

# Restricții și precizări

* Numerele naturale din fișierul de intrare (exceptând ultimul) sunt din intervalul $[2, 60 \ 000]$.
* Fișierul de intrare conține maxim $10$ numere naturale nenule.

---

Example:
`factori.in`
```
2
8
15
10
0
```

`factori.out`
```
1
7 2 1 1
11 6 3 2 1 1
8 4 2 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from math import sqrt

# Function to get all primes up to a certain number
def sieve_of_eratosthenes(limit):
    primes = []
    sieve = [True] * (limit + 1)
    for num in range(2, int(sqrt(limit)) + 1):
        if sieve[num]:
            primes.append(num)
            for mult in range(num*num, limit + 1, num):
                sieve[mult] = False
    for num in range(int(sqrt(limit)) + 1, limit + 1):
        if sieve[num]:
            primes.append(num)
    return primes

# Function to calculate the powers of primes in the factorial of a number
def factorial_prime_factors(n, primes):
    factors = []
    for prime in primes:
        if prime > n:
            break
        power = 0
        k = prime
        while k <= n:
            power += n // k
            k *= prime
        factors.append(power)
    return factors

# Read from input file
with open('factori.in', 'r') as file:
    numbers = [int(line.strip()) for line in file if int(line.strip())]

# Find maximum number to determine the range of primes needed
max_number = max(numbers)
primes = sieve_of_eratosthenes(max_number)

# Process each number and write the results to the output file
with open('factori.out', 'w') as file:
    for number in numbers:
        factors = factorial_prime_factors(number, primes)
        file.write(' '.join(map(str, factors)) + '\n')
```

This code calculates the powers of prime factors in the factorial of each number read from `factori.in` and writes the results to `factori.out`. It uses the sieve of Eratosthenes to find all the prime numbers up to the maximum input value, then counts the powers of these primes in the factorial of each input number.
