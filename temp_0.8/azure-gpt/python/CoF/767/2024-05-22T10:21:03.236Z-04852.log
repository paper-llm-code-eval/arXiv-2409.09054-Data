---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# dreptc.py

def count_rectangles(points_by_color):
    rectangles = 0
    for color, points in points_by_color.items():
        x_coords = {}
        for x, y in points:
            if x not in x_coords:
                x_coords[x] = []
            x_coords[x].append(y)
        
        for ys in x_coords.values():
            ys.sort()
            n = len(ys)
            for i in range(n):
                for j in range(i + 1, n):
                    pair = (ys[i], ys[j])
                    if pair in pairs_seen:
                        rectangles += pairs_seen[pair]
                        pairs_seen[pair] += 1
                    else:
                        pairs_seen[pair] = 1
            pairs_seen = {}
    return rectangles

# Read input
with open('dreptc.in', 'r') as fin:
    N, MaxC = map(int, fin.readline().split())
    points_by_color = {}
    for _ in range(N):
        x, y, c = map(int, fin.readline().split())
        if c not in points_by_color:
            points_by_color[c] = []
        points_by_color[c].append((x, y))

# Solve the problem
max_rectangles = count_rectangles(points_by_color)

# Write output
with open('dreptc.out', 'w') as fout:
    fout.write(str(max_rectangles) + '\n')
```
This Python code reads the input from 'dreptc.in', processes the points to find all possible rectangles that fit the given criteria, and writes the result to 'dreptc.out'. The count_rectangles function uses a dictionary to keep track of points by color, a nested dictionary to group points with the same x-coordinate, and a tuple to represent the y-coordinates for potential rectangle sides. The algorithm checks for each pair of y-coordinates if they have been seen before to form a rectangle and updates the count accordingly.
---------- user ----------


Program exited with code 1.
stdout:
```

```
stderr:
```
Traceback (most recent call last):
  File "/app/app.py", line 37, in <module>
    max_rectangles = count_rectangles(points_by_color)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/app/app.py", line 18, in count_rectangles
    if pair in pairs_seen:
               ^^^^^^^^^^
UnboundLocalError: cannot access local variable 'pairs_seen' where it is not associated with a value

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The error shown in the output indicates that the `pairs_seen` variable is being referenced before it is assigned any value. This is a scoping issue: `pairs_seen` should be defined before the `for ys in x_coords.values():` loop, not inside it, so that it can retain its value across different iterations of the outer loop. Let's correct the code.

Here is the fixed solution:

```python
# dreptc.py

def count_rectangles(points_by_color):
    rectangles = 0
    for color, points in points_by_color.items():
        x_coords = {}
        for x, y in points:
            if x not in x_coords:
                x_coords[x] = []
            x_coords[x].append(y)
        
        pairs_seen = {}
        for ys in x_coords.values():
            ys.sort()
            n = len(ys)
            for i in range(n):
                for j in range(i + 1, n):
                    pair = (ys[i], ys[j])
                    if pair in pairs_seen:
                        rectangles += pairs_seen[pair]
                        pairs_seen[pair] += 1
                    else:
                        pairs_seen[pair] = 1
        
    return rectangles

# Read input
with open('dreptc.in', 'r') as fin:
    N, MaxC = map(int, fin.readline().split())
    points_by_color = {}
    for _ in range(N):
        x, y, c = map(int, fin.readline().split())
        if c not in points_by_color:
            points_by_color[c] = []
        points_by_color[c].append((x, y))

# Solve the problem
max_rectangles = count_rectangles(points_by_color)

# Write output
with open('dreptc.out', 'w') as fout:
    fout.write(str(max_rectangles) + '\n')
```

This code should now work correctly without encountering the UnboundLocalError, and it will calculate the maximum number of correct rectangles based on the provided input file `dreptc.in` and write the result to the output file `dreptc.out`.
