---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# dreptc.py

def read_points(filename):
    with open(filename, 'r') as file:
        n, _ = map(int, file.readline().split())
        points = [tuple(map(int, file.readline().split())) for _ in range(n)]
    return points

def write_result(filename, result):
    with open(filename, 'w') as file:
        file.write(str(result))

def count_rectangles(points):
    # Group points by color
    color_to_points = {}
    for x, y, c in points:
        color_to_points.setdefault(c, {}).setdefault(x, set()).add(y)

    # Count rectangles for each color group
    rectangles_count = 0
    for x_dict in color_to_points.values():
        for x, ys in x_dict.items():
            for other_x, other_ys in x_dict.items():
                if x < other_x:  # Avoid counting the same rectangle twice
                    common_ys = ys.intersection(other_ys)
                    rectangles_count += len(common_ys) * (len(common_ys) - 1) // 2  # Combination of two ys

    return rectangles_count

# Main execution
points = read_points('dreptc.in')
result = count_rectangles(points)
write_result('dreptc.out', result)
```

This Python code reads points from `dreptc.in`, groups them by color and their x-coordinate, then counts the rectangles by checking intersections of y-coordinates for pairs of same-colored x-coordinates, avoiding counting the same rectangle twice. Finally, it writes the result to `dreptc.out`. It should perform well with the given constraints.
