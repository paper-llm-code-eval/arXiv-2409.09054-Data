---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is the Python solution based on the steps outlined previously. The solution is written in a markdown code block as requested:

```python
# Read data from pinochio.in
with open('pinochio.in', 'r') as file:
    n, p, k = map(int, file.readline().split())

# Calculate the nose size after k days
days_in_week = 7
growth_days = 5

# Calculate the number of complete weeks and the remaining days
complete_weeks, remaining_days = divmod(k, days_in_week)

# Calculate the growth during the weekdays
growth = complete_weeks * growth_days * p

# Calculate the shrink during the weekends (2 cm per complete week)
shrink = complete_weeks * 2

# Handle the remaining days
if remaining_days > growth_days:
    # If remaining days include a weekend, subtract the weekend shrink
    growth += growth_days * p
    shrink += remaining_days - growth_days
else:
    # Else, just add the growth for the remaining days
    growth += remaining_days * p

# Calculate the final size of the nose
final_size = n + growth - shrink

# Write data to pinochio.out
with open('pinochio.out', 'w') as file:
    file.write(str(final_size))
```

This code should be put in a Python (.py) file and executed in an environment where the `pinochio.in` file is present. It will then create or overwrite the `pinochio.out` file with the result.
