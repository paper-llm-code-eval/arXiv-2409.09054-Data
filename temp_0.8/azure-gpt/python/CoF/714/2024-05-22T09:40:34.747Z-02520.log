---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from the 'pinochio.in' file
with open('pinochio.in', 'r') as file:
    n, p, k = map(int, file.readline().split())

# Calculate the size of Pinocchio's nose after k days
# Since there are 5 working days and 2 weekend days in a week, we'll calculate accordingly
full_weeks = k // 7
remaining_days = k % 7

# During the weekdays of the full weeks, the nose grows by p cm each day for 5 days
# During the weekend, it shrinks by 1 cm each day for 2 days
nose_growth_per_week = (p * 5) - (1 * 2)

# Calculate the total growth for the full weeks
total_growth = nose_growth_per_week * full_weeks

# Add the growth for the remaining days
for day in range(remaining_days):
    if day < 5:  # Working days
        total_growth += p
    else:  # Weekend
        total_growth -= 1

# The initial size of the nose plus the total growth gives the final size of the nose
final_size = n + total_growth

# Write the final result to 'pinochio.out'
with open('pinochio.out', 'w') as file:
    file.write(str(final_size))
```

This code reads from a file named 'pinochio.in', calculates the final size of Pinocchio's nose after `k` days based on the growth rate `p` during the weekdays and the shrinking during the weekends, and writes the result to a file named 'pinochio.out'. The input file is expected to contain three space-separated integers, representing the initial size of the nose, the daily growth rate, and the number of days, respectively.
