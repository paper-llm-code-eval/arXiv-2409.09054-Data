---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read from the input file
with open('pinochio.in', 'r') as file:
    n, p, k = map(int, file.readline().split())

# Calculate the size of the nose after k days
# Every week (7 days), Pinochio lies for 5 days and tells the truth for 2 days.
# So there is a net growth of (5*p - 2) per week.
weeks = k // 7
nose_size = n + weeks * (5 * p - 2)

# For the remaining days, Pinochio lies if it's a weekday and his nose grows,
# and it shrinks on the weekend.
remaining_days = k % 7
for i in range(remaining_days):
    if i < 5:  # First 5 days of the week, his nose grows
        nose_size += p
    else:  # Last 2 days (weekend), his nose shrinks
        nose_size -= 1

# Write to the output file
with open('pinochio.out', 'w') as file:
    file.write(str(nose_size))
```

This code reads the initial size of the nose `n`, the daily increase `p`, and the number of days `k` from the file named `pinochio.in`. It then calculates the size of Pinochio's nose after `k` days and writes this value to a file named `pinochio.out`. 

The solution takes into account that for every full week, there's a net growth of `(5 * p - 2)` centimeters, and then deals with any remaining days separately. It avoids using loops for all `k` days, which significantly improves the efficiency of the code.
