---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `virus.in` and write to `virus.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe Planeta ZUZU anul are $10 \ 000 \ 000$ zile, numerotate de la $1$ la $10 \ 000 \ 000$. La institutul de cercetări planetar, o grupă de specialişti au grijă de mai multe populaţii de viruşi. Pentru fiecare populaţie se alocă un interval de zile de lucru $[a, b]$, $a$ şi $b$ zile din anul zuzulian, în care se fac determinări asupra numărului de indivizi ai populaţiei, asupra formelor noi de viruşi apăruţi etc. Directorul institutului a constatat că există însă şi perioade în care nu se execută nici o cercetare, motiv pentru care l-a angajat pe Atomel, un statistician vestit, care trebuie să verifice perioada cea mai lungă de lucru în care cercetătorii sunt ocupaţi cu populaţiile de viruşi, precum şi cea mai lungă perioadă în care nu se face nici un studiu asupra viruşilor.

# Cerință

Fiind date numărul $n$ de intervale de lucru asupra populaţiilor de viruşi, precum şi pentru fiecare interval ziua de început şi cea de sfârşit a intervalului de lucru, să se determine care este cea mai lungă perioadă în care se lucrează asupra populaţiilor de viruşi, precum şi cea mai lungă perioadă în care nu se efectuează nici o observaţie asupra viruşilor.


# Date de intrare

Fişierul de intrare `virus.in` conţine pe prima linie o valoare n cu semnificaţia numărul de intervale date; pe următorele $n$ linii câte două valori separate prin spaţiu ce descriu un interval $[a, b]$ de lucru şi observaţii asupra populaţiilor de viruşi. Intervalele sunt date corect, $a<b$.

# Date de ieșire

Fişierul de ieşire `virus.out` conţine două valori separate printr-un spaţiu $L \ P$, unde $L$ reprezintă perioada cea mai lungă în care se fac cercetări asupra populaţiilor de viruşi, iar $P$ perioada cea mai lungă în care nu se fac observaţii. 

# Restricții și precizări

* $0 < n \leq 5 \ 000$;
* $1 \leq a, b \leq 10 \ 000 \ 000$; unde $a$ și $b$ descriu un interval de timp.

---

Example:
`virus.in`
```
3
700 1200
300 1000
1500 2100
```

`virus.out`
```
900 300
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read input from file
with open('virus.in') as f:
    n = int(f.readline().strip())
    intervals = [tuple(map(int, line.strip().split())) for line in f]

# Sort the intervals by their starting times
intervals.sort()

# Initialize variables to keep track of the maximum work and pause periods
max_work_period = 0
max_pause_period = 0

# We start from the first interval
current_start, current_end = intervals[0]

# Loop over the sorted intervals to find the max work and pause periods
for i in range(1, n):
    # If the next interval overlaps or is adjacent to the current one, extend the current interval
    if intervals[i][0] <= current_end:
        current_end = max(current_end, intervals[i][1])
    else:
        # If the next interval does not overlap, update the max work period, if necessary
        max_work_period = max(max_work_period, current_end - current_start)
        # Update the max pause period
        max_pause_period = max(max_pause_period, intervals[i][0] - current_end)
        # Move to the next interval
        current_start, current_end = intervals[i]

# Check the last interval
max_work_period = max(max_work_period, current_end - current_start)

# Write output to file
with open('virus.out', 'w') as f:
    f.write(f"{max_work_period} {max_pause_period}\n")
```

This code will efficiently handle the input set, sort the intervals, and scan through them once to determine the longest working and pause periods. The complexity of the code is O(n log n) due to the sorting step, and O(n) for the single iteration over the intervals.
