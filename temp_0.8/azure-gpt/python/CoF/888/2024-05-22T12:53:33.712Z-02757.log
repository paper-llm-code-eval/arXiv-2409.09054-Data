---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from heapq import heappush, heappop

def read_matrix(file_path):
    with open(file_path, 'r') as file:
        V = int(file.readline())
        N, G = map(int, file.readline().split()) if V == 1 else (int(file.readline()), None)
        matrix = [list(map(int, file.readline().split())) for _ in range(N)]
    return V, N, G, matrix

def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(str(result) + '\n')

def bfs_min_dangerous(matrix, N, G):
    visited = [[False] * N for _ in range(N)]
    queue = [(0, 0, 0)]  # (dangerous_zones, x, y)
    visited[0][0] = True
    
    while queue:
        dangerous_zones, x, y = queue.pop(0)
        if x == N - 1 and y == N - 1:
            return dangerous_zones
        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                visited[nx][ny] = True
                if matrix[nx][ny] < G:
                    queue.append((dangerous_zones + 1, nx, ny))
                else:
                    queue.append((dangerous_zones, nx, ny))
    return float('inf')

def binary_search_max_weight(matrix, N):
    def is_safe_path(weight):
        visited = [[False] * N for _ in range(N)]
        queue = [(0, 0)]
        visited[0][0] = True
        
        while queue:
            x, y = queue.pop(0)
            if x == N - 1 and y == N - 1:
                return True
            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N and matrix[nx][ny] >= weight and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))
        return False
    
    low, high = 1, 10000
    while low < high:
        mid = (low + high + 1) // 2
        if is_safe_path(mid):
            low = mid
        else:
            high = mid - 1
    return low

def solve():
    file_input = 'rover.in'
    file_output = 'rover.out'
    V, N, G, matrix = read_matrix(file_input)

    if V == 1:
        result = bfs_min_dangerous(matrix, N, G)
    else:  # V == 2
        result = binary_search_max_weight(matrix, N)
    
    write_output(file_output, result)

solve()
```
```
---------- user ----------


Expected program to write result to `rover.out` and read from `rover.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from heapq import heappop, heappush

def read_matrix(file_path):
    with open(file_path, 'r') as file:
        V = int(file.readline().strip())
        if V == 1:
            N, G = map(int, file.readline().split())
        else:
            N, G = int(file.readline()), None
        matrix = [list(map(int, file.readline().split())) for _ in range(N)]
    return V, N, G, matrix

def write_output(file_path, result):
    with open(file_path, 'w') as file:
        file.write(str(result) + '\n')

def dijkstra(matrix, N, G):
    visited = [[False] * N for _ in range(N)]
    queue = [(0, 0, 0)]  # (dangerous_zones, x, y)
    visited[0][0] = True
    
    while queue:
        dangerous_zones, x, y = heappop(queue)
        if x == N - 1 and y == N - 1:
            return dangerous_zones
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                visited[nx][ny] = True
                heappush(queue, (dangerous_zones + (matrix[nx][ny] < G), nx, ny))
    return float('inf')

def binary_search_max_weight(matrix, N):
    def can_reach_end(weight):
        visited = [[False] * N for _ in range(N)]
        queue = [(0, 0)]
        visited[0][0] = True
        
        while queue:
            x, y = queue.pop(0)
            if x == N - 1 and y == N - 1:
                return True
            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N and matrix[nx][ny] >= weight and not visited[nx][ny]:
                    visited[nx][ny] = True
                    queue.append((nx, ny))
        return False

    left, right = 1, max(max(row) for row in matrix)
    while left < right:
        mid = (left + right + 1) // 2
        if can_reach_end(mid):
            left = mid
        else:
            right = mid - 1
    return left

def solve(file_input='rover.in', file_output='rover.out'):
    V, N, G, matrix = read_matrix(file_input)

    if V == 1:
        result = dijkstra(matrix, N, G)
    else:  # V == 2
        result = binary_search_max_weight(matrix, N)

    write_output(file_output, result)

solve()
```
This solution uses a priority queue (heap) for Dijkstra's algorithm to solve the requirement of V=1 and a binary search for the requirement of V=2. It reads from `rover.in` and writes to `rover.out` as specified.
