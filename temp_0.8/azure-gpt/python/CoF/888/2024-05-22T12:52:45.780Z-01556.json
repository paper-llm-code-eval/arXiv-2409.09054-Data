{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/888/2024-05-22T12:52:45.780Z-01556.log",
  "attemptStart": 1716382365.78,
  "attemptEnd": 1716382420.328,
  "attemptDuration": 54.54800009727478,
  "code": "from heapq import heappush, heappop\n\ndef read_from_file(filename=\"rover.in\"):\n    with open(filename, \"r\") as file:\n        V = int(file.readline().strip())\n        if V == 1:\n            N, G = map(int, file.readline().strip().split())\n            grid = [list(map(int, file.readline().strip().split())) for _ in range(N)]\n            return V, N, G, grid\n        else:\n            N = int(file.readline().strip())\n            grid = [list(map(int, file.readline().strip().split())) for _ in range(N)]\n            return V, N, None, grid\n\ndef write_to_file(result, filename=\"rover.out\"):\n    with open(filename, \"w\") as file:\n        file.write(str(result) + '\\n')\n\ndef min_dangerous_zones(N, G, grid):\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    pq = [(0, 0, 0)]  # Format: (dangerous_zones, x, y)\n    visited = set()\n    \n    while pq:\n        dangerous, x, y = heappop(pq)\n        if (x, y) == (N-1, N-1):\n            return dangerous\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                new_dangerous = dangerous + (grid[nx][ny] < G)\n                heappush(pq, (new_dangerous, nx, ny))\n\ndef max_rover_weight(N, grid):\n    def bfs(weight):\n        if grid[0][0] < weight or grid[N-1][N-1] < weight:\n            return False\n        visited = set()\n        queue = [(0, 0)]\n        \n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) == (N-1, N-1):\n                return True\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n\n            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] >= weight:\n                    queue.append((nx, ny))\n\n        return False\n\n    low, high = 1, max(map(max, grid))\n    while low <= high:\n        mid = (high + low) // 2\n        if bfs(mid):\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return high\n\ndef main():\n    V, N, G, grid = read_from_file()\n    if V == 1:\n        result = min_dangerous_zones(N, G, grid)\n    else:\n        result = max_rover_weight(N, grid)\n    write_to_file(result)\n\nif __name__ == \"__main__\":\n    main()\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2744,
  "metadata": {
    "id": 888,
    "examples": [
      {
        "in": "1\n5 5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "2",
        "explainer": ""
      }
    ],
    "body": "NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.\n\n# Cerințe\n\n1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.\n2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.\n\n# Date de intrare\n\n\nPe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.\nPe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. \n\n# Date de ieșire\n\n\nFișierul de ieșire este `rover.out`.\n\nDacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.\n\nDacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.\n\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 500$\n* $1 \\leq G \\leq 5 \\ 000$\n* $1 \\leq A_{ij} \\leq 10 \\ 000$\n* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.\n* Roverul nu va trece de mai multe ori prin aceeași zonă.\n\n\n| $V$ | Punctaj |\n| - | ------- |\n| $1$ | 45      |\n| $2$ | 45      |",
    "header": {
      "problem_id": 888,
      "problem_name": "Rover",
      "tags": "[Binary Search, Deque, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.35,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "rover.in",
      "output_filename": "rover.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 X: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "rover.in",
      "output": "rover.out"
    },
    "consoleInteraction": false
  }
}