---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
from heapq import heappush, heappop

def read_from_file():
    with open("rover.in", "r") as file:
        data = file.readlines()
    V = int(data[0].strip())
    if V == 1:
        N, G = map(int, data[1].strip().split())
        grid = [list(map(int, row.strip().split())) for row in data[2:]]
        return V, N, G, grid
    else:
        N = int(data[1].strip())
        grid = [list(map(int, row.strip().split())) for row in data[2:]]
        return V, N, None, grid

def write_to_file(result):
    with open("rover.out", "w") as file:
        file.write(str(result) + '\n')

def min_dangerous_zones(N, G, grid):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    visited = [[False] * N for _ in range(N)]
    pq = [(0, 0, 0)]  # Format: (dangerous_zones, x, y)
    
    while pq:
        dangerous, x, y = heappop(pq)
        if (x, y) == (N-1, N-1):
            return dangerous
        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                new_dangerous = dangerous + (1 if grid[nx][ny] < G else 0)
                heappush(pq, (new_dangerous, nx, ny))

def max_rover_weight(N, grid):
    def is_path_possible(weight):
        if grid[0][0] < weight or grid[N-1][N-1] < weight:
            return False
        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
        visited = [[False] * N for _ in range(N)]
        queue = [(0, 0)]

        while queue:
            x, y = queue.pop(0)
            if (x, y) == (N-1, N-1):
                return True
            if visited[x][y]:
                continue
            visited[x][y] = True

            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny] and grid[nx][ny] >= weight:
                    queue.append((nx, ny))

        return False

    left, right = 1, 10000
    result = 1

    while left <= right:
        mid = (left + right) // 2
        if is_path_possible(mid):
            result = mid
            left = mid + 1
        else:
            right = mid - 1

    return result

def main():
    V, N, G, grid = read_from_file()
    if V == 1:
        result = min_dangerous_zones(N, G, grid)
    else:
        result = max_rover_weight(N, grid)
    write_to_file(result)

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `rover.out` and read from `rover.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
from heapq import heappush, heappop

def read_from_file(filename="rover.in"):
    with open(filename, "r") as file:
        V = int(file.readline().strip())
        if V == 1:
            N, G = map(int, file.readline().strip().split())
            grid = [list(map(int, file.readline().strip().split())) for _ in range(N)]
            return V, N, G, grid
        else:
            N = int(file.readline().strip())
            grid = [list(map(int, file.readline().strip().split())) for _ in range(N)]
            return V, N, None, grid

def write_to_file(result, filename="rover.out"):
    with open(filename, "w") as file:
        file.write(str(result) + '\n')

def min_dangerous_zones(N, G, grid):
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    pq = [(0, 0, 0)]  # Format: (dangerous_zones, x, y)
    visited = set()
    
    while pq:
        dangerous, x, y = heappop(pq)
        if (x, y) == (N-1, N-1):
            return dangerous
        if (x, y) in visited:
            continue
        visited.add((x, y))

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:
                new_dangerous = dangerous + (grid[nx][ny] < G)
                heappush(pq, (new_dangerous, nx, ny))

def max_rover_weight(N, grid):
    def bfs(weight):
        if grid[0][0] < weight or grid[N-1][N-1] < weight:
            return False
        visited = set()
        queue = [(0, 0)]
        
        while queue:
            x, y = queue.pop(0)
            if (x, y) == (N-1, N-1):
                return True
            if (x, y) in visited:
                continue
            visited.add((x, y))

            for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited and grid[nx][ny] >= weight:
                    queue.append((nx, ny))

        return False

    low, high = 1, max(map(max, grid))
    while low <= high:
        mid = (high + low) // 2
        if bfs(mid):
            low = mid + 1
        else:
            high = mid - 1

    return high

def main():
    V, N, G, grid = read_from_file()
    if V == 1:
        result = min_dangerous_zones(N, G, grid)
    else:
        result = max_rover_weight(N, grid)
    write_to_file(result)

if __name__ == "__main__":
    main()
```
This is the fixed version that reads from "rover.in" and writes to "rover.out" as specified, without using `input()` or `print()`. The solution includes both tasks of the challenge and optimizes for speed using heap for task 1 and binary search with breadth-first search (BFS) for task 2.
