---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Utility function to check if number is prime
def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

# Function to find the largest prime from the list
def largest_prime(lst):
    primes = [num for num in lst if is_prime(num)]
    if primes:
        return max(primes)
    return 0

# Function to split the number into two parts and return list of primes from those parts
def split_into_two(num):
    num_str = str(num)
    primes = []
    for i in range(1, len(num_str)):
        left_part = int(num_str[:i])
        right_part = int(num_str[i:])
        if is_prime(left_part):
            primes.append(left_part)
        if is_prime(right_part):
            primes.append(right_part)
    return primes

# Function to split the number into three parts and return list of primes from those parts
def split_into_three(num):
    num_str = str(num)
    primes = []
    for i in range(1, len(num_str) - 1):
        for j in range(i + 1, len(num_str)):
            left_part = int(num_str[:i])
            middle_part = int(num_str[i:j])
            right_part = int(num_str[j:])
            if is_prime(left_part):
                primes.append(left_part)
            if is_prime(middle_part):
                primes.append(middle_part)
            if is_prime(right_part):
                primes.append(right_part)
    return primes

# Read data from file
with open('tai.in', 'r') as file_in:
    lines = file_in.readlines()
    task = int(lines[0].strip())
    N = int(lines[1].strip())
    numbers = list(map(int, lines[2].strip().split()))

# Perform task based on input
if task == 1:
    result = largest_prime(numbers)
elif task == 2:
    all_splits = []
    for number in numbers:
        all_splits.extend(split_into_two(number))
    result = largest_prime(all_splits)
elif task == 3:
    all_splits = []
    for number in numbers:
        all_splits.extend(split_into_three(number))
    result = largest_prime(all_splits)

# Write result to file
with open('tai.out', 'w') as file_out:
    file_out.write(str(result) + '\n')
```

This Python solution reads the input from `tai.in`, processes the data, and writes the output to `tai.out`. It provides efficient prime checking and correctly solves all three tasks.
