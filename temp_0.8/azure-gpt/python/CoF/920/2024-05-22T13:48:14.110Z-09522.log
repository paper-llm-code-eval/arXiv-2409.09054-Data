---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from math import isqrt

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, isqrt(n) + 1):
        if n % i == 0:
            return False
    return True

def max_prime_in_list(numbers):
    return max((num for num in numbers if is_prime(num)), default=0)

def max_prime_cut_two_parts(num):
    max_prime = 0
    num_str = str(num)
    for i in range(1, len(num_str)):
        left = int(num_str[:i])
        right = int(num_str[i:])
        if is_prime(left):
            max_prime = max(max_prime, left)
        if is_prime(right):
            max_prime = max(max_prime, right)
    return max_prime

def max_prime_cut_three_parts(num):
    max_prime = 0
    num_str = str(num)
    for i in range(1, len(num_str) - 1):
        for j in range(i + 1, len(num_str)):
            first = int(num_str[:i])
            second = int(num_str[i:j])
            third = int(num_str[j:])
            if is_prime(first):
                max_prime = max(max_prime, first)
            if is_prime(second):
                max_prime = max(max_prime, second)
            if is_prime(third):
                max_prime = max(max_prime, third)
    return max_prime

def solve_case_1(numbers):
    return max_prime_in_list(numbers)

def solve_case_2(numbers):
    return max(max_prime_cut_two_parts(num) for num in numbers)

def solve_case_3(numbers):
    return max(max_prime_cut_three_parts(num) for num in numbers)

# Read input data
with open('tai.in', 'r') as fin:
    C = int(fin.readline())
    N = int(fin.readline())
    numbers = list(map(int, fin.readline().split()))

# Process and write output data
with open('tai.out', 'w') as fout:
    if C == 1:
        fout.write(f"{solve_case_1(numbers)}\n")
    elif C == 2:
        fout.write(f"{solve_case_2(numbers)}\n")
    else:
        fout.write(f"{solve_case_3(numbers)}\n")
```
