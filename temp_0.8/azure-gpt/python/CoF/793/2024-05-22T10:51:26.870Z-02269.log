---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `livada.in` and write to `livada.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Norocosul Gigel tocmai a primit în dar de la bunicul său, Nelu, o imensă plantaţie de pomi fructiferi. Fost profesor de geometrie, Nelu a plantat în mod riguros pomii fructiferi pe $m$ rânduri paralele, iar pe fiecare rând a plantat exact câte $n$ pomi fructiferi. Însă, din motive mai mult sau mai puţin obiective, domnul Nelu nu a plantat pe fiecare rând toţi pomii de acelaşi soi, ci din mai multe soiuri diferite. Soiurile de pomi plantaţi în livadă sunt codificate cu numere naturale cuprinse între $1$ şi $p$.
Cuprins de febra rigurozităţii matematice şi de cea a statisticii, Gigel a definit noţiunea de *soi majoritar* astfel: dacă pe un rând $k$ format din $n$ pomi fructiferi avem cel puţin $\lfloor n/2 \rfloor + 1$ pomi de acelaşi soi $x$, atunci spunem că *soiul $x$ este soi majoritar pe rândul $k$ (prin $\lfloor y \rfloor$ se înţelege partea întreagă a numărului real $y$)*.

# Cerință

Cunoscând numerele $m, n$ şi $p$, precum şi soiul fiecărui pom de pe fiecare rând al plantaţiei, ajutaţi-l pe Gigel să determine:

* pe câte rânduri din livadă există un soi majoritar;
* care este cel mai mare număr de pomi de acelaşi soi plantaţi în poziţii consecutive pe un rând.

# Date de intrare


Fişierul de intrare `livada.in` conţine pe prima linie trei numere naturale $m, n$ şi $p$ cu semnificaţia din enunţ, iar pe fiecare dintre următoarele $m$ linii se găsesc câte $n$ numere, despărţite prin câte un spaţiu, reprezentând soiurile pomilor de pe rândul respectiv.


# Date de ieșire


Fişierul de ieşire `livada.out` va conţine două linii:

* pe prima linie se va scrie un număr natural reprezentând numărul de rânduri din livadă pe care există un soi majoritar;
* pe a doua linie se va scrie un număr natural reprezentând cel mai mare numar de pomi de acelasi soi plantaţi în poziţii consecutive pe un rând.


# Restricții și precizări

* $1 \leq m \leq 100$;
* $1 \leq n \leq 700 \ 000$;
* $1 \leq m \cdot n \leq 700 \ 000$;
* $1 \leq p \leq 998 \ 560 \ 000$;
* Pe fiecare rând diferenţa dintre valoarea maximă şi cea minimă este cel mult $250 \ 000$.
* Dacă doar valoarea de pe prima linie este corectă, se acordă $40$% din punctaj. Dacă doar valoarea de pe a doua linie este corectă, se acordă $60$% din punctaj. Dacă ambele valori sunt corecte, se acordă $100$% din punctajul testului respectiv.

---

Example:
`livada.in`
```
4 7 9
2 1 2 3 8 2 2
4 7 2 4 9 7 4
5 5 2 5 5 5 7
2 3 2 3 2 3 1
```

`livada.out`
```
2
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def find_majority_and_longest_seq(row, n):
    counts = {}
    majority_threshold = n // 2 + 1
    current_soil = row[0]
    current_count = 1
    longest_seq = 1
    has_majority = False
    
    for i in range(1, n):
        if row[i] == current_soil:
            current_count += 1
        else:
            current_soil = row[i]
            current_count = 1
        
        if current_count > longest_seq:
            longest_seq = current_count
        
        counts[current_soil] = counts.get(current_soil, 0) + 1
        if counts[current_soil] >= majority_threshold:
            has_majority = True
    
    return has_majority, longest_seq

def process_orchard(file_in):
    with open(file_in, 'r') as fin:
        m, n, _ = map(int, fin.readline().strip().split())
        majority_count = 0
        max_consecutive = 0
        
        for _ in range(m):
            row = list(map(int, fin.readline().strip().split()))
            has_majority, longest_seq = find_majority_and_longest_seq(row, n)
            if has_majority:
                majority_count += 1
            max_consecutive = max(max_consecutive, longest_seq)
    
    return majority_count, max_consecutive

def main():
    majority_count, max_consecutive = process_orchard('livada.in')
    with open('livada.out', 'w') as fout:
        fout.write(f"{majority_count}\n{max_consecutive}\n")

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `livada.out` and read from `livada.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def find_majority_and_longest_seq(row):
    counts = {}
    n = len(row)
    majority_threshold = n // 2 + 1
    current_soil = row[0]
    current_count = 1
    longest_seq = 1
    has_majority = False
    
    for i in range(1, n):
        if row[i] == current_soil:
            current_count += 1
        else:
            if current_count > longest_seq:
                longest_seq = current_count
            if counts.get(current_soil, 0) + current_count >= majority_threshold:
                has_majority = True
            counts[current_soil] = counts.get(current_soil, 0) + current_count
            current_soil = row[i]
            current_count = 1
        
    # Check the last sequence
    if current_count > longest_seq:
        longest_seq = current_count
    if counts.get(current_soil, 0) + current_count >= majority_threshold:
        has_majority = True
    counts[current_soil] = counts.get(current_soil, 0) + current_count

    return has_majority, longest_seq

def process_orchard(file_in, file_out):
    with open(file_in, 'r') as fin:
        m, n, _ = map(int, fin.readline().strip().split())
        majority_count = 0
        max_consecutive = 0
        
        for _ in range(m):
            row = list(map(int, fin.readline().strip().split()))
            has_majority, longest_seq = find_majority_and_longest_seq(row)
            if has_majority:
                majority_count += 1
            max_consecutive = max(max_consecutive, longest_seq)
    
    with open(file_out, 'w') as fout:
        fout.write(f"{majority_count}\n{max_consecutive}\n")

def main():
    process_orchard('livada.in', 'livada.out')

if __name__ == "__main__":
    main()
```
