---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `expozitie.in` and write to `expozitie.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ilinca este o fetiţă căreia îi place foarte mult să deseneze; ea a făcut multe desene pe care le-a numerotat de la $1$ la $d$ şi apoi le-a multiplicat (toate copiile poartă acelaşi număr ca şi originalul după care au fost făcute). În vacanţă s-a hotărât să-şi deschidă propria expoziţie pe gardul bunicilor care are mai multe scânduri; pe fiecare scândură ea aşează o planşă (un desen original sau o copie). Ilinca ţine foarte mult la desenele ei şi doreşte ca fiecare desen să apară de cel puţin $k$ ori (folosind originalul şi copiile acestuia). Ilinca se întreabă în câte moduri ar putea aranja expoziţia. Două moduri de aranjare sunt considerate distincte dacă diferă cel puţin prin numărul unei planşe (de exemplu: $2 \ 1 \ 3 \ 3$ este aceeaşi expoziţie ca şi $2 \ 3 \ 1 \ 3$, dar este diferită de $2 \ 1 \ 3 \ 1$ şi de $1 \ 3 \ 3 \ 1$).

# Cerinţă

Cunoscând $n$ numărul de scânduri din gard, $d$ numărul desenelor originale şi $k$ numărul minim de apariţii al fiecărui desen, să se determine în câte moduri poate fi aranjată expoziţia, ştiind că Ilinca are la dispoziţie oricâte copii doreşte.


# Date de intrare


Fişierul de intrare `expozitie.in` va conţine $3$ numere, $n \ d \ k$ - numărul de scânduri, numărul desenelor originale, respectiv numărul minim de aparţii.


# Date de ieșire


Fişierul de ieşire `expozitie.out` va conţine un singur număr, $nr$, numărul modurilor distincte de aranjare a expoziţiei.


# Restricții și precizări

* $n,k,d$ sunt numere naturale
* $1 \leq n \leq 500$
* $1 \leq d \leq 500$
* $0 \leq k \leq n$

---

Example:
`expozitie.in`
```
3 2 1
```

`expozitie.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from math import comb

def calculate_combinations(n, d, k):
    if k == 0:
        # Any number of designs can be placed on any plank, d^n combinations
        return pow(d, n)
    if n < d * k:
        # Not enough planks to fit the minimum occurrence of each design
        return 0
    # Use stars and bars theorem to distribute n-k*d planks among d designs with unlimited copies
    # plus the obligatory k planks per design which are not part of the distribution
    return comb(n - k * d + d - 1, d - 1)

def read_input(file_path):
    with open(file_path, 'r') as file:
        n, d, k = map(int, file.readline().strip().split())
    return n, d, k

def write_output(file_path, num_ways):
    with open(file_path, 'w') as file:
        file.write(str(num_ways))

def main():
    n, d, k = read_input('expozitie.in')
    num_ways = calculate_combinations(n, d, k)
    write_output('expozitie.out', num_ways)

main()
```

This code defines a `calculate_combinations` function to compute the number of ways to arrange the exhibition, reads the input from `expozitie.in` file, calculates the solution, and writes it to `expozitie.out` file, without using `input()` or `print()` for I/O operations.
