---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `flori.in` and write to `flori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fetiţele din grupa mare de la grădiniţă culeg flori şi vor să împletească coroniţe pentru festivitatea de premiere. În grădină sunt mai multe tipuri de flori. Fiecare dintre cele $n$ fetiţe culege un buchet având acelaşi număr de flori, însă nu neapărat de acelaşi tip. Pentru a împleti coroniţele fetiţele se împart în grupe. O fetiţă se poate ataşa unui grup numai dacă are cel puţin o floare de acelaşi tip cu cel puţin o altă fetiţă din grupul respectiv.

# Cerinţă
Fiind dat un număr natural $n$ reprezentând numărul fetiţelor şi numărul natural $k$ reprezentând numărul de flori dintr-un buchet, să se determine grupele care se formează.

# Date de intrare
Fişierul de intrare `flori.in` conţine pe prima linie, separate printr-un spaţiu, numerele naturale $n$ şi $k$, reprezentând numărul de fetiţe şi respectiv numărul de flori din fiecare buchet. Fiecare dintre următoarele $n$ linii conţine, pentru fiecare fetiţă, câte $k$ valori separate prin câte un spaţiu reprezentând tipurile de flori culese.

# Date de ieşire
Fişierul de ieşire `flori.out` va conţine pe fiecare linie câte o grupă formată din numerele de ordine ale fetiţelor separate prin câte un spaţiu, în ordine crescătoare, ca în exemplu.

# Restricţii şi precizări
- $1 \leq n \leq 150$
- $1 \leq k \leq 100$
- Tipul unei flori este un număr întreg din intervalul $[0, 100]$.
- Într-o grupă numerele de ordine ale fetiţelor trebuie date în ordine strict crescătoare.
- În fişierul de ieşire grupele vor fi afişate în ordinea crescătoare a numărului de ordine al primei fetiţe din grupă.

---

Example:
`flori.in`
```
5 4
1 2 3 4
5 6 9 6
1 1 1 1
2 4 4 3
7 7 7 7
```

`flori.out`
```
1 3 4
2
5
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Read data from file
with open('flori.in', 'r') as file:
    n, k = map(int, file.readline().split())
    flowers = [list(map(int, file.readline().split())) for _ in range(n)]

# Data structure to keep track of groups (using Union-Find algorithm)
parent = list(range(n))

# Find function for Union-Find
def find(x):
    if parent[x] != x:
        parent[x] = find(parent[x])
    return parent[x]

# Union function for Union-Find
def union(x, y):
    root_x = find(x)
    root_y = find(y)
    if root_x != root_y:
        parent[root_y] = root_x

# Dictionary to keep track of flower types and which child picked them
flower_dict = {}

for i, bouquet in enumerate(flowers):
    for flower in bouquet:
        if flower in flower_dict:
            # Connect the current child with the child who has the same flower type
            union(i, flower_dict[flower])
        else:
            flower_dict[flower] = i

# Group children based on connected components
groups = {}
for i in range(n):
    root = find(i)
    if root in groups:
        groups[root].append(i + 1)  # Child numbering starts from 1
    else:
        groups[root] = [i + 1]

# Write the output to file
with open('flori.out', 'w') as file:
    for group in sorted(groups.values(), key=lambda x: x[0]):
        file.write(" ".join(map(str, group)) + '\n')
```

This Python code solves the challenge by reading the input from 'flori.in', processing the data using a Union-Find data structure to create groups based on shared flower types, and writing out the results to 'flori.out'. The groups are sorted by the first child's number in each group before being outputted.
