---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read the number n from ucif.in
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Since the last digit of s repeats every 10 terms, we only need to
# compute the last digit of the series for numbers from 1 to min(n, 10)
last_digit_sum = 0
for i in range(1, min(n, 10) + 1):
    last_digit_sum += (i ** i) % 10

# If n is greater than 10, each subsequent set of 10 terms will have the same
# last digit sum as the first 10, so we can multiply the sum by (n // 10)
# and add the last digit sum of the remaining terms (n % 10)
if n > 10:
    last_digit_sum *= (n // 10)
    for i in range(1, (n % 10) + 1):
        last_digit_sum += (i ** i) % 10

# Write the last digit of s to ucif.out
with open('ucif.out', 'w') as file:
    file.write(f'{last_digit_sum % 10}\n')
```
```
---------- user ----------


Expected program to write result to `ucif.out` and read from `ucif.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly, my apologies for misunderstanding your instruction earlier. The corrected code which reads from `ucif.in` and writes to `ucif.out` without using `input()` or `print()`, and only calculates the last digit of the sum, is as follows:

```python
# Read the number n from ucif.in
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Initialize the result with 0
result = 0

# Use the pattern of the last digits of powers to calculate the last digit of the sum
for i in range(1, n + 1):
    result = (result + pow(i, i, 10)) % 10

# Write the last digit of s to ucif.out
with open('ucif.out', 'w') as file:
    file.write(str(result))
```
