---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Read the number n from the input file
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Initialize the sum
s = 0

# Since we are only interested in the last digit of the sum,
# and each power will only affect the last digit, we can keep
# the sum modulo 10 to avoid large number computations.
for i in range(1, n + 1):
    # Compute the last digit of i^i
    last_digit = pow(i, i, 10)
    # Add the last digit to the sum, keeping it modulo 10
    s = (s + last_digit) % 10

# Write the last digit of the sum to the output file
with open('ucif.out', 'w') as file:
    file.write(str(s))
```
```
This solution ensures that we never work with large numbers by keeping all operations modulo 10, which is a key optimization point for this challenge.
---------- user ----------


Expected program to write result to `ucif.out` and read from `ucif.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Efficient solution for the programming challenge

# Read the number n from the input file
with open('ucif.in', 'r') as file:
    n = int(file.readline().strip())

# Initialize the sum
s = 0

# Calculate the last digit of the sum
# Since we are only interested in the last digit of the sum s,
# we can use modulo 10 for each addition
for i in range(1, n + 1):
    # Since i^i grows very quickly, we can use pow with modulo 10 to get the last digit
    s = (s + pow(i, i, 10)) % 10

# Write the last digit of the sum to the output file
with open('ucif.out', 'w') as file:
    file.write(str(s))
```
