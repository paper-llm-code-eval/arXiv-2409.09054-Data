---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `furnica.in` and write to `furnica.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pe o tablă de șah cu $n$ linii și $n$ coloane se află firimituri de pâine și o furnică. Pentru fiecare pătrățel, inclusiv cel în care se găsește furnica, aflat pe linia $i$ și coloana $j$, cantitatea de firimituri de pâine este egală cu restul împărțirii lui $i + j$ la $6$. Astfel pentru $n = 4$ tabla de șah conține următoarele cantități de firimituri:

|2|3|4|5|
-|-|-|-
|**3**|**4**|**5**|**0**|
|**4**|**5**|**0**|**1**|
|**5**|**0**|**1**|**2**|

Furnica (notată cu `F` în figura de mai jos) se poate deplasa din pătrățelul unde se găsește în toate cele opt pătrățele vecine, numerotate ca mai jos:

|8|1|2|
-|-|-
|**7**|**F**|**3**|
|**6**|**5**|**4**|

Furnica se deplasează, pornind din pătrățica aflată în colțul din stânga sus, în una dintre pătrățelele vecine, și așa mai departe. Pe drumul său furnica se hrănește cu toată cantitatea de firimituri din pătrățelele prin care a trecut (după ce iese din pătrățică catitatea de firimituri devine $0$). Drumul furnicii este dat printr-un șir de $k$ numere naturale (cuprinse între $1$ și $8$) care precizează, la fiecare pas, următorul pătrățel din drum.

# Cerință

Scrieți un program care pentru un drum dat determină cantitatea totală de firimituri mâncată de furnică, precum și numărul pătrățelelor prin care aceasta a trecut de cele mai multe ori.

# Date de intrare

Fișierul de intrare `furnica.in` conține pe prima linie numerele $n$ și $k$, separate între ele printr-un spațiu, iar pe linia următoare $k$ numere naturale ($1, 2, 3, 4, 5, 6, 7$ sau $8$) separate prin câte un spațiu, reprezentând următorul pătrățel din drum pentru un pătrățel curent.

# Date de ieșire

Fișierul de ieșire `furnica.out` va conține, pe prima linie, cantitatea totală și numărul pătrățelelor din cerință separate printr-un spațiu.

# Restricții și precizări

* $1 < n < 101$;
* $0 < k < 201$;
* Drumul furnicii nu iese din tablou.

---

Example:
`furnica.in`
```
4 10
3 6 5 3 2 6 3 6 2 3
```

`furnica.out`
```
23 2
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
# Function to calculate crumbs amount and most crossed squares
def calculate_crumbs_and_crossings(n, k, moves):
    # Directions (1-8) mapped to row and column changes (delta_row, delta_col)
    dirs = {
        1: (-1, 0), 2: (-1, 1), 3: (0, 1), 4: (1, 1),
        5: (1, 0), 6: (1, -1), 7: (0, -1), 8: (-1, -1)
    }

    # Initialize board with crumbs and visited counter
    board = [[(i + j) % 6 for j in range(n)] for i in range(n)]
    visited = [[0 for _ in range(n)] for _ in range(n)]

    # Starting position
    row, col = 0, 0
    total_crumbs = board[row][col]  # Include the starting square crumbs
    visited[row][col] += 1
    board[row][col] = 0  # Remove crumbs after eating

    # Traverse the moves
    for move in moves:
        # Update current position
        delta_row, delta_col = dirs[move]
        row, col = row + delta_row, col + delta_col

        # Update crumbs and visited counters
        total_crumbs += board[row][col]
        visited[row][col] += 1
        board[row][col] = 0  # Remove crumbs after eating

    # Find the most crossed square(s)
    max_visits = max(max(row) for row in visited)
    most_crossed = sum(row.count(max_visits) for row in visited)

    return total_crumbs, most_crossed

# Read from file
with open('furnica.in', 'r') as file:
    n, k = map(int, file.readline().split())
    moves = list(map(int, file.readline().split()))

# Calculate result
crumbs_eaten, most_crossed = calculate_crumbs_and_crossings(n, k, moves)

# Write to file
with open('furnica.out', 'w') as file:
    file.write(f"{crumbs_eaten} {most_crossed}\n")
```
```
This Python code defines a function that simulates the ant's journey on the chessboard, counts the total amount of crumbs eaten, and the number of squares the ant has crossed the most times. It reads the necessary data from a file named `furnica.in`, processes it, and writes the result to a file named `furnica.out`. The code avoids using `input()` and `print()` as per the requirements.
---------- user ----------


Expected program to write result to `furnica.out` and read from `furnica.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! Here is the corrected solution following the guidelines provided.

```python
# Function to calculate crumbs amount and most crossed squares
def calculate_crumbs_and_crossings(n, k, moves):
    # Directions (1-8) mapped to row and column changes (delta_row, delta_col)
    dirs = {
        1: (-1, 0), 2: (-1, 1), 3: (0, 1), 4: (1, 1),
        5: (1, 0), 6: (1, -1), 7: (0, -1), 8: (-1, -1)
    }

    # Initialize board with crumbs and visited counter
    board = [[(i + j) % 6 for j in range(n)] for i in range(n)]
    visited = [[0 for _ in range(n)] for _ in range(n)]

    # Starting position
    row, col = 0, 0
    total_crumbs = board[row][col]  # Include the starting square crumbs
    visited[row][col] += 1
    board[row][col] = 0  # Remove crumbs after eating

    # Traverse the moves
    for move in moves:
        # Update current position
        delta_row, delta_col = dirs[move]
        row, col = row + delta_row, col + delta_col

        # Update crumbs and visited counters
        total_crumbs += board[row][col]
        visited[row][col] += 1
        board[row][col] = 0  # Remove crumbs after eating

    # Find the most crossed square(s)
    max_visits = max(max(row) for row in visited)
    most_crossed = sum(row.count(max_visits) for row in visited)

    return total_crumbs, most_crossed

# Read from file
with open('furnica.in', 'r') as file:
    n, k = map(int, file.readline().split())
    moves = list(map(int, file.readline().split()))

# Calculate result
crumbs_eaten, most_crossed = calculate_crumbs_and_crossings(n, k, moves)

# Write to file
with open('furnica.out', 'w') as file:
    file.write(f"{crumbs_eaten} {most_crossed}\n")
```

This revised solution correctly reads the input data from `furnica.in` and writes the result to `furnica.out`, adhering to the program requirements. No `input()` or `print()` functions are used for file operations.
