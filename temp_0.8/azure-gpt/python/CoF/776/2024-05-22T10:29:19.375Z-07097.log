---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(file_path):
    with open(file_path, "r") as file:
        n, m, t = map(int, file.readline().split())
        colors = [list(line.strip()) for line in file.readlines()]
    return n, m, t, colors

def count_neighbors(colors, i, j, n, m):
    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    red_count = blue_count = 0
    for di, dj in directions:
        ni, nj = i + di, j + dj
        if 0 <= ni < n and 0 <= nj < m:
            if colors[ni][nj] == 'r':
                red_count += 1
            else:
                blue_count += 1
    return red_count, blue_count

def simulate(colors, n, m, t):
    for _ in range(t):
        new_colors = [row[:] for row in colors]
        for i in range(n):
            for j in range(m):
                red_count, blue_count = count_neighbors(colors, i, j, n, m)
                if red_count > blue_count:
                    new_colors[i][j] = 'r'
                elif blue_count > red_count:
                    new_colors[i][j] = 'a'
                # If equal, color stays the same, so no need to change it
        colors = new_colors
    return colors

def write_output(file_path, colors):
    with open(file_path, "w") as file:
        for row in colors:
            file.write("".join(row) + "\n")

def main():
    n, m, t, colors = read_input("culori.in")
    final_colors = simulate(colors, n, m, t)
    write_output("culori.out", final_colors)

if __name__ == "__main__":
    main()
```
```

Please note that this solution reads from `culori.in` and writes to `culori.out` as required in the challenge. It doesn't use `input()` or `print()` to handle file operations. The solution takes into account the restrictions and specifications provided in the challenge.
---------- user ----------


Expected program to write result to `culori.out` and read from `culori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def update_colors(grid, n, m):
    # Create a copy of the grid to hold the updated colors
    new_grid = [row[:] for row in grid]

    # List of relative positions for all the 8 possible neighbors
    neighbors = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
    
    # Iterate over each cell in the grid
    for i in range(n):
        for j in range(m):
            red_neighbors = blue_neighbors = 0
            # Count the number of red and blue neighbors
            for dx, dy in neighbors:
                new_i, new_j = i + dx, j + dy
                if 0 <= new_i < n and 0 <= new_j < m:
                    if grid[new_i][new_j] == 'r':
                        red_neighbors += 1
                    else:
                        blue_neighbors += 1
            
            # Decide the new color based on the neighbors
            if red_neighbors > blue_neighbors:
                new_grid[i][j] = 'r'
            elif blue_neighbors > red_neighbors:
                new_grid[i][j] = 'a'
            # If equal, the color remains the same, no change required

    return new_grid

def main():
    # Read input from file
    with open("culori.in", "r") as infile:
        n, m, t = map(int, infile.readline().split())
        grid = [list(infile.readline().strip()) for _ in range(n)]

    # Update colors for t time steps
    for _ in range(t):
        grid = update_colors(grid, n, m)

    # Write output to file
    with open("culori.out", "w") as outfile:
        for row in grid:
            outfile.write(''.join(row) + "\n")

if __name__ == "__main__":
    main()
```
This code snippet omits the use of `input()` and `print()` and reads from `culori.in` and writes to `culori.out` as required by the challenge.
