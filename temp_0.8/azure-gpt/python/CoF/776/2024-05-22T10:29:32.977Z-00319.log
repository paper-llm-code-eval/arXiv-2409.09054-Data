---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(file_path):
    with open(file_path) as file:
        n, m, t = map(int, file.readline().split())
        grid = [list(file.readline().strip()) for _ in range(n)]
    return n, m, t, grid


def write_output(file_path, grid):
    with open(file_path, 'w') as file:
        for row in grid:
            file.write(''.join(row) + '\n')


def get_neighbors(x, y, n, m):
    neighbors = []
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if (dx != 0 or dy != 0) and (0 <= x + dx < n) and (0 <= y + dy < m):
                neighbors.append((x + dx, y + dy))
    return neighbors


def simulate_fish_colors(n, m, t, grid):
    def count_colors(x, y):
        reds, blues = 0, 0
        for nx, ny in get_neighbors(x, y, n, m):
            if grid[nx][ny] == 'r':
                reds += 1
            else:
                blues += 1
        return reds, blues

    for _ in range(t):
        new_grid = [row[:] for row in grid]
        for i in range(n):
            for j in range(m):
                reds, blues = count_colors(i, j)
                if reds > blues:
                    new_grid[i][j] = 'r'
                elif blues > reds:
                    new_grid[i][j] = 'a'
                # If equal, do nothing (fish keeps its color)
        grid = new_grid

    return grid


if __name__ == "__main__":
    n, m, t, grid = read_input('culori.in')
    result_grid = simulate_fish_colors(n, m, t, grid)
    write_output('culori.out', result_grid)
```
```
---------- user ----------


Expected program to write result to `culori.out` and read from `culori.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
# Assuming that the provided example for `culori.in` is in the current working directory
# The following is the revised code to solve the challenge

def get_neighbor_colors(x, y, n, m, grid):
    # Count the number of red and blue neighbors
    red_count, blue_count = 0, 0
    for dx in [-1, 0, 1]:
        for dy in [-1, 0, 1]:
            if (dx != 0 or dy != 0) and (0 <= x + dx < n) and (0 <= y + dy < m):
                if grid[x + dx][y + dy] == 'r':
                    red_count += 1
                else:
                    blue_count += 1
    return red_count, blue_count

def update_grid(n, m, grid):
    # Create a new grid for the next state
    new_grid = [row[:] for row in grid]
    for x in range(n):
        for y in range(m):
            red_neighbors, blue_neighbors = get_neighbor_colors(x, y, n, m, grid)
            if red_neighbors > blue_neighbors:
                new_grid[x][y] = 'r'
            elif blue_neighbors > red_neighbors:
                new_grid[x][y] = 'a'
            # If equal, the color remains the same (no change)
    return new_grid

# Read from `culori.in`
with open('culori.in', 'r') as file:
    n, m, t = map(int, file.readline().split())
    grid = [list(file.readline().strip()) for _ in range(n)]

# Perform t iterations to simulate the color changes
for _ in range(t):
    grid = update_grid(n, m, grid)

# Write to `culori.out`
with open('culori.out', 'w') as file:
    for row in grid:
        file.write(''.join(row) + '\n')
```
