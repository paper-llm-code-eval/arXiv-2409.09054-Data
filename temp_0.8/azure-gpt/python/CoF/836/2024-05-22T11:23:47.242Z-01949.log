---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `maxp.in` and write to `maxp.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un șir de numere $a_1, a_2, \dots, a_N$. O secvență nevidă în acest șir este de forma $a_i, a_{i+1}, \dots, a_j$, unde $i \leq j$. De exemplu, pentru $N = 4$ și șirul $2 \ 3 \ 4 \ 3$, secvențele nevide sunt: $2, 2 \ 3, 2 \ 3 \ 4, 2 \ 3 \ 4 \ 3, 3, 3 \ 4, 3 \ 4 \ 3, 4, 4 \ 3, 3$. Definim puterea unui element $a_i$ ca fiind numărul de secvențe care-l conțin pe $a_i$ și în care $a_i$ este strict mai mare decât celelalte elemente ale fiecăreia dintre respectivele secvențe. Astfel în șirul $2 \ 3 \ 4 \ 3$ puterea elementului $a_1$ este $1$ (fiind maxim doar în secvența formată din el însuși), a elementului $a_2$ este $2$ ($a_2$ fiind maxim în secvențele $2 \ 3$ și $3$), a elementului $a_3$ este $6$ (fiind maxim în secvențele $2 \ 3 \ 4, 2 \ 3 \ 4 \ 3, 3 \ 4, 3 \ 4 \ 3, 4$ și $4 \ 3$), iar a elementului $a_4$ este $1$.

# Cerință

Scrieți un program care determină puterea cea mai mare a unui element din șirul dat, precum și numărul de elemente din șir care au cea mai mare putere.

# Date de intrare

Fișierul `maxp.in` conține pe prima linie numărul natural $N$, iar pe a doua linie, în ordine, numerele naturale $a_1, a_2, \dots, a_N$ separate prin câte un spațiu.

# Date de ieșire

Fișierul `maxp.out` va conține pe prima linie un număr natural ce reprezintă puterea cea mai mare a unui element din șirul dat și pe a doua linie va conține un număr natural ce reprezintă numărul de elemente din șir care au cea mai mare putere.

# Restricții și precizări

* $2 \leq N \leq 200 \ 000$;
* Elementele șirului sunt numere naturale și au cel mult $6$ cifre
* Se acordă 50% din punctaj pentru determinarea corectă a celei mai mari puteri a unui element din șir și 50% din punctaj pentru determinarea numărului de elemente din şir care au cea mai mare putere.

---

Example:
`maxp.in`
```
7
9 3 4 5 1 2 2
```

`maxp.out`
```
12
1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def calculate_max_power(N, nums):
    stack = []
    left_count = [0] * N
    right_count = [0] * N

    # Calculate number of elements to the left which are less than current
    for i in range(N):
        while stack and nums[stack[-1]] < nums[i]:
            stack.pop()
        left_count[i] = i - stack[-1] if stack else i + 1
        stack.append(i)

    # Clear stack for reuse
    stack.clear()

    # Calculate number of elements to the right which are less than current
    for i in range(N - 1, -1, -1):
        while stack and nums[stack[-1]] <= nums[i]:
            stack.pop()
        right_count[i] = stack[-1] - i if stack else N - i
        stack.append(i)

    # Calculate powers and track the maximum
    max_power = 0
    element_count = 0
    for i in range(N):
        power = left_count[i] * right_count[i]
        if power > max_power:
            max_power = power
            element_count = 1
        elif power == max_power:
            element_count += 1

    return max_power, element_count

# Read from maxp.in and write the output to maxp.out
with open('maxp.in', 'r') as file_in:
    N = int(file_in.readline().strip())
    nums = list(map(int, file_in.readline().strip().split()))

max_power, element_count = calculate_max_power(N, nums)

with open('maxp.out', 'w') as file_out:
    file_out.write(f"{max_power}\n{element_count}\n")
```

This code block reads from the input file `maxp.in`, processes the sequence to find the maximum power and the count of elements with that power, then writes the result to the output file `maxp.out`. The solution uses stack-based approach to efficiently calculate the number of sequences where each number is the maximum, which is optimal for this challenge.
---------- user ----------


Program result did not match expected result.
Input data:
```
6
1 0 7 7 2 6
```
Expected output:
```
3
2
```
Found output:
```
12
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the code and the example given with the unexpected result, it is clear that the issue lies in the comparison condition used when calculating the number of elements to the right which are less than the current.

The original code uses `while stack and nums[stack[-1]] <= nums[i]:` to pop elements from the stack. However, according to the problem statement, `a_i` must be strictly greater than the other elements of the sequence. Thus, the `<=` condition prematurely pops elements that are equal to `nums[i]`. This leads to an overestimation of the power of an element, as in the case of the `7` in the provided dataset.

To fix the bug, we must use the `<` comparison instead of `<=`. Here's the corrected code:

```python
def calculate_max_power(N, nums):
    stack = []
    left_count = [0] * N
    right_count = [0] * N

    # Calculate number of elements to the left which are less than current
    for i in range(N):
        while stack and nums[stack[-1]] < nums[i]:
            stack.pop()
        left_count[i] = i - stack[-1] if stack else i + 1
        stack.append(i)

    # Clear stack for reuse
    stack.clear()

    # Calculate number of elements to the right which are less than current
    for i in range(N - 1, -1, -1):
        while stack and nums[stack[-1]] < nums[i]:
            stack.pop()
        right_count[i] = stack[-1] - i if stack else N - i
        stack.append(i)

    # Calculate powers and track the maximum
    max_power = 0
    element_count = 0
    for i in range(N):
        power = left_count[i] * right_count[i]
        if power > max_power:
            max_power = power
            element_count = 1
        elif power == max_power:
            element_count += 1

    return max_power, element_count

# Read from maxp.in and write the output to maxp.out
with open('maxp.in', 'r') as file_in:
    N = int(file_in.readline().strip())
    nums = list(map(int, file_in.readline().strip().split()))

max_power, element_count = calculate_max_power(N, nums)

with open('maxp.out', 'w') as file_out:
    file_out.write(f"{max_power}\n{element_count}\n")
```

This revised solution should now correctly calculate the power of each element as defined by the problem statement and yield the expected result when tested with the new input data provided.
