---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
def is_slope_value(value):
    value_str = str(value)
    return value_str == ''.join(sorted(value_str)) or value_str == ''.join(sorted(value_str, reverse=True))

def process_values(values):
    slope_values = []
    for i, value in enumerate(values):
        if is_slope_value(value):
            slope_values.append((value, i+1))  # Store value and position

    if not slope_values:
        return 0, "NU EXISTA", "NU EXISTA"

    slope_values.sort(key=lambda x: x[0])  # Sort by value
    min_slope_value = slope_values[0][0]
    max_slope_value = slope_values[-1][0]
    min_positions = [str(pos) for val, pos in slope_values if val == min_slope_value]
    max_positions = [str(pos) for val, pos in slope_values if val == max_slope_value]
    return len(slope_values), f"{max_slope_value} {' '.join(max_positions)}", f"{min_slope_value} {' '.join(min_positions)}"

with open('valori-panta.in', 'r') as infile:
    n = int(infile.readline().strip())
    values = list(map(int, infile.readline().split()))

num_slope_values, max_info, min_info = process_values(values)

with open('valori-panta.out', 'w') as outfile:
    outfile.write(f"{num_slope_values}\n")
    if num_slope_values > 0:
        outfile.write(f"{max_info}\n{min_info}\n")
    else:
        outfile.write("NU EXISTA\n")
```

This Python code reads from `valori-panta.in` and writes to `valori-panta.out` and meets the challenge requirements. It defines a function to check if a number is a slope value by comparing it to its sorted self both in ascending and descending order. It then processes all values to find and sort slope values and determine the smallest and largest slope values and their positions. Output is written to `valori-panta.out` as specified.
