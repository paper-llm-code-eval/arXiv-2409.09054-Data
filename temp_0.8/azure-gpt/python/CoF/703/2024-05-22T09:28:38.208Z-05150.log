---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Function to check if a number is a "valoare-panta"
def is_slope_value(num):
    num_str = str(num)
    return num_str == ''.join(sorted(num_str)) or num_str == ''.join(sorted(num_str, reverse=True))

# Read from the input file
with open('valori-panta.in', 'r') as file:
    n = int(file.readline().strip())
    elements = list(map(int, file.readline().strip().split()))

# Variables to keep track of the slope values and their positions
slope_values_count = 0
max_slope_value = -1
min_slope_value = float('inf')
max_positions = []
min_positions = []

# Iterate through the elements and check for slope values
for idx, value in enumerate(elements, 1):
    if is_slope_value(value):
        slope_values_count += 1
        # Update maximum slope value and positions
        if value > max_slope_value:
            max_slope_value = value
            max_positions = [idx]
        elif value == max_slope_value:
            max_positions.append(idx)
        # Update minimum slope value and positions
        if value < min_slope_value:
            min_slope_value = value
            min_positions = [idx]
        elif value == min_slope_value:
            min_positions.append(idx)

# Write to the output file
with open('valori-panta.out', 'w') as file:
    file.write(f"{slope_values_count}\n")
    if slope_values_count > 0:
        file.write(f"{max_slope_value} {' '.join(map(str, max_positions))}\n")
        file.write(f"{min_slope_value} {' '.join(map(str, min_positions))}\n")
    else:
        file.write("NU EXISTA\n")
```

This code reads the input from "valori-panta.in", processes the values to find the slope values, and then writes the output to "valori-panta.out". It uses a helper function to determine if a number is a slope value. The code avoids using `input()` and `print()` and instead reads and writes files directly. It also makes use of list comprehensions, conditional assignments, and string joining for efficient processing and output formatting.
