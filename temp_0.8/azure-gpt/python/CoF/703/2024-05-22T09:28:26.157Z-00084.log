---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `valori-panta.in` and write to `valori-panta.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).

# Cerință

* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.
* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.

# Date de intrare

Pe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.

Pe cea de-a doua linie se va găsi vectorul de $N$ valori. 

# Date de ieșire

Pe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.

Pe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.

# Restricții și precizări

* $1 \leq n \leq 200 \ 000$;
* Pentru teste în valoare de $30$ de puncte, $1 \leq n \leq 2 \ 000$;
* Testele si restricțiile au fost modificate.

---

Example:
`valori-panta.in`
```
6
126 9621 1212 3678 9231 9621
```

`valori-panta.out`
```
4
9621 2 6
126 1
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Efficient solution for the valori-panta challenge

def is_slope_number(num):
    num_str = str(num)
    return all(num_str[i] <= num_str[i+1] for i in range(len(num_str)-1)) or all(num_str[i] >= num_str[i+1] for i in range(len(num_str)-1))

def process_slope_numbers(numbers):
    slope_count = 0
    min_slope = float('inf')
    min_positions = []
    max_slope = -1
    max_positions = []

    for idx, num in enumerate(numbers):
        if is_slope_number(num):
            slope_count += 1
            if num < min_slope:
                min_slope = num
                min_positions = [idx + 1]
            elif num == min_slope:
                min_positions.append(idx + 1)
            if num > max_slope:
                max_slope = num
                max_positions = [idx + 1]
            elif num == max_slope:
                max_positions.append(idx + 1)

    return slope_count, max_slope, max_positions, min_slope, min_positions

def main():
    with open('valori-panta.in', 'r') as fin:
        n = int(fin.readline().strip())
        numbers = list(map(int, fin.readline().split()))
    
    slope_count, max_slope, max_positions, min_slope, min_positions = process_slope_numbers(numbers)

    with open('valori-panta.out', 'w') as fout:
        fout.write(f"{slope_count}\n")
        if slope_count == 0:
            fout.write("NU EXISTA\n")
        else:
            fout.write(f"{max_slope} {' '.join(map(str, max_positions))}\n")
            fout.write(f"{min_slope} {' '.join(map(str, min_positions))}\n")

if __name__ == "__main__":
    main()
```

This Python code defines a function `is_slope_number` to check if a number is a slope number (valori-panta), a function `process_slope_numbers` to find the count of slope numbers as well as the minimum and maximum slope numbers along with their positions, and a `main` function to read from the input file, process the numbers, and write the results to the output file.

The script opens `valori-panta.in` for reading and `valori-panta.out` for writing the required output. The `process_slope_numbers` function traverses the list of numbers once, checking each number and updating the count, min/max values, and their positions accordingly. This ensures that the algorithm runs in linear time with respect to the number of elements in the input, which is efficient for large input sizes up to 200,000 as specified in the problem constraints.
