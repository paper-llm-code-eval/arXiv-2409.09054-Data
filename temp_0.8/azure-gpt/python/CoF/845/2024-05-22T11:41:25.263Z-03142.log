---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `munte.in` and write to `munte.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ format din $n$ numere naturale distincte. O secvență de număr maxim de elemente vecine în șir, de forma $x_i, x_{i+1}, \dots, x_{k-1}, x_k, x_{k+1}, \dots, x_j$ ($1 \leq i < k < j \leq n$) cu proprietatea că $x_i < x_{i+1} < \dots < x_{k-1} < x_k > x_{k+1} > \dots > x_j$, se numește *munte* cu vârful $x_k$. Două secvențe munte au maxim un element comun în șir. O secvență munte are cel puțin $3$ elemente. Un exemplu de șir format cu valorile $3 \ 4 \ 6 \ 8$ nu conține nicio secvență munte, iar unul format cu valorile $3 \ 4 \ 8 \ 1 \ 2 \ 5 \ 0$ conține $2$ secvențe munte: $3 \ 4 \ 8 \ 1$ și $1 \ 2 \ 5 \ 0$.

După determinarea tuturor secvențelor munte și a vârfurilor acestora, se elimină din șir vârfurile secvențelor munte și procedura continuă repetat cu determinarea noilor secvențe munte și a vârfurilor lor din șirul nou obținut. Procedura se oprește în momentul în care în șir nu mai există nicio secvență munte.

# Cerință

Scrieți un program care citește numerele $n, x_1, x_2, \dots, x_n$ și apoi determină:

1. numărul de secvențe munte din șirul inițial;
2. numărul total de secvențe munte obținute pornind de la șirul inițial până la cel care nu mai conține nicio secvență munte;
3. numărul de elemente din șirul final care nu mai conține secvențe munte.

# Date de intrare

Fișierul de intrare `munte.in` conține pe prima linie numărul $n$, iar pe următoarea linie numerele naturale $x_1, x_2, \dots, x_n$ separate două câte două prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `munte.out` va conține pe prima linie un număr natural conform cerinței $1$, pe a doua linie un număr natural conform cerinței $2$, pe a treia linie un număr natural conform cerinței $3$.

# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq x_i \leq 100 \ 000$;
* Pentru rezolvarea corectă a cerinței $1$ se obține $20$% din punctaj.
* Pentru rezolvarea corectă a cerinței $2$ se obține $40$% din punctaj.
* Pentru rezolvarea corectă a cerinței $3$ se obține $40$% din punctaj.
* Pentru testele date se asigură că șirul de numere dat inițial conține cel puțin o secvență munte.

---

Example:
`munte.in`
```
8
1 2 5 0 6 9 3 4
```

`munte.out`
```
2
4
4
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        sequence = list(map(int, file.readline().strip().split()))
    return n, sequence

def write_output(filename, initial_mountains, total_mountains, final_count):
    with open(filename, 'w') as file:
        file.write(f'{initial_mountains}\n{total_mountains}\n{final_count}\n')

def find_and_remove_mountains(sequence):
    peaks = []
    i = 1
    mountains = 0
    
    while i < len(sequence) - 1:
        if sequence[i - 1] < sequence[i] > sequence[i + 1]:
            mountains += 1
            peaks.append(i)
            i += 2
        else:
            i += 1
            
    for i in reversed(peaks):
        del sequence[i]
        
    return mountains

def solve_challenge():
    n, sequence = read_input('munte.in')
    total_mountains = 0
    initial_mountains = find_and_remove_mountains(sequence[:])
    total_mountains += initial_mountains

    while True:
        mountains = find_and_remove_mountains(sequence)
        if mountains == 0:
            break
        total_mountains += mountains

    final_count = len(sequence)
    write_output('munte.out', initial_mountains, total_mountains, final_count)

solve_challenge()
```
```
---------- user ----------


Expected program to write result to `munte.out` and read from `munte.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def find_mountains(sequence):
    n = len(sequence)
    i = 1
    mountains = 0
    peaks = []
    while i < n - 1:
        if sequence[i - 1] < sequence[i] > sequence[i + 1]:
            mountains += 1
            peaks.append(i)
            i += 1  # Skip the next element, as it can't be a peak
        i += 1
    # Remove the peaks from the sequence and return
    return mountains, [sequence[i] for i in range(n) if i not in peaks]

def solve():
    with open('munte.in', 'r') as file:
        n = int(file.readline().strip())
        sequence = list(map(int, file.readline().strip().split()))

    initial_mountains, sequence = find_mountains(sequence)
    total_mountains = initial_mountains
    while True:
        new_mountains, sequence = find_mountains(sequence)
        if new_mountains == 0:
            break
        total_mountains += new_mountains

    final_count = len(sequence)
    with open('munte.out', 'w') as file:
        file.write(f'{initial_mountains}\n{total_mountains}\n{final_count}\n')

solve()
```
