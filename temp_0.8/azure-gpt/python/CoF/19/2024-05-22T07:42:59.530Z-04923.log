---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `recyclebin.in` and write to `recyclebin.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de `N` numere întregi notat cu `A`. O *subsecvență* a șirului `A` este un șir $A_i A_{i+1} A_{i+2} … A_j$ cu `1 ≤ i ≤ j ≤ N`, iar lungimea acestei subsecvențe este egală cu `j – i + 1`. O *operație* constă în alegerea unei subsecvențe din șir și ștergerea acesteia. În cadrul unei operații, **lungimea subsecvenței alese trebuie să fie o putere de`2`**. În cadrul tuturor operațiilor efectuate pe șir, **lungimile subsecvențelor șterse trebuie să fie distincte**.

Pentru fiecare subsecvență din șir considerăm suma elementelor ei. Definim *costul* unui șir ca fiind maximul acestor sume, în cazul în care șirul conține cel puțin un număr pozitiv, altfel costul șirului este egal cu `0`.

Putem aplica o succesiune de operații (eventual niciuna) pe șirul `A`. În urma acestor operații se vor șterge anumite elemente din șir, obținându-se astfel o mulțime de șiruri $M=\{A, A’_1, A’_2, A’_3, ...\}$.

# Cerinţă
Să se determine costul maxim posibil ce se poate obține dintr-un șir al mulțimii M.

# Date de intrare
Prima linie a fișierului de intrare `recyclebin.in` conține un număr întreg `N`.
A doua linie conține `N` numere întregi, separate prin câte un spațiu, reprezentând valorile șirului `A`.

# Date de ieşire
Afișați valoarea costului maxim pe prima linie a fișierului de ieșire `recyclebin.out`.

# Restricţii și precizări
* `1 ≤ N ≤ 1000`
* $-10^6 ≤ A_i ≤ 10^6$ pentru `1 ≤ i ≤ N`
* Pentru teste în valoare de `10` puncte `1 ≤ N ≤ 30`
* Pentru alte teste în valoare de `15` puncte se garantează că există o soluție cu cel mult o operație efectuată
* Pentru alte teste în valoare de `20` puncte se garantează că există o soluție cu cel mult două operații efectuate
* Se acordă `10` puncte din oficiu.

---

Example:
`recyclebin.in`
```
14
13 -19 13 -5 -12 11 20 4 -10 1 -7 19 -19 3
```

`recyclebin.out`
```
76
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def read_input(filename):
    with open(filename, 'r') as file:
        n = int(file.readline().strip())
        array = list(map(int, file.readline().strip().split()))
    return n, array

def write_output(filename, max_cost):
    with open(filename, 'w') as file:
        file.write(str(max_cost))

def is_power_of_two(n):
    return (n & (n - 1) == 0) and n != 0

def calculate_cost(n, array):
    # Initialize DP array to store maximum subarray sum ending at each index
    dp = [0] * n
    dp[0] = array[0]
    
    for i in range(1, n):
        dp[i] = max(dp[i-1] + array[i], array[i])
    
    # Sort the dp array so we can easily find the largest powers of two
    sorted_dp = sorted(dp, reverse=True)
    
    # Initialize variables to keep track of the maximum cost and the last power of two used
    max_cost = 0
    last_power_of_two = 0
    
    for value in sorted_dp:
        if value <= 0:
            break
        if is_power_of_two(dp.index(value) + 1):
            if dp.index(value) + 1 > last_power_of_two:
                max_cost += value
                last_power_of_two = dp.index(value) + 1
    
    return max_cost

# Read input
n, array = read_input('recyclebin.in')

# Calculate the maximum cost
max_cost = calculate_cost(n, array)

# Write the output
write_output('recyclebin.out', max_cost)
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def is_power_of_two(n):
    return (n & (n - 1) == 0) and n != 0

def calculate_cost(array):
    # Compute prefix sums
    prefix_sums = [0]
    for num in array:
        prefix_sums.append(prefix_sums[-1] + num)

    # Keep track of maximum sums for power of two lengths
    power_of_two_sums = {}

    # Iterate through all possible subarray lengths that are powers of two
    max_length = len(bin(len(array))) - 2  # maximum power of two within N
    for p in range(1, max_length + 1):
        sub_length = 1 << p  # 2^p
        for i in range(len(array) - sub_length + 1):
            sub_sum = prefix_sums[i + sub_length] - prefix_sums[i]
            power_of_two_sums[sub_length] = max(power_of_two_sums.get(sub_length, 0), sub_sum)

    # Get the maximum sum for each power of two subarray
    max_costs = sorted(power_of_two_sums.values(), reverse=True)

    # Obtain the result by summing maximum values that correspond to distinct subarray lengths
    result = sum(max_costs[:max_length])
    return result


# Read input from file
with open('recyclebin.in') as f:
    n = int(f.readline().strip())
    array = list(map(int, f.readline().split()))

# Calculate the maximum cost
max_cost = calculate_cost(array)

# Write output to file
with open('recyclebin.out', 'w') as f:
    f.write(str(max_cost))
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def main():
    with open('recyclebin.in', 'r') as fin:
        n = int(fin.readline().strip())
        nums = list(map(int, fin.readline().split()))

    max_cost = 0
    if any(num > 0 for num in nums):
        powers_of_two = {2**i for i in range(n.bit_length())}
        dp = [0] * n
        max_len = 0
        for i in range(n):
            dp[i] = max((dp[i-1] if i else 0) + nums[i], nums[i])
            if i + 1 in powers_of_two:
                max_cost = max(max_cost, dp[i])
                max_len = i + 1

        max_sub_cost = [0] * (max_len + 1)
        for i in range(n):
            if i + 1 <= max_len and dp[i] > 0:
                max_sub_cost[i+1] = max(max_sub_cost[i+1], dp[i])

        lengths = sorted((l for l in powers_of_two if l <= max_len), reverse=True)
        for length in lengths:
            max_cost = max(max_cost, sum(max_sub_cost[l] for l in lengths if l <= length))

    with open('recyclebin.out', 'w') as fout:
        fout.write(str(max_cost) + '\n')

if __name__ == "__main__":
    main()
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def max_subarray_cost(array):
    max_ending_here = max_so_far = array[0]
    for x in array[1:]:
        max_ending_here = max(x, max_ending_here + x)
        max_so_far = max(max_so_far, max_ending_here)
    return max_so_far if max_so_far > 0 else 0

def main():
    with open('recyclebin.in', 'r') as file:
        n = int(file.readline())
        array = list(map(int, file.readline().split()))

    powers_of_two = [1 << i for i in range(n.bit_length()) if (1 << i) <= n]
    max_cost = 0

    for length in powers_of_two:
        for start in range(n - length + 1):
            sub_array_cost = max_subarray_cost(array[start:start+length])
            if sub_array_cost > max_cost:
                max_cost = sub_array_cost
                array = array[:start] + array[start+length:]  # Delete the subarray
                break

    remaining_cost = max_subarray_cost(array)
    max_cost = max(max_cost, remaining_cost)

    with open('recyclebin.out', 'w') as file:
        file.write(str(max_cost))

if __name__ == '__main__':
    main()
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_cost(nums):
    # Dynamic programming approach to find the maximum subarray sum
    dp = [0] * (len(nums) + 1)
    for i in range(1, len(nums) + 1):
        dp[i] = max(dp[i - 1] + nums[i - 1], nums[i - 1])

    # Find the largest power of 2 less than or equal to N (length of nums)
    max_power_of_two = 1
    while (max_power_of_two << 1) <= len(nums):
        max_power_of_two <<= 1

    # Perform operations and calculate the maximum cost
    max_cost = 0
    while max_power_of_two > 0:
        # Find the best subarray to remove with length of current power of two
        best_subarray_sum = 0
        for i in range(max_power_of_two, len(nums) + 1):
            best_subarray_sum = max(best_subarray_sum, dp[i] - dp[i - max_power_of_two])
        max_cost += best_subarray_sum
        
        # Update dp array after removal of the best subarray
        new_dp = [0]
        for i in range(1, len(nums) + 1):
            if dp[i] - dp[i - 1] != best_subarray_sum or max_power_of_two != 1:
                new_dp.append(new_dp[-1] + nums[i - 1])
        dp = new_dp
        
        # Update the current largest power of 2 for the next iteration
        while max_power_of_two > len(dp) - 1:
            max_power_of_two >>= 1

    return max_cost

def main():
    # Read input from file
    with open('recyclebin.in', 'r') as file:
        n = int(file.readline().strip())
        nums = list(map(int, file.readline().split()))

    # Calculate the maximum cost
    max_cost = calculate_cost(nums)

    # Write output to file
    with open('recyclebin.out', 'w') as file:
        file.write(str(max_cost))

if __name__ == '__main__':
    main()
```
```

---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
def calculate_max_cost(nums):
    max_cost = 0
    powers_of_two = [1 << i for i in range(20)]  # Since N<=1000, 2^10 > 1000 so 20 is a safe upper limit
    sums = [0] * (len(nums) + 1)  # Prefix sums

    # Calculate prefix sums
    for i in range(1, len(nums) + 1):
        sums[i] = sums[i - 1] + nums[i - 1]

    # Helper function to determine if a number is a power of two
    def is_power_of_two(n):
        return (n != 0) and ((n & (n - 1)) == 0)

    # Helper function to calculate sum of subarray from index i to j (1-indexed)
    def subarray_sum(i, j):
        return sums[j] - sums[i - 1]

    # Iterate through all subarray lengths that are powers of two
    for length in powers_of_two:
        if length > len(nums):
            break

        # Find the maximum sum subarray of current length
        for start in range(0, len(nums) - length + 1):
            current_sum = subarray_sum(start + 1, start + length)
            if is_power_of_two(length):
                max_cost = max(max_cost, current_sum)
            
    return max_cost

# Read data from file
with open('recyclebin.in', 'r') as file:
    n = int(file.readline().strip())
    nums = list(map(int, file.readline().split()))

# Calculate maximum cost
max_cost = calculate_max_cost(nums)

# Write result to file
with open('recyclebin.out', 'w') as file:
    file.write(str(max_cost))
```
```
---------- user ----------


Expected program to write result to `recyclebin.out` and read from `recyclebin.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```markdown
```python
from itertools import accumulate

def main():
    with open('recyclebin.in', 'r') as file:
        n = int(file.readline())
        A = list(map(int, file.readline().split()))

    # Calculate all prefix sums
    prefix_sums = [0] + list(accumulate(A))

    # Initialize the maximum cost to 0 or the largest positive number in A
    max_cost = max(0, max(A))

    # Check all possible subarray lengths that are powers of 2
    power = 1
    while power <= n:
        for i in range(power, n + 1):
            # Calculate the sum of subarray using prefix sums
            subarray_sum = prefix_sums[i] - prefix_sums[i - power]
            if subarray_sum > max_cost:
                max_cost = subarray_sum
        power <<= 1  # Move to the next power of 2

    # Write the result to the output file
    with open('recyclebin.out', 'w') as file:
        file.write(str(max_cost))

if __name__ == "__main__":
    main()
```
```
