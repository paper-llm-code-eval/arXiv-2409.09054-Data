---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `pergament.in` and write to `pergament.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[0.png|align=right|width=13em]
Deși nu obișnuiește să deseneze, Adrian are o pasiune inedită: îi place să schițeze pe hârtie orașe imaginare... mai exact cum ar arăta acestea văzute de sus. În acest an, de ziua lui a primit cadou un pergament! Normal că menirea acestuia va fi ca Adrian să deseneze pe el schița celui mai mare oraș pe care și l-a imaginat până acum.

Pergamentul are lățimea unei coli de hârtie, însă lungimea sa este neașteptat de mare. De asemenea, pergamentul este împărțit în pătrate astfel încât pe lungime se află exact $N$ pătrate iar pe lățime se află exact $K$ pătrate. Astfel, Adrian are la dispoziție exact $N \cdot K$ pătrate pe care le poate colora.
\
El decide să coloreze doar străzile orașului, deoarece nu are timp de mai mult și plănuiește să folosească două tipuri de străzi:
1) Străzi orizontale
	- Vor fi desenate ca o secvență continuă de pătrate albastre.
	- Pe fiecare rând de la $1$ la $N$ se va afla **exact** o stradă orizontală. Deci, la final vor fi **exact** $N$ străzi orizontale.
	- Fiecare stradă se desfășoară pe un singur rând.
	- Lungimea fiecărei străzi va fi de minim un pătrat și de maxim $K$ pătrate și este egală cu numărul de pătrate ce o compun.
	- Strada poate începe pe oricare pătrat de pe rând și poate avea orice lungime cât timp nu depășește limitele pergamentului.
2) Străzi verticale
	- Vor fi desenate ca o secvență continuă de pătrate roșii.
	- Adrian va desena exact $Q$ străzi verticale, desfășurate pe una dintre coloanele de la $1$ la $K$.
	- Pe o coloană pot exista mai multe străzi verticale cu condiția să nu se suprapună. Nu este obligatoriu să existe străzi verticale pe toate coloanele.
	- Lungimea fiecărei străzi va fi de minim un pătrat și de maxim $N$ pătrate și este egală cu numărul de pătrate ce o compun.
	- Strada poate începe pe oricare pătrat de pe coloană și poate avea orice lungime cât timp nu depășește limitele pergamentului.

\
La final, Adrian observă că anumite pătrate au devenit mov, deoarece fac parte atât dintr-o stradă verticală cât și din una orizontală, deci au fost colorate atât cu roșu cât și cu albastru. Adrian este fascinat de apariția acestora și vrea să știe câte pătrate mov sunt în desenul său. Fiind prea obosit să le numere, vă roagă pe voi să-l ajutați.

# Cerință
Cunoscând numerele $N$, $K$, $Q$, precum și poziționarea celor $N$ străzi orizontale și a celor $Q$ străzi verticale, să se determine numărul de pătrate mov din pergament.

# Date de intrare
Pe prima linie a fișierul de intrare `pergament.in` se află trei numere naturale separate prin câte un spațiu, $N$, $K$, $Q$, cu semnificația din enunț.

Pe a doua linie se află patru numere naturale separate prin câte un spațiu, $A$, $B$, $C$, $D$.

Pe a treia linie se află două numere naturale $X_1$ și $Y_1$, unde $X_1$ reprezintă coloana pătratului de început al străzii orizontale de pe rândul 1, iar $Y_1$ reprezintă lungimea acesteia.

Datele următoarelor $N-1$ străzi se vor calcula prin formulele de mai jos, unde $X_i$ reprezintă coloana pătratului de început al străzii orizontale de pe rândul $i$ ($2 \leq i \leq N$), iar $Y_i$ reprezintă lungimea acesteia:
- $X_i = 1 + (X_{i-1} \cdot A + B)\ \%\ K$
- $Y_i = 1 + (Y_{i-1} \cdot C + D)\ \%\ (K - X_i + 1)$

Pe următoarele $Q$ linii se află câte trei numere naturale $J$, $R$ și $L$, unde $J$ reprezintă coloana pe care se află strada verticală, $R$ reprezintă rândul pe care se află pătratul de început al străzii, iar $L$ reprezintă lungimea străzii.

# Date de ieșire
În fișierul de ieșire `pergament.out` se va afla un singur număr natural ce reprezintă numărul de pătrate mov din desenul lui Adrian.

# Restricții și precizări
- $1 \leq N \leq 10\ 000\ 000$
- $1 \leq K \leq 50$
- $1 \leq Q \leq 100\ 000$
- $1 \leq A,B,C,D \leq 10\ 000\ 000$
- $1 \leq X_i \leq K$
- $1 \leq Y_i \leq K-X+1$
- $1 \leq J \leq K$
- $1 \leq R \leq N$
- $1 \leq L \leq N-R+1$
- Rândurile sunt numerotate de la $1$ la $N$, iar coloanele sunt numerotate de la $1$ la $K$.
- Pentru 40 de puncte, $N \leq 20\ 000$.
- Pentru alte 30 de puncte, $N \leq 500\ 000$.
- Pentru alte 30 de puncte, nu există condiții adiționale.

---

Example:
`pergament.in`
```
6 3 2
1 1 1 1
1 2
2 2 4
1 4 3
```

`pergament.out`
```
3
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
# Solution for the programming challenge

# Read input data from "pergament.in"
with open('pergament.in', 'r') as file:
    N, K, Q = map(int, file.readline().split())
    A, B, C, D = map(int, file.readline().split())
    X, Y = map(int, file.readline().split())

    # Initialize a list to store the horizontal streets
    horizontals = [(X, Y)]
    for _ in range(1, N):
        X = 1 + ((X * A + B) % K)
        Y = 1 + ((Y * C + D) % (K - X + 1))
        horizontals.append((X, Y))

    # Initialize a list to store the vertical streets
    verticals = []
    for _ in range(Q):
        J, R, L = map(int, file.readline().split())
        verticals.append((J, R, L))

# Initialize a counter for purple squares
purple_squares = 0

# Now, we create a list to count the vertical purple squares
vertical_count = [0] * (K + 1)

# Process the vertical streets
for J, R, L in verticals:
    vertical_count[J] += L

# Process the horizontal streets and count purple squares
for start_col, length in horizontals:
    end_col = start_col + length - 1
    for col in range(start_col, end_col + 1):
        purple_squares += min(vertical_count[col], N)

# Write out the result to "pergament.out"
with open('pergament.out', 'w') as file:
    file.write(str(purple_squares))
```

This code aims to be efficient by storing the lengths of the vertical streets and then iterating through the horizontal streets to calculate the purple squares. However, the time complexity could still be improved, especially in the final calculation of the purple squares.
---------- user ----------


Program result did not match expected result.
Input data:
```
6 3 2
1 1 1 1
1 2
2 2 4
1 4 3
```
Expected output:
```
3
```
Found output:
```
22
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

After evaluating the differences between the expected and found result, I identified the following issues in the initial solution:

1. The counter for vertical streets (`vertical_count`) was improperly used. It was meant to keep track of how many squares on each column are part of a vertical street, but the calculation of purple squares was incorrectly summing up to the total number of rows `N`, which would overcount the purple squares.

2. When calculating the purple squares, the original solution incorrectly assumed that the entire vertical street would intersect with the current horizontal street, which is not true. Each vertical street might start and end on different rows and therefore only a part of it or none at all might intersect with a particular horizontal street.

3. The increment of the purple squares should take into account only the overlapping region between the horizontal and vertical streets.

To fix these issues, we will adjust the algorithm appropriately. Here is the corrected solution:

```python
# Solution for the programming challenge

# Read input data from "pergament.in"
with open('pergament.in', 'r') as file:
    N, K, Q = map(int, file.readline().split())
    A, B, C, D = map(int, file.readline().split())
    X, Y = map(int, file.readline().split())

    # Initialize a list to store the horizontal streets (start_col, length)
    horizontals = [(X, Y)]
    for i in range(1, N):
        X = 1 + ((horizontals[i-1][0] * A + B) % K)
        Y = 1 + ((horizontals[i-1][1] * C + D) % (K - X + 1))
        horizontals.append((X, Y))

    # Initialize a dictionary to store the vertical streets by column
    verticals = {j: [] for j in range(1, K+1)}
    for _ in range(Q):
        J, R, L = map(int, file.readline().split())
        verticals[J].append((R, R + L - 1))  # Store start and end row

# Initialize a counter for purple squares
purple_squares = 0

# Process each horizontal street
for i, (start_col, length) in enumerate(horizontals):
    row = i + 1
    end_col = start_col + length - 1
    for col in range(start_col, end_col + 1):
        for start_row, end_row in verticals[col]:
            # Check if there is an intersection with the current horizontal street
            if start_row <= row <= end_row:
                purple_squares += 1
                break  # Once intersection found, no need to check further

# Write out the result to "pergament.out"
with open('pergament.out', 'w') as file:
    file.write(str(purple_squares))
```

This corrected solution calculates the intersection of vertical and horizontal streets more accurately by checking the overlapping regions for each column and incrementing the purple squares only for the intersections.
