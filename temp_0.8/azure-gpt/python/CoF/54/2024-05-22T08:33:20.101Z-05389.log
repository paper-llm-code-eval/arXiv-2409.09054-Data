---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from heapq import heappop, heappush

# Read the input data
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().split())
    bases = list(map(int, file.readline().split()))
    M = int(file.readline())
    edges = [list(map(int, file.readline().split())) for _ in range(M)]

# Initialize the graph and the minimum distances array
graph = [[] for _ in range(N)]
for a, b, T, W in edges:
    graph[a-1].append((b-1, T, W))
    graph[b-1].append((a-1, T, W))

# Dijkstra's algorithm with modifications
def dijkstra():
    min_time = [float('inf')] * K
    queue = [(0, 0, 0)]  # time, node, wattage_used
    while queue:
        time, node, wattage_used = heappop(queue)

        # When reaching the destination with a certain lantern type
        if node == N - 1:
            min_time[wattage_used] = min(min_time[wattage_used], time)
            continue

        # Recharge at friendly bases
        if bases[node]:
            wattage_used = 0
        
        # Skip if the current path is already worse than the best found
        if time > min_time[wattage_used]:
            continue

        for neighbor, T, W in graph[node]:
            # Only proceed if we have enough wattage left to travel
            if wattage_used + W <= K:
                new_time = time + T
                heappush(queue, (new_time, neighbor, wattage_used + W))

    # Find the smallest lantern type that reaches the destination in the min time
    min_wattage, min_time_val = min(((w, t) for w, t in enumerate(min_time) if t != float('inf')), key=lambda x: x[::-1])

    return (min_time_val, min_wattage + 1)

# Solve the problem
T_min, W_min = dijkstra()

# Write the output data
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

To test the code, create a file `lanterna.in` with the example input data, then run the code. After the execution, the file `lanterna.out` should contain the correct output.
---------- user ----------


Program exited with code 137.
stdout:
```

```
stderr:
```

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Exit code 137 typically indicates that the program was forcefully terminated, often due to exceeding memory limits or being killed by the system due to other reasons such as taking too long to execute. Since no specific error message was given in stdout or stderr, the issue might be related to excessive memory usage or an infinite loop.

In the initial solution, there might be an issue with the way we are pushing new states onto the priority queue, potentially causing too many states and thus, an infinite loop or memory overflow.

To fix this, we can add a visited array to keep track of the best wattage used for each type of lantern at each node. This can prevent redundant states from being explored.

Here is the revised solution with the necessary fix:

```python
from heapq import heappop, heappush

# Read the input data
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().split())
    bases = list(map(int, file.readline().split()))
    M = int(file.readline())
    edges = [list(map(int, file.readline().split())) for _ in range(M)]

# Initialize the graph and the visited array
graph = [[] for _ in range(N)]
for a, b, T, W in edges:
    graph[a - 1].append((b - 1, T, W))
    graph[b - 1].append((a - 1, T, W))

# Dijkstra's algorithm with modifications
def dijkstra():
    visited = [[False] * (K + 1) for _ in range(N)]
    min_time = [float('inf')] * (K + 1)
    queue = [(0, 0, 0)]  # time, node, wattage_used

    while queue:
        time, node, wattage_used = heappop(queue)

        # Skip already visited states with worse wattage
        if visited[node][wattage_used]:
            continue
        visited[node][wattage_used] = True

        # When reaching the destination with a certain lantern type
        if node == N - 1:
            min_time[wattage_used] = min(min_time[wattage_used], time)
            continue

        # Recharge at friendly bases
        if bases[node]:
            wattage_used = 0

        for neighbor, T, W in graph[node]:
            # Only proceed if we have enough wattage left to travel
            if wattage_used + W <= K:
                new_time = time + T
                new_wattage_used = wattage_used + W

                # Skip if already visited with better or equal wattage
                if not visited[neighbor][new_wattage_used]:
                    heappush(queue, (new_time, neighbor, new_wattage_used))

    # Find the smallest lantern type that reaches the destination in the min time
    min_time_val = min(min_time)
    W_min = min((w for w, t in enumerate(min_time) if t == min_time_val)) + 1

    return min_time_val, W_min

# Solve the problem
T_min, W_min = dijkstra()

# Write the output data
with open('lanterna.out', 'w') as file:
    file.write(f"{T_min} {W_min}\n")
```

This revised solution should correctly handle the input without causing memory issues or infinite loops. The `visited` array ensures that we do not process any node and wattage combination more than once, which should address the potential problem that led to the exit code 137.
