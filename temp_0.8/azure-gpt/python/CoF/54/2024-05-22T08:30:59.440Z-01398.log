---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `lanterna.in` and write to `lanterna.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un agent secret are o hartă pe care sunt marcate $N$ obiective militare. El se află, iniţial, lângă obiectivul numerotat cu $1$ (baza militară proprie) şi trebuie să ajungă la obiectivul numerotat cu $N$ (baza militară inamică). În acest scop, el va folosi drumurile existente, fiecare drum legând $2$ obiective distincte. Fiind o misiune secretă, deplasarea agentului va avea loc noaptea; de aceea, el are nevoie de o lanternă. Pentru aceasta, el are de ales intre $K$ tipuri de lanterne – o lanternă de tipul $W$ ($1 \leq W \leq K$) are baterii care permit consumul a $W$ waţi, după consumul acestor waţi, lanterna nu mai luminează. Din fericire, unele dintre obiective sunt baze militare prietene, astfel că, o dată ajuns acolo, el îşi poate reîncărca bateriile complet. Agentul trebuie sa aibă grijă ca, înainte de a merge pe un drum între două obiective, cantitatea de waţi pe care o mai poate consuma să fie mai mare sau egală cu cantitatea de waţi pe care o va consuma pe drumul respectiv.

Cunoscând drumurile dintre obiective şi, pentru fiecare drum, durata necesară parcurgerii drumului şi numărul de waţi consumaţi de lanternă, determinaţi tipul de lanternă cu numărul cel mai mic, astfel încât durata deplasării sa fie minimă (dintre toate tipurile de lanternă cu care se poate ajunge în timp minim la destinaţie, interesează lanterna cu consumul cel mai mic).

# Date de intrare
Pe prima linie a fişierului `lanterna.in` se află numerele întregi $N$ şi $K$, separate printr-un spaţiu. Pe următoarea linie se află $N$ numere întregi din mulţimea ${0,1}$. Daca al $i$-lea număr este $1$, aceasta înseamnă că obiectivul cu numărul $i$ este o bază militară prietenă (adică agentul îşi poate reîncărca bateriile lanternei daca ajunge la acest obiectiv); dacă numărul este $0$, agentul nu îşi va putea reîncărca bateriile. Primul număr din linie este $1$, iar ultimul este $0$. Pe cea de-a treia linie a fişierului se află numărul $M$ de drumuri dintre obiective. Fiecare din următoarele $M$ linii conţine câte $4$ numere întregi separate prin spaţii: $a\ b\ T\ W$ , având semnificaţia că există un drum bidirecţional între obiectivele $a$ şi $b$ ($a≠b$), care poate fi parcurs într-un timp $T$ şi cu un consum de $W$ waţi.

# Date de ieşire
In fişierul `lanterna.out` se vor afişa două numere întregi, separate printr-un spaţiu : $T_{min}$ şi $W_{min}$. $T_{min}$ reprezentând durata minimă posibilă a deplasării de la obiectivul $1$ la obiectivul $N$, iar $W_{min}$ reprezintă tipul de lanternă cu numărul cel mai mic pentru care se obţine acest timp.

# Restricţii şi precizări
* $2 ≤ N ≤ 50$
* $1 ≤ K ≤ 1 \ 000$
* $1 ≤ M ≤ N(N-1)/2$
* Între două oraşe diferite poate exista maximum un drum direct.
* Pentru fiecare drum, durata parcurgerii este un număr întreg intre $1$ şi $100$, iar numărul de waţi consumaţi este un număr întreg între $0$ şi $1 000$
* Se garantează că există cel puţin un tip de lanternă pentru care deplasarea să fie posibilă.
* Punctajul pentru un test se va acorda in felul următor:
* 30% daca este determinat corect $T_{min}$
* 100% daca sunt determinate corect atât $T_{min}$, cât şi $W_{min}$

---

Example:
`lanterna.in`
```
7 10
1 0 1 0 0 0 0
7
1 2 10 3
1 4 5 5
2 3 10 3
4 3 15 1
3 6 4 3
6 5 2 2
5 7 1 0
```

`lanterna.out`
```
27 6
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```python
from collections import defaultdict
import heapq

# Function to perform Dijkstra's algorithm for shortest path
def dijkstra(graph, start, end, K, recharge_stations):
    # Priority queue to keep track of vertices and their distance from start
    queue = [(0, start, K)] # (time, vertex, battery left)
    visited = set()
    
    while queue:
        time, current, battery_left = heapq.heappop(queue)
        
        if (current, battery_left) in visited: # avoid re-processing a node
            continue
        visited.add((current, battery_left))
        
        if current == end:
            return time, battery_left
        
        for neighbor, needed_battery, travel_time in graph[current]:
            if battery_left >= needed_battery:
                # If the neighbor is a recharge station, refill the battery
                new_battery_left = K if neighbor in recharge_stations else battery_left - needed_battery
                heapq.heappush(queue, (time + travel_time, neighbor, new_battery_left))
    
    return float("inf"), 0

# Read data from file
with open('lanterna.in', 'r') as file:
    N, K = map(int, file.readline().split())
    recharge_stations = [idx for idx, val in enumerate(file.readline().split(), start=1) if int(val) == 1]
    M = int(file.readline().strip())
    
    # Create a graph in the form of a dictionary
    graph = defaultdict(list)
    for _ in range(M):
        a, b, T, W = map(int, file.readline().split())
        graph[a].append((b, W, T))
        graph[b].append((a, W, T))

# Try each lantern type starting from 1 and find the one with minimum travel time
min_time, min_lantern_type = float('inf'), K
for lantern_power in range(1, K+1):
    travel_time, _ = dijkstra(graph, 1, N, lantern_power, recharge_stations)
    if travel_time < min_time:
        min_time, min_lantern_type = travel_time, lantern_power
    elif travel_time > min_time:
        # Since the travel time does not decrease anymore, we can stop
        break

# Write the result to the output file
with open('lanterna.out', 'w') as file:
    file.write(f"{min_time} {min_lantern_type}\n")
```

This Python code reads input from a file named `lanterna.in`, processes the data using Dijkstra's algorithm, and writes the minimum travel time and the type of lantern to a file named `lanterna.out`. It assumes that the input data follows the specified format and constraints.
