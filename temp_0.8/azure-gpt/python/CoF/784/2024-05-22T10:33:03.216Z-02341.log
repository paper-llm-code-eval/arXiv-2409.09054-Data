---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in python. The code must compile and be correct.
The solution must read from `divizor.in` and write to `divizor.out`.
The solution must not use `input()` or `print()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un număr natural $N$ format din $m$ cifre și toate cele $m - 1$ numere ce se pot forma succesiv pornind de la numărul inițial $N$, prin mutarea celei mai semnificative cifre a combinației curente la sfârșitul acesteia, după cum se poate observa din exemplele de mai jos.

$N = 12035 \rightarrow 20351 \rightarrow 03512 \rightarrow 35120 \rightarrow 51203$ ($4$ combinații). Se taie zeroul de la inceputul lui $03512$ iar numărul a rămas $3512$.
 
$N = 2121 \rightarrow 1212 \rightarrow 2121 \rightarrow 1212$ ($3$ combinații, $3$ numere)
 
# Cerință
 
Scrieți un program care să citească numărul $N$, să construiască cele $m - 1$ numere și să determine:

1. numărul cu cel mai mare număr de divizori, dintre cele $m$ numere; dacă sunt mai multe astfel de numere printre cele $m$, se vor scrie în fișierul de ieșire toate aceste numere.
2. cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere, iar în cazul în care nu există un astfel de divizor (toate cele $m$ numere sunt prime), se va afișa valoarea $0$.

# Date de intrare

Fișierul `divizor.in` conține o singură linie pe care este scris numărul natural $N$.


# Date de ieșire

Fișierul `divizor.out` va conține:

* pe prima linie numărul sau numerele cu număr maxim de divizori, despărțite prin câte un spațiu
* pe a doua linie, un număr natural reprezentând cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere sau $0$, în cazul în care toate cele $m$ numere sunt numere prime


# Restricții și precizări

* $1 \leq N < 1 \ 000 \ 000$;
* Conform procedurii de formare a combinațiilor, se poate întâmpla să se obțină de mai multe ori același număr. Se vor considera toate combinațiile posibile, chiar dacă există numere care se repetă.
* Cifra $0$ scrisă în fața unui număr se consideră neglijabilă și nu se cere afișată în rezultatul final.
* La toate cerințele se ia în considerare și numărul inițial.
* Divizorul propriu al unui număr este un divizor diferit de $1$ și de număr.
* Se acordă punctaje parțiale: cerința a) 60% din punctaj, cerința b) 40% din punctaj

---

Example:
`divizor.in`
```
212
```

`divizor.out`
```
212
106
```


---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in python, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```markdown
```python
def count_divisors(n):
    divisors = 2  # Include 1 and n itself
    i = 2
    while i * i < n:
        if n % i == 0:
            divisors += 1 if i == n // i else 2
        i += 1
    return divisors

def shift_digits(n_str):
    return n_str[1:] + n_str[0]

# Read input
with open('divizor.in', 'r') as file:
    N = file.readline().strip()

max_divisors = 0
numbers_with_max_divisors = []
greatest_proper_divisor = 0

N_str = N
for i in range(len(N)):
    N_int = int(N_str.lstrip('0'))  # Convert to int, cutting off leading zeros
    divisors = count_divisors(N_int)
    if divisors > max_divisors:
        max_divisors = divisors
        numbers_with_max_divisors = [N_str]
    elif divisors == max_divisors:
        numbers_with_max_divisors.append(N_str)
    
    if i < len(N) - 1:  # No need to check the divisor for the initial number
        for d in range(2, N_int // 2 + 1):
            if N_int % d == 0:  # Found a proper divisor
                greatest_proper_divisor = max(greatest_proper_divisor, d)
                break
    
    N_str = shift_digits(N_str)

# Write output
with open('divizor.out', 'w') as file:
    file.write(' '.join(str(int(num.lstrip('0'))) for num in numbers_with_max_divisors) + '\n')
    file.write(str(greatest_proper_divisor) + '\n')
```
```
---------- user ----------


Expected program to write result to `divizor.out` and read from `divizor.in`.
Do not use `input()` or `print()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

```python
def count_divisors(n):
    divisors = 2  # Include 1 and n itself
    i = 2
    while i * i <= n:
        if n % i == 0:
            divisors += 1 if i == n // i else 2
        i += 1
    return divisors if n != 1 else 1

def rotate_number(n_str):
    return n_str[1:] + n_str[0]

def get_max_divisor(num):
    for i in range(num // 2, 1, -1):
        if num % i == 0:
            return i
    return 0

with open('divizor.in', 'r') as file:
    N = file.readline().strip()

max_divisors = 0
numbers_with_max_divisors = []
greatest_proper_divisor = 0

original_number = int(N)
N_str = N
N_set = set()

# Count divisors for the original number
divisors_count = count_divisors(original_number)
if divisors_count > max_divisors:
    max_divisors = divisors_count
    numbers_with_max_divisors = [original_number]
elif divisors_count == max_divisors:
    numbers_with_max_divisors.append(original_number)

# Find the greatest proper divisor for the original number
greatest_proper_divisor = max(greatest_proper_divisor, get_max_divisor(original_number))

# Check the rotated numbers
for _ in range(len(N) - 1):
    N_str = rotate_number(N_str)
    current_number = int(N_str)
    if current_number in N_set:
        continue  # Skip if already processed
    N_set.add(current_number)

    divisors_count = count_divisors(current_number)
    if divisors_count > max_divisors:
        max_divisors = divisors_count
        numbers_with_max_divisors = [current_number]
    elif divisors_count == max_divisors:
        numbers_with_max_divisors.append(current_number)

    # Find the greatest proper divisor
    proper_divisor = get_max_divisor(current_number)
    if proper_divisor > greatest_proper_divisor:
        greatest_proper_divisor = proper_divisor

with open('divizor.out', 'w') as file:
    file.write(' '.join(map(str, sorted(numbers_with_max_divisors))) + '\n')
    file.write(str(greatest_proper_divisor) + '\n')
```
