{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "python",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/python/CoF/904/2024-05-22T13:12:42.377Z-08221.log",
  "attemptStart": 1716383562.377,
  "attemptEnd": 1716383609.439,
  "attemptDuration": 47.061999797821045,
  "code": "def compute_prefix_sums(L, C, mines):\n    prefix_sums = [[0] * (C + 1) for _ in range(L + 1)]\n    for x, y in mines:\n        prefix_sums[x][y] = 1\n\n    for i in range(1, L + 1):\n        for j in range(1, C + 1):\n            prefix_sums[i][j] += (prefix_sums[i - 1][j] +\n                                   prefix_sums[i][j - 1] -\n                                   prefix_sums[i - 1][j - 1])\n\n    return prefix_sums\n\ndef mines_in_rectangle(prefix_sums, x1, y1, x2, y2):\n    return (prefix_sums[x2][y2] -\n            prefix_sums[x1 - 1][y2] -\n            prefix_sums[x2][y1 - 1] +\n            prefix_sums[x1 - 1][y1 - 1])\n\ndef compute_min_moves(L, C, M, mines):\n    prefix_sums = compute_prefix_sums(L, C, mines)\n    min_moves = float('inf')\n\n    for x in range(1, L + 1):\n        for y in range(1, C + 1):\n            for height in range(1, min(L - x + 2, M + 1)):\n                for width in range(1, min(C - y + 2, (M + height - 1) // height + 1)):\n                    if height * width >= M:\n                        current_mines = mines_in_rectangle(prefix_sums, x, y, x + height - 1, y + width - 1)\n                        moves = M - current_mines\n                        min_moves = min(min_moves, moves)\n\n    return -1 if min_moves == float('inf') else min_moves\n\ndef main():\n    with open('deminare.in', 'r') as fin:\n        V = int(fin.readline().strip())\n        L, C = map(int, fin.readline().split())\n        M = int(fin.readline().strip())\n        mines = [tuple(map(int, fin.readline().split())) for _ in range(M)]\n\n    if V == 1:\n        row_counts = [0] * (L + 1)\n        for x, _ in mines:\n            row_counts[x] += 1\n        max_mines = max(row_counts)\n        most_mined_rows = [str(i) for i in range(1, L + 1) if row_counts[i] == max_mines]\n\n        with open('deminare.out', 'w') as fout:\n            fout.write(' '.join(most_mined_rows) + '\\n')\n\n    elif V == 2:\n        min_moves = compute_min_moves(L, C, M, mines)\n        with open('deminare.out', 'w') as fout:\n            fout.write(str(min_moves) + '\\n')\n\nmain()\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2953,
  "metadata": {
    "id": 904,
    "examples": [
      {
        "in": "1\n4 5\n8\n1 2\n1 5\n2 1\n3 2\n3 5\n4 3\n4 4\n4 5",
        "out": "4",
        "explainer": ""
      },
      {
        "in": "2\n4 5\n8\n1 2\n1 5\n2 1\n3 2\n3 5\n4 3\n4 4\n4 5",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Pe un teren de formă dreptunghiulară format din $L$ linii și $C$ coloane sunt plantate $M$ mine. Liniile sunt numerotate de sus în jos cu valori de la $1$ la $L$ iar coloanele sunt numerotate de la stânga la dreapta cu valori de la $1$ la $C$.\n\nDeoarece războiul s-a terminat, specialiștii vor să demineze terenul și să-l redea utilizării publice. Mutarea unei mine reprezintă operația de transfer a unei mine de la linia $x_1$ și coloana $y_1$ la o poziție liberă, dată de linia $x_2$ și coloana $y_2$, unde $1 \\leq x_1,x_2 \\leq L$ și $1 \\leq y_1,y_2 \\leq C$.\n\nDeoarece mutarea unei mine este periculoasă, trebuie determinat **numărul minim de mine care trebuie mutate din poziția inițială** astfel încât toate minele de pe teren să fie așezate unele lângă altele într-o **zonă compactă dreptunghiulară**, oriunde în cadrul terenului dat, pentru ca apoi să fie detonate împreună.\n\nSpre exemplu: dacă $L=4$, $C=5$, $M=8$ și minele sunt așezate inițial conform figurii de mai jos (zonele colorate cu negru arată pozițiile minelor), pentru a se ajunge la o așezare a minelor într-o zonă compactă de formă dreptunghiulară numărul minim de mine mutate este $3$.\n\n~[0.png|align=center|width=40em]\n\n# Cerințe\nCunoscând numărul de linii $L$ și de coloane $C$ ale terenului minat, numărul de mine $M$, precum și poziția fiecărei mine, să se scrie un program care determină:\n1. linia sau liniile pe care se găsesc cele mai multe mine;\n2. numărul minim de mine mutate, pentru ca toate minele de pe teren să fie așezate într-o zonă compactă cu formă dreptunghiulară.\n\n# Date de intrare\nFișierul de intrare este `deminare.in` și conține:\n- pe prima linie numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$;\n- pe a doua linie două numere naturale $L$ și $C$, cu semnificația din enunț;\n- pe a treia linie numărul natural $M$, cu semnificația din enunț;\n- pe fiecare din următoarele $M$ linii, câte o pereche de valori $x_i$ și $y_i$, $1 \\leq i \\leq M$, reprezentând linia, respectiv coloana, unde se află o mină.\n\nNumerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\nFișierul de ieșire este `deminare.out`.\n\\\nDacă valoarea lui $V$ este $1$ atunci prima linie a fișierului de ieșire va conține numărul liniei pe care se găsesc cele mai multe mine.\nDacă există două sau mai multe astfel de linii, se vor afișa toate numerele acestora, în ordine crescătoare, separate prin câte un spațiu.\n\nDacă valoarea lui $V$ este $2$ atunci fișierul de ieșire va conține pe prima linie numărul minim cerut de mine mutate. Dacă minele nu pot fi așezate într-o zonă compactă de formă dreptunghiulară, în fișierul de ieșire se va scrie valoarea $-1$.\n\n# Restricții și precizări\n- $1 \\leq L,C \\leq 500$\n- $1 \\leq M \\leq L \\cdot C$\n- O zonă în care se află mine așezate pe coloane consecutive, pe aceeași linie sau așezate pe linii consecutive, pe aceeași coloană se consideră că formează o zonă compactă de formă dreptunghiulară.\n- O zonă compactă de formă dreptunghiulară poate avea numărul de linii ocupate egal cu numărul de coloane ocupate.\n- Pentru teste valorând 20 de puncte, avem $V=1$.\n- Pentru teste valorând 70 de puncte, avem $V=2$.\n- Pentru teste valorând 20 de puncte, avem $V=2$ și $L \\cdot C \\leq 10\\ 000$.\n- Pentru teste valorând 32 de puncte, avem $V=2$ și $L \\cdot C \\leq 100\\ 000$.",
    "header": {
      "problem_id": 904,
      "problem_name": "deminare",
      "tags": "[Prefix Sums]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.06,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "deminare.in",
      "output_filename": "deminare.out",
      "multiple_solutions": false,
      "original_source": "OJI 2019 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "deminare.in",
      "output": "deminare.out"
    },
    "consoleInteraction": false
  }
}