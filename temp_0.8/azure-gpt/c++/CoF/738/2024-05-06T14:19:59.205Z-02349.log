---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream input("ucif.in");
    std::ofstream output("ucif.out");

    int n, last_digit = 0;
    input >> n;

    for (int i = 1; i <= n; ++i) {
        int current = i % 10;
        for (int j = 1; j < i; ++j) {
            current = (current * i) % 10;
        }
        last_digit = (last_digit + current) % 10;
    }

    output << last_digit;
    return 0;
}
```

This C++ solution reads the number `n` from `ucif.in`, computes the last digit of the sum $s = 1^1 + 2^2 + \dots + n^n$ efficiently by using the modulo operation, and writes the result to `ucif.out`. The solution avoids using slow I/O functions such as `cin >>` or `cout <<` and instead uses file streams, which are typically faster for file input/output operations.
