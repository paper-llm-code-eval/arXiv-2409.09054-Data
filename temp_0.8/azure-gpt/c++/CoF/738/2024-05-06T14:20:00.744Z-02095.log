---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ucif.in` and write to `ucif.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie $n$ un număr natural și $s = 1^1 + 2^2 + 3^3 + \dots + n^n$.

# Cerință

Scrieți un program care să afișeze ultima cifră a lui $s$.

# Date de intrare


De pe prima linie a fișierului de intrare `ucif.in` se citește numărul $n$.


# Date de ieșire


Pe prima linie a fișierului de ieșire `ucif.out` se va afișa numai ultima cifră a lui $s$.


# Restricții și precizări

* $1 \leq n \leq 100$

---

Example:
`ucif.in`
```
3
```

`ucif.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream fin("ucif.in");
    std::ofstream fout("ucif.out");

    int n, last_digit = 0;
    fin >> n;

    for (int i = 1; i <= n; ++i) {
        int temp = i % 10, power = i; // Last digit of base and original power
        for (int j = 1; j < i; ++j) {
            temp = (temp * (i % 10)) % 10; // Last digit of result
        }
        last_digit = (last_digit + temp) % 10; // Update last digit of sum
    }

    fout << last_digit;
    return 0;
}
```
This code calculates the last digit of the sum 1^1 + 2^2 + ... + n^n (where ^ denotes exponentiation) and writes it to `ucif.out`. It does so efficiently by only keeping track of the last digit through each iteration, as the last digit of the sum is not affected by the other digits of the numbers being added.
