---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `album.in` and write to `album.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Victor si Radu sunt frați. Mama le-a adus $n$ stickere cu fotbaliști, fiecare sticker având imprimat pe spate un cod, un număr cuprins între $10$ și $999999$. Frații, dorind cât mai multe stickere pe care să le lipească în albumul propriu, au început să se certe. Mama le propune următorul mod de împărțire a stickerelor: ea aranjează cele $n$ stickere în linie, cu fața în jos, și fiecare frate, pe rând, va lua primul sticker disponibil, precum și toate stickerele care conțin două cifre care sunt egale cu cele mai mari două cifre, nu neapărat distincte, dintre cele scrise pe primul sticker luat la această etapă. Stickerele sunt disponibile începând de la stânga spre dreapta. Fiind cel mai mic, Victor va fi primul, apoi copiii iau stickere alternativ, până când nu mai sunt stickere. La final, fiecare copil numără câte stickere are în total.

# Cerință

Cunoscând numărul $n$ de stickere aduse de mama și numerele de pe ele în ordinea în care sunt așezate pe masă, să se determine:

1. Cele mai mari două cifre, nu neapărat distincte, de pe ultimul sticker aflat pe masă înainte de începerea concursului;
2. Fratele care câștigă concursul și câte stickere are.

# Date de intrare

Fișierul de intrare `album.in` conține pe prima linie o cifră $c$ care poate să fie doar $1$ sau $2$. Pe a doua linie se găsește $n$ reprezentând numărul de stickere. Pe a treia linie se află $n$ numere naturale separate prin câte un spațiu, reprezentând numerele de pe stickere.

# Date de ieșire

Dacă valoarea lui $c$ este $1$, atunci se va rezolva numai punctul $1$ din cerință. În acest caz, fișierul de ieșire `album.out` va conține pe prima linie, în ordine crescătoare, cifrele cerute.

Dacă valoarea lui $c$ este $2$, se va rezolva numai punctul $2$ din cerință. În acest caz, fișierul de ieșire `album.out` va conține pe prima linie litera $V$ dacă Victor are mai multe stickere, litera $R$ dacă Radu are mai multe stickere, sau literele $V$ și $R$ separate prin exact un spațiu dacă amândoi au același număr de stickere. Pe a doua linie se va scrie numărul de stickere ale celui care are cele mai multe sau numărul de stickere deținut de fiecare, în cazul în care au același număr de stickere.

# Restricții și precizări

* $n$ este număr natural, $3 \leq n \leq 800 \ 000$;
* Pentru rezolvarea cerinței $1$ se obțin $40$ de puncte, iar pentru cerința $2$, $50$ de puncte.
* Se acordă $10$ puncte din oficiu
* Pentru cerința $2$, se garantează că, pentru $50$% dintre teste, $n \leq 100$.
* Numerele de pe stickere sunt numere naturale cuprinse între $10$ și $999 \ 999$.

---

Example:
`album.in`
```
1
7
291 11 992 456 71 13 121
```

`album.out`
```
1 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

std::pair<int, int> getTwoLargestDigits(int number) {
    std::vector<int> digits;
    while (number > 0) {
        digits.push_back(number % 10);
        number /= 10;
    }
    std::sort(digits.begin(), digits.end(), std::greater<int>());
    return {digits[0], digits.size() > 1 ? digits[1] : digits[0]};
}

int main() {
    std::ifstream fin("album.in");
    std::ofstream fout("album.out");

    int c, n;
    fin >> c >> n;
    std::vector<int> stickers(n);
    for (int i = 0; i < n; ++i) {
        fin >> stickers[i];
    }
    
    if (c == 1) {
        auto [first, second] = getTwoLargestDigits(stickers.back());
        fout << second << ' ' << first << '\n';
    } else {
        int victor = 0, radu = 0;
        bool victorTurn = true;
        while (!stickers.empty()) {
            auto [firstDigit, secondDigit] = getTwoLargestDigits(stickers[0]);
            size_t i = 0;
            while (i < stickers.size()) {
                auto [f, s] = getTwoLargestDigits(stickers[i]);
                if (f == firstDigit && (s == secondDigit || s == firstDigit)) {
                    if (victorTurn) {
                        victor++;
                    } else {
                        radu++;
                    }
                    stickers.erase(stickers.begin() + i);
                } else {
                    ++i;
                }
            }
            victorTurn = !victorTurn;
        }

        if (victor > radu) {
            fout << 'V' << '\n' << victor << '\n';
        } else if (radu > victor) {
            fout << 'R' << '\n' << radu << '\n';
        } else {
            fout << 'V' << ' ' << 'R' << '\n' << victor << '\n';
        }
    }

    fin.close();
    fout.close();
    return 0;
}
```

This is the code for the programming challenge. It defines a function to get the two largest digits of a number, then processes the input accordingly based on the value of `c` from the input file `album.in`, and outputs the results to the file `album.out`. The solution should satisfy the constraints and provide correct output for both task 1 and task 2.
