{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 4,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/43/2024-05-06T08:13:31.830Z-07811.log",
  "attemptStart": 1714983211.83,
  "attemptEnd": 1714983639.132,
  "attemptDuration": 427.30200004577637,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nstruct Circle {\n    int x, y, r;\n    double dist_from_origin;\n};\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n}\n\npair<int, int> simplify(int x, int y) {\n    if (x == 0) return {0, 1};\n    if (y == 0) return {1, 0};\n    int d = gcd(abs(x), abs(y));\n    x /= d;\n    y /= d;\n    if (y < 0) {\n        x = -x;\n        y = -y;\n    }\n    return {x, y};\n}\n\nstruct pair_hash {\n    size_t operator()(const pair<int, int>& p) const {\n        auto h1 = hash<int>{}(p.first);\n        auto h2 = hash<int>{}(p.second);\n        // Use a commutative combination function for the hash values\n        return h1 + h2; \n    }\n};\n\nint main() {\n    ifstream fin(\"cerc.in\");\n    ofstream fout(\"cerc.out\");\n\n    int n;\n    fin >> n;\n    unordered_map<pair<int, int>, vector<Circle>, pair_hash> lines;\n\n    for (int i = 0; i < n; ++i) {\n        Circle circle;\n        fin >> circle.x >> circle.y >> circle.r;\n        // Compute the distance from the origin to the circle's center\n        circle.dist_from_origin = hypot(circle.x, circle.y);\n        auto direction = simplify(circle.x, circle.y);\n        lines[direction].push_back(circle);\n    }\n\n    int m = lines.size();\n    int q = 0; // Maximum number of exterior circles on the same line\n    int p = 0; // Number of lines with q exterior circles\n\n    for (auto& line : lines) {\n        // Sort circles on the same line by their distance from the origin\n        sort(line.second.begin(), line.second.end(), [](const Circle& a, const Circle& b) {\n            return a.dist_from_origin < b.dist_from_origin;\n        });\n\n        vector<double> end_points;\n        for (const Circle& circle : line.second) {\n            // Check if the circle is exterior to previously considered circles\n            double min_dist = circle.dist_from_origin - circle.r;\n            bool exterior = all_of(end_points.begin(), end_points.end(), [min_dist](double end_point) {\n                return min_dist >= end_point;\n            });\n            if (exterior) {\n                end_points.push_back(circle.dist_from_origin + circle.r);\n            }\n        }\n\n        int local_q = end_points.size();\n        if (local_q > q) {\n            q = local_q;\n            p = 1;\n        } else if (local_q == q) {\n            p++;\n        }\n    }\n\n    fout << m << ' ' << q << ' ' << p << '\\n';\n\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 11257,
  "metadata": {
    "id": 43,
    "examples": [
      {
        "in": "12\n2 6 1\n3 9 1\n4 12 3\n4 4 2\n9 9 2\n10 10 6\n12 12 1\n6 3 1\n10 5 1\n14 7 2\n14 7 1\n12 4 2",
        "out": "4 3 2",
        "explainer": ""
      }
    ],
    "body": "Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \\in \\{1, 2, ..., n\\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  \n\n# Cerinţă\nSă se scrie un program care să se determine:\na) numărul $m$ de drepte distincte; \nb) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; \nc) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.\n\n# Date de intrare\nFişierul de intrare `cerc.in`  conţine:\n$n$\n$x_1\\ y_1\\ r_1$\n...\n$x_n\\ y_n\\ r_n$\t\n- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri\n- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc \n\n# Date de ieşire\nFişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. \n\n# Restricţii şi precizări\n* $1 ≤ n ≤ 2\\ 000$\n* $1 ≤ x_1, x_2, ..., x_n ≤ 1\\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$\n* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte\n* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune\n* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.",
    "header": {
      "problem_id": 43,
      "problem_name": "cerc",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "cerc.in",
      "output_filename": "cerc.out",
      "multiple_solutions": true,
      "original_source": "OJI 2009 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "cerc.in",
      "output": "cerc.out"
    },
    "consoleInteraction": false
  }
}