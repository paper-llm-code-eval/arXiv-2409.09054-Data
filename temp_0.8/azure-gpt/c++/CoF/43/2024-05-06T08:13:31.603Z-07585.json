{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/43/2024-05-06T08:13:31.603Z-07585.log",
  "attemptStart": 1714983211.603,
  "attemptEnd": 1714983320.988,
  "attemptDuration": 109.38499999046326,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\nstruct Circle {\n    int x, y, r;\n};\n\nstruct Slope {\n    int dx, dy;\n    bool operator==(const Slope &other) const {\n        return dx * other.dy == dy * other.dx;\n    }\n};\n\nnamespace std {\n    template <>\n    struct hash<Slope> {\n        std::size_t operator()(const Slope &slope) const {\n            int gcd = std::__gcd(slope.dx, slope.dy);\n            return std::hash<int>()(slope.dx / gcd) ^ std::hash<int>()(slope.dy / gcd);\n        }\n    };\n}\n\nint main() {\n    std::ifstream in(\"cerc.in\");\n    std::ofstream out(\"cerc.out\");\n\n    int n;\n    in >> n;\n\n    std::vector<Circle> circles(n);\n    std::unordered_map<Slope, std::vector<int>> lines;\n\n    for (int i = 0; i < n; ++i) {\n        in >> circles[i].x >> circles[i].y >> circles[i].r;\n        Slope slope{circles[i].x, circles[i].y};\n        lines[slope].push_back(i);\n    }\n\n    int m = lines.size();\n    int q = 0, p = 0;\n\n    for (auto &line : lines) {\n        std::vector<int> &indices = line.second;\n\n        std::sort(indices.begin(), indices.end(), [&](int a, int b) {\n            return circles[a].r < circles[b].r;\n        });\n\n        int current_q = 0;\n        bool can_extend = true;\n\n        for (size_t i = 0; i < indices.size(); ++i) {\n            can_extend = true;\n            for (size_t j = 0; j < i; ++j) {\n                int dx = circles[indices[i]].x - circles[indices[j]].x;\n                int dy = circles[indices[i]].y - circles[indices[j]].y;\n                int distSq = dx * dx + dy * dy;\n                int radSumSq = (circles[indices[i]].r + circles[indices[j]].r) *\n                               (circles[indices[i]].r + circles[indices[j]].r);\n                if (distSq <= radSumSq) {\n                    can_extend = false;\n                    break;\n                }\n            }\n            if (can_extend) current_q++;\n        }\n\n        if (current_q > q) {\n            q = current_q;\n            p = 1;\n        } else if (current_q == q) {\n            p++;\n        }\n    }\n\n    out << m << \" \" << q << \" \" << p << std::endl;\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1854,
  "metadata": {
    "id": 43,
    "examples": [
      {
        "in": "12\n2 6 1\n3 9 1\n4 12 3\n4 4 2\n9 9 2\n10 10 6\n12 12 1\n6 3 1\n10 5 1\n14 7 2\n14 7 1\n12 4 2",
        "out": "4 3 2",
        "explainer": ""
      }
    ],
    "body": "Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \\in \\{1, 2, ..., n\\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  \n\n# Cerinţă\nSă se scrie un program care să se determine:\na) numărul $m$ de drepte distincte; \nb) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; \nc) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.\n\n# Date de intrare\nFişierul de intrare `cerc.in`  conţine:\n$n$\n$x_1\\ y_1\\ r_1$\n...\n$x_n\\ y_n\\ r_n$\t\n- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri\n- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc \n\n# Date de ieşire\nFişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. \n\n# Restricţii şi precizări\n* $1 ≤ n ≤ 2\\ 000$\n* $1 ≤ x_1, x_2, ..., x_n ≤ 1\\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$\n* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte\n* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune\n* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.",
    "header": {
      "problem_id": 43,
      "problem_name": "cerc",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "cerc.in",
      "output_filename": "cerc.out",
      "multiple_solutions": true,
      "original_source": "OJI 2009 XI-XII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "cerc.in",
      "output": "cerc.out"
    },
    "consoleInteraction": false
  }
}