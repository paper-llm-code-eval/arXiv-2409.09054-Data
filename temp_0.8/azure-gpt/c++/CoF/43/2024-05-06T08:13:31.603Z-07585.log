---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cerc.in` and write to `cerc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se desenează $n$ cercuri distincte în plan, numerotate cu numerele de la $1$ la $n$. Pentru fiecare cerc $k$ ($k \in \{1, 2, ..., n\}$) se cunosc: raza cercului, $r_k$, şi coodonatele ($x_k, y_k$) ale centrului cercului, coordonate referitoare la reperul cartezian $xOy$ cu originea în punctul $O$ din plan. Din punctul $O$, se desenează $m$ drepte distincte, astfel încât pentru fiecare dreaptă, dintre cele $m$ desenate, să existe cel puţin un cerc, dintre cele $n$, al cărui centru să fie situat pe această dreaptă şi pentru fiecare cerc desenat, să existe o singură dreaptă, dintre cele $m$ desenate, care să treacă prin centrul lui.  

# Cerinţă
Să se scrie un program care să se determine:
a) numărul $m$ de drepte distincte; 
b) cel mai mare număr $q$ de cercuri, dintre cele $n$, exterioare două câte două, ale căror centre sunt situate pe o aceeaşi dreaptă care trece prin punctul $O$, dintre cele $m$ desenate; 
c) numărul $p$ al dreptelor distincte, dintre cele $m$ desenate, pe care sunt situate centrele a câte $q$ cercuri, dintre cele $n$, exterioare două câte două.

# Date de intrare
Fişierul de intrare `cerc.in`  conţine:
$n$
$x_1\ y_1\ r_1$
...
$x_n\ y_n\ r_n$	
- pe prima linie, o valoare naturală nenulă $n$, reprezentând numărul de cercuri
- următoarele $n$ linii conţin câte trei numere naturale nenule, separate prin câte un spaţiu, care reprezintă coordonatele centrului $(x_1, y_1)$ şi raza $r_1$ ale primului cerc, ..., coordonatele centrului $(x_n, y_n)$ şi raza $r_n$ ale celui de-al $n$-lea cerc 

# Date de ieşire
Fişierul de ieşire `cerc.out` va conţine o singură linie pe care se vor scrie cele trei numere naturale $m$, $q$ şi $p$, separate prin câte un spaţiu. 

# Restricţii şi precizări
* $1 ≤ n ≤ 2\ 000$
* $1 ≤ x_1, x_2, ..., x_n ≤ 1\ 000$ ; $1 ≤ y_1, y_2, ..., y_n ≤ 1\ 000$ ; $1 ≤ r_1, r_2, ..., r_n ≤ 70$
* dacă două cercuri, dintre cele $n$, au centrele în acelaşi punct din plan, atunci razele lor sunt distincte
* două cercuri sunt exterioare dacă nu au niciun punct comun şi nici interioarele lor nu au puncte comune
* Pentru rezolvarea cerinţei a) se acordă $20%$ din punctaj, pentru cerinţa b) $50%$ din punctaj şi pentru cerinţa c) $30%$ din punctaj.

---

Example:
`cerc.in`
```
12
2 6 1
3 9 1
4 12 3
4 4 2
9 9 2
10 10 6
12 12 1
6 3 1
10 5 1
14 7 2
14 7 1
12 4 2
```

`cerc.out`
```
4 3 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <unordered_map>
#include <vector>
#include <algorithm>
#include <numeric>

struct Circle {
    int x, y, r;
};

struct Slope {
    int dx, dy;
    bool operator==(const Slope &other) const {
        return dx * other.dy == dy * other.dx;
    }
};

namespace std {
    template <>
    struct hash<Slope> {
        std::size_t operator()(const Slope &slope) const {
            int gcd = std::__gcd(slope.dx, slope.dy);
            return std::hash<int>()(slope.dx / gcd) ^ std::hash<int>()(slope.dy / gcd);
        }
    };
}

int main() {
    std::ifstream in("cerc.in");
    std::ofstream out("cerc.out");

    int n;
    in >> n;

    std::vector<Circle> circles(n);
    std::unordered_map<Slope, std::vector<int>> lines;

    for (int i = 0; i < n; ++i) {
        in >> circles[i].x >> circles[i].y >> circles[i].r;
        Slope slope{circles[i].x, circles[i].y};
        lines[slope].push_back(i);
    }

    int m = lines.size();
    int q = 0, p = 0;

    for (auto &line : lines) {
        std::vector<int> &indices = line.second;

        std::sort(indices.begin(), indices.end(), [&](int a, int b) {
            return circles[a].r < circles[b].r;
        });

        int current_q = 0;
        bool can_extend = true;

        for (size_t i = 0; i < indices.size(); ++i) {
            can_extend = true;
            for (size_t j = 0; j < i; ++j) {
                int dx = circles[indices[i]].x - circles[indices[j]].x;
                int dy = circles[indices[i]].y - circles[indices[j]].y;
                int distSq = dx * dx + dy * dy;
                int radSumSq = (circles[indices[i]].r + circles[indices[j]].r) *
                               (circles[indices[i]].r + circles[indices[j]].r);
                if (distSq <= radSumSq) {
                    can_extend = false;
                    break;
                }
            }
            if (can_extend) current_q++;
        }

        if (current_q > q) {
            q = current_q;
            p = 1;
        } else if (current_q == q) {
            p++;
        }
    }

    out << m << " " << q << " " << p << std::endl;

    return 0;
}
```

This code snippet should be saved as a `.cpp` file and then compiled with a C++ compiler. It does the following:

1. Reads the number of circles and the circles' information from `cerc.in` file.
2. Maps each circle to a line (slope) using a hash map, where slope is calculated by the circle's center coordinates.
3. Counts the number of unique slopes to determine `m`.
4. For each line, sorts the circles by their radii in ascending order.
5. Checks for the largest number of circles `q` that are mutually external on the same line.
6. Counts the number of lines `p` that have `q` mutually external circles on them.
7. Writes the resulting `m`, `q`, and `p` to `cerc.out` file.

This C++ code is designed to optimize for execution speed by using efficient data structures and minimizing the complexity of nested loops.
