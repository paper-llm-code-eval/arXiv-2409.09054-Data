{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/703/2024-05-06T10:27:28.415Z-07124.log",
  "attemptStart": 1714991248.415,
  "attemptEnd": 1714991301.985,
  "attemptDuration": 53.5699999332428,
  "code": "#include <fstream>\n#include <vector>\n#include <climits>\n#include <cstring>\n\nbool is_slope_number(int n) {\n    int ascending = 0, descending = 0;\n    int prev_digit = n % 10;\n    n /= 10;\n\n    while (n > 0) {\n        int digit = n % 10;\n        if (digit < prev_digit) {\n            ascending = 1;\n        } else if (digit > prev_digit) {\n            descending = 1;\n        }\n        if (ascending && descending) {\n            return false;\n        }\n        prev_digit = digit;\n        n /= 10;\n    }\n    return true;\n}\n\nint main() {\n    std::ifstream in(\"valori-panta.in\");\n    std::ofstream out(\"valori-panta.out\");\n\n    int N;\n    in >> N;\n\n    int num_slope_numbers = 0;\n    int max_slope_value = INT_MIN, min_slope_value = INT_MAX;\n    std::vector<int> max_positions, min_positions;\n\n    for (int i = 0; i < N; ++i) {\n        int number;\n        in >> number;\n        if (is_slope_number(number)) {\n            num_slope_numbers++;\n            if (number > max_slope_value) {\n                max_slope_value = number;\n                max_positions = {i + 1};\n            } else if (number == max_slope_value) {\n                max_positions.push_back(i + 1);\n            }\n            if (number < min_slope_value) {\n                min_slope_value = number;\n                min_positions = {i + 1};\n            } else if (number == min_slope_value) {\n                min_positions.push_back(i + 1);\n            }\n        }\n    }\n\n    out << num_slope_numbers << '\\n';\n    if (num_slope_numbers > 0) {\n        out << max_slope_value;\n        for (int position : max_positions) {\n            out << ' ' << position;\n        }\n        out << '\\n';\n        out << min_slope_value;\n        for (int position : min_positions) {\n            out << ' ' << position;\n        }\n        out << '\\n';\n    } else {\n        out << \"NU EXISTA\\n\";\n    }\n\n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1953,
  "metadata": {
    "id": 703,
    "examples": [
      {
        "in": "6\n126 9621 1212 3678 9231 9621",
        "out": "4\n9621 2 6\n126 1",
        "explainer": ""
      }
    ],
    "body": "Se dă un vector cu $N$ elemente numere naturale (cu maxim $8$ cifre).\n\n# Cerință\n\n* Să se afişeze câte elemente din vector sunt valori-pantă (numere care privite de la stânga sau de la dreapta au cifrele în ordine crescătoare) De exemplu, $136$ şi $931$ sunt valori-pantă.\n* Să se afişeze cea mai mare şi cea mai mică valoare-pantă, precum şi poziţiile pe care se află acestea în vector.\n\n# Date de intrare\n\nPe prima linie a fișierului de intrare `valori-panta.in` se găseste $N$, numărul de valori din vector.\n\nPe cea de-a doua linie se va găsi vectorul de $N$ valori. \n\n# Date de ieșire\n\nPe prima linie a fișierului de ieșire `valori-panta.out` se va găsi un singur număr întreg, numărul de valori-pantă.\n\nPe cea de-a doua linie se va găsi cea mai mare valoare-pantă, urmată de pozițiile unde se află, iar pe cea de-a treia linie, cea mai mică valoare-pantă, urmată de pozițiile unde se află. Dacă sunt $0$ valori-pantă, se va afişa mesajul `NU EXISTA`.\n\n# Restricții și precizări\n\n* $1 \\leq n \\leq 200 \\ 000$;\n* Pentru teste în valoare de $30$ de puncte, $1 \\leq n \\leq 2 \\ 000$;\n* Testele si restricțiile au fost modificate.",
    "header": {
      "problem_id": 703,
      "problem_name": "valori-panta",
      "tags": "[Ad hoc]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "valori-panta.in",
      "output_filename": "valori-panta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 VI: Problema 1 (Modificată)"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "valori-panta.in",
      "output": "valori-panta.out"
    },
    "consoleInteraction": false
  }
}