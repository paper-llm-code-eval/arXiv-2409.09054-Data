{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/883/2024-05-06T18:44:13.877Z-07894.log",
  "attemptStart": 1715021053.877,
  "attemptEnd": 1715021108.717,
  "attemptDuration": 54.83999991416931,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Course {\n    int start;\n    int end;\n};\n\nbool compareByStartTime(const Course &a, const Course &b) {\n    return a.start < b.start;\n}\n\nint maxCourses(vector<Course> &courses, int K) {\n    sort(courses.begin(), courses.end(), [](const Course &a, const Course &b) {\n        return a.end < b.end;\n    });\n    int count = 0;\n    vector<int> roomEndTime(K, 0); // Tracks when each room is available\n    for (Course &course : courses) {\n        for (int &endTime : roomEndTime) {\n            if (endTime <= course.start) {\n                endTime = course.end;\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\n\nint maxCourseDuration(vector<Course> &courses, int K) {\n    // Find the minimum end time among all courses to start the binary search\n    int maxEndTime = 0;\n    for (const auto &course : courses) {\n        maxEndTime = max(maxEndTime, course.end);\n    }\n\n    int left = 1, right = maxEndTime, mid, best = 0;\n    while (left <= right) {\n        mid = left + (right - left) / 2;\n        vector<int> roomEndTime(K, 0);\n        int usedRooms = 0;\n        bool canFit = true;\n\n        for (const auto &course : courses) {\n            if (usedRooms == K && roomEndTime[usedRooms - 1] > course.start) {\n                canFit = false;\n                break;\n            }\n            for (int i = 0; i < K; ++i) {\n                if (roomEndTime[i] <= course.start) {\n                    roomEndTime[i] = course.start + mid;\n                    if (i == usedRooms) {\n                        usedRooms++;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (canFit) {\n            best = mid;\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return best;\n}\n\nint main() {\n    ifstream fin(\"cursuri.in\");\n    ofstream fout(\"cursuri.out\");\n\n    int C, N, K;\n    fin >> C >> N >> K;\n    vector<Course> courses(N);\n    for (int i = 0; i < N; ++i) {\n        fin >> courses[i].start >> courses[i].end;\n    }\n    fin.close();\n\n    if (C == 1) {\n        fout << maxCourses(courses, K) << '\\n';\n    } else if (C == 2) {\n        // Sort the courses by start time for the second part of the problem\n        sort(courses.begin(), courses.end(), compareByStartTime);\n        fout << maxCourseDuration(courses, K) << '\\n';\n    }\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2741,
  "metadata": {
    "id": 883,
    "examples": [
      {
        "in": "1\n4 2\n2 16\n1 3\n3 18\n1 20",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n4 2\n5 12\n9 18\n1 3\n1 7",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Într-o tabără de vară se programează susținerea unor cursuri în $K$ săli de clasă. Sunt $N$ profesori care și-au exprimat dorința de a participa, fiecare dintre ei specificând intervalul de timp [$a_i, b_i$] în care își poate susține cursul. Programarea pe săli a profesorilor trebuie să țină cont de faptul că într-o clasă, la un moment dat, nu poate preda decât un singur profesor.\n\n# Cerință\n\nCunoscându-se faptul că organizatorii doresc susținerea a cât mai multor cursuri, să se determine:\n\n1) Numărul maxim de cursuri care pot fi programate în cele $K$ săli de clasă, ținând cont de restricția indicată.\n2) În dorința de a programa toate cursurile, în cele $K$ săli, organizatorii decid să modifice durata cursurilor, păstrând însă neschimbată ora de început a lor. Astfel, ei hotărăsc ca toate cursurile să dureze un interval egal de timp, care însă nu va depăși durata celui mai lung curs propus inițial de unul dintre cei $N$ profesori. Determinați care poate fi durata maximă pe care o pot avea cursurile în aceste condiții.\n\n# Date de intrare\n\nÎn fișierul de intrare `cursuri.in` se găsește pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe linia a doua se găsește o pereche de numere naturale $N \\ K$, separate printr-un spațiu, reprezentând numărul profesorilor și numărul de săli de clasă. Pe următoarele $N$ linii se găsesc perechi de numere naturale $a_i \\ b_i$, care reprezintă intervalele de timp în care cei $N$ profesori își susțin cursurile. Numerele în cadrul unei linii sunt separate printr-un spațiu.\n\n# Date de ieșire\n\nDacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând numărul maxim de cursuri care pot fi programate în cele K săli de clasă, ținând cont de restricția indicată.\n\nDacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$) din cerințe. În acest caz, fişierul de ieşire `cursuri.out` va conține pe prima linie un număr natural reprezentând durata maximă pe care o pot avea cele $N$ cursuri, astfel încât toate să poată fi susținute în cele $K$ săli disponibile.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq K \\leq 1 \\ 000$;\n* $1 \\leq a_i < b_i \\leq 100 \\ 000$;\n* În cazul cerinței $2$ se garantează că pentru toate testele există soluție\n* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.",
    "header": {
      "problem_id": 883,
      "problem_name": "cursuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "cursuri.in",
      "output_filename": "cursuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "cursuri.in",
      "output": "cursuri.out"
    },
    "consoleInteraction": false
  }
}