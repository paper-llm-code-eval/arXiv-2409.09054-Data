---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pelican.in` and write to `pelican.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o minunată zi de primăvară, $P$ răţuşte au ieşit la plimbare pe lac. Un pelican milităros, care stătea pe mal, a decis să facă instrucţie cu nevinovatele raţe. Pentru aceasta, a cartografiat imediat lacul şi l-a reprezentat ca o matrice cu N linii (numerotate de la $0$ la $N - 1$ de sus în jos) şi $N$ coloane (numerotate de la $0$ la $N - 1$ de la stânga la dreapta). Astfel, poziţia oricărei raţe pe lac poate fi identificată prin linia şi coloana pe care se află raţa. Raţele sunt orientate cu faţa spre una dintre direcţiile Nord, Sud, Est, Vest. Pelicanul a codificat direcţiile $1$, $2$, $3$, $4$ ca în figură.

~[pelican_01.png]

Când pelicanul strigă: “Comanda la mine!” raţele trebuie să execute simultan cele K comenzi pe care le dă pelicanul. Comenzile pelicanului sunt codificate astfel:

* $A \ nr$ – Raţa avansează cu $nr$ poziţii în direcţia spre care este orientată. Dacă avansând depăşeşte marginea tablei de joc va intra pe latura opusă. De exemplu, pe un lac $5$ x $5$, o raţă plasată în poziţia ($1, 3$) cu orientare $1$ (Nord), executând comanda $A \ 3$ se va deplasa astfel: ($1, 3$) $\rarr$ ($0, 3$) $\rarr$ ($4, 3$) $\rarr$ ($3, 3$).
* $R \ nr$ – Raţa se roteşte cu $nr \cdot 90 \degree$ în sens orar, unde $nr \in {1,2,3,4}$. De exemplu, dacă orientarea iniţială a raţei este $1$ (Nord), comanda $R \ 2$ va schimba orientarea spre $3$ (Sud).
* $Z \ nr$ – Raţa zboară pe linia $nr / N$ şi coloana $nr$ mod $N$, păstrând orientarea. Se garantează că $nr / N \in \{0,1, ..., N - 1\}$. De exemplu, pe un lac $5$ x $5$, după executarea comenzii $Z \ 7$, raţa va ajunge pe linia $1$ şi coloana $2$.

# Cerință

Scrieţi un program care, cunoscând poziţia iniţială pe lac a celor $P$ raţe şi succesiunea comenzilor pelicanului, determină poziţia finală a fiecărei raţe.

# Date de intrare

Fișierul de intrare `pelican.in` conţine pe prima linie trei numere naturale $N \ P \ K$, cu semnificaţia din enunţ. Pe următoarele $P$ linii sunt date câte $3$ numere naturale $i \ j \ d$ cu semnificaţia că pe linia $i$ şi coloana $j$ se găseşte o raţă orientată în direcţia $d$. Ultimele $K$ linii conţin cele $K$ comenzi, câte o comandă pe o linie, în formatul specificat în enunţ (un caracter din mulţimea {'A', 'R', 'Z'} şi un număr natural). Valorile scrise pe aceeaşi linie sunt separate de câte un spaţiu.

# Date de ieșire

Fișierul de ieșire `pelican.out` va conţine $P$ linii. Pe linia $i$ va fi scrisă poziţia celei de a $i$-a raţe din fişierul de intrare (linia şi coloana separate printr-un singur spaţiu) după executarea în ordine a celor $K$ comenzi.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq P \leq 10 \ 000$;
* $1 \leq K \leq 100 \ 000$;
* $0 \leq i, j < N$; şi $1 \leq d \leq 4$;
* Mai multe raţe pot ocupa aceeaşi poziţie.
* Se garantează că datele din fişierul de intrare sunt corecte.
* Pentru teste valorând $76$ de puncte fişierul de intrare nu conţine comanda $Z$.
* Pentru teste valorând $20$ de puncte $N \leq 100$, $P \leq 100$ şi $K \leq 1 000$.
* Pentru teste valorând $36$ de puncte $N > 100$, $1 \ 000 \leq P \leq 5 000$; şi $K \leq 50 \ 000$.

---

Example:
`pelican.in`
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```

`pelican.out`
```
2 4
4 4
2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

const int MAXN = 1000;
int pos[MAXN][MAXN][2];

int main() {
    std::ifstream fin("pelican.in");
    std::ofstream fout("pelican.out");

    int N, P, K, i, j, d, cmd_num;
    char cmd;

    fin >> N >> P >> K;
    for (int p = 0; p < P; ++p) {
        fin >> i >> j >> d;
        pos[i][j][0] = d; // Store initial direction
        pos[i][j][1] = p; // Store duck index
    }

    while (K--) {
        fin >> cmd >> cmd_num;
        if (cmd == 'A') {
            for (i = 0; i < N; ++i) {
                for (j = 0; j < N; ++j) {
                    if (pos[i][j][0]) {
                        int di = ((pos[i][j][0] - 1) % 2) * (2 - pos[i][j][0]);
                        int dj = ((pos[i][j][0] - 2) % 2) * (3 - pos[i][j][0]);
                        int new_i = (i + di * cmd_num + N * cmd_num) % N;
                        int new_j = (j + dj * cmd_num + N * cmd_num) % N;
                        pos[new_i][new_j][0] = pos[i][j][0];
                        pos[new_i][new_j][1] = pos[i][j][1];
                        pos[i][j][0] = 0;
                    }
                }
            }
        } else if (cmd == 'R') {
            for (i = 0; i < N; ++i) {
                for (j = 0; j < N; ++j) {
                    if (pos[i][j][0]) {
                        pos[i][j][0] = (pos[i][j][0] + cmd_num - 1) % 4 + 1;
                    }
                }
            }
        } else if (cmd == 'Z') {
            int target_i = cmd_num / N;
            int target_j = cmd_num % N;
            for (i = 0; i < N; ++i) {
                for (j = 0; j < N; ++j) {
                    if (pos[i][j][0]) {
                        pos[target_i][target_j][0] = pos[i][j][0];
                        pos[target_i][target_j][1] = pos[i][j][1];
                        pos[i][j][0] = 0;
                        break; // Since only one duck will move for command Z
                    }
                }
            }
        }
    }

    // Output final positions
    for (i = 0; i < N; ++i)
        for (j = 0; j < N; ++j)
            if (pos[i][j][0])
                fout << i << ' ' << j << '\n';

    fin.close();
    fout.close();
    return 0;
}
```
Note: This solution assumes that at most one duck can occupy a given position at any time. However, the problem statement does allow for multiple ducks to occupy the same position. Additional logic would be required to handle multiple ducks per position correctly.

Unfortunately, this code will not work as expected. It does not correctly handle the case where multiple ducks occupy the same position, and it also doesn't follow the instruction to print the final position of ducks in the order they appear in the input file. Please disregard the code above as it fails to meet the challenge requirements.
---------- user ----------


Program result did not match expected result.
Input data:
```
5 3 4
1 1 2
2 3 1
3 1 4
A 3
R 3
A 1
A 3
```
Expected output:
```
2 4
4 4
2 3
```
Found output:
```
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial code provided has several issues:

- It assumes there is at most one duck per position, which is incorrect based on the problem description.
- It overwrites ducks' positions without properly tracking their original indices, causing loss of information.
- The final output does not account for ducks in the order they appeared in the input file.
- Rotation logic is incorrect because it does not handle the `cmd_num` correctly.
- The movement logic does not handle warping around the edges of the lake properly.

Let's write a corrected version that accurately tracks each duck's position and orientation, processes each command correctly, and outputs the final positions of the ducks in the order they were given in the input file.

```cpp
#include <fstream>
#include <vector>

struct Duck {
    int x, y, dir;
};

int main() {
    std::ifstream fin("pelican.in");
    std::ofstream fout("pelican.out");

    int N, P, K;
    fin >> N >> P >> K;

    std::vector<Duck> ducks(P);
    for (int p = 0; p < P; ++p) {
        fin >> ducks[p].x >> ducks[p].y >> ducks[p].dir;
    }

    while (K--) {
        char cmd;
        int cmd_num;
        fin >> cmd >> cmd_num;

        for (auto& duck : ducks) {
            if (cmd == 'A') {
                switch (duck.dir) {
                    case 1: // North
                        duck.x = (duck.x - cmd_num + N) % N;
                        break;
                    case 2: // East
                        duck.y = (duck.y + cmd_num) % N;
                        break;
                    case 3: // South
                        duck.x = (duck.x + cmd_num) % N;
                        break;
                    case 4: // West
                        duck.y = (duck.y - cmd_num + N) % N;
                        break;
                }
            } else if (cmd == 'R') {
                duck.dir = (duck.dir + cmd_num - 1) % 4 + 1;
            } else if (cmd == 'Z') {
                duck.x = cmd_num / N;
                duck.y = cmd_num % N;
            }
        }
    }

    for (const auto& duck : ducks) {
        fout << duck.x << " " << duck.y << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

This version of the code uses a `Duck` struct to keep track of each duck's position (`x`, `y`) and direction (`dir`). Then, for each command, it modifies the position or direction of every duck accordingly. For 'A' (advance) commands, it properly handles wrapping around the edges of the lake. For 'R' (rotate) commands, it uses modulo arithmetic to update the direction correctly. For 'Z' (teleport) commands, it moves the ducks to the specified position. Finally, it prints the ducks' positions in the input file order, as required.
