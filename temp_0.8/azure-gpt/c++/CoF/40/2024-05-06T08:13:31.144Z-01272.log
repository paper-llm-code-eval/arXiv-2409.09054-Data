---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ubuntzei.in` and write to `ubuntzei.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Trei ubuntzei au hotărât ca anul acesta să petreacă ziua de 1 Mai pe malul Mării Negre împreună cu prietenii lor, motiv pentru care au pus la cale o excursie pe un traseu care să plece din oraşul lor Cluj-Napoca spre Vama Veche, unde nisipul îi aşteaptă. 

În ţara ubuntzeilor există $N$ localităţi, numerotate de la $1$ la $N$, legate între ele prin $M$ şosele bidirecţionale de diferite lungimi. Localitatea de plecare a ubuntzeilor, oraşul Cluj-Napoca, este numerotată cu $1$, iar localitatea destinaţie, Vama Veche, cu $N$. Între oricare două localităţi există cel mult o şosea. Fiecare şosea uneşte două localităţi distincte şi se poate călători între oricare două localităţi circulând numai pe şosele. 

Prietenii ubuntzeilor locuiesc în $K$ localităţi distincte, diferite de Cluj-Napoca şi Vama Veche. Pentru a nu călători singuri, cei trei ubuntzei vor să treacă prin cele $K$ localităţi în care locuiesc prietenii lor, şi apoi, împreună cu aceştia, să-şi continue excursia către mare.

Nerăbdători să ajungă cât mai repede la destinaţie, ubuntzeii s-au hotărât să îşi stabilească un traseu de lungime minimă care să treacă prin toate cele $K$ localităţi. 

# Cerinţă
Scrieţi un program care să determine, pentru ubuntzei, lungimea minimă $L$ a unui traseu de la Cluj-Napoca la Vama Veche ce trece prin toate cele $K$ localităţi.

# Date de intrare
Prima linie a fişierului de intrare `ubuntzei.in` conţine două numere naturale $N\ M$, separate printr-un spaţiu, cu semnificaţia din enunţ. A doua linie a fişierului conţine $K + 1$ numere naturale distincte: $K\ C_1\ C_2\ ...\ C_K$, separate prin câte un spaţiu, $K$ având semnificaţia din enunţ iar $C_1, C_2, ..., C_K$ reprezentând cele $K$ localităţi în care locuiesc prietenii. Fiecare din următoarele $M$ linii conţine câte trei numere naturale $x\ y\ z$, separate prin câte un spaţiu, reprezentând o şosea care leagă localitatea $x$ de localitatea $y$ şi are lungimea $z$.

# Date de ieşire
Fişierul de ieşire `ubuntzei.out` va conţine numărul natural $L$ reprezentând lungimea minimă căutată.

# Restricţii şi precizări
* $1 ≤ N ≤ 2\ 000$
* $1 ≤ M ≤ 10\ 000$
* $0 ≤ K ≤ \min\{15, N – 2\}$
* $2 ≤ C_1, C_2, ..., C_K ≤ N – 1$
* Traseul poate trece de mai multe ori prin oricare localitate.
* Costul unei muchii va fi cuprins între $1$ şi $10^5$.
* Pentru primele $20%$ din teste $K = 0$.
* Pentru primele $50%$ din teste $K ≤ 10$.
* Pentru primele $70%$ din teste $N ≤ 200$.

---

Example:
`ubuntzei.in`
```
4 5 
1 2
1 2 1
1 3 1
2 3 1
2 4 4
3 4 2
```

`ubuntzei.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <bitset>
#include <algorithm>

using namespace std;

const int MAXN = 2005;
const int MAXK = 20;
const int INF = 1000000000;

int N, M, K, C[MAXK], dist[MAXN][MAXN], dp[1 << MAXK][MAXK];
vector<pair<int, int>> graph[MAXN];

void compute_shortest_paths() {
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) dist[i][j] = INF;
        dist[i][i] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, i});
        while (!pq.empty()) {
            int d = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            if (d > dist[i][node]) continue;
            for (auto &edge : graph[node]) {
                int next = edge.first;
                int cost = edge.second;
                if (dist[i][node] + cost < dist[i][next]) {
                    dist[i][next] = dist[i][node] + cost;
                    pq.push({dist[i][next], next});
                }
            }
        }
    }
}

int main() {
    ifstream fin("ubuntzei.in");
    ofstream fout("ubuntzei.out");

    fin >> N >> M;
    fin >> K;
    for (int i = 0; i < K; ++i) fin >> C[i];
    C[K] = N;

    int x, y, z;
    for (int i = 0; i < M; ++i) {
        fin >> x >> y >> z;
        graph[x].emplace_back(y, z);
        graph[y].emplace_back(x, z);
    }

    fin.close();

    compute_shortest_paths();

    for (int mask = 0; mask < (1 << K); ++mask)
        for (int i = 0; i < K; ++i)
            dp[mask][i] = INF;

    for (int i = 0; i < K; ++i) 
        dp[1 << i][i] = dist[1][C[i]];

    for (int mask = 1; mask < (1 << K); ++mask) {
        for (int i = 0; i < K; ++i) {
            if (!(mask & (1 << i))) continue;
            for (int j = 0; j < K; ++j) {
                if (mask & (1 << j)) continue;
                dp[mask | (1 << j)][j] = min(dp[mask | (1 << j)][j], dp[mask][i] + dist[C[i]][C[j]]);
            }
        }
    }

    int result = INF;
    int final_mask = (1 << K) - 1;
    for (int i = 0; i < K; ++i) {
        result = min(result, dp[final_mask][i] + dist[C[i]][N]);
    }

    fout << result << '\n';

    fout.close();

    return 0;
}
```

This solution reads the input from `ubuntzei.in` and writes the output to `ubuntzei.out`, as specified. It uses a Dijkstra algorithm for each localitate to compute shortest paths between all pairs, then employs bitmask dynamic programming to find the minimum path that passes through all K localitates and ends in Vama Veche.
