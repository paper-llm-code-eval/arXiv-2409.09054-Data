---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ubuntzei.in` and write to `ubuntzei.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Trei ubuntzei au hotărât ca anul acesta să petreacă ziua de 1 Mai pe malul Mării Negre împreună cu prietenii lor, motiv pentru care au pus la cale o excursie pe un traseu care să plece din oraşul lor Cluj-Napoca spre Vama Veche, unde nisipul îi aşteaptă. 

În ţara ubuntzeilor există $N$ localităţi, numerotate de la $1$ la $N$, legate între ele prin $M$ şosele bidirecţionale de diferite lungimi. Localitatea de plecare a ubuntzeilor, oraşul Cluj-Napoca, este numerotată cu $1$, iar localitatea destinaţie, Vama Veche, cu $N$. Între oricare două localităţi există cel mult o şosea. Fiecare şosea uneşte două localităţi distincte şi se poate călători între oricare două localităţi circulând numai pe şosele. 

Prietenii ubuntzeilor locuiesc în $K$ localităţi distincte, diferite de Cluj-Napoca şi Vama Veche. Pentru a nu călători singuri, cei trei ubuntzei vor să treacă prin cele $K$ localităţi în care locuiesc prietenii lor, şi apoi, împreună cu aceştia, să-şi continue excursia către mare.

Nerăbdători să ajungă cât mai repede la destinaţie, ubuntzeii s-au hotărât să îşi stabilească un traseu de lungime minimă care să treacă prin toate cele $K$ localităţi. 

# Cerinţă
Scrieţi un program care să determine, pentru ubuntzei, lungimea minimă $L$ a unui traseu de la Cluj-Napoca la Vama Veche ce trece prin toate cele $K$ localităţi.

# Date de intrare
Prima linie a fişierului de intrare `ubuntzei.in` conţine două numere naturale $N\ M$, separate printr-un spaţiu, cu semnificaţia din enunţ. A doua linie a fişierului conţine $K + 1$ numere naturale distincte: $K\ C_1\ C_2\ ...\ C_K$, separate prin câte un spaţiu, $K$ având semnificaţia din enunţ iar $C_1, C_2, ..., C_K$ reprezentând cele $K$ localităţi în care locuiesc prietenii. Fiecare din următoarele $M$ linii conţine câte trei numere naturale $x\ y\ z$, separate prin câte un spaţiu, reprezentând o şosea care leagă localitatea $x$ de localitatea $y$ şi are lungimea $z$.

# Date de ieşire
Fişierul de ieşire `ubuntzei.out` va conţine numărul natural $L$ reprezentând lungimea minimă căutată.

# Restricţii şi precizări
* $1 ≤ N ≤ 2\ 000$
* $1 ≤ M ≤ 10\ 000$
* $0 ≤ K ≤ \min\{15, N – 2\}$
* $2 ≤ C_1, C_2, ..., C_K ≤ N – 1$
* Traseul poate trece de mai multe ori prin oricare localitate.
* Costul unei muchii va fi cuprins între $1$ şi $10^5$.
* Pentru primele $20%$ din teste $K = 0$.
* Pentru primele $50%$ din teste $K ≤ 10$.
* Pentru primele $70%$ din teste $N ≤ 200$.

---

Example:
`ubuntzei.in`
```
4 5 
1 2
1 2 1
1 3 1
2 3 1
2 4 4
3 4 2
```

`ubuntzei.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

const int MAX_N = 2000;
const int MAX_K = 16;
const int INF = 1e9 + 5;

int dist[MAX_N][MAX_N];
int dp[1 << MAX_K][MAX_K];
vector<pair<int, int>> graph[MAX_N];

void dijkstra(int source, int n) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.emplace(0, source);
    fill(dist[source], dist[source] + n, INF);
    dist[source][source] = 0;

    while (!pq.empty()) {
        int d = pq.top().first;
        int u = pq.top().second;
        pq.pop();

        if (dist[source][u] < d) continue;

        for (auto& edge : graph[u]) {
            int v = edge.first;
            int w = edge.second;

            if (dist[source][v] > dist[source][u] + w) {
                dist[source][v] = dist[source][u] + w;
                pq.emplace(dist[source][v], v);
            }
        }
    }
}

int main() {
    ifstream fin("ubuntzei.in");
    ofstream fout("ubuntzei.out");

    int N, M, K;
    fin >> N >> M;
    fin >> K;
    vector<int> friends(K + 2);
    for (int i = 1; i <= K; ++i) {
        fin >> friends[i];
    }
    friends[0] = 1; // Start city
    friends[K + 1] = N; // Destination city

    for (int i = 0; i < M; ++i) {
        int x, y, z;
        fin >> x >> y >> z;
        graph[x - 1].emplace_back(y - 1, z);
        graph[y - 1].emplace_back(x - 1, z);
    }

    for (int i = 0; i <= K + 1; ++i) {
        dijkstra(friends[i] - 1, N);
    }

    for (int i = 0; i < (1 << K); ++i) {
        fill(dp[i], dp[i] + K, INF);
    }

    for (int i = 0; i < K; ++i) {
        dp[1 << i][i] = dist[friends[0] - 1][friends[i + 1] - 1];
    }

    for (int mask = 1; mask < (1 << K); ++mask) {
        for (int i = 0; i < K; ++i) {
            if (!(mask & (1 << i))) continue;
            for (int j = 0; j < K; ++j) {
                if (mask & (1 << j)) continue;
                int nextMask = mask | (1 << j);
                dp[nextMask][j] = min(dp[nextMask][j], dp[mask][i] + dist[friends[i + 1] - 1][friends[j + 1] - 1]);
            }
        }
    }

    int answer = INF;
    for (int i = 0; i < K; ++i) {
        answer = min(answer, dp[(1 << K) - 1][i] + dist[friends[i + 1] - 1][friends[K + 1] - 1]);
    }

    fout << answer << '\n';

    fin.close();
    fout.close();

    return 0;
}
```
This solution uses Dijkstra's algorithm to precompute all pairwise shortest paths between the cities where friends live, Cluj-Napoca, and Vama Veche. It then uses the bit mask dynamic programming approach to find the shortest path that visits all K cities where friends live. The time complexity is O(N^2 log N + K^2 2^K), which is efficient enough for the given constraints.
