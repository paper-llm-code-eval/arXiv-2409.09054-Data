---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `colaj.in` and write to `colaj.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

La etapa finală a **_Concursului pe Echipe al Micilor Artişti_**, pe primul loc s-au clasat două echipe $A$ şi $B$, cu acelaşi punctaj. Comisia de Evaluare, pentru a le departaja, a introdus o nouă probă de baraj care vizează atât talentul copiilor, cât şi isteţimea lor. 

Astfel, echipa $A$ trebuie să realizeze un colaj alb-negru având la dispoziţie o planşă dreptunghiulară de culoare albă şi n dreptunghiuri de culoare neagră. Membrii acestei echipe vor trebui să lipească pe planşă toate dreptunghiurile, cu laturile paralele cu laturile planşei. Pot exista şi dreptunghiuri lipite în interiorul altui dreptunghi, sau dreptunghiuri care se intersectează, sau dreptunghiuri cu laturi pe laturile planşei, precum şi suprafeţe din planşă neacoperite cu dreptunghiuri. 

După ce aşează toate dreptunghiurile, membrii echipei $A$ trebuie să comunice echipei $B$ numărul $n$ de dreptunghiuri negre primite, lungimea m a laturii orizontale a planşei, lungimea $p$ a laturii verticale a planşei, şi coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi de pe planşă (coordonate referitoare la reperul cartezian $xOy$ cu originea $O$ în colţul din stânga-jos a planşei şi cu axa de coordonate $Ox$, respectiv $Oy$, pe dreapta suport a laturii orizontale, respectiv a laturii verticale a planşei). 

Pentru a câştiga concursul, echipa $B$ trebuie să ghicească numărul zonelor continue maximale de culoare albă, conţinute de colajul realizat de echipa $A$. O zonă albă este considerată continuă dacă oricare ar fi două puncte $P, Q$ din zona respectivă, se poate uni punctul $P$ de punctul $Q$ printr-o linie dreaptă sau frântă care să nu intersecteze interiorul nici unui dreptunghi negru. O zonă albă continuă este considerată maximală dacă nu există o altă zonă albă continuă de arie mai mare care să includă zona respectivă.

# Cerinţă

Scrieţi un program care să citească numărul n al dreptunghiurilor negre primite de echipa $A$, lungimile $m$ şi $p$ ale laturilor planşei, coordonatele vârfurilor din stânga-jos şi dreapta-sus ale fiecărui dreptunghi negru primit, şi care să determine numărul zonelor continue maximale de culoare albă  existente în colajul realizat de echipa $A$.

# Date de intrare


Fişierul de intrare `colaj.in` conţine:
- pe prima linie, o valoare naturală $n$, reprezentând numărul de dreptunghiuri negre date echipei $A$
-	pe a doua linie, $2$ numere naturale, separate prin spaţiu, reprezentând lungimile laturilor planşei
-	următoarele $n$ linii conţin câte patru numere naturale, separate prin câte un spaţiu, care reprezintă coordonatele $(a_1,b_1)$ şi $(c_1,d_1)$ ale vârfurilor din stânga-jos şi dreapta-sus ale primului dreptunghi,..., coordonatele $(a_n,b_n)$ şi $(c_n,d_n)$ ale vârfurilor din stânga-jos şi dreapta-sus ale celui de-al $n$-lea dreptunghi. 


# Date de ieșire


Fişierul de ieşire `colaj.out` va conţine o singură linie pe care se va scrie un singur număr natural reprezentând numărul zonelor continue maximale de culoare albă, conţinute de colaj.

# Restricții și precizări

* $1 \leq n \leq 100$
* $a_1 < c_1 \leq m, \ a_2 < c_2 \leq m, ..., \ a_n < c_n \leq m$
* $b_1 < d_1 \leq p, \ b_2 < d_2 \leq p, ..., \ b_n < d_n \leq p$
* Toate coordonatele vârfurilor dreptunghiurilor şi lungimile laturilor planşei sunt numere naturale, $0<m,p<8 \ 000$ 
* Dacă $(x,y)$ şi $(z,t)$ sunt coordonatele a două vârfuri din două dreptunghiuri distincte, atunci: $x≠z$ şi $y≠t$.
* În $40\%$ din teste:  $n < 30,  m \leq 180,  p \leq 180$
* în $40\%$ din teste: $70 \leq n \leq 100, 180 < p < 1 \ 000, 180 < m < 1 \ 000$
* în $20\%$ din teste: $50 < n < 80, 7 \ 000 < m < 8 \ 000, 7 \ 000 < p < 8 \ 000$

---

Example:
`colaj.in`
```
7
17 16
1 1 10 5
2 6 8 8
0 9 17 15
3 2 4 11
5 3 6 12
7 4 12 13
14 10 16 14
```

`colaj.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Rectangle {
    int x1, y1, x2, y2;
};

ifstream fin("colaj.in");
ofstream fout("colaj.out");

vector<int> compress(vector<int> &coords, int limit) {
    sort(coords.begin(), coords.end());
    coords.erase(unique(coords.begin(), coords.end()), coords.end());
    for (int &v : coords) {
        int rank = lower_bound(coords.begin(), coords.end(), v) - coords.begin();
        v = rank;
    }
    return coords;
}

void fillGrid(vector<vector<int>> &grid, const vector<Rectangle> &rectangles, const vector<int> &xC, const vector<int> &yC) {
    for (const auto &rect : rectangles) {
        for (int i = rect.x1; i < rect.x2; ++i) {
            for (int j = rect.y1; j < rect.y2; ++j) {
                grid[i][j] = 1;
            }
        }
    }
}

void dfs(vector<vector<int>> &grid, int x, int y, int maxX, int maxY) {
    if (x < 0 || x >= maxX || y < 0 || y >= maxY || grid[x][y] != 0) return;
    grid[x][y] = 1;
    dfs(grid, x - 1, y, maxX, maxY);
    dfs(grid, x + 1, y, maxX, maxY);
    dfs(grid, x, y - 1, maxX, maxY);
    dfs(grid, x, y + 1, maxX, maxY);
}

int countWhiteAreas(vector<vector<int>> &grid, int maxX, int maxY) {
    int count = 0;
    for (int i = 0; i < maxX; ++i) {
        for (int j = 0; j < maxY; ++j) {
            if (grid[i][j] == 0) {
                dfs(grid, i, j, maxX, maxY);
                count++;
            }
        }
    }
    return count;
}

int main() {
    int n, m, p;
    fin >> n >> m >> p;
    vector<int> xCoords, yCoords;
    vector<Rectangle> rectangles(n);

    // Read rectangles and store unique x and y coordinates for compression
    for (int i = 0; i < n; ++i) {
        fin >> rectangles[i].x1 >> rectangles[i].y1 >> rectangles[i].x2 >> rectangles[i].y2;
        xCoords.push_back(rectangles[i].x1);
        yCoords.push_back(rectangles[i].y1);
        xCoords.push_back(rectangles[i].x2);
        yCoords.push_back(rectangles[i].y2);
    }

    // Add the boundaries
    xCoords.push_back(0);
    yCoords.push_back(0);
    xCoords.push_back(m);
    yCoords.push_back(p);

    // Compress the coordinates
    xCoords = compress(xCoords, m);
    yCoords = compress(yCoords, p);

    // Update rectangles to compressed coordinates
    for (auto &rect : rectangles) {
        rect.x1 = lower_bound(xCoords.begin(), xCoords.end(), rect.x1) - xCoords.begin();
        rect.y1 = lower_bound(yCoords.begin(), yCoords.end(), rect.y1) - yCoords.begin();
        rect.x2 = lower_bound(xCoords.begin(), xCoords.end(), rect.x2) - xCoords.begin();
        rect.y2 = lower_bound(yCoords.begin(), yCoords.end(), rect.y2) - yCoords.begin();
    }

    // Create the grid
    vector<vector<int>> grid(xCoords.size(), vector<int>(yCoords.size(), 0));

    // Fill the grid with the rectangles
    fillGrid(grid, rectangles, xCoords, yCoords);

    // Count the white areas
    int whiteAreas = countWhiteAreas(grid, xCoords.size(), yCoords.size());

    // Write the result
    fout << whiteAreas << "\n";

    fin.close();
    fout.close();
    return 0;
}
```
This code first compresses the coordinates to handle the potential large dimensions, then it fills a grid representing the plane with the black rectangles and finally performs a depth-first search to count the maximal white areas.
