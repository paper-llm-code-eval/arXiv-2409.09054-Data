---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator cibernetic se fac experimente cu roboți. Pe o bandă de lucru se află așezate unul lângă altul, $N$ cuburi galbene și albastre, numeroate în ordine cu valori de la $1$ la $N$. Pentru fiecare cub se cunoaște latura acestuia, exprimată în centimetri, și culoarea, codificată prin simbolul $g$ (pentru galben) sau $a$ (pentru albastru).


~[turnuri-1.png|align=right|width=30%]

Un robot inteligent este programat să construiască turnuri prin așezarea cuburilor unul peste altul. El se află în fața benzii de lucru, analizează fiecare cub în ordine, de la primul la ultimul, și procedează astfel:
* dacă este primul cub, îl lasă la locul lui pe bandă;
* așază cubul numerotat cu $K$ peste cubul numerotat cu $K-1$ doar dacă el are culoarea diferită și latura mai mică decât cubul $K-1$. Această operație se efectuează în cazul în care cubul $K-1$ se află deja într-un turn construit anterior sau dacă el a rămas în poziția inițială. În cazul în care cubul $K$ nu poate fi așezat peste cubul $K-1$, el rămâne la locul lui.


# Cerință

Știind că un turn poate fi format din cel puțin un cub, scrieți un program care să determine:

1. numărul final $T$ al turnurilor de pe bandă și $H$, înălțimea celui mai înalt turn care se poate forma, exprimată în centimetri;
2. cel mai mare număr de cuburi Nmax ce pot forma un turn, dacă cele $N$ cuburi ar putea fi rearanjate inițial pe bandă, unul lângă altul.

# Date de intrare

Fișierul de intrare `turnuri.in` conține:

* pe prima linie un număr natural $C$ care reprezintă numărul cerinței și poate fi $1$ sau $2$.
* pe cea de-a doua linie un număr natural $N$ ce reprezintă numărul cuburilor de pe bandă;
* pe fiecare dintre următoarele $N$ linii, câte un număr natural care reprezintă latura unui cub, urmat de un spațiu și simbolul $g$ sau $a$, pentru codificarea culorii cubului.

# Date de ieșire

În fișierul de ieșire `turnuri.out` va conține pentru cerința $1$ pe prima linie două valori, separate printr-un spațiu, ce reprezintă $T$ și $H$. Pentru cerința $2$ fișierul va conține pe prima linie numărul $Nmax$.

# Restricții și precizări

* $1 \leq N \leq 10 \ 000$ și $1 \leq$ latura unui cub $\leq 500 \ 000$;
* nu există două cuburi cu laturi egale;
* se acordă $10$ puncte din oficiu. Pentru rezolvarea corectă a primei cerințe se acordă $30$ de puncte, pentru rezolvarea corectă a celei de-a doua cerințe se acordă $60$ de puncte.

---

Example:
`turnuri.in`
```
1
6
18 a
13 g
15 a
10 a
8 g
2 a
```

`turnuri.out`
```
3 31
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <stack>
#include <algorithm>

using namespace std;

struct Cube {
    int size;
    char color;
};

int main() {
    ifstream fin("turnuri.in");
    ofstream fout("turnuri.out");

    int C, N;
    fin >> C >> N;
    
    vector<Cube> cubes(N);
    for (int i = 0; i < N; ++i) {
        fin >> cubes[i].size >> cubes[i].color;
    }
    fin.close();
    
    if (C == 1) {
        int T = 0, H = 0, currentHeight = 0;
        stack<Cube> s;
        
        for (const auto &cube : cubes) {
            while (!s.empty() && (s.top().color == cube.color || s.top().size <= cube.size)) {
                currentHeight -= s.top().size;
                s.pop();
            }
            s.push(cube);
            currentHeight += cube.size;
            H = max(H, currentHeight);
            T = max(T, static_cast<int>(s.size()));
        }
        
        fout << T << ' ' << H << '\n';
    } else if (C == 2) {
        vector<int> dp(N + 1, 1);
        int Nmax = 0;
        
        sort(cubes.begin(), cubes.end(), [](const Cube &a, const Cube &b) {
            return a.size < b.size;
        });
        
        for (int i = 1; i < N; ++i) {
            for (int j = 0; j < i; ++j) {
                if (cubes[i].color != cubes[j].color && cubes[i].size != cubes[j].size) {
                    dp[i] = max(dp[i], dp[j] + 1);
                }
            }
            Nmax = max(Nmax, dp[i]);
        }
        
        fout << Nmax << '\n';
    }

    fout.close();

    return 0;
}
```

The code is structured to read from "turnuri.in" using `ifstream` and write to "turnuri.out" using `ofstream`. It handles the two distinct tasks based on the input value of `C`.

For task 1, it uses a stack to construct towers, keeping track of the height and count of towers. It outputs the final count `T` and the maximum height `H`.

For task 2, it uses dynamic programming with a sort operation to find the longest increasing subsequence of the cubes, alternating in color. It outputs the maximum number `Nmax` of cubes that can form a tower.

Please note that the above code is designed to be efficient and follows the restrictions and requirements of the problem. However, the efficiency could further depend on the specific C++ compiler optimizations and the machine it runs on.
