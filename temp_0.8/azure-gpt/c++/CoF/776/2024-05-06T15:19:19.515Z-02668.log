---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

using namespace std;

ifstream fin("culori.in");
ofstream fout("culori.out");

int n, m, t;
vector<vector<char>> aquarium;

void read_input() {
    fin >> n >> m >> t;
    aquarium.resize(n, vector<char>(m));
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> aquarium[i][j];
        }
    }
}

vector<vector<char>> simulate_a_day(const vector<vector<char>>& current) {
    vector<vector<char>> next(n, vector<char>(m, 'a'));
    int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
    int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int red_count = 0, blue_count = 0;
            for (int k = 0; k < 8; ++k) {
                int ni = i + dx[k], nj = j + dy[k];
                if (ni >= 0 && ni < n && nj >= 0 && nj < m) {
                    current[ni][nj] == 'r' ? ++red_count : ++blue_count;
                }
            }
            if (red_count > blue_count) {
                next[i][j] = 'r';
            } else if (blue_count > red_count) {
                next[i][j] = 'a';
            } else {
                next[i][j] = current[i][j];  // Same color if equal
            }
        }
    }

    return next;
}

void write_output(const vector<vector<char>>& result) {
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fout << result[i][j];
        }
        fout << '\n';
    }
}

int main() {
    read_input();

    for (int day = 0; day < t; ++day) {
        aquarium = simulate_a_day(aquarium);
    }

    write_output(aquarium);

    fin.close();
    fout.close();

    return 0;
}
```
This solution reads the input from `culori.in`, processes the changes for `t` days, and writes the output to `culori.out` while respecting all the given constraints and using fast file I/O operations.
