---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

using namespace std;

// Directions to move in the grid.
const int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
const int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};

void updateColor(vector<vector<char>>& aquarium, int n, int m) {
    // Create a copy of the current state to hold the updated colors.
    auto new_aquarium = aquarium;

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            int red_count = 0, blue_count = 0;

            // Count the neighboring colors.
            for (int k = 0; k < 8; ++k) {
                int ni = i + dx[k], nj = j + dy[k];

                if (ni >= 0 && ni < n && nj >= 0 && nj < m) {
                    if (aquarium[ni][nj] == 'r') ++red_count;
                    else ++blue_count;
                }
            }

            // Update the color according to the rules.
            if (red_count > blue_count) new_aquarium[i][j] = 'r';
            else if (blue_count > red_count) new_aquarium[i][j] = 'a';
        }
    }

    // Transfer the new colors back to the original state.
    aquarium.swap(new_aquarium);
}

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    int n, m, t;
    fin >> n >> m >> t;
    vector<vector<char>> aquarium(n, vector<char>(m));

    // Read the colors of the fish.
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> aquarium[i][j];
        }
    }

    // Update the colors t times.
    for (int time = 0; time < t; ++time) {
        updateColor(aquarium, n, m);
    }

    // Output the final colors of the fish.
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fout << aquarium[i][j];
        }
        fout << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

This code reads the input from `culori.in`, simulates the color changes of the fish in the aquariums for `t` time steps, and writes the results to `culori.out`. The color of each fish is updated based on the majority of its neighbors' colors, or it retains its original color in case of a tie. The I/O operations use file streams (`ifstream` and `ofstream`) instead of standard I/O (`cin`, `cout`) or C-style I/O (`printf()`, `scanf()`), as stipulated in the challenge requirements.
