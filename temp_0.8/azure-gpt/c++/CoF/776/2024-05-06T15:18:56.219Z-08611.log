---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o cameră sunt aşezate $n \cdot m$ acvarii identice, pe $n$ rânduri, câte $m$ pe fiecare rând, unul lângă altul. În fiecare acvariu se află un singur peşte. Peştele poate fi de culoare roşie (culoare codificată cu $r$) sau albastră (codificată cu $a$). La fiecare moment de timp $t = 1,2,3,\dots$, peştii îşi modifică simultan culoarea astfel: fiecare peşte se colorează în culoarea pe care au avut-o la momentul $t-1$ majoritatea peştilor din acvariile învecinate (ca în desenul alăturat, sunt cel mult $8$ acvarii vecine notate cu $V_1,V_2,V_3,\dots,V_8$). În cazul în care numărul peştilor vecini roşii este egal cu numărul peştilor vecini albaştri, peştele studiat îşi va păstra culoarea. 

~[culori.png|width=17em]

# Cerință

Scrieţi un program care să citească numerele naturale $n,m,t$ şi cele $n \cdot m$ coduri ale culorilor peştilor (cele de la momentul iniţial $t=0$) şi care să determine şi să afişeze codurile culorilor peştilor de la momentul $t$.

# Date de intrare

Fișierul `culori.in` contine:

- pe prima linie numerele naturale $n \ m$ şi $t$, separate printr-un singur spaţiu, cu semnificaţia:
	- $n =$ numărul de rânduri pe care sunt aşezate acvariile
	- $m =$ numărul de coloane pe care sunt aşezate acvariile
	- $t =$ momentul de timp
- pe următoarele $n$ linii se află câte $m$ caractere $r$ sau $a$, pentru fiecare rând de acvarii, obţinute astfel:
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este roşu, atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `r`
	- dacă peştele din acvariul cu numărul de ordine $i$ din rândul curent este albastru atunci cel de-al $i$-lea caracter din linia fişierului de intrare, corespunzătoare rândului curent, este `a`


# Date de ieșire

Fişierul de ieşire `culori.out` va conţine $n$ linii, fiecare linie va conţine câte $m$ caractere $r$ sau $a$, reprezentând codurile culorilor peştilor din rândul corespunzător numărului liniei curente din fişier

# Restricții și precizări

* $2 \leq n \leq 50$
* $2 \leq m \leq 50$
* $1 \leq t \leq 2 \ 300 \ 000$

---

Example:
`culori.in`
```
3 3 1
rar
rra
arr
```

`culori.out`
```
rra
rrr
rrr
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

using namespace std;

const int MAX_DIM = 52; // Maximum dimension +2 for padding

int n, m, t;
char fishtank[MAX_DIM][MAX_DIM], next_state[MAX_DIM][MAX_DIM];

// Function to check the neighboring cells and update the cell color
void update_color(int x, int y) {
    int reds = 0, blues = 0;
    for (int i = x - 1; i <= x + 1; ++i) {
        for (int j = y - 1; j <= y + 1; ++j) {
            if (i == x && j == y) continue; // Skip the current cell
            if (fishtank[i][j] == 'r') ++reds;
            else if (fishtank[i][j] == 'a') ++blues;
        }
    }
    if (reds > blues) next_state[x][y] = 'r';
    else if (reds < blues) next_state[x][y] = 'a';
    else next_state[x][y] = fishtank[x][y]; // Keep the current color if balanced
}

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    // Read input
    fin >> n >> m >> t;
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            fin >> fishtank[i][j];
            next_state[i][j] = fishtank[i][j];
        }
    }
    fin.close();

    // Simulation loop for t time steps
    for (int time = 0; time < t; ++time) {
        // Temporary array to hold the next state
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                update_color(i, j);
            }
        }

        // Copy the next state to the current state
        for (int i = 1; i <= n; ++i) {
            for (int j = 1; j <= m; ++j) {
                fishtank[i][j] = next_state[i][j];
            }
        }
    }

    // Write output
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            fout << fishtank[i][j];
        }
        fout << '\n';
    }
    fout.close();

    return 0;
}
```
This code should meet the requirements of the challenge. It uses file streams to read and write the files, `ifstream` and `ofstream`, respectively. It avoids the use of `cin`, `cout`, `printf`, and `scanf`. The code simulates the changes in the fish tank for `t` time steps and correctly outputs the results to `culori.out`.
