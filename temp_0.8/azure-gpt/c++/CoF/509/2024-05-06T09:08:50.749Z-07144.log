---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `aeriana.in` and write to `aeriana.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O companie aeriană are planificate $N$ zboruri. Fiecare zbor are asociate câte șase numere naturale cu următoarea semnificație: primul număr $A_1$ identifică aeroportul de decolare, cel de-al doilea număr $A_2$ identifică aeroportul de aterizare, următoarele patru numere naturale $H_1$, $M_1$, $H_2$ și $M_2$, reprezintă în ordine ora și minutul decolării, respectiv ora și minutul aterizării. Aterizarea poate să fie în ziua curentă sau în ziua următoare. Un zbor poate să dureze maximum $23$ de ore și $59$ de minute. De exemplu, pentru $H_1 = 10$, $M_1 = 5$, $H_2 = 15$, $M_2 = 20$ aterizarea are loc în aceeași zi cu decolarea (zborul durează $5$ ore și $15$ minute), iar pentru $H_1 = 23$, $M_1 = 5$, $H_2 = 1$, $M_2 = 15$ aterizarea are loc în ziua următoare (zborul durează $2$ ore și $10$ minute).

Un virus informatic s-a infiltrat în sistemele de calcul ale companiei și a inversat momentul de decolare cu cel de aterizare al zborurilor pe care le consideră speciale. Un zbor este considerat special de către acest virus în cazul în care codul aeroportului de decolare, $A_1$, este un număr prim, iar codul aeroportului de aterizare, $A_2$, se divide cu suma cifrelor lui $A_1$.

# Cerințe

Cunoscându-se numărul de zboruri $N$ și datele fiecăruia, **înainte de intervenția virusului**, să se determine:
1. Care este durata maximă a unui zbor, înainte de intervenția virusului.
2. Care este durata maximă a unui zbor, după intervenția virusului. Se iau în calcul atât duratele zborurilor inversate (speciale), cât și duratele zborurilor neinversate (nespeciale).

# Date de intrare
Fișierul `aeriana.in` conține pe prima linie valoarea $C$ (numărul cerinței, poate fi $1$ sau $2$), pe a doua linie valoarea $N$ (numărul de zboruri). Pe fiecare dintre următoarele $N$ linii sunt câte șase numere naturale $A_1$, $A_2$, $H_1$, $M_1$, $H_2$, $M_2$, în această ordine, despărțite prin câte un spațiu, cu semnificația din enunț.

# Date de ieșire
Fișierul `aeriana.out` va conține pe prima linie două numere naturale separate printr-un spațiu, reprezentând numărul de ore și respectiv numărul de minute ale zborului de durată maximă, în condițiile cerinței specificate.

# Restricții și precizări
* $1 \leq N \leq 1 \ 000$;
* $0 \leq H_1, H_2 \leq 23$;
* $0 \leq M_1, M_2 \leq 59$;
* $0 \leq A_1, A_2 \leq 1 \ 000 \ 000 \ 000$;
* Un zbor va dura cel puțin un minut și cel mult $23$ de ore și $59$ de minute;
* Pentru $19$ puncte, $C = 1$ și toate zborurile se desfășoară în aceeași zi;
* Pentru $17$ puncte, $C = 1$, $M_1 = 0$, $M_2 = 0$ pentru toate zborurile;
* Pentru $17$ puncte, $C = 1$ și nu există restricții suplimentare;
* Pentru $47$ de puncte, $C = 2$.

---

Example:
`aeriana.in`
```
1
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```

`aeriana.out`
```
23 59
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    return true;
}

int sum_of_digits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int main() {
    ifstream fin("aeriana.in");
    ofstream fout("aeriana.out");

    int C, N;
    fin >> C >> N;

    int max_duration_before = 0, max_duration_after = 0;

    while (N--) {
        int A1, A2, H1, M1, H2, M2;
        fin >> A1 >> A2 >> H1 >> M1 >> H2 >> M2;

        int duration_before = (H2 - H1) * 60 + M2 - M1;
        if (duration_before < 0) duration_before += 24 * 60; // Adjust for next day arrival

        max_duration_before = max(max_duration_before, duration_before);

        if (C == 2 && is_prime(A1) && A2 % sum_of_digits(A1) == 0) {
            // Calculate duration when flight is inverted by the virus
            int duration_after = -duration_before; // Subtract since times are inverted
            if (duration_after < 0) duration_after += 24 * 60;
            max_duration_after = max(max_duration_after, duration_after);
        }
    }

    if (C == 1) {
        fout << max_duration_before / 60 << ' ' << max_duration_before % 60 << '\n';
    } else {
        int max_duration = max(max_duration_before, max_duration_after);
        fout << max_duration / 60 << ' ' << max_duration % 60 << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```
This C++ solution uses file streams (`ifstream` and `ofstream`) to read from and write to the specified files. It defines functions for checking if a number is prime and for calculating the sum of the digits of a number. It then calculates the maximum flight duration before and after the virus intervention, meeting the challenge requirements without using `cin`, `cout`, `printf`, or `scanf`.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```
Expected output:
```
23 40
```
Found output:
```
23 59
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon evaluating the differences between the expected and found results, it's clear that when computing `duration_after` for the special flights (flights inverted by the virus), the solution incorrectly used `-duration_before`. Instead, it should simply swap the departure and arrival times to compute the new duration when the virus has inverted the flight times.

We need to calculate the duration as if the arrival time is now the departure time, and the departure time is the arrival time, which could lead to the flight "arriving" before it "departs" when the virus inverts the times, indicating the flight would be considered as arriving the day before it departs (which is not physically possible but is how the virus was described to corrupt the data).

Let's fix the calculation of `duration_after` and rewrite the entire solution:

```cpp
#include <fstream>
#include <cmath>

using namespace std;

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    return true;
}

int sum_of_digits(int n) {
    int sum = 0;
    while (n) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int compute_duration(int H1, int M1, int H2, int M2) {
    int duration = (H2 - H1) * 60 + M2 - M1;
    if (duration < 0) duration += 24 * 60; // Adjust for next day arrival
    return duration;
}

int main() {
    ifstream fin("aeriana.in");
    ofstream fout("aeriana.out");

    int C, N;
    fin >> C >> N;

    int max_duration_before = 0, max_duration_after = 0;

    while (N--) {
        int A1, A2, H1, M1, H2, M2;
        fin >> A1 >> A2 >> H1 >> M1 >> H2 >> M2;

        int duration_before = compute_duration(H1, M1, H2, M2);

        max_duration_before = max(max_duration_before, duration_before);

        if (C == 2 && is_prime(A1) && (A2 % sum_of_digits(A1) == 0)) {
            // Calculate duration when flight is inverted by the virus
            int duration_after = compute_duration(H2, M2, H1, M1); // Swap departure and arrival times
            max_duration_after = max(max_duration_after, duration_after);
        }
    }

    if (C == 1) {
        fout << max_duration_before / 60 << ' ' << max_duration_before % 60 << '\n';
    } else {
        int max_duration = max(max_duration_before, max_duration_after);
        fout << max_duration / 60 << ' ' << max_duration % 60 << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

In this corrected solution, we compute the duration after the virus's intervention by swapping the departure and arrival times using the `compute_duration` function. This should provide the correct maximum durations for special (inverted) and non-special flights.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3
47 55 0 0 23 59
1 437 23 43 10 34
11 457 10 43 10 23
```
Expected output:
```
23 40
```
Found output:
```
23 59
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
