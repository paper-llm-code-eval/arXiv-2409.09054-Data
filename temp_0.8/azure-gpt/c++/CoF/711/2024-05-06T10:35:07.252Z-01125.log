---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream in("text.in");
    std::ofstream out("text.out");

    int MAX;
    in >> MAX;
    in.ignore(); // Skip the newline after reading MAX

    std::string word, line;
    std::vector<std::string> words;

    while (std::getline(in, word, ' ')) {
        // Check if we encountered a paragraph break
        if (word.back() == '\n') {
            word.pop_back(); // Remove the newline character
            words.push_back(word);
            int lineLength = 0;
            std::vector<std::string> currentLineWords;

            for (const auto& w : words) {
                if (lineLength + w.length() <= MAX) {
                    currentLineWords.push_back(w);
                    lineLength += w.length() + 1; // Plus one for space
                } else {
                    if (currentLineWords.size() == 1) { // Special case for single word
                        out << currentLineWords[0] << std::string(MAX - lineLength + 1, ' ') << '\n';
                    } else {
                        int totalSpaces = MAX - lineLength + currentLineWords.size();
                        int spaceBetweenWords = totalSpaces / (currentLineWords.size() - 1);
                        int extraSpaces = totalSpaces % (currentLineWords.size() - 1);
                        for (size_t i = 0; i < currentLineWords.size() - 1; ++i) {
                            out << currentLineWords[i];
                            out << std::string(spaceBetweenWords + (i < extraSpaces ? 1 : 0), ' ');
                        }
                        out << currentLineWords.back() << '\n'; // Last word in the line
                    }
                    // Reset for the next line
                    lineLength = w.length() + 1;
                    currentLineWords = {w};
                }
            }
            // Handle the last line of the paragraph
            if (!currentLineWords.empty()) {
                out << currentLineWords[0];
                for (size_t i = 1; i < currentLineWords.size(); ++i) {
                    out << ' ' << currentLineWords[i];
                }
                out << '\n';
            }

            words.clear(); // Clear words for the next paragraph
            if (in.peek() == '\n') {
                in.get(); // Read the extra newline indicating an empty line (new paragraph)
                out << '\n';
            }
        } else {
            // Normal word, add it to the words vector
            words.push_back(word);
        }
    }

    in.close();
    out.close();

    return 0;
}
```
This solution reads words from `text.in` and writes the justified text to `text.out`, while respecting the challenge's rules and constraints. I've included handling for paragraphs, line breaks, and alignment.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```

```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The provided solution has a bug in the way it handles word reading and paragraph parsing. Instead of splitting by spaces and then checking for newline characters, we should read the entire line first and then split the line into words. This will simplify the logic and fix the issue with newline handling.

Here's the corrected solution:

```cpp
#include <fstream>
#include <vector>
#include <sstream>

void writeJustifiedText(std::ofstream &out, const std::vector<std::string> &words, int MAX, bool isLastParagraph = false) {
    int currentLength = 0;
    std::vector<std::string> lineWords;

    for (const auto &word : words) {
        if (currentLength + word.length() + lineWords.size() > MAX) { // Need to print the line
            int spacesToDistribute = MAX - currentLength;
            int gaps = lineWords.size() - 1;
            int spacesPerGap = gaps ? spacesToDistribute / gaps : 0;
            int extraSpaces = gaps ? spacesToDistribute % gaps : 0;

            for (size_t i = 0; i < lineWords.size(); ++i) {
                out << lineWords[i];
                if (i < gaps) {
                    out << std::string(spacesPerGap + (i < extraSpaces ? 1 : 0), ' ');
                }
            }
            out << '\n';

            currentLength = 0;
            lineWords.clear();
        }

        lineWords.push_back(word);
        currentLength += word.length();
    }

    // Write the last line which should be left-aligned
    for (size_t i = 0; i < lineWords.size(); ++i) {
        if (i > 0) out << ' ';
        out << lineWords[i];
    }
    if (!isLastParagraph) out << '\n'; // Do not add a newline if it's the last paragraph
}

int main() {
    std::ifstream in("text.in");
    std::ofstream out("text.out");

    int MAX;
    in >> MAX;
    in.ignore(); // Skip the newline after reading MAX

    std::string line;
    // Read the file line by line
    while (std::getline(in, line)) {
        if (line.empty()) {
            out << '\n';
        } else {
            std::istringstream iss(line);
            std::vector<std::string> words;
            std::string word;
            while (iss >> word) {
                words.push_back(word);
            }
            // Handle the last paragraph differently if it's the end of the file
            if (in.peek() == EOF) {
                writeJustifiedText(out, words, MAX, true);
            } else {
                writeJustifiedText(out, words, MAX);
            }
        }
    }
    in.close();
    out.close();
    return 0;
}
```

In this solution, we start by reading the maximum line length `MAX` from `text.in`. For each paragraph, we accumulate words in a vector until we can no longer fit the next word on the current line. We then use `writeJustifiedText` to distribute spaces evenly between words and write the justified text to `text.out`. The function also handles the special case for the last line of a paragraph and the last paragraph in the text.
