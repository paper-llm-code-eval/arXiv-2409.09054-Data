---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `text.in` and write to `text.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile lucrează intens la un editor de texte. Un text este format din unul sau mai multe paragrafe. Orice paragraf se termină cu `Enter` şi oricare două cuvinte consecutive din acelaşi paragraf sunt separate prin spaţii (unul sau mai multe). În funcţie de modul de setare a paginii, numărul maxim de caractere care încap în pagină pe o linie este unic determinat (notăm cu $MAX$).
\
Funcţia pe care Vasile trebuie să o implementeze acum este alinierea în pagină a fiecărui paragraf din text la stânga şi la dreapta. Pentru aceasta el va trebui să împartă fiecare paragraf în linii separate de lungime $MAX$ (fiecare linie terminată cu `Enter`). Împărţirea se realizează punând numărul maxim posibil de cuvinte pe fiecare linie, fără împărţirea cuvintelor în silabe. Pentru aliniere stânga-dreapta, el trebuie să repartizeze spaţii în mod **uniform** între cuvintele de pe fiecare linie, astfel încât ultimul caracter de pe linie să fie diferit de spaţiu, iar numărul total de caractere de pe linie să fie egal cu $MAX$. Excepţie face numai ultima linie din paragraf, care rămâne aliniată la stânga (cuvintele fiind separate printr-un singur spaţiu, chiar dacă linia nu este plină).

În general, este puţin probabil ca alinierea să fie realizabilă prin plasarea aceluiaşi număr de spaţii între oricare două cuvinte consecutive de pe linie. Vasile consideră că este mai elegant ca, dacă între unele cuvinte consecutive trebuie plasat un spaţiu în plus faţă de alte perechi de cuvinte consecutive, acestea să fie plasate la începutul liniei.

# Cerinţă
Scrieţi un program care să citească lungimea unei linii şi textul dat şi care să alinieze textul la stânga şi la dreapta.

# Date de intrare
Fişierul de intrare `text.in` conţine pe prima linie $MAX$, lungimea maximă a unui rând.
Pe următoarele linii este scris textul.

# Date de ieşire
Fişierul de ieşire `text.out` conţine textul aliniat stânga-dreapta.

# Restricţii și precizări
- $2 \leq MAX \leq 1\ 000$
- **Atenție!** Lungimea maximă a oricărui cuvânt din text este de $40$ de caractere şi nu depăşeşte $MAX$. În enunțul original limita unui cuvânt era de $25$ de caractere, însă se pare că testele nu respectau această limită.
- **Atenție!** În cazul în care o linie este goală, aceasta se păstrează.
- Lungimea unui paragraf nu depăşeşte $1\ 000$ de caractere.
- Soluţia este unică.

---

Example:
`text.in`
```
20
Vasile are multe bomboane bune.
```

`text.out`
```
Vasile   are   multe
bomboane bune.
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

int main() {
    std::ifstream fin("text.in");
    std::ofstream fout("text.out");

    int MAX;
    std::string word, line;
    fin >> MAX;
    fin.ignore(); // Ignore the newline after MAX

    std::vector<std::string> words;

    // Read input line by line
    while (std::getline(fin, line)) {
        // Work with paragraphs separately, split by 'Enter'
        // If the line is empty, it's a paragraph separator
        if (line.empty()) {
            words.push_back(""); // Mark the end of a paragraph
            continue;
        }

        size_t start = 0;
        size_t end = line.find(' ');
        while (end != std::string::npos) {
            word = line.substr(start, end - start);
            if (!word.empty()) words.push_back(word);

            // Skip consecutive spaces
            start = line.find_first_not_of(' ', end);
            end = line.find(' ', start);
        }

        // Add the last word
        word = line.substr(start);
        if (!word.empty()) words.push_back(word);
    }

    int lineWidth = 0;
    std::vector<std::string> currentLine;

    auto flushLine = [&]() {
        int spacesNeeded = MAX - lineWidth;
        int gaps = currentLine.size() - 1;
        if (gaps > 0) {
            int spacePerGap = spacesNeeded / gaps;
            int extraSpaces = spacesNeeded % gaps;

            for (size_t i = 0; i < currentLine.size(); ++i) {
                fout << currentLine[i];
                if (i < gaps) {
                    fout << std::string(spacePerGap + (i < extraSpaces ? 1 : 0), ' ');
                }
            }
        } else if (!currentLine.empty()) {
            fout << currentLine[0];
        }
        fout << std::endl;

        currentLine.clear();
        lineWidth = 0;
    };

    for (const auto& currentWord : words) {
        // Check for paragraph break
        if (currentWord.empty()) {
            flushLine();
            fout << std::endl; // Empty line for paragraph separation
        } else {
            if (lineWidth + currentWord.size() + (currentLine.empty() ? 0 : 1) <= MAX) {
                if (!currentLine.empty()) lineWidth++; // Space between words
                currentLine.push_back(currentWord);
                lineWidth += currentWord.size();
            } else {
                flushLine();
                currentLine.push_back(currentWord);
                lineWidth = currentWord.size();
            }
        }
    }
    flushLine(); // Flush the last line

    fin.close();
    fout.close();
    return 0;
}
```
This C++ code does the following:

1. Reads the maximum line length (`MAX`) from `text.in` and ignores the newline character that follows.
2. Reads the text line by line and splits it into words, also handling multiple spaces and keeping track of paragraphs with empty lines.
3. For each word, the code checks if it can be added to the current line without exceeding the maximum line length.
    - If it fits, the word is added to the current line.
    - If not, the current line is flushed (aligned and written to `text.out`) and a new line is started with the current word.
4. To handle the alignment requirement, the `flushLine` lambda function calculates the number of spaces needed and distributes them uniformly between words, with any extra spaces added at the beginning of the line.
5. After processing all the words, any remaining line is flushed.
6. Finally, the input and output files are closed. 

This solution assumes the file `text.in` is correctly formatted and every word's length does not exceed `MAX`. It also handles paragraphs and does not split words. The alignment is done as specified, with extra spaces distributed starting from the left.
---------- user ----------


Program result did not match expected result.
Input data:
```
20
Vasile are multe bomboane bune.
```
Expected output:
```
Vasile   are   multe
bomboane bune.
```
Found output:
```
Vasile  are  multe
bomboane      bune.
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
