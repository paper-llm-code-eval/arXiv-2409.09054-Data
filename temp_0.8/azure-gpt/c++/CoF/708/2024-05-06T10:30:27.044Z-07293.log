---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `anagrame.in` and write to `anagrame.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un cuvânt format numai din litere mici. Numim anagramă un cuvânt format din literele cuvântului dat, schimbând eventual ordinea literelor. De exemplu o anagramă a cuvântului tamara este cuvântul armata. Evident, un cuvânt poate fi considerat o anagramă a lui însuşi.

# Cerință

Scrieţi un program care să genereze toate anagramele unui cuvânt dat, în ordine lexicografică.

# Date de intrare

Fişierul de intrare `anagrame.in` conţine pe prima linie cuvântul dat.


# Date de ieșire

Fişierul de ieşire `anagrame.out` va conţine în ordine anagramele cuvântului dat, câte una pe linie.

# Restricții și precizări

* Cuvântul dat are cel mult $10$ litere mici.
* Cuvântul $x = x_1 \ x_2 \dots x_n$ precede cuvântul $y = y_1 \ y_2 \dots y_n$ dacă există un indice $k \in {1, 2, \dots, n}$ astfel încât $x_i = y_i$, $i \in {1, 2, \dots, k - 1}$, iar litera $x_k$ precede în alfabet litera $y_k$.

---

Example:
`anagrame.in`
```
ana
```

`anagrame.out`
```
aan
ana
naa
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream fin("anagrame.in");
    std::ofstream fout("anagrame.out");
    
    std::string word;
    fin >> word;
    fin.close();
    
    std::sort(word.begin(), word.end());
    
    do {
        fout << word << '\n';
    } while (std::next_permutation(word.begin(), word.end()));
    
    fout.close();
    
    return 0;
}
```

This C++ program does the following:

1. It includes `<fstream>`, which is necessary for file input/output, and `<algorithm>`, which provides the `std::sort` and `std::next_permutation` functions.
2. It opens the input file `anagrame.in` and reads the word into the `std::string` named `word`. Then, it closes the input file stream.
3. It sorts the word in lexicographic order to ensure that when `std::next_permutation` is called, it will start from the first permutation.
4. It then enters a do-while loop where it writes the current permutation to the output file `anagrame.out` followed by a newline, and then computes the next lexicographic permutation.
5. The loop repeats until there are no more permutations to generate.
6. Finally, it closes the output file stream and returns 0, indicating successful completion of the program.

This solution exploits the C++ Standard Library to perform the necessary operations with minimal code, ensuring fast execution.
