---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `nr.in` and write to `nr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se generează un şir de numere naturale ai cărui primi termeni sunt, în această ordine: 

$1$, $2$, $3$, $5$, $8$, $3$, $1$, $4$, $5$, $9$, $4$, $3$, $7$, $0$, $7$, $7$, $4$,...	 

# Cerință

Deduceţi regula după care sunt generaţi termenii şirului şi scrieţi un program care să citească numerele naturale $n$, $k$ şi $p$ şi care să determine:

1.	suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ; 
2.	numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ;
3.	cel de-al $p$-lea termen al şirului din enunţ.


# Date de intrare


Fişierul `nr.in` conţine o singură linie pe care sunt scrise trei numere naturale $n$, $k$ şi $p$, separate prin câte un spaţiu.


# Date de ieșire

Fişierul de ieşire `nr.out` va conţine $3$ linii: 

1. pe prima linie, un număr natural reprezentând suma tuturor numerelor prime aflate printre primii $n$ termeni ai şirului din enunţ  
2. pe a doua linie, numărul de apariţii ale cifrei $k$ printre primii $n$ termeni ai şirului din enunţ
3. pe a treia linie se va afişa cel de-al $p$-lea termen al şirului din enunţ



# Restricții și precizări

* $3 \leq n \leq 100$;
* $0 \leq k \leq 9$;
* $1 \leq p \leq 2 \cdot 10^9$;
* Pentru rezolvarea cerinţei 1) se acordă 40% din punctaj, pentru cerinţa 2) 20% din punctaj şi pentru cerinţa 3) 40% din punctaj.
* Pentru teste în valoare de $50$ de puncte, $p \leq 10^7$;

---

Example:
`nr.in`
```
19 5 26
```

`nr.out`
```
47
3
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:To deduce the rule, we observe the sequence:

1, 2, 3, 5, 8, 3, 1, 4, 5, 9, 4, 3, 7, 0, 7, 7, 4,...

Looking at this sequence, we can see that starting from the fifth term (8), each term seems to be the sum of the previous two terms modulo 10 (since we only need the last digit):

5 + 3 = 8 (5th term)
3 + 8 = 11 -> 1 (6th term, modulo 10)
8 + 1 = 9 -> 9 (7th term, modulo 10)
etc.

Based on this, we can generate the sequence using this rule. To check if a number is prime, we only need to consider numbers up to 9, as the sequence only contains the last digit of the sum, and only 2, 3, 5, and 7 qualify as single-digit prime numbers.

For counting the digit `k`, we simply iterate through the generated sequence and count the occurrences.

For finding the `p`-th term, we can use the same generation technique, but since we're asked for values of `p` up to 2 * 10^9, generating each term up to `p` would be inefficient. However, since the sequence is cyclic with a period of 60 (as the sum of two digits modulo 10 will repeat after 60 terms), we can calculate the `p`-th term by finding the remainder of `p` modulo 60 and then returning the corresponding term from the first 60 terms of the series.

Here is the C++ solution based on the above deductions:

```cpp
#include <fstream>
#include <vector>

using namespace std;

const int MAX_N = 100;
const int CYCLE_LENGTH = 60;

bool is_prime(int n) {
    if (n < 2) return false;
    for (int i = 2; i * i <= n; i++)
        if (n % i == 0) return false;
    return true;
}

int main() {
    ifstream fin("nr.in");
    ofstream fout("nr.out");

    int n, k, p;
    fin >> n >> k >> p;
    fin.close();

    int sum_primes = 0, count_k = 0, pth_term;
    vector<int> sequence = {1, 2, 3, 5, 8};
    sequence.reserve(MAX_N);

    for (int i = 5; i < CYCLE_LENGTH; ++i) {
        sequence.push_back((sequence[i - 1] + sequence[i - 2]) % 10);
    }

    for (int i = 0; i < n; ++i) {
        int term = sequence[i % CYCLE_LENGTH];
        if (is_prime(term)) {
            sum_primes += term;
        }
        if (term == k) {
            ++count_k;
        }
    }

    pth_term = sequence[(p - 1) % CYCLE_LENGTH];

    fout << sum_primes << '\n' << count_k << '\n' << pth_term << '\n';
    fout.close();

    return 0;
}
```

Please note that this code does not handle input/output errors and assumes that the input file always exists and contains valid data. It's also optimized for speed by precomputing the fact that the sequence repeats every 60 terms, so it avoids generating terms beyond that.
