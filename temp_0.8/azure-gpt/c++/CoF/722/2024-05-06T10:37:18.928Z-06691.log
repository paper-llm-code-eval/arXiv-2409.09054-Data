---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `taxe.in` and write to `taxe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-o ţară în care corupţia este în floare şi economia la pământ, pentru a obţine toate aprobările necesare în scopul demarării unei afaceri, investitorul trebuie să treacă prin mai multe camere ale unei clădiri în care se află birouri.

Clădirea are un singur nivel în care birourile sunt lipite unele de altele formând un caroiaj pătrat de dimensiune $n \times n$. Pentru a facilita accesul în birouri, toate camerele vecine au uşi între ele. În fiecare birou se află un funcţionar care pretinde o taxă de trecere prin cameră (taxă ce poate fi, pentru unele camere, egală cu $0$). Investitorul intră încrezător prin colţul din stânga-sus al clădirii (cum se vede de sus planul clădirii) şi doreşte să ajungă în colţul opus al clădirii, unde este ieşirea, plătind o taxă totală cât mai mică.

# Cerinţă

Ştiind că el are în buzunar $S$ _euro_ şi că fiecare funcţionar îi ia taxa de cum intră în birou, se cere să se determine dacă el poate primi aprobările necesare şi, în caz afirmativ, care este suma maximă de bani care îi rămâne în buzunar la ieşirea din clădire.

# Date de intrare


Fişierul de intrare `taxe.in` conţine pe prima linie cele două numere $S$ şi $n$ despărţite printr-un spaţiu, iar pe următoarele $n$ linii câte $n$ numere separate prin spaţii ce reprezintă taxele cerute de funcţionarii din fiecare birou.


# Date de ieșire


Fişierul de ieşire `taxe.out` conţine o singură linie pe care se află numărul maxim de euro care îi rămân în buzunar sau valoarea $–1$ dacă investitorului nu-i ajung banii pentru a obţine aprobarea.

# Restricții și precizări

* $3 \leq N \leq 100$
* $1 \leq S \leq 10 \ 000$
* Valorile reprezentând taxele cerute de funcţionarii din birouri sunt numere naturale, o taxă nedepăşind valoarea de $200$ de _euro_.

---

Example:
`taxe.in`
```
10 3
1 2 5
1 3 1
0 8 1
```

`taxe.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the solution for the described challenge written in C++. The code will read from `taxe.in` and output to `taxe.out`:

```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>

std::ifstream fin("taxe.in");
std::ofstream fout("taxe.out");

const int MAXN = 100;
const int INF = 1000000000;
int taxe[MAXN][MAXN];
int dp[MAXN][MAXN];
int n, S;

struct Cell {
    int x, y, remaining;
};

bool operator<(const Cell& a, const Cell& b) {
    return a.remaining < b.remaining;
}

std::priority_queue<Cell> pq;

bool isValid(int x, int y) {
    return x >= 0 && y >= 0 && x < n && y < n;
}

void solve() {
    fin >> S >> n;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            fin >> taxe[i][j];
            dp[i][j] = -INF;
        }
    }

    dp[0][0] = S - taxe[0][0];
    pq.push({0, 0, dp[0][0]});
    int dx[] = {0, 1, -1, 0};
    int dy[] = {1, 0, 0, -1};

    while (!pq.empty()) {
        Cell curr = pq.top();
        pq.pop();
        if (curr.remaining != dp[curr.x][curr.y]) continue;

        for (int dir = 0; dir < 4; ++dir) {
            int nx = curr.x + dx[dir];
            int ny = curr.y + dy[dir];
            if (isValid(nx, ny) && curr.remaining > taxe[nx][ny] && dp[nx][ny] < curr.remaining - taxe[nx][ny]) {
                dp[nx][ny] = curr.remaining - taxe[nx][ny];
                pq.push({nx, ny, dp[nx][ny]});
            }
        }
    }

    fout << (dp[n - 1][n - 1] >= 0 ? dp[n - 1][n - 1] : -1) << '\n';
}

int main() {
    solve();
    fin.close();
    fout.close();
    return 0;
}
```

This solution uses Dijkstra's algorithm with a priority queue (max-heap) to find the maximum amount of money left when reaching the opposite corner. The `dp` array stores the maximum amount of money left when reaching each cell. The algorithm iterates over all possible paths using a priority queue which stores the cells and the remaining money after paying the tax for entering each cell. We look for the path that maximizes the amount of money left when we reach the bottom-right corner. If the cell we reach at the end has a negative value in the `dp` array, it means the investor cannot afford to pass through, and we output -1. Otherwise, we output the remaining money.
