---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `gardul.in` and write to `gardul.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Doi copii vopsesc un gard alcătuit din $n$ scânduri pe care le vom numerota de la $1$ la $n$ astfel: primul ia o cutie de vopsea roșie cu care vopsește scândurile cu numărul $p$, $2 \cdot p$, $3 \cdot p$, etc. Al doilea procedează la fel, începe de la același capăt al gardului, dar ia o cutie de vopsea albastră și vopsește din $q$ în $q$ scânduri. Astfel, când vor termina de vopsit, gardul va avea multe scânduri nevopsite, unele scânduri vopsite în roșu, altele în albastru, iar altele în violet (cele care au fost vopsite și cu roșu și cu albastru).

# Cerință

Cunoscând numerele $n, p$ și $q$ afișați:

1. câte scânduri rămân nevopsite
2. câte scânduri sunt vopsite în roșu
3. câte scânduri sunt vopsite în albastru
4. câte scânduri sunt vopsite în violet

# Date de intrare

De pe prima linie a fișierului de intrare `gardul.in` se citește valoarea $n$, reprezentând numărul de scânduri din gard. De pe cea de a doua linie a fișierului de intrare se citesc valorile $p$ și $q$ separate de un spațiu.

# Date de ieșire

În fișierul de ieșire `gardul.out` se vor afișa, în ordine, cele patru numere naturale cerute, câte unul pe un rând, ca în exemplu.

# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq p, q \leq 40 \ 000$;

---

Example:
`gardul.in`
```
25
4 6
```

`gardul.out`
```
17
4
2
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream fin("gardul.in");
    std::ofstream fout("gardul.out");

    int n, p, q;
    fin >> n >> p >> q;

    // Counters for each color
    int red = 0, blue = 0, violet = 0;

    // Mark painted boards
    bool* painted = new bool[n + 1]();

    // Paint red
    for (int i = p; i <= n; i += p) {
        painted[i] = true;
        red++;
    }

    // Paint blue and count violet
    for (int i = q; i <= n; i += q) {
        if (painted[i]) {
            violet++;
            red--; // This board is violet, not just red
        } else {
            painted[i] = true;
            blue++;
        }
    }

    // Total unpainted is total minus painted
    int unpainted = n - (red + blue + violet);

    // Output results
    fout << unpainted << '\n';
    fout << red << '\n';
    fout << blue << '\n';
    fout << violet << '\n';

    // Clean up
    delete[] painted;

    // Close files
    fin.close();
    fout.close();

    return 0;
}
```

This C++ code solves the challenge described, working within the given constraints and adhering to the specified input and output requirements. It avoids the use of `cin`, `cout`, `printf`, and `scanf` for file I/O operations, and uses `ifstream` and `ofstream` for reading from and writing to files, respectively.

The code performs a simple simulation of the painting process, using a dynamic boolean array to keep track of which boards are painted. It first marks the boards painted in red, then in blue, counting any overlaps as violet and adjusting the red count accordingly. Finally, it calculates the number of unpainted boards and outputs all counts to the `gardul.out` file.

Remember to compile the code with a C++ compiler (like g++) and to have the `gardul.in` file in the same directory as the executable to test the solution.
