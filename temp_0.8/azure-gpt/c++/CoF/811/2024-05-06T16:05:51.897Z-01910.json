{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/811/2024-05-06T16:05:51.897Z-01910.log",
  "attemptStart": 1715011551.897,
  "attemptEnd": 1715011572.974,
  "attemptDuration": 21.07699990272522,
  "code": "#include <fstream>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nconst int NMAX = 100000;\nint divisors[NMAX + 1];\n\nvoid compute_divisors() {\n    for (int i = 1; i <= NMAX; ++i)\n        for (int j = i; j <= NMAX; j += i)\n            ++divisors[j];\n}\n\nstruct Group {\n    int divCount;\n    int elements;\n    int maxValue;\n};\n\nbool groupComp(const Group &a, const Group &b) {\n    if (a.elements != b.elements) return a.elements > b.elements;\n    return a.divCount > b.divCount;\n}\n\nint main() {\n    std::ifstream in(\"grupe.in\");\n    std::ofstream out(\"grupe.out\");\n    int m, n;\n    in >> m >> n;\n\n    compute_divisors();\n\n    std::map<int, Group> groups;\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            int x;\n            in >> x;\n            int divCount = divisors[x];\n            Group &g = groups[divCount];\n            g.divCount = divCount;\n            g.elements++;\n            g.maxValue = std::max(g.maxValue, x);\n        }\n    }\n\n    std::vector<Group> sortedGroups;\n    for (const auto &kv : groups)\n        sortedGroups.push_back(kv.second);\n\n    std::sort(sortedGroups.begin(), sortedGroups.end(), groupComp);\n\n    Group a = {0, 0, 0}, b = {0, 0, 0};\n    if (!sortedGroups.empty()) {\n        a = sortedGroups[0];\n        out << a.divCount << ' ' << a.elements << ' ' << a.maxValue << '\\n';\n    }\n    if (sortedGroups.size() > 1) {\n        b = sortedGroups[1];\n        out << b.divCount << ' ' << b.elements << ' ' << b.maxValue << '\\n';\n    } else {\n        out << \"0 0 0\\n\";\n    }\n\n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1546,
  "metadata": {
    "id": 811,
    "examples": [
      {
        "in": "2 3\n16 2 4\n10 6 5",
        "out": "4 2 10\n2 2 5",
        "explainer": ""
      },
      {
        "in": "2 3\n2 15 4\n10 6 5",
        "out": "4 3 15\n2 2 5",
        "explainer": ""
      }
    ],
    "body": "Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \\dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.\n\n# Cerință\n\nScrieți un program care citește $m$, $n$, elementele tabloului și afișează:\n* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;\n* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$\n\n# Date de intrare\n\nFișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.\n\n# Date de ieșire\n\nFișierul `grupe.out` va conține:\n- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;\n- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.\n\n# Restricții și precizări\n\n* $1 \\leq m, n \\leq 100$\n* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \\ 000$ și mai mari decât $1$;\n* grupă poate fi compusă dintr-un singur element\n* se acordă $50\\%$ din punctaj pentru afișarea corectă a fiecărei linii",
    "header": {
      "problem_id": 811,
      "problem_name": "grupe",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "grupe.in",
      "output_filename": "grupe.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "grupe.in",
      "output": "grupe.out"
    },
    "consoleInteraction": false
  }
}