{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/811/2024-05-06T16:05:53.485Z-09634.log",
  "attemptStart": 1715011553.485,
  "attemptEnd": 1715011653.449,
  "attemptDuration": 99.96399998664856,
  "code": "#include <fstream>\n#include <map>\n#include <vector>\n#include <algorithm>\n\nint count_divisors(int number) {\n    int divisors = 0;\n    for (int i = 1; i * i <= number; ++i) {\n        if (number % i == 0) {\n            divisors += (number / i == i) ? 1 : 2;\n        }\n    }\n    return divisors;\n}\n\nint main() {\n    std::ifstream fin(\"grupe.in\");\n    std::ofstream fout(\"grupe.out\");\n\n    int m, n;\n    fin >> m >> n;\n\n    std::map<int, std::pair<int, int>> divisor_groups; // Maps number of divisors to (count, max_element)\n\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            int number;\n            fin >> number;\n            int divisors = count_divisors(number);\n            if (divisor_groups.find(divisors) == divisor_groups.end()) {\n                divisor_groups[divisors] = {1, number};\n            } else {\n                divisor_groups[divisors].first++;\n                divisor_groups[divisors].second = std::max(divisor_groups[divisors].second, number);\n            }\n        }\n    }\n\n    fin.close();\n\n    // Sort groups by number of elements and then by number of divisors\n    std::vector<std::pair<int, std::pair<int, int>>> groups(divisor_groups.begin(), divisor_groups.end());\n    \n    std::sort(groups.begin(), groups.end(), [](const std::pair<int, std::pair<int, int>>& a, const std::pair<int, std::pair<int, int>>& b) {\n        return a.second.first > b.second.first || (a.second.first == b.second.first && a.first > b.first);\n    });\n    \n    if (!groups.empty()) {\n        fout << groups[0].first << ' ' << groups[0].second.first << ' ' << groups[0].second.second << '\\n';\n        if (groups.size() > 1) {\n            fout << groups[1].first << ' ' << groups[1].second.first << ' ' << groups[1].second.second << '\\n';\n        } else {\n            fout << \"0 0 0\\n\";\n        }\n    } else {\n        fout << \"0 0 0\\n0 0 0\\n\";\n    }\n\n    fout.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3484,
  "metadata": {
    "id": 811,
    "examples": [
      {
        "in": "2 3\n16 2 4\n10 6 5",
        "out": "4 2 10\n2 2 5",
        "explainer": ""
      },
      {
        "in": "2 3\n2 15 4\n10 6 5",
        "out": "4 3 15\n2 2 5",
        "explainer": ""
      }
    ],
    "body": "Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \\dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.\n\n# Cerință\n\nScrieți un program care citește $m$, $n$, elementele tabloului și afișează:\n* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;\n* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$\n\n# Date de intrare\n\nFișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.\n\n# Date de ieșire\n\nFișierul `grupe.out` va conține:\n- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;\n- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.\n\n# Restricții și precizări\n\n* $1 \\leq m, n \\leq 100$\n* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \\ 000$ și mai mari decât $1$;\n* grupă poate fi compusă dintr-un singur element\n* se acordă $50\\%$ din punctaj pentru afișarea corectă a fiecărei linii",
    "header": {
      "problem_id": 811,
      "problem_name": "grupe",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "grupe.in",
      "output_filename": "grupe.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "grupe.in",
      "output": "grupe.out"
    },
    "consoleInteraction": false
  }
}