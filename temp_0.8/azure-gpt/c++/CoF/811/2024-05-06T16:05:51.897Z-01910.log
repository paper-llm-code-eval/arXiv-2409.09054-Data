---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grupe.in` and write to `grupe.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.

# Cerință

Scrieți un program care citește $m$, $n$, elementele tabloului și afișează:
* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;
* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$

# Date de intrare

Fișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.

# Date de ieșire

Fișierul `grupe.out` va conține:
- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;
- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.

# Restricții și precizări

* $1 \leq m, n \leq 100$
* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \ 000$ și mai mari decât $1$;
* grupă poate fi compusă dintr-un singur element
* se acordă $50\%$ din punctaj pentru afișarea corectă a fiecărei linii

---

Example:
`grupe.in`
```
2 3
16 2 4
10 6 5
```

`grupe.out`
```
4 2 10
2 2 5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>

const int NMAX = 100000;
int divisors[NMAX + 1];

void compute_divisors() {
    for (int i = 1; i <= NMAX; ++i)
        for (int j = i; j <= NMAX; j += i)
            ++divisors[j];
}

struct Group {
    int divCount;
    int elements;
    int maxValue;
};

bool groupComp(const Group &a, const Group &b) {
    if (a.elements != b.elements) return a.elements > b.elements;
    return a.divCount > b.divCount;
}

int main() {
    std::ifstream in("grupe.in");
    std::ofstream out("grupe.out");
    int m, n;
    in >> m >> n;

    compute_divisors();

    std::map<int, Group> groups;
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            int x;
            in >> x;
            int divCount = divisors[x];
            Group &g = groups[divCount];
            g.divCount = divCount;
            g.elements++;
            g.maxValue = std::max(g.maxValue, x);
        }
    }

    std::vector<Group> sortedGroups;
    for (const auto &kv : groups)
        sortedGroups.push_back(kv.second);

    std::sort(sortedGroups.begin(), sortedGroups.end(), groupComp);

    Group a = {0, 0, 0}, b = {0, 0, 0};
    if (!sortedGroups.empty()) {
        a = sortedGroups[0];
        out << a.divCount << ' ' << a.elements << ' ' << a.maxValue << '\n';
    }
    if (sortedGroups.size() > 1) {
        b = sortedGroups[1];
        out << b.divCount << ' ' << b.elements << ' ' << b.maxValue << '\n';
    } else {
        out << "0 0 0\n";
    }

    in.close();
    out.close();
    return 0;
}
```
This C++ solution reads from `grupe.in` and writes to `grupe.out` and doesn't use `cin`, `cout`, `printf`, or `scanf` for I/O operations. It uses a precomputed array of divisors for all possible elements in the matrix to avoid recalculating the number of divisors for each element. It then uses a map to keep track of the groups and sorts them based on the given criteria.
