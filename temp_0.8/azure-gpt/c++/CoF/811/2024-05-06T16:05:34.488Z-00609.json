{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/811/2024-05-06T16:05:34.488Z-00609.log",
  "attemptStart": 1715011534.488,
  "attemptEnd": 1715011560.295,
  "attemptDuration": 25.807000160217285,
  "code": "#include <fstream>\n#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nstd::unordered_map<int, int> divisor_count_cache;\n\nint count_divisors(int n) {\n    if (divisor_count_cache.find(n) != divisor_count_cache.end()) {\n        return divisor_count_cache[n];\n    }\n    int count = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n            count++;\n        }\n    }\n    divisor_count_cache[n] = count;\n    return count;\n}\n\nint main() {\n    std::ifstream in(\"grupe.in\");\n    std::ofstream out(\"grupe.out\");\n\n    int m, n;\n    in >> m >> n;\n\n    std::unordered_map<int, std::vector<int>> groups;\n    std::vector<int> divisors;\n    int value;\n\n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            in >> value;\n            int divs = count_divisors(value);\n            groups[divs].push_back(value);\n\n            if (std::find(divisors.begin(), divisors.end(), divs) == divisors.end()) {\n                divisors.push_back(divs);\n            }\n        }\n    }\n\n    std::sort(divisors.begin(), divisors.end(), [&](int a, int b) {\n        if (groups[a].size() == groups[b].size()) {\n            return a > b;\n        }\n        return groups[a].size() > groups[b].size();\n    });\n\n    for (auto &pair : groups) {\n        std::sort(pair.second.begin(), pair.second.end(), std::greater<int>());\n    }\n\n    if (divisors.size() > 0) {\n        int divA = divisors[0];\n        out << divA << \" \" << groups[divA].size() << \" \" << groups[divA][0] << \"\\n\";\n    }\n    if (divisors.size() > 1) {\n        int divB = divisors[1];\n        out << divB << \" \" << groups[divB].size() << \" \" << groups[divB][0] << \"\\n\";\n    } else {\n        out << \"0 0 0\\n\";\n    }\n\n    in.close();\n    out.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1569,
  "metadata": {
    "id": 811,
    "examples": [
      {
        "in": "2 3\n16 2 4\n10 6 5",
        "out": "4 2 10\n2 2 5",
        "explainer": ""
      },
      {
        "in": "2 3\n2 15 4\n10 6 5",
        "out": "4 3 15\n2 2 5",
        "explainer": ""
      }
    ],
    "body": "Se consideră un tablou bidimensional cu $m$ linii, $n$ coloane și elemente numere naturale. Pentru fiecare element se determină numărul de divizori pozitivi. Se formează apoi grupe cu elementele tabloului care au același număr de divizori, grupe notate $G_1, G_2, \\dots, G_k$. Se ordonează descrescător grupele după numărul de elemente ce le conțin. Se știe că o grupă $G_1$ se află în fața unei alte grupe $G_2$ dacă $G_1$ are mai multe elemente decât $G_2$ sau, în cazul în care cele două grupe conțin același număr de elemente, numărul de divizori ai elementelor din grupa $G_1$ este mai mare decât numărul de divizori ai elementelor din grupa $G_2$. După ordonarea descrescătoare a grupelor, notăm prima grupă cu $A$ și a doua grupă cu $B$. În cazul în care toate elementele vor avea același număr de divizori, va exista o singură grupă, grupa $A$.\n\n# Cerință\n\nScrieți un program care citește $m$, $n$, elementele tabloului și afișează:\n* numărul de divizori pozitivi pentru grupa $A$, numărul de elemente din grupă și cea mai mare valoare din grupă;\n* numărul de divizori pozitivi pentru grupa $B$, numărul de elemente din grupă și cea mai mare valoare din grupă; în cazul în care nu există grupa a doua, se va afișa de trei ori valoarea $0$\n\n# Date de intrare\n\nFișierul `grupe.in` conține pe prima linie valorile lui $m$ și $n$ separate printr-un spațiu, iar pe celelalte $m$ linii câte $n$ elemente separate două câte două printr-un spațiu, reprezentând elementele tabloului.\n\n# Date de ieșire\n\nFișierul `grupe.out` va conține:\n- pe prima linie valoarea numărului de divizori pozitivi din grupa $A$, numărul de elemente din grupa $A$ și cea mai mare valoare din grupa $A$, valori separate două câte două printr-un singur spațiu;\n- pe a doua linie valoarea numărului de divizori pozitivi din grupa $B$, numărul de elemente din grupa $B$ și cea mai mare valoare din grupa $B$, valori separate două câte două printr-un singur spațiu.\n\n# Restricții și precizări\n\n* $1 \\leq m, n \\leq 100$\n* elementele tabloului bidimensional inițial sunt mai mici sau egale decât $100 \\ 000$ și mai mari decât $1$;\n* grupă poate fi compusă dintr-un singur element\n* se acordă $50\\%$ din punctaj pentru afișarea corectă a fiecărei linii",
    "header": {
      "problem_id": 811,
      "problem_name": "grupe",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "grupe.in",
      "output_filename": "grupe.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "grupe.in",
      "output": "grupe.out"
    },
    "consoleInteraction": false
  }
}