{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/849/2024-05-06T17:18:11.016Z-05121.log",
  "attemptStart": 1715015891.016,
  "attemptEnd": 1715015932.074,
  "attemptDuration": 41.05799984931946,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvoid increment(vector<int>& digits, const vector<int>& counts, bool& found) {\n    int carry = 1;\n    for (int i = digits.size() - 1; i >= 0 && carry; --i) {\n        digits[i]++;\n        carry = 0;\n        if (digits[i] == 10) {\n            digits[i] = 0;\n            carry = 1;\n        }\n    }\n    if (carry) {\n        digits.insert(digits.begin(), 1);\n    }\n}\n\nbool valid(const vector<int>& digits, const vector<int>& counts) {\n    vector<int> count(10, 0);\n    for (int digit : digits) {\n        count[digit]++;\n    }\n    return count == counts;\n}\n\nint main() {\n    ifstream fin(\"tcif.in\");\n    ofstream fout(\"tcif.out\");\n    \n    int A, B, C, c1, c2, c3;\n    string N;\n    fin >> A >> B >> C >> c1 >> c2 >> c3 >> N;\n    \n    vector<int> counts(10, 0);\n    counts[c1] = A;\n    counts[c2] = B;\n    counts[c3] = C;\n    \n    vector<int> digits;\n    for (char digit : N) {\n        digits.push_back(digit - '0');\n    }\n    \n    bool found = false;\n    while (!found) {\n        increment(digits, counts, found);\n        found = valid(digits, counts);\n    }\n    \n    for (int digit : digits) {\n        fout << digit;\n    }\n    fout << \"\\n\";\n    \n    fin.close();\n    fout.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1874,
  "metadata": {
    "id": 849,
    "examples": [
      {
        "in": "2 2 2 3 2 4\n293187",
        "out": "322344",
        "explainer": ""
      },
      {
        "in": "2 3 1 1 0 6\n44589",
        "out": "100016",
        "explainer": ""
      }
    ],
    "body": "Avem la dispoziție patru numere naturale $N, A, B, C$, precum și trei cifre $c1, c2, c3$ distincte două câte două.\n\n# Cerință\n\nSă se determine numărul natural minim, strict mai mare decât $N$, care are exact $A$ cifre $c1$, $B$ cifre $c2$, $C$ cifre $c3$ și nu conține alte cifre.\n\n# Date de intrare\n\nFișierul de intrare `tcif.in` conține pe prima linie, separate prin câte un spațiu, numerele naturale $A \\ B \\ C \\ c1 \\ c2 \\ c3$. Pe linia a doua se află numărul natural $N$.\n\n# Date de ieșire\n\nFișierul de ieșire `tcif.out` va conține o singură linie pe care va fi scris cel mai mic număr natural strict mai mare decât $N$ care conține exact $A$ cifre $c1$, exact $B$ cifre $c2$ și exact $C$ cifre $c3$ și nu conține alte cifre.\n\n# Restricții și precizări\n\n* $N$ va avea cel puțin o cifră și cel mult $1 \\ 000$ de cifre.\n* Pentru $10$% dintre teste, $N \\leq 30 \\ 000$;\n* Pentru alte $40$% dintre teste, $N$ va avea cel mult $14$ cifre\n* $0 \\leq c1, c2, c3 \\leq 9$; $c1, c2$ și $c3$ sunt distincte două câte două\n* $1 \\leq A, B, C$; $ A + B + C \\leq 1 \\ 000$;\n* Datele de intrare sunt alese astfel încât va exista o soluție.",
    "header": {
      "problem_id": 849,
      "problem_name": "tcif",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "tcif.in",
      "output_filename": "tcif.out",
      "multiple_solutions": false,
      "original_source": "OJI 2014 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "tcif.in",
      "output": "tcif.out"
    },
    "consoleInteraction": false
  }
}