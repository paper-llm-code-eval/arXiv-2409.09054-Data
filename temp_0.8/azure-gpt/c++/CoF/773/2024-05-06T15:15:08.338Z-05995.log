---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
// Include necessary header files
#include <fstream>
#include <algorithm>

// Define constants for time conversion
const int SECONDS_IN_MINUTE = 60;
const int MINUTES_IN_HOUR = 60;

// A structure to hold time information
struct Time {
    int h, m, s;
};

// Function to add time
Time addTime(const Time &start, int minutes, int seconds) {
    Time result;
    int totalSeconds = start.h * MINUTES_IN_HOUR * SECONDS_IN_MINUTE + start.m * SECONDS_IN_MINUTE + start.s + minutes * SECONDS_IN_MINUTE + seconds;
    result.h = (totalSeconds / (MINUTES_IN_HOUR * SECONDS_IN_MINUTE)) % 24; // Ensure hour wraps around 24
    result.m = (totalSeconds / SECONDS_IN_MINUTE) % MINUTES_IN_HOUR;
    result.s = totalSeconds % SECONDS_IN_MINUTE;
    return result;
}

int main() {
    // Open the input file for reading
    std::ifstream inFile("schi.in");
    // Open the output file for writing
    std::ofstream outFile("schi.out");

    // Read the start time from the input file
    Time start;
    inFile >> start.h >> start.m >> start.s;

    // Read the number of competitors
    int n;
    inFile >> n;

    // Initialize variables to store the fastest and slowest times
    Time fastestFinishTime = {23, 59, 59};
    Time slowestFinishTime = {0, 0, 0};

    // Iterate over each competitor
    for (int i = 0; i < n; ++i) {
        // Read the time achieved by the competitor
        int m, s;
        inFile >> m >> s;
        // Calculate the finish time for the current competitor
        Time finishTime = addTime(start, m, s);
        // Update the fastest and slowest finish times
        if ((finishTime.h * MINUTES_IN_HOUR * SECONDS_IN_MINUTE + finishTime.m * SECONDS_IN_MINUTE + finishTime.s) <
            (fastestFinishTime.h * MINUTES_IN_HOUR * SECONDS_IN_MINUTE + fastestFinishTime.m * SECONDS_IN_MINUTE + fastestFinishTime.s))
            fastestFinishTime = finishTime;
        if ((finishTime.h * MINUTES_IN_HOUR * SECONDS_IN_MINUTE + finishTime.m * SECONDS_IN_MINUTE + finishTime.s) >
            (slowestFinishTime.h * MINUTES_IN_HOUR * SECONDS_IN_MINUTE + slowestFinishTime.m * SECONDS_IN_MINUTE + slowestFinishTime.s))
            slowestFinishTime = finishTime;
    }

    // Write the fastest and slowest finish times to the output file
    outFile << fastestFinishTime.h << " "
            << fastestFinishTime.m << " "
            << fastestFinishTime.s << "\n";
    outFile << slowestFinishTime.h << " "
            << slowestFinishTime.m << " "
            << slowestFinishTime.s << "\n";

    // Close the input and output files
    inFile.close();
    outFile.close();

    return 0;
}
```

The code provided reads the start time and each competitor's time from the `schi.in` file using `fstream` instead of `cin`. It calculates the finish times for each competitor and keeps track of the fastest and slowest times, then writes these times to the `schi.out` file. It avoids using `cout`, `cin`, `printf()`, and `scanf()` according to the constraints.
