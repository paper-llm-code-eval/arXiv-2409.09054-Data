---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `schi.in` and write to `schi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În tabără la munte s-a organizat un concurs de schi fond. Toţi concurenţii au parcurs aceeaşi distanţă şi au luat startul în acelaşi moment. La start s-au aliniat $n$ concurenţi iar pentru fiecare concurent se cunoaşte timpul în care a parcurs traseul, exprimat în minute şi secunde.

Se cunoaşte de asemenea ora, minutul şi secunda la care s-a dat startul.

# Cerință

Scrieţi un program care să determine ora, minutul şi secunda în care ajunge la linia de sosire primul concurent şi ora, minutul şi secunda în care ajunge la linia de sosire ultimul concurent. 


# Date de intrare

Fişierul de intrare `schi.in` conţine:

* pe prima linie $3$ numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda la care s-a dat startul
* pe a doua linie numărul natural $n$ reprezentând numărul concurenţilor
* Următoarele $n$ linii vor conţine câte două numere naturale $m$ şi $s$, separate prin câte un spaţiu, reprezentând timpul realizat de fiecare concurent, exprimat în minute şi secunde


# Date de ieșire


În fişierul `schi.out` se vor scrie două linii:

* pe prima linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns primul la linia de sosire
* pe a doua linie se vor scrie trei numere naturale, separate prin câte un spaţiu, reprezentând ora, minutul şi secunda sosirii concurentului care a ajuns ultimul la linia de sosire



# Restricții și precizări

* $1 < n < 100$;
* Startul se dă între orele 8:00 și 20:00;
* $0 \le m < 60$;
* $0 \le s < 60$.

---

Example:
`schi.in`
```
10 50 3
5
10 20
12 15
8 58
15 3
10 12
```

`schi.out`
```
10 59 1
11 5 6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

// Function to normalize time adding extra minutes and hours if there are more than 60 seconds or 60 minutes
void normalizeTime(int &hours, int &minutes, int &seconds) {
    minutes += seconds / 60;
    seconds %= 60;
    hours += minutes / 60;
    minutes %= 60;
    hours %= 24; // If the time is beyond midnight, loop back to start of the day
}

int main() {
    std::ifstream fin("schi.in");
    std::ofstream fout("schi.out");

    int startHour, startMinute, startSecond, n;
    fin >> startHour >> startMinute >> startSecond >> n;

    int minTime = 24 * 60 * 60; // maximum seconds in a day
    int maxTime = 0;

    for (int i = 0; i < n; ++i) {
        int minutes, seconds;
        fin >> minutes >> seconds;

        int totalTimeInSeconds = minutes * 60 + seconds;
        minTime = std::min(minTime, totalTimeInSeconds);
        maxTime = std::max(maxTime, totalTimeInSeconds);
    }

    // Calculate finish times for first and last competitors
    int firstHours = startHour, firstMinutes = startMinute, firstSeconds = startSecond + minTime;
    normalizeTime(firstHours, firstMinutes, firstSeconds);

    int lastHours = startHour, lastMinutes = startMinute, lastSeconds = startSecond + maxTime;
    normalizeTime(lastHours, lastMinutes, lastSeconds);

    fout << firstHours << " " << firstMinutes << " " << firstSeconds << "\n";
    fout << lastHours << " " << lastMinutes << " " << lastSeconds << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

The above code reads the input times from the file `schi.in`, computes the earliest and latest finish times by converting all times to seconds, then normalizes these times back to hours, minutes, and seconds, and writes the results to `schi.out`. The code uses `<fstream>` for file operations and `<algorithm>` for the `min` and `max` functions. The `normalizeTime` function adjusts the hours, minutes, and seconds to ensure all values are within their appropriate ranges.
