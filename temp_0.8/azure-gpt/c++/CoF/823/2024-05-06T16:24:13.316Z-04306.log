---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `arme.in` and write to `arme.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vasile joacă (din nou!) jocul său preferat cu împuşcături. Personajul său are la brâu $N$ arme, aşezate în $N$ huse speciale, numerotate de la $1$ la $N$. Arma din husa $i$ are puterea ${pb}_i$.

În camera armelor a găsit $M$ arme, aşezate pe perete, în $M$ locaţii, numerotate de la $1$ la $M$. Pentru fiecare armă $j$ este cunoscută puterea sa ${pc}_j$.

Vasile poate înlocui arme pe care le are la brâu cu arme aflate pe perete în camera armelor. La o înlocuire el ia arma de pe perete din locaţia $j$ şi o pune la brâu în husa $i$, iar arma din husa $i$ o pune pe perete în locaţia $j$.

# Cerință

Scrieţi un program care să determine suma maximă a puterilor armelor pe care le va avea la brâu Vasile după efectuarea înlocuirilor.

# Date de intrare

Fișierul de intrare `arme.in` conține pe prima linie numerele naturale $N \ M$, reprezentând numărul de arme pe care le are la brâu, respectiv numărul de arme aflate în camera armelor. Pe a doua linie se află $N$ numere naturale ${pb}_1 \ {pb}_2 \ \dots \ {pb}_N$ reprezentând în ordine puterile armelor pe care Vasile le are la brâu. Pe a treia linie se află $M$ numere naturale ${pc}_1 \ {pc}_2 \ \dots \ {pc}_M$ reprezentând în ordine puterile armelor aflate în camera armelor. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.

# Date de ieșire

Fișierul de ieșire `arme.out` va conține o singură linie pe care va fi scrisă suma maximă a puterilor armelor de la brâul lui Vasile, după efectuarea înlocuirilor.

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* Puterile armelor sunt numere naturale $\leq 10 \ 000$.

---

Example:
`arme.in`
```
3 2
3 1 7
4 5
```

`arme.out`
```
16
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

int main() {
    std::ifstream fin("arme.in");
    std::ofstream fout("arme.out");
    
    int N, M;
    fin >> N >> M;
    
    std::vector<int> pb(N);
    std::vector<int> pc(M);
    
    for (int i = 0; i < N; ++i) {
        fin >> pb[i];
    }
    
    for (int i = 0; i < M; ++i) {
        fin >> pc[i];
    }
    
    // Sort both arrays to maximize the sum
    std::sort(pb.begin(), pb.end());
    std::sort(pc.begin(), pc.end(), std::greater<int>());
    
    // Replace the weapons on the belt with more powerful ones from the wall
    for (int i = 0; i < std::min(N, M); i++) {
        if (pb[i] < pc[i])
            pb[i] = pc[i];
        else
            break; // No more beneficial replacements possible
    }
    
    // Calculate the maximum sum of powers
    int maxSum = 0;
    for (int i = 0; i < N; i++) {
        maxSum += pb[i];
    }
    
    fout << maxSum;
    
    fin.close();
    fout.close();
    
    return 0;
}
```
In this code, I have ensured that the program reads from "arme.in" and writes to "arme.out" using `std::ifstream` and `std::ofstream` instead of standard I/O operations. I've also used `std::sort` to sort the powers of the weapons from both the belt and the wall, ensuring that we can always replace the weakest belt weapon with the strongest wall weapon to maximize the sum. If a wall weapon is weaker than a belt weapon, no further replacements are beneficial, so the loop breaks early.
