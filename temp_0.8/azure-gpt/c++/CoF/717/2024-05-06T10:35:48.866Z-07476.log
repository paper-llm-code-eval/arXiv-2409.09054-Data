---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm următorul şir:

`a`$,$ `b`$,$ `ba`$,$ `bab`$,$ `babba`$,$ `babbabab`$, \dots$

# Cerință

Scrieţi un program care să determine care este cel de-al $n$-lea termen al şirului

# Date de intrare

Fişierul de intrare `sir.in` conţine o singură linie pe care se află numărul natural $n$.

# Date de ieșire

Fişierul de ieşire `sir.out` va conţine o singură linie pe care se află al $n$-lea termen din şir

# Restricții și precizări

* $1 \leq n \leq 20$;

---

Example:
`sir.in`
```
4
```

`sir.out`
```
bab
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <string>
#include <vector>

std::string generateTerm(const std::vector<std::string> &sequence, int n) {
    if (n < sequence.size()) {
        return sequence[n];
    }
    return sequence[n - 1] + sequence[n - 2];
}

int main() {
    std::ifstream inFile("sir.in");
    std::ofstream outFile("sir.out");

    int n;
    inFile >> n;
    n -= 1; // Adjust because we want the nth term and vector is 0 indexed

    std::vector<std::string> sequence{"a", "b"};
    sequence.reserve(n);

    for (int i = 2; i <= n; ++i) {
        sequence.push_back(generateTerm(sequence, i));
    }

    outFile << sequence[n];
    return 0;
}
```
This solution creates a vector to store the terms of the sequence and populates it iteratively until the nth term is computed. Terms are generated based on the given recursive pattern and written directly to the output file `sir.out`. The `reserve` call is used to avoid unnecessary reallocations as the size of the vector is known to be at most 20 (according to the problem constraints).
