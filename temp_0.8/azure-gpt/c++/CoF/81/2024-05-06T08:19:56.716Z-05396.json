{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/81/2024-05-06T08:19:56.716Z-05396.log",
  "attemptStart": 1714983596.716,
  "attemptEnd": 1714983669.736,
  "attemptDuration": 73.01999998092651,
  "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nconst int MOD = 1'000'000'007;\n\n// Fast input/output\nvoid fastIO() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n}\n\n// Function to calculate the number of ways to partition into maximum packets\nlong long calcWays(int N, vector<int>& lastSeen, vector<int>& packets) {\n    long long ways = 1;\n    for (int i = 1; i < packets.size(); ++i) {\n        ways = (ways * (packets[i] - packets[i - 1])) % MOD;\n    }\n    return ways;\n}\n\nint main() {\n    fastIO();\n    int P, T, N, K;\n    cin >> P >> T;\n    while (T--) {\n        cin >> N >> K;\n        vector<vector<int>> coffee(N, vector<int>(K));\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < K; ++j) {\n                char ch;\n                cin >> ch;\n                coffee[i][j] = ch - '0';\n            }\n        }\n\n        vector<int> lastSeen(K, -1), packets;\n        int maxPackets = 0;\n        for (int i = 0; i < N; ++i) {\n            int minLastSeen = N;\n            for (int j = 0; j < K; ++j) {\n                if (coffee[i][j]) lastSeen[j] = i;\n                minLastSeen = min(minLastSeen, lastSeen[j]);\n            }\n            if (minLastSeen != -1 && (packets.empty() || minLastSeen > packets.back())) {\n                packets.push_back(i);\n                maxPackets++;\n            }\n        }\n\n        // Output based on the problem P value\n        if (P == 1) {\n            cout << maxPackets << '\\n';\n        } else if (P == 2) {\n            long long ways = calcWays(N, lastSeen, packets);\n            cout << ways << '\\n';\n        }\n    }\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1904,
  "metadata": {
    "id": 81,
    "examples": [
      {
        "in": "1\n3\n3 3\n010\n101\n111\n6 2\n10\n01\n00\n10\n11\n01\n5 4\n0100\n1010\n0000\n1110\n0001",
        "out": "2\n2\n1",
        "explainer": ""
      },
      {
        "in": "2\n3\n3 3\n010\n101\n111\n6 2\n10\n01\n00\n10\n11\n01\n5 4\n0100\n1010\n0000\n1110\n0001",
        "out": "1\n3\n1",
        "explainer": ""
      }
    ],
    "body": "Dezamăgiți de lipsa fotbalului din ultima perioadă, Ștefan și Georgian și-au deschis (în secret) o afacere cu boabe de cafea, comercializând $K$ tipuri diferite de cafea. Astfel, timp de $N$ zile ei produc cafea, urmând să formeze din boabele obținute în zile **consecutive** pachete ce conțin **toate** tipurile de cafea.\n\nConcret, cei doi știu pentru fiecare zi ce tipuri de cafea produc în acea zi (posibil niciun tip, caz în care afacerea ia o pauză), după care ei împart zilele în secvențe continue astfel încât, pentru fiecare tip de cafea, fiecare secvență de zile să conțină cel puțin o zi în care să fie produs acel tip de cafea.\n\n# Cerință\nÎnainte de a se apuca de împachetat boabele, Ștefan și Georgian își pun două întrebări:\n\n1. Care este numărul maxim de pachete ce pot fi formate?\n2. Care este numărul de moduri de a împărți zilele astfel încât să se formeze număr maxim de pachete valide (ce conțin toate tipurile de cafea)?\n\n# Date de intrare\nPe prima linie se găsește un număr întreg $P$, reprezentând numărul cerinței de rezolvat.\nPe cea de-a doua linie se găsește un număr întreg $T$, reprezentând numărul de scenarii pentru care va trebui să rezolvați problema.\nUrmează cele $T$ instanțe ale problemei, fiecare fiind compusă din $N + 1$ linii: pe prima linie se vor afla două numere întregi $N$ și $K$, reprezentând numărul de zile, respectiv numărul de tipuri diferite de cafea; pe următoarele $N$ linii câte $K$ cifre binare, cea de-a $j$-a cifră de pe linia $i$ fiind $0$ dacă în ziua $i$ tipul $j$ de cafea nu este produs, sau fiind $1$ dacă în ziua $i$ tipul $j$ de cafea este produs.\n\n# Date de ieșire\nPentru fiecare dintre cele $T$ instanțe se va afișa răspunsul, începând de la o linie noua, după cum urmează:\n\n1. Dacă $P = 1$, atunci se va afișa pe o singură linie numărul maxim de pachete valide ce pot fi formate.\n2. Dacă $P = 2$, atunci se va afișa pe o singură linie numărul de moduri de a împărți zilele în secvențe continue astfel încât să se formeze număr maxim de pachete. Răspunsul va fi afișat $\\text{mod } 1\\ 000\\ 000\\ 007$.\n\n# Restricții și precizări\n* $1 ≤ P ≤ 2$\n* $1 ≤ T ≤ 3$\n* $1 ≤ N ≤ 200\\ 000$\n* $1 ≤ K ≤ 20$\n* Se garantează că fiecare tip de cafea apare în cel puțin una dintre cele $N$ zile.\n\n## Punctare\n* Pentru 6 puncte: $P = 1, N ≤ 15$\n* Pentru alte 6 puncte: $P = 1, N ≤ 100$\n* Pentru alte 9 puncte: $P = 1, N ≤ 2\\ 000$\n* Pentru alte 10 puncte: $P = 1, N ≤ 200\\ 000$\n* Pentru alte 10 puncte: $P = 2, K = 1, N ≤ 200\\ 000$\n* Pentru alte 4 puncte: $P = 2, N ≤ 15$\n* Pentru alte 4 puncte: $P = 2, N ≤ 20$\n* Pentru alte 9 puncte: $P = 2, N ≤ 100$\n* Pentru alte 8 puncte: $P = 2, N ≤ 700$\n* Pentru alte 8 puncte: $P = 2, N ≤ 2\\ 000$\n* Pentru alte 8 puncte: $P = 2, N ≤ 10\\ 000$\n* Pentru alte 9 puncte: $P = 2, N ≤ 70\\ 000$\n* Pentru alte 9 puncte: $P = 2, N ≤ 200\\ 000$",
    "header": {
      "problem_id": 81,
      "problem_name": "Bob",
      "tags": "[DP]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.8,
      "memory_limit_mb": 128,
      "console_input": true,
      "multiple_solutions": false,
      "original_source": "OJI 2021 XI-XII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "128m",
    "filename": null,
    "consoleInteraction": true
  }
}