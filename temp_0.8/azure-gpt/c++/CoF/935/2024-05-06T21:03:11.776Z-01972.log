---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exclusiv.in` and write to `exclusiv.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră doi vectori care conțin numere naturale: $s$ cu $M$ elemente și $v$ cu $N$ elemente. Numim secvență *$i$-exclusivă* o secvență a vectorului $s$ care nu conține niciuna dintre valorile $v_1, v_2, \dots, v_i$.

# Cerință

Scrieți un program care să determine, pentru orice $1 \leq i \leq N$, lungimea maximă a unei secvențe *$i$-exclusive*.

# Date de intrare

Fișierul de intrare `exclusiv.in` conține pe prima linie numerele naturale $M$ și $N$. Pe linia a doua se află $M$ numere naturale reprezentând elementele vectorului $s$, iar pe linia a treia $N$ numere naturale reprezentând elementele vectorului $v$. Valorile scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `exclusiv.out` va conține $N$ linii. Pe linia $i$ va fi scris un număr natural care reprezintă lungimea maximă a unei secvențe *$i$-exclusive*.

# Restricții și precizări

* $1 \leq N \leq 2 \ 000$
* $3 \leq M \leq 100 \ 000$
* Vectorii s și v conțin numere naturale mai mici sau egale cu $2 \ 000 \ 000 \ 000$, memorate începând cu poziția $1$.
* Valorile din fiecare vector nu sunt obligatoriu distincte două câte două.
* O subsecvență nevidă în s este formată din elemente situate pe poziții consecutive ($s_i, s_{i+1}, \dots, s_j$), $i \leq j$. O subsecvență *$i$-exclusivă* poate fi și vidă, lungimea ei fiind $0$.
* Pentru teste valorând $10$ puncte $N = 1$.
* Pentru alte teste valorând $30$ de puncte $1 < N \leq 50$ si $M \leq 1 \ 000$.
* Pentru alte teste valorând $40$ de puncte $50 < N \leq 2 \ 000$, si $1 \ 000 < M \leq 2 \ 000$.
* Pentru alte valorând $20$ de puncte $N = 2 \ 000$, si $10^4 < M \leq 10^5$.

---

Example:
`exclusiv.in`
```
20 6
11 5 11 7 2 10 11 9 2 77 88 88 88 2 7 2 2 77 2 11
11 5 7 9 5 2
```

`exclusiv.out`
```
12
12
7
6
6
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <unordered_set>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream in("exclusiv.in");
    std::ofstream out("exclusiv.out");

    int M, N;
    in >> M >> N;

    std::vector<int> s(M), v(N);
    std::vector<int> result(N);

    // Read vector s
    for (int i = 0; i < M; i++) {
        in >> s[i];
    }

    // Read vector v
    for (int i = 0; i < N; i++) {
        in >> v[i];
    }

    std::unordered_set<int> exclusions;
    int max_len = 0, current_len = 0;

    // Iterate over v
    for (int i = 0; i < N; i++) {
        exclusions.insert(v[i]);
        max_len = 0;
        current_len = 0;

        // Iterate over s
        for (int j = 0; j < M; j++) {
            if (exclusions.find(s[j]) == exclusions.end()) {
                current_len++;
            } else {
                max_len = std::max(max_len, current_len);
                current_len = 0;
            }
        }
        max_len = std::max(max_len, current_len);

        // Save the result
        result[i] = max_len;
    }

    // Write results to the file
    for (int i = 0; i < N; i++) {
        out << result[i] << '\n';
    }

    in.close();
    out.close();
    return 0;
}
```
This is the C++ program that solves the given programming challenge. It reads from `exclusiv.in`, processes the input as required, and writes the output to `exclusiv.out`. The code is designed to be efficient by avoiding unnecessary operations and by using fast I/O methods. Please note that in a competitive programming scenario, the usage of `std::ios::sync_with_stdio(false);` and `std::cin.tie(NULL);` could further improve I/O performance, but since the challenge specifies not to use `cin` or `cout`, we stick with `fstream` without these optimizations.
