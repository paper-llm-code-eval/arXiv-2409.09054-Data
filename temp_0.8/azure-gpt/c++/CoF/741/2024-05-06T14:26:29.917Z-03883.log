---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

int main() {
    std::ifstream fin("ocr.in");
    std::ofstream fout("ocr.out");

    int n, m;
    fin >> n >> m;

    std::vector<std::vector<double>> image(n, std::vector<double>(m));
    std::vector<double> row_sums(n), col_sums(m);

    // Read the image and calculate row and column sums
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> image[i][j];
            row_sums[i] += image[i][j];
            col_sums[j] += image[i][j];
        }
    }
    fin.close();

    // Find the row with the minimum absolute difference of sums above and below
    double above_sum = 0, below_sum = 0;
    for (double value : row_sums) below_sum += value;
    int center_row = 0;
    double min_diff_row = below_sum;

    for (int i = 0; i < n; ++i) {
        above_sum += row_sums[i];
        below_sum -= row_sums[i];
        double current_diff = std::abs(above_sum - below_sum);
        if (current_diff <= min_diff_row) {
            min_diff_row = current_diff;
            center_row = i;
        }
    }

    // Find the column with the minimum absolute difference of sums left and right
    double left_sum = 0, right_sum = 0;
    for (double value : col_sums) right_sum += value;
    int center_col = 0;
    double min_diff_col = right_sum;

    for (int j = 0; j < m; ++j) {
        left_sum += col_sums[j];
        right_sum -= col_sums[j];
        double current_diff = std::abs(left_sum - right_sum);
        if (current_diff <= min_diff_col) {
            min_diff_col = current_diff;
            center_col = j;
        }
    }

    // Write coordinates to file (add 1 to convert from 0-based to 1-based indexing)
    fout << center_row + 1 << ' ' << center_col + 1;
    fout.close();

    return 0;
}
```

This solution reads input from `ocr.in` and writes output to `ocr.out` using the `ifstream` and `ofstream` classes from the `<fstream>` library. It calculates row and column sums in two separate vectors, then iterates over these sums to find the center of gravity by minimizing the absolute differences of cumulative sums. Note that we add 1 to the row and column indices before writing to `ocr.out`, as the problem statement uses 1-based indexing.
---------- user ----------


Program result did not match expected result.
Input data:
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```
Expected output:
```
3 3
```
Found output:
```
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution contains an error in the logic used to determine the center of gravity. Specifically, it incorrectly identifies the center column due to not properly handling the case where multiple centers of gravity exist on the same line with the maximum difference.

To fix this, we need to ensure that we choose the largest column index when there are multiple valid candidates with the same minimal difference. The same applies to finding the correct row index.

Let's rewrite the solution with this fix:

```cpp
#include <fstream>
#include <vector>
#include <limits>

int main() {
    std::ifstream fin("ocr.in");
    std::ofstream fout("ocr.out");

    int n, m;
    fin >> n >> m;

    std::vector<std::vector<double>> image(n, std::vector<double>(m));
    std::vector<double> row_sums(n, 0), col_sums(m, 0);

    // Read the image and calculate row and column sums
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> image[i][j];
            row_sums[i] += image[i][j];
            col_sums[j] += image[i][j];
        }
    }
    fin.close();

    // Find the row with the minimum absolute difference of sums above and below
    double total_sum = 0;
    for (double sum : row_sums) total_sum += sum;

    double current_sum = 0;
    double diff = std::numeric_limits<double>::max();
    int center_row = -1;

    for (int i = 0; i < n; ++i) {
        current_sum += row_sums[i];
        double upper_sum = current_sum - row_sums[i];
        double lower_sum = total_sum - current_sum;
        double current_diff = std::abs(upper_sum - lower_sum);
        if (current_diff <= diff) {
            diff = current_diff;
            center_row = i;
        }
    }

    // Find the column with the minimum absolute difference of sums left and right
    total_sum = 0;
    for (double sum : col_sums) total_sum += sum;

    current_sum = 0;
    diff = std::numeric_limits<double>::max();
    int center_col = -1;

    for (int j = 0; j < m; ++j) {
        current_sum += col_sums[j];
        double left_sum = current_sum - col_sums[j];
        double right_sum = total_sum - current_sum;
        double current_diff = std::abs(left_sum - right_sum);
        if (current_diff <= diff) {
            diff = current_diff;
            center_col = j;
        }
    }

    // Write coordinates to file (add 1 to convert from 0-based to 1-based indexing)
    fout << center_row + 1 << ' ' << center_col + 1;
    fout.close();

    return 0;
}
```

This revised solution calculates the total sum of all row and column values ahead of the loop. Then, as we iterate through the rows and columns, we update `current_sum` and calculate the difference between the sums above and below (for rows) and left and right (for columns). If the current difference is less than or equal to the smallest difference found so far, we update the center row or column to the current index. This way, we ensure that in case of multiple centers with the same difference, we select the one with the maximum index, adhering to the problem requirements.
