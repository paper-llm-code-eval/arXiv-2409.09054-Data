---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ocr.in` and write to `ocr.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.
Centrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.
Să considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).

~[ocr.png|width=30em]

# Cerință

Scrieți un program care să determine centrul de gravitate al unei imagini scanate.

# Date de intrare

Fișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.

# Date de ieșire

Fișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.

# Restricții și precizări

* $1 \leq n, m \leq 50$;
* Valorile reale sunt exprimate cu maximum două zecimale
* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).

---

Example:
`ocr.in`
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```

`ocr.out`
```
3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <iomanip>

int main() {
    std::ifstream fin("ocr.in");
    std::ofstream fout("ocr.out");

    int n, m;
    fin >> n >> m;
    std::vector<std::vector<double>> image(n, std::vector<double>(m));
    std::vector<double> rowSum(n), colSum(m);

    // Read the image and calculate the sum of each row and column
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> image[i][j];
            rowSum[i] += image[i][j];
            colSum[j] += image[i][j];
        }
    }
    fin.close();

    // Find the center of gravity row
    double upperSum = 0, lowerSum = 0, minRowDiff = std::numeric_limits<double>::max();
    int centerRow = -1;
    for (int i = 0; i < n; ++i) {
        lowerSum += rowSum[i];
        double currentDiff = std::abs(upperSum - (lowerSum - rowSum[i]));
        if (currentDiff <= minRowDiff) {
            minRowDiff = currentDiff;
            centerRow = i + 1;
        }
        upperSum += rowSum[i];
    }

    // Find the center of gravity column
    double leftSum = 0, rightSum = 0, minColDiff = std::numeric_limits<double>::max();
    int centerCol = -1;
    for (int j = 0; j < m; ++j) {
        rightSum += colSum[j];
        double currentDiff = std::abs(leftSum - (rightSum - colSum[j]));
        if (currentDiff <= minColDiff) {
            minColDiff = currentDiff;
            centerCol = j + 1;
        }
        leftSum += colSum[j];
    }

    // Output to ocr.out
    fout << centerRow << " " << centerCol << std::endl;
    fout.close();

    return 0;
}
```

This solution reads image data from `ocr.in` file, calculates row and column sums, and then finds the center of gravity by minimizing the difference of sums above/below the center row and left/right of the center column. It writes the result to `ocr.out`. The use of `<fstream>` instead of `cin`, `cout`, `printf`, and `scanf` ensures efficient file I/O operations.
---------- user ----------


Program result did not match expected result.
Input data:
```
5 5
0.1 0.2 0.1 0.2 0.1
0.1 0.2 0.3 0.1 0.1
0.2 0.3 0.1 0.1 0.3
0.4 0.1 0.1 0.1 0.2
0.2 0.2 0.3 0.3 0.1
```
Expected output:
```
3 3
```
Found output:
```
5 5
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous result seems to be that the program is not correctly identifying the center of gravity according to the challenge's definition. I will fix the algorithm to ensure it finds the correct center of gravity as per the problem statement.

The intention is to calculate the cumulative sums from top to bottom and from left to right, then to find the row and column where the absolute difference between the sums above and below (for rows) or left and right (for columns) is minimized.

Here's the corrected algorithm and solution:

```cpp
#include <fstream>
#include <vector>
#include <cmath>

int main() {
    std::ifstream fin("ocr.in");
    std::ofstream fout("ocr.out");

    int n, m;
    fin >> n >> m;
    std::vector<std::vector<double>> image(n, std::vector<double>(m));
    std::vector<double> prefixRowSum(n + 1, 0.0), prefixColSum(m + 1, 0.0);

    // Read the image and compute the prefix sums for rows and columns
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < m; ++j) {
            fin >> image[i][j];
            prefixRowSum[i + 1] = prefixRowSum[i] + image[i][j];
            prefixColSum[j + 1] = prefixColSum[j] + image[i][j];
        }
    }
    fin.close();

    // Find the center of gravity row
    int centerRow = 0;
    double minRowDiff = std::numeric_limits<double>::max();
    double totalRowSum = prefixRowSum[n];
    for (int i = 1; i <= n; ++i) {
        double topSum = prefixRowSum[i - 1];
        double bottomSum = totalRowSum - prefixRowSum[i];
        double diff = std::abs(topSum - bottomSum);
        if (diff < minRowDiff) {
            minRowDiff = diff;
            centerRow = i;
        }
    }

    // Find the center of gravity column
    int centerCol = 0;
    double minColDiff = std::numeric_limits<double>::max();
    double totalColSum = prefixColSum[m];
    for (int j = 1; j <= m; ++j) {
        double leftSum = prefixColSum[j - 1];
        double rightSum = totalColSum - prefixColSum[j];
        double diff = std::abs(leftSum - rightSum);
        if (diff < minColDiff) {
            minColDiff = diff;
            centerCol = j;
        }
    }

    // Output to ocr.out
    fout << centerRow << " " << centerCol << std::endl;
    fout.close();

    return 0;
}
```

Now the algorithm calculates the cumulative sum for rows and columns separately and then iteratively determines the smallest difference in sums, identifying the row and column of the center of gravity. The output is then written to `ocr.out` as specified.
