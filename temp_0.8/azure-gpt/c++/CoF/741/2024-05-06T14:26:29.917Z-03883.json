{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/741/2024-05-06T14:26:29.917Z-03883.log",
  "attemptStart": 1715005589.917,
  "attemptEnd": 1715005637.926,
  "attemptDuration": 48.009000062942505,
  "code": "#include <fstream>\n#include <vector>\n#include <limits>\n\nint main() {\n    std::ifstream fin(\"ocr.in\");\n    std::ofstream fout(\"ocr.out\");\n\n    int n, m;\n    fin >> n >> m;\n\n    std::vector<std::vector<double>> image(n, std::vector<double>(m));\n    std::vector<double> row_sums(n, 0), col_sums(m, 0);\n\n    // Read the image and calculate row and column sums\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < m; ++j) {\n            fin >> image[i][j];\n            row_sums[i] += image[i][j];\n            col_sums[j] += image[i][j];\n        }\n    }\n    fin.close();\n\n    // Find the row with the minimum absolute difference of sums above and below\n    double total_sum = 0;\n    for (double sum : row_sums) total_sum += sum;\n\n    double current_sum = 0;\n    double diff = std::numeric_limits<double>::max();\n    int center_row = -1;\n\n    for (int i = 0; i < n; ++i) {\n        current_sum += row_sums[i];\n        double upper_sum = current_sum - row_sums[i];\n        double lower_sum = total_sum - current_sum;\n        double current_diff = std::abs(upper_sum - lower_sum);\n        if (current_diff <= diff) {\n            diff = current_diff;\n            center_row = i;\n        }\n    }\n\n    // Find the column with the minimum absolute difference of sums left and right\n    total_sum = 0;\n    for (double sum : col_sums) total_sum += sum;\n\n    current_sum = 0;\n    diff = std::numeric_limits<double>::max();\n    int center_col = -1;\n\n    for (int j = 0; j < m; ++j) {\n        current_sum += col_sums[j];\n        double left_sum = current_sum - col_sums[j];\n        double right_sum = total_sum - current_sum;\n        double current_diff = std::abs(left_sum - right_sum);\n        if (current_diff <= diff) {\n            diff = current_diff;\n            center_col = j;\n        }\n    }\n\n    // Write coordinates to file (add 1 to convert from 0-based to 1-based indexing)\n    fout << center_row + 1 << ' ' << center_col + 1;\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2634,
  "metadata": {
    "id": 741,
    "examples": [
      {
        "in": "5 5\n0.1 0.2 0.1 0.2 0.1\n0.1 0.2 0.3 0.1 0.1\n0.2 0.3 0.1 0.1 0.3\n0.4 0.1 0.1 0.1 0.2\n0.2 0.2 0.3 0.3 0.1",
        "out": "3 3",
        "explainer": ""
      },
      {
        "in": "5 10\n0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1\n0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2\n0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3\n0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4\n0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.6",
        "out": "4 6",
        "explainer": ""
      }
    ],
    "body": "O imagine va fi reprezentată ca un tablou dreptunghiular de numere reale, fiecare număr reprezentând o valoare pe scala de gri a imaginii. Valorile sunt cuprinse între $0$ (corespunzând unei regiuni total albe) și $1$ (pentru zona total neagră), cu două zecimale.\nCentrul de gravitate al imaginii este un element al tabloului. Să presupunem că el se află pe linia $i$ și coloana $j$. Atunci diferența, în modul, dintre suma elementelor din zona aflată deasupra liniei $i$ și suma elementelor din zona aflată sub linia $i$, este minimă. În mod analog, pentru această diferență minimă, diferența, în modul, dintre suma elementelor din stânga coloanei $j$ și suma elementelor din dreapta coloanei $j$ trebuie să fie de asemenea minimă.\nSă considerăm ca exemplu următorul tabloul care poate proveni din scanarea literei mici ‘o’. Centrul de gravitate este pe linia $3$ și coloana $3$, deoarece diferența sumelor elementelor din fiecare zonă formată ignorând linia a treia este $0.1$ (sumele sunt $5.55$ și $5.65$) și de asemenea, diferența sumelor elementelor fiecărei zone formate ignorând coloana a treia este $0.1$ (sumele sunt $5.60$ și $5.70$).\n\n~[ocr.png|width=30em]\n\n# Cerință\n\nScrieți un program care să determine centrul de gravitate al unei imagini scanate.\n\n# Date de intrare\n\nFișierul text de intrare `ocr.in` conține reprezentarea unei imagini. Prima linie a fișierului de intrare conține două valori naturale $n$ și $m$ separate printr-un spațiu reprezentând numărul de linii și respectiv numărul de coloane ale tabloului. Urmează $n$ linii, fiecare conținând câte $m$ numere reale din intervalul [$0, 1$] separate prin câte un spațiu, reprezentând imaginea scanată.\n\n# Date de ieșire\n\nFișierul de ieșire `ocr.out` va conține o singură linie pe care se găsesc două numere naturale $l$ și $c$, separate printr-un spațiu, reprezentând coordonatele (linie, coloană) centrului de gravitate. În cazul în care sunt determinate mai multe centre de gravitate, se vor afișa coordonatele celui cu indicele de linie maxim; dacă există mai multe centre de gravitate pe aceeași linie, se va afișa cel cu indicele de coloană maxim.\n\n# Restricții și precizări\n\n* $1 \\leq n, m \\leq 50$;\n* Valorile reale sunt exprimate cu maximum două zecimale\n* Liniile sunt numerotate de la $1$ la $n$ (de sus în jos), iar coloanele de la $1$ la $m$ (de la stânga la dreapta).",
    "header": {
      "problem_id": 741,
      "problem_name": "ocr",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "ocr.in",
      "output_filename": "ocr.out",
      "multiple_solutions": false,
      "original_source": "OJI 2005 VII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "ocr.in",
      "output": "ocr.out"
    },
    "consoleInteraction": false
  }
}