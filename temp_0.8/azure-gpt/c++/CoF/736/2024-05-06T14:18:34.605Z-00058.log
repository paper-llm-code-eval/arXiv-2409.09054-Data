---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `maxd.in` and write to `maxd.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fiind elev în clasa a IX-a, George îşi propune să studieze capitolul divizibilitate cât mai bine. Ajungând la numărul de divizori asociat unui număr natural, constată că sunt numere într-un interval dat, cu acelaşi număr de divizori.
De exemplu, în intervalul $[1, 10]$, numerele $6$, $8$ şi $10$ au acelaşi număr de divizori, și anume 4. De asemenea, $4$ şi $9$ au acelaşi număr de divizori, egal cu $3$, etc.

# Cerinţă
Scrieţi un program care pentru un interval dat determină care este cel mai mic număr din interval ce are număr maxim de divizori. Dacă sunt mai multe numere cu această proprietate se cere să se numere câte sunt.

# Date de intrare
Fişierul de intrare `maxd.in` conţine pe prima linie două numere $a$ şi $b$ separate prin spaţiu reprezentând extremităţile intervalului.

# Date de ieşire
Fişierul de ieşire `maxd.out` va conţine pe prima linie trei numere separate prin câte un spaţiu cu semnificaţia:
- $min =$ cea mai mică valoare din interval care are număr maxim de divizori;
- $nrdiv =$ numărul de divizori ai lui $min$;
- $contor =$ câte numere din intervalul citit mai au acelaşi număr de divizori egal cu $nrdiv$.

# Restricţii şi precizări
- $1 \leq a \leq b \leq 1\ 000\ 000\ 000$
- $0 \leq b-a \leq 10\ 000$
- Dacă aţi determinat corect $min$, obţineţi $50\%$ din punctaj.
- Dacă aţi determinat corect $nrdiv$, obţineţi $20\%$ din punctaj.
- Dacă aţi determinat corect $contor$, obţineţi $30\%$ din punctaj.

---

Example:
`maxd.in`
```
2 10
```

`maxd.out`
```
6 4 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is the C++ solution for the given problem. Note that the code is designed to be compiled with a C++ compiler that supports the C++11 standard or later, due to the use of `<cstdint>`, `<fstream>`, and the range-based for loop.

```cpp
#include <fstream>
#include <vector>
#include <cstdint>

std::vector<int> get_divisors_count(int n) {
    std::vector<int> count(n + 1, 1);
    for (int i = 2; i <= n; ++i) {
        for (int j = i; j <= n; j += i) {
            ++count[j];
        }
    }
    return count;
}

int main() {
    std::ifstream in("maxd.in");
    std::ofstream out("maxd.out");

    int a, b;
    in >> a >> b;
    auto divisors_count = get_divisors_count(b);

    // We initialize min_value, max_divisors, and counter with initial values based on the first number in the range.
    int min_value = a, max_divisors = divisors_count[a], counter = 1;
    for (int i = a + 1; i <= b; ++i) {
        if (divisors_count[i] > max_divisors) {
            min_value = i;
            max_divisors = divisors_count[i];
            counter = 1;
        } else if (divisors_count[i] == max_divisors) {
            ++counter;
        }
    }

    out << min_value << " " << max_divisors << " " << counter << "\n";
    return 0;
}
```

Explanation of the code:
1. The code reads the input values `a` and `b` from the file `maxd.in`.
2. The `get_divisors_count` function returns a vector where each index `i` contains the count of divisors for the number `i`.
3. The main part of the code iterates through the given range from `a` to `b` to find the minimal value with the maximum number of divisors and counts how many numbers have that same number of divisors.
4. Finally, the code writes the results to the file `maxd.out`.

Please ensure that this code is compiled and run in an environment with sufficient stack size, as the `divisors_count` vector may consume a significant amount of memory for large values of `b`. If the environment has limitations on stack size, it's recommended to increase the stack size or to use dynamic allocation for the `divisors_count` vector.
