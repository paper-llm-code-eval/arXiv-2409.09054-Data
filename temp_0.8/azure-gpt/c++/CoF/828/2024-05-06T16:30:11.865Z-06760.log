---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pasiunea Mirunei este să coloreze. Vacanţa trecută şi-a petrecut-o la bunica ei la ţară şi pentru că se cam plictisea s-a gândit să vopsească gardul de la casa bunicii.

Gardul este compus din $N$ scânduri dispuse una lângă alta. Miruna a găsit în garajul bunicii $5$ cutii de vopsea de culori diferite: **albă**, **albastră**, **roşie**, **verde** şi **galbenă**. Când a vopsit gardul, Miruna a respectat următoarele reguli:
-	Dacă o scândură era vopsită cu **alb**, următoarea scândură o vopsea obligatoriu cu **albastru**
-	Dacă o scândură era vopsită cu **albastru**, atunci următoarea scândură o vopsea cu **alb** sau **roşu**
-	Dacă o scândură era vopsită cu **roşu**, atunci următoarea scândură o vopsea cu **albastru** sau **verde**
-	Dacă o scândură era vopsită cu **verde**, atunci următoarea scândură o vopsea cu **roșu** sau **galben**
-	Dacă o scândură era vopsită cu **galben**, atunci următoarea scândură o vopsea obligatoriu cu **verde**

După ce a și-a terminat treaba Miruna își admira “opera de artă” și se întreba în câte moduri diferite ar fi putut să vopsească gardul bunicii. 

# Cerinţă

Ajutați-o pe Miruna să găsească răspunsul la întrebarea sa.

# Date de intrare


Fişierul `culori.in` conţine pe prima sa linie un singur număr natural $N$.


# Date de ieșire


Fişierul de ieşire `culori.out` va conţine pe prima sa linie un singur număr întreg reprezentând numărul de moduri diferite în care Miruna ar fi putut să vopsească gardul bunicii.


# Restricții și precizări

* $1 \leq N \leq 5 \ 000$;
* Pentru $25\%$ dintre teste $N \leq 45$.

---

Example:
`culori.in`
```
4
```

`culori.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
using namespace std;

const int MOD = 1e9 + 7;
const int MAX_N = 5001;

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    int N;
    fin >> N;

    vector<long long> white(MAX_N, 0), blue(MAX_N, 0), red(MAX_N, 0), green(MAX_N, 0), yellow(MAX_N, 0);

    // Base cases for the first plank
    white[1] = 1;
    blue[1] = 1;
    red[1] = 1;
    green[1] = 1;
    yellow[1] = 1;

    for (int i = 2; i <= N; ++i) {
        white[i] = blue[i - 1] % MOD;
        blue[i] = (white[i - 1] + red[i - 1]) % MOD;
        red[i] = (blue[i - 1] + green[i - 1]) % MOD;
        green[i] = (red[i - 1] + yellow[i - 1]) % MOD;
        yellow[i] = green[i - 1] % MOD;
    }

    // Sum the possibilities of ending the fence with each color
    long long result = (white[N] + blue[N] + red[N] + green[N] + yellow[N]) % MOD;
    fout << result << endl;

    fin.close();
    fout.close();
    return 0;
}
```
This C++ solution uses dynamic programming to calculate the number of ways to paint the fence. It keeps track of the number of ways to end the fence with each color for each plank position. The solution reads from `culori.in` and writes to `culori.out` as required, and it avoids using `cin`, `cout`, `printf`, and `scanf`.
