---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `culori.in` and write to `culori.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pasiunea Mirunei este să coloreze. Vacanţa trecută şi-a petrecut-o la bunica ei la ţară şi pentru că se cam plictisea s-a gândit să vopsească gardul de la casa bunicii.

Gardul este compus din $N$ scânduri dispuse una lângă alta. Miruna a găsit în garajul bunicii $5$ cutii de vopsea de culori diferite: **albă**, **albastră**, **roşie**, **verde** şi **galbenă**. Când a vopsit gardul, Miruna a respectat următoarele reguli:
-	Dacă o scândură era vopsită cu **alb**, următoarea scândură o vopsea obligatoriu cu **albastru**
-	Dacă o scândură era vopsită cu **albastru**, atunci următoarea scândură o vopsea cu **alb** sau **roşu**
-	Dacă o scândură era vopsită cu **roşu**, atunci următoarea scândură o vopsea cu **albastru** sau **verde**
-	Dacă o scândură era vopsită cu **verde**, atunci următoarea scândură o vopsea cu **roșu** sau **galben**
-	Dacă o scândură era vopsită cu **galben**, atunci următoarea scândură o vopsea obligatoriu cu **verde**

După ce a și-a terminat treaba Miruna își admira “opera de artă” și se întreba în câte moduri diferite ar fi putut să vopsească gardul bunicii. 

# Cerinţă

Ajutați-o pe Miruna să găsească răspunsul la întrebarea sa.

# Date de intrare


Fişierul `culori.in` conţine pe prima sa linie un singur număr natural $N$.


# Date de ieșire


Fişierul de ieşire `culori.out` va conţine pe prima sa linie un singur număr întreg reprezentând numărul de moduri diferite în care Miruna ar fi putut să vopsească gardul bunicii.


# Restricții și precizări

* $1 \leq N \leq 5 \ 000$;
* Pentru $25\%$ dintre teste $N \leq 45$.

---

Example:
`culori.in`
```
4
```

`culori.out`
```
24
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

using namespace std;

const int MOD = 1000000007;
const int MAXN = 5000;

int dp[MAXN + 1][5];

int main() {
    ifstream fin("culori.in");
    ofstream fout("culori.out");

    int N;
    fin >> N;

    // Initial conditions
    dp[1][0] = dp[1][1] = dp[1][2] = dp[1][3] = dp[1][4] = 1;

    for (int i = 2; i <= N; ++i) {
        dp[i][0] = dp[i - 1][1]; // White can only be followed by Blue
        dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD; // Blue can be followed by White or Red
        dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % MOD; // Red can be followed by Blue or Green
        dp[i][3] = (dp[i - 1][2] + dp[i - 1][4]) % MOD; // Green can be followed by Red or Yellow
        dp[i][4] = dp[i - 1][3]; // Yellow can only be followed by Green
    }

    int result = 0;
    for (int i = 0; i < 5; ++i) {
        result = (result + dp[N][i]) % MOD;
    }

    fout << result << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

This solution utilizes dynamic programming to keep track of the number of ways to paint the fence such that each plank follows the rules based on the color of the previous plank. The `dp` table is indexed by `[number of planks][color]`, and each entry represents the number of ways to paint a fence of that length ending with the given color. The colors are represented by the indices 0 to 4 (0 for white, 1 for blue, 2 for red, 3 for green, and 4 for yellow). The final answer is the sum of all possible ways to paint a fence of length `N` with each possible ending color, modulo $10^9 + 7$.
