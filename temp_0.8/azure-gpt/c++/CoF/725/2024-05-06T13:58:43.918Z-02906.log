---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <bitset>

int main() {
    std::ifstream fin("cifre.in");
    std::ofstream fout("cifre.out");

    unsigned int a, b;
    fin >> a >> b;
    fin.close();

    std::bitset<10> digits_a, digits_b, common_digits;
    int combined_digits[10] = {0};
    bool has_common = false;

    // Check digits of a
    while (a > 0) {
        int digit = a % 10;
        digits_a.set(digit);
        combined_digits[digit]++;
        a /= 10;
    }

    // Check digits of b
    while (b > 0) {
        int digit = b % 10;
        digits_b.set(digit);
        combined_digits[digit]++;
        b /= 10;
    }

    // Find common digits
    common_digits = digits_a & digits_b;

    // Write common digits to the output
    if (common_digits.any()) {
        for (int i = 0; i < 10; ++i) {
            if (common_digits[i]) {
                fout << i << ' ';
            }
        }
    } else {
        fout << -1;
    }
    fout << '\n';

    // Write the largest number made from all digits of a and b
    for (int i = 9; i >= 0; --i) {
        while (combined_digits[i]--) {
            fout << i;
        }
    }
    
    fout.close();
    return 0;
}
```
---------- user ----------


Program result did not match expected result.
Input data:
```
2115 29025
```
Expected output:
```
2 5
955222110
```
Found output:
```
2 5 
955222110
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The difference between the expected and found result is an extra space after the common digits output on the first line of the output. This extra space is being printed after the last digit, which is incorrect according to the problem statement.

The issue is in the loop where the common digits are being outputted. Specifically, the code is not currently checking if a printed digit is the last one to avoid printing an extra space.

Let's fix this by updating the loop that prints the common digits. We'll add a check to ensure that a space is printed only if the current digit is not the last common digit to be printed.

Here is the revised solution:

```cpp
#include <fstream>
#include <bitset>

int main() {
    std::ifstream fin("cifre.in");
    std::ofstream fout("cifre.out");

    unsigned int a, b;
    fin >> a >> b;
    fin.close();

    std::bitset<10> digits_a, digits_b, common_digits;
    int combined_digits[10] = {0};
    bool has_common = false;

    // Check digits of a
    while (a > 0) {
        int digit = a % 10;
        digits_a.set(digit);
        combined_digits[digit]++;
        a /= 10;
    }

    // Check digits of b
    while (b > 0) {
        int digit = b % 10;
        digits_b.set(digit);
        combined_digits[digit]++;
        b /= 10;
    }

    // Find common digits
    common_digits = digits_a & digits_b;

    // Write common digits to the output
    bool first_common_digit = true;
    for (int i = 0; i < 10; ++i) {
        if (common_digits[i]) {
            if (!first_common_digit) {
                fout << ' ';
            }
            first_common_digit = false;
            fout << i;
        }
    }

    if (first_common_digit) { // if no common digits were found
        fout << -1;
    }
    fout << '\n';

    // Write the largest number made from all digits of a and b
    for (int i = 9; i >= 0; --i) {
        while (combined_digits[i]--) {
            fout << i;
        }
    }
    
    fout.close();
    return 0;
}
```

In this fix, I added a `bool first_common_digit` variable, which is initialized to `true`. When the first common digit is printed, the variable is set to `false`. We then only print a space before the common digits if `first_common_digit` is `false`, which means it is not the first digit to be printed. This prevents an extra space from being printed after the last common digit.
