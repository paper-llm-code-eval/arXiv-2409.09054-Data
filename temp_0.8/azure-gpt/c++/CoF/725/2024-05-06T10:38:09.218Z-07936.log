---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <bitset>
#include <algorithm>

int main() {
    std::ifstream fin("cifre.in");
    std::ofstream fout("cifre.out");

    unsigned long a, b;
    fin >> a >> b;

    fin.close();

    std::bitset<10> digits_a, digits_b, common_digits;
    std::string all_digits_str;

    // Read digits for a and b, and also create a string with all digits
    while (a > 0) {
        int digit = a % 10;
        digits_a.set(digit);
        all_digits_str.push_back('0' + digit);
        a /= 10;
    }
    while (b > 0) {
        int digit = b % 10;
        digits_b.set(digit);
        all_digits_str.push_back('0' + digit);
        b /= 10;
    }

    common_digits = digits_a & digits_b;

    // Check if there are common digits and write to the output
    bool has_common = false;
    for (int i = 0; i < 10; ++i) {
        if (common_digits[i]) {
            if (has_common) fout << " ";
            fout << i;
            has_common = true;
        }
    }

    if (!has_common) {
        fout << "-1\n";
    } else {
        fout << "\n";
    }

    // Sort all digits in descending order and remove duplicates
    std::sort(all_digits_str.rbegin(), all_digits_str.rend());
    all_digits_str.erase(std::unique(all_digits_str.begin(), all_digits_str.end()), all_digits_str.end());

    // Write the largest number formed by all digits
    fout << all_digits_str << "\n";

    fout.close();

    return 0;
}
```

The code reads two natural numbers from `cifre.in`, determines the common digits, and then writes the distinct common digits on the first line of `cifre.out`. The second line of `cifre.out` contains the largest number that can be formed from all the digits of `a` and `b`. It uses `std::bitset` to track the digits of `a` and `b`, and `std::sort` to sort the digits in descending order for the second requirement. It does not use `cin >>`, `cout <<`, `printf()`, or `scanf()` for I/O operations, respecting the challenge constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
2115 29025
```
Expected output:
```
2 5
955222110
```
Found output:
```
2 5
95210
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
