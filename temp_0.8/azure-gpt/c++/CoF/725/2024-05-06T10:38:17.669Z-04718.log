---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dau două numere naturale $a$ și $b$ cu maxim $9$ cifre.

# Cerință

1. Să se determine cifrele distincte, comune numerelor $a$ și $b$.
2. Să se afișeze numărul cel mai mare format din toate cifrele lui $a$ și $b$.

# Date de intrare


Din fișierul de intrare `cifre.in` se citesc de pe prima linie, separate printr-un spațiu, valorile $a$ și $b$.


# Date de ieșire


Datele de ieșire se afișează în fișierul de ieșire `cifre.out`, pe exact două linii. Răspunsul la prima cerință se va afișa pe prima linie a fișierului, cifrele fiind scrise în ordine strict crescătoare separate prin exact un spațiu, iar răspunsul la cea de a doua cerință pe linia a doua. În cazul în care cele două numere nu au nici o cifră comună pe prima linie a fișierului de ieșire se va afișa valoarea $-1$.


# Restricții și precizări

* $1 \leq a, b < 10^9$;
* Se acordă $50\%$ din punctaj pentru cerința $1$ și întregul punctaj pentru cerințele $1$ si $2$ rezolvate corect.

---

Example:
`cifre.in`
```
2115 29025
```

`cifre.out`
```
2 5
955222110
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <bitset>

int main() {
    std::ifstream fin("cifre.in");
    std::ofstream fout("cifre.out");
    
    unsigned int a, b;
    fin >> a >> b;
    fin.close();

    std::bitset<10> digits_a, digits_b, common_digits;
    
    // Calculate digits for a and b
    while (a > 0) {
        digits_a.set(a % 10);
        a /= 10;
    }
    
    while (b > 0) {
        digits_b.set(b % 10);
        b /= 10;
    }
    
    common_digits = digits_a & digits_b;
    
    // Output common digits
    bool common_found = false;
    for (int i = 0; i < 10; ++i) {
        if (common_digits[i]) {
            if (common_found) {
                fout << ' ';
            }
            fout << i;
            common_found = true;
        }
    }
    
    if (!common_found) {
        fout << "-1";
    }
    fout << '\n';
    
    // Output largest number from all digits of a and b
    std::bitset<10> all_digits = digits_a | digits_b;
    for (int i = 9; i >= 0; --i) {
        while (all_digits[i]) {
            fout << i;
            all_digits[i] = false; // Ensure each digit is printed once
        }
    }
    
    fout.close();
    return 0;
}
```

This C++ program should read the two numbers from `cifre.in`, compute the distinct common digits and the largest number using bitsets for efficiency, and write the result to `cifre.out`. The use of bitset and bitwise operations ensures fast execution, meeting the requirement for efficiency.
---------- user ----------


Program result did not match expected result.
Input data:
```
2115 29025
```
Expected output:
```
2 5
955222110
```
Found output:
```
2 5
95210
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
