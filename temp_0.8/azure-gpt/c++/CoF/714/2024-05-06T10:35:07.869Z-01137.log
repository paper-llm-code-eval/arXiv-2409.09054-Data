---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `pinochio.in` and write to `pinochio.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În fiecare zi lucrătoare din săptămână, Pinochio spune câte o minciună datorită căreia nasul acestuia crește cu câte $p$ centimetri pe zi. Sâmbăta și duminica, când vine bunicul Gepeto acasă, pentru a nu-l supăra prea tare, Pinochio reușește să nu spună nici o minciună, ba chiar uitându-se în oglindă observă că în fiecare din aceste zile lungimea nasului său scade cu câte $1$ centimetru pe zi. Când începe o nouă săptămână, rămânând singur acasă Pinochio continuă șirul minciunilor.

# Cerință

Care este dimensiunea nasului lui Pinochio după $k$ zile știind că inițial nasul său măsura $n$ centimetri.

# Date de intrare

Din fișierul de intrare `pinochio.in` se citesc valorile $n$, $p$, $k$, care se găsesc pe prima linie a fișierului și sunt separate prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `pinochio.out` se va afișa pe prima linie un singur număr natural, numărul de centimetri cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 1 \ 000$;
* $1 \leq k \leq 256$;
* $1 \leq p \leq 100$;

---

Example:
`pinochio.in`
```
2 1 8
```

`pinochio.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream inFile("pinochio.in");
    std::ofstream outFile("pinochio.out");

    int n, p, k, weeks, remainder;
    inFile >> n >> p >> k;

    weeks = k / 7; // full weeks
    remainder = k % 7; // remaining days

    // Pinochio lies for 5 days a week, and his nose shrinks by 1 cm each on Saturday and Sunday
    n += (p * 5 - 2) * weeks;

    // For the remaining days, we need to calculate the growth or shrinkage
    for(int i = 0; i < remainder; ++i) {
        if (i < 5) { // Monday to Friday, Pinochio lies
            n += p;
        } else { // Saturday and Sunday, Pinochio's nose shrinks
            n -= 1;
        }
    }

    outFile << n;
    inFile.close();
    outFile.close();

    return 0;
}
```

This solution efficiently calculates the size of Pinochio's nose after `k` days. It first calculates the full weeks and then processes the remainder days separately, avoiding unnecessary loops for days when Pinochio doesn't lie. It writes the output to `pinochio.out` as required.
