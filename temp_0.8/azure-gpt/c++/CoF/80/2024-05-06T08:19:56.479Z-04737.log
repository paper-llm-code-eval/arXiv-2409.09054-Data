---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `stdin` and write to `stdout`.
The solution must use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

~[polihroniade.png|align=right]

O matrice pătratică de dimensiuni `N × N` cu `N` par și elemente din mulțimea `{0, 1}` se numește **tablă de șah** dacă oricare două celule vecine pe o linie sau pe o coloană au valori diferite (cu alte cuvinte, dacă nu există două valori egale alăturate).

De ziua ei, Victor i-a cumpărat Elisabetei o astfel de matrice `A`, care nu este *neapărat* tablă de șah. Aflând despre pasiunea ei, acesta vrea acum să transforme matricea `A` într-o tablă de șah. Timpul fiind limitat, el poate efectua doar următoarele tipuri de operații asupra matricii:

- Interschimbă liniile `i` și `j` din `A` (celelalte linii rămân neschimbate, iar valorile din interiorul liniilor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.
- Interschimbă coloanele `i` și `j` din `A` (celelalte coloane rămân neschimbate, iar valorile din interiorul coloanelor `i` și `j` rămân neschimbate și își păstrează ordinea). Operația are sens pentru `1 ≤ i, j ≤ N`.

Dorind să o impresioneze pe Elisabeta, Victor apelează la voi, programatori renumiți, să îl ajutați în a transforma matricea `A` într-o tablă de șah. Pentru aceasta, Victor are nevoie de următoarele informații:
- Poate fi transformată matricea `A` în tablă de șah?
- Care este numărul minim de operații necesare pentru a duce la îndeplinire acest scop?
- Care ar fi o succesiune de operații care transformă matricea `A` într-o tablă de șah?

În cazul ultimei cerințe, pentru a intra în grațiile lui Victor va trebui ca numărul de operații efectuate să fie minim. Totuși, chiar și un număr neminim de operații va fi răsplătit, însă nu într-atât de mult.

Vi se dau două numere `P, T` și `T` matrici `A`, reprezentând mai multe instanțe ale problemei. Pentru fiecare matrice `A` dintre cele `T` va trebui să rezolvați cerința cu numărul `P ∈ {1, 2, 3}` dintre cele listate mai sus.

# Date de intrare
Pe prima linie se găsesc două numere întregi pozitive `P` și `T`, reprezentând numarul cerinței de rezolvat și, respectiv, numărul de scenarii pentru care va trebui să rezolvați problema.
Urmează cele `T` instanțe ale problemei, fiecare fiind compusă din `N + 1` linii: pe prima linie se va afla numărul `N`, iar pe următoarele `N` linii câte `N` cifre binare **neseparate** prin spații, reprezentând câte o linie a matricii `A`.

# Date de ieșire
Pentru fiecare dintre cele `T` instanțe se va afișa răspunsul, începând de la o linie nouă, după cum urmează:

1. Dacă `P = 1`, atunci se va afișa pe o singură linie `1` dacă matricea `A` poate fi transformată în tablă de șah, și `0` altfel.
2. Dacă `P = 2`, atunci se va afișa pe o singură linie un întreg reprezentând numărul minim de interschimbări de linii și/sau coloane necesare pentru a transforma matricea `A` în tablă de șah.
3. Dacă `P = 3`, atunci se va afișa pe o linie un număr `X`. Apoi, pe fiecare dintre următoarele `X` linii se va afișa câte o interschimbare de linii sau coloane, după următorul format: `L i j` are semnificația că liniile `i` și `j` se interschimbă, iar `C i j` are semnificația că coloanele `i` și `j` se interschimbă. Matricea obținută după aplicarea celor `X` operații asupra lui `A` în ordinea dată trebuie să fie o tablă de șah.

# Restricții și precizări
* `1 ≤ T ≤ 350`
* `1 ≤ N ≤ 1 000`
* `N` este par.
* Pentru cerințele de tip `P = 2` și `P = 3` se garantează că matricea `A` poate fi transformată în tablă de șah folosind interschimbări de linii și/sau coloane.
* Suma valorilor `N` pentru cele `T` scenarii nu depășește `2 000`.

## Pentru 40 de puncte
* `P = 1`
## Pentru alte 34 de puncte
* `P = 2`
## Pentru alte 26 de puncte
* `P = 3`
* Dacă există mai multe soluții, oricare este considerată corectă.
* Dacă numărul `X` de operații folosite nu este minim, atunci se acordă `50%` din punctajul pe test.

---

Example:
`stdin`
```
1 3
2
11
11
4
1100
1100
0011
0011
2
10
01
```

`stdout`
```
0
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
using namespace std;

// Function to check if the matrix can be converted to a chessboard
bool isConvertibleToChessboard(vector<vector<int>>& matrix, int N) {
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (i > 0 && matrix[i][j] == matrix[i - 1][j]) return false;
            if (j > 0 && matrix[i][j] == matrix[i][j - 1]) return false;
        }
    }
    return true;
}

// Function to perform the minimum operations to convert to a chessboard
int minOperationsToChessboard(vector<vector<int>>& matrix, int N) {
    int rowSwaps = 0, colSwaps = 0;
    for (int i = 0; i < N; i += 2) {
        for (int j = 0; j < N; j += 2) {
            if (matrix[i][j] == matrix[i + 1][j]) {
                rowSwaps++;
                swap(matrix[i], matrix[i + 1]);
            }
            if (matrix[j][i] == matrix[j][i + 1]) {
                colSwaps++;
                for (int k = 0; k < N; ++k) {
                    swap(matrix[k][i], matrix[k][i + 1]);
                }
            }
        }
    }
    return rowSwaps + colSwaps;
}

// Function to perform the operations to convert to a chessboard and output them
void convertToChessboardAndOutputOperations(vector<vector<int>>& matrix, int N) {
    int operations = 0;
    vector<pair<char, pair<int, int>>> moves;

    for (int i = 0; i < N; i += 2) {
        for (int j = 0; j < N; j += 2) {
            if (matrix[i][j] == matrix[i + 1][j]) {
                operations++;
                moves.push_back(make_pair('L', make_pair(i + 1, i + 2)));
                swap(matrix[i], matrix[i + 1]);
            }
            if (matrix[j][i] == matrix[j][i + 1]) {
                operations++;
                moves.push_back(make_pair('C', make_pair(i + 1, i + 2)));
                for (int k = 0; k < N; ++k) {
                    swap(matrix[k][i], matrix[k][i + 1]);
                }
            }
        }
    }

    cout << operations << '\n';
    for (const auto& move : moves) {
        cout << move.first << " " << move.second.first << " " << move.second.second << '\n';
    }
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int P, T;
    cin >> P >> T;

    while (T--) {
        int N;
        cin >> N;
        vector<vector<int>> matrix(N, vector<int>(N));
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                char ch;
                cin >> ch;
                matrix[i][j] = ch - '0';
            }
        }

        if (P == 1) {
            cout << (isConvertibleToChessboard(matrix, N) ? 1 : 0) << '\n';
        } else if (P == 2) {
            cout << minOperationsToChessboard(matrix, N) << '\n';
        } else if (P == 3) {
            convertToChessboardAndOutputOperations(matrix, N);
        }
    }

    return 0;
}
```
This code reads the problem requirements and solves each scenario based on the provided problem number `P`. If `P` is 1, it checks if the matrix can be converted to a chessboard. If `P` is 2, it calculates the minimum number of operations to convert the matrix to a chessboard. If `P` is 3, it outputs the minimum operations required to achieve the conversion, along with the specific row or column swaps.
---------- user ----------


Program result did not match expected result.
Input data:
```
1 3
2
11
11
4
1100
1100
0011
0011
2
10
01
```
Expected output:
```
0
1
1
```
Found output:
```
0
0
1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
