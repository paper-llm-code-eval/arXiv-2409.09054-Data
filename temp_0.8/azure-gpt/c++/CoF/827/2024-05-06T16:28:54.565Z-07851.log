---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `compresie.in` and write to `compresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un text memorat într-o matrice $M$, definită prin coordonatele colţului stânga sus $(x_1,y_1)$ şi coordonatele colţului dreapta jos $(x_2,y_2)$.     

Prin aplicarea unui algoritm de compresie, matricei $M$ i se asociază un şir de caractere, notat $C_M$.

Şirul de caractere $C_M$ este construit prin aplicarea următoarelor reguli:  

a) dacă matricea $M$ are o singură linie şi o singură coloană atunci $C_M$ conţine numai caracterul memorat în matrice
b) dacă toate elementele matricei sunt identice atunci întreaga matrice $M$ se comprimă şi $C_M$ este şirul $k + c$, unde $k$ reprezintă numărul de caractere din matrice, iar $c$ caracterul memorat
c) dacă matricea este formată din caractere diferite şi are cel puţin două linii şi două coloane atunci:
   - matricea este împărţită în $4$ submatrice $A$, $B$, $C$, $D$ după cum este ilustrat în figura alăturată, unde coordonatele colţului stânga sus ale submatricei $A$ sunt $(x_1,y_1)$, iar coordonatele colţului dreapta jos sunt $(\lfloor \frac{x_2+x_1}{2} \rfloor, \lfloor \frac{y_2+y_1}{2} \rfloor)$
   - $C_M$ este şirul `*` $+\ C_A + C_B + C_C + C_D$, unde $C_A$, $C_B$, $C_C$, $C_D$ sunt şirurile de caractere obţinute, în ordine, prin compresia matricelor $A$, $B$, $C$, $D$ utilizând acelaşi algoritm

~[2e2e22e2e.png]

d) dacă matricea este formată din caractere diferite, are o singură linie şi mai multe coloane atunci $C_M$ este şirul `*` $+\ C_A + C_B$, unde $A$, $B$, $C_A$, $C_B$ au semnificaţia descrisă la punctul c).
e) dacă matricea este formată din caractere diferite, are mai multe linii şi o singură coloană atunci $C_M$ este şirul `*` $+\ C_A + C_C$  unde $A$, $C$, $C_A$, $C_C$ au semnificaţia descrisă la punctul c).

# Cerinţă

Dat fiind şirul de caractere $C_M$ ce se obţine în urma aplicării algoritmului de compresie asupra unei matrice $M$ de dimensiune $N \cdot N$ să se determine: 

a) numărul de împărţiri care au fost necesare pentru obţinerea textului compresat
b) matricea iniţială din care provine textul compresat.

# Date de intrare


Fişierul de intrare `ompresie.in` conţine pe prima linie un şir de caractere ce reprezintă textul compresat.

# Date de ieșire


Fişierul de ieșire `compresie.out` conţine:

* pe prima linie un număr natural ce reprezintă  numărul $nr$ de împărţiri care au fost necesare pentru obţinerea textului compresat
* pe următoarele $N$ linii se găsesc câte $N$ caractere, litere mici ale alfabetului englez, neseparate prin spații, ce reprezintă, în ordine, liniile matricei iniţiale.

# Restricții și precizări

* $2 \leq N \leq 1 \ 000$
* $0 \leq nr \leq 1\ 000 \ 000$
* $2 ≤$ lungimea şirului compresat $≤ 1 \ 000 \ 000$
* Textul memorat iniţial în matricea $M$ conţine numai caractere din mulţimea literelor mici $\{$`a`$,$ `b`$, \dots,$ `z`$\}$.
* Pentru rezolvarea corectă a cerinţei a) se acordă $20\%$ din punctaj, iar pentru rezolvarea corectă a ambelor cerinţe se acordă tot punctajul.

---

Example:
`compresie.in`
```
*4b*bbab4a*abbb 
```

`compresie.out`
```
3 
bbbb
bbab
aaab
aabb
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

std::ifstream fin("compresie.in");
std::ofstream fout("compresie.out");

int N; // Will be determined during decompression
int divisions;
std::string compressed;
std::vector<std::vector<char>> matrix;

void decompress(int& pos, int x1, int y1, int x2, int y2) {
    if (x1 > x2 || y1 > y2) return;
    if (compressed[pos] == '*') {
        ++pos;
        ++divisions;
        int mx = (x1 + x2) / 2;
        int my = (y1 + y2) / 2;
        decompress(pos, x1, y1, mx, my); // A
        decompress(pos, x1, my + 1, mx, y2); // B
        decompress(pos, mx + 1, y1, x2, my); // C
        decompress(pos, mx + 1, my + 1, x2, y2); // D
    } else {
        if (std::isdigit(compressed[pos])) { // Check if the character is a digit
            int count = 0;
            while (std::isdigit(compressed[pos])) { // May be more than one digit
                count = count * 10 + (compressed[pos++] - '0');
            }
            char character = compressed[pos++];
            for (int i = x1; i <= x2; ++i)
                for (int j = y1; j <= y2; ++j)
                    matrix[i][j] = character;
            N = std::max(N, std::max(x2, y2));
        } else {
            matrix[x1][y1] = compressed[pos++];
            N = std::max(N, std::max(x1, y1));
        }
    }
}

int main() {
    fin >> compressed;
    divisions = 0;
    int pos = 0;
    // As N is not known in advance, let's initialize a large enough matrix
    matrix.resize(1000, std::vector<char>(1000));
    decompress(pos, 0, 0, 999, 999); // Assuming the maximum possible size is 1000x1000
    
    fout << divisions << '\n';
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j)
            fout << matrix[i][j];
        fout << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```

This code performs the decompression by recursively dividing the matrix according to the rules described in the problem statement. It reads the compressed string from `compresie.in`, determines the number of divisions, reconstructs the original matrix, and writes the number of divisions and the matrix to `compresie.out`.

Please note that the code assumes a maximum matrix size of 1000x1000, as per the problem constraints, and uses direct file I/O for reading and writing to avoid the use of `cin`, `cout`, `printf`, and `scanf`. It tracks the position within the compressed string with a reference (`int& pos`) to ensure that the recursion correctly follows the string parsing. Additionally, it preallocates a sufficiently large matrix and computes the actual size (`N`) during decompression.
