{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/759/2024-05-06T14:58:46.602Z-06751.log",
  "attemptStart": 1715007526.602,
  "attemptEnd": 1715007544.205,
  "attemptDuration": 17.602999925613403,
  "code": "#include <fstream>\n#include <algorithm>\n\nconstexpr int MAX_N = 50;\n\nbool pattern[MAX_N][MAX_N];\nbool card[MAX_N][MAX_N];\n\nbool check(int N, bool card[][MAX_N]) {\n    for (int x = 0; x < N; ++x)\n        for (int y = 0; y < N; ++y)\n            if (card[x][y] != pattern[x][y])\n                return false;\n    return true;\n}\n\nvoid rotate(int N, bool card[][MAX_N]) {\n    bool temp[MAX_N][MAX_N];\n    for (int x = 0; x < N; ++x)\n        for (int y = 0; y < N; ++y)\n            temp[y][N - 1 - x] = card[x][y];\n    std::copy(&temp[0][0], &temp[0][0] + MAX_N * MAX_N, &card[0][0]);\n}\n\nvoid flip(int N, bool card[][MAX_N]) {\n    for (int x = 0; x < N / 2; ++x)\n        for (int y = 0; y < N; ++y)\n            std::swap(card[x][y], card[N - 1 - x][y]);\n}\n\nint main() {\n    std::ifstream fin(\"cartele.in\");\n    std::ofstream fout(\"cartele.out\");\n\n    int N, C;\n    fin >> N >> C;\n    \n    for (int x = 0; x < N; ++x)\n        for (int y = 0; y < N; ++y)\n            fin >> pattern[x][y];\n    \n    for (int c = 0; c < C; ++c) {\n        for (int x = 0; x < N; ++x)\n            for (int y = 0; y < N; ++y)\n                fin >> card[x][y];\n        \n        bool access = false;\n        for (int f = 0; f < 2 && !access; ++f) {\n            for (int r = 0; r < 4 && !access; ++r) {\n                if (check(N, card)) {\n                    access = true;\n                    break;\n                }\n                rotate(N, card);\n            }\n            if (!access) flip(N, card);\n        }\n        \n        fout << access << '\\n';\n    }\n\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1767,
  "metadata": {
    "id": 759,
    "examples": [
      {
        "in": "3 2\n0 1 0\n0 0 1\n1 0 0\n1 0 0\n0 0 1\n0 1 0\n0 0 1\n0 0 1\n0 1 0",
        "out": "1\n0",
        "explainer": ""
      }
    ],
    "body": "În sediul unei firme se intră doar cu ajutorul cartelelor magnetice. De câte ori se schimbă codurile de acces, cartelele trebuie formatate. Formatarea presupune imprimarea unui model prin magnetizare. Dispozitivul în care se introduc cartelele, numit cititor de cartele, verifică acest model. Toate cartelele au aceleaşi dimensiuni, suprafaţa pătrată şi grosimea neglijabilă. Cele două feţe plane ale unei cartele se împart fiecare în $N \\times N$ celule pătrate, identice ca dimensiuni. Prin formatare unele celule, marcate cu negru în exemplu, se magnetizează permiţând radiaţiei infraroşii să treacă dintr-o parte în cealaltă a cartelei. În interiorul cititorului de cartele se iluminează uniform una dintre feţele cartelei. De cealaltă parte fasciculele de lumină care străbat cartela sunt analizate electronic. Pentru a permite accesul în clădire modelul imprimat pe cartelă trebuie să coincidă exact cu modelul şablonului care memorează codul de intrare. Prin fanta dispozitivului nu se pot introduce mai multe cartele deodată. Cartela se poate introduce prin fantă cu oricare dintre muchii spre deschizătura fantei şi cu oricare dintre cele două feţe orientate către şablon. După introducere cartela se dispune în plan paralel cu şablonul, lipit de acesta, astfel încât cele patru colţuri ale cartelei se suprapun exact cu colţurile şablonului. Modelele imprimate pe cele două feţe ale unei cartele sunt identice. Unei celule magnetizate îi corespunde pe faţa opusă tot o celulă magnetizată, iar unei celule nemagnetizate îi corespunde una nemagnetizată. O celulă magnetizată este transparentă pentru radiaţia infraroşie indiferent de faţa care se iluminează.\n\\\nUn angajat al firmei are mai multe cartele. Pe unele dintre acestea a fost imprimat noul cod de intrare, iar pe altele sunt coduri mai vechi. Pentru a afla care sunt cartelele care-i permit accesul în sediul firmei angajatul este nevoit să le verifice pe toate, introducându-le pe rând, în toate modurile pe care le consideră necesare, în fanta cititorului de cartele.\n~[0.png|align=center|width=45em]\n\n# Cerinţă\nScrieţi un program care determină care dintre cartele permite accesul în sediul firmei.\n\n# Date de intrare\nFişierul de intrare `cartele.in` conţine pe prima linie două numere naturale $N$ şi $C$ despărţite printr-un spaţiu. $N$ este dimensiunea tablourilor care reprezintă modelul şablon şi modelele cartelelelor. $C$ reprezintă numărul de cartele. Urmează $C+1$ blocuri de câte $N$ linii fiecare. Primul bloc de $N$ linii codifică şablonul. Următoarele $C$ blocuri de câte $N$ linii codifică fiecare câte o cartelă. Pe fiecare linie sunt câte $N$ valori întregi, despărţite printr-un singur spaţiu. Celulelor magnetizate le corespunde valoarea $1$, iar celorlalte, valoarea $0$.\n\n# Date de ieşire\nÎn fişierul de ieşire `cartele.out` se vor scrie $C$ linii, câte o valoare pe linie. Pe linia $i$ se va scrie valoarea $1$ dacă cartela $i$ permite accesul în clădire şi valoarea $0$ în caz contrar.\n\n# Restricţii şi precizări\n- $1 < N, C \\leq 50$",
    "header": {
      "problem_id": 759,
      "problem_name": "cartele",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.07,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "cartele.in",
      "output_filename": "cartele.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "cartele.in",
      "output": "cartele.out"
    },
    "consoleInteraction": false
  }
}