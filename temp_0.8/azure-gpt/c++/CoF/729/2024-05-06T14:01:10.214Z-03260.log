---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("siruri.in");
    ofstream fout("siruri.out");

    int n;
    fin >> n;
    vector<pair<int, int>> nums(n);

    for (int i = 0; i < n; ++i) {
        fin >> nums[i].first;
        nums[i].second = i;
    }

    // Sort the pairs by the value of the original elements
    sort(nums.begin(), nums.end());

    // Create vector y for the output
    vector<int> y(n);
    for (int i = 0; i < n; ++i) {
        // Assign ranks to elements based on their sorted order
        y[nums[i].second] = i + 1;
    }

    // Output the elements of vector y
    for (int i = 0; i < n; ++i) {
        fout << y[i] << (i < n - 1 ? ' ' : '\n');
    }

    fin.close();
    fout.close();
    return 0;
}
```

This C++ solution reads from `siruri.in`, constructs the required vector `y` according to the problem's constraints, and writes the result to `siruri.out`. It uses file streams (`ifstream` and `ofstream`) to handle input and output, avoiding the use of `cin`, `cout`, `printf`, and `scanf`, as requested. The solution first reads the elements of vector `x`, then sorts them while keeping track of their original indices. After sorting, it assigns ranks to the elements based on their sorted positions to form vector `y`, which is then written to the output file. The code should be the most efficient in terms of complexity, which is O(n log n) due to the sorting step.
