---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `siruri.in` and write to `siruri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un vector unidimensional $x$ cu $n$ componente numere naturale distincte, cel mult egale cu $32 \ 000$.

# Cerință

Scrieți un program care să construiască vectorul $y$ cu elemente din mulțimea $\{1, 2, \dots, n\}$ astfel încât oricare ar fi numerele naturale $i, j$ cu proprietatea că $1 \leq i \leq n$, $1 \leq j \leq n$ și $x_i < x_j$ să avem $y_i < y_j$.

# Date de intrare

Fișierul de intrare `siruri.in` va conține:

* pe prima linie numărul $n$
* pe linia a doua componentele vectorului $x$ separate prin câte un spațiu

# Date de ieșire

Fișierul de ieșire `siruri.out` va conține pe prima linie componentele vectorului $y$ separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Componentele vectorului x sunt numere naturale cel mult egale cu $32 \ 000$.

---

Example:
`siruri.in`
```
6
12 3 7 16 10 1
```

`siruri.out`
```
5 2 3 6 4 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream in("siruri.in");
    std::ofstream out("siruri.out");

    int n;
    in >> n;

    std::vector<int> x(n), y(n);
    std::vector<std::pair<int, int>> pairs;

    for (int i = 0; i < n; ++i) {
        in >> x[i];
        pairs.emplace_back(x[i], i);
    }

    std::sort(pairs.begin(), pairs.end());

    for (int i = 0; i < n; ++i) {
        y[pairs[i].second] = i + 1;
    }

    for (int i = 0; i < n; ++i) {
        out << y[i] << (i < n - 1 ? ' ' : '\n');
    }

    return 0;
}
```
The `ifstream` and `ofstream` classes are used for file input and output, avoiding the use of `cin`, `cout`, `printf`, and `scanf`. The program uses a `std::sort` function to sort pairs of original array values and their original indices, then constructs the output array `y` based on the sorted order of the input array `x`. The final loop writes the elements of `y` to the output file.
