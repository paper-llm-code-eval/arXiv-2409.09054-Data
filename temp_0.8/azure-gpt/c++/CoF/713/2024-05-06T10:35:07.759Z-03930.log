---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream fin("exponent.in");
    std::ofstream fout("exponent.out");
    
    int n, k;
    fin >> n >> k;
    
    int exponent = 0;
    for (int i = k; i <= n; i *= k) {
        exponent += n / i;
    }
    
    fout << exponent;
    
    fin.close();
    fout.close();
    
    return 0;
}
```

This code snippet reads the value of `n` and `k` from a file named "exponent.in", calculates the exponent of `k` in the factorial of `n` and writes the result to "exponent.out". It does not use `cin`, `cout`, `printf`, or `scanf` for file operations and aims to be efficient by only considering multiples of `k` and adding up their contributions to the exponent in the prime factorization of `n!`.
