---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `exponent.in` and write to `exponent.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr natural $n$ și o cifră $k$ din mulțimea $\{2, 3, 5, 7\}$.

# Cerință

Se cere să se afișeze exponentul lui $k$ în descompunerea în factori primi a produsului $1 \cdot 2 \cdot 3 \cdot \ldots \cdot n$.

# Date de intrare

Fișierul de intrare `exponent.in` conține pe prima linie $n$ și $k$.


# Date de ieșire

În fișierul de ieșire `exponent.out` se va scrie un singur număr natural, adică exponentul cerut de problemă.


# Restricții și precizări

* $1 \leq n \leq 100$;
* $k = \{2, 3, 5, 7\}$;

---

Example:
`exponent.in`
```
6 3
```

`exponent.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream in("exponent.in");
    std::ofstream out("exponent.out");

    int n, k;
    in >> n >> k;
    in.close();

    int exponent = 0;
    if (k == 2 || k == 5) { // Counting the factors of 2 or 5.
        for (int p = k; p <= n; p *= k) {
            exponent += n / p;
        }
    } else { // Counting the factors of 3 or 7.
        for (int i = 1; i <= n; i++) {
            int j = i;
            while (j % k == 0) {
                exponent++;
                j /= k;
            }
        }
    }

    out << exponent;
    out.close();

    return 0;
}
```

This code snippet reads the input from the `exponent.in` file, computes the exponent of the prime number `k` in the prime factorization of the factorial of `n`, and writes the result to the `exponent.out` file. It avoids the use of the standard input/output streams like `cin` and `cout`, and instead uses file streams. The code calculates the exponent efficiently by counting the occurrences of the prime factor `k` in the range from 1 to `n`. For 2 and 5, it uses a loop that steps through the powers of `k` (since 2 and 5 only appear in the factorization of even numbers and multiples of 5, respectively), while for 3 and 7 it iterates through all numbers from 1 to `n` and counts the factors of `k` in each number.
