---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir format din $N$ numere naturale nenule. Elementele șirului sunt numerotate de la stânga la dreapta începând cu poziția $1$.

# Cerință

Scrieți un program care să determine răspunsul pentru întrebări de următoarele tipuri:

1. Care este cea mai din stânga poziție care conține o valoare strict mai mare decât toate cele din dreapta sa? – întrebare de tipul $1$
2. Care sunt pozițiile care conțin valori strict mai mari decât toate cele din stânga lor? – întrebare de tipul $2$
3. Dacă fiecărui element aflat între prima și ultima apariție a maximului i-am mări valoarea pentru a ajunge egal cu maximul, care este suma totală a valorilor adăugate? – întrebare de tipul $3$

# Date de intrare

Fișierul de intrare `sir.in` conține pe prima linie un număr $C$ (care poate fi $1$, $2$ sau $3$), indicând tipul întrebării. Pe linia a doua se află un număr natural $N$, reprezentând numărul de elemente din șir. Pe a treia linie a fișierului de intrare se află $N$ numere naturale, reprezentând elementele șirului, date de la stânga la dreapta (cel mai din stânga are poziția $1$ și cel mai din dreapta are poziția $N$). Numerele de pe această linie sunt separate prin câte un spațiu.

# Date de ieșire

Dacă $C = 1$, fișierul de ieșire `sir.out` trebuie să conțină un număr natural ce reprezintă răspunsul la o întrebare de tipul $1$. Dacă $C = 2$, fișierul de ieșire trebuie să conțină, separați prin câte un spațiu și în ordine crescătoare, indicii determinați ca răspuns la o întrebare de tipul $2$. Dacă $C = 3$, fișierul de ieșire trebuie să conțină un număr ce reprezintă răspunsul la o întrebare de tipul $3$.

# Restricții și precizări

* $1 \leq C \leq 3$;
* $1 \leq N \leq 100 \ 000$;
* Numerele din șirul dat sunt cuprinse între $1$ și $10 \ 000$ inclusiv.
* Pentru teste în valoare de $24$ de puncte avem $C = 1$.
* Pentru teste în valoare de $32$ de puncte avem $C = 2$.
* Pentru teste în valoare de $44$ de puncte avem $C = 3$.

---

Example:
`sir.in`
```
1
7
3 2 2 5 3 5 4
```

`sir.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("sir.in");
    std::ofstream fout("sir.out");

    int C, N;
    fin >> C >> N;

    std::vector<int> vec(N);
    for (int i = 0; i < N; ++i) {
        fin >> vec[i];
    }

    if (C == 1) {
        int max_pos = N - 1;
        for (int i = N - 2; i >= 0; --i) {
            if (vec[i] > vec[max_pos]) {
                max_pos = i;
            }
        }
        fout << max_pos + 1 << '\n';
    } else if (C == 2) {
        std::vector<int> indices;
        int current_max = 0;
        for (int i = 0; i < N; ++i) {
            if (vec[i] > current_max) {
                indices.push_back(i + 1);
                current_max = vec[i];
            }
        }
        for (int index : indices) {
            fout << index << ' ';
        }
        fout << '\n';
    } else if (C == 3) {
        int max_value = *std::max_element(vec.begin(), vec.end());
        int first_max = std::find(vec.begin(), vec.end(), max_value) - vec.begin();
        int last_max = std::find(vec.rbegin(), vec.rend(), max_value).base() - vec.begin() - 1;
        long long sum_added = 0;
        for (int i = first_max; i <= last_max; ++i) {
            sum_added += max_value - vec[i];
        }
        fout << sum_added << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```
This C++ code should solve the given problem efficiently by processing the input according to the question type, and providing the required output as specified in the challenge.
