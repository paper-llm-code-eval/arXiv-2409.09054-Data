---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("mostenire.in");
    ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    vector<int> bags(N);
    for (int i = 0; i < N; ++i) fin >> bags[i];
    
    // Prepare prefix sums
    vector<long long> prefixSums(N + 1, 0);
    for (int i = 1; i <= N; ++i) prefixSums[i] = prefixSums[i - 1] + bags[i - 1];
    
    // Binary search for the maximum amount the youngest can get
    long long low = 1, high = prefixSums[N] / K, youngestAmount;
    while (low <= high) {
        long long mid = low + (high - low) / 2;
        long long sum = 0;
        int count = 0;
        for (int i = 1; i <= N; ++i) {
            if (sum + bags[i - 1] > mid) {
                sum = 0;
                count++;
            }
            sum += bags[i - 1];
        }
        count++;
        if (count <= K) {
            youngestAmount = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    
    fout << youngestAmount << "\n";
    
    // Construct the solution for the youngest amount
    vector<pair<int, int>> answer(K);
    long long sum = 0;
    int distributed = 0, currentChild = K;
    for (int i = 0; i < N; ++i) {
        if (sum + bags[i] > youngestAmount && currentChild > 1) {
            answer[K - currentChild] = {currentChild, distributed};
            sum = 0;
            distributed = 0;
            currentChild--;
        }
        sum += bags[i];
        distributed++;
    }
    answer[K - currentChild] = {currentChild, distributed};
    
    // Output the solution
    for (int i = K - 1; i >= 0; --i) {
        fout << answer[i].first << " " << answer[i].second << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

This solution performs a binary search for the maximum amount of gold the youngest child can inherit, ensuring no child gets more than any older sibling. We calculate prefix sums to easily check if distributing any sum will exceed the current guess for the youngest's share. Once the maximum is found, we construct the distribution list from the end to the beginning, ensuring each child gets at least one bag and respecting the maximum sum for each child.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
0
1 7
2 1
3 0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial solution contains several mistakes. It seems the binary search was incorrectly set up, which led to an invalid output. The binary search should find the largest sum the youngest child can have without any sibling having more (not the sum itself, but the number of bags). Here's the revised solution, now with the correct logic:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("mostenire.in");
    ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    vector<int> bags(N);
    for (int i = 0; i < N; ++i) fin >> bags[i];

    // Find the maximum sum that can be assigned to the youngest child
    long long totalSum = 0;
    for (int i = 0; i < N; i++) {
        totalSum += bags[i];
    }
    long long maxForYoungest = totalSum / K;

    // Find the actual number of bags the youngest child can get
    long long sum = 0;
    int bagsForYoungest = 0;
    for (int i = N - 1; i >= 0; i--) {
        if (sum + bags[i] <= maxForYoungest) {
            sum += bags[i];
            bagsForYoungest++;
        } else {
            break;
        }
    }

    // Output the maximum number of golds for the youngest child
    fout << sum << "\n";

    // Distribute the bags among the children
    vector<pair<int, int>> distribution;
    int bagsLeft = N;
    for (int i = K; i >= 1; i--) {
        int bagsToTake = (i == 1) ? bagsLeft : min(bagsForYoungest, bagsLeft - (i - 1));
        distribution.push_back(make_pair(i, bagsToTake));
        bagsLeft -= bagsToTake;
    }

    // Output the distribution
    reverse(distribution.begin(), distribution.end());
    for (auto &dist : distribution) {
        fout << dist.first << " " << dist.second << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

This solution first calculates the maximum possible amount the youngest child can inherit by dividing the total sum by K. Then it distributes the bags from the end, ensuring that the youngest gets as many as possible without exceeding the maximum amount. The resulting distribution is then output in the correct order.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
8
1 6
2 1
3 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The revised solution didn't produce the expected output due to incorrect distribution logic. Specifically, the logic didn't ensure that each child (except the youngest) received the same number of bags or a number that would result in the sums being distributed fairly. The solution also needs to handle cases where we have to adjust the sums for the older children to maximize the youngest's inheritance.

We need to ensure that the youngest receives the maximum possible gold, while every other sibling receives an equal or greater amount. We can achieve this by working back from the youngest to the oldest sibling.

Let's rewrite the solution using a correct algorithm:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("mostenire.in");
    ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    vector<long long> bags(N);
    for (int i = 0; i < N; ++i) fin >> bags[i];

    // Compute the prefix sums for the bags
    vector<long long> prefixSums(N + 1, 0);
    for (int i = 1; i <= N; ++i) {
        prefixSums[i] = prefixSums[i - 1] + bags[i - 1];
    }

    // Binary search to find the maximum sum the youngest child can have
    long long left = 0, right = prefixSums[N], youngestSum = 0;
    while (left <= right) {
        long long mid = left + (right - left) / 2;
        long long requiredBags = 0, currentSum = 0;
        for (int i = N - 1; i >= 0; --i) {
            if (currentSum + bags[i] > mid) {
                requiredBags++;
                currentSum = 0;
            }
            currentSum += bags[i];
        }
        requiredBags++;

        if (requiredBags <= K) {
            youngestSum = max(youngestSum, currentSum);
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    // Output the maximum sum for the youngest child
    fout << youngestSum << "\n";

    // Now we distribute the bags based on the maximum sum found for the youngest
    vector<pair<int, int>> distribution(K);
    long long currentSum = 0;
    int child = K;
    for (int i = N - 1; i >= 0; --i) {
        if (currentSum + bags[i] <= youngestSum && child > 1) {
            currentSum += bags[i];
        } else {
            distribution[child - 1].first = child;
            distribution[child - 1].second = N - i - 1;
            N = i + 1;
            child--;
            currentSum = bags[i];
        }
    }
    distribution[0].first = 1; // The eldest child
    distribution[0].second = N; // The remaining bags

    // Output the distribution
    for (auto &dist : distribution) {
        fout << dist.first << " " << dist.second << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

In this corrected solution:

1. We precompute the prefix sums of the bags of gold.
2. We perform a binary search on the possible sums the youngest child can receive. Our goal is to find the maximum sum the youngest can get without breaking the rule that all older siblings must get an equal or greater sum of gold.
3. We distribute the bags starting from the youngest to the eldest, ensuring that the distribution adheres to the maximum sum found for the youngest.
4. Finally, we output the sum for the youngest and the distribution of bags to all siblings.

This approach should produce the expected output.
---------- user ----------


Program exited with code 139.
stdout:
```

```
stderr:
```
double free or corruption (out)

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
