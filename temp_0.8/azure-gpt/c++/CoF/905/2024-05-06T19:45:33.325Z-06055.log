---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("mostenire.in");
    std::ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;

    std::vector<int> bags(N);
    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
    }

    // Reverse sort to give the largest sums to the youngest sons first
    std::sort(bags.rbegin(), bags.rend());

    std::vector<int> sons(K), sum(K, 0);
    // Assign bags to sons in reverse order
    for (int i = 0; i < N; ++i) {
        int son = i % K;
        sum[son] += bags[i];
        sons[son]++;
    }

    for (int i = 0; i < K; ++i) {
        if (i == K - 1) { // Last son (the youngest)
            fout << sum[i] << '\n';
            break;
        }
    }

    // Output in the order they are given the bags
    for (int i = K - 1; i >= 0; --i) {
        fout << (i + 1) << ' ' << sons[i] << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```
This C++ code should solve the challenge as per the requirements. It reads from `mostenire.in`, writes to `mostenire.out`, sorts the bags in descending order, and then assigns them to the sons starting with the youngest to ensure that the youngest son gets as much as possible without getting more than his older brothers. The distribution process is then output in the order the sons are called by the emperor.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
9
3 2
2 3
1 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The provided solution incorrectly distributes the bags of coins by simply sorting the bags in descending order and then assigning them in a round-robin fashion to the sons starting with the youngest. This approach does not ensure that the younger son receives the maximum possible amount since it does not consider the constraint that each younger brother cannot receive more than any older brother.

The correct approach to this problem is to use a binary search to find the maximum possible amount the youngest son can get. Then distribute the bags accordingly while respecting the constraints.

Here is the corrected solution:

```cpp
#include <fstream>
#include <vector>
#include <numeric>
#include <algorithm>

std::ifstream fin("mostenire.in");
std::ofstream fout("mostenire.out");

int N, K;
std::vector<int> bags;

bool valid(int mid){
    int brothers = K - 1;
    int sum = 0;
    for (int i = N - 1; i >= 0; --i) {
        if (sum + bags[i] <= mid) {
            sum += bags[i];
        } else {
            sum = bags[i];
            brothers--;
            if (brothers < 0) return false;
        }
    }
    return true;
}

int allocate(int max_sum) {
    std::vector<int> allocation(K, 0);
    std::vector<int> counts(K, 0);
    int brother = K - 1;
    int currentSum = 0;

    for (int i = N - 1; i >= 0; --i) {
        if (currentSum + bags[i] <= max_sum) {
            currentSum += bags[i];
            counts[brother]++;
        } else {
            allocation[brother] = currentSum;
            currentSum = bags[i];
            brother--;
            counts[brother]++;
        }
    }
    allocation[brother] = currentSum;

    for (int i = 0; i < K; ++i) {
        fout << i + 1 << " " << counts[i] << "\n";
    }

    return allocation[K - 1];
}

int main() {
    fin >> N >> K;
    bags.resize(N);

    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
    }

    // Binary search to find the maximum amount the youngest can get
    int left = *std::max_element(bags.begin(), bags.end());
    int right = std::accumulate(bags.begin(), bags.end(), 0);
    int max_sum = right;

    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (valid(mid)) {
            max_sum = mid;
            right = mid - 1;
        } else {
            left = mid + 1;
        }
    }

    // Allocate bags using the calculated maximum sum
    int youngest_sum = allocate(max_sum);
    fout.seekp(0);
    fout << youngest_sum << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

This solution performs a binary search on the potential maximum sums the youngest son can receive, checking if a distribution is possible without violating the constraints. Then, it distributes the bags accordingly and writes the distribution and the sum for the youngest son to `mostenire.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
15

2 3
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The issue with the previous solution is that it does not ensure the distribution of bags such that each younger brother cannot receive more than any older brother, and it also assigns the bags from the end towards the beginning, which leads to the youngest brother not receiving the correct amount of coins.

To fix the problem, a different approach is needed: we must iterate over each possible maximum amount the youngest son can receive, starting with the sum of the smallest K bags. We will then attempt to distribute the bags in such a way that all brothers receive at least one bag and the youngest does not receive more than his older brothers.

Let's implement the correct solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("mostenire.in");
    std::ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    std::vector<int> bags(N);
    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
    }

    std::vector<int> sums(N + 1, 0); // Prefix sums
    for (int i = 1; i <= N; ++i) {
        sums[i] = sums[i - 1] + bags[i - 1];
    }

    // Greedily get the max sum for the youngest by using the smallest bags
    int max_sum_for_youngest = sums[N] - sums[N - K];
    std::vector<int> allocation(K, 0);
    int remaining = N;

    for (int i = K - 1; i >= 0; --i) {
        int low = 1, high = remaining - i, allocated = 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (sums[remaining] - sums[remaining - mid] <= max_sum_for_youngest) {
                allocated = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        allocation[i] = allocated;
        remaining -= allocated;
    }

    fout << max_sum_for_youngest << '\n';
    for (int i = K; i >= 1; --i) {
        fout << i << ' ' << allocation[i - 1] << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```

In this solution, we calculate the prefix sums and use binary search to find the maximum number of bags we can allocate to each son starting from the youngest without exceeding the limit we set. We need to guarantee that each brother gets at least one bag, so the search space for allocation is adjusted by the number of brothers who still need to get their bags. Allocation array is then filled with the number of bags each brother gets, and results are written to the output file. This should provide the correct allocation of bags to fulfill the challenge requirements.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
21
3 3
2 4
1 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
