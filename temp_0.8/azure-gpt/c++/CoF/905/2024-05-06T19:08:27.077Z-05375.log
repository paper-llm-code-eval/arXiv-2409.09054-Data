---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mostenire.in` and write to `mostenire.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Împăratul cel bătrân vrea să împartă sacii cu galbeni din vistieria palatului celor $K$ feciori ai săi, numerotați de la $1$ la $K$ în ordinea vârstei. Feciorul cu numărul $1$ este cel mai mare, iar mezinul are numărul $K$.

În vistierie sunt $N$ saci plini cu galbeni, așezați în linie, atât de grei încât nu li se poate schimba ordinea, iar pe fiecare sac este scris numărul de galbeni pe care îi conține.
\
Împăratul îl cheamă pe unul dintre feciori și îi spune: „Fiule, a ta este averea primilor $x_1$ saci!”. Feciorul ia sacii și pleacă fericit. Apoi, împăratul cheamă alt fecior și îi spune: „Fiule, a ta este averea primilor $x_2$ saci dintre cei rămași!”. Și așa mai departe, până ajunge la ultimul fecior chemat, căruia îi dă toți sacii rămași.

El nu are o ordine anume în care își cheamă feciorii dar are grijă să cheme fiecare fecior exact o dată. Totodată, pentru a evita certurile între ei, este atent ca fiecare fecior să primească cel puțin un sac cu galbeni, dar **să NU primească în total mai mulți galbeni ca un frate mai mare decât el**. Cel mai mic dintre feciorii împăratului este și cel mai viteaz, așa că împăratul ar vrea să îi dea lui o sumă de bani cât mai mare, fără a-i supăra pe ceilalți feciori ai săi.

# Cerință
Cum ar putea împărți împăratul sacii?

# Date de intrare
Fișierul de intrare `mostenire.in` conține pe prima linie numerele naturale $N$ și $K$, separate de un spațiu, cu semnificația din enunț. Pe următoarele $N$ linii se găsește câte un număr natural, reprezentând numărul de galbeni din fiecare sac, în ordinea în care aceștia urmează să fie distribuiți fiilor.

# Date de ieșire
Fișierul de ieșire `mostenire.out` va conține pe prima linie suma de galbeni pe care o va primi fiul cel mic de la împărat. Pe următoarele $K$ linii se vor afla câte două numere naturale ce reprezintă numărul de ordine al feciorului, respectiv numărul de saci $x_i$ pe care îi primește acesta, în ordinea în care au fost chemați de împărat.

# Restricții și precizări
- $2 \leq K \leq 100$
- $K \leq N \leq 100\ 000$
- Numărul de galbeni din fiecare sac va fi între $1$ și $100\ 000$.
- Galbenii din oricare dintre saci nu pot fi împărțiți mai multor frați.
- Numărul total de galbeni aflați în vistierie este mai mic sau egal cu $10^9$.
- Împăratul cel bătrân nu are doi feciori cu aceeași vârstă.
- **Puteți afișa orice soluție în care mezinul primește numărul maxim posibil de galbeni**.
- Pentru fiecare test, afișarea corectă a numărului maxim de galbeni primiți de mezin este notată cu $40\%$ din punctajul alocat testului.
- Pentru teste valorând 10 puncte, $N = K$ și $N \leq 100$.
- Pentru teste valorând 30 de puncte, $2 \leq K < N \leq 15$.
- Pentru teste valorând 50 de puncte, $2 \leq K < N \leq 100$.

---

Example:
`mostenire.in`
```
8 3
1
2
3
4
5
6
7
8
```

`mostenire.out`
```
10
3 4
2 2
1 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream fin("mostenire.in");
    std::ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;

    std::vector<int> bags(N);
    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
    }

    std::vector<int> distribution(K, 1); // Each son gets at least one bag
    int remainingBags = N - K; // Remaining bags after each son gets one

    // Calculate the division of the remaining bags
    for (int i = K - 2; i >= 0; --i) {
        int take = std::min(remainingBags, distribution[i + 1]);
        distribution[i] += take;
        remainingBags -= take;
        if (remainingBags == 0) break;
    }

    // Calculate the sum for the youngest son
    int youngestSum = 0;
    for (int i = N - 1; i >= N - distribution[K - 1]; --i) {
        youngestSum += bags[i];
    }

    // Write the result to the file
    fout << youngestSum << '\n';
    int currentIndex = 0;
    for (int i = 0; i < K; ++i) {
        fout << (K - i) << ' ' << distribution[K - i - 1] << '\n';
        currentIndex += distribution[K - i - 1];
    }

    fin.close();
    fout.close();

    return 0;
}
```
This C++ program reads the input from `mostenire.in`, processes it to determine the distribution of bags to the emperor's sons that maximizes the youngest son's inheritance without giving him more than his older brothers, and writes the result to `mostenire.out`. It employs a greedy approach and works backwards to ensure fair distribution.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
8
3 1
2 2
1 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon evaluating the differences between the expected and the found output, it looks like the initial solution wrongly calculated the distribution of bags. Specifically, it distributed only one bag for the youngest son (son number 3) and failed to maximize his inheritance. This is because the greedy algorithm used in the initial solution did not consider the actual values in the bags, hence resulting in an incorrect distribution.

The correct solution should start by giving each son one bag and then distribute the rest of the bags starting from the youngest son to the oldest, ensuring that each son gets an equal or less number of coins than the next older son. To achieve this, we must keep track of the prefix sums of the bags to make decisions based on the sum of coins rather than the count of bags.

Let's implement the correct solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("mostenire.in");
    std::ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    std::vector<int> bags(N);
    std::vector<long long> prefixSums(N + 1, 0);

    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
        prefixSums[i + 1] = prefixSums[i] + bags[i];
    }

    // The maximum coins the youngest can get is the total coins divided by K
    long long maxForYoungest = prefixSums[N] / K;
    std::vector<long long> inheritance(K, 0); // Coins for each son
    std::vector<int> bagCounts(K, 0); // Bags for each son

    // Start with the youngest son
    long long currentSum = 0;
    int currentBag = 0;
    for (int i = K - 1; i >= 0; --i) {
        while (currentBag < N && currentSum + bags[currentBag] <= maxForYoungest) {
            currentSum += bags[currentBag++];
        }
        inheritance[i] = currentSum;
        bagCounts[i] = currentBag;
        if (i > 0) {
            // Prepare for the next son (the next older brother)
            maxForYoungest = (prefixSums[N] - currentSum) / i;
            currentSum = 0;
        }
    }

    // Write the sum for the youngest son (son K) to the output file
    fout << inheritance[K - 1] << '\n';
    for (int i = K - 1; i >= 0; --i) {
        fout << K - i << ' ' << bagCounts[i] - (i < K - 1 ? bagCounts[i + 1] : 0) << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

This improved solution calculates the prefix sums to determine the total amount of coins in each possible set of contiguous bags. It then uses this information to distribute the bags among the sons, starting from the youngest, ensuring that the youngest son receives the maximum possible number of coins without surpassing the share of the older sons. The solution iteratively computes the maximum coins that each son can inherit and assigns bags accordingly. The result is then written to `mostenire.out` as expected.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
10
1 4
2 2
3 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The difference between the expected and the found output lies in the order in which the sons receive their inheritance. According to the problem statement, the sons could be called in any order, but the output must list the sons in the order they were called by the emperor. However, the provided solution always lists the sons in the reverse order, starting with the youngest son.

To match the expected output, we must keep track of the distribution order in addition to the number of bags each son receives. We can do this by creating a vector to store the order in which the sons are called and the number of bags they received. We'll find the optimal distribution first, and then simulate the calling order based on the optimal distribution.

Let's rewrite the solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
    std::ifstream fin("mostenire.in");
    std::ofstream fout("mostenire.out");

    int N, K;
    fin >> N >> K;
    std::vector<int> bags(N);
    std::vector<long long> sums(N + 1, 0); // Prefix sums, 1-indexed

    for (int i = 0; i < N; ++i) {
        fin >> bags[i];
        sums[i + 1] = sums[i] + bags[i];
    }

    // The optimal distribution is such that each son receives the same amount,
    // except for the last son who might receive less.
    long long equal_share = sums[N] / K;
    std::vector<int> sons(K);
    std::vector<int> received(K);
    int prev_index = 0; // Previous dividing index (0 initially)

    // Distribute as equally as possible, starting from the eldest son
    for (int i = 0; i < K; ++i) {
        // Calculate the maximum index such that the sum of bags from prev_index to this index is <= equal_share
        int index = std::upper_bound(sums.begin(), sums.end(), equal_share + sums[prev_index]) - sums.begin() - 1;
        index = std::max(index, prev_index + 1); // Each son must receive at least one bag
        received[i] = index - prev_index; // Number of bags received
        prev_index = index; // Prepare for the next iteration
        sons[i] = i + 1; // Son numbering starts from 1
    }

    // Write the received gold coins by the youngest son
    fout << sums[prev_index] - sums[prev_index - received[K - 1]] << '\n';
    // Write son numbers and the number of bags they received
    for (int i = K - 1; i >= 0; --i) {
        fout << sons[i] << ' ' << received[i] << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```

With these adjustments, the solution should match the expected output by distributing the bags as equally as possible, and then listing the distribution order according to the problem requirements.
---------- user ----------


Program result did not match expected result.
Input data:
```
8 3
1
2
3
4
5
6
7
8
```
Expected output:
```
10
3 4
2 2
1 2
```
Found output:
```
7
3 1
2 2
1 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
