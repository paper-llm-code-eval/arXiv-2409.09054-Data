---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `castel.in` and write to `castel.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arheologii au descoperit pe un platou muntos greu accesibil ruinele unui castel medieval, pe care l-au fotografiat  din elicopter, obţinând harta digitizată a acestuia. Harta este memorată sub forma unui tablou bidimensional $H$, compus din $N \cdot N$ pătrate cu latura egală cu unitatea, având ca elemente numere naturale între $0$ și $15$, care codifică  forma pereţilor fiecărui pătrat unitar. Dacă scriem numărul natural $H[i][j]$ în baza $2$, folosind exact $4$ cifre binare, fiecare bit dă informații despre unul dintre pereții posibil de construit pe fiecare latură a pătratului unitar din poziția $(i,j)$, astfel:

* dacă bitul de pe poziția $0$ are valoarea $1$, atunci există perete pe latura vestică (latura din stânga)
* dacă bitul de pe poziția $1$ are valoarea $1$, atunci există perete pe latura sudică (latura de jos)
* dacă bitul de pe poziția $2$ are valoarea $1$, atunci există perete pe latura estică (latura din dreapta)
* dacă bitul de pe poziția $3$ are valoarea $1$, atunci există perete pe latura nordică (latura de sus)
* un bit de valoare $0$ indică lipsa peretelui corespunzător acestuia

Pentru un număr scris în baza $2$, numerotarea cifrelor începe cu poziția $0$, de la dreapta la stânga. Castelul este interesant deoarece, pentru realizarea unei mai bune apărări, camerele ce-l compun sunt construite fie independent, fie una în interiorul alteia. Orice camera este construită la o distanţă de cel puţin o unitate faţă de zidul ce împrejmuieşte castelul sau faţă de pereţii altor camere. 

Folosind harta, arheologii doresc să afle informaţii privind numărul camerelor şi camera de arie maximă. Prin arie a unei camere se înţelege numărul pătratelor unitate cuprinse în interiorul pereților aceasteia, fără a socoti ariile camerelor construite în interiorul ei.


# Cerință


Cunoscând codificarea hărţii castelului, să se determine:
1. numărul total al camerelor din castel
2. aria maximă a unei camere
3. coordonatele colţurilor din stânga-sus, respectiv dreapta-jos a camerei cu aria maximă. Dacă există mai multe camere având aceeaşi arie maximă, atunci se vor afişa coordonatele camerei având colţul din stânga-sus $({lin}_1, {col}_1)$ cu ${lin}_1$ minimă, iar la linii egale pe aceea cu ${col}_1$ minimă.

# Date de intrare


Datele de intrare se citesc din fişierul ```castel.in```, care are următoarea structură:

* Pe prima linie se află numărul natural $C$, care poate fi egal cu $1, 2$ sau $3$, în funcţie de cerinţa ce trebuie rezolvată
* Pe linia următoare se află numărul natural $N$, reprezentând dimensiunea hărţii
* Pe următoarele $N$ linii se găsesc câte $N$ numere naturale din intervalul $[0,15]$, separate prin câte un spaţiu, reprezentând harta castelului.


# Date de ieșire


Datele de ieşire se vor scrie în fişierul ```castel.out```, astfel:

* Dacă $C = 1$, pe prima linie se va scrie numărul total al camerelor din castel
* Dacă $C = 2$, pe prima linie se va scrie aria maximă a unei camere din castel
* Dacă $C = 3$, pe prima linie se vor scrie $4$ numere naturale ${lin}_1 \ {col}_1 \ {lin}_2 \ {col}_2$, separate prin câte un spaţiu, reprezentând coordonatele colțurilor din stânga-sus, respectiv dreapta-jos ale camerei de arie maximă.


# Restricții și precizări

* $2 \leq N \leq 100$;
* Se garantează că în castel există cel puţin o cameră.
* Se acordă $10$ puncte din oficiu.

| $C$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 50      |
| $3$ | 20      |

---

Example:
`castel.in`
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```

`castel.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
// C++ program for the above approach
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to store the information
// of a rectangle (room)
struct Rectangle {
    int x1, y1, x2, y2;
};

// Read a value in the specified format
int read_value(ifstream& input) {
    int val;
    input >> val;
    return val;
}

// Method to check if a bit is set
bool is_wall(int cell, int bit) {
    return (cell & (1 << bit)) != 0;
}

// DFS method to compute the size of a room
int dfs(vector<vector<int>>& grid, int x, int y, int N) {
    if (x < 0 || y < 0 || x >= N || y >= N || grid[x][y] == -1) return 0;
    // Mark as visited
    grid[x][y] = -1;
    int size = 1;
    // Visit adjacent cells
    if (!is_wall(grid[x][y], 0)) size += dfs(grid, x, y - 1, N);
    if (!is_wall(grid[x][y], 1)) size += dfs(grid, x + 1, y, N);
    if (!is_wall(grid[x][y], 2)) size += dfs(grid, x, y + 1, N);
    if (!is_wall(grid[x][y], 3)) size += dfs(grid, x - 1, y, N);
    return size;
}

// Main function
int main() {
    ifstream input("castel.in");
    ofstream output("castel.out");

    int C = read_value(input);
    int N = read_value(input);

    // Read the grid
    vector<vector<int>> grid(N, vector<int>(N));
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            grid[i][j] = read_value(input);
        }
    }
    input.close();

    // Variables for the largest room
    int max_area = 0;
    Rectangle max_room = {0, 0, 0, 0};

    // Variables for the number of rooms
    int rooms = 0;

    // Iterate through the grid
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (grid[i][j] != -1) { // Not visited
                int area = dfs(grid, i, j, N);
                if (area) {
                    rooms++;
                    if (area > max_area) {
                        max_area = area;
                        max_room = {i, j, i, j};
                    }
                }
            }
        }
    }

    // Write the results
    if (C == 1) {
        output << rooms;
    } else if (C == 2) {
        output << max_area;
    } else if (C == 3) {
        output << max_room.x1 << " " << max_room.y1 << " "
               << max_room.x2 << " " << max_room.y2;
    }

    output.close();
    return 0;
}
```

Note that this code performs a depth-first search (DFS) to find the area of each room and track the largest one. The `dfs` function recursively explores each cell that's part of a room, marking it as visited by setting the value to -1. The `is_wall` function checks if there is a wall in a certain direction. The main function iterates through the grid to find all rooms, and the output is generated based on the value of `C`. The code reads from `castel.in` and writes to `castel.out` using `ifstream` and `ofstream`, as required.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```
Expected output:
```
6
```
Found output:
```
81
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
