---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `castel.in` and write to `castel.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arheologii au descoperit pe un platou muntos greu accesibil ruinele unui castel medieval, pe care l-au fotografiat  din elicopter, obţinând harta digitizată a acestuia. Harta este memorată sub forma unui tablou bidimensional $H$, compus din $N \cdot N$ pătrate cu latura egală cu unitatea, având ca elemente numere naturale între $0$ și $15$, care codifică  forma pereţilor fiecărui pătrat unitar. Dacă scriem numărul natural $H[i][j]$ în baza $2$, folosind exact $4$ cifre binare, fiecare bit dă informații despre unul dintre pereții posibil de construit pe fiecare latură a pătratului unitar din poziția $(i,j)$, astfel:

* dacă bitul de pe poziția $0$ are valoarea $1$, atunci există perete pe latura vestică (latura din stânga)
* dacă bitul de pe poziția $1$ are valoarea $1$, atunci există perete pe latura sudică (latura de jos)
* dacă bitul de pe poziția $2$ are valoarea $1$, atunci există perete pe latura estică (latura din dreapta)
* dacă bitul de pe poziția $3$ are valoarea $1$, atunci există perete pe latura nordică (latura de sus)
* un bit de valoare $0$ indică lipsa peretelui corespunzător acestuia

Pentru un număr scris în baza $2$, numerotarea cifrelor începe cu poziția $0$, de la dreapta la stânga. Castelul este interesant deoarece, pentru realizarea unei mai bune apărări, camerele ce-l compun sunt construite fie independent, fie una în interiorul alteia. Orice camera este construită la o distanţă de cel puţin o unitate faţă de zidul ce împrejmuieşte castelul sau faţă de pereţii altor camere. 

Folosind harta, arheologii doresc să afle informaţii privind numărul camerelor şi camera de arie maximă. Prin arie a unei camere se înţelege numărul pătratelor unitate cuprinse în interiorul pereților aceasteia, fără a socoti ariile camerelor construite în interiorul ei.


# Cerință


Cunoscând codificarea hărţii castelului, să se determine:
1. numărul total al camerelor din castel
2. aria maximă a unei camere
3. coordonatele colţurilor din stânga-sus, respectiv dreapta-jos a camerei cu aria maximă. Dacă există mai multe camere având aceeaşi arie maximă, atunci se vor afişa coordonatele camerei având colţul din stânga-sus $({lin}_1, {col}_1)$ cu ${lin}_1$ minimă, iar la linii egale pe aceea cu ${col}_1$ minimă.

# Date de intrare


Datele de intrare se citesc din fişierul ```castel.in```, care are următoarea structură:

* Pe prima linie se află numărul natural $C$, care poate fi egal cu $1, 2$ sau $3$, în funcţie de cerinţa ce trebuie rezolvată
* Pe linia următoare se află numărul natural $N$, reprezentând dimensiunea hărţii
* Pe următoarele $N$ linii se găsesc câte $N$ numere naturale din intervalul $[0,15]$, separate prin câte un spaţiu, reprezentând harta castelului.


# Date de ieșire


Datele de ieşire se vor scrie în fişierul ```castel.out```, astfel:

* Dacă $C = 1$, pe prima linie se va scrie numărul total al camerelor din castel
* Dacă $C = 2$, pe prima linie se va scrie aria maximă a unei camere din castel
* Dacă $C = 3$, pe prima linie se vor scrie $4$ numere naturale ${lin}_1 \ {col}_1 \ {lin}_2 \ {col}_2$, separate prin câte un spaţiu, reprezentând coordonatele colțurilor din stânga-sus, respectiv dreapta-jos ale camerei de arie maximă.


# Restricții și precizări

* $2 \leq N \leq 100$;
* Se garantează că în castel există cel puţin o cameră.
* Se acordă $10$ puncte din oficiu.

| $C$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 50      |
| $3$ | 20      |

---

Example:
`castel.in`
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```

`castel.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::ifstream fin("castel.in");
std::ofstream fout("castel.out");

const int dx[] = {0, -1, 0, 1};
const int dy[] = {1, 0, -1, 0};

int N, C;
int H[102][102], roomCount, maxArea, maxAreaX1, maxAreaY1, maxAreaX2, maxAreaY2;
bool visited[102][102];

void floodFill(int x, int y, int &area, int &x1, int &y1, int &x2, int &y2) {
    visited[x][y] = true;
    area++;
    x1 = std::min(x1, x); y1 = std::min(y1, y);
    x2 = std::max(x2, x); y2 = std::max(y2, y);

    for (int i = 0; i < 4; ++i) {
        if ((H[x][y] & (1 << i)) == 0) {
            int nx = x + dx[i], ny = y + dy[i];
            if (!visited[nx][ny]) {
                floodFill(nx, ny, area, x1, y1, x2, y2);
            }
        }
    }
}

int main() {
    fin >> C >> N;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            fin >> H[i][j];
        }
    }

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (!visited[i][j] && H[i][j] != 15) {
                int area = 0, x1 = N, y1 = N, x2 = 0, y2 = 0;
                floodFill(i, j, area, x1, y1, x2, y2);
                if (area > maxArea) {
                    maxArea = area;
                    maxAreaX1 = x1;
                    maxAreaY1 = y1;
                    maxAreaX2 = x2;
                    maxAreaY2 = y2;
                }
                roomCount++;
            }
        }
    }

    switch (C) {
        case 1: fout << roomCount; break;
        case 2: fout << maxArea; break;
        case 3: fout << maxAreaX1 << ' ' << maxAreaY1 << ' ' << maxAreaX2 << ' ' << maxAreaY2; break;
    }

    fin.close();
    fout.close();

    return 0;
}
```
This code reads the information from "castel.in", determines the number of rooms and the largest room (both its area and coordinates), and writes the appropriate output to "castel.out", based on the task number provided in the input file.
---------- user ----------


Program exited with code 139.
stdout:
```

```
stderr:
```

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The exit code 139 typically indicates a segmentation fault which is often caused by accessing memory that the program is not allowed to access. In the context of the provided code, this could be due to accessing elements outside of the array bounds of `H` or `visited`.

The problematic code could be within the `floodFill` function, as it does not check if `nx` and `ny` are within the bounds of the array before accessing `visited[nx][ny]`. It's also possible that the global arrays `H` and `visited` are too small because they are declared to have a size of `102` when the problem constraints allow `N` to be up to `100`, and the flood fill might check the boundary walls, requiring an array size of `102 + 2`.

To fix the code, we should:

1. Ensure that `nx` and `ny` are within the bounds of the array before accessing `visited[nx][ny]`.
2. Increase the size of the `H` and `visited` arrays to `104` to account for the boundary checks.
3. Initialize the `maxArea` variable to ensure it starts from `0`.

Here's the corrected code:

```cpp
#include <fstream>
#include <algorithm>

std::ifstream fin("castel.in");
std::ofstream fout("castel.out");

const int dx[] = {0, -1, 0, 1};
const int dy[] = {1, 0, -1, 0};
const int MAXN = 102; // Considering the boundaries

int N, C;
int H[MAXN + 2][MAXN + 2], roomCount = 0, maxArea = 0, maxAreaX1, maxAreaY1, maxAreaX2, maxAreaY2;
bool visited[MAXN + 2][MAXN + 2];

void floodFill(int x, int y, int &area, int &x1, int &y1, int &x2, int &y2) {
    visited[x][y] = true;
    area++;
    x1 = std::min(x1, x); y1 = std::min(y1, y);
    x2 = std::max(x2, x); y2 = std::max(y2, y);

    for (int i = 0; i < 4; ++i) {
        if ((H[x][y] & (1 << i)) == 0) {
            int nx = x + dx[i], ny = y + dy[i];
            if (nx >= 0 && nx < N && ny >= 0 && ny < N && !visited[nx][ny]) {
                floodFill(nx, ny, area, x1, y1, x2, y2);
            }
        }
    }
}

int main() {
    fin >> C >> N;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            fin >> H[i][j];
        }
    }

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if (!visited[i][j] && H[i][j] != 15) {
                int area = 0, x1 = N, y1 = N, x2 = 0, y2 = 0;
                floodFill(i, j, area, x1, y1, x2, y2);
                if (area > maxArea) {
                    maxArea = area;
                    maxAreaX1 = x1;
                    maxAreaY1 = y1;
                    maxAreaX2 = x2;
                    maxAreaY2 = y2;
                }
                roomCount++;
            }
        }
    }

    switch (C) {
        case 1: fout << roomCount; break;
        case 2: fout << maxArea; break;
        case 3: fout << maxAreaX1 << ' ' << maxAreaY1 << ' ' << maxAreaX2 << ' ' << maxAreaY2; break;
    }

    fin.close();
    fout.close();

    return 0;
}
```

Now, the code should no longer exit with code 139, as it properly checks array bounds before accessing elements and has been adjusted to handle the maximum possible values of `N`. Additionally, the `maxArea` variable has been initialized to `0` outside the loop.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```
Expected output:
```
6
```
Found output:
```
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
