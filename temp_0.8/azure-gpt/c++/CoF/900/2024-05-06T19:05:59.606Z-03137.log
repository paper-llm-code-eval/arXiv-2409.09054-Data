---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `castel.in` and write to `castel.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Arheologii au descoperit pe un platou muntos greu accesibil ruinele unui castel medieval, pe care l-au fotografiat  din elicopter, obţinând harta digitizată a acestuia. Harta este memorată sub forma unui tablou bidimensional $H$, compus din $N \cdot N$ pătrate cu latura egală cu unitatea, având ca elemente numere naturale între $0$ și $15$, care codifică  forma pereţilor fiecărui pătrat unitar. Dacă scriem numărul natural $H[i][j]$ în baza $2$, folosind exact $4$ cifre binare, fiecare bit dă informații despre unul dintre pereții posibil de construit pe fiecare latură a pătratului unitar din poziția $(i,j)$, astfel:

* dacă bitul de pe poziția $0$ are valoarea $1$, atunci există perete pe latura vestică (latura din stânga)
* dacă bitul de pe poziția $1$ are valoarea $1$, atunci există perete pe latura sudică (latura de jos)
* dacă bitul de pe poziția $2$ are valoarea $1$, atunci există perete pe latura estică (latura din dreapta)
* dacă bitul de pe poziția $3$ are valoarea $1$, atunci există perete pe latura nordică (latura de sus)
* un bit de valoare $0$ indică lipsa peretelui corespunzător acestuia

Pentru un număr scris în baza $2$, numerotarea cifrelor începe cu poziția $0$, de la dreapta la stânga. Castelul este interesant deoarece, pentru realizarea unei mai bune apărări, camerele ce-l compun sunt construite fie independent, fie una în interiorul alteia. Orice camera este construită la o distanţă de cel puţin o unitate faţă de zidul ce împrejmuieşte castelul sau faţă de pereţii altor camere. 

Folosind harta, arheologii doresc să afle informaţii privind numărul camerelor şi camera de arie maximă. Prin arie a unei camere se înţelege numărul pătratelor unitate cuprinse în interiorul pereților aceasteia, fără a socoti ariile camerelor construite în interiorul ei.


# Cerință


Cunoscând codificarea hărţii castelului, să se determine:
1. numărul total al camerelor din castel
2. aria maximă a unei camere
3. coordonatele colţurilor din stânga-sus, respectiv dreapta-jos a camerei cu aria maximă. Dacă există mai multe camere având aceeaşi arie maximă, atunci se vor afişa coordonatele camerei având colţul din stânga-sus $({lin}_1, {col}_1)$ cu ${lin}_1$ minimă, iar la linii egale pe aceea cu ${col}_1$ minimă.

# Date de intrare


Datele de intrare se citesc din fişierul ```castel.in```, care are următoarea structură:

* Pe prima linie se află numărul natural $C$, care poate fi egal cu $1, 2$ sau $3$, în funcţie de cerinţa ce trebuie rezolvată
* Pe linia următoare se află numărul natural $N$, reprezentând dimensiunea hărţii
* Pe următoarele $N$ linii se găsesc câte $N$ numere naturale din intervalul $[0,15]$, separate prin câte un spaţiu, reprezentând harta castelului.


# Date de ieșire


Datele de ieşire se vor scrie în fişierul ```castel.out```, astfel:

* Dacă $C = 1$, pe prima linie se va scrie numărul total al camerelor din castel
* Dacă $C = 2$, pe prima linie se va scrie aria maximă a unei camere din castel
* Dacă $C = 3$, pe prima linie se vor scrie $4$ numere naturale ${lin}_1 \ {col}_1 \ {lin}_2 \ {col}_2$, separate prin câte un spaţiu, reprezentând coordonatele colțurilor din stânga-sus, respectiv dreapta-jos ale camerei de arie maximă.


# Restricții și precizări

* $2 \leq N \leq 100$;
* Se garantează că în castel există cel puţin o cameră.
* Se acordă $10$ puncte din oficiu.

| $C$ | Punctaj |
| - | ------- |
| $1$ | 20      |
| $2$ | 50      |
| $3$ | 20      |

---

Example:
`castel.in`
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```

`castel.out`
```
6
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_N = 105;
int H[MAX_N][MAX_N], V[MAX_N][MAX_N];
int N, C, roomCount, maxArea;
int roomArea, minX, minY, maxX, maxY;

void readInput() {
    ifstream fin("castel.in");
    fin >> C >> N;
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            fin >> H[i][j];
        }
    }
    fin.close();
}

void floodFill(int x, int y) {
    if (x < 1 || x > N || y < 1 || y > N || V[x][y] || (H[x][y] & 15) == 15) return;
    V[x][y] = roomCount;
    roomArea++;
    minX = min(minX, x);
    minY = min(minY, y);
    maxX = max(maxX, x);
    maxY = max(maxY, y);

    if (!(H[x][y] & 1)) floodFill(x, y - 1);
    if (!(H[x][y] & 2)) floodFill(x + 1, y);
    if (!(H[x][y] & 4)) floodFill(x, y + 1);
    if (!(H[x][y] & 8)) floodFill(x - 1, y);
}

void solve() {
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            if (!V[i][j] && (H[i][j] & 15) != 15) {
                roomArea = 0;
                minX = minY = MAX_N;
                maxX = maxY = 0;
                roomCount++;
                floodFill(i, j);
                if (roomArea > maxArea) {
                    maxArea = roomArea;
                    minX = maxX = i;
                    minY = maxY = j;
                } else if (roomArea == maxArea) {
                    if (i < minX || (i == minX && j < minY)) {
                        minX = i;
                        minY = j;
                    }
                }
            }
        }
    }
}

void writeOutput() {
    ofstream fout("castel.out");
    if (C == 1) {
        fout << roomCount << "\n";
    } else if (C == 2) {
        fout << maxArea << "\n";
    } else if (C == 3) {
        fout << minX << " " << minY << " " << maxX << " " << maxY << "\n";
    }
    fout.close();
}

int main() {
    readInput();
    solve();
    writeOutput();
    return 0;
}
```

This solution reads input from `castel.in` and writes output to `castel.out` as requested. It uses a flood-fill algorithm to find all rooms and calculate their areas. It tracks the coordinates of the room with the maximal area to handle the third case. It avoids using `cin, cout, printf, scanf` and uses file streams directly.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```
Expected output:
```
6
```
Found output:
```
5
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the provided solution, it seems there is an issue with not updating the coordinates of the maximal area when a new room with a maximal area is found. The code is incorrectly updating `minX` and `minY` inside the condition where it checks if the `roomArea` is equal to `maxArea`, but it should do so only when a new `maxArea` is found. Let's fix this error and rewrite the solution accordingly.

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_N = 105;
int H[MAX_N][MAX_N], V[MAX_N][MAX_N];
int N, C, roomCount, maxArea;
int roomArea, minX, minY, maxX, maxY;

void readInput() {
    ifstream fin("castel.in");
    fin >> C >> N;
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            fin >> H[i][j];
        }
    }
    fin.close();
}

void floodFill(int x, int y) {
    if (x < 1 || x > N || y < 1 || y > N || V[x][y] || (H[x][y] & 15) == 15) return;
    V[x][y] = roomCount;
    roomArea++;
    minX = min(minX, x);
    minY = min(minY, y);
    maxX = max(maxX, x);
    maxY = max(maxY, y);

    if (!(H[x][y] & 1)) floodFill(x, y - 1);
    if (!(H[x][y] & 2)) floodFill(x + 1, y);
    if (!(H[x][y] & 4)) floodFill(x, y + 1);
    if (!(H[x][y] & 8)) floodFill(x - 1, y);
}

void solve() {
    maxArea = 0;
    roomCount = 0;
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            if (!V[i][j] && (H[i][j] & 15) != 15) {
                roomArea = 0;
                minX = minY = MAX_N;
                maxX = maxY = 0;
                roomCount++;
                floodFill(i, j);
                if (roomArea > maxArea) {
                    maxArea = roomArea;
                    minX = maxX = i; // This line should not be here
                    minY = maxY = j; // This line should not be here
                }
            }
        }
    }
}

void writeOutput() {
    ofstream fout("castel.out");
    if (C == 1) {
        fout << roomCount << "\n";
    } else if (C == 2) {
        fout << maxArea << "\n";
    } else if (C == 3) {
        fout << minX << " " << minY << " " << maxX << " " << maxY << "\n";
    }
    fout.close();
}

int main() {
    readInput();
    solve();
    writeOutput();
    return 0;
}
```

Now let's correct the error by moving the coordinate updates to the correct place inside `solve()` function:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_N = 105;
int H[MAX_N][MAX_N], V[MAX_N][MAX_N];
int N, C, roomCount, maxArea;
int roomArea, minX, minY, maxX, maxY;

void readInput() {
    ifstream fin("castel.in");
    fin >> C >> N;
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            fin >> H[i][j];
        }
    }
    fin.close();
}

void floodFill(int x, int y) {
    if (x < 1 || x > N || y < 1 || y > N || V[x][y] || (H[x][y] & 15) == 15) return;
    V[x][y] = roomCount;
    roomArea++;
    minX = min(minX, x);
    minY = min(minY, y);
    maxX = max(maxX, x);
    maxY = max(maxY, y);

    if (!(H[x][y] & 1)) floodFill(x, y - 1);
    if (!(H[x][y] & 2)) floodFill(x + 1, y);
    if (!(H[x][y] & 4)) floodFill(x, y + 1);
    if (!(H[x][y] & 8)) floodFill(x - 1, y);
}

void solve() {
    maxArea = 0;
    roomCount = 0;
    for (int i = 1; i <= N; ++i) {
        for (int j = 1; j <= N; ++j) {
            if (!V[i][j] && (H[i][j] & 15) != 15) {
                roomArea = 0;
                minX = minY = MAX_N;
                maxX = maxY = 0;
                roomCount++;
                floodFill(i, j);
                if (roomArea > maxArea) {
                    maxArea = roomArea;
                    minX = minY = i; // Corrected update for minX and minY
                    maxX = maxY = j; // Corrected update for maxX and maxY
                } else if (roomArea == maxArea) {
                    if (i < minX || (i == minX && j < minY)) {
                        minX = i;
                        minY = j;
                    }
                }
            }
        }
    }
}

void writeOutput() {
    ofstream fout("castel.out");
    if (C == 1) {
        fout << roomCount << "\n";
    } else if (C == 2) {
        fout << maxArea << "\n";
    } else if (C == 3) {
        fout << minX << " " << minY << " " << maxX << " " << maxY << "\n";
    }
    fout.close();
}

int main() {
    readInput();
    solve();
    writeOutput();
    return 0;
}
```

This should fix the issue and provide the correct results as per the given input.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
9
0 2 0 0 0 0 0 0 0 
4 15 1 0 0 2 2 0 0 
0 10 2 0 4 11 14 1 0 
4 9 12 1 2 10 10 2 0 
4 3 6 5 9 8 10 12 1 
0 10 8 4 1 4 15 5 1 
4 13 1 4 3 2 10 6 1 
4 7 1 0 8 8 8 8 0 
0 8 0 0 0 0 0 0 0
```
Expected output:
```
6
```
Found output:
```
5
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
