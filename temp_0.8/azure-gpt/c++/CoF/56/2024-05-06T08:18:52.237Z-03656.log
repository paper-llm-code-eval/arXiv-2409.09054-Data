---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `zmeu.in` and write to `zmeu.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un zmeu cu $n$ capete călătoreşte din poveste în poveste, iar în poveştile tradiţionale întâlneşte câte un Făt Frumos care-l mai scurtează de câteva capete, în timp ce în poveştile moderne salvează omenirea mâncând în timp record, cu toate capetele lui, insecte ucigaşe apărute prin mutaţii genetice. Într-o seară, el îşi planifică o succesiune de poveşti cărora să le dea viaţă. El ştie $p$ poveşti numerotate de la $1$ la $p$, durata fiecăreia şi numărul de capete pe care le pierde în fiecare poveste. Mai ştie o mulţime de $k$ perechi de poveşti, semnificând faptul că a doua poveste din pereche nu poate fi spusă după prima poveste din pereche.

# Cerinţă
Ştiind că trebuie să înceapă cu povestea $1$ şi să încheie succesiunea cu povestea $p$, ajutaţi bietul zmeu să aleagă una sau mai multe poveşti intermediare astfel încât durata totală să fie minimă şi să rămână cu cel puţin un cap la sfârşitul tuturor poveştilor.

# Date de intrare
Fişierul de intrare `zmeu.in` conţine pe prima linie numerele $n, p$ şi $k$ despărţite prin câte un spaţiu. Pe fiecare din următoarele $p$ linii se află câte o pereche de numere $d_i$ şi $c_i$ (separate prin câte un spaţiu) ce reprezintă durata şi numărul de capete tăiate pentru fiecare poveste. Iar pe ultimele $k$ linii se află câte o pereche de numere $p_i$ şi $p_j$ (separate prin câte un spaţiu) ce semnifică faptul că povestea $p_j$ nu poate fi spusă după povestea $p_i$.

# Date de ieşire
Fişierul de ieşire `zmeu.out` conţine o singură linie pe care se află un număr natural reprezentând durata (minimă) a succesiunii de poveşti sau valoarea $–1$ dacă nu există o astfel de succesiune.

# Restricţii şi precizări
* $2 ≤ N ≤ 500$
* $1 ≤ P ≤ 200$
* $1 ≤ k ≤ 30 \ 000$
* Valorile reprezentând duratele şi numărul de capete sunt numere naturale (duratele fiind strict pozitive), nedepăşind valoarea $10$.

---

Example:
`zmeu.in`
```
10 4 2
2 6
4 0
1 3
3 3
3 2
4 3
```

`zmeu.out`
```
9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cstring>

using namespace std;

const int MAX_HEADS = 505;
const int MAX_STORIES = 205;
const int INF = 10000000; // A large number, more than any possible sum of durations

int dp[MAX_HEADS][MAX_STORIES];
bool unreachable[MAX_STORIES][MAX_STORIES];

// Main function to solve the problem
int main() {
    ifstream fin("zmeu.in");
    ofstream fout("zmeu.out");

    int heads, stories, restrictions;
    fin >> heads >> stories >> restrictions;

    vector<pair<int, int>> story(stories + 1);
    for (int i = 1; i <= stories; ++i) {
        fin >> story[i].first >> story[i].second;
    }

    int x, y;
    while (restrictions--) {
        fin >> x >> y;
        unreachable[x][y] = true;
    }

    // Initialize the dp array with INF, except for the starting story
    for (int i = 0; i <= heads; ++i) {
        for (int j = 0; j <= stories; ++j) {
            dp[i][j] = INF;
        }
    }
    dp[heads][1] = 0; // The story begins with no duration cost

    // Dynamic programming to find the minimum duration
    for (int h = heads; h >= 0; --h) {
        for (int i = 1; i <= stories; ++i) {
            if (dp[h][i] != INF) {
                for (int j = 1; j <= stories; ++j) {
                    if (!unreachable[i][j]) {
                        int remainingHeads = h - story[j].second;
                        if (remainingHeads >= 0) {
                            dp[remainingHeads][j] = min(dp[remainingHeads][j], dp[h][i] + story[j].first);
                        }
                    }
                }
            }
        }
    }

    // Finding the minimum duration to end the last story with at least 1 head
    int answer = INF;
    for (int h = 1; h <= heads; ++h) {
        answer = min(answer, dp[h][stories]);
    }

    // If no solution was found, print -1
    if (answer == INF) {
        fout << "-1\n";
    } else {
        fout << answer << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```
This code reads from `zmeu.in` and writes to `zmeu.out` using `ifstream` and `ofstream`, which are the recommended way to handle file input/output in C++ when not using `cin`, `cout`, `printf`, or `scanf`. The solution uses dynamic programming to compute the minimum duration to go from the first to the last story while keeping track of the number of heads remaining. The `unreachable` matrix keeps track of the restrictions between stories, and the `dp` array holds the minimum duration to reach a story with a certain number of heads left. The solution finds the minimum value in this array that corresponds to the last story and at least one head remaining. If no solution is possible, it writes `-1` to `zmeu.out`.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 4 2
2 6
4 0
1 3
3 3
3 2
4 3
```
Expected output:
```
9
```
Found output:
```
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
