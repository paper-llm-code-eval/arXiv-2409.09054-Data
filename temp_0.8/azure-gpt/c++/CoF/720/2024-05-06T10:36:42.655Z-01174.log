---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is an efficient C++ solution for the given problem. The solution calculates the greatest common divisor (GCD) of M and N to determine the size of the square (L), and then calculates the number of portions by dividing the area of the rectangle by the area of the square.

```cpp
#include <fstream>
#include <algorithm>

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    std::ifstream in("tort.in");
    std::ofstream out("tort.out");

    int M, N;
    in >> M >> N;
    in.close();

    int L = gcd(M, N);
    int portions = (M / L) * (N / L);

    out << portions << " " << L << std::endl;
    out.close();

    return 0;
}
```

This code should read the dimensions of the rectangular cake from `tort.in`, calculate the minimum number of square portions and their size, and write the results to `tort.out`. The use of `ifstream` and `ofstream` ensures that the program does not use `cin`, `cout`, `printf`, or `scanf`. The function `gcd` computes the greatest common divisor, which is used to determine the size of the square portions.

Remember to include the necessary C++ headers (`<fstream>` and `<algorithm>`) for file I/O operations and the `std::` prefix for standard library functions and types. This implementation assumes that the `main` function is properly declared and that the `gcd` helper function is implemented correctly.
