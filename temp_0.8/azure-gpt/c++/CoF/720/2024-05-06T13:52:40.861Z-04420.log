---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tort.in` and write to `tort.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un tort dreptunghiular de dimensiuni $M \cdot N$ trebuie împărţit în porţii pătrate de aceeaşi mărime.

# Cerință

Găsiţi numărul minim de porţii care se pot obţine şi dimensiunea $L$ a acestora. Atât dimensiunile dreptunghiului cât şi ale pătratelor în care se împarte sunt numere întregi.

# Date de intrare

Fişierul `tort.in` va conţine pe prima linie numerele $M$ şi $N$ separate printr-un spaţiu. 

# Date de ieșire

Fişierul `tort.out` va conţine pe o singură linie, două numere naturale separate printr-un spaţiu, primul fiind numărul minim de porţii, iar celălalt dimensiunea $L$.


# Restricții și precizări

* $1 \leq M, N \leq 10 \ 000$;

---

Example:
`tort.in`
```
20 24
```

`tort.out`
```
30 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

int main() {
    std::ifstream fin("tort.in");
    std::ofstream fout("tort.out");

    int M, N;
    fin >> M >> N;

    // Find the greatest common divisor (GCD) of M and N
    int a = M, b = N;
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    int L = a; // The size of the square portions

    // Calculate the minimum number of portions
    int portions = (M * N) / (L * L);

    // Write the result to the output file
    fout << portions << " " << L << "\n";

    fin.close();
    fout.close();

    return 0;
}
```
This solution calculates the greatest common divisor of M and N without using any library function, writes the output to `tort.out` in the specified format, and avoids the use of `cin`, `cout`, `printf`, and `scanf`.
