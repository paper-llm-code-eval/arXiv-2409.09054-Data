{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/699/2024-05-06T10:25:02.863Z-08069.log",
  "attemptStart": 1714991102.863,
  "attemptEnd": 1714991249.981,
  "attemptDuration": 147.11800003051758,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <unordered_set>\n\nusing namespace std;\n\nstruct Position {\n    int x, y;\n};\n\nbool operator==(const Position& a, const Position& b) {\n    return a.x == b.x && a.y == b.y;\n}\n\nnamespace std {\n    template<>\n    struct hash<Position> {\n        size_t operator()(const Position& pos) const {\n            return (size_t)(pos.x) * 251 + pos.y;\n        }\n    };\n}\n\nint main() {\n    ifstream fin(\"poarta.in\");\n    ofstream fout(\"poarta.out\");\n\n    int p;\n    fin >> p;\n\n    unordered_map<Position, Position> finalPos;\n    unordered_set<Position> initialPositions;\n    unordered_map<Position, bool> visited;\n\n    Position start, end;\n    for (int i = 0; i < p; ++i) {\n        fin >> start.x >> start.y >> end.x >> end.y;\n        finalPos[start] = end;\n        initialPositions.insert(start);\n    }\n\n    int moves = 0;\n    for (const auto& echipaj : initialPositions) {\n        if (visited[echipaj] || finalPos[echipaj] == echipaj) continue;\n\n        Position current = echipaj;\n        int cycle_size = 0;\n        while (!visited[current]) {\n            visited[current] = true;\n            current = finalPos[current];\n            cycle_size++;\n        }\n\n        moves += cycle_size - 1;  // A cycle of size 'n' requires 'n-1' moves to resolve.\n\n        if (initialPositions.count(finalPos[echipaj])) {\n            // An additional move is necessary if any echipaj's final position is another echipaj's initial position.\n            moves++;\n        }\n    }\n\n    fout << moves << '\\n';\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 11251,
  "metadata": {
    "id": 699,
    "examples": [
      {
        "in": "3\n1 2 3 4\n6 5 3 9\n3 4 1 2",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră harta universului ca fiind o matrice cu $250$ de linii şi $250$ de coloane. În fiecare celulă se găseşte o aşa numită poartă stelară, iar în anumite celule se găsesc echipaje ale porţii stelare. La o deplasare, un echipaj se poate deplasa din locul în care se află în oricare alt loc în care se găseşte o a doua poartă, în cazul nostru în orice altă poziţie din matrice. Nu se permite situarea simultană a mai mult de un echipaj într-o celulă. La un moment dat un singur echipaj se poate deplasa de la o poartă stelară la alta.\n\n# Cerință\n\nDându-se un număr $p$ de echipaje, pentru fiecare echipaj fiind precizate poziţia iniţială şi poziţia finală, determinaţi numărul minim de deplasări necesare pentru ca toate echipajele să ajungă din poziţia iniţială în cea finală.\n\n# Date de intrare\nFișierul de intrare `poarta.in` are următorul format:\n- pe prima linie se află numărul natural $p$ reprezentând numărul echipaje.\n- pe următoarele $p$ linii se află câte 4 numere naturale, primele două reprezentând coordonatele poziţiei iniţiale a unui echipaj (linie respectiv coloană), următoarele două reprezentând coordonatele poziţiei finale a aceluiaşi echipaj (linie respectiv coloană).\n\n# Date de ieşire\nPe prima linie a fişierului de ieșire `poarta.out` se scrie un singur număr reprezentând numărul minim de deplasări necesar.\n\n# Restricții și precizări\n- $1 < p < 5\\ 000$\n- Coordonatele poziţiilor iniţiale şi finale ale echipajelor sunt numere naturale din intervalul $[1, 250]$.\n- **Atenție la cazurile când poziția inițială este identică cu cea finală!**\n- Poziţiile iniţiale ale celor $p$ echipaje sunt distincte două câte două.\n- Poziţiile finale ale celor $p$ echipaje sunt distincte două câte două.",
    "header": {
      "problem_id": 699,
      "problem_name": "poarta",
      "tags": "[Graphs, Grid]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "poarta.in",
      "output_filename": "poarta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2002 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "poarta.in",
      "output": "poarta.out"
    },
    "consoleInteraction": false
  }
}