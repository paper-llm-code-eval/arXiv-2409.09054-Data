{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/771/2024-05-06T15:12:49.278Z-05136.log",
  "attemptStart": 1715008369.278,
  "attemptEnd": 1715008405.395,
  "attemptDuration": 36.11699986457825,
  "code": "#include <fstream>\n#include <vector>\n#include <bitset>\n#include <functional>\n\nstd::ifstream fin(\"pluricex.in\");\nstd::ofstream fout(\"pluricex.out\");\n\nint main() {\n    int n, k, D;\n    fin >> n >> k >> D;\n\n    std::vector<std::bitset<10>> disciplines(n);\n    int num_of_disciplines, discipline;\n    for (int i = 0; i < n; ++i) {\n        fin >> num_of_disciplines;\n        for (int j = 0; j < num_of_disciplines; ++j) {\n            fin >> discipline;\n            disciplines[i].set(discipline - 1);\n        }\n    }\n\n    std::vector<int> team(k);\n    std::bitset<10> team_disciplines;\n    std::vector<int> all_teams;\n\n    // Recursive lambda function to generate combinations and check disciplines\n    std::function<void(int, int)> form_teams = [&](int start, int depth) {\n        if (depth == k) {\n            team_disciplines.reset();\n            for (int i = 0; i < k; ++i)\n                team_disciplines |= disciplines[team[i]];\n            if (team_disciplines.count() == D) {\n                for (int i = 0; i < k; ++i) all_teams.push_back(team[i] + 1);\n                all_teams.push_back(-1);  // delimiter\n            }\n            return;\n        }\n        for (int i = start; i <= n - k + depth; ++i) {\n            team[depth] = i;\n            form_teams(i + 1, depth + 1);\n        }\n    };\n\n    form_teams(0, 0);\n\n    bool first = true;\n    for (size_t i = 0; i < all_teams.size(); ++i) {\n        if (all_teams[i] == -1) {\n            fout << '\\n';\n            first = true;\n        } else {\n            if (!first)\n                fout << ' ';\n            fout << all_teams[i];\n            first = false;\n        }\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2340,
  "metadata": {
    "id": 771,
    "examples": [
      {
        "in": "6 3 5\n1 2\n2 1 4\n3 2 4 3\n1 5\n2 3 1\n1 3",
        "out": "2 3 4\n3 4 5",
        "explainer": ""
      }
    ],
    "body": "Anul acesta se organizează prima ediţie a Olimpiadei Pluridisciplinare pentru Centrele de Excelenţă, *PluriCEX*. Fiecare Centru de Excelenţă din ţară va trimite la concurs o echipă formată din $k$ membri (toţi participanţi la Centrul de Excelenţă). Echipa va trebui să rezolve probleme interdisciplinare, disciplinele vizate fiind cele de la Centrul de Excelenţă ($D$ discipline, pe care le vom considera numerotate de la $1$ la $D$).\n\nDirectorul CEX Iaşi a făcut o listă cu primii $n$ cei mai buni elevi de la CEX, apoi a numerotat elevii de la $1$ la $n$, în ordinea apariţiei lor în listă. Pentru fiecare elev, directorul a notat disciplinele la care el participă la CEX.\n\n# Cerinţă\nScrieţi un program care să determine toate echipele ce pot fi formate din $k$ dintre cei $n$ elevi de pe lista directorului, cu condiţia ca pentru fiecare disciplină să existe în echipă cel puţin un membru care să studieze la CEX disciplina respectivă.\n\n# Date de intrare\nFişierul de intrare `pluricex.in` conţine pe prima linie trei numere naturale $n$, $k$ și $D$ (cu semnificaţia din enunţ). Urmează $n$ linii care descriu participările la CEX ale celor $n$ elevi de pe lista directorului. Mai exact, pe linia $i+1$ este descrisă participarea elevului $i$ astfel: $nr$, $d_1$, $d_2$, $\\dots$, $d_{nr}$.\n\nPrimul număr de pe linie ($nr$) indică numărul de discipline la care participă elevul $i$. Următoarele $nr$ numere reprezintă disciplinele la care participă elevul $i$. Numerele scrise pe aceeaşi linie sunt separate prin spaţiu.\n\n# Date de ieşire\nFişierul de ieşire `pluricex.out` va conţine toate echipele ce se pot forma respectând condiţiile din enunţ, câte o echipă pe o linie. Membrii unei echipe vor fi scrişi în ordine crescătoare, separaţi prin câte un spaţiu. Echipele vor fi scrise în ordine lexicografică.\n\n# Restricţii şi precizări\n- $0 < n \\leq 22$\n- $0 < k \\leq 8$\n- $0 < D \\leq 10$\n- Pentru datele de test problema admite întotdeauna soluţie, numărul de soluţii fiind $< 20\\ 000$.\n- Spunem că vectorul $(x_1, x_2, \\dots, x_n)$ precedă lexicografic vectorul $(y_1, y_2, \\dots, y_n)$ dacă există un indice $i$ astfel încât $x_j=y_j$ pentru orice $1 \\leq j < i$, iar $x_i < y_i$.\n- Pentru $20\\%$ din teste soluţia este unică.",
    "header": {
      "problem_id": 771,
      "problem_name": "pluricex",
      "tags": "[Backtracking]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.15,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "pluricex.in",
      "output_filename": "pluricex.out",
      "multiple_solutions": false,
      "original_source": "OJI 2008 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "pluricex.in",
      "output": "pluricex.out"
    },
    "consoleInteraction": false
  }
}