---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cetate.in` and write to `cetate.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \leq i_1 \leq i_2 \leq N$, $1 \leq j_1 \leq j_2 \leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.

# Cerințe
Scrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:
1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.
2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.

# Date de intrare
Fișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.

# Restricții și precizări
- $1 \leq N,M \leq 400$
- $1 \leq K \leq min(N,M)$
- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.
- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \leq N,M \leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \leq N,M \leq 70$.
- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\dots$, $x_{p-1} = y_{p-1}$.

---

Example:
`cetate.in`
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```

`cetate.out`
```
-6
1 1 3 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

std::ifstream fin("cetate.in");
std::ofstream fout("cetate.out");

int main() {
    int c, n, m, k, i, j, l; 
    fin >> c >> n >> m >> k;
    
    std::vector<std::vector<long long>> matrix(n + 1, std::vector<long long>(m + 1));
    std::vector<std::vector<long long>> sum(n + 1, std::vector<long long>(m + 1));
    
    for(i = 1; i <= n; ++i)
        for(j = 1; j <= m; ++j) {
            fin >> matrix[i][j];
            sum[i][j] = matrix[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
        }
    
    long long max_profit = -1e18;
    int i1 = 1, j1 = 1, i2 = k, j2 = k;
    
    for(i = 1; i <= n - k + 1; ++i)
        for(j = 1; j <= m - k + 1; ++j) {
            long long current_profit = sum[i + k - 1][j + k - 1] - sum[i + k - 1][j - 1] - sum[i - 1][j + k - 1] + sum[i - 1][j - 1];
            if (current_profit > max_profit) {
                max_profit = current_profit;
                i1 = i;
                j1 = j;
                i2 = i + k - 1;
                j2 = j + k - 1;
            }
        }
    
    if (c == 2) {
        max_profit = -1e18;
        for(int side = 1; side <= k; ++side) {
            for(i = 1; i <= n - side + 1; ++i)
                for(j = 1; j <= m - side + 1; ++j) {
                    long long current_profit = sum[i + side - 1][j + side - 1] - sum[i + side - 1][j - 1] - sum[i - 1][j + side - 1] + sum[i - 1][j - 1];
                    if (current_profit > max_profit) {
                        max_profit = current_profit;
                        i1 = i;
                        j1 = j;
                        i2 = i + side - 1;
                        j2 = j + side - 1;
                    }
                }
        }
    }
    
    fout << max_profit << '\n';
    fout << i1 << ' ' << j1 << ' ' << i2 << ' ' << j2 << '\n';

    fin.close();
    fout.close();
    return 0;
}
```
This C++ solution reads the input from `cetate.in` and writes the output to `cetate.out`. The code uses prefix sum technique to find the sum of submatrix which reduces the time complexity significantly. It handles both requirements by computing maximum profit for the submatrices based on the value of `c`. For `c = 1`, it finds the maximum profit for a submatrix with sides equal to `k`. For `c = 2`, it iterates through all possible submatrix sizes up to `k` to find the maximum profit. The use of `ifstream` and `ofstream` ensures fast input and output operations, excluding `cin`, `cout`, `printf`, and `scanf` as required.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the code and the test case, it is clear that the current implementation incorrectly assumes that the optimal submatrix with the maximum profit and sides less than or equal to `K` will always start at `(1, 1)` and end at `(K, K)`. This is not always the case, as seen in the provided example where the optimal submatrix starts at `(2, 2)` and ends at `(2, 3)` with a side length of `1`.

The bug in the code is that it incorrectly initializes the `max_profit` to `-1e18` outside the loop for `c == 2` and doesn't reset it when iterating over different side lengths. This can cause the program to miss smaller submatrices with larger profits.

Here is the corrected code that checks all possible starting points and all possible side lengths up to `K` for `c == 2`:

```cpp
#include <fstream>
#include <algorithm>
#include <vector>

std::ifstream fin("cetate.in");
std::ofstream fout("cetate.out");

int main() {
    int c, n, m, k;
    fin >> c >> n >> m >> k;

    std::vector<std::vector<long long>> matrix(n + 1, std::vector<long long>(m + 1));
    std::vector<std::vector<long long>> sum(n + 1, std::vector<long long>(m + 1));

    for (int i = 1; i <= n; ++i)
        for (int j = 1; j <= m; ++j) {
            fin >> matrix[i][j];
            sum[i][j] = matrix[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];
        }

    long long max_profit = -1e18;
    int i1 = 0, j1 = 0, i2 = 0, j2 = 0;

    for (int side = (c == 1 ? k : 1); side <= k; ++side) {
        for (int i = 1; i <= n - side + 1; ++i)
            for (int j = 1; j <= m - side + 1; ++j) {
                long long current_profit = sum[i + side - 1][j + side - 1] - sum[i + side - 1][j - 1] - sum[i - 1][j + side - 1] + sum[i - 1][j - 1];
                if (current_profit > max_profit) {
                    max_profit = current_profit;
                    i1 = i;
                    j1 = j;
                    i2 = i + side - 1;
                    j2 = j + side - 1;
                }
            }
        if (c == 1) break; // For c == 1, we only need to check the submatrices with sides equal to K.
    }

    fout << max_profit << '\n';
    fout << i1 << ' ' << j1 << ' ' << i2 << ' ' << j2 << '\n';

    fin.close();
    fout.close();
    return 0;
}
```

This code successfully finds the optimal submatrix with sides equal to `K` for `c == 1` and with sides less than or equal to `K` for `c == 2`. It iterates over all possible side lengths up to `K` and all possible starting points `(i, j)` within the matrix, updating the maximum profit and the corresponding configuration for the submatrix when a larger profit is found.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found output is due to a logical error in the code. Specifically, the code fails to account for submatrices of varying sizes when `c == 2`. As a result, it only checks for squares of side `K`, not for all possible submatrices with sides up to `K`.

The bug is that the code should be able to check for all submatrices of all sizes from `1` to `K`, not just squares with a fixed size of `K`. Additionally, it should iterate over all possible starting points for the top-left corner of such submatrices. The inner loops should be adjusted to account for varying submatrix sizes rather than a fixed size.

Let's fix the solution by iterating over all possible submatrix sizes and starting points:

```cpp
#include <fstream>
#include <vector>

std::ifstream fin("cetate.in");
std::ofstream fout("cetate.out");

int main() {
    int c, n, m, k;
    fin >> c >> n >> m >> k;

    std::vector<std::vector<long long>> matrix(n + 1, std::vector<long long>(m + 1, 0));
    std::vector<std::vector<long long>> dp(n + 1, std::vector<long long>(m + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            fin >> matrix[i][j];
            dp[i][j] = matrix[i][j] + dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1];
        }
    }

    long long max_profit = -1e18;
    int max_i1 = 0, max_j1 = 0, max_i2 = 0, max_j2 = 0;

    for (int i1 = 1; i1 <= n; ++i1) {
        for (int j1 = 1; j1 <= m; ++j1) {
            for (int i2 = i1; i2 <= n && (c == 1 ? i2 - i1 + 1 == k : i2 - i1 + 1 <= k); ++i2) {
                for (int j2 = j1; j2 <= m && (c == 1 ? j2 - j1 + 1 == k : j2 - j1 + 1 <= k); ++j2) {
                    long long profit = dp[i2][j2] - dp[i2][j1 - 1] - dp[i1 - 1][j2] + dp[i1 - 1][j1 - 1];
                    if (profit > max_profit) {
                        max_profit = profit;
                        max_i1 = i1;
                        max_j1 = j1;
                        max_i2 = i2;
                        max_j2 = j2;
                    }
                }
            }
        }
    }

    fout << max_profit << '\n';
    fout << max_i1 << ' ' << max_j1 << ' ' << max_i2 << ' ' << max_j2 << '\n';

    fin.close();
    fout.close();
    return 0;
}
```

This updated code now iterates over all possible sizes of submatrices (from 1 to `K` for `c == 2`, and exactly `K` for `c == 1`) and updates the maximum profit along with the submatrix coordinates whenever a larger profit is found. It should provide the correct output for the given input.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
3 4 3
-1 -1 -1 -1
-1 2 -1 -1
-1 -1 -1 -1
```
Expected output:
```
-6
1 1 3 3
```
Found output:
```
-1000000000000000000
0 0 0 0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and found output is due to an initialization error in the solution. The variable `max_profit` should not be initialized with `-1e18` because the matrix can have non-negative values. Instead, `max_profit` should be initialized with a value that is smaller than any possible sum that can be obtained from the matrix.

Additionally, the solution has another bug in the main logic. When `c == 1`, it should look for submatrices of size exactly `k x k` instead of all possible submatrix sizes. Only when `c == 2` should it iterate over all sizes up to `k x k`.

Let's fix the solution by initializing `max_profit` correctly and adjusting the logic to search for the correct submatrix sizes for each condition:

```cpp
#include <fstream>
#include <vector>
#include <limits>

std::ifstream fin("cetate.in");
std::ofstream fout("cetate.out");

int main() {
    int c, n, m, k;
    fin >> c >> n >> m >> k;

    std::vector<std::vector<long long>> matrix(n + 1, std::vector<long long>(m + 1, 0));

    // We use the limits header to assign the smallest possible value for max_profit
    long long max_profit = std::numeric_limits<long long>::min();
    int max_i1 = 1, max_j1 = 1, max_i2 = k, max_j2 = k;

    // Read the matrix and calculate the prefix sums
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            fin >> matrix[i][j];
            if (i > 0) matrix[i][j] += matrix[i - 1][j];
            if (j > 0) matrix[i][j] += matrix[i][j - 1];
            if (i > 0 && j > 0) matrix[i][j] -= matrix[i - 1][j - 1];
        }
    }

    // Search for the maximum profit submatrix
    for (int i = k; i <= n; ++i) {
        for (int j = k; j <= m; ++j) {
            long long sum = matrix[i][j] - matrix[i - k][j] - matrix[i][j - k] + matrix[i - k][j - k];
            if (sum > max_profit) {
                max_profit = sum;
                max_i1 = i - k + 1;
                max_j1 = j - k + 1;
                max_i2 = i;
                max_j2 = j;
            }
        }
    }

    // If c is 2, modify the logic to consider all submatrix sizes up to k
    if (c == 2) {
        max_profit = std::numeric_limits<long long>::min();
        for (int size = 1; size <= k; ++size) {
            for (int i = size; i <= n; ++i) {
                for (int j = size; j <= m; ++j) {
                    long long sum = matrix[i][j] - matrix[i - size][j] - matrix[i][j - size] + matrix[i - size][j - size];
                    if (sum > max_profit) {
                        max_profit = sum;
                        max_i1 = i - size + 1;
                        max_j1 = j - size + 1;
                        max_i2 = i;
                        max_j2 = j;
                    }
                }
            }
        }
    }

    fout << max_profit << '\n';
    fout << max_i1 << ' ' << max_j1 << ' ' << max_i2 << ' ' << max_j2 << '\n';

    fin.close();
    fout.close();
    return 0;
}
```

This code initializes `max_profit` with the smallest possible value for the `long long` type and correctly handles the search for `k x k` submatrices when `c == 1` and for all submatrices up to size `k` when `c == 2`. It should now provide the expected output.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
3 4 3
-1 -1 -1 -1
-1 2 1 -1
-1 -1 -1 -1
```
Expected output:
```
3
2 2 2 3
```
Found output:
```
2
2 2 2 2
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and the found output indicates that the program is not correctly finding the submatrix with the maximum profit for `c == 2`. Specifically, it is not correctly accounting for all possible submatrices of varying sizes up to `K` and is instead still only looking at `k x k` submatrices.

To fix this, the code must correctly iterate over all possible submatrix sizes up to `K` and all possible locations where such submatrices can start within the matrix. The updated logic should consider submatrices of size `1x1` up to `KxK` for the case when `c == 2`.

Let's implement the necessary fixes:

```cpp
#include <fstream>
#include <vector>
#include <limits>

std::ifstream fin("cetate.in");
std::ofstream fout("cetate.out");

int main() {
    int c, n, m, k;
    fin >> c >> n >> m >> k;

    std::vector<std::vector<long long>> matrix(n + 1, std::vector<long long>(m + 1));
    std::vector<std::vector<long long>> prefix_sum(n + 1, std::vector<long long>(m + 1));

    // Reading the matrix
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            fin >> matrix[i][j];
            prefix_sum[i][j] = matrix[i][j] 
                             + prefix_sum[i - 1][j]
                             + prefix_sum[i][j - 1]
                             - prefix_sum[i - 1][j - 1];
        }
    }

    long long max_profit = std::numeric_limits<long long>::lowest();
    int max_i1 = 1, max_j1 = 1, max_i2 = 1, max_j2 = 1;

    if (c == 1) {
        // For c == 1, we find the maximum profit submatrix with sides exactly equal to k
        for (int i = k; i <= n; ++i) {
            for (int j = k; j <= m; ++j) {
                long long profit = prefix_sum[i][j]
                                 - prefix_sum[i - k][j]
                                 - prefix_sum[i][j - k]
                                 + prefix_sum[i - k][j - k];
                if (profit > max_profit) {
                    max_profit = profit;
                    max_i1 = i - k + 1;
                    max_j1 = j - k + 1;
                    max_i2 = i;
                    max_j2 = j;
                }
            }
        }
    } else {
        // For c == 2, we find the maximum profit submatrix with sides at most k
        for (int height = 1; height <= k; ++height) {
            for (int width = 1; width <= k; ++width) {
                for (int i = height; i <= n; ++i) {
                    for (int j = width; j <= m; ++j) {
                        long long profit = prefix_sum[i][j]
                                         - prefix_sum[i - height][j]
                                         - prefix_sum[i][j - width]
                                         + prefix_sum[i - height][j - width];
                        if (profit > max_profit) {
                            max_profit = profit;
                            max_i1 = i - height + 1;
                            max_j1 = j - width + 1;
                            max_i2 = i;
                            max_j2 = j;
                        }
                    }
                }
            }
        }
    }

    fout << max_profit << '\n';
    fout << max_i1 << ' ' << max_j1 << ' ' << max_i2 << ' ' << max_j2 << '\n';

    fin.close();
    fout.close();
    return 0;
}
```

In this implementation, the program correctly iterates over all possible submatrix sizes for `c == 2`. It checks each possible submatrix and updates the `max_profit` along with the corresponding configuration if a larger profit is found. For `c == 1`, it continues to check only `k x k` submatrices. This solution should now yield the expected output for both cases `c == 1` and `c == 2`.
