{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/917/2024-05-06T19:15:40.935Z-09896.log",
  "attemptStart": 1715022940.935,
  "attemptEnd": 1715022984.776,
  "attemptDuration": 43.84100008010864,
  "code": "#include <fstream>\n#include <algorithm>\n\nconst int MAXN = 400;\nint mat[MAXN + 1][MAXN + 1];\nint sum[MAXN + 1][MAXN + 1];\n\n// Function to precompute the sum of submatrices with top-left corner at (1, 1).\nvoid precomputeSum(int n, int m) {\n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            sum[i][j] = mat[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1];\n}\n\n// Function to get the sum of a submatrix using the precomputed sum matrix.\nint getSum(int x1, int y1, int x2, int y2) {\n    return sum[x2][y2] - sum[x1 - 1][y2] - sum[x2][y1 - 1] + sum[x1 - 1][y1 - 1];\n}\n\nint main() {\n    std::ifstream in(\"cetate.in\");\n    std::ofstream out(\"cetate.out\");\n    \n    int c, n, m, k;\n    in >> c >> n >> m >> k;\n    \n    for (int i = 1; i <= n; i++)\n        for (int j = 1; j <= m; j++)\n            in >> mat[i][j];\n    \n    precomputeSum(n, m);\n    int maxProfit = INT32_MIN;\n    int i1, j1, i2, j2;\n\n    if (c == 1) {\n        // Case 1: Find the submatrix with sides exactly equal to K\n        for (int i = 1; i <= n - k + 1; i++)\n            for (int j = 1; j <= m - k + 1; j++) {\n                int currSum = getSum(i, j, i + k - 1, j + k - 1);\n                if (currSum > maxProfit) {\n                    maxProfit = currSum;\n                    i1 = i; j1 = j; i2 = i + k - 1; j2 = j + k - 1;\n                }\n            }\n    } else { // c == 2\n        // Case 2: Find the submatrix with sides at most K\n        for (int i = 1; i <= n; i++)\n            for (int j = 1; j <= m; j++)\n                for (int p = i; p <= std::min(i + k - 1, n); p++)\n                    for (int q = j; q <= std::min(j + k - 1, m); q++) {\n                        int currSum = getSum(i, j, p, q);\n                        if (currSum > maxProfit) {\n                            maxProfit = currSum;\n                            i1 = i; j1 = j; i2 = p; j2 = q;\n                        }\n                    }\n    }\n    \n    out << maxProfit << '\\n' << i1 << ' ' << j1 << ' ' << i2 << ' ' << j2 << '\\n';\n    \n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2094,
  "metadata": {
    "id": 917,
    "examples": [
      {
        "in": "1\n3 4 3\n-1 -1 -1 -1\n-1 2 -1 -1\n-1 -1 -1 -1",
        "out": "-6\n1 1 3 3",
        "explainer": ""
      },
      {
        "in": "2\n3 4 3\n-1 -1 -1 -1\n-1 2 1 -1\n-1 -1 -1 -1",
        "out": "3\n2 2 2 3",
        "explainer": ""
      }
    ],
    "body": "Cetatea Vizima din regatul Temeria poate fi reprezentată printr-o matrice cu $N$ linii și $M$ coloane, numerotate începând cu $1$. Vizima este o cetate înfloritoare, fapt datorat numărului mare de negustori și meșteri prezenți. Din acest motiv, fiecărei celule îi este atribuit un profit corespunzător zonei respective. Regele Foltest dorește să reconstruiască zidurile cetății, dar cum războiul cu Imperiul Nilfgaard bate la ușă și resursele regatului sunt limitate, el trebuie să aleagă o porțiune pe care să o poată apăra, reprezentată ca o submatrice. O submatrice este identificată printr-o **configurație** de patru numere $(i_1, j_1, i_2, j_2)$ ($1 \\leq i_1 \\leq i_2 \\leq N$, $1 \\leq j_1 \\leq j_2 \\leq M$), în această ordine, și este formată din elementele situate pe liniile consecutive $i_1, i_1+1, \\ldots, i_2$ și pe coloanele consecutive $j_1, j_1+1, \\ldots, j_2$ ale matricei prin care este reprezentată cetatea. **Laturile** submatricei sunt egale cu numărul de linii, respectiv de coloane din care a preluat elemente, iar **profitul** submatricei este suma valorilor din celulele sale.\n\n# Cerințe\nScrieți un program care, cunoscând matricea cetății și o valoare $K$, determină:\n1) profitul maxim al unei submatrice cu laturile egale cu $K$, precum și configurația prin care se identifică ea.\n2) profitul maxim al unei submatrice cu laturile cel mult egale cu $K$, precum și configurația prin care se identifică ea.\n\n# Date de intrare\nFișierul de intrare `cetate.in` conține pe primul rând o valoare $c$ egală cu $1$ sau $2$, reprezentând cerința ce urmează a fi rezolvată. Următoarea linie conține în ordine $N$, $M$ și $K$, cu semnificația din enunț, iar pe următoarele $N$ linii se află câte $M$ numere, reprezentând valorile din matricea dată. Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.\n\n# Date de ieșire\nFișierul de ieșire `cetate.out` va conține pe prima linie profitul maxim cerut, conform cerinței, iar pe a doua linie va conține 4 numere naturale, reprezentând configurația prin care se identifică submatricea obținută. Dacă există mai multe submatrice conform cerinței, se va lua în considerare cea pentru care configurația formată din cele 4 numere de mai sus este minim lexicografică.\n\n# Restricții și precizări\n- $1 \\leq N,M \\leq 400$\n- $1 \\leq K \\leq min(N,M)$\n- Valorile date pentru matricea cetății se află în intervalul $[-10^9, 10^9]$.\n- Pentru teste în valoare de 20 de puncte, $c=1$, iar pentru restul testelor, în valoare de 70 de puncte, $c=2$. Pentru teste în valoare de 8 puncte, $c=1$ și $1 \\leq N,M \\leq 70$. Pentru teste în valoare de 25 de puncte, $c=2$ și $1 \\leq N,M \\leq 70$.\n- Configurația $(x_1, x_2, x_3, x_4)$ este mai mică din punct de vedere lexicografic decât configurația $(y_1, y_2, y_3, y_4)$ dacă există $p$ astfel încât $x_p < y_p$ și $x_1 = y_1$, $x_2 = y_2$, $\\dots$, $x_{p-1} = y_{p-1}$.",
    "header": {
      "problem_id": 917,
      "problem_name": "cetate",
      "tags": "[Prefix Sums]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 1.3,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "cetate.in",
      "output_filename": "cetate.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "cetate.in",
      "output": "cetate.out"
    },
    "consoleInteraction": false
  }
}