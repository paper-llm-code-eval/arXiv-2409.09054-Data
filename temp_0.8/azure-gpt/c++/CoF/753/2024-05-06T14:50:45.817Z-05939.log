---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `harry.in` and write to `harry.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Tânărul Harry Potter a descoperit într-una din camerele castelului Hogwarts, o hartă, care în urma unei vrăji a făcut să apară un text secret. Textul scris doar cu litere mici ale alfabetului englez, constituie o cheie spre o vrajă nouă folositoare la meciurile de vâjhaț. Cheia nouă se obține astfel:

* din textul secret se formează toate cuvintele posibile din litere aflate pe poziții consecutive
* dintre cuvintele formate se alege cel care este cel mai mare din punct de vedere lexicografic.

Se consideră că două cuvinte $a_1 a_2 a_3 \dots a_k$ < $b_1 b_2 b_3 \dots b_l$, cuvintele fiind date prin caracterele ce le compun, sunt în ordine lexicografică dacă există un indice $i \leq k$ sau $i \leq l$ astfel încât $a_i < b_i$ iar $a_j = b_j$ oricare ar fi $j < i$.

Exemplu: dacă textul găsit de Harry este `abcd` atunci din el se vor obține cuvintele: `a`, `b`, `c`, `d`, `ab`, `bc`, `cd`, `abc`, `bcd`, `abcd`, iar soluția este `d` fiind cel mai mare din punct de vedere lexicografic.

# Cerință

Scrieți un program care, citind textul inițial, determină cuvântul cel mai mare din punct de vedere lexicografic dintre toate cuvintele formate în modul explicat mai sus.

# Date de intrare

Fișierul de intrare `harry.in` conține o singură linie pe care este scris textul inițial.

# Date de ieșire

Fișierul de ieșire `harry.out` va conține pe prima linie cuvântul ce constituie soluție.

# Restricții și precizări

* $1 \leq$ lungime text $\leq 255$;

---

Example:
`harry.in`
```
tatep
```

`harry.out`
```
tep
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Below is a C++ solution for the given challenge. This program reads the input from `harry.in` and writes the output to `harry.out`, using `<fstream>` for file operations, as requested.

```cpp
#include <fstream>
#include <string>
#include <algorithm>

int main() {
    std::ifstream fin("harry.in");
    std::ofstream fout("harry.out");
    std::string text, largest;

    // Read the entire line from the input file
    std::getline(fin, text);

    // Iterate through each character in the string
    for (size_t i = 0; i < text.length(); ++i) {
        // Find the lexicographically largest substring starting from each character
        std::string current;
        for (size_t j = i; j < text.length(); ++j) {
            current += text[j];
            if (current > largest) {
                largest = current;
            }
        }
    }

    // Write the lexicographically largest substring to the output file
    fout << largest << '\n';

    // Close the file streams
    fin.close();
    fout.close();

    return 0;
}
```

Explanation:
- We include `<fstream>` for file I/O and `<string>` to work with strings.
- We declare two `fstream` objects, `fin` for reading from `harry.in` and `fout` for writing to `harry.out`.
- We declare two strings, `text` to store the input text and `largest` to keep track of the lexicographically largest word.
- We read the entire line from `harry.in` into `text`.
- We use two nested loops to generate all possible consecutive substrings starting from each character.
- We check if the current substring is lexicographically larger than our stored `largest` substring. If it is, we update `largest`.
- After the loops complete, we write the `largest` string to `harry.out`.
- We close both file streams before returning from `main`.

This program should satisfy the requirements for speed as it avoids unnecessary comparisons by only looking for substrings that start with each character and directly comparing them to the currently known largest substring. It also avoids using slower I/O methods like `cin` and `cout`.
