---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `palindrom.in` and write to `palindrom.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.

Similar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.

Mai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.

# Cerință

Scrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:

1. câte dintre cele $n$ numere sunt palindrom;
2. câte dintre cele $n$ numere sunt aproape palindrom;
3. palindromurile asociate pentru cele $n$ numere citite.

# Date de intrare

Fișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `palindrom.out`:

* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;
* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;
* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.

---

Example:
`palindrom.in`
```
1
7
1221 500 53635 505 7 4004 1410
```

`palindrom.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

// Check if a number is a palindrome
bool is_palindrome(int x) {
    std::string s = std::to_string(x);
    std::string rev_s = s;
    std::reverse(rev_s.begin(), rev_s.end());
    return s == rev_s;
}

// Check if a number is an almost palindrome
bool is_almost_palindrome(int x) {
    std::string s = std::to_string(x);
    int diff_count = 0;
    for (size_t i = 0; i < s.length() / 2; ++i) {
        if (s[i] != s[s.length() - 1 - i]) {
            ++diff_count;
            if (diff_count > 1) {
                return false;
            }
        }
    }
    return diff_count == 1;
}

// Find the next palindrome greater than x
int next_palindrome(int x) {
    std::string s = std::to_string(x);
    int n = s.size();
    std::string half = s.substr(0, (n + 1) / 2);
    std::string rev_half = half;
    std::reverse(rev_half.begin(), rev_half.end());
    std::string next = half + (n % 2 == 0 ? rev_half : rev_half.substr(1));
    int next_num = std::stoi(next);
    if (next_num > x) {
        return next_num;
    }
    for (int i = (n - 1) / 2; i >= 0; --i) {
        if (half[i] != '9') {
            ++half[i];
            break;
        } else {
            half[i] = '0';
        }
    }
    if (half[0] == '0') {
        half = '1' + half;
        return std::stoi(half + half.substr(1));
    }
    rev_half = half;
    std::reverse(rev_half.begin(), rev_half.end());
    next = half + (n % 2 == 0 ? rev_half : rev_half.substr(1));
    return std::stoi(next);
}

int main() {
    std::ifstream fin("palindrom.in");
    std::ofstream fout("palindrom.out");

    int C, n;
    fin >> C >> n;
    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
    }

    int palindrome_count = 0;
    int almost_palindrome_count = 0;
    std::vector<int> associated_palindromes;

    switch (C) {
        case 1:
            for (int x : numbers) {
                palindrome_count += is_palindrome(x) ? 1 : 0;
            }
            fout << palindrome_count;
            break;
        case 2:
            for (int x : numbers) {
                almost_palindrome_count += is_almost_palindrome(x) ? 1 : 0;
            }
            fout << almost_palindrome_count;
            break;
        case 3:
            for (int x : numbers) {
                associated_palindromes.push_back(next_palindrome(x));
            }
            for (int p : associated_palindromes) {
                fout << p << " ";
            }
            break;
    }

    fin.close();
    fout.close();
    return 0;
}
```

This solution reads from `palindrom.in` and writes to `palindrom.out`, without using `cin`, `cout`, `printf`, or `scanf`. It checks for palindromes and almost palindromes, and generates the associated palindromes according to the task description. The solution should execute efficiently for input sizes within the problem constraints.
