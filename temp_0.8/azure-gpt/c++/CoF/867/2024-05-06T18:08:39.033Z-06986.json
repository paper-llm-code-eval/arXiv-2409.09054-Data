{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/867/2024-05-06T18:08:39.033Z-06986.log",
  "attemptStart": 1715018919.033,
  "attemptEnd": 1715018953.215,
  "attemptDuration": 34.181999921798706,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nstd::ifstream fin(\"palindrom.in\");\nstd::ofstream fout(\"palindrom.out\");\n\nbool is_palindrome(int x) {\n    std::vector<int> digits;\n    while (x > 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n    }\n    for (size_t i = 0, j = digits.size() - 1; i < j; ++i, --j) {\n        if (digits[i] != digits[j]) return false;\n    }\n    return true;\n}\n\nbool is_almost_palindrome(int x) {\n    std::vector<int> digits;\n    while (x > 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n    }\n    int count_diff = 0;\n    for (size_t i = 0, j = digits.size() - 1; i < j; ++i, --j) {\n        if (digits[i] != digits[j]) {\n            count_diff++;\n            if (count_diff > 1) return false;\n        }\n    }\n    return count_diff == 1;\n}\n\nint next_palindrome(int x) {\n    std::vector<int> digits;\n    while (x > 0) {\n        digits.push_back(x % 10);\n        x /= 10;\n    }\n    std::reverse(digits.begin(), digits.end());\n    \n    int n = digits.size();\n    int mid = n / 2;\n    bool left_smaller = false;\n\n    int i = mid - 1;\n    int j = (n % 2) ? mid + 1 : mid;\n\n    while (i >= 0 && digits[i] == digits[j]) {\n        i--;\n        j++;\n    }\n\n    if (i < 0 || digits[i] < digits[j])\n        left_smaller = true;\n\n    while (i >= 0) {\n        digits[j++] = digits[i--];\n    }\n\n    if (left_smaller) {\n        int carry = 1;\n        i = mid - 1;\n\n        if (n % 2 == 1) {\n            digits[mid] += carry;\n            carry = digits[mid] / 10;\n            digits[mid] %= 10;\n            j = mid + 1;\n        } else {\n            j = mid;\n        }\n\n        while (i >= 0) {\n            digits[i] += carry;\n            carry = digits[i] / 10;\n            digits[i] %= 10;\n            digits[j++] = digits[i--];\n        }\n    }\n\n    int result = 0;\n    for (int digit : digits) {\n        result = result * 10 + digit;\n    }\n    return result;\n}\n\nint main() {\n    int C, n;\n    fin >> C >> n;\n    int count_palindrome = 0;\n    int count_almost_palindrome = 0;\n    std::vector<int> associated_palindromes;\n\n    for (int i = 0; i < n; ++i) {\n        int x;\n        fin >> x;\n        if (C == 1 && is_palindrome(x)) count_palindrome++;\n        if (C == 2 && is_almost_palindrome(x)) count_almost_palindrome++;\n        if (C == 3) associated_palindromes.push_back(next_palindrome(x));\n    }\n\n    if (C == 1) {\n        fout << count_palindrome;\n    } else if (C == 2) {\n        fout << count_almost_palindrome;\n    } else if (C == 3) {\n        for (int p : associated_palindromes) fout << p << \" \";\n    }\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1885,
  "metadata": {
    "id": 867,
    "examples": [
      {
        "in": "1\n7\n1221 500 53635 505 7 4004 1410",
        "out": "5",
        "explainer": ""
      },
      {
        "in": "2\n4\n5442 2445 545 39995",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "3\n11\n6 1411 2444 1221 505 1220 53625 14 4014 1410 22",
        "out": "7 1441 2552 1331 515 1221 53635 22 4114 1441 33",
        "explainer": ""
      }
    ],
    "body": "Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.\n\nSimilar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.\n\nMai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.\n\n# Cerință\n\nScrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:\n\n1. câte dintre cele $n$ numere sunt palindrom;\n2. câte dintre cele $n$ numere sunt aproape palindrom;\n3. palindromurile asociate pentru cele $n$ numere citite.\n\n# Date de intrare\n\nFișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.\n\n# Date de ieșire\n\nFișierul de ieșire `palindrom.out`:\n\n* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;\n* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;\n* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.\n\n# Restricții și precizări\n\n* $1 \\leq n \\leq 10 \\ 000$;\n* $1 \\leq$ numerele din șir $\\leq 2 \\cdot 10^9$;\n* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.\n* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.\n* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.",
    "header": {
      "problem_id": 867,
      "problem_name": "palindrom",
      "tags": "[Implementation]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.1,
      "memory_limit_mb": 32,
      "console_input": false,
      "input_filename": "palindrom.in",
      "output_filename": "palindrom.out",
      "multiple_solutions": false,
      "original_source": "OJI 2016 V: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "32m",
    "filename": {
      "input": "palindrom.in",
      "output": "palindrom.out"
    },
    "consoleInteraction": false
  }
}