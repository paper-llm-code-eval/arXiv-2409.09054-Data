---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `palindrom.in` and write to `palindrom.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr se numește **palindrom** dacă prima lui cifră este egală cu ultima, a doua cu penultima și așa mai departe. De exemplu numerele $1221$, $505$ și $7$ sunt palindromuri, în vreme ce $500$, $1410$ și $2424$ nu sunt palindromuri.

Similar, un număr se numește **aproape palindrom** dacă are aceleași perechi de cifre identice ca un palindrom, mai puțin o pereche în care cifrele diferă. De exemplu numerele $500$, $1411$, $2444$, $1220$, $53625$, $14$ și $4014$ sunt numere aproape palindromuri (cu perechea de cifre neidentice îngroșată), în vreme ce $1221$, $1410$, $6$, $505$, $22$ și $512125$ nu sunt numere aproape palindromuri deoarece fie sunt palindromuri, fie au prea multe perechi de cifre diferite.

Mai definim **palindromul asociat** al unui număr $x$ ca fiind cel mai mic număr palindrom p strict mai mare decât $x$ ($p > x$). De exemplu palindromul asociat al lui $5442$ este 5445, palindromul asociat al lui $2445$ este $2552$, al lui $545$ este $555$, al lui $39995$ este $40004$, al lui $500$ este $505$, iar al lui $512125$ este $512215$.

# Cerință

Scrieți un program care citind un număr natural nenul $n$ și apoi un șir de $n$ numere naturale determină:

1. câte dintre cele $n$ numere sunt palindrom;
2. câte dintre cele $n$ numere sunt aproape palindrom;
3. palindromurile asociate pentru cele $n$ numere citite.

# Date de intrare

Fișierul de intrare `palindrom.in` conține pe prima linie un număr $C$. Pentru toate testele, $C$ poate lua numai valorile $1$, $2$ sau $3$. Pe a doua linie se află numărul $n$, iar pe a treia linie cele $n$ numere naturale despărțite prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `palindrom.out`:

* dacă $C = 1$, va conține un singur număr natural reprezentând numărul de numere palindrom din șir;
* dacă $C = 2$, va conține numărul de numere din șir care sunt aproape palindrom;
* dacă $C = 3$, va conține numerele palindrom asociate celor $n$ numere din șir, separate prin câte un spațiu.

# Restricții și precizări

* $1 \leq n \leq 10 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte.
* Pentru rezolvarea corectă a celei de a doua cerințe se acordă $30$ de puncte.
* Pentru rezolvarea corectă a celei de a treia cerințe se acordă $50$ de puncte.

---

Example:
`palindrom.in`
```
1
7
1221 500 53635 505 7 4004 1410
```

`palindrom.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::ifstream fin("palindrom.in");
std::ofstream fout("palindrom.out");

bool is_palindrome(int x) {
    std::vector<int> digits;
    while (x > 0) {
        digits.push_back(x % 10);
        x /= 10;
    }
    for (size_t i = 0, j = digits.size() - 1; i < j; ++i, --j) {
        if (digits[i] != digits[j]) return false;
    }
    return true;
}

bool is_almost_palindrome(int x) {
    std::vector<int> digits;
    while (x > 0) {
        digits.push_back(x % 10);
        x /= 10;
    }
    int count_diff = 0;
    for (size_t i = 0, j = digits.size() - 1; i < j; ++i, --j) {
        if (digits[i] != digits[j]) {
            count_diff++;
            if (count_diff > 1) return false;
        }
    }
    return count_diff == 1;
}

int next_palindrome(int x) {
    std::vector<int> digits;
    while (x > 0) {
        digits.push_back(x % 10);
        x /= 10;
    }
    std::reverse(digits.begin(), digits.end());
    
    int n = digits.size();
    int mid = n / 2;
    bool left_smaller = false;

    int i = mid - 1;
    int j = (n % 2) ? mid + 1 : mid;

    while (i >= 0 && digits[i] == digits[j]) {
        i--;
        j++;
    }

    if (i < 0 || digits[i] < digits[j])
        left_smaller = true;

    while (i >= 0) {
        digits[j++] = digits[i--];
    }

    if (left_smaller) {
        int carry = 1;
        i = mid - 1;

        if (n % 2 == 1) {
            digits[mid] += carry;
            carry = digits[mid] / 10;
            digits[mid] %= 10;
            j = mid + 1;
        } else {
            j = mid;
        }

        while (i >= 0) {
            digits[i] += carry;
            carry = digits[i] / 10;
            digits[i] %= 10;
            digits[j++] = digits[i--];
        }
    }

    int result = 0;
    for (int digit : digits) {
        result = result * 10 + digit;
    }
    return result;
}

int main() {
    int C, n;
    fin >> C >> n;
    int count_palindrome = 0;
    int count_almost_palindrome = 0;
    std::vector<int> associated_palindromes;

    for (int i = 0; i < n; ++i) {
        int x;
        fin >> x;
        if (C == 1 && is_palindrome(x)) count_palindrome++;
        if (C == 2 && is_almost_palindrome(x)) count_almost_palindrome++;
        if (C == 3) associated_palindromes.push_back(next_palindrome(x));
    }

    if (C == 1) {
        fout << count_palindrome;
    } else if (C == 2) {
        fout << count_almost_palindrome;
    } else if (C == 3) {
        for (int p : associated_palindromes) fout << p << " ";
    }
    return 0;
}
```
The code reads the value of C, n, and then processes each number according to the required operation, avoiding unnecessary computations. It uses `std::ifstream` and `std::ofstream` for file operations, adhering to the challenge's input/output restrictions.
