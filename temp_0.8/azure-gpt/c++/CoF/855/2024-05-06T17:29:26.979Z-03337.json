{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/855/2024-05-06T17:29:26.979Z-03337.log",
  "attemptStart": 1715016566.979,
  "attemptEnd": 1715016721.439,
  "attemptDuration": 154.4599997997284,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm> // Required for std::reverse\n\nbool isAscendingSpecial(unsigned int num) {\n    if (num == 0) return false;\n    int consecutive = 1;\n    int lastDigit = num % 10;\n    num /= 10;\n    while (num > 0) {\n        int currentDigit = num % 10;\n        if (lastDigit - currentDigit != 1) return false;\n        lastDigit = currentDigit;\n        num /= 10;\n        consecutive++;\n    }\n    return lastDigit == 1 && consecutive >= 2;\n}\n\nbool isDescendingSpecial(unsigned int num) {\n    int lastDigit = num % 10;\n    num /= 10;\n    while (num > 0) {\n        int currentDigit = num % 10;\n        if (currentDigit - lastDigit != 1) return false;\n        lastDigit = currentDigit;\n        num /= 10;\n    }\n    return lastDigit == 9;\n}\n\nint specialCountBetween(unsigned int A, unsigned int B) {\n    int count = 0;\n    // Count ascending specials.\n    unsigned int n = 1;\n    for (int len = 2; len <= 9; ++len) {\n        n = n * 10 + len;\n        if (n >= A && n <= B) {\n            count++;\n        }\n    }\n    // Count descending specials.\n    unsigned int startNum = 9;\n    unsigned int factor = 10;\n    for (int len = 2; len <= 9; ++len) {\n        for (int i = 0; i < len; ++i) {\n            unsigned int specialNum = startNum + i * factor;\n            if (specialNum >= A && specialNum <= B) {\n                count++;\n            }\n        }\n        factor *= 10;\n        startNum = startNum * factor + (startNum / (factor / 10) + 1);\n    }\n    return count;\n}\n\nint main() {\n    std::ifstream in(\"speciale.in\");\n    std::ofstream out(\"speciale.out\");\n    int P, K;\n    unsigned int N, A, B;\n\n    in >> P >> K >> N >> A >> B;\n    in.close();\n\n    if (P == 1) {\n        unsigned int special = 0;\n        for (int i = 1; i <= K; ++i) {\n            special = special * 10 + i;\n        }\n        special = special * 8 + K;\n        out << special << '\\n';\n    } else if (P == 2) {\n        std::vector<int> digits;\n        while (N > 0) {\n            digits.push_back(N % 10);\n            N /= 10;\n        }\n        std::reverse(digits.begin(), digits.end());\n        bool found = false;\n        for (size_t i = 1; i < digits.size() && !found; ++i) {\n            if (digits[i] - digits[i - 1] != 1) {\n                found = true;\n                digits.erase(digits.begin() + i);\n            }\n        }\n        if (!found && digits.size() > 1) digits.pop_back();\n\n        unsigned int removed_digit_number = 0;\n        for (int digit : digits) {\n            removed_digit_number = removed_digit_number * 10 + digit;\n        }\n        out << (isAscendingSpecial(removed_digit_number) || isDescendingSpecial(removed_digit_number) ? removed_digit_number : 0) << '\\n';\n    } else if (P == 3) {\n        int count = specialCountBetween(A, B);\n        out << count << '\\n';\n    }\n    out.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4802,
  "metadata": {
    "id": 855,
    "examples": [
      {
        "in": "1\n3 125345 320 888888",
        "out": "987",
        "explainer": ""
      },
      {
        "in": "2\n3 125345 320 888888",
        "out": "12345",
        "explainer": ""
      },
      {
        "in": "3\n3 125345 320 888888",
        "out": "6",
        "explainer": ""
      }
    ],
    "body": "Maria a aflat că numerele naturale care încep cu cifra $1$ și au toate cifrele ordonate strict crescător și consecutive sau încep cu cifra $9$ și au toate cifrele ordonate strict descrescător și consecutive se numesc numere **speciale**. Interesată să descopere legătura dintre numerele speciale cu același număr de cifre, a observat că poate construi tabelul alăturat.\n| | |\n|-|-|\n| 1 | 1 x 8 + 1 = 9 |\n| 2 | 12 x 8 + 2 = 98 |\n| 3 | 123 x 8 + 3 = 987 |\n| 4 | 1234 x 8 + 4 = 9876 |\n| 5 | 12345 x 8 + 5 = 98765 |\n| 6 | 123456 x 8 + 6 = 987654 |\n| 7 | 1234567 x 8 + 7 = 9876543 |\n| 8 | 12345678 x 8 + 8 = 98765432 |\n| 9 | 123456789 x 8 + 9 = 987654321 |\n\n# Cerință\n\nScrieți un program care citind patru numere naturale $K$, $N$, $A$ și $B$ determină:\n\n* cel mai mare număr **special** situat în tabel pe linia $K$;\n* numărul **special** obținut din numărul $N$ prin ștergerea unei cifre;\n* numărul de numere **speciale** din mulțimea {$A , A+1, A+2, A+3 …, B-1, B$}.\n\n\n# Date de intrare\n\nFișierul de intrare `speciale.in` conține pe prima linie un număr natural $P$. Pentru toate testele de intrare, numărul $P$ poate avea doar valoarea $1$, valoarea $2$ sau valoarea $3$. Pe a doua linie a fișierului `speciale.in` se găsesc, în această ordine, numerele naturale $K$, $N$, $A$ și $B$, separate prin câte un spațiu.\n\n# Date de ieșire\n\nDacă valoarea lui $P$ este $1$, se va rezolva numai punctul 1) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând cel mai mare număr special situat în tabel pe linia $K$.\n \nDacă valoarea lui $P$ este $2$, se va rezolva numai punctul 2) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând numărul special obținut din numărul $N$ prin ștergerea unei cifre sau $0$ dacă un astfel de număr nu se poate obține;\n \nDacă valoarea lui $P$ este $3$, se va rezolva numai punctul 3) din cerințe. În acest caz, fișierul de ieșire `speciale.out` va conține pe prima linie un număr natural reprezentând numărul de numere speciale din mulțimea {$A, A +1, A+2, A+3 …, B-1, B$}.\n\n# Restricții și precizări\n\n* $1 \\leq a, b \\leq 1 \\ 000 \\ 000$;\n* $1 \\leq K \\leq 9$;\n* $1 \\leq N \\leq 999 \\ 999 \\ 999$;\n* $1 \\leq A \\leq B \\leq 999 \\ 999 \\ 999$;\n* Pentru rezolvarea corectă a primei cerințe se acordă $20$ de puncte, pentru rezolvarea corectă a celei de a doua cerințe se acordă $40$ de puncte, pentru rezolvarea corectă a celei de a treia cerințe se acordă $40$ de puncte.",
    "header": {
      "problem_id": 855,
      "problem_name": "speciale",
      "tags": "[Implementation, Maths]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "speciale.in",
      "output_filename": "speciale.out",
      "multiple_solutions": false,
      "original_source": "OJI 2015 V: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "speciale.in",
      "output": "speciale.out"
    },
    "consoleInteraction": false
  }
}