{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/813/2024-05-06T16:06:43.696Z-01082.log",
  "attemptStart": 1715011603.696,
  "attemptEnd": 1715011685.259,
  "attemptDuration": 81.56299996376038,
  "code": "#include <fstream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nifstream in(\"adunscad.in\");\nofstream out(\"adunscad.out\");\n\nint N, M;\n\nbool dfs(int idx, int current, const vector<int>& digits, string& expression, bool isFirstDigit) {\n    if (idx == M) {\n        if (current == N) {\n            return true;\n        }\n        return false;\n    }\n\n    // Adding the current digit\n    string addOp = isFirstDigit && digits[idx] > 0 ? \"\" : \"+\"; // No '+' for first positive digit\n    expression += addOp + to_string(digits[idx]);\n    if (dfs(idx + 1, current + digits[idx], digits, expression, false)) return true;\n    expression.erase(expression.end() - addOp.size() - to_string(digits[idx]).size(), expression.end());\n\n    // Subtracting the current digit\n    string subOp = isFirstDigit ? \"-\" : \"-\"; // '-' is required for first digit if negative\n    expression += subOp + to_string(digits[idx]);\n    if (dfs(idx + 1, current - digits[idx], digits, expression, false)) return true;\n    expression.erase(expression.end() - subOp.size() - to_string(digits[idx]).size(), expression.end());\n\n    return false;\n}\n\nint main() {\n    in >> N >> M;\n    vector<int> digits(M);\n    for (int i = 0; i < M; ++i) {\n        in >> digits[i];\n    }\n    in.close();\n\n    string expression;\n    if (dfs(0, 0, digits, expression, true)) {\n        out << expression << '\\n';\n    } else {\n        out << \"0\\n\";\n    }\n\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2687,
  "metadata": {
    "id": 813,
    "examples": [
      {
        "in": "21 4\n3 9 1 8",
        "out": "3+9+1+8",
        "explainer": ""
      },
      {
        "in": "-1 4\n1 2 3 5",
        "out": "-1+2+3-5",
        "explainer": ""
      },
      {
        "in": "-7 7\n1 1 1 1 1 1 1",
        "out": "-1-1-1-1-1-1-1",
        "explainer": ""
      },
      {
        "in": "12 3\n1 2 3",
        "out": "0",
        "explainer": ""
      }
    ],
    "body": "Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).\n\n# Cerință\n\nScrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.\n\n# Date de intrare\n\nFișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \\ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.\n\n# Date de ieșire\n\nÎn fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.\n\n# Restricții și precizări\n\n* $-180 \\leq N \\leq 180$;\n* $2 \\leq M \\leq 20$;\n* În șirul citit cifrele se pot repeta.\n* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.\n* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.\n* În cazul în care soluția nu este unică se va afișa o soluție corectă.",
    "header": {
      "problem_id": 813,
      "problem_name": "adunscad",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "adunscad.in",
      "output_filename": "adunscad.out",
      "multiple_solutions": true,
      "original_source": "OJI 2011 VIII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "adunscad.in",
      "output": "adunscad.out"
    },
    "consoleInteraction": false
  }
}