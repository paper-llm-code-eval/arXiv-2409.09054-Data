---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

std::ifstream fin("adunscad.in");
std::ofstream fout("adunscad.out");

void generate_expression(std::vector<int>& digits, std::string& expr, int& target, int sum, size_t index, bool& found) {
    if (found) return; // Stop if expression already found
    if (index == digits.size()) {
        if (sum == target) {
            fout << expr;
            found = true;
        }
        return;
    }

    // Try to add the next digit
    expr.push_back('+');
    expr.push_back('0' + digits[index]);
    generate_expression(digits, expr, target, sum + digits[index], index + 1, found);
    expr.pop_back();
    expr.pop_back();

    // Try to subtract the next digit
    expr.push_back('-');
    expr.push_back('0' + digits[index]);
    generate_expression(digits, expr, target, sum - digits[index], index + 1, found);
    expr.pop_back();
    expr.pop_back();
}

int main() {
    int N, M;
    fin >> N >> M;

    std::vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }

    std::string expression;
    bool found = false;

    // Start the expression with the first digit
    expression.push_back('0' + digits[0]);
    generate_expression(digits, expression, N, digits[0], 1, found);

    if (!found) {
        fout << "0";
    }

    fin.close();
    fout.close();
    return 0;
}
```

This code tries all possible expressions using the provided digits and stops when a valid solution that sums up to `N` is found. It reads from `adunscad.in` and writes to `adunscad.out` using `ifstream` and `ofstream`. The recursive function `generate_expression` is used to construct and check all possible expressions.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

After re-evaluating the code provided in the previous response and analyzing the new input data, it is clear there is a bug in the original solution. The problem stems from the fact that the recursive function `generate_expression` needs to begin constructing the expression with the possibility of the first digit being negative or positive. As the first digit can also be negative, we need to account for this possibility in our search for a valid expression.

Let's address this issue and rewrite the solution incorporating this adjustment.

```cpp
#include <fstream>
#include <vector>
#include <string>

std::ifstream fin("adunscad.in");
std::ofstream fout("adunscad.out");

void generate_expression(std::vector<int>& digits, std::string expr, int target, int current_sum, size_t index, bool& found) {
    if (found) return; // If we have already found a solution, stop further processing.
    if (index == digits.size()) {
        if (current_sum == target) {
            fout << expr; // Output the expression to the file.
            found = true;
        }
        return;
    }

    // Recursively add the next digit with a '+' operator.
    generate_expression(digits, expr + "+" + std::to_string(digits[index]), target, current_sum + digits[index], index + 1, found);
    
    // Recursively add the next digit with a '-' operator.
    generate_expression(digits, expr + "-" + std::to_string(digits[index]), target, current_sum - digits[index], index + 1, found);
}

int main() {
    int N, M;
    fin >> N >> M;

    std::vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }

    bool found = false;
    std::string expression = std::to_string(digits[0]); // Start with the first digit as it is.

    // Start the search with the first digit being positive.
    generate_expression(digits, expression, N, digits[0], 1, found);

    // If not found, start the search with the first digit being negative.
    if (!found) {
        expression = "-" + expression;
        generate_expression(digits, expression, N, -digits[0], 1, found);
    }

    // If no expression was found, output "0".
    if (!found) {
        fout << "0";
    }

    fin.close();
    fout.close();
    return 0;
}
```

In the corrected code, we start by trying the first digit as a positive number, and then if no solution is found, we attempt it as a negative number before we give up and output "0". This ensures that we explore the possibility of the first digit being part of a subtraction operation in the expression, which was missing in the initial implementation. The rest of the recursive search is unchanged, as it correctly attempts to add or subtract each subsequent digit.
