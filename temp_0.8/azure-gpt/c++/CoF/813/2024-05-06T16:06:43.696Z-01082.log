---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
using namespace std;

ifstream in("adunscad.in");
ofstream out("adunscad.out");

int N, M;

bool dfs(int idx, int current, const vector<int> &digits, string &expression, string &result) {
    if (idx == M) {
        if (current == N) {
            result = expression;
            return true;
        }
        return false;
    }

    // Try adding the current digit
    expression += '+' + to_string(digits[idx]);
    if (dfs(idx + 1, current + digits[idx], digits, expression, result)) return true;
    expression.pop_back(); // Remove digit
    expression.pop_back(); // Remove '+'

    // Try subtracting the current digit
    expression += '-' + to_string(digits[idx]);
    if (dfs(idx + 1, current - digits[idx], digits, expression, result)) return true;
    expression.pop_back(); // Remove digit
    expression.pop_back(); // Remove '-'

    return false;
}

int main() {
    in >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        in >> digits[i];
    }
    in.close();

    string expression = "";
    string result;
    if (dfs(0, 0, digits, expression, result)) {
        out << result << '\n';
    } else {
        out << "0\n";
    }

    out.close();
    return 0;
}
```

This C++ code attempts to solve the problem using depth-first search (DFS) to try every possible combination of adding or subtracting the given digits. The `dfs` function is a recursive function that tries to form an arithmetic expression by either adding or subtracting the current digit to/from the accumulated value. If the end of the digits array is reached and the accumulated value equals the target value `N`, the current expression is the solution.

The program reads the target number `N` and the number of digits `M` from the input file `adunscad.in`, along with the sequence of digits. It then initializes an empty string for the expression and calls the `dfs` function starting from index 0 with an accumulated value of 0. If a solution is found, it writes the expression to the output file `adunscad.out`; otherwise, it writes "0".

Please note that this approach is a brute-force DFS and may not be the most optimal solution in terms of performance. However, it is a straightforward approach to find a solution for the presented problem.
---------- user ----------


Program result did not match expected result.
Input data:
```
21 4
3 9 1 8
```
Expected output:
```
3+9+1+8
```
Found output:
```
+3+9+1+8
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the initial solution is incorrectly adding a '+' operator before the first digit in the expression. According to the problem statement, if the first digit is preceded by the '+' operator, it should not be shown in the expression.

To fix this issue, we need to adjust the `dfs` function to handle the first digit differently. The first digit should be added to the expression without an operator. For subsequent digits, we then add either '+' or '-' as required.

Here is the revised solution with the necessary fix applied:

```cpp
#include <fstream>
#include <vector>
#include <string>
using namespace std;

ifstream in("adunscad.in");
ofstream out("adunscad.out");

int N, M;

bool dfs(int idx, int current, const vector<int> &digits, string &expression, string &result) {
    if (idx == M) {
        if (current == N) {
            result = expression;
            return true;
        }
        return false;
    }

    // For the first digit, we add it to the expression without an operator.
    if (idx == 0) {
        expression += to_string(digits[idx]);
        if (dfs(idx + 1, current + digits[idx], digits, expression, result)) return true;
        expression.pop_back(); // Remove digit
    } else {
        // For subsequent digits, try adding the current digit
        expression += '+' + to_string(digits[idx]);
        if (dfs(idx + 1, current + digits[idx], digits, expression, result)) return true;
        expression.pop_back(); // Remove digit
        expression.pop_back(); // Remove '+'

        // Try subtracting the current digit
        expression += '-' + to_string(digits[idx]);
        if (dfs(idx + 1, current - digits[idx], digits, expression, result)) return true;
        expression.pop_back(); // Remove digit
        expression.pop_back(); // Remove '-'
    }

    return false;
}

int main() {
    in >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        in >> digits[i];
    }
    in.close();

    string expression = "";
    string result;
    if (dfs(0, 0, digits, expression, result)) {
        out << result << '\n';
    } else {
        out << "0\n";
    }

    out.close();
    return 0;
}
```

This corrected version does not prepend a '+' operator to the first digit in the expression. Instead, it adds only the first digit to the expression and proceeds to the next digits with the addition and subtraction operations as before. This implementation should now produce the expected output for the given input.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The current implementation has a bug in that it does not handle the case where the target number `N` is negative and the first digit must be subtracted to achieve the target. The previous fix only considered adding the first digit without any operator, which works for non-negative targets but fails when the target is negative.

We need to further adjust the `dfs` function to handle the case where we may need to subtract the first digit. We'll add a parameter to track whether we're at the first digit and allow either addition or subtraction as appropriate.

Let's implement the necessary fix:

```cpp
#include <fstream>
#include <vector>
#include <string>
using namespace std;

ifstream in("adunscad.in");
ofstream out("adunscad.out");

int N, M;

bool dfs(int idx, int current, const vector<int>& digits, string& expression, bool isFirstDigit) {
    if (idx == M) {
        if (current == N) {
            return true;
        }
        return false;
    }

    // Adding the current digit
    string addOp = isFirstDigit && digits[idx] > 0 ? "" : "+"; // No '+' for first positive digit
    expression += addOp + to_string(digits[idx]);
    if (dfs(idx + 1, current + digits[idx], digits, expression, false)) return true;
    expression.erase(expression.end() - addOp.size() - to_string(digits[idx]).size(), expression.end());

    // Subtracting the current digit
    string subOp = isFirstDigit ? "-" : "-"; // '-' is required for first digit if negative
    expression += subOp + to_string(digits[idx]);
    if (dfs(idx + 1, current - digits[idx], digits, expression, false)) return true;
    expression.erase(expression.end() - subOp.size() - to_string(digits[idx]).size(), expression.end());

    return false;
}

int main() {
    in >> N >> M;
    vector<int> digits(M);
    for (int i = 0; i < M; ++i) {
        in >> digits[i];
    }
    in.close();

    string expression;
    if (dfs(0, 0, digits, expression, true)) {
        out << expression << '\n';
    } else {
        out << "0\n";
    }

    out.close();
    return 0;
}
```

In this adjusted version, we pass an additional parameter `isFirstDigit` to `dfs` to indicate whether we are processing the first digit. If it is the first digit and positive, we do not prepend a '+'. If it is the first digit and we need to subtract it (either because it is negative or because we need to reach a negative target), we prepend a '-'.

This implementation should now handle both positive and negative targets correctly and produce the expected output.
