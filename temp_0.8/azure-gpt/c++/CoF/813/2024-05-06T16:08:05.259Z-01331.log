---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

std::ifstream fin("adunscad.in");
std::ofstream fout("adunscad.out");

int N, M;
std::vector<int> digits;
std::string expression;

bool find_expression(int idx, int current_sum, std::string expr, int last_digit, bool is_positive) {
    if (idx == M) {
        if (current_sum == N) {
            expression = expr;
            return true;
        }
        return false;
    }

    int next_digit = digits[idx];
    int new_sum = is_positive ? current_sum + next_digit : current_sum - next_digit;
    std::string next_expr_positive = expr + "+" + char('0' + next_digit);
    std::string next_expr_negative = expr + "-" + char('0' + next_digit);

    // Try adding the next digit
    if (find_expression(idx + 1, new_sum, next_expr_positive, next_digit, true))
        return true;

    // Try subtracting the next digit
    if (find_expression(idx + 1, new_sum, next_expr_negative, next_digit, false))
        return true;

    return false;
}

int main() {
    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    // Start the recursion with the first digit considered positive
    if (!find_expression(1, digits[0], std::to_string(digits[0]), digits[0], true)) {
        fout << "0\n";
    } else {
        fout << expression << '\n';
    }

    fout.close();
    return 0;
}
```

This program reads the problem's input from `adunscad.in`, processes it to find an arithmetic expression that sums up to `N` using all the digits in the order they are given, and writes the result to `adunscad.out`. It uses a recursive backtracking approach to try different combinations of '+' and '-' between the digits, avoiding the use of `cin >>`, `cout <<`, `printf()`, and `scanf()` as per the requirements.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The results differ because in the original solution, the recursive call `find_expression` always adds or subtracts the next digit, starting with the first digit considered as a positive number. This does not account for the case where the calculated sum should start with a negative value. In the provided example where the target sum is `-1`, the original solution would never consider starting with `-1` as the initial value.

To fix this, we need to allow the first digit to be used as a negative number as well. We will modify the initial call to `find_expression` to consider both the positive and negative cases for the first digit.

Here's the revised solution:

```cpp
#include <fstream>
#include <vector>
#include <string>

std::ifstream fin("adunscad.in");
std::ofstream fout("adunscad.out");

int N, M;
std::vector<int> digits;
std::string expression;

bool find_expression(int idx, int current_sum, std::string expr) {
    if (idx == M) {
        if (current_sum == N) {
            expression = expr;
            return true;
        }
        return false;
    }

    int next_digit = digits[idx];
    std::string next_expr_positive = expr + "+" + char('0' + next_digit);
    std::string next_expr_negative = expr + "-" + char('0' + next_digit);

    // Try adding the next digit
    if (find_expression(idx + 1, current_sum + next_digit, next_expr_positive))
        return true;

    // Try subtracting the next digit
    if (find_expression(idx + 1, current_sum - next_digit, next_expr_negative))
        return true;

    return false;
}

int main() {
    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    // Start recursion considering both positive and negative scenarios for the first digit
    if (!find_expression(1, digits[0], std::to_string(digits[0])) && 
        !find_expression(1, -digits[0], "-" + std::to_string(digits[0]))) {
        fout << "0\n";
    } else {
        fout << expression << '\n';
    }

    fout.close();
    return 0;
}
```

With this fix, the program should now also consider the scenario where the first digit is negative, and it should be able to find the correct expression for the provided input.
