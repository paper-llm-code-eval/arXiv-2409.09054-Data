---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

using namespace std;

ifstream fin("adunscad.in");
ofstream fout("adunscad.out");

int N, M;
vector<int> digits;
vector<char> operators;
bool found = false;

void search(int index, int current_sum, string expression) {
    if (found) return;
    if (index == M) {
        if (current_sum == N) {
            found = true;
            fout << expression << '\n';
        }
        return;
    }
    search(index + 1, current_sum + digits[index], expression + "+" + char('0' + digits[index]));
    search(index + 1, current_sum - digits[index], expression + "-" + char('0' + digits[index]));
}

int main() {
    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    search(1, digits[0], to_string(digits[0]));

    if (!found) {
        fout << "0\n";
    }

    fout.close();

    return 0;
}
```

This C++ program reads the desired number `N` and the number of digits `M` from the file `adunscad.in`, and then the sequence of the digits. It uses a recursive search function to try all possible combinations of adding or subtracting the subsequent digits from the sequence. It outputs an expression that evaluates to `N`, if it exists, to the file `adunscad.out`. If no expression is found, it writes "0" to the output file.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The problem with the original implementation is that it does not handle negative numbers correctly. The algorithm should consider that the first digit can be negative, which it did not.

Additionally, the initial program attempted to begin the recursion with the first digit already included in the sum, which is incorrect because the first digit could also be negative if the target number `N` is negative.

I'll fix the implementation by adding a flag to indicate whether the first digit has been used and by starting the sum at 0. The first step of the recursion will decide if the first digit is positive or negative.

Here is the corrected solution:

```cpp
#include <fstream>
#include <vector>
#include <string>

using namespace std;

ifstream fin("adunscad.in");
ofstream fout("adunscad.out");

int N, M;
vector<int> digits;
bool found = false;

void search(int index, int current_sum, string expression, bool first_digit_used) {
    if (found) return;  // Stop searching if a solution has been found
    if (index == M) {  // All digits have been used
        if (current_sum == N) {
            found = true;  // A solution has been found
            fout << expression << '\n';
        }
        return;
    }
    if (!first_digit_used) {
        // Use the first digit as positive or negative
        search(index + 1, current_sum + digits[index], to_string(digits[index]), true);
        search(index + 1, current_sum - digits[index], "-" + to_string(digits[index]), true);
    } else {
        // Either add or subtract the next digit
        search(index + 1, current_sum + digits[index], expression + "+" + char('0' + digits[index]), true);
        search(index + 1, current_sum - digits[index], expression + "-" + char('0' + digits[index]), true);
    }
}

int main() {
    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    search(0, 0, "", false);

    if (!found) {
        fout << "0\n";
    }

    fout.close();

    return 0;
}
```

This modified solution starts the search with a current sum of `0` and without using the first digit. The recursive function `search` now has a flag `first_digit_used` to know whether it's at the start of the expression or not. In the first call, it tries both using the first digit as positive and negative. Then it proceeds to try all combinations, as before. This should correctly handle negative numbers and produce the correct output for cases where the first digit must be negative.
