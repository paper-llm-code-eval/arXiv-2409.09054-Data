---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `adunscad.in` and write to `adunscad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Considerăm un număr întreg $N$ și un șir de $M$ cifre zecimale nenule. Să se determine dacă numărul $N$ poate fi rezultatul unei expresii aritmetice simple (fără paranteze), formată exclusiv din cifrele șirului citit și din operatorii aritmetici desemnați pentru operațiile de adunare și scădere ($+, -$).

# Cerință

Scrieți un program care citește numerele $N$ și $M$ de pe prima linie a fișierului de intrare și șirul de $M$ cifre de pe linia următoare și determină și afișează expresia găsită sau valoarea 0 în cazul în care nu există soluție.

# Date de intrare

Fișierul de intrare `adunscad.in` conține pe prima linie numerele întregi $N \ M$, separate printr-un spațiu, reprezentând valoarea ce trebuie obținută la evaluarea expresiei și numărul de cifre din șir. Linia a doua a fișierului de intrare conține șirul celor $M$ cifre nenule, separate prin câte un spațiu.

# Date de ieșire

În fișierul de ieșire `adunscad.out` va conține pe prima linie expresia determinată, în cazul în care există soluție, sau valoarea $0$ în cazul în care nu există soluție.

# Restricții și precizări

* $-180 \leq N \leq 180$;
* $2 \leq M \leq 20$;
* În șirul citit cifrele se pot repeta.
* Toate cifrele din șir trebuie să apară și în expresia aritmetică, în aceeași ordine în care au fost citite.
* În expresia aritmetică, orice cifră trebuie să fie precedată de un operator; în cazul în care prima cifră este precedată de operatorul + acesta nu se pune în expresie. În expresia aritmetică nu există spații.
* În cazul în care soluția nu este unică se va afișa o soluție corectă.

---

Example:
`adunscad.in`
```
21 4
3 9 1 8
```

`adunscad.out`
```
3+9+1+8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

int N, M;
std::vector<int> digits;
std::string best_expr;
bool found = false;

void search(int pos, int current_sum, std::string expr) {
    if (found) return; // If we already found a solution, no need to continue searching
    if (pos == M) {
        if (current_sum == N) {
            best_expr = expr;
            found = true;
        }
        return;
    }
    
    // Try adding the next digit
    search(pos + 1, current_sum + digits[pos], expr + "+" + std::to_string(digits[pos]));
    
    // Try subtracting the next digit
    search(pos + 1, current_sum - digits[pos], expr + "-" + std::to_string(digits[pos]));
}

int main() {
    std::ifstream fin("adunscad.in");
    std::ofstream fout("adunscad.out");

    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    std::stringstream expr;
    expr << digits[0]; // The first digit is not prefixed by an operator

    // Start the recursive search from the second digit
    search(1, digits[0], expr.str());

    if (found) {
        fout << best_expr << '\n';
    } else {
        fout << "0\n";
    }

    fout.close();
    return 0;
}
```
This code will recursively search for a solution by adding or subtracting each digit to/from the current sum. If it finds a solution that matches the target number N, it stores the expression and stops searching. The solution adheres to the input/output file requirements and uses recursion to build and evaluate expressions without parentheses.
---------- user ----------


Program result did not match expected result.
Input data:
```
-1 4
1 2 3 5
```
Expected output:
```
-1+2+3-5
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The original solution has a flaw where it fails to properly initialize the expression with the required operator for the first digit, assuming the first digit does not need an operator. However, per the restriction that any digit must be preceded by an operator, the first digit should also be considered with both '+' and '-' operators. Additionally, the solution halts after finding the first solution, which is incorrect as it should keep searching until all possibilities are explored to verify if there are multiple solutions.

I will now rewrite the solution, ensuring that:

1. It begins recursion with both '+' and '-' operators for the first digit.
2. It continues searching even after finding a valid expression to ensure there are no multiple solutions.
3. It correctly formats the expression with required operators.

Here is the corrected implementation:

```cpp
#include <fstream>
#include <vector>
#include <string>

int N, M;
std::vector<int> digits;
std::string best_expr;
bool found = false;

// Helper function to add an operator and digit to the expression.
std::string add_to_expr(const std::string& expr, char op, int digit) {
    if (expr.empty() && op == '+') {
        return std::to_string(digit);
    }
    return expr + op + std::to_string(digit);
}

// Recursive function to search for an expression that sums up to N.
void search(int pos, int current_sum, std::string expr) {
    if (found) return; // If we already found a solution, no need to continue searching
    if (pos == M) {
        if (current_sum == N) {
            best_expr = expr;
            found = true;
        }
        return;
    }
    
    // Try adding the next digit
    search(pos + 1, current_sum + digits[pos], add_to_expr(expr, '+', digits[pos]));
    
    // Try subtracting the next digit
    search(pos + 1, current_sum - digits[pos], add_to_expr(expr, '-', digits[pos]));
}

int main() {
    std::ifstream fin("adunscad.in");
    std::ofstream fout("adunscad.out");

    fin >> N >> M;
    digits.resize(M);
    for (int i = 0; i < M; ++i) {
        fin >> digits[i];
    }
    fin.close();

    // Start the recursive search with both '+' and '-' for the first digit
    search(1, digits[0], add_to_expr("", '+', digits[0])); // With '+'
    search(1, -digits[0], add_to_expr("", '-', digits[0])); // With '-'

    if (found) {
        fout << best_expr << '\n';
    } else {
        fout << "0\n";
    }

    fout.close();
    return 0;
}
```
This updated solution begins the search by considering both '+' and '-' for the first digit, and formats the expressions correctly. It will stop at the first valid solution found, as the problem statement does not require finding all possible solutions, just a single correct one.
