---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `joc.in` and write to `joc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Inspiraţi de clasicul joc Tic-Tac-Toe (`X` şi `0`), Teodora şi Ştefan îşi propun să joace ceva asemănător, adăugând jocului clasic câteva reguli noi:

~[joc.png|align=right|width=13em]

- tabla de joc este un pătrat de latură $N$, care este împărţit în $N \cdot N$ celule, aşezate pe $N$ linii şi $N$ coloane; celulele pătratului sunt numerotate de la $1$ la $N^2$ parcurgând liniile de sus în jos, și coloanele de la stânga la dreapta;
- Teodora va marca celulele cu `X` (litera `X`), iar Ştefan cu `0` (cifra `0`);
- în cadrul unei runde, copiii marchează alternativ câte o celulă din pătrat, nemarcată anterior;
- o rundă a jocului este descrisă printr-un șir format din exact $N^2$ numere naturale reprezentând celulele pătratului, în ordinea în care au fost marcate succesiv de cei doi copii;
- jocul are $K$ runde; prima este începută de Teodora, a doua de Ştefan, a treia Teodora, a patra Ştefan şi aşa mai departe;
- o rundă este câştigată de jucătorul care reuşeşte primul să marcheze complet o linie, o coloană, diagonala principală sau una din cele două semidiagonale paralele şi **alăturate** cu aceasta (figura $1$), diagonala secundară sau una din cele două semidiagonale paralele şi **alăturate** acesteia (figura $2$);
- o rundă se încheie fără un câştigător dacă după marcarea celor $N^2$ celule nu există pe tabla de joc nicio linie, coloană, diagonală sau semidiagonală marcate cu acelaşi simbol.

# Cerință

Cunoscând numerele $N, K$ şi cele $K$ şiruri de numere care reprezintă rundele jucate, scrieţi un program care să rezolve una dintre următoarele două cerinţe:
1. Să se determine câte runde a câştigat fiecare copil.
2. Să se determine care este cel mai mare număr de marcări efectuate până la câştigarea unei runde.

# Date de intrare

Fişierul de intrare `joc.in` conţine pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe a doua linie se află două numere naturale $N$ şi $K$, separate prin câte un spaţiu, reprezentând dimensiunea tablei de joc şi respectiv numărul de runde jucate. Pe următoarele $K$ linii sunt descrise rundele de joc, câte o rundă pe câte o linie a fișierului. În cadrul liniilor, numerele sunt separate prin câte un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie două numere naturale $t$ şi $s$, separate printr-un spaţiu, unde $t$ reprezintă numărul de runde câştigate de Teodora, iar $s$ numărul rundelor câştigate de Ştefan.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie numărul cel mai mare de marcări efectuate până la câştigarea unei runde.

# Restricții și precizări

* $3 \leq N \leq 100$;
* $1 \leq K \leq 25$;
* La fiecare joc se câştigă cel puţin o rundă.
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`joc.in`
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```

`joc.out`
```
2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX_N = 100;

int N, K, C;
int T_wins = 0, S_wins = 0, max_moves = 0;
int board[MAX_N][MAX_N];

bool check_line(int row) {
    char first = board[row][0];
    for (int i = 1; i < N; ++i) {
        if (board[row][i] != first) return false;
    }
    return true;
}

bool check_column(int col) {
    char first = board[0][col];
    for (int i = 1; i < N; ++i) {
        if (board[i][col] != first) return false;
    }
    return true;
}

bool check_main_diagonal() {
    char first = board[0][0];
    for (int i = 1; i < N; ++i) {
        if (board[i][i] != first) return false;
    }
    return true;
}

bool check_anti_diagonal() {
    char first = board[0][N - 1];
    for (int i = 1; i < N; ++i) {
        if (board[i][N - 1 - i] != first) return false;
    }
    return true;
}

bool check_victory(int move_count, char player) {
    bool won = false;
    for (int i = 0; i < N; ++i) {
        won |= check_line(i) | check_column(i);
    }
    won |= check_main_diagonal() | check_anti_diagonal();
    if (won) {
        if (C == 1) {
            if (player == 'X') T_wins++;
            else S_wins++;
        } else {
            max_moves = max(max_moves, move_count);
        }
    }
    return won;
}

int main() {
    ifstream fin("joc.in");
    ofstream fout("joc.out");

    fin >> C >> N >> K;

    for (int k = 0; k < K; ++k) {
        fill(&board[0][0], &board[0][0] + sizeof(board) / sizeof(char), 0);
        
        char player = (k % 2 == 0) ? 'X' : '0';
        bool finished = false;
        for (int move_count = 1; move_count <= N * N && !finished; ++move_count) {
            int cell;
            fin >> cell;
            --cell; // Convert to 0-indexed
            board[cell / N][cell % N] = player;
            
            if (move_count >= 2 * N - 1) { // Minimum moves required to win
                finished = check_victory(move_count, player);
            }

            player = (player == 'X') ? '0' : 'X'; // Swap player
        }
    }

    if (C == 1) {
        fout << T_wins << " " << S_wins;
    } else {
        fout << max_moves;
    }

    fin.close();
    fout.close();

    return 0;
}
```
---------- user ----------


Program exited with code 139.
stdout:
```

```
stderr:
```

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
