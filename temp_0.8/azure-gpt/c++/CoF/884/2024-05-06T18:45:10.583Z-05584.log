---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `joc.in` and write to `joc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Inspiraţi de clasicul joc Tic-Tac-Toe (`X` şi `0`), Teodora şi Ştefan îşi propun să joace ceva asemănător, adăugând jocului clasic câteva reguli noi:

~[joc.png|align=right|width=13em]

- tabla de joc este un pătrat de latură $N$, care este împărţit în $N \cdot N$ celule, aşezate pe $N$ linii şi $N$ coloane; celulele pătratului sunt numerotate de la $1$ la $N^2$ parcurgând liniile de sus în jos, și coloanele de la stânga la dreapta;
- Teodora va marca celulele cu `X` (litera `X`), iar Ştefan cu `0` (cifra `0`);
- în cadrul unei runde, copiii marchează alternativ câte o celulă din pătrat, nemarcată anterior;
- o rundă a jocului este descrisă printr-un șir format din exact $N^2$ numere naturale reprezentând celulele pătratului, în ordinea în care au fost marcate succesiv de cei doi copii;
- jocul are $K$ runde; prima este începută de Teodora, a doua de Ştefan, a treia Teodora, a patra Ştefan şi aşa mai departe;
- o rundă este câştigată de jucătorul care reuşeşte primul să marcheze complet o linie, o coloană, diagonala principală sau una din cele două semidiagonale paralele şi **alăturate** cu aceasta (figura $1$), diagonala secundară sau una din cele două semidiagonale paralele şi **alăturate** acesteia (figura $2$);
- o rundă se încheie fără un câştigător dacă după marcarea celor $N^2$ celule nu există pe tabla de joc nicio linie, coloană, diagonală sau semidiagonală marcate cu acelaşi simbol.

# Cerință

Cunoscând numerele $N, K$ şi cele $K$ şiruri de numere care reprezintă rundele jucate, scrieţi un program care să rezolve una dintre următoarele două cerinţe:
1. Să se determine câte runde a câştigat fiecare copil.
2. Să se determine care este cel mai mare număr de marcări efectuate până la câştigarea unei runde.

# Date de intrare

Fişierul de intrare `joc.in` conţine pe prima linie un număr natural $C$. Pentru toate testele, $C$ poate lua numai valorile $1$ sau $2$. Pe a doua linie se află două numere naturale $N$ şi $K$, separate prin câte un spaţiu, reprezentând dimensiunea tablei de joc şi respectiv numărul de runde jucate. Pe următoarele $K$ linii sunt descrise rundele de joc, câte o rundă pe câte o linie a fișierului. În cadrul liniilor, numerele sunt separate prin câte un spațiu.

# Date de ieșire

Dacă valoarea lui $C$ este $1$, se va rezolva numai punctul $1$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie două numere naturale $t$ şi $s$, separate printr-un spaţiu, unde $t$ reprezintă numărul de runde câştigate de Teodora, iar $s$ numărul rundelor câştigate de Ştefan.

Dacă valoarea lui $C$ este $2$, se va rezolva numai punctul $2$ din cerințe. În acest caz, fişierul de ieşire `joc.out` va conţine pe prima linie numărul cel mai mare de marcări efectuate până la câştigarea unei runde.

# Restricții și precizări

* $3 \leq N \leq 100$;
* $1 \leq K \leq 25$;
* La fiecare joc se câştigă cel puţin o rundă.
* Pentru rezolvarea corectă a primei cerinţe se acordă $45$ de puncte, iar pentru rezolvarea corectă a celei de a doua cerințe se acordă $45$ de puncte. Se acordă $10$ puncte din oficiu.

---

Example:
`joc.in`
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```

`joc.out`
```
2 1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

std::ifstream fin("joc.in");
std::ofstream fout("joc.out");

const int MAX_N = 100;
int board[MAX_N][MAX_N], wins[MAX_N * MAX_N];

bool check_winner(int n, int x, int y) {
    // Check Row
    if (board[x][0] == board[x][1] && board[x][0] == board[x][n - 1]) {
        return true;
    }
    // Check Column
    if (board[0][y] == board[1][y] && board[0][y] == board[n - 1][y]) {
        return true;
    }
    // Check main diagonal and adjacent semi-diagonals
    if (x == y) {
        if (board[0][0] == board[1][1] && board[0][0] == board[n - 1][n - 1]) {
            return true;
        }
        if (x > 0 && board[x - 1][y - 1] == board[x][y] && board[x][y] == board[x + 1][y + 1]) {
            return true;
        }
    }
    // Check secondary diagonal and adjacent semi-diagonals
    if (x + y == n - 1) {
        if (board[0][n - 1] == board[1][n - 2] && board[0][n - 1] == board[n - 1][0]) {
            return true;
        }
        if (y > 0 && board[x - 1][y + 1] == board[x][y] && board[x][y] == board[x + 1][y - 1]) {
            return true;
        }
    }
    return false;
}

int main() {
    int C, N, K;
    fin >> C >> N >> K;

    int max_moves = 0, teodora_wins = 0, stefan_wins = 0;
    for (int k = 0; k < K; ++k) {
        std::fill(&board[0][0], &board[0][0] + sizeof(board) / sizeof(board[0][0]), 0);
        std::fill(wins, wins + N * N + 1, 0);

        for (int i = 0, cell; i < N * N; ++i) {
            fin >> cell;
            --cell;  // 0-based index
            int x = cell / N, y = cell % N;
            board[x][y] = (i % 2 == k % 2) ? 'X' : '0';
            if (!wins[cell + 1] && check_winner(N, x, y)) {
                wins[cell + 1] = 1;
                max_moves = std::max(max_moves, i + 1);
                if (board[x][y] == 'X') {
                    ++teodora_wins;
                } else {
                    ++stefan_wins;
                }
            }
        }
    }

    if (C == 1) {
        fout << teodora_wins << " " << stefan_wins << "\n";
    } else {
        fout << max_moves << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```
---------- user ----------


Program result did not match expected result.
Input data:
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```
Expected output:
```
2 1
```
Found output:
```
7 5
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The initial solution has multiple issues:

1. It incorrectly fills the `wins` array with information about whether each individual cell was part of a winning line. However, it does not stop the loop when a winner is found.
2. The check_winner function does not correctly check for winning conditions. It only checks for complete rows, columns and diagonals, not taking into account the additional rule regarding adjacent semi-diagonals.
3. When a player wins a round, the loop should terminate as there should be no further play in that round.

Let's rewrite the solution with these issues in mind:

```cpp
#include <fstream>
#include <vector>
#include <cstring>

std::ifstream fin("joc.in");
std::ofstream fout("joc.out");

const int MAX_N = 100;
char board[MAX_N][MAX_N];

bool check_winner(int n, int x, int y, char player) {
    // Check Row
    for (int j = 0; j < n; ++j) {
        if (board[x][j] != player) break;
        if (j == n - 1) return true;
    }
    // Check Column
    for (int i = 0; i < n; ++i) {
        if (board[i][y] != player) break;
        if (i == n - 1) return true;
    }
    // Check main diagonal and adjacent semi-diagonals
    if (x == y) {
        for (int i = 0; i < n; ++i) {
            if (board[i][i] != player) break;
            if (i == n - 1) return true;
        }
    }
    if (x == y + 1 || x + 1 == y) { // Check adjacent semi-diagonals
        for (int i = 1; i < n - 1; ++i) {
            if (board[i][i + (x - y)] != player) break;
            if (i == n - 2) return true;
        }
    }
    // Check secondary diagonal and adjacent semi-diagonals
    if (x + y == n - 1) {
        for (int i = 0; i < n; ++i) {
            if (board[i][n - 1 - i] != player) break;
            if (i == n - 1) return true;
        }
    }
    if (x + y == n || x + y == n - 2) { // Check adjacent semi-diagonals
        for (int i = 1; i < n - 1; ++i) {
            if (board[i][n - 1 - (i + (n - 1 - (x + y)))] != player) break;
            if (i == n - 2) return true;
        }
    }
    return false;
}

int main() {
    int C, N, K;
    fin >> C >> N >> K;

    int max_moves = 0, teodora_wins = 0, stefan_wins = 0;
    for (int round = 0; round < K; ++round) {
        memset(board, 0, sizeof(board));
        int move_count = 0;
        bool winner_found = false;

        for (int i = 0, cell; i < N * N; ++i) {
            fin >> cell;
            --cell;  // 0-based index
            int x = cell / N, y = cell % N;
            char player = (i % 2 == round % 2) ? 'X' : '0';
            board[x][y] = player;
            move_count++;

            if (check_winner(N, x, y, player) && !winner_found) {
                winner_found = true;
                max_moves = std::max(max_moves, move_count);
                if (player == 'X') {
                    ++teodora_wins;
                } else {
                    ++stefan_wins;
                }
                if (C == 1) break; // If we only care about the number of wins, we can stop here.
            }
        }
    }

    if (C == 1) {
        fout << teodora_wins << " " << stefan_wins << "\n";
    } else {
        fout << max_moves << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

This corrected solution should now correctly determine the number of rounds each player wins (Teodora and Stefan) as per the modified Tic-Tac-Toe rules. Additionally, if the task is to determine the largest number of moves made before a round was won, the solution will also compute this correctly.
---------- user ----------


Program result did not match expected result.
Input data:
```
1
4 4
16 13 15 9 10 1 5 2 6 14 3 7 11 4 8 12
1 2 3 4 5 6 7 8 12 11 10 9 13 14 15 16
1 5 9 6 2 7 3 8 4 10 11 12 13 14 15 16
1 2 3 4 8 7 6 5 12 11 10 9 16 15 14 13
```
Expected output:
```
2 1
```
Found output:
```
1 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
