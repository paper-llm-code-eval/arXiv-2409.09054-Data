{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 3,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/712/2024-05-06T10:35:07.428Z-05281.log",
  "attemptStart": 1714991707.428,
  "attemptEnd": 1714991914.758,
  "attemptDuration": 207.32999992370605,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nstd::ifstream fin(\"numere.in\");\nstd::ofstream fout(\"numere.out\");\n\nconst int MAXN = 10;\nconst int MAX_SUM = 1000; // Max possible sum of any subset with numbers up to 99\n\nint main() {\n    int x[MAXN], sum[1 << MAXN] = {0}, count = 0, max_sum_pair = 0;\n    std::pair<int, int> max_pair;\n    std::vector<std::pair<int, int>> subsets;\n\n    // Read the input numbers\n    for (int i = 0; i < MAXN; ++i) fin >> x[i];\n\n    // Generate all subsets using bitmasks\n    for (int mask = 1; mask < (1 << MAXN); ++mask) {\n        for (int i = 0; i < MAXN; ++i) {\n            if (mask & (1 << i)) sum[mask] += x[i];\n        }\n        subsets.emplace_back(sum[mask], mask);\n    }\n\n    // Sort subsets by their sums\n    std::sort(subsets.begin(), subsets.end());\n\n    // Find pairs of subsets of equal sum\n    for (size_t i = 0; i < subsets.size(); ++i) {\n        for (size_t j = i + 1; j < subsets.size() && subsets[i].first == subsets[j].first; ++j) {\n            // Check if subsets are disjoint\n            if ((subsets[i].second & subsets[j].second) == 0) {\n                ++count;\n                if (subsets[i].first > max_sum_pair) {\n                    max_sum_pair = subsets[i].first;\n                    max_pair = {subsets[i].second, subsets[j].second};\n                }\n            }\n        }\n    }\n\n    // Output the results\n    fout << count << ' ' << max_sum_pair << '\\n';\n    bool first = true;\n    for (int i = 0; i < MAXN; ++i) {\n        if (max_pair.first & (1 << i)) {\n            if (!first) fout << ' ';\n            fout << x[i];\n            first = false;\n        }\n    }\n    fout << '\\n';\n    first = true;\n    for (int i = 0; i < MAXN; ++i) {\n        if (max_pair.second & (1 << i)) {\n            if (!first) fout << ' ';\n            fout << x[i];\n            first = false;\n        }\n    }\n    fout << '\\n';\n\n    // Close files\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 4152,
  "metadata": {
    "id": 712,
    "examples": [
      {
        "in": "60 49 86 78 23 97 69 71 32 10",
        "out": "65 276\n78 97 69 32\n60 49 86 71 10",
        "explainer": ""
      }
    ],
    "body": "Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.\n\n# Cerinţă\nDate $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.\n\n# Date de intrare\nFişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\\dots$, $x_{10}$.\n\n# Date de ieşire\nFişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.\n\n# Restricţii şi precizări\n- $10 \\leq x_i, y_i \\leq 99$, pentru $1 \\leq i \\leq 10$\n- $1 \\leq k, p \\leq 9$\n- Ordinea submulţimilor în perechi nu contează.\n- Perechea de submulţimi determinată nu este obligatoriu unică.",
    "header": {
      "problem_id": 712,
      "problem_name": "numere",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "numere.in",
      "output_filename": "numere.out",
      "multiple_solutions": true,
      "original_source": "OJI 2003 IX: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "numere.in",
      "output": "numere.out"
    },
    "consoleInteraction": false
  }
}