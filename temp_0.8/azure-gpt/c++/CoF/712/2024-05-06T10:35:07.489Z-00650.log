---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numere.in` and write to `numere.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel este un mare pasionat al cifrelor. Orice moment liber şi-l petrece jucându-se cu numere. Jucându-se astfel, într-o zi a scris pe hârtie $10$ numere distincte de câte două cifre şi a observat că printre acestea există două submulţimi disjuncte de sumă egală. Desigur, Gigel a crezut că este o întâmplare şi a scris alte $10$ numere distincte de câte două cifre şi spre surpriza lui, după un timp a găsit din nou două submulţimi disjuncte de sumă egală.

# Cerinţă
Date $10$ numere distincte de câte două cifre, determinaţi numărul de perechi de submulţimi **disjuncte** de sumă egală care se pot forma cu numere din cele date, precum şi una dintre aceste perechi pentru care suma numerelor din fiecare dintre cele două submulţimi este maximă.

# Date de intrare
Fişierul de intrare `numere.in` conţine pe prima linie $10$ numere naturale distincte separate prin câte un spaţiu $x_1$, $x_2$, $\dots$, $x_{10}$.

# Date de ieşire
Fişierul de ieşire `numere.out` conţine trei linii. Pe prima linie se află numărul de perechi de submulţimi de sumă egală şi suma maximă obţinută, separate printr-un spaţiu. Pe linia a doua se află elementele primei submulţimi separate prin câte un spațiu, iar pe linia a treia se află elementele celei de a doua submulţimi separate prin câte un spaţiu.

# Restricţii şi precizări
- $10 \leq x_i, y_i \leq 99$, pentru $1 \leq i \leq 10$
- $1 \leq k, p \leq 9$
- Ordinea submulţimilor în perechi nu contează.
- Perechea de submulţimi determinată nu este obligatoriu unică.

---

Example:
`numere.in`
```
60 49 86 78 23 97 69 71 32 10
```

`numere.out`
```
65 276
78 97 69 32
60 49 86 71 10
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

using namespace std;

ifstream fin("numere.in");
ofstream fout("numere.out");

int main() {
    const int N = 10;
    vector<int> numbers(N);
    vector<int> dp(1000, 0), prev(1000, -1), last(1000, -1);
    vector<int> solution1, solution2;
    int mask, i, sum = 0, pairs = 0, max_sum = 0;

    for (i = 0; i < N; ++i) {
        fin >> numbers[i];
        sum += numbers[i];
    }

    dp[0] = 1; // Base case: sum 0 can always be formed with no elements.

    for (i = 0; i < N; ++i) {
        for (int s = sum; s >= numbers[i]; --s) {
            if (dp[s - numbers[i]] && !dp[s]) {
                dp[s] = dp[s - numbers[i]] + 1;
                prev[s] = s - numbers[i];
                last[s] = i;
            }
        }
    }

    for (mask = 1; mask < (1 << N); ++mask) {
        int current_sum = 0;
        for (i = 0; i < N; ++i) {
            if (mask & (1 << i)) current_sum += numbers[i];
        }
        if (dp[current_sum] > 1) {
            pairs++;
            if (current_sum > max_sum) max_sum = current_sum;
        }
    }

    // Reconstruct one solution with the max_sum
    int t = max_sum;
    while (t > 0) {
        solution1.push_back(numbers[last[t]]);
        t = prev[t];
    }

    dp.assign(1000, 0);
    dp[0] = 1;

    for (i = 0; i < N; ++i) {
        if (find(solution1.begin(), solution1.end(), numbers[i]) != solution1.end()) continue;
        for (int s = max_sum; s >= numbers[i]; --s) {
            if (dp[s - numbers[i]] && !dp[s]) {
                dp[s] = dp[s - numbers[i]] + 1;
                prev[s] = s - numbers[i];
                last[s] = i;
            }
        }
    }

    t = max_sum;
    while (t > 0) {
        solution2.push_back(numbers[last[t]]);
        t = prev[t];
    }

    fout << pairs / 2 << " " << max_sum << "\n";

    for (int number : solution1) {
        fout << number << " ";
    }
    fout << "\n";
    
    for (int number : solution2) {
        fout << number << " ";
    }
    fout << "\n";

    fin.close();
    fout.close();
    return 0;
}
```
This code will read from `numere.in`, process the 10 numbers to find all pairs of disjoint subsets with equal sums, and output to `numere.out` the count of such pairs along with one pair of subsets with the maximum sum. It uses dynamic programming to track possible sums and backtracking to reconstruct the subsets.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
511 575
10 32 71 69 97 23 78 86 49 60 
10 32 71 69 97 23 78 86 49 60
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Let's analyze the differences and then propose a correct solution.

The expected output is to find the number of pairs of disjoint subsets with equal sum and one such pair with the maximum sum. The provided solution incorrectly calculates the number of pairs and outputs identical subsets instead of disjoint ones. Also, it doesn't efficiently compute the maximum sum pair.

The problem lies in the dynamic programming approach and the subset reconstruction process. We should be using a bitmasking technique to represent the subsets and consider all the possible subsets instead of trying to build them from the recorded sums.

Here's the corrected and efficient solution:

```cpp
#include <fstream>
#include <vector>
#include <bitset>

using namespace std;

ifstream fin("numere.in");
ofstream fout("numere.out");

int main() {
    const int N = 10;
    vector<int> numbers(N);
    vector<int> sum(1 << N), pair_count(1 << N);
    int totalPairs = 0, maxSum = 0, maxPair = 0;

    for (int i = 0; i < N; ++i) {
        fin >> numbers[i];
    }

    // Precompute sums and pairs for all subsets
    for (int mask = 1; mask < (1 << N); ++mask) {
        for (int j = 0; j < N; ++j) {
            if (mask & (1 << j)) {
                sum[mask] = sum[mask ^ (1 << j)] + numbers[j];
                pair_count[mask] = pair_count[mask ^ (1 << j)] + 1;
                break;
            }
        }
        for (int submask = mask; submask; submask = (submask - 1) & mask) {
            if (sum[submask] == sum[mask ^ submask] && pair_count[submask] == pair_count[mask ^ submask]) {
                totalPairs++;
                if (maxSum < sum[submask]) {
                    maxSum = sum[submask];
                    maxPair = mask;
                }
            }
        }
    }

    fout << totalPairs / 2 << " " << maxSum << "\n";
    // Output the two subsets with the maximum sum
    int submask = maxPair;
    for (int subtest = maxPair; subtest; subtest = (subtest - 1) & maxPair) { // Find the right submask
        if (sum[subtest] == sum[maxPair ^ subtest] && pair_count[subtest] == pair_count[maxPair ^ subtest]) {
            submask = subtest;
            break;
        }
    }
    for (int i = 0; i < N; ++i) {
        if (submask & (1 << i)) {
            fout << numbers[i] << " ";
        }
    }
    fout << "\n";
    for (int i = 0; i < N; ++i) {
        if (maxPair & (1 << i) && !(submask & (1 << i))) {
            fout << numbers[i] << " ";
        }
    }
    fout << "\n";

    fin.close();
    fout.close();

    return 0;
}
```

This solution should correctly find and count all pairs of disjoint subsets with equal sums and provide a pair with the maximum sum. It uses bitmasking to iterate over all possible subsets and their submasks, comparing sums and counts to check if they form a valid pair. The total is divided by 2 since each pair is counted twice, once for each subset. The outputs for the pair with the maximum sum are reconstructed by identifying the correct submask and writing the corresponding numbers to the output file.
---------- user ----------


Program result did not match expected result.
Input data:
```
60 49 86 78 23 97 69 71 32 10
```
Expected output:
```
65 276
78 97 69 32
60 49 86 71 10
```
Found output:
```
31 258
86 69 71 32 
60 78 23 97
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
