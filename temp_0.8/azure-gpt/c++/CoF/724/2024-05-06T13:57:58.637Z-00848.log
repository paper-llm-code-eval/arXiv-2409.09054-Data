---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

struct Reactiv {
    int min_temp;
    int max_temp;
};

bool compareReactivi(const Reactiv &a, const Reactiv &b) {
    return a.max_temp < b.max_temp;
}

int main() {
    std::ifstream fin("reactivi.in");
    std::ofstream fout("reactivi.out");

    int N;
    fin >> N;
    
    std::vector<Reactiv> reactivi(N);

    for (int i = 0; i < N; ++i) {
        fin >> reactivi[i].min_temp >> reactivi[i].max_temp;
    }
    
    fin.close();
    
    std::sort(reactivi.begin(), reactivi.end(), compareReactivi);

    int frigidere = 0;
    int current_max = -101; 

    for (int i = 0; i < N; ++i) {
        if (reactivi[i].min_temp > current_max) {
            frigidere++;
            current_max = reactivi[i].max_temp;
        }
    }

    fout << frigidere << '\n';
    
    fout.close();
    return 0;
}
```

This solution uses a greedy approach to solve the problem. It first reads all the reactivi data from "reactivi.in", then sorts them according to their `max_temp`. After sorting, it iterates through the sorted reactivi and counts the number of fridges needed while updating the `current_max` temperature that can be accommodated in the current fridge. The result is then written to "reactivi.out". 

The `compareReactivi` function is used to sort the reactivi such that we place the ones with the lowest `max_temp` first. This is because we want to prioritize placing reactivi that have a lower maximum temperature requirement, which allows us to potentially fit more reactivi into the same fridge.

Please note that the solution does not use `cin`, `cout`, `printf()`, or `scanf()` as per the challenge requirements, and it should be quite efficient due to the use of sorting and a single pass through the data.
