---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

struct Reactiv {
    int min_temp;
    int max_temp;
};

int main() {
    std::ifstream in("reactivi.in");
    std::ofstream out("reactivi.out");

    // Reading the number of reagents
    int N;
    in >> N;

    // Creating a vector to store the reagents with their temperature ranges
    std::vector<Reactiv> reagents(N);
    for (int i = 0; i < N; ++i) {
        in >> reagents[i].min_temp >> reagents[i].max_temp;
    }

    // Sorting the reagents based on their maximum temperature
    std::sort(reagents.begin(), reagents.end(), [](const Reactiv& a, const Reactiv& b) {
        return a.max_temp < b.max_temp;
    });

    // Counting the minimum number of refrigerators needed
    int fridge_count = 0;
    int current_max_temp = -101; // Temperature lower than the minimum possible
    for (const auto& reagent : reagents) {
        if (reagent.min_temp > current_max_temp) {
            ++fridge_count;
            current_max_temp = reagent.max_temp;
        }
    }

    // Writing the result to the output file
    out << fridge_count;

    // Closing the files
    in.close();
    out.close();

    return 0;
}
```

This C++ solution reads the data from `reactivi.in`, calculates the minimum number of refrigerators required to store the reagents by sorting the reagents based on their maximum temperature and then using a greedy algorithm to optimize the number of refrigerators needed. Finally, it writes the result to `reactivi.out`.
