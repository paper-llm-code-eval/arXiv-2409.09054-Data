---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `reactivi.in` and write to `reactivi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Într-un laborator de analize chimice se utilizează $N$ reactivi. Se știe că, pentru a evita accidentele sau deprecierea reactivilor, aceștia trebuie să fie stocați în condiții de mediu speciale. Mai exact, pentru fiecare reactiv $x$, se precizează intervalul de temperatură $[min_x, max_x]$ în care trebuie să se încadreze temperatura de stocare a acestuia.

Reactivii vor fi plasați în frigidere. Orice frigider are un dispozitiv cu ajutorul căruia putem stabili temperatura (constantă) care va fi in interiorul acelui frigider (exprimată într-un număr întreg de grade Celsius).

# Cerință
Scrieți un program care să determine numărul minim de frigidere necesare pentru stocarea reactivilor chimici.

# Date de intrare
Fișierul de intrare `reactivi.in` conține:
- pe prima linie numărul natural $N$, care reprezintă numărul de reactivi;
- pe fiecare dintre următoarele $N$ linii se află $min$ și $max$, două numere întregi separate printr-un spațiu; numerele de pe linia $x+1$ din fișier reprezintă temperatura minimă, respectiv temperatura maximă de stocare a reactivului $x$.

# Date de ieșire
Fișierul de ieșire `reactivi.out` va conține o singură linie pe care este scris numărul minim de frigidere necesar.

# Restricții și precizări
- $1 \leq N \leq 8\ 000$
- $-100 \leq min_x \leq max_x \leq 100$ (numere întregi, reprezentând grade Celsius), pentru orice $x$ de la $1$ la $N$
- Un frigider poate conține un număr nelimitat de reactivi.

---

Example:
`reactivi.in`
```
3
-10 10
-2 5
20 50
```

`reactivi.out`
```
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

struct Reactiv {
    int min, max;
};

bool compareReactivi(const Reactiv& a, const Reactiv& b) {
    return a.max < b.max;
}

int main() {
    std::ifstream in("reactivi.in");
    std::ofstream out("reactivi.out");
    
    int N;
    in >> N;
    
    std::vector<Reactiv> reactivi(N);
    
    for (int i = 0; i < N; ++i) {
        in >> reactivi[i].min >> reactivi[i].max;
    }
    
    std::sort(reactivi.begin(), reactivi.end(), compareReactivi);
    
    int frigidere = 0;
    int currentMax = -101;
    
    for (const auto& reactiv : reactivi) {
        if (reactiv.min > currentMax) {
            currentMax = reactiv.max;
            ++frigidere;
        }
    }
    
    out << frigidere << "\n";
    
    in.close();
    out.close();
    
    return 0;
}
```

This solution uses file streams to read and write data, a `struct` to store the information about each reactiv, sorting based on the maximum temperature, and a greedy algorithm to find the minimum number of fridges.
