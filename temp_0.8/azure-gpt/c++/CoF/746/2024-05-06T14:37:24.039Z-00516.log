---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `scara.in` and write to `scara.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ion şi-a construit o vilă pe frumosul vârf al unui munte. Acum proiectează o scară specială, pe care va urca de la şosea până la vilă. Diferenţa de nivel dintre şosea şi vilă este $H$ (deci aceasta trebuie să fie înălţimea totală a scării). Scara va avea $N$ trepte, toate de aceeaşi lăţime, dar de înălţimi distincte două câte două.

Ion a sesizat că efortul pe care îl depune pentru a urca o treaptă este egal cu înălţimea treptei. Dar dacă el urcă $x$ trepte deodată, efortul depus este egal cu media aritmetică a înălţimilor acestor $x$ trepte pe care le urcă deodată + un efort de valoare constantă $p$ (necesar pentru a-şi lua avânt). 

Fiind un tip atletic, Ion poate urca mai multe trepte deodată, dar suma înălţimilor treptelor urcate deodată nu trebuie să depăşească o valoare maximă $M$.

# Cerinţă

Scrieţi un program care să determine efortul minim necesar pentru a urca pe o scară construită conform restricţiilor problemei, precum şi o modalitate de a construi scara care va fi urcată cu efort minim.

# Date de intrare


Fişierul de intrare `scara.in` va conţine pe prima linie $4$ numere naturale separate prin câte un spaţiu $H \ N \ M \ p$ (cu semnificaţia din enunţ).

# Date de ieșire


Fişierul de ieşire `scara.out` va conţine 
- pe prima linie va fi scris efortul minim necesar (cu $2$ zecimale cu rotunjire);
- pe cea de a doua linie vor fi scrise $N$ numere naturale nenule care reprezintă înălţimile celor $N$ trepte ale scării (în ordinea de la şosea către vilă), separate prin câte un spaţiu. 


# Restricții și precizări

* $0 < H \leq 75$
* $0 < N \leq 8$
* $0 < M < 14$
* $0 \leq p \leq 10$
* Pentru datele de test, problema are întodeauna soluţie. 
* Dacă există mai multe soluţii (modalităţi de a construi scara astfel încât să obţineţi efortul minim dorit), veţi afişa prima soluţie în ordine lexicografică.
* Spunem că vectorul $x=(x_1, x_2, ..., x_k)$ precedă în ordine lexicografică vectorul $y=(y_1, y_2, ..., y_k)$ dacă există $i \geq 1$ astfel încât $x_j=y_j$, pentru orice $j<i$ şi $x_i<y_i$.
* Dacă a doua zecimală a efortului minim este $0$, sau chiar ambele zecimale sunt $0$ nu este necesar să le afişaţi. Deci în exemplu s-ar fi putut scrie efortul minim $9$ sau $9.0$.
* Se acordă $40\%$ din punctaj pentru prima cerinţă (efortul minim).
* Dacă efortul minim este corect şi se afişează şi o soluţie corectă (care respectă restricţiile problemei şi corespunde efortului minim), dar această soluţie nu este prima din punct de vedere lexicografic, se obţine $80\%$ din punctaj. Pentru rezolvarea corectă şi completă a ambelor cerinţe se obţine $100\%$ din punctaj.

---

Example:
`scara.in`
```
10 4 5 2
```

`scara.out`
```
9.00
1 4 2 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <limits>

using namespace std;

int H, N, M, p;
vector<int> steps;
double min_effort = numeric_limits<double>::max();
vector<int> best_steps;

void calculate_effort(const vector<int>& heights) {
    double effort = 0;
    int cumulative_height = 0;
    for (int i = 0; i < heights.size(); ++i) {
        cumulative_height += heights[i];
        if (cumulative_height > M) {
            return; // Not a valid sequence of steps
        }
        effort += (cumulative_height / (i + 1.0)) + p;
        cumulative_height = 0;
    }
    if (effort < min_effort) {
        min_effort = effort;
        best_steps = heights;
    }
}

void generate_steps(int current_height, vector<int>& heights) {
    if (current_height == H && heights.size() == N) {
        calculate_effort(heights);
        return;
    }
    if (heights.size() >= N) {
        return; // Too many steps
    }

    for (int next_step = 1; next_step <= M; ++next_step) {
        if (find(heights.begin(), heights.end(), next_step) == heights.end()) {
            // Use next_step only if it's not already in heights
            heights.push_back(next_step);
            generate_steps(current_height + next_step, heights);
            heights.pop_back();
        }
    }
}

int main() {
    ifstream in("scara.in");
    ofstream out("scara.out");

    in >> H >> N >> M >> p;
    vector<int> current_steps;
    generate_steps(0, current_steps);

    out << fixed << setprecision(2) << min_effort << endl;
    for (int i = 0; i < N; ++i) {
        out << best_steps[i] << (i < N - 1 ? ' ' : '\n');
    }

    in.close();
    out.close();
    
    return 0;
}
```
This C++ solution is based on backtracking. It generates all possible valid stair height configurations and calculates the effort for each configuration. It keeps track of the minimum effort and the associated stair heights configuration. It outputs the minimum effort and the lexicographically first solution.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 4 5 2
```
Expected output:
```
9.00
1 4 2 3
```
Found output:
```
12.00
1 2 3 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the provided code and the results, it appears there are a few issues to address:

1. The `calculate_effort()` function does not correctly calculate the effort considering the rules provided. It is not correctly implementing the scenario where Ion can skip steps and sum their heights up to `M`, and it is adding the constant `p` every time, which should only be done when more than one step is taken at a time.

2. The `generate_steps()` function is not correctly generating the steps as it allows for the total height to exceed the limit `H`, which is invalid.

3. The provided code does not ensure that the solution with the minimum effort is the first lexicographically.

Let's fix these issues and rewrite the solution. Here is the corrected code:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <limits>

using namespace std;

int H, N, M, p;
double min_effort = numeric_limits<double>::max();
vector<int> best_steps;

// Function to calculate the effort to climb the staircase with the given configuration.
void calculate_effort(const vector<int>& heights) {
    double effort = 0.0;
    int sum_heights = 0, steps_taken = 0;

    for (int height : heights) {
        sum_heights += height;
        steps_taken++;
        if (sum_heights > M) {
            // Reset the climb if we exceed the maximum height that can be climbed at once.
            sum_heights = height;
            steps_taken = 1;
        }
        // Add the average height of steps taken plus the constant effort p if more than one step is climbed.
        effort += (steps_taken == 1 ? height : (sum_heights / static_cast<double>(steps_taken) + p));
    }

    if (effort < min_effort || (effort == min_effort && lexicographical_compare(heights.begin(), heights.end(), best_steps.begin(), best_steps.end()))) {
        min_effort = effort;
        best_steps = heights;
    }
}

// Recursive function to generate all possible valid stair configurations.
void generate_steps(int current_height, vector<int>& heights) {
    if (current_height == H && heights.size() == N) {
        calculate_effort(heights);
        return;
    }
    if (current_height >= H || heights.size() >= N) {
        return; // We've reached or exceeded the total height or number of steps.
    }

    // Generate the next step height.
    for (int next_step = 1; next_step <= H - current_height; ++next_step) {
        if (find(heights.begin(), heights.end(), next_step) == heights.end()) {
            // Use next_step only if it's not already in heights.
            heights.push_back(next_step);
            generate_steps(current_height + next_step, heights);
            heights.pop_back();
        }
    }
}

int main() {
    ifstream in("scara.in");
    ofstream out("scara.out");

    in >> H >> N >> M >> p;
    vector<int> current_steps;
    generate_steps(0, current_steps);

    out << fixed << setprecision(2) << min_effort << '\n';
    for (int height : best_steps) {
        out << height << ' ';
    }
    out << '\n';

    in.close();
    out.close();

    return 0;
}
```

This solution fixes the calculation of the effort and ensures that the generated steps do not exceed the total height `H`. It also compares lexicographically to ensure that the first solution in lexicographical order is selected in case of a tie in effort.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 4 5 2
```
Expected output:
```
9.00
1 4 2 3
```
Found output:
```
11.00
1 3 2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution still isn't correctly calculating the minimum effort required to climb the stairs, as it is not taking into account the possibility of Ion skipping steps. The algorithm must be re-implemented with the correct logic to accommodate this.

Let's rewrite the solution with a state-space search that correctly calculates the minimum effort and the corresponding step heights. We will use dynamic programming to store intermediate results and to avoid recalculating efforts for the same states.

Here is the corrected code:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iomanip>

using namespace std;

const int MAX_H = 75;
const int MAX_N = 8;
double dp[MAX_H + 1][1 << MAX_N];  // dp[height][steps pattern] stores minimum effort to reach a certain height with a set of steps

struct Staircase {
    double effort;
    vector<int> steps;
};

int H, N, M, p;

// Function to calculate the average height and add the effort of taking multiple steps.
inline double calculate_effort(int sum_heights, int steps_taken) {
    if (steps_taken == 1) return sum_heights;
    return sum_heights / static_cast<double>(steps_taken) + p;
}

// Recursive function to explore the stair configurations and store the minimum effort.
double find_min_effort(int total_height, int step_pattern, vector<int>& heights) {
    if (total_height >= H) return 0; // Reached or exceeded the goal height.
    if (dp[total_height][step_pattern] >= 0) return dp[total_height][step_pattern];

    double min_eff = INFINITY;
    int sum_heights = 0, steps_taken = 0;

    for (int i = 0; i < N; ++i) {
        if (!(step_pattern & (1 << i))) {
            int new_step_height = i + 1; // Step heights are 1-indexed.
            if (sum_heights + new_step_height <= M) {
                sum_heights += new_step_height;
                steps_taken++;
                step_pattern |= (1 << i);
                heights.push_back(new_step_height);

                double effort = calculate_effort(sum_heights, steps_taken) + find_min_effort(total_height + new_step_height, step_pattern, heights);
                if (effort < min_eff) {
                    min_eff = effort;
                }

                // Backtrack
                step_pattern &= ~(1 << i);
                heights.pop_back();
                sum_heights -= new_step_height;
                steps_taken--;
            }
        }
    }

    dp[total_height][step_pattern] = min_eff;
    return min_eff;
}

int main() {
    ifstream in("scara.in");
    ofstream out("scara.out");

    in >> H >> N >> M >> p;

    // Initialize the dynamic programming table with -1 (unvisited states).
    for (int i = 0; i <= H; ++i) {
        for (int j = 0; j < (1 << N); ++j) {
            dp[i][j] = -1;
        }
    }

    vector<int> heights;
    double min_effort = find_min_effort(0, 0, heights);

    // Output the minimum effort and the corresponding stairs configuration.
    out << fixed << setprecision(2) << min_effort << '\n';
    sort(heights.begin(), heights.end()); // The steps need to be sorted to ensure lexicographical order.
    for (size_t i = 0; i < heights.size(); ++i) {
        out << heights[i] << (i < heights.size() - 1 ? ' ' : '\n');
    }

    in.close();
    out.close();

    return 0;
}
```
This solution introduces a dynamic programming approach where `dp[height][steps pattern]` represents the minimum effort required to reach a certain height with a given set of steps taken. The solution also ensures that the step heights are sorted to provide the lexicographically first solution.

Please note that the above code uses a top-down approach and might need further optimization for larger input sizes. However, given the constraints of the problem, the solution should work as expected.
---------- user ----------


Program result did not match expected result.
Input data:
```
10 4 5 2
```
Expected output:
```
9.00
1 4 2 3
```
Found output:
```
10.00
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution has several issues:

1. The solution is using dynamic programming with the assumption that Ion can skip steps, but it's not taking into account the possibility of merging multiple steps into a single effort if the sum of the heights does not exceed `M`.
2. The heights are sorted before output, which is incorrect because the lexicographically first solution might have steps in a different order.
3. The solution is not storing the resulting set of steps that lead to the minimum effort.

Let's fix these issues and implement a backtracking solution that considers all possible combinations of steps and their corresponding efforts. Here is the corrected solution:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <iomanip>
#include <cmath>

using namespace std;

ifstream in("scara.in");
ofstream out("scara.out");

int H, N, M, p;
vector<int> best_steps;
double min_effort = INFINITY;

// Function to check if a given combination of steps has the minimum effort.
void check_steps(const vector<int>& steps) {
    double effort = 0;
    double height_sum = 0;
    int steps_count = 0;

    for (int i = 0; i < N; ++i) {
        height_sum += steps[i];
        steps_count++;
        // If the sum of heights is greater than M, or it's the last step, calculate the effort.
        if (height_sum > M || i == N - 1) {
            // Subtract the last step if the height sum exceeded M.
            if (height_sum > M) {
                height_sum -= steps[i];
                steps_count--;
                i--;
            }
            effort += steps_count > 1 ? (height_sum / steps_count) + p : steps[i];
            // Reset the sum and count for the next sequence of steps.
            height_sum = 0;
            steps_count = 0;
        }
    }

    // Update the minimum effort and best steps if a better combination is found.
    if (effort < min_effort || (abs(effort - min_effort) < 1e-6 && lexicographical_compare(steps.begin(), steps.end(), best_steps.begin(), best_steps.end()))) {
        min_effort = effort;
        best_steps = steps;
    }
}

// Recursive function to generate all possible valid configurations of steps.
void generate_steps(int current_height, vector<int> &steps) {
    if (current_height == H && steps.size() == N) {
        check_steps(steps);
        return;
    } else if (current_height > H || steps.size() > N) {
        return; // We've reached or exceeded the total height or the number of steps.
    }

    // Try adding different step heights.
    for (int next_step = 1; next_step <= M; ++next_step) {
        if (find(steps.begin(), steps.end(), next_step) == steps.end()) { // Ensure step heights are distinct.
            steps.push_back(next_step);
            generate_steps(current_height + next_step, steps);
            steps.pop_back(); // Backtracking.
        }
    }
}

int main() {
    in >> H >> N >> M >> p;

    vector<int> steps;
    generate_steps(0, steps);

    out << fixed << setprecision(2) << min_effort << '\n';
    for (int height : best_steps) {
        out << height << ' ';
    }
    out << '\n';

    in.close();
    out.close();

    return 0;
}
```

This solution uses backtracking to explore all possible step configurations while ensuring distinct step heights. It calculates the effort to climb each configuration and keeps track of the minimum effort and the corresponding steps. The output is then the configuration with the minimum effort, and in case of a tie, it chooses the lexicographically first one.
