---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <string>

// Function to convert character digit to integer
inline int charToDigit(char c) {
    return c - '0';
}

// Function to calculate the greatest common divisor
int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    std::ifstream fin("numar.in");
    std::ofstream fout("numar.out");

    int ni, nz;
    fin >> ni >> nz;
    fin.ignore(); // Ignore the newline after reading ni and nz

    std::string integerPart, fractionalPart;
    char digit;
    // Read the integer part
    for (int i = 0; i < ni; ++i) {
        fin >> digit;
        fin.ignore(); // Ignore the space or newline
        integerPart.push_back(digit);
    }

    // Read the fractional part
    for (int i = 0; i < nz; ++i) {
        fin >> digit;
        fin.ignore(); // Ignore the space or newline
        fractionalPart.push_back(digit);
    }

    // Combine integer and fractional parts into one number
    std::string combined = integerPart + fractionalPart;
    
    // Convert combined number into integer
    long long numerator = 0;
    for (char c : combined) {
        numerator = numerator * 10 + charToDigit(c);
    }

    // Calculate denominator as 10 to the power of nz (number of fractional digits)
    long long denominator = 1;
    for (int i = 0; i < nz; ++i) {
        denominator *= 10;
    }

    // Simplify the fraction
    int commonDivisor = gcd(numerator, denominator);
    numerator /= commonDivisor;
    denominator /= commonDivisor;

    // Output the result
    fout << std::to_string(numerator).length() << '\n' << numerator << '\n';
    fout << std::to_string(denominator).length() << '\n' << denominator << '\n';

    fin.close();
    fout.close();
    return 0;
}
```
This C++ program reads input from "numar.in", calculates the fraction, and writes the output to "numar.out" following the given specification. It avoids using `cin`, `cout`, `printf()`, and `scanf()`, and instead uses file streams for input and output. Also, it uses the greatest common divisor to simplify the fraction to its lowest terms and to ensure that the difference between numerator and denominator is minimized.
