---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `numar.in` and write to `numar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un număr raţional strict pozitiv $q$, sub formă de fracţie zecimală.

# Cerință

Să se determine două numere naturale $a$ şi $b$ astfel încât $q = a / b$, iar modulul diferenţei dintre $a$ şi $b$ să fie minim.

# Date de intrare


Fişierul `numar.in` conţine:

* pe prima linie două valori naturale $ni$ şi $nz$. $ni$ reprezintă numărul de cifre care formeaza partea întreagă a lui $q$ iar $nz$ reprezintă numărul de cifre care formează partea fracţionara a lui $q$.
* pe a doua linie, $ni$ cifre care reprezintă partea întreagă a lui $q$. Între două cifre se află câte un caracter spaţiu.
* pe a treia linie, $nz$ cifre care reprezintă partea zecimală a lui $q$. Între două cifre se află câte un caracter spaţiu.


# Date de ieșire


Fişierul `numar.out` va conţine:

* pe prima linie un număr natural $n_1$ care reprezintă numărul de cifre din care este alcătuit numărul $a$;
* pe a doua linie, cifrele numărului $a$, fără spaţiu între ele.
* pe a treia linie un număr natural $n_2$ care reprezintă numărul de cifre din care este alcătuit numărul $b$;
* pe a patra linie, cifrele numarului $b$, fără spaţiu între ele.


# Restricții și precizări

* $1 \leq ni, nz < 2 \ 000$.
* $1 \leq ni + nz \leq 2 \ 000$.
* Cifrele din care este alcătuit $q$ sunt cele din sistemul zecimal.
* Pentru $20$% dintre teste, $ni + nz \leq 9$; pentru alte $15$% dintre teste, $10 \leq ni + nz \leq 16$.

---

Example:
`numar.in`
```
1 3
0
3 7 5
```

`numar.out`
```
1
3
1
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>

using namespace std;

long long GCD(long long a, long long b) {
    while (b != 0) {
        long long t = b;
        b = a % b;
        a = t;
    }
    return a;
}

int main() {
    ifstream fin("numar.in");
    ofstream fout("numar.out");

    int ni, nz;
    fin >> ni >> nz;
    fin.ignore(); // ignore the newline after reading nz

    string integerPart, fractionPart, combined;
    for (int i = 0; i < ni; ++i) {
        int digit;
        fin >> digit;
        integerPart += char('0' + digit);
        combined += char('0' + digit);
        fin.ignore(); // ignore space between digits
    }

    for (int i = 0; i < nz; ++i) {
        int digit;
        fin >> digit;
        fractionPart += char('0' + digit);
        combined += char('0' + digit);
        fin.ignore(); // ignore space between digits
    }

    // a = combined, b = 10^nz
    long long a = stoll(combined);
    long long b = pow(10, nz);

    // Simplify the fraction by dividing both a and b by their gcd
    long long gcd = GCD(a, b);
    a /= gcd;
    b /= gcd;

    // Write results to numar.out
    fout << to_string(a).length() << '\n';
    fout << a << '\n';
    fout << to_string(b).length() << '\n';
    fout << b << '\n';

    fin.close();
    fout.close();

    return 0;
}
```

This solution reads the number of digits for the integer and fractional parts from `numar.in`, then builds the entire number as a string, which is then converted to a `long long` integer. It calculates the denominator as 10 to the power of the number of fractional digits. After simplifying the fraction by dividing by their greatest common divisor (GCD), it writes the lengths and values of the numerator and denominator to `numar.out`. The code avoids using `cin`, `cout`, `printf()`, and `scanf()` for IO operations, complying with the challenge constraints.
