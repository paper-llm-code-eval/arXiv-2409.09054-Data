{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/848/2024-05-06T17:13:03.575Z-05760.log",
  "attemptStart": 1715015583.575,
  "attemptEnd": 1715015610.741,
  "attemptDuration": 27.16599988937378,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 500;\nint board[MAXN][MAXN];\nbool visited[MAXN][MAXN];\nint N, M, startX, startY, task;\nint dirX[5] = {0, 0, -1, 0, 1};\nint dirY[5] = {0, 1, 0, -1, 0};\n\nbool isValid(int x, int y) {\n    return x >= 0 && x < N && y >= 0 && y < M;\n}\n\nint getPoints(int x, int y) {\n    fill(&visited[0][0], &visited[0][0] + sizeof(visited) / sizeof(bool), false);\n    int uniqueCells = 0;\n    while (true) {\n        if (!isValid(x, y)) {\n            return uniqueCells;\n        }\n        if (visited[x][y]) {\n            return uniqueCells * 1000;\n        }\n        uniqueCells++;\n        visited[x][y] = true;\n        int arrow = board[x][y];\n        x += dirX[arrow];\n        y += dirY[arrow];\n    }\n}\n\nint main() {\n    ifstream fin(\"arrows.in\");\n    ofstream fout(\"arrows.out\");\n\n    fin >> task >> N >> M;\n\n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < M; ++j) {\n            fin >> board[i][j];\n        }\n    }\n\n    if (task == 1) {\n        fin >> startX >> startY;\n        fout << getPoints(startX - 1, startY - 1) << '\\n';\n    } else if (task == 2) {\n        int favorable = 0;\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < M; ++j) {\n                if (getPoints(i, j) >= 1000) {\n                    favorable++;\n                }\n            }\n        }\n        fout << favorable << '\\n';\n    } else if (task == 3) {\n        int maxScore = 0;\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < M; ++j) {\n                maxScore = max(maxScore, getPoints(i, j));\n            }\n        }\n        fout << maxScore << '\\n';\n    }\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1750,
  "metadata": {
    "id": 848,
    "examples": [
      {
        "in": "1\n6 5\n3 1 1 4 2\n1 2 4 3 1\n4 2 1 1 4\n1 2 3 3 3\n3 1 4 4 4\n2 2 3 4 2\n5 5",
        "out": "2000",
        "explainer": ""
      },
      {
        "in": "2\n6 5\n3 1 1 4 2\n1 2 4 3 1\n4 2 1 1 4\n1 2 3 3 3\n3 1 4 4 4\n2 2 3 4 2\n5 5",
        "out": "23",
        "explainer": ""
      },
      {
        "in": "3\n6 5\n3 1 1 4 2\n1 2 4 3 1\n4 2 1 1 4\n1 2 3 3 3\n3 1 4 4 4\n2 2 3 4 2\n5 5",
        "out": "16000",
        "explainer": ""
      }
    ],
    "body": "“Arrows” este un joc care se joacă pe o tablă dreptunghiulară a cărei suprafață este împărțită în $N \\cdot M$ celule, aranjate pe $N$ linii și $M$ coloane. În fiecare celulă se află o săgeată (sus, jos, stânga sau dreapta), ca în figura de mai jos:\n\n~[arrows.png]\n\nCând este la mutare, un jucător poate alege o poziție de start pe care plasează un jeton, apoi deplasează jetonul la celula învecinată în sensul indicat de săgeată. Deplasarea continuă până când jetonul părăsește tabla de joc, caz în care jucătorul obține un punctaj egal cu numărul de celule parcurse de jetonul său.\nExistă însă poziții de start denumite favorabile, pentru care jetonul **nu** va părăsi niciodată tabla de joc. De exemplu, toate pozițiile din figură cu fundal gri sunt favorabile. Jucătorul care alege o poziție de start favorabilă obține un punctaj egal cu numărul de celule distincte vizitate înmulțit cu $1000$.\n\nScrieți un program care, cunoscând configurația tablei de joc, rezolvă una dintre următoarele cerințe:\n\n1. determină punctajul pe care îl obține un jucător care plasează jetonul său pe o poziție de start specificată;\n2. determină numărul de celule favorabile de pe tabla de joc;\n3. determină punctajul maxim pe care jucătorul îl poate obține la o mutare, alegând convenabil poziția de start.\n\n# Date de intrare\n\nFișierul de intrare `arrows.in` conține pe prima linie cerința care trebuie să fie rezolvată ($1, 2$ sau $3$). Pe a doua linie se află numerele naturale $N \\ M$, care reprezintă numărul de linii și respectiv de coloane de pe tabla de joc. Pe următoarele $N$ linii se află câte $M$ numere din mulțimea {$1,2,3,4$} reprezentând săgețile aflate în celulele de pe tabla de joc ($1$ semnificând săgeata la dreapta, $2$ săgeata în sus, $3$ săgeata la stânga și $4$ săgeata în jos). Pe ultima linie sunt scrise numerele naturale $lin \\ col$, reprezentând linia și coloana pe care se află poziția de start specificată. Valorile scrise pe aceeași linie în fișierul de intrare sunt separate prin spații.\n\n# Date de ieșire\n\nFișierul de ieșire `arrows.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul pentru cerința specificată pe prima linie a fișierului de intrare.\n\n# Restricții și precizări\n\n* $1 \\leq N, M \\leq 500$;\n* Liniile sunt numerotate de la $1$ la $N$, iar coloanele de la $1$ la $M$.\n* Pentru teste valorând $20$ de puncte cerința este $1$. Pentru teste valorând $40$ de puncte cerința este $2$. Pentru celelalte teste, valorând de asemenea $40$ de puncte, cerința este $3$.",
    "header": {
      "problem_id": 848,
      "problem_name": "arrows",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 6,
      "console_input": false,
      "input_filename": "arrows.in",
      "output_filename": "arrows.out",
      "multiple_solutions": false,
      "original_source": "OJI 2014 VIII: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "arrows.in",
      "output": "arrows.out"
    },
    "consoleInteraction": false
  }
}