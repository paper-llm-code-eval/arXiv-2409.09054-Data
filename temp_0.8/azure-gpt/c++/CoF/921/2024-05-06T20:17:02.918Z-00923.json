{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/921/2024-05-06T20:17:02.918Z-00923.log",
  "attemptStart": 1715026622.918,
  "attemptEnd": 1715026638.12,
  "attemptDuration": 15.20199990272522,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nint countDivisors(int x) {\n  int count = 0;\n  for (int i = 1; i * i <= x; ++i) {\n    if (x % i == 0) {\n      count += 2;\n      if (i * i == x) count -= 1;\n    }\n  }\n  return count;\n}\n\nint main() {\n  ifstream fin(\"forta.in\");\n  ofstream fout(\"forta.out\");\n\n  int c, n;\n  fin >> c >> n;\n\n  vector<pair<int, int>> nums(n);\n  for (int i = 0; i < n; ++i) {\n    fin >> nums[i].second;\n    nums[i].first = countDivisors(nums[i].second);\n  }\n\n  if (c == 1) {\n    sort(nums.begin(), nums.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n      return a.first > b.first || (a.first == b.first && a.second < b.second);\n    });\n    fout << nums[0].second << '\\n';\n  }\n  else if (c == 2) {\n    unordered_map<int, int> forceCounts;\n    int maxLength = 0;\n    for (const auto& num : nums) {\n      forceCounts[num.first]++;\n      maxLength = max(maxLength, forceCounts[num.first]);\n    }\n    fout << maxLength << '\\n';\n  }\n\n  fin.close();\n  fout.close();\n  return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1136,
  "metadata": {
    "id": 921,
    "examples": [
      {
        "in": "1\n6\n17 243 10 32 25 13",
        "out": "32",
        "explainer": ""
      },
      {
        "in": "2\n8\n121 10 14 25 49 9 25 15",
        "out": "5",
        "explainer": ""
      }
    ],
    "body": "Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \\{1,2,5,10\\}$.\n\nScrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:\n\n1. determină cel mai mic număr din șir care are forța maximă;\n2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.\n\n# Date de intrare\n\n\nFișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.\n\n\n# Date de ieșire\n\n\nFișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.\n\n\n# Restricții și precizări\n\n* $1 \\leq n \\leq 100 \\ 000$;\n* $1 \\leq$ numerele din șir $\\leq 2 \\cdot 10^9$;\n* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.\n* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.\n* Pentru teste valorând $30$ de puncte $1 \\leq n \\leq 10 \\ 000$",
    "header": {
      "problem_id": 921,
      "problem_name": "forta",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.5,
      "memory_limit_mb": 16,
      "console_input": false,
      "input_filename": "forta.in",
      "output_filename": "forta.out",
      "multiple_solutions": false,
      "original_source": "OJI 2020 VI: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "16m",
    "filename": {
      "input": "forta.in",
      "output": "forta.out"
    },
    "consoleInteraction": false
  }
}