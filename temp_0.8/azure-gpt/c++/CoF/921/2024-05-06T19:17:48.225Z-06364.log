---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <unordered_map>

using namespace std;

int countDivisors(int n) {
    int count = 0;
    for (int i = 1; i <= n / i; ++i) {
        if (n % i == 0) {
            count += (n / i == i) ? 1 : 2;
        }
    }
    return count;
}

int main() {
    ifstream fin("forta.in");
    ofstream fout("forta.out");

    int c, n;
    fin >> c;
    fin >> n;

    vector<int> numbers(n);
    unordered_map<int, int> forceMap;
    unordered_map<int, vector<int>> forceNumbers;

    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
        int force = countDivisors(numbers[i]);
        forceMap[force]++;
        forceNumbers[force].push_back(numbers[i]);
    }

    if (c == 1) {
        int maxForce = 0, minNumber = INT_MAX;
        for (auto& kv : forceNumbers) {
            int force = kv.first;
            vector<int>& nums = kv.second;
            if (force > maxForce || (force == maxForce && *min_element(nums.begin(), nums.end()) < minNumber)) {
                maxForce = force;
                minNumber = *min_element(nums.begin(), nums.end());
            }
        }
        fout << minNumber << '\n';
    } else if (c == 2) {
        int maxLength = 0;
        for (auto& kv : forceMap) {
            maxLength = max(maxLength, kv.second);
        }
        fout << maxLength << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

This C++ program reads the input from `forta.in` and writes the output to `forta.out` as specified. It uses `ifstream` for input and `ofstream` for output instead of the forbidden `cin`, `cout`, `printf()`, and `scanf()`. It first reads the type of the query (1 or 2) and the number of elements in the array. Then, it reads the elements of the array and calculates the force for each number, updating a map that holds the count of numbers for each force value and a map that holds the actual numbers with their corresponding force. For query type 1, it finds the smallest number with the maximum force. For query type 2, it finds the maximum count of numbers with the same force, which represents the maximum length of a sequence of numbers with the same force.
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:38:39: error: 'INT_MAX' was not declared in this scope
   38 |         int maxForce = 0, minNumber = INT_MAX;
      |                                       ^~~~~~~
main.cpp:4:1: note: 'INT_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?
    3 | #include <algorithm>
  +++ |+#include <climits>
    4 | #include <unordered_map>

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
