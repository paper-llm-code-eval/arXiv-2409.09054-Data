---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

// Function to count the divisors of a number
int countDivisors(int n) {
    int count = 0;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            count += (n / i == i) ? 1 : 2;
        }
    }
    return count;
}

// Function to solve the first task
int task1(vector<int>& numbers) {
    int maxForce = 0;
    int minNumWithMaxForce = INT32_MAX;
    for (int number : numbers) {
        int force = countDivisors(number);
        if (force > maxForce) {
            maxForce = force;
            minNumWithMaxForce = number;
        } else if (force == maxForce) {
            minNumWithMaxForce = min(minNumWithMaxForce, number);
        }
    }
    return minNumWithMaxForce;
}

// Function to solve the second task
int task2(vector<int>& numbers) {
    map<int, int> forceFrequency;
    int maxFrequency = 0;
    for (int number : numbers) {
        int force = countDivisors(number);
        maxFrequency = max(maxFrequency, ++forceFrequency[force]);
    }
    return maxFrequency;
}

int main() {
    // Open files
    ifstream fin("forta.in");
    ofstream fout("forta.out");

    int c, n;
    fin >> c >> n;
    vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
    }

    if (c == 1) {
        fout << task1(numbers);
    } else {
        fout << task2(numbers);
    }

    // Close files
    fin.close();
    fout.close();

    return 0;
}
```

This code efficiently reads inputs from "forta.in", processes them according to the task required, and writes the output to "forta.out". It uses file streams instead of the standard I/O operations to comply with the challenge's requirements.

For task 1, we find the number with the maximum force and the minimum value within those with the same maximum force.

For task 2, we use a `map` to keep the frequency of each force value and find the maximum frequency, which corresponds to the longest sequence of numbers with the same force.

Note that for a more optimized version, the countDivisors function could be improved using a sieve-like algorithm to precalculate the divisors for a range of numbers. However, since the input numbers can be large (up to 2 * 10^9), such an optimization is not feasible for this challenge due to memory constraints.
