---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `forta.in` and write to `forta.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Forța unui număr natural nenul $X$ este egală cu numărul de divizori pozitivi ai lui $X$. De exemplu, numărul $X = 10$ are forţa $4$, deoarece $10$ are $4$ divizori, mulțimea divizorilor fiind $D_{10} = \{1,2,5,10\}$.

Scrieţi un program care, cunoscând un șir de $n$ numere naturale nenule, rezolvă următoarele cerințe:

1. determină cel mai mic număr din șir care are forța maximă;
2. determină lungimea maximă a unei secvențe formată din numere cu aceeași forţă ce poate fi obținută prin rearanjarea convenabilă a elementelor din șir.

# Date de intrare


Fișierul de intrare `forta.in` conține pe prima linie numărul $c$, care reprezintă cerința de rezolvat ($1$ sau $2$), pe a doua linie un număr natural $n$, iar pe următoarea linie $n$ numere naturale separate prin câte un spațiu, reprezentând elementele șirului.


# Date de ieșire


Fișierul de ieșire `forta.out` va conține o singură linie pe care va fi scris un număr natural reprezentând răspunsul la cerința $c$.


# Restricții și precizări

* $1 \leq n \leq 100 \ 000$;
* $1 \leq$ numerele din șir $\leq 2 \cdot 10^9$;
* O secvență este constituită dintr-un singur număr sau mai multe numere aflate pe poziții consecutive în șir. Lungimea unei secvențe este egală cu numărul de valori care o compun.
* Pentru prima cerință se acordă $50$ de puncte, iar pentru cea de a doua cerință se acordă $40$ de puncte.
* Pentru teste valorând $30$ de puncte $1 \leq n \leq 10 \ 000$

---

Example:
`forta.in`
```
1
6
17 243 10 32 25 13
```

`forta.out`
```
32
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

// Function that computes the number of divisors for a given number n
int countDivisors(int n) {
    int count = 0;
    for (int i = 1; i * i <= n; ++i) {
        if (n % i == 0) {
            count += (i * i == n) ? 1 : 2;
        }
    }
    return count;
}

// Main function
int main() {
    ifstream fin("forta.in");
    ofstream fout("forta.out");

    int c, n;
    fin >> c >> n;

    vector<int> numbers(n);
    unordered_map<int, int> strengthCount;  // Maps strength to its count
    unordered_map<int, int> minNumber;      // Maps strength to the smallest number with that strength
    int maxStrength = 0;
    int maxLength = 0;

    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
        int strength = countDivisors(numbers[i]);
        maxStrength = max(maxStrength, strength);

        // For task 1, keep track of the smallest number with the maximum strength seen so far
        if (minNumber[strength] == 0 || minNumber[strength] > numbers[i]) {
            minNumber[strength] = numbers[i];
        }

        // For task 2, count the occurrence of each strength
        strengthCount[strength]++;
        maxLength = max(maxLength, strengthCount[strength]);
    }

    fin.close();

    if (c == 1) {
        // Task 1: Output the smallest number with the maximum strength
        fout << minNumber[maxStrength] << '\n';
    } else {
        // Task 2: Output the maximum length of a sequence with the same strength
        fout << maxLength << '\n';
    }

    fout.close();
    return 0;
}
```
This code defines a function to calculate the number of divisors of a given number and uses hash tables to track the count and minimum number of each strength. Depending on the task `c`, it either outputs the smallest number with the maximum strength or the maximum length of a sequence with the same strength.
