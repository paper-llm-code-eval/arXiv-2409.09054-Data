---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <unordered_map>

int main() {
    std::ifstream fin("panglica.in");
    std::ofstream fout("panglica.out");

    int N, C;
    fin >> N >> C;

    std::vector<int> ribbon(N);
    std::unordered_map<int, std::pair<int, int>> color_positions;

    for (int i = 0; i < N; ++i) {
        fin >> ribbon[i];
        if (color_positions.find(ribbon[i]) == color_positions.end()) {
            color_positions[ribbon[i]] = {i, i};
        } else {
            color_positions[ribbon[i]].second = i;
        }
    }
    fin.close();

    int max_length = 0, start = 0, end = 0, color = 0;
    for (const auto& color_pos : color_positions) {
        int length = color_pos.second.second - color_pos.second.first + 1;
        if (length > max_length || (length == max_length && color_pos.second.first < start)) {
            max_length = length;
            start = color_pos.second.first;
            end = color_pos.second.second;
            color = color_pos.first;
        }
    }

    fout << max_length << '\n';
    fout << color << '\n';
    fout << start << '\n';
    fout << N - end - 1 << '\n';

    fout.close();

    return 0;
}
```
This solution uses file I/O with `fstream`, a vector to store the ribbon colors, and an unordered map to store first and last positions of each color. It iterates once over the ribbon to fill the data structures, then iterates over the map to find the longest segment with the same color at both ends. The output is written to `panglica.out`.
