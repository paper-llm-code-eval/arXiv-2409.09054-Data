---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `panglica.in` and write to `panglica.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel are o panglică alcătuită din benzi de $1 cm$ lăţime, colorate în diverse culori. Panglica are $N$ benzi, fiecare colorată cu una din $C$ culori, culori pe care le vom numerota de la $1$ la $C$. Gigel vrea ca la ambele capete ale panglicii să aibă aceeaşi culoare, dar cum nu poate schimba culorile benzilor, singura posibilitate rămâne tăierea unor bucăţi de la capete. 

# Cerință

Scrieţi un program care să determine modul de tăiere a panglicii astfel încât la cele două capete să fie benzi de aceeaşi culoare, iar lungimea panglicii obţinute să fie maximă.

# Date de intrare

Fişierul de intrare `panglica.in` conţine:

- pe prima linie numerele naturale $N$ şi $C$ separate printr-un spaţiu;
- pe următoarele $N$ linii descrierea panglicii: pe fiecare linie un număr natural de la $1$ la $C$, reprezentând în ordine culorile fâşiilor ce alcătuiesc panglica.

# Date de ieșire

Fişierul de ieşire `panglica.out` va conţine următoarele $4$ numere:

- pe prima linie numărul de fâşii rămase;
- pe linia a doua numărul culorii care se află la capete;
- pe linia a treia câte fâşii trebuie tăiate de la începutul panglicii iniţiale;
- pe linia a patra câte fâşii trebuie tăiate de la sfârşitul panglicii iniţiale

# Restricții și precizări

* $2 \leq N \leq 10 \ 000$;
* $1 \leq C \leq 200$;
* Dacă există mai multe soluţii alegeţi pe cea în care se taie cât mai puţin din partea de început a panglicii.

---

Example:
`panglica.in`
```
6 3
1
2
1
3
2
3
```

`panglica.out`
```
4
2
1
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    ifstream fin("panglica.in");
    ofstream fout("panglica.out");

    int N, C;
    fin >> N >> C;
    vector<int> panglica(N);
    vector<int> maxLength(C + 1, 0), startPos(C + 1, 0), endPos(C + 1, 0);
    
    for (int i = 0; i < N; ++i) {
        fin >> panglica[i];
        if (maxLength[panglica[i]] == 0)
            startPos[panglica[i]] = i;
        maxLength[panglica[i]] = i - startPos[panglica[i]] + 1;
        endPos[panglica[i]] = i;
    }

    int maxLen = 0, color = 0, startCut = 0, endCut = 0;
    for (int i = 1; i <= C; ++i) {
        if (maxLength[i] > maxLen) {
            maxLen = maxLength[i];
            color = i;
            startCut = startPos[i];
            endCut = N - endPos[i] - 1;
        } else if (maxLength[i] == maxLen && startPos[i] < startCut) {
            color = i;
            startCut = startPos[i];
            endCut = N - endPos[i] - 1;
        }
    }

    fout << maxLen << "\n" << color << "\n" << startCut << "\n" << endCut;
    fin.close();
    fout.close();
    return 0;
}
```

This solution uses file streams for I/O and a straightforward approach to find the longest sequence of the same color, and in case of ties, it prefers the one closer to the beginning. It avoids complex data structures for speed and uses an array to keep track of color sequences and their positions.
