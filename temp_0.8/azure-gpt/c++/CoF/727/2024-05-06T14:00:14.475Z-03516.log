---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `control.in` and write to `control.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Gigel a primit spre păstrare un set de $n$ cutii de greutăți nu neapărat distincte. El a cântărit cutiile și pentru fiecare greutate distinctă a notat pe o foaie, în ordine crescătoare a greutăților, numărul de cutii cu greutatea respectivă.

Deoarece fratele său mai mic avea prostul obicei să se joace cu numerele scrise de el pe foaie, Gigel s-a gândit să calculeze un „număr de control” după următorul algoritm: începând de la primul număr a grupat numerele de apariții ale greutăților câte trei (dacă îi rămân numere negrupate la sfârșit, le ignoră). Dacă într-un grup sunt numai numere pare sau numai impare notează grupul cu cifra $1$, altfel îl notează cu cifra $0$. Din șirul astfel obținut, se formează un număr care are ca valoare cifra zecilor egală cu numărul de valori $1$ și cifra unităților egală cu numărul de valori $0$, obținându-se astfel „numărul de control”.

# Cerință

Citind greutățile cutiilor, să se determine „numărul de control” și să se verifice dacă este număr prim.

# Date de intrare

De pe prima linie a fișierului de intrare `control.in` se citește numărul $n$. Pe fiecare dintre următoarele $n$ linii se găsește câte un număr natural reprezentând greutățile celor n cutii.

# Date de ieșire

În fișierul de ieșire `control.out` se va scrie pe prima linie „numărul de control”, urmat, pe linia a doua, de valoarea $0$ sau $1$. Pe linia a doua se va afișa $1$ dacă numărul este prim, respectiv $0$ în caz contrar.

# Restricții și precizări

* $1 \leq n \leq 100$;
* Fiecare greutate este un număr natural, mai mic sau egal cu $200$

---

Example:
`control.in`
```
21
1
3
2
6
2
6
2
8
9
8
8
9
10
8
11
18
11
12
14
15
17
```

`control.out`
```
31
1
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

bool is_prime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6)
        if (num % i == 0 || num % (i + 2) == 0)
            return false;
    return true;
}

int main() {
    std::ifstream in("control.in");
    std::ofstream out("control.out");

    int n;
    in >> n;

    std::vector<int> weights(201, 0);
    int weight;
    for (int i = 0; i < n; ++i) {
        in >> weight;
        ++weights[weight];
    }

    in.close();

    std::vector<int> counts;
    for (const auto &count : weights) {
        if (count > 0)
            counts.push_back(count);
    }

    int ones = 0, zeroes = 0;
    for (size_t i = 0; i + 2 < counts.size(); i += 3) {
        bool all_even = counts[i] % 2 == 0 && counts[i + 1] % 2 == 0 && counts[i + 2] % 2 == 0;
        bool all_odd = counts[i] % 2 == 1 && counts[i + 1] % 2 == 1 && counts[i + 2] % 2 == 1;
        if (all_even || all_odd)
            ++ones;
        else
            ++zeroes;
    }

    int control_number = ones * 10 + zeroes;
    out << control_number << '\n';
    out << is_prime(control_number);
    out.close();

    return 0;
}
```
This solution first reads weights from `control.in` and stores the counts of each weight in a vector. After processing the counts to determine the control number, it writes the control number and whether it is prime to `control.out`. The function `is_prime` checks if the given number is prime by checking divisibility up to the square root of the number.
