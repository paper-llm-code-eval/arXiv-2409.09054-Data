---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

std::vector<int> get_primes(int max_value) {
    std::vector<bool> sieve(max_value + 1, true);
    std::vector<int> primes;
    sieve[0] = sieve[1] = false;
    for (int i = 2; i * i <= max_value; ++i) {
        if (sieve[i]) {
            for (int j = i * i; j <= max_value; j += i) {
                sieve[j] = false;
            }
        }
    }
    for (int i = 2; i <= max_value; ++i) {
        if (sieve[i]) {
            primes.push_back(i);
        }
    }
    return primes;
}

int find_kth_prime_divisor(int number, int k, const std::vector<int>& primes) {
    int divisor_count = 0;
    for (int prime : primes) {
        while (number % prime == 0) {
            number /= prime;
            if (++divisor_count == k) {
                return prime;
            }
        }
        if (number == 1) break;
    }
    return -1; // Should not happen as it is guaranteed that k prime divisors exist.
}

int main() {
    std::ifstream in("cufar.in");
    std::ofstream out("cufar.out");

    int p, n;
    in >> p >> n;

    const int max_value = 1000000;
    auto primes = get_primes(max_value);

    if (p == 1) {
        int number, k;
        in >> number >> k;
        int value = find_kth_prime_divisor(number, k, primes);
        out << value << '\n';
    } else {
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            int number, k;
            in >> number >> k;
            sum += find_kth_prime_divisor(number, k, primes);
        }
        out << sum << '\n';
    }

    in.close();
    out.close();
    return 0;
}
```
This solution first generates all prime numbers up to 1,000,000 using Sieve of Eratosthenes, which is efficient for this range. It then finds the k-th prime divisor of a given number by dividing the number by the primes in sequence. Depending on the mode (p=1 or p=2), it either finds the k-th prime divisor for a single number or adds up the k-th prime divisors for multiple numbers and writes the sum to the output file.
