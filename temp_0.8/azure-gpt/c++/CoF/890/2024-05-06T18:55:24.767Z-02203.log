---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cufar.in` and write to `cufar.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Vrăjitoarea cea bună are un cufăr în care este închisă piatra magică de către piticii lăzii cu ajutorul unui cifru digital. Piticii i-au dat vrăjitoarei o cutie în care sunt $n$ cartonașe. Pe fiecare cartonaș este scris un număr natural pe care vrăjitoarea îl va folosi să deschidă lada. Valorile scrise pe cartonașe sunt distincte între ele.

Pentru a afla cifrul trebuie să procedeze astfel: extrage fiecare cartonaș din cutie și apoi determină valoarea magică asociată numărului natural scris pe cartonaș. Pentru fiecare cartonaș valoarea magică este dată de al $k$-lea divizor prim al numărului înscris pe acesta. Vrăjitoarea trebuie să adune valorile magice obținute pentru cele $n$ cartonașe și apoi să introducă în ordine cifrele valorii obținute, pentru a descuia lada.

# Cerințe
Deoarece vrăjitoarea nu are timp la dispoziție vă roagă pe voi să o ajutați să rezolve următoarele probleme:
1. Să afle valoarea magică pentru un cartonaș dat;
2. Să afle cifrul cufărului.

# Date de intrare
Fișierul de intrare este `cufar.in`.
Pe prima linie a fișierului de intrare se găsesc o valoare $p$ care poate fi doar $1$ sau $2$ și numărul $n$ de cartonașe despărțite prin câte un spațiu.

Dacă $p$ este $1$ pe linia a doua a fișierului de intrare se găsesc două valori reprezentând numărul de pe cartonașul dat și valoarea $k$, separate printr-un spațiu, cu semnificația de mai sus.

Dacă $p$ este $2$ pe următoarele $n$ linii ale fișierului de intrare se găsesc câte două valori, separate prin câte un spațiu, reprezentând numărul de pe cartonaș și valoarea lui $k$ pentru fiecare din cele $n$ cartonașe.

# Date de ieşire
Fișierul de ieșire este `cufar.out`.
Dacă valoarea lui $p$ este $1$, atunci se va rezolva **doar** cerința 1 și fișierul de ieșire va conține pe prima linie valoarea magică asociată cartonașului dat.
Dacă valoarea lui $p$ este $2$, atunci se va rezolva **doar** cerința 2 și fișierul de ieșire va conține pe prima linie cifrul necesar deschiderii cufărului.

# Restricţii și precizări
- $1 \leq n < 1\ 000\ 000$
- Valoarea înscrisă pe un cartonaș este un număr între $2$ și $1\ 000\ 000$.
- Se garantează că pentru fiecare pereche $(nr, k)$ din fișierul de intrare, $nr$ are cel puțin $k$ divizori primi.
- Pentru rezolvarea corectă a cerinței 1 se acordă 18 puncte.
- Pentru rezolvarea corectă a cerinței 2 se acordă 72 de puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 1\ 000$ se acordă 18 puncte.
- Pentru rezultate corecte la cerința a doua respectând restricțiile problemei și $n \leq 500\ 000$ se acordă 43 de puncte.
- Din oficiu se acordă 10 puncte.

---

Example:
`cufar.in`
```
1 1
30 3
```

`cufar.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <bitset>

using namespace std;

const int MAX = 1000000;
bitset<MAX + 1> prime;
vector<int> primes;

void SieveOfEratosthenes() {
    prime.set();
    prime[0] = prime[1] = 0;
    for (int p = 2; p * p <= MAX; ++p) {
        if (prime[p]) {
            for (int i = p * p; i <= MAX; i += p) prime[i] = 0;
        }
    }
    for (int p = 2; p <= MAX; ++p) {
        if (prime[p]) primes.push_back(p);
    }
}

int main() {
    SieveOfEratosthenes();

    ifstream in("cufar.in");
    ofstream out("cufar.out");

    int p, n;
    in >> p >> n;

    if (p == 1) {
        int x, k;
        in >> x >> k;
        int count = 0, primeFactor;
        for (int i = 0; i < primes.size() && primes[i] * primes[i] <= x; ++i) {
            if (x % primes[i] == 0) {
                while (x % primes[i] == 0) {
                    x /= primes[i];
                    count++;
                    if (count == k) {
                        primeFactor = primes[i];
                        break;
                    }
                }
            }
            if (count == k) break;
        }
        if (x > 1 && count < k) primeFactor = x;
        out << primeFactor;
    } else if (p == 2) {
        long long sum = 0;
        for (int i = 0; i < n; ++i) {
            int x, k, count = 0;
            in >> x >> k;
            for (int j = 0; j < primes.size() && primes[j] * primes[j] <= x; ++j) {
                if (x % primes[j] == 0) {
                    while (x % primes[j] == 0) {
                        x /= primes[j];
                        count++;
                        if (count == k) {
                            sum += primes[j];
                            break;
                        }
                    }
                }
                if (count == k) break;
            }
            if (x > 1 && count < k) sum += x; // last prime factor
        }
        out << sum;
    }

    in.close();
    out.close();

    return 0;
}
```

Explanation:
The solution includes a sieve function `SieveOfEratosthenes` that generates a list of prime numbers up to a given maximum using the Sieve of Eratosthenes algorithm. In the main function, it reads the `p` and `n` values from the input file `cufar.in`. Depending on the value of `p`, it solves either task 1 or task 2. For task 1, it finds the k-th prime factor of a single number `x`. For task 2, it sums up the k-th prime factors of `n` numbers and writes the sum to `cufar.out`. The solution avoids using slow I/O functions and opts for file streams for fast input and output operations.
