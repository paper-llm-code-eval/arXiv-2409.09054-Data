---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

int main() {
    std::ifstream in("telecabina.in");
    std::ofstream out("telecabina.out");

    int n, a, b, prevA, totalPeople = 0, totalFuel = 0, specialStations = 0;
    
    in >> n >> prevA >> b;
    totalPeople += b;
    
    // Track whether previous movement was upwards (true) or downwards (false)
    bool previousUpwards = true; 

    for (int i = 1; i < n; ++i) {
        in >> a >> b;
        if (a > prevA) {
            // Moving upwards
            totalFuel += 3 * (a - prevA);
            if (!previousUpwards) {
                // If previously moving downwards, this is a special station
                specialStations++;
                previousUpwards = true;
            }
        } else {
            // Moving downwards
            totalFuel += (prevA - a);
            if (previousUpwards) {
                // If previously moving upwards, this is a special station
                specialStations++;
                previousUpwards = false;
            }
        }
        totalPeople += b;
        prevA = a;
    }

    // Write results to the output file
    out << totalPeople << '\n' << totalFuel << '\n' << specialStations;

    // Close the files
    in.close();
    out.close();

    return 0;
}
```
This C++ solution reads from "telecabina.in" and writes to "telecabina.out" as required, without using `cin`, `cout`, `printf`, or `scanf`. It keeps track of the total number of people arriving in the city, the total fuel consumption, and the number of special stations by iterating through each station's altitude and number of people. The logic also accounts for changes in direction and classifies a station as special if it marks the transition from ascending to descending or vice versa.
