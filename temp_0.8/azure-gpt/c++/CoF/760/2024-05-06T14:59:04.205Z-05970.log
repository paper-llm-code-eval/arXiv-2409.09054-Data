---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `telecabina.in` and write to `telecabina.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

În Munții Apuseni, din cauza condițiilor meteo nefavorabile din ultimul timp, transportul pe drumurile publice a devenit o problemă. S-au surpat porțiuni din drum, s-au rupt poduri și podețe, au căzut pomi peste șosea si multe altele. Au rămas astfel grupuri de case izolate, oamenii nemaiputând ajunge la oraș pentru a-și procura cele necesare. Pentru a ajunge la oraș, oamenii au construit o telecabină care leagă regiunile izolate, telecabină care a fost proiectată suficient de încăpătoare, astfel încât, în fiecare moment să fie posibil să urce toți oamenii care se află într-o stație.
Pentru fiecare dintre cele n stații ale telecabinei se cunoaște altitudinea (exprimată în metri) și numărul de persoane care urcă în telecabină. De asemenea, se știe că telecabina consumă $3$ litri/m de combustibil la urcare și $1$ litru/m de combustibil la coborâre. Distanțele între stații se echivalează practic cu diferențele de altitudini dintre stații. O stație în care se schimbă felul de deplasare, din urcare se trece în coborâre sau invers se numește stație specială.

# Cerință

Scrieți un program care să determine câți oameni ajung la oraș cu telecabina, care este consumul telecabinei pentru transport și câte stații speciale există.

# Date de intrare


De pe prima linie a fișierului de intrare `telecabina.in` se citește valoarea $n$, reprezentând numărul de stații (inclusiv orașul). De pe următoarele n linii ale fișierului de intrare se citesc apoi $n$ perechi de numere naturale `a b`, câte o pereche pe linie, unde $a$ reprezintă altitudinea stației, iar $b$ numărul de oameni care urcă în telecabină în stația respectivă. Între $a$ și $b$ există exact un spațiu.


# Date de ieșire


Pe primul rând al fișierului de ieșire `telecabina.out` se va afișa numărul de oameni care ajung la oraș. Pe al doilea rând al fișierului se va afișa consumul telecabinei pentru transport. Pe al treilea rând al fișierului se va afișa numărul de stații speciale.

# Restricții și precizări

* $1 \leq n \leq 40$;
* $1 \leq a \leq 2 \ 000$;
* $0 \leq b \leq 20$;
* altitudinile oricăror două stații consecutive sunt diferite
* în ultima stație (la oraș) nu urcă nici o persoană

---

Example:
`telecabina.in`
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```

`telecabina.out`
```
23
43
2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>

int main() {
    std::ifstream in("telecabina.in");
    std::ofstream out("telecabina.out");

    int n;
    in >> n;

    std::vector<int> altitudes(n);
    std::vector<int> people(n);
    for (int i = 0; i < n; ++i) {
        in >> altitudes[i] >> people[i];
    }

    int total_people = 0;
    int total_fuel = 0;
    int special_stations = 0;
    bool is_ascending = altitudes[1] > altitudes[0];

    for (int i = 0; i < n - 1; ++i) {
        total_people += people[i];
        int dist = abs(altitudes[i + 1] - altitudes[i]);
        total_fuel += is_ascending ? dist * 3 : dist;

        bool next_is_ascending = i + 2 < n ? altitudes[i + 2] > altitudes[i + 1] : false;
        if (is_ascending != next_is_ascending) {
            special_stations++;
            is_ascending = next_is_ascending;
        }
    }

    total_people += people[n - 1];

    out << total_people << '\n';
    out << total_fuel << '\n';
    out << special_stations << '\n';

    in.close();
    out.close();

    return 0;
}
```

This code reads the input from `telecabina.in`, calculates the number of people reaching the city, the cable car's total fuel consumption, and the number of special stations, then writes these results to `telecabina.out`. It uses file streams for I/O which are generally faster than the standard C++ I/O streams such as `cin` and `cout`. The code should compile and execute efficiently within the given constraints.
---------- user ----------


Program result did not match expected result.
Input data:
```
6
1200 3
1204 2
1199 8
1197 0
1202 10
1205 0
```
Expected output:
```
23
43
2
```
Found output:
```
23
43
3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Upon reviewing the results, it's evident that the code is incorrectly calculating the number of special stations. The mistake lies in the logic that determines whether the cable car is ascending or descending. The check for a special station should occur when the direction changes from ascending to descending or vice versa, which means when the next altitude is different from the current trend (ascending or descending).

Let's fix the code so that it accurately counts the number of special stations. We should also correct the fuel calculation for the descending case (it should use 1 liter per meter, not 3).

Here's the revised solution:

```cpp
#include <fstream>
#include <cmath>

int main() {
    std::ifstream in("telecabina.in");
    std::ofstream out("telecabina.out");

    int n, a, b, prev_altitude, people_count = 0, fuel_consumption = 0, special_stations = 0;
    bool ascending = true;

    in >> n;
    in >> prev_altitude >> b;
    people_count += b;
    
    for (int i = 1; i < n; ++i) {
        in >> a >> b;

        // Calculate fuel consumption
        int alt_diff = std::abs(a - prev_altitude);
        fuel_consumption += (a > prev_altitude) ? (alt_diff * 3) : (alt_diff * 1);
        
        // Check for special station
        if ((ascending && a < prev_altitude) || (!ascending && a > prev_altitude)) {
            special_stations++;
            ascending = !ascending;
        }
        
        people_count += b;
        prev_altitude = a;
    }

    out << people_count << '\n';
    out << fuel_consumption << '\n';
    out << special_stations << '\n';

    in.close();
    out.close();

    return 0;
}
```
In this corrected version, we track the previous altitude to compare with the current altitude to check if the direction has changed. We also fixed the fuel calculation during descent to use 1 liter per meter, as per the problem statement. This should give the expected output that matches the problem's specification.
