{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/840/2024-05-06T16:58:48.724Z-07671.log",
  "attemptStart": 1715014728.724,
  "attemptEnd": 1715014764.755,
  "attemptDuration": 36.0310001373291,
  "code": "#include <fstream>\n#include <unordered_map>\n\nusing namespace std;\n\nifstream fin(\"cool.in\");\nofstream fout(\"cool.out\");\n\nconst int MAX_N = 5000;\nint A[MAX_N];\n\nbool is_sequence_cool(int *begin, int *end, int &max_value) {\n    unordered_map<int, bool> seen;\n    int local_max = 0;\n    for (auto it = begin; it != end; ++it) {\n        if (seen.find(*it) != seen.end()) return false;\n        seen[*it] = true;\n        local_max = max(local_max, *it);\n    }\n    for (int i = local_max; i > local_max - (end - begin); --i) {\n        if (!seen[i]) return false;\n    }\n    max_value = local_max;\n    return true;\n}\n\nint distinct_count(int *begin, int *end) {\n    unordered_map<int, int> freq;\n    for (auto it = begin; it != end; ++it) {\n        freq[*it]++;\n    }\n    int count = 0;\n    for (const auto &pair : freq) {\n        if (pair.second == 1) count++;\n    }\n    return count;\n}\n\nvoid solve_task1(int N, int K) {\n    int max_value;\n    if (is_sequence_cool(A, A + K, max_value)) {\n        fout << max_value << \"\\n\";\n    } else {\n        fout << distinct_count(A, A + K) << \"\\n\";\n    }\n}\n\nvoid solve_task2(int N) {\n    int max_length = 0, num_sequences = 0;\n    for (int i = 0; i < N; ++i) {\n        unordered_map<int, int> seen;\n        int local_length = 0, local_max = 0, min_value = A[i];\n        for (int j = i; j < N; ++j) {\n            if (seen.find(A[j]) != seen.end()) break;\n            seen[A[j]] = j;\n            local_max = max(local_max, A[j]);\n            min_value = min(min_value, A[j]);\n            local_length++;\n            if (local_max - min_value + 1 == local_length) {\n                if (local_length > max_length) {\n                    max_length = local_length;\n                    num_sequences = 1;\n                } else if (local_length == max_length) {\n                    num_sequences++;\n                }\n            }\n        }\n    }\n    fout << max_length << \"\\n\" << num_sequences << \"\\n\";\n}\n\nint main() {\n    int p, N, K;\n    fin >> p >> N >> K;\n    for (int i = 0; i < N; ++i) {\n        fin >> A[i];\n    }\n    if (p == 1) {\n        solve_task1(N, K);\n    } else {\n        solve_task2(N);\n    }\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1914,
  "metadata": {
    "id": 840,
    "examples": [
      {
        "in": "1\n7 4\n6 4 5 7 8 3 5",
        "out": "7",
        "explainer": ""
      },
      {
        "in": "1\n7 6\n6 4 5 7 5 4 3",
        "out": "2",
        "explainer": ""
      },
      {
        "in": "2\n11 4\n7 4 5 6 8 4 5 7 4 3 2",
        "out": "5\n2",
        "explainer": ""
      }
    ],
    "body": "Se consideră un șir $A$ format din $N$ elemente naturale nenule. Numim secvență de lungime $K$ a șirului $A$ orice succesiune de elemente consecutive din șir de forma $A_i, A_{i+1}, \\dots, A_{i+K-1}$.\n\nO secvență o numim *secvență cool* dacă elementele care o compun sunt distincte și pot fi rearanjate astfel încât să alcătuiască o secvență continuă de numere consecutive.\n\nDe exemplu, considerând șirul $A = (3,1,6,8,4,5,6,7,4,3,4)$, atunci secvența $(8,4,5,6,7)$ este o *secvență cool* deoarece conține elemente distincte ce pot fi rearanjate astfel încât să alcătuiască șirul de numere consecutive $4,5,6,7,8$, pe când secvențele $(4,3,4)$, $(6,7,4,3)$ **nu** sunt considerate *secvențe cool*.\n\n# Cerinţă\nFiind dat un şir de $N$ numere naturale nenule se cer următoarele:\n1. Pentru o valoare dată $K$ să se verifice dacă secvența $A_1, A_2, \\dots, A_K$ este *secvență cool*. Dacă secvența este *cool*, atunci se va afișa cea mai mare valoare ce aparține secvenței. Dacă secvența nu este *cool*, atunci se va afișa numărul elementelor distincte din secvența $A_1, A_2, \\dots, A_K$, adică numărul elementelor care apar o singură dată.\n2. Lungimea maximă a unei *secvențe cool* și numărul *secvențelor cool* de lungime maximă.\n\n# Date de intrare\nFişierul de intrare `cool.in` conţine pe prima linie un număr natural $p$. Pentru toate testele de intrare, numărul $p$ poate avea doar valoarea $1$ sau valoarea $2$. Pe linia a doua se găsesc, despărțite printr-un spațiu, două numere naturale $N$ și $K$. Pe următoarea linie se găsesc $N$ numere întregi, separate prin câte un spațiu, ce reprezintă elementele şirului.\n\n# Date de ieşire\nDacă valoarea lui $p$ este $1$, atunci **se va rezolva numai punctul 1** din cerință. În acest caz, fişierul de ieşire `cool.out` va conţine pe prima linie un număr natural, număr ce reprezintă conform cerinței $1$, maximul secvenței $A_1, A_2, \\dots, A_K$, dacă secvența este *secvență cool*, sau numărul elementelor distincte din secvență, dacă aceasta **nu** este *secvență cool*.\n\\\nDacă valoarea lui $p$ este $2$, **se va rezolva numai punctul 2** din cerință. În acest caz, fişierul de ieşire `cool.out` va avea două linii. Prima linie va conține un număr natural nenul ce reprezintă lungimea maximă a unei *secvențe cool*, iar următoarea linie un număr natural nenul ce reprezintă numărul de *secvențe cool* care au lungimea maximă.\n\n# Restricţii și precizări\n- $1 \\leq N \\leq 5\\ 000$\n- $2 \\leq K \\leq 1\\ 000$\n- $1 \\leq A_i \\leq 1\\ 000$, $1 \\leq i \\leq N$\n- Pentru $30\\%$ dintre teste $N \\leq 1\\ 000$.\n- Pentru rezolvarea primei cerinţe se acordă $20\\%$ din punctaj, iar pentru cerința a doua se acordă $80\\%$ din punctaj.",
    "header": {
      "problem_id": 840,
      "problem_name": "cool",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.08,
      "memory_limit_mb": 2,
      "console_input": false,
      "input_filename": "cool.in",
      "output_filename": "cool.out",
      "multiple_solutions": false,
      "original_source": "OJI 2014 IX: Problema 1"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "cool.in",
      "output": "cool.out"
    },
    "consoleInteraction": false
  }
}