---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <array>

std::ifstream infile("immortal.in");
std::ofstream outfile("immortal.out");

struct Position {
    int x, y;
};

std::array<int, 4> dx{{ -1, 1, 0, 0 }};
std::array<int, 4> dy{{ 0, 0, -1, 1 }};

int n, m, I;
std::vector<std::vector<int>> grid;
std::vector<Position> immortals;
std::vector<std::array<int, 4>> battles;

bool isValid(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool solve(int remaining) {
    if (remaining == 1) return true;

    for (int i = 0; i < immortals.size(); ++i) {
        if (immortals[i].x == -1) continue;

        int x = immortals[i].x;
        int y = immortals[i].y;

        for (int dir = 0; dir < 4; ++dir) {
            int nx = x + dx[dir];
            int ny = y + dy[dir];
            
            if (isValid(nx, ny) && grid[nx][ny]) {
                int victimIdx = grid[nx][ny] - 1;
                int jumpX = nx + dx[dir];
                int jumpY = ny + dy[dir];

                if (isValid(jumpX, jumpY) && !grid[jumpX][jumpY]) {
                    grid[x][y] = 0;
                    grid[nx][ny] = 0;
                    grid[jumpX][jumpY] = i + 1;
                    immortals[i] = {jumpX, jumpY};
                    immortals[victimIdx] = {-1, -1};

                    battles.push_back({x + 1, y + 1, jumpX + 1, jumpY + 1});

                    if (solve(remaining - 1)) return true;

                    battles.pop_back();
                    grid[x][y] = i + 1;
                    grid[nx][ny] = victimIdx + 1;
                    grid[jumpX][jumpY] = 0;
                    immortals[i] = {x, y};
                    immortals[victimIdx] = {nx, ny};
                }
            }
        }
    }

    return false;
}

int main() {
    infile >> n >> m >> I;
    grid.assign(n, std::vector<int>(m, 0));
    immortals.assign(I, {0, 0});

    int x, y;
    for (int i = 0; i < I; ++i) {
        infile >> x >> y;
        --x; --y;
        grid[x][y] = i + 1;
        immortals[i] = {x, y};
    }

    solve(I);

    for (const auto& battle : battles) {
        for (const auto& pos : battle) {
            outfile << pos << ' ';
        }
        outfile << '\n';
    }

    infile.close();
    outfile.close();

    return 0;
}
```
This C++ solution attempts to solve the problem using backtracking, which is an appropriate approach for this type of puzzle. The key elements in this solution are as follows:

- `isValid` function to determine whether a position is within the grid boundaries.
- `solve` function to perform backtracking, trying to perform a jump (as described in the puzzle) and recursively calling itself.
- `immortals` vector to keep track of the positions of the immortals.
- `battles` vector to keep track of the battles that lead to a solution.

The input is read from `immortal.in`, and the solution is written to `immortal.out`. Note that `std::ios_base::sync_with_stdio(false);` and `std::cin.tie(nullptr);` are intentionally omitted since we are not using `cin` or `cout` for I/O operations.

This approach checks all possible jumps for each immortal and backtracks if the current sequence of moves doesn't lead to a solution. Once a solution is found where only one immortal remains, the function returns true, and the sequence of battles is written to the output file.
---------- user ----------


Program result did not match expected result.
Input data:
```
3 4 4
1 2
2 1
3 2
3 3
```
Expected output:
```
3 3 3 1
3 1 1 1
1 1 1 3
```
Found output:
```
3 3 3 1 
3 1 1 1 
1 1 1 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The expected and found output seem to be identical except for an additional space at the end of each line in the found output. This discrepancy would not affect the correctness of the result in a real-world scenario, but it's important to follow the given format precisely in programming challenges like this.

To fix the issue with the output format, the code should only include a space between the numbers on the same line and not at the end of the line. This can be achieved by modifying the output loop as follows:

```cpp
for (size_t j = 0; j < battle.size(); ++j) {
    outfile << battle[j];
    if (j < battle.size() - 1) outfile << ' '; // Add spaces only between numbers
}
outfile << '\n';
```

Here is the revised solution with the improved output formatting:

```cpp
#include <fstream>
#include <vector>
#include <array>

struct Position {
    int x, y;
};

std::array<int, 4> dx{{ -2, 2, 0, 0 }};
std::array<int, 4> dy{{ 0, 0, -2, 2 }};

int n, m, I;
std::vector<std::vector<int>> grid;
std::vector<Position> immortals;
std::vector<std::array<int, 4>> battles;

bool isValid(int x, int y) {
    return x >= 0 && x < n && y >= 0 && y < m;
}

bool solve(int remaining) {
    if (remaining == 1) return true;

    for (int i = 0; i < immortals.size(); ++i) {
        if (immortals[i].x == -1) continue;

        int x = immortals[i].x;
        int y = immortals[i].y;

        for (int dir = 0; dir < 4; ++dir) {
            int nx = x + dx[dir] / 2;
            int ny = y + dy[dir] / 2;
            int jumpX = x + dx[dir];
            int jumpY = y + dy[dir];

            if (isValid(nx, ny) && grid[nx][ny] && isValid(jumpX, jumpY) && !grid[jumpX][jumpY]) {
                int victimIdx = grid[nx][ny] - 1;
                
                grid[x][y] = 0;
                grid[nx][ny] = 0;
                grid[jumpX][jumpY] = i + 1;
                immortals[i] = {jumpX, jumpY};
                immortals[victimIdx] = {-1, -1};

                battles.push_back({x + 1, y + 1, jumpX + 1, jumpY + 1});

                if (solve(remaining - 1)) return true;

                battles.pop_back();
                grid[x][y] = i + 1;
                grid[nx][ny] = victimIdx + 1;
                grid[jumpX][jumpY] = 0;
                immortals[i] = {x, y};
                immortals[victimIdx] = {nx, ny};
            }
        }
    }

    return false;
}

int main() {
    std::ifstream infile("immortal.in");
    std::ofstream outfile("immortal.out");

    infile >> n >> m >> I;
    grid.assign(n, std::vector<int>(m, 0));
    immortals.assign(I, Position{-1, -1});

    int x, y;
    for (int i = 0; i < I; ++i) {
        infile >> x >> y;
        --x; --y;
        grid[x][y] = i + 1;
        immortals[i] = {x, y};
    }

    solve(I);

    for (const auto& battle : battles) {
        for (size_t j = 0; j < battle.size(); ++j) {
            outfile << battle[j];
            if (j < battle.size() - 1) outfile << ' ';
        }
        outfile << '\n';
    }

    infile.close();
    outfile.close();

    return 0;
}
```

Now the output formatting should match the expected output exactly, with no trailing spaces after the last number in each line. This solution maintains the backtracking approach to solve the problem efficiently.
