---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `immortal.in` and write to `immortal.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cei care au văzut filmul Nemuritorul, ştiu că fraza cu care nemuritorii încep lupta este "Nu poate să rămână decât unul singur". Să încercăm să simulăm povestea nemuritorilor. 

Într-o zonă dreptunghiulară formată din $n$ linii (numerotate de la $1$ la $n$) şi $m$ coloane (numerotate de la $1$ la $m$) se află maxim $n \times m-1 $nemuritori. Doi nemuritori vecini se "luptă" între ei şi cel care pierde lupta este eliminat. "Lupta" constă în săritura unuia dintre nemuritori peste celălalt, dacă această săritură se poate face. Săritura se poate face pe orizontală sau verticală şi nemuritorul peste care s-a sărit dispare. Prin vecin al nemuritorului din poziţia $(i, j)$ înţelegem un nemuritor din una dintre poziţiile $(i-1,j), (i+1,j), (i,j-1), (i,j+1)$. Deci, după luptă nemuritorul din câmpul $(i,j)$ se va găsi în una dintre poziţiile: $(i-2,j), (i+2,j), (i,j-2)$ sau $(i,j+2)$, dacă această poziţie este liberă şi este în interiorul zonei.

# Cerinţă
Se cere să se determine o succesiune a luptelor ce pot fi purtate, astfel încât la final să rămână un singur nemuritor.

# Date de intrare
Fişierul de intrare `immortal.in` conţine pe prima linie trei valori naturale $n m I$, separate prin câte un spaţiu, reprezentând numărul de linii, numărul de coloane ale zonei descrise şi respectiv numărul de nemuritori existenţi iniţial. Următoarele $I$ linii conţin fiecare câte două numere naturale $x\ y$ separate printr-un spaţiu, reprezentând poziţiile unde se găsesc iniţial cei $I$ nemuritori (linia şi coloana).  

# Date de ieşire
Fişierul de intrare `immortal.out` va conţine $I-1$ linii, fiecare linie descriind o "luptă". Luptele vor fi scrise în ordinea în care au avut loc. O linie va conţine $4$ numere naturale care indică: primele două poziţia de pe care pleacă un nemuritor la "luptă", ultimele două poziţia pe care acesta ajunge după "luptă". Pentru ca "lupta" să fie corectă, în poziţia peste care nemuritorul "sare" trebuie să existe un nemuritor care va "muri". O poziţie va fi specificată prin indicele de linie urmat de indicele de coloană. Valorile scrise pe aceeaşi linie vor fi separate prin spaţii.

# Restricţii
* $1 < n, m ≤ 20$
* $1 < I ≤ min{15, n \times m-1}$
* Pentru datele de test există întotdeauna soluţie.

---

Example:
`immortal.in`
```
3 4 4
1 2
2 1
3 2
3 3
```

`immortal.out`
```
3 3 3 1
3 1 1 1
1 1 1 3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Immortal {
    int x, y;
};

int n, m, I;
vector<Immortal> immortals;
vector<vector<int>> battles;
bool found = false;

bool isValid(int x, int y) {
    return x >= 1 && x <= n && y >= 1 && y <= m;
}

void outputResult(const vector<vector<int>>& battles) {
    ofstream outFile("immortal.out");
    for (const auto& battle : battles) {
        for (int i = 0; i < 4; ++i) {
            outFile << battle[i] << (i < 3 ? ' ' : '\n');
        }
    }
    outFile.close();
}

void solve(int remaining) {
    if (found) return;
    if (remaining == 1) {
        found = true;
        outputResult(battles);
        return;
    }
    
    for (int i = 0; i < immortals.size(); ++i) {
        Immortal& imm = immortals[i];
        vector<pair<int, int>> moves = {
            {imm.x - 2, imm.y}, {imm.x + 2, imm.y},
            {imm.x, imm.y - 2}, {imm.x, imm.y + 2}
        };

        for (auto& [nx, ny] : moves) {
            if (!isValid(nx, ny)) continue;
            int mx = (imm.x + nx) / 2;
            int my = (imm.y + ny) / 2;

            auto it = find_if(immortals.begin(), immortals.end(), [mx, my](const Immortal& m) {
                return m.x == mx && m.y == my;
            });

            if (it != immortals.end()) {
                Immortal middle = *it;
                battles.push_back({imm.x, imm.y, nx, ny});
                immortals.erase(it);
                imm.x = nx;
                imm.y = ny;
                
                solve(remaining - 1);
                
                if (found) return;
                
                immortals.push_back(middle);
                imm.x = battles.back()[0];
                imm.y = battles.back()[1];
                battles.pop_back();
            }
        }
    }
}

int main() {
    ifstream inFile("immortal.in");
    inFile >> n >> m >> I;
    immortals.resize(I);
    for (int i = 0; i < I; ++i) {
        inFile >> immortals[i].x >> immortals[i].y;
    }
    inFile.close();
    solve(I);
    return 0;
}
```

This C++ code defines a recursive backtracking algorithm to find a sequence of battles that will result in only one immortal remaining. The `solve` function is called with the initial number of immortals, and it systematically tries all possible moves for each immortal. If a valid move is found, it performs the move, removes the defeated immortal from the board, and recurses with one less immortal. If a solution is found, it is written to the output file, and the `found` flag is set to prevent further searches.
---------- user ----------


Expected program to write result to `immortal.out` and read from `immortal.in`.
Do not use `cin >>` or `cout <<` or `scanf()` or `printf()` to read input data or write output data.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Below is the corrected C++ solution taking into account all of the provided constraints and requirements. The solution uses `ifstream` to read from `immortal.in` and `ofstream` to write to `immortal.out`.

```cpp
#include <fstream>
#include <vector>
#include <array>

std::ifstream inFile("immortal.in");
std::ofstream outFile("immortal.out");

const int MAXN = 20;
std::array<std::array<bool, MAXN + 1>, MAXN + 1> board{};
std::vector<std::pair<int, int>> moves;
int n, m, I;

bool solve(int x, int y, int remaining) {
    if (remaining == 1) {
        for (const auto &move : moves) {
            outFile << move.first << " " << move.second << " ";
        }
        outFile << x << " " << y << "\n";
        return true;
    }

    std::vector<std::pair<int, int>> directions = {{-2, 0}, {2, 0}, {0, -2}, {0, 2}};

    for (auto &[dx, dy] : directions) {
        int nx = x + dx;
        int ny = y + dy;
        int mx = x + dx / 2;
        int my = y + dy / 2;

        if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && board[mx][my] && !board[nx][ny]) {
            board[x][y] = false;
            board[mx][my] = false;
            board[nx][ny] = true;
            moves.push_back({x, y});
            if (solve(nx, ny, remaining - 1)) {
                return true;
            }
            moves.pop_back();
            board[x][y] = true;
            board[mx][my] = true;
            board[nx][ny] = false;
        }
    }

    return false;
}

int main() {
    inFile >> n >> m >> I;

    int x, y;
    for (int i = 0; i < I; ++i) {
        inFile >> x >> y;
        board[x][y] = true;
    }

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (board[i][j] && solve(i, j, I)) {
                inFile.close();
                outFile.close();
                return 0;
            }
        }
    }

    inFile.close();
    outFile.close();
    return 0;
}
```

This code will read the input from `immortal.in`, perform the necessary computations to find the sequence of battles, and write the output to `immortal.out`. The recursive function `solve` tries to make a move for the current immortal and continues to do so until only one immortal remains, at which point it outputs the result to the file and returns `true`. If no solution is found, it backtracks and tries a different path.
---------- user ----------


Program result did not match expected result.
Input data:
```
3 4 4
1 2
2 1
3 2
3 3
```
Expected output:
```
3 3 3 1
3 1 1 1
1 1 1 3
```
Found output:
```
3 3 3 1 1 1 1 3
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The previous solution incorrectly writes the entire sequence of moves in one line, including the initial position of the last move, which leads to the incorrect output format. According to the challenge, each move should be on its own separate line with only the starting and ending positions. We need to adjust the output logic to match this format.

Let's fix the issue and ensure that each move is outputted on a separate line:

```cpp
#include <fstream>
#include <vector>
#include <array>

std::ifstream inFile("immortal.in");
std::ofstream outFile("immortal.out");

const int MAXN = 20;
std::array<std::array<bool, MAXN + 1>, MAXN + 1> board{};
std::vector<std::pair<std::pair<int, int>, std::pair<int, int>>> moves;
int n, m, I;

bool solve(int remaining) {
    if (remaining == 1) {
        for (const auto &move : moves) {
            outFile << move.first.first << " " << move.first.second << " " << move.second.first << " " << move.second.second << "\n";
        }
        return true;
    }

    std::vector<std::pair<int, int>> directions = {{-2, 0}, {2, 0}, {0, -2}, {0, 2}};

    for (int x = 1; x <= n; ++x) {
        for (int y = 1; y <= m; ++y) {
            if (board[x][y]) {
                for (auto &[dx, dy] : directions) {
                    int nx = x + dx;
                    int ny = y + dy;
                    int mx = x + dx / 2;
                    int my = y + dy / 2;

                    if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && board[mx][my] && !board[nx][ny]) {
                        board[x][y] = false;
                        board[mx][my] = false;
                        board[nx][ny] = true;
                        moves.push_back({{x, y}, {nx, ny}});
                        if (solve(remaining - 1)) {
                            return true;
                        }
                        moves.pop_back();
                        board[x][y] = true;
                        board[mx][my] = true;
                        board[nx][ny] = false;
                    }
                }
            }
        }
    }

    return false;
}

int main() {
    inFile >> n >> m >> I;

    int x, y;
    for (int i = 0; i < I; ++i) {
        inFile >> x >> y;
        board[x][y] = true;
    }

    solve(I);

    inFile.close();
    outFile.close();
    return 0;
}
```

This revised code features a `solve` function that recursively attempts to find a valid sequence of moves that leaves only one immortal remaining. Each move is stored as a pair of positions (start and end) in the `moves` vector, and when a valid sequence is found, each move is written to `immortal.out` on separate lines. The function iterates through all board positions and for each immortal found, it checks all possible moves in the defined directions.

The code ensures that the final output matches the expected result, with each move on its own line in the format `start_x start_y end_x end_y`.
