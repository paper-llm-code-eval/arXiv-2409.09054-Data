---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `abx.in` and write to `abx.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr natural $n$ se numește putere dacă există două numere naturale $a$, $b$, $a \geq 1$, $b \geq 2$ astfel încât $n = a^b$. De exemplu, numerele $32$, $169$, $1$ sunt puteri ($32=2^5$, $169=13^2$, $1=1^2$), iar $72$, $2000$ și $31$ nu sunt puteri.
Se citesc numerele naturale $N$, $M$ și un șir de $N$ numere naturale $x_1, x_2, \dots, x_N$ din intervalul $[1,M]$.

# Cerință
Pentru fiecare din cele $N$ numere $x_i$ determinați câte un număr natural $r_i$ din intervalul $[1,M]$, cu proprietatea că $r_i$ este o putere și pentru orice altă putere $p$ din intervalul $[1,M]$ este îndeplinită condiția $|x_i – r_i| \leq |x_i – p|$, unde $|x|$ reprezintă valoarea absolută a lui $x$ (modulul).
Dacă există două puteri egal depărtate de $x_i$ se va alege puterea cea mai mică. De exemplu pentru numărul $26$, dintre puterile $25$ și $27$ va fi ales numărul $25$.

# Date de intrare
Fișierul de intrare `abx.in` conține pe prima linie două numere $N$ și $M$, iar pe fiecare dintre următoarele $N$ linii se găsește câte un număr natural $x_i$ ($1 \leq i \leq N$), cu semnificația de mai sus.
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `abx.out` va conține $N$ linii, pe fiecare linie $i$ ($1 \leq i \leq N$) aflându-se numărul natural $r_i$ cu semnificația din enunț.

# Restricții și precizări
- $1 \leq N \leq 5\ 000$
- $10 \leq M \leq 10^{18}$
- Pentru teste valorând 40 de puncte, $M \leq 5\ 000$.
- Pentru teste valorând 70 de puncte, $M \leq 10^9$.

---

Example:
`abx.in`
```
8 1000
345
99
999
500
123
124
99
256
```

`abx.out`
```
343
100
1000
512
121
125
100
256
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>

using namespace std;

vector<long long> generate_powers(long long M) {
    vector<long long> powers;
    for (long long a = 2; a * a <= M; ++a) {
        long long power = a * a;
        while (power <= M) {
            powers.push_back(power);
            if (M / a < power) break;
            power *= a;
        }
    }
    // Adding special case 1^1
    powers.push_back(1);
    sort(powers.begin(), powers.end());
    powers.erase(unique(powers.begin(), powers.end()), powers.end());
    return powers;
}

long long closest_power(const vector<long long>& powers, long long x) {
    auto lower = lower_bound(powers.begin(), powers.end(), x) - 1;
    auto upper = upper_bound(powers.begin(), powers.end(), x);

    long long dist_lower = x - *lower;
    long long dist_upper = (upper != powers.end()) ? (*upper - x) : LLONG_MAX;

    if (dist_lower <= dist_upper) {
        return *lower;
    } else {
        return *upper;
    }
}

int main() {
    ifstream in("abx.in");
    ofstream out("abx.out");

    long long N, M, x;
    in >> N >> M;

    vector<long long> powers = generate_powers(M);

    for (int i = 0; i < N; ++i) {
        in >> x;
        out << closest_power(powers, x) << '\n';
    }

    in.close();
    out.close();

    return 0;
}
```
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'long long int closest_power(const std::vector<long long int>&, long long int)':
main.cpp:30:69: error: 'LLONG_MAX' was not declared in this scope
   30 |     long long dist_upper = (upper != powers.end()) ? (*upper - x) : LLONG_MAX;
      |                                                                     ^~~~~~~~~
main.cpp:5:1: note: 'LLONG_MAX' is defined in header '<climits>'; did you forget to '#include <climits>'?
    4 | #include <algorithm>
  +++ |+#include <climits>
    5 | 

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

Certainly! The error indicates that `LLONG_MAX` is not declared. This is because `<climits>` header is not included in which `LLONG_MAX` is defined. I'll include the necessary header and here is the entire fixed source code:

```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

vector<long long> generate_powers(long long M) {
    vector<long long> powers;
    for (long long a = 2; a * a <= M; ++a) {
        long long power = a * a;
        while (power <= M) {
            powers.push_back(power);
            if (M / a < power) break;
            power *= a;
        }
    }
    // Adding special case 1^1
    powers.push_back(1);
    sort(powers.begin(), powers.end());
    powers.erase(unique(powers.begin(), powers.end()), powers.end());
    return powers;
}

long long closest_power(const vector<long long>& powers, long long x) {
    auto it = lower_bound(powers.begin(), powers.end(), x);
    if (it == powers.begin()) return *it;
    if (it == powers.end()) return *(--it);
    
    auto next_it = it;
    auto prev_it = --it;
    
    if (abs(*next_it - x) < abs(*prev_it - x)) return *next_it;
    return *prev_it;
}

int main() {
    ifstream in("abx.in");
    ofstream out("abx.out");

    long long N, M, x;
    in >> N >> M;

    vector<long long> powers = generate_powers(M);

    for (int i = 0; i < N; ++i) {
        in >> x;
        out << closest_power(powers, x) << '\n';
    }

    in.close();
    out.close();

    return 0;
}
```
Please note that I also optimized the `closest_power` function by avoiding unnecessary calculations.
