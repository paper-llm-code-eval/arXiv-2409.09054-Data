---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `abx.in` and write to `abx.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr natural $n$ se numește putere dacă există două numere naturale $a$, $b$, $a \geq 1$, $b \geq 2$ astfel încât $n = a^b$. De exemplu, numerele $32$, $169$, $1$ sunt puteri ($32=2^5$, $169=13^2$, $1=1^2$), iar $72$, $2000$ și $31$ nu sunt puteri.
Se citesc numerele naturale $N$, $M$ și un șir de $N$ numere naturale $x_1, x_2, \dots, x_N$ din intervalul $[1,M]$.

# Cerință
Pentru fiecare din cele $N$ numere $x_i$ determinați câte un număr natural $r_i$ din intervalul $[1,M]$, cu proprietatea că $r_i$ este o putere și pentru orice altă putere $p$ din intervalul $[1,M]$ este îndeplinită condiția $|x_i – r_i| \leq |x_i – p|$, unde $|x|$ reprezintă valoarea absolută a lui $x$ (modulul).
Dacă există două puteri egal depărtate de $x_i$ se va alege puterea cea mai mică. De exemplu pentru numărul $26$, dintre puterile $25$ și $27$ va fi ales numărul $25$.

# Date de intrare
Fișierul de intrare `abx.in` conține pe prima linie două numere $N$ și $M$, iar pe fiecare dintre următoarele $N$ linii se găsește câte un număr natural $x_i$ ($1 \leq i \leq N$), cu semnificația de mai sus.
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `abx.out` va conține $N$ linii, pe fiecare linie $i$ ($1 \leq i \leq N$) aflându-se numărul natural $r_i$ cu semnificația din enunț.

# Restricții și precizări
- $1 \leq N \leq 5\ 000$
- $10 \leq M \leq 10^{18}$
- Pentru teste valorând 40 de puncte, $M \leq 5\ 000$.
- Pentru teste valorând 70 de puncte, $M \leq 10^9$.

---

Example:
`abx.in`
```
8 1000
345
99
999
500
123
124
99
256
```

`abx.out`
```
343
100
1000
512
121
125
100
256
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>
#include <unordered_set>

std::unordered_set<long long> generate_powers(long long M) {
    std::unordered_set<long long> powers;
    powers.insert(1); // 1 is always a power (1^2)
    // Generate powers by iterating over all possible bases and exponents
    for (long long base = 2; base * base <= M; ++base) {
        long long power = base * base; // start with the square of the base
        while (power <= M) {
            powers.insert(power);
            if (M / base < power) break; // prevent overflow on the next multiplication
            power *= base;
        }
    }
    return powers;
}

int main() {
    std::ifstream fin("abx.in");
    std::ofstream fout("abx.out");

    long long N, M;
    fin >> N >> M;

    std::unordered_set<long long> powers = generate_powers(M);

    for (long long i = 0; i < N; i++) {
        long long x;
        fin >> x;

        long long closest_power = 1; // 1 is the minimum power
        long long min_distance = std::abs(x - 1); // start with the distance to 1

        for (long long p : powers) {
            long long dist = std::abs(x - p);
            if (dist < min_distance || (dist == min_distance && p < closest_power)) {
                closest_power = p;
                min_distance = dist;
            }
        }
        fout << closest_power << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```
This C++ program generates the powers up to `M` using a set to store them. It then reads each `x_i` from the input file and finds the closest power by checking each generated power. Finally, it writes the closest power to the output file. The use of `std::unordered_set` allows for constant average time complexity for lookups and insertions, making the search for the nearest power faster.
