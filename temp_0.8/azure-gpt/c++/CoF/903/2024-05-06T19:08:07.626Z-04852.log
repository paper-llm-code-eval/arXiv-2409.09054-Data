---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `abx.in` and write to `abx.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr natural $n$ se numește putere dacă există două numere naturale $a$, $b$, $a \geq 1$, $b \geq 2$ astfel încât $n = a^b$. De exemplu, numerele $32$, $169$, $1$ sunt puteri ($32=2^5$, $169=13^2$, $1=1^2$), iar $72$, $2000$ și $31$ nu sunt puteri.
Se citesc numerele naturale $N$, $M$ și un șir de $N$ numere naturale $x_1, x_2, \dots, x_N$ din intervalul $[1,M]$.

# Cerință
Pentru fiecare din cele $N$ numere $x_i$ determinați câte un număr natural $r_i$ din intervalul $[1,M]$, cu proprietatea că $r_i$ este o putere și pentru orice altă putere $p$ din intervalul $[1,M]$ este îndeplinită condiția $|x_i – r_i| \leq |x_i – p|$, unde $|x|$ reprezintă valoarea absolută a lui $x$ (modulul).
Dacă există două puteri egal depărtate de $x_i$ se va alege puterea cea mai mică. De exemplu pentru numărul $26$, dintre puterile $25$ și $27$ va fi ales numărul $25$.

# Date de intrare
Fișierul de intrare `abx.in` conține pe prima linie două numere $N$ și $M$, iar pe fiecare dintre următoarele $N$ linii se găsește câte un număr natural $x_i$ ($1 \leq i \leq N$), cu semnificația de mai sus.
Numerele aflate pe aceeași linie a fișierului sunt separate prin câte un spațiu.

# Date de ieșire
Fișierul de ieșire `abx.out` va conține $N$ linii, pe fiecare linie $i$ ($1 \leq i \leq N$) aflându-se numărul natural $r_i$ cu semnificația din enunț.

# Restricții și precizări
- $1 \leq N \leq 5\ 000$
- $10 \leq M \leq 10^{18}$
- Pentru teste valorând 40 de puncte, $M \leq 5\ 000$.
- Pentru teste valorând 70 de puncte, $M \leq 10^9$.

---

Example:
`abx.in`
```
8 1000
345
99
999
500
123
124
99
256
```

`abx.out`
```
343
100
1000
512
121
125
100
256
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <cmath>
#include <vector>
#include <algorithm>

// Generate and store powers within the range [1, M] in a sorted vector.
std::vector<long long> generate_powers(long long M) {
    std::vector<long long> powers;
    for (long long b = 2; b <= std::log(M) / std::log(2); ++b) {
        for (long long a = 2;; ++a) {
            long long power = std::pow(a, b);
            if (power > M) break;
            powers.push_back(power);
        }
    }
    powers.push_back(1); // Include 1 as it's also a power (1^2)
    std::sort(powers.begin(), powers.end());
    powers.erase(unique(powers.begin(), powers.end()), powers.end());
    return powers;
}

int main() {
    std::ifstream fin("abx.in");
    std::ofstream fout("abx.out");

    long long N, M;
    fin >> N >> M;

    auto powers = generate_powers(M);

    while (N--) {
        long long x;
        fin >> x;

        // Binary search to find the closest power.
        auto it = std::lower_bound(powers.begin(), powers.end(), x);
        long long closest_power = *it;
        if (it != powers.begin() && (it == powers.end() || std::abs(*(it - 1) - x) <= std::abs(*it - x))) {
            --it;
            closest_power = *it;
        }

        // Output the closest power to the file.
        fout << closest_power << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```

This code generates the powers once, stores them in a sorted vector and uses binary search to find the closest power to each input number, `x_i`, writing the result to `abx.out`. The use of file streams `ifstream` and `ofstream` ensures fast input and output operations, as required by the problem statement.
