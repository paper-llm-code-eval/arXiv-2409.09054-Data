---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turist.in` and write to `turist.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Harta unui continent poate fi văzută ca un dreptunghi având înălţimea de $M$ unităţi, iar lăţimea de $N$ unităţi. Colţul din stânga sus al hărţii are coordonatele ($0, 0$), iar colţul din dreapta jos are coordonatele ($M, N$). Coordonatele oraşelor de pe hartă sunt întotdeauna numere întregi, adică sunt de forma ($l, c$) cu $0 \leq l \leq M$, reprezentând  linia şi $0 \leq c \leq N$, reprezentând coloana. În unul din oraşele de pe hartă se găseşte un turist. El doreşte să pornească într-o expediţie deosebită. A decis să plece într-o anumită direcţie, şi să păstreze aceea direcţie pănă ajunge la marginea continentului (a hărţii) unde se încheie expediţia sa. Doreşte însă să aleagă acea direcţie care îl asigură că pe drumul său va trece prin cât mai multe oraşe.

# Cerință

Dându-se dimensiunile hărţii, coordonatele oraşului în care se găseşte turistul şi coordonatele tuturor celorlalte oraşe de pe hartă, se cere să se determine numărul maxim de oraşe pe care le va vizita turistul.

# Date de intrare

Pe prima linie a fişierului de intrare `turist.in` se găsesc numerele naturale $M \ N$ separate printr-un spaţiu reprezentând dimensiunile hărţii. A doua linie a fişierului conţine două numere naturale $l$ şi $c$ separate printr-un spaţiu, reprezentând poziţia iniţială a turistului pe hartă. Linia a treia a fişierului conţine un număr natural $k$, reprezentând numărul de oraşele de pe hartă, diferite de oraşul în care se găseşte turistul. 

Pe următoarele $k$ linii se găsesc câte două numere naturale, separate printr-un spaţiu, reprezentând coordonatele câte unui oraş de pe hartă, altele decât cel în care se găseşte turistul.

# Date de ieșire

Fişierul de ieşire `turist.out` va avea pe prima sa linie, un număr natural reprezentând numărul maxim de oraşe pe care le vizitează turistul. 

# Restricții și precizări

* $1 \leq N, M \leq 1 \ 000$;
* $1 \leq K \leq 2 \ 000$;

---

Example:
`turist.in`
```
5 10
3 2
7
0 0
0 8
1 6
2 2
2 4
3 7
4 5
```

`turist.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <unordered_map>

using namespace std;

int gcd(int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

struct HashPair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};

int main() {
    ifstream in("turist.in");
    ofstream out("turist.out");

    int M, N, l, c, k;
    in >> M >> N >> l >> c >> k;

    unordered_map<pair<int, int>, int, HashPair> dir_map;

    int max_cities = 0;
    for (int i = 0; i < k; ++i) {
        int x, y;
        in >> x >> y;
        int dx = x - l;
        int dy = y - c;

        if (dx == 0 && dy == 0) continue;

        int gcd_val = gcd(abs(dx), abs(dy));
        dx /= gcd_val;
        dy /= gcd_val;

        dir_map[{dx, dy}]++;

        max_cities = max(max_cities, dir_map[{dx, dy}]);
    }

    out << max_cities;

    in.close();
    out.close();

    return 0;
}
```

This C++ solution reads from `turist.in` and writes to `turist.out`. It uses an `unordered_map` to count the number of cities that can be visited in each unique direction, and keeps track of the maximum count as it processes each city. The solution uses file streams (`ifstream` and `ofstream`) for input and output to meet the challenge requirements. It also includes a custom hash function `HashPair` to enable using `pair<int, int>` as keys in the `unordered_map`.
