---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

using namespace std;

const int MAX = 30000;
int primes[MAX + 1];
vector<int> primeList;

void sieve() {
    for (int i = 2; i <= MAX; ++i) primes[i] = 1;
    for (int i = 2; i <= MAX; ++i) {
        if (primes[i]) {
            primeList.push_back(i);
            for (int j = 2 * i; j <= MAX; j += i) primes[j] = 0;
        }
    }
}

int main() {
    ifstream fin("expresie.in");
    ofstream fout("expresie.out");

    sieve();

    int m, n;
    fin >> m >> n;
    vector<int> exponents(MAX + 1, 0);

    int x;
    for (int i = 0; i < n; ++i) {
        fin >> x;
        for (int p : primeList) {
            if (x < p) break;
            while (x % p == 0) {
                exponents[p] += m; // Multiply by m as we're taking m-th root later
                x /= p;
            }
        }
        if (x > 1) exponents[x] += m;
    }

    bool isNatural = true;
    for (int p : primeList) {
        if (exponents[p] % m != 0) {
            isNatural = false;
            break;
        }
    }

    if (!isNatural) {
        fout << "0\n";
    } else {
        fout << "1\n";
        for (int p : primeList) {
            if (exponents[p]) {
                fout << p << " " << exponents[p] / m << "\n";
            }
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```
In this solution, I'm using the sieve of Eratosthenes to precompute the primes up to 30000, which is the maximum value of `x_i`. Then, as I read each `x_i`, I decompose it into prime factors, keeping track of the total exponents in an array. I multiply the exponents by `m` during the decomposition because later, when checking if the m-th root is an integer, I'll need to see if each total exponent is divisible by `m`.

After processing all `x_i`, I check if the cumulative exponents after dividing by `m` are integers. If yes, I output 1 and the prime decomposition; otherwise, I output 0.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
4
32 81 100 19
```
Expected output:
```
0
```
Found output:
```
1
2 7
3 4
5 2
19 1
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
