---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

std::vector<int> prime_factors(int x) {
    std::vector<int> factors;
    for (int div = 2; div * div <= x; ++div) {
        while (x % div == 0) {
            factors.push_back(div);
            x /= div;
        }
    }
    if (x > 1) {
        factors.push_back(x);
    }
    return factors;
}

int main() {
    std::ifstream in("expresie.in");
    std::ofstream out("expresie.out");
    int m, n, x;
    in >> m >> n;

    std::vector<int> exponent_count(30001, 0);
    
    for (int i = 0; i < n; ++i) {
        in >> x;
        std::vector<int> factors = prime_factors(x);
        for (int factor : factors) {
            exponent_count[factor]++;
        }
    }

    bool is_natural = true;
    for (int i = 2; i <= 30000; ++i) {
        if (exponent_count[i] % m != 0) {
            is_natural = false;
            break;
        }
        exponent_count[i] /= m;
    }

    if (!is_natural) {
        out << "0\n";
    } else {
        out << "1\n";
        for (int i = 2; i <= 30000; ++i) {
            if (exponent_count[i] > 0) {
                out << i << " " << exponent_count[i] << "\n";
            }
        }
    }
    
    in.close();
    out.close();
    return 0;
}
```

The above C++ code solves the challenge by reading the values from `expresie.in`, checking if the product of all numbers to the 1/m power is an integer, and if so, outputs the prime factorization to `expresie.out`. The code avoids using `cin`, `cout`, `printf()`, and `scanf()` for file I/O operations, as required by the challenge. It uses an efficient method for factorization and processes each number separately.
