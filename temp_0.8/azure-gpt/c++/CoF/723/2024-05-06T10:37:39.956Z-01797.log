---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `expresie.in` and write to `expresie.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se dă un șir de $n$ numere naturale nenule $x_1, x_2, \dots, x_n$ și un număr natural $m$.

# Cerință
Să se verifice dacă valoarea expresiei $\sqrt[m]{x_1 x_2 x_3 \dots x_n}$ este un număr natural. În caz afirmativ să se afișeze acest număr descompus în factori primi.

# Date de intrare
În fișierul `expresie.in` se află pe prima linie $m$, pe linia a doua $n$, iar pe linia a treia numerele $x_1$, $x_2$, $\dots$, $x_n$ separate între ele prin câte un spațiu.

# Date de ieșire
În fișierul `expresie.out` se va scrie pe prima linie cifra $0$, dacă valoarea expresiei nu este un număr natural, respectiv $1$ dacă este un număr natural. 
Dacă valoarea expresiei este un număr natural, pe următoarele linii se vor scrie perechi de forma "$p\ e$" ($p$ este factor prim care apare în descompunere la puterea $e \geq 1$). Aceste perechi se vor scrie în ordine crescătoare după primul număr (adică $p$).

# Restricții
- $n$ este un număr natural nenul mai mic strict decât $5\ 000$.
- $x_i$ este un număr natural nenul mai mic strict decât $30\ 000$, $i \in \{1, 2, \dots, n\}$.
- **$m$ poate fi una din cifrele $2$, $3$ sau $4$.**

---

Example:
`expresie.in`
```
2
4
32 81 100 19
```

`expresie.out`
```
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

std::vector<int> prime_factors(int number) {
    std::vector<int> factors;
    while (number % 2 == 0) {
        factors.push_back(2);
        number /= 2;
    }
    for (int i = 3; i <= sqrt(number); i += 2) {
        while (number % i == 0) {
            factors.push_back(i);
            number /= i;
        }
    }
    if (number > 2) {
        factors.push_back(number);
    }
    return factors;
}

int main() {
    std::ifstream fin("expresie.in");
    std::ofstream fout("expresie.out");

    int m, n;
    fin >> m >> n;
    std::vector<int> expo(50000, 0);
    int x, root;
    bool isNatural = true;
    double productLog = 0;

    for (int i = 0; i < n; ++i) {
        fin >> x;
        productLog += log(x);
        std::vector<int> factors = prime_factors(x);
        for (int factor : factors) {
            expo[factor]++;
        }
    }

    for (int i = 2; i < expo.size(); ++i) {
        if (expo[i] % m != 0) {
            isNatural = false;
            break;
        }
        expo[i] /= m;
    }

    root = static_cast<int>(exp(productLog / m));
    if (root != exp(productLog / m)) {
        isNatural = false;
    }

    if (isNatural) {
        fout << "1\n";
        for (int i = 2; i < expo.size(); ++i) {
            if (expo[i] > 0) {
                fout << i << ' ' << expo[i] << '\n';
            }
        }
    } else {
        fout << "0\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```
Please note that this solution assumes that the input file `expresie.in` and the output file `expresie.out` exist in the current working directory. It uses file streams to read and write from/to these files efficiently without using `cin`, `cout`, `printf`, or `scanf`. It calculates the prime factors of each number in the input sequence, aggregates the exponents, and then checks if after dividing each exponent by `m` the resulting number is an integer. If any exponent is not divisible by `m`, or if the `m`th root of the product is not an integer, it outputs `0`. Otherwise, it outputs `1` followed by the prime factors and their exponents.
---------- user ----------


Program result did not match expected result.
Input data:
```
2
4
32 81 100 18
```
Expected output:
```
1
2 4
3 3
5 1
```
Found output:
```
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
