---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tren.in` and write to `tren.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un elev în clasa a V-a, Rareş, s-a gândit să studieze mersul trenurilor ce trec prin gara din oraşul său, într-o zi. Gara are $2$ linii, numerotate cu $1$ şi $2$, pe care sosesc şi pleacă trenurile. În acea zi, în gară sosesc $T$ trenuri. Pentru fiecare tren din cele $T$, Rareş cunoaşte linia $L$ pe care va sosi, momentul sosirii, adică ora $H$ şi minutul $M$, precum şi durata de timp $S$ de staţionare (exprimată în minute). El a decis ca perioada de studiu a celor $T$ trenuri să înceapă cu momentul sosirii primului tren în gară din cele $T$ şi să se încheie odată cu momentul plecării ultimului tren din cele $T$.

Din sala de aşteptare Rareş poate vedea cele $2$ linii. Rareş are însă o problemă: atunci când un tren se află în gară pe linia $1$, el nu poate vedea trenul staţionat în acelaşi timp pe linia $2$. De exemplu, dacă un tren ajunge în gară pe linia $1$ la ora $14:21$ şi staţionează $5$ minute atunci trenul va pleca din gară la ora $14:26$. Astfel, în intervalul de timp [$14:21-14:26$], Rareş nu poate vedea ce se întâmplă pe linia $2$. Trenul de pe linia $2$ va putea fi vizibil începând cu minutul următor, adică de la $14:27$.

# Cerință

Scrieţi un program care să determine pentru un număr $T$ de trenuri care trec prin gară în perioada de studiu din acea zi:

* numărul maxim de trenuri $Z$ care au staţionat pe aceeaşi linie;
* numărul $X$ de trenuri pe care Rareş le vede;
* durata de timp maximă $Y$ (exprimată în număr de minute consecutive), din perioada de studiu, în care Rareş nu a văzut niciun tren.

# Date de intrare

Fișierul de intrare `tren.in` conține pe prima linie numărul $T$ de trenuri şi pe fiecare din următoarele $T$ linii, în ordinea sosirii trenurilor în gară, câte patru numere naturale $L$, $H$, $M$ şi $S$, separate prin câte un spaţiu, ce reprezintă linia $L$ pe care soseşte trenul, momentul sosirii trenului (ora $H$ şi minutul $M$) şi durata de timp $S$ de staţionare.


# Date de ieșire

Fişierul de ieşire `tren.out` conţine pe prima linie, separate prin câte un spaţiu, valorile cerute $Z$, $X$ și $Y$ (în această ordine).

# Restricții și precizări


* $2 \leq T \leq 100$; $0 \leq H \leq 23$; $0 \leq M \leq 59$; $1 \leq S \leq 9$;
* în acelaşi moment de timp nu pot pleca/sosi mai multe trenuri;
* în acelaşi moment de timp nu poate pleca un tren şi altul să sosească;
* pe aceeaşi linie nu pot staţiona mai multe trenuri în acelaşi moment de timp;
* pentru aflarea corectă a numărului $Z$ se acordă 20% din punctajul pe test;
* pentru aflarea corectă a numărului $X$ se acordă 40% din punctajul pe test;
* pentru aflarea corectă a numărului $Y$ se acordă 40% din punctajul pe test.

---

Example:
`tren.in`
```
8
1 14 20 3
2 14 21 1
2 14 24 4
1 14 40 8
2 14 41 1
2 14 43 1
2 14 45 5
1 14 56 1
```

`tren.out`
```
5 5 11
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Train {
    int line, arrival, stay;
};

int convertToMinutes(int H, int M) {
    return H * 60 + M;
}

void processData(const vector<Train>& trains, int& Z, int& X, int& Y) {
    int line1 = 0, line2 = 0, visible = 0, maxInvisible = 0;
    int startInvisible = -1;
    int lastDeparture1 = 0, lastDeparture2 = 0;
    for (const auto& t : trains) {
        if (t.line == 1) {
            line1++;
            visible += (lastDeparture2 < t.arrival) ? 1 : 0;
            if (startInvisible != -1 && lastDeparture2 < t.arrival) {
                maxInvisible = max(maxInvisible, t.arrival - startInvisible);
                startInvisible = -1;
            }
            lastDeparture1 = t.arrival + t.stay;
        } else {
            line2++;
            visible += (lastDeparture1 < t.arrival) ? 1 : 0;
            if (startInvisible != -1 && lastDeparture1 < t.arrival) {
                maxInvisible = max(maxInvisible, t.arrival - startInvisible);
                startInvisible = -1;
            }
            lastDeparture2 = t.arrival + t.stay;
        }
        if (lastDeparture1 >= t.arrival && lastDeparture2 >= t.arrival) {
            if (startInvisible == -1) startInvisible = t.arrival;
        }
    }
    if (startInvisible != -1) {
        maxInvisible = max(maxInvisible, (lastDeparture1 > lastDeparture2 ? lastDeparture1 : lastDeparture2) - startInvisible);
    }
    Z = max(line1, line2);
    X = visible;
    Y = maxInvisible;
}

int main() {
    ifstream fin("tren.in");
    ofstream fout("tren.out");

    int T, L, H, M, S;
    fin >> T;
    vector<Train> trains(T);

    int firstArrival = 24 * 60, lastDeparture = 0;

    for (int i = 0; i < T; ++i) {
        fin >> L >> H >> M >> S;
        int arrivalTime = convertToMinutes(H, M);
        trains[i] = {L, arrivalTime, S};
        firstArrival = min(firstArrival, arrivalTime);
        lastDeparture = max(lastDeparture, arrivalTime + S);
    }
    
    processData(trains, Z, X, Y);

    fout << Z << " " << X << " " << Y << "\n";

    fin.close();
    fout.close();

    return 0;
}
```
---------- user ----------


Failed to compile the program.
```
main.cpp: In function 'int main()':
main.cpp:67:25: error: 'Z' was not declared in this scope
   67 |     processData(trains, Z, X, Y);
      |                         ^
main.cpp:67:28: error: 'X' was not declared in this scope
   67 |     processData(trains, Z, X, Y);
      |                            ^
main.cpp:67:31: error: 'Y' was not declared in this scope
   67 |     processData(trains, Z, X, Y);
      |                               ^

```

Evaluate the error message. Think of a solution to fix the program and return the entire source code with the fix.

---

Rewrite the entire solution applying necessary fixes.
