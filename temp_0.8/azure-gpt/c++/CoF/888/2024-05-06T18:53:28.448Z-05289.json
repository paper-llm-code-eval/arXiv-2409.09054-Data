{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/888/2024-05-06T18:53:28.448Z-05289.log",
  "attemptStart": 1715021608.448,
  "attemptEnd": 1715021632.516,
  "attemptDuration": 24.068000078201294,
  "code": "#include <fstream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nconst int MAX_N = 505;\nconst int INF = 1e9;\nint N, G, A[MAX_N][MAX_N];\nbool visited[MAX_N][MAX_N];\n\nstruct Cell {\n    int x, y, cost;\n    bool operator>(const Cell& o) const {\n        return cost > o.cost;\n    }\n};\n\nbool isValid(int x, int y) {\n    return x >= 0 && x < N && y >= 0 && y < N;\n}\n\n// Determine the minimum number of dangerous zones crossed by the Rover\nint minDangerousZones() {\n    priority_queue<Cell, vector<Cell>, greater<Cell>> pq;\n    pq.push({0, 0, A[0][0] < G ? 1 : 0});\n    memset(visited, false, sizeof(visited));\n    visited[0][0] = true;\n\n    int dx[] = {0, 1, 0, -1};\n    int dy[] = {1, 0, -1, 0};\n\n    while (!pq.empty()) {\n        Cell curr = pq.top(); pq.pop();\n        if (curr.x == N - 1 && curr.y == N - 1) {\n            return curr.cost;\n        }\n        for (int i = 0; i < 4; ++i) {\n            int nx = curr.x + dx[i];\n            int ny = curr.y + dy[i];\n            if (isValid(nx, ny) && !visited[nx][ny]) {\n                visited[nx][ny] = true;\n                pq.push({nx, ny, curr.cost + (A[nx][ny] < G)});\n            }\n        }\n    }\n    return INF; // If somehow the Rover can't reach the destination\n}\n\n// Determine the maximum weight of a Rover that can cross without dangerous zones\nint maxWeight() {\n    int left = 1, right = 10000, maxWeight = 1;\n    while (left <= right) {\n        G = (left + right) / 2;\n        if (minDangerousZones() == 0) {\n            maxWeight = G;\n            left = G + 1;\n        } else {\n            right = G - 1;\n        }\n    }\n    return maxWeight;\n}\n\nint main() {\n    ifstream fin(\"rover.in\");\n    ofstream fout(\"rover.out\");\n    \n    int V;\n    fin >> V >> N;\n    if (V == 1) {\n        fin >> G;\n    }\n    \n    for (int i = 0; i < N; ++i) {\n        for (int j = 0; j < N; ++j) {\n            fin >> A[i][j];\n        }\n    }\n    \n    if (V == 1) {\n        fout << minDangerousZones() << \"\\n\";\n    } else { // V == 2\n        fout << maxWeight() << \"\\n\";\n    }\n    \n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1890,
  "metadata": {
    "id": 888,
    "examples": [
      {
        "in": "1\n5 5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "3",
        "explainer": ""
      },
      {
        "in": "2\n5\n5 1 3 4 7\n5 2 1 8 5\n2 9 5 3 3\n4 1 1 1 9\n5 1 6 1 8",
        "out": "2",
        "explainer": ""
      }
    ],
    "body": "NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.\n\n# Cerințe\n\n1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.\n2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.\n\n# Date de intrare\n\n\nPe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.\nPe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. \n\n# Date de ieșire\n\n\nFișierul de ieșire este `rover.out`.\n\nDacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.\n\nDacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.\n\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 500$\n* $1 \\leq G \\leq 5 \\ 000$\n* $1 \\leq A_{ij} \\leq 10 \\ 000$\n* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.\n* Roverul nu va trece de mai multe ori prin aceeași zonă.\n\n\n| $V$ | Punctaj |\n| - | ------- |\n| $1$ | 45      |\n| $2$ | 45      |",
    "header": {
      "problem_id": 888,
      "problem_name": "Rover",
      "tags": "[Binary Search, Deque, Shortest Path]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.35,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "rover.in",
      "output_filename": "rover.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 X: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "rover.in",
      "output": "rover.out"
    },
    "consoleInteraction": false
  }
}