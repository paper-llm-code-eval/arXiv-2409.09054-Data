---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `rover.in` and write to `rover.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

NASA plănuiește o nouă misiune Rover pe Marte în anul 2020. Principalul obiectiv al acestei misiuni este de a determina, cu ajutorul unui nou Rover, dacă a existat în trecut viață pe Marte. Până când va fi lansată misiunea, Roverul este supus la tot felul de teste în laboratoarele NASA. Într-unul din teste, Roverul trebuie să parcurgă o suprafață de forma unui caroiaj cu $N$ linii și $N$ coloane. Acesta pornește din zona de coordonate $(1,1)$ și trebuie să ajungă în zona de coordonate $(N,N)$, la fiecare pas putându-se deplasa din zona în care se află într-una din zonele învecinate la nord, sud, est sau vest. Pentru fiecare zonă de coordonate $(i,j)$ se cunoaște $A_{ij}$, stabilitatea terenului din acea zonă. Știind că Roverul are o greutate $G$, o zonă cu stabilitatea terenului cel puțin egală cu $G$ se consideră o zonă sigură pentru deplasarea Roverului, iar o zonă cu stabilitatea terenului mai mică decât $G$ se consideră o zonă periculoasă pentru Rover.

# Cerințe

1. Determinați numărul minim posibil de zone periculoase pe care le traversează Roverul pentru a ajunge din zona $(1,1)$ în zona $(N,N)$.
2. Determinați greutatea maximă pe care o poate avea un Rover care să ajungă din zona $(1,1)$ în zona $(N,N)$, fără a traversa nicio zonă periculoasă pentru el.

# Date de intrare


Pe prima linie a fișierului de intrare `rover.in`  se găsește numărul natural $V$ a cărui valoare poate fi doar $1$ sau $2$. Dacă $V$ este $1$, pe a doua linie a fișierului de intrare se găsesc două numere naturale $N$ și $G$ cu semnificația din enunț, iar dacă $V$ este $2$, pe a doua linie a fișierului de intrare se află doar numărul $N$.
Pe următoarele $N$ linii se află câte $N$ numere $A_{i,j}$, reprezentând stabilitatea terenului din zona $(i,j)$. 

# Date de ieșire


Fișierul de ieșire este `rover.out`.

Dacă valoarea lui $V$ este $1$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând numărul minim de zone periculoase pe care trebuie să le traverseze Roverul de greutate $G$.

Dacă valoarea lui $V$ este $2$, atunci fișierul de ieșire va conține pe prima linie un număr natural reprezentând greutatea maximă a unui Rover care poate ajunge din zona $(1,1)$ în zona $(N,N)$ fără a traversa zone periculoase pentru el.


# Restricții și precizări

* $1 \leq N \leq 500$
* $1 \leq G \leq 5 \ 000$
* $1 \leq A_{ij} \leq 10 \ 000$
* Zonele de coordonate $(1,1)$ și $(N,N)$ nu sunt zone periculoase pentru Rover.
* Roverul nu va trece de mai multe ori prin aceeași zonă.


| $V$ | Punctaj |
| - | ------- |
| $1$ | 45      |
| $2$ | 45      |

---

Example:
`rover.in`
```
1
5 5
5 1 3 4 7
5 2 1 8 5
2 9 5 3 3
4 1 1 1 9
5 1 6 1 8
```

`rover.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cstring>

using namespace std;

const int MAX_N = 505;
const int INF = 1e9;
int N, G, A[MAX_N][MAX_N];
bool visited[MAX_N][MAX_N];

struct Cell {
    int x, y, cost;
    bool operator>(const Cell& o) const {
        return cost > o.cost;
    }
};

bool isValid(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < N;
}

// Determine the minimum number of dangerous zones crossed by the Rover
int minDangerousZones() {
    priority_queue<Cell, vector<Cell>, greater<Cell>> pq;
    pq.push({0, 0, A[0][0] < G ? 1 : 0});
    memset(visited, false, sizeof(visited));
    visited[0][0] = true;

    int dx[] = {0, 1, 0, -1};
    int dy[] = {1, 0, -1, 0};

    while (!pq.empty()) {
        Cell curr = pq.top(); pq.pop();
        if (curr.x == N - 1 && curr.y == N - 1) {
            return curr.cost;
        }
        for (int i = 0; i < 4; ++i) {
            int nx = curr.x + dx[i];
            int ny = curr.y + dy[i];
            if (isValid(nx, ny) && !visited[nx][ny]) {
                visited[nx][ny] = true;
                pq.push({nx, ny, curr.cost + (A[nx][ny] < G)});
            }
        }
    }
    return INF; // If somehow the Rover can't reach the destination
}

// Determine the maximum weight of a Rover that can cross without dangerous zones
int maxWeight() {
    int left = 1, right = 10000, maxWeight = 1;
    while (left <= right) {
        G = (left + right) / 2;
        if (minDangerousZones() == 0) {
            maxWeight = G;
            left = G + 1;
        } else {
            right = G - 1;
        }
    }
    return maxWeight;
}

int main() {
    ifstream fin("rover.in");
    ofstream fout("rover.out");
    
    int V;
    fin >> V >> N;
    if (V == 1) {
        fin >> G;
    }
    
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            fin >> A[i][j];
        }
    }
    
    if (V == 1) {
        fout << minDangerousZones() << "\n";
    } else { // V == 2
        fout << maxWeight() << "\n";
    }
    
    fin.close();
    fout.close();
    return 0;
}
```

This C++ solution should compile and execute correctly, meeting the requirements of the programming challenge. It avoids the use of restricted I/O functions (`cin`, `cout`, `printf`, `scanf`) and efficiently determines either the minimum number of dangerous zones crossed or the maximum weight of the Rover, depending on the input value of `V`.
