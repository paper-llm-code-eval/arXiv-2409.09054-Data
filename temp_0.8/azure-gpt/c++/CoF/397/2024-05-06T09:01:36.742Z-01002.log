---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `ecuatii.in` and write to `ecuatii.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Să considerăm ecuaţii de gradul I, de forma: `expresie_1=expresie_2`. Expresiile specificate sunt constituite dintr-o succesiune de operanzi, între care există semnul `+` sau semnul `-` (cu semnificaţia binecunoscută de adunare, respectiv scădere). Fiecare operand este fie un număr natural, fie un număr natural urmat de litera `x` (litera `x` reprezentând necunoscuta), fie doar litera `x` (ceea ce este echivalent cu `1x`).

De exemplu: `2x-5+10x+4=20-x`. Observaţi că în ecuaţiile noastre nu apar paranteze şi necunoscuta este întotdeauna desemnată de litera mică `x`.

# Cerința

Scrieţi un program care să rezolve ecuaţii de gradul I, în formatul specificat în enunţul problemei.

# Date de intrare

Fișierul de intrare `ecuatii.in` conține pe prima linie un număr natural $n$, reprezentând numărul de ecuaţii din fişier. Pe fiecare dintre următoarele $n$ linii este scrisă câte o ecuaţie.

# Date de ieșire

Fișierul de ieșire `ecuatii.out` va conține $n$ linii, câte una pentru fiecare ecuaţie din fişierul de intrare. Pe linia $i$ va fi scrisă soluţia ecuaţiei de pe linia $i+1$ din fişierul de intrare.

Dacă soluţia ecuaţiei este un număr real, atunci acesta se va scrie cu 4 zecimale. Răspunsul este considerat corect dacă diferenţa în valoare absolută dintre soluţia corectă şi soluţia concurentului este < 0.001.

În cazul în care ecuaţia admite o infinitate de soluţii, se va scrie mesajul `infinit` (cu litere mici).

Dacă ecuaţia nu admite soluţii, se va scrie mesajul `imposibil` (de asemenea cu litere mici).

# Restricții și precizări
* $1 \leq n \leq 10$;
* Lungimea unei ecuaţii nu depăşeşte 255 caractere;
* Ecuaţiile nu conţin spaţii;
* Numerele naturale care intervin în ecuaţii sunt $\leq 1000$.

---

Example:
`ecuatii.in`
```
3 
2x-4+5x+300=98x
x+2=2+x
3x+5=3x+2
```

`ecuatii.out`
```
3.2527
infinit
imposibil
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <iomanip>
#include <cstdlib>

int main() {
    std::ifstream fin("ecuatii.in");
    std::ofstream fout("ecuatii.out");

    int n, xCoeff, xCoeffRight, constSum, constSumRight, term, termSign;
    char s[256], *p, op;
    bool rightSide;

    fin >> n;
    fin.getline(s, 256);  // Consume the newline character

    while (n--) {
        fin.getline(s, 256);
        xCoeff = constSum = xCoeffRight = constSumRight = term = 0;
        termSign = 1;
        rightSide = false;

        for (p = s; *p; p++) {
            if (*p == '+' || *p == '-') {
                if (!rightSide) {
                    constSum += term * termSign;
                } else {
                    constSumRight += term * termSign;
                }
                term = 0;
                termSign = (*p == '+') ? 1 : -1;
            } else if (*p == '=') {
                rightSide = true;
                constSum += term * termSign;
                term = 0;
                termSign = 1;
            } else if (*p >= '0' && *p <= '9') {
                term = term * 10 + (*p - '0');
            } else if (*p == 'x') {
                if (term == 0 && (p == s || *(p-1) != '0')) term = 1;
                if (!rightSide) {
                    xCoeff += term * termSign;
                } else {
                    xCoeffRight += term * termSign;
                }
                term = 0;
            }
        }
        constSumRight += term * termSign;

        // Move everything to the left side of the equation
        xCoeff -= xCoeffRight;
        constSumRight -= constSum;

        if (xCoeff == 0) {
            if (constSumRight == 0) {
                fout << "infinit\n";
            } else {
                fout << "imposibil\n";
            }
        } else {
            fout << std::fixed << std::setprecision(4) << static_cast<double>(constSumRight) / xCoeff << '\n';
        }
    }

    fin.close();
    fout.close();

    return 0;
}
```
