{
  "success": true,
  "attempt": 4,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/767/2024-05-06T15:07:49.867Z-01363.log",
  "attemptStart": 1715008069.867,
  "attemptEnd": 1715008208.318,
  "attemptDuration": 138.45099997520447,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <set>\n\nint main() {\n    std::ifstream fin(\"dreptc.in\");\n    std::ofstream fout(\"dreptc.out\");\n    \n    int N, C;\n    fin >> N >> C;\n    std::unordered_map<int, std::set<std::pair<int, int>>> color_points;\n    \n    for (int i = 0; i < N; ++i) {\n        int x, y, color;\n        fin >> x >> y >> color;\n        color_points[color].insert({x, y});\n    }\n    \n    fin.close();\n    \n    int rectangles = 0;\n    for (const auto &points : color_points) {\n        for (auto it1 = points.second.begin(); it1 != points.second.end(); ++it1) {\n            for (auto it2 = std::next(it1); it2 != points.second.end(); ++it2) {\n                // Check that we have two points with the same y coordinate and different x coordinates\n                if (it1->second == it2->second) {\n                    for (auto it3 = std::next(it1); it3 != points.second.end(); ++it3) {\n                        // Check for the third point that aligns with the first point\n                        if (it1->first == it3->first && it1->second != it3->second) {\n                            // Check for the fourth point that aligns with the second and third points\n                            if (points.second.count({it2->first, it3->second})) {\n                                rectangles++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    fout << rectangles << '\\n';\n    fout.close();\n    \n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5007,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}