{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/767/2024-05-06T15:06:38.966Z-02374.log",
  "attemptStart": 1715007998.966,
  "attemptEnd": 1715008037.316,
  "attemptDuration": 38.34999990463257,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n#include <utility>\n#include <algorithm>\n\nstruct HashPair {\n    template <class T1, class T2>\n    size_t operator()(const std::pair<T1, T2>& p) const {\n        auto hash1 = std::hash<T1>{}(p.first);\n        auto hash2 = std::hash<T2>{}(p.second);\n        return hash1 ^ hash2;\n    }\n};\n\nint main() {\n    std::ifstream fin(\"dreptc.in\");\n    std::ofstream fout(\"dreptc.out\");\n\n    int N, MaxC;\n    fin >> N >> MaxC;\n\n    std::unordered_map<int, std::vector<int>> points_by_color_and_x[MaxC + 1];\n    int x, y, c, rectangles = 0;\n\n    for (int i = 0; i < N; ++i) {\n        fin >> x >> y >> c;\n        points_by_color_and_x[c][x].push_back(y);\n    }\n\n    for (int color = 1; color <= MaxC; ++color) {\n        for (auto& kv : points_by_color_and_x[color]) {\n            if (kv.second.size() > 1) {\n                std::sort(kv.second.begin(), kv.second.end());\n            }\n        }\n\n        for (auto& kv1 : points_by_color_and_x[color]) {\n            for (auto& kv2 : points_by_color_and_x[color]) {\n                if (kv1.first >= kv2.first) continue; // Ensure we only count each pair once\n\n                std::vector<int>& y_values1 = kv1.second;\n                std::vector<int>& y_values2 = kv2.second;\n                std::unordered_set<int> common_y_values;\n\n                for (int y_val1 : y_values1) {\n                    if (std::binary_search(y_values2.begin(), y_values2.end(), y_val1)) {\n                        common_y_values.insert(y_val1);\n                    }\n                }\n\n                // Every pair of distinct y values form a rectangle\n                rectangles += common_y_values.size() * (common_y_values.size() - 1) / 2;\n            }\n        }\n    }\n\n    fout << rectangles << '\\n';\n\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2064,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}