---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `dreptc.in` and write to `dreptc.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:

* toate cele patru vârfuri se regăsesc printre cele N puncte date;
* are laturile paralele cu axele OX, OY;
* are vârfurile colorate în aceeași culoare.

# Cerință

Să se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.

# Date de intrare

Pe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \ y \ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.

# Date de ieșire

Pe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.

# Restricții și precizări

* $1 \leq N \leq 1 \ 000$;
* $1 \leq C \leq 5$;
* $-1 \ 000 \leq x, y \leq 1 \ 000$;
* Nu există două puncte cu aceleași coordonate
* $40$% din teste vor avea $N \leq 100$;

---

Example:
`dreptc.in`
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```

`dreptc.out`
```
3
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <unordered_map>
#include <vector>
#include <utility>
#include <algorithm>

struct HashPair {
    template <class T1, class T2>
    size_t operator()(const std::pair<T1, T2>& p) const {
        auto hash1 = std::hash<T1>{}(p.first);
        auto hash2 = std::hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};

int main() {
    std::ifstream fin("dreptc.in");
    std::ofstream fout("dreptc.out");

    int N, C;
    fin >> N >> C;

    std::unordered_map<int, std::vector<int>> x_coords[C + 1];
    std::unordered_map<int, std::vector<int>> y_coords[C + 1];
    std::unordered_map<std::pair<int, int>, int, HashPair> color_of_point;

    int x, y, color;
    for (int i = 0; i < N; ++i) {
        fin >> x >> y >> color;
        x_coords[color][x].push_back(y);
        y_coords[color][y].push_back(x);
        color_of_point[{x, y}] = color;
    }

    int rectangles = 0;
    for (int c = 1; c <= C; ++c) {
        for (auto& x_pair : x_coords[c]) {
            std::vector<int>& x_vect = x_pair.second;
            if (x_vect.size() < 2) continue;
            std::sort(x_vect.begin(), x_vect.end());
            for (size_t i = 0; i < x_vect.size(); ++i) {
                for (size_t j = i + 1; j < x_vect.size(); ++j) {
                    int y1 = x_vect[i];
                    int y2 = x_vect[j];
                    std::vector<int>& y1_xvals = y_coords[c][y1];
                    std::vector<int>& y2_xvals = y_coords[c][y2];
                    if (y1_xvals.size() < 2 || y2_xvals.size() < 2) continue;
                    for (int x_val : y1_xvals) {
                        if (std::binary_search(y2_xvals.begin(), y2_xvals.end(), x_val)) {
                            rectangles++;
                        }
                    }
                }
            }
        }
    }

    fout << rectangles << '\n';

    fin.close();
    fout.close();
    return 0;
}
```
---------- user ----------


Program result did not match expected result.
Input data:
```
9 2
3 10 1
3 8 2
3 6 1
3 4 1
3 0 1
6 0 1
6 4 1
6 8 2
6 10 1
```
Expected output:
```
3
```
Found output:
```
12
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The discrepancy between the expected and the found output arises because the original solution did not take into account that for each pair of points on the same vertical line, we should only count the distinct pairs of points on the same horizontal line that create a rectangle. Instead, it counts all possible combinations, leading to over-counting rectangles.

To fix the issue, we should ensure that for each pair of points on the same vertical line, we count each pair of corresponding points on the same horizontal line only once. We can achieve this by using a set to keep track of counted pairs.

Here's the revised solution:

```cpp
#include <fstream>
#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <utility>
#include <algorithm>

struct HashPair {
    template <class T1, class T2>
    size_t operator()(const std::pair<T1, T2>& p) const {
        auto hash1 = std::hash<T1>{}(p.first);
        auto hash2 = std::hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};

int main() {
    std::ifstream fin("dreptc.in");
    std::ofstream fout("dreptc.out");

    int N, MaxC;
    fin >> N >> MaxC;

    std::unordered_map<int, std::vector<int>> points_by_color_and_x[MaxC + 1];
    int x, y, c, rectangles = 0;

    for (int i = 0; i < N; ++i) {
        fin >> x >> y >> c;
        points_by_color_and_x[c][x].push_back(y);
    }

    for (int color = 1; color <= MaxC; ++color) {
        for (auto& kv : points_by_color_and_x[color]) {
            if (kv.second.size() > 1) {
                std::sort(kv.second.begin(), kv.second.end());
            }
        }

        for (auto& kv1 : points_by_color_and_x[color]) {
            for (auto& kv2 : points_by_color_and_x[color]) {
                if (kv1.first >= kv2.first) continue; // Ensure we only count each pair once

                std::vector<int>& y_values1 = kv1.second;
                std::vector<int>& y_values2 = kv2.second;
                std::unordered_set<int> common_y_values;

                for (int y_val1 : y_values1) {
                    if (std::binary_search(y_values2.begin(), y_values2.end(), y_val1)) {
                        common_y_values.insert(y_val1);
                    }
                }

                // Every pair of distinct y values form a rectangle
                rectangles += common_y_values.size() * (common_y_values.size() - 1) / 2;
            }
        }
    }

    fout << rectangles << '\n';

    fin.close();
    fout.close();
    return 0;
}
```

This solution correctly takes into account that we should only count each pair of corresponding points on the same horizontal line once for each pair of points on the same vertical line. By using a set (`common_y_values`), we ensure that we only count unique pairs, thus avoiding over-counting.
