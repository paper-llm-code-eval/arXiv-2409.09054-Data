{
  "success": true,
  "attempt": 2,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/767/2024-05-06T15:06:56.335Z-07982.log",
  "attemptStart": 1715008016.335,
  "attemptEnd": 1715008081.708,
  "attemptDuration": 65.37299990653992,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm> // Include for std::find\n\nusing namespace std;\n\nint main() {\n    ifstream in(\"dreptc.in\");\n    ofstream out(\"dreptc.out\");\n\n    int N, C;\n    in >> N >> C;\n\n    unordered_map<int, vector<pair<int, int>>> pointsByColor;\n    for (int i = 0; i < N; ++i) {\n        int x, y, color;\n        in >> x >> y >> color;\n        pointsByColor[color].emplace_back(x, y);\n    }\n\n    int maxRectangles = 0;\n    for (const auto& kv : pointsByColor) {\n        const auto& points = kv.second;\n        unordered_map<int, vector<int>> xPoints, yPoints;\n        for (const auto& point : points) {\n            xPoints[point.first].push_back(point.second);\n            yPoints[point.second].push_back(point.first);\n        }\n\n        for (const auto& kv_x : xPoints) {\n            for (size_t i = 0; i < kv_x.second.size(); ++i) {\n                for (size_t j = i + 1; j < kv_x.second.size(); ++j) {\n                    int y1 = kv_x.second[i];\n                    int y2 = kv_x.second[j];\n                    // Check if the points with x coordinate of kv_x.first and y coordinates y1, y2 form a rectangle\n                    for (int x : yPoints[y1]) {\n                        if (x != kv_x.first && find(yPoints[y2].begin(), yPoints[y2].end(), x) != yPoints[y2].end()) {\n                            maxRectangles++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Each rectangle is counted twice for each diagonal\n    out << maxRectangles / 2 << endl;\n\n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 3028,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}