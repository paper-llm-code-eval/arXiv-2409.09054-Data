{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/767/2024-05-06T15:07:17.316Z-03132.log",
  "attemptStart": 1715008037.316,
  "attemptEnd": 1715008079.335,
  "attemptDuration": 42.01900005340576,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nint main() {\n    ifstream in(\"dreptc.in\");\n    ofstream out(\"dreptc.out\");\n\n    int N, MaxC, x, y, c;\n    in >> N >> MaxC;\n\n    unordered_map<int, vector<Point>> points_by_color;\n    for (int i = 0; i < N; i++) {\n        in >> x >> y >> c;\n        points_by_color[c].push_back({x, y});\n    }\n    in.close();\n\n    int rectangles_count = 0;\n    for (const auto& kv : points_by_color) {\n        const auto& points = kv.second;\n        unordered_map<int, vector<int>> coord_map;\n\n        for (const auto& point : points) {\n            coord_map[point.x].push_back(point.y);\n        }\n\n        for (auto& kv : coord_map) {\n            sort(kv.second.begin(), kv.second.end());\n        }\n\n        for (const auto& kv1 : coord_map) {\n            for (const auto& kv2 : coord_map) {\n                if (kv1.first < kv2.first) {\n                    const vector<int>& cols1 = kv1.second;\n                    const vector<int>& cols2 = kv2.second;\n                    int common = 0;\n                    size_t i = 0, j = 0;\n                    while (i < cols1.size() && j < cols2.size()) {\n                        if (cols1[i] == cols2[j]) {\n                            common++;\n                            i++;\n                            j++;\n                        } else if (cols1[i] < cols2[j]) {\n                            i++;\n                        } else {\n                            j++;\n                        }\n                    }\n                    rectangles_count += common * (common - 1) / 2;\n                }\n            }\n        }\n    }\n\n    out << rectangles_count << endl;\n    out.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1948,
  "metadata": {
    "id": 767,
    "examples": [
      {
        "in": "9 2\n3 10 1\n3 8 2\n3 6 1\n3 4 1\n3 0 1\n6 0 1\n6 4 1\n6 8 2\n6 10 1",
        "out": "3",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte colorate dispuse în plan. Ele sunt identificate prin coordontele lor întregi, pe axele OX și OY. Fiecare punct are asociat un număr natural între $1$ și $C$ reprezentând codul culorii lui. Un dreptunghi se numește *corect* dacă îndeplinește simultan următoarele condiții:\n\n* toate cele patru vârfuri se regăsesc printre cele N puncte date;\n* are laturile paralele cu axele OX, OY;\n* are vârfurile colorate în aceeași culoare.\n\n# Cerință\n\nSă se determine numărul maxim de dreptunghiuri *corecte* care se pot forma cu cele $N$ puncte din plan.\n\n# Date de intrare\n\nPe prima linie a fișierul text `dreptc.in` se găsesc două numere $N, MaxC$ reprezentând numărul de puncte din plan și numărul de culori asociate punctelor. Pe următoarele $N$ linii se citesc câte trei numere $x \\ y \\ c$ reprezentând în ordine coordonata pe axa OX (abscisa), coordonata pe axa OY (ordonata) și codul culorii asociate punctului.\n\n# Date de ieșire\n\nPe prima linie a fișierul text `dreptc.out` se va scrie un singur număr cu semnificația numărul maxim de dreptunghiuri corecte.\n\n# Restricții și precizări\n\n* $1 \\leq N \\leq 1 \\ 000$;\n* $1 \\leq C \\leq 5$;\n* $-1 \\ 000 \\leq x, y \\leq 1 \\ 000$;\n* Nu există două puncte cu aceleași coordonate\n* $40$% din teste vor avea $N \\leq 100$;",
    "header": {
      "problem_id": 767,
      "problem_name": "dreptc",
      "tags": "[Brute Force]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 64,
      "console_input": false,
      "input_filename": "dreptc.in",
      "output_filename": "dreptc.out",
      "multiple_solutions": false,
      "original_source": "OJI 2007 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "64m",
    "filename": {
      "input": "dreptc.in",
      "output": "dreptc.out"
    },
    "consoleInteraction": false
  }
}