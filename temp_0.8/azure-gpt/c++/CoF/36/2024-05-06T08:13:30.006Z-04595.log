---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `subsecvente.in` and write to `subsecvente.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Fie `n` un număr natural și $M=\{S_1,S_2,…,S_n\}$ o mulțime de șiruri de caractere nevide. Fie $S_k$ un șir de caractere din `M`. Atunci, orice caracter al lui $S_k$ aparține mulțimii `{ 'a', 'b' }`. Notăm prin $|S_k|$ numărul caracterelor șirului $S_k$ sau, echivalent, lungimea sa. O subsecvență $S_k[i:j]$ a lui $S_k$ este formată din caracterele situate pe pozițiile consecutive `i, i+1, ..., j`. Astfel, dacă $S_k = abbbaababa$, atunci $S_k[3:6] = bbaa$ sau subsecvența evidențiată: ab**bbaa**baba.

# Cerință
Fiind dată o mulțime `M`, se cere să se determine lungimea maximă a unei subsecvențe care se găsește în toate șirurile din `M`.

# Date de intrare
Pe prima linie a fișierului de intrare `subsecvente.in` se găsește un număr natural `n` egal cu cardinalul mulțimii `M`. Pe fiecare din următoarele `n` linii se găsește câte un șir din mulțimea `M`.

# Date de ieșire
Pe prima linie a fișierului de ieșire `subsecvente.out` se va scrie un singur număr natural egal cu lungimea subsecvenței găsite.

# Restricții
* `1 < n < 5`
* Dacă $|S| = |S_1| + |S_2| + … + |S_n|$, atunci `|S| < 50 001`
* Se garantează că va exista întotdeauna soluție
* Se garantează că rezultatul nu va depăși `60`
* Pentru `30%` din teste: `|S| < 101`
* Pentru `55%` din teste: `|S| < 3 501`
* Pentru `80%` din teste: `|S| < 10 001`

---

Example:
`subsecvente.in`
```
4
abbabaaaaabb
aaaababab
bbbbaaaab
aaaaaaabaaab
```

`subsecvente.out`
```
5
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>
#include <vector>

using namespace std;

ifstream fin("subsecvente.in");
ofstream fout("subsecvente.out");

const int MAX_N = 5;
const int MAX_LENGTH = 10001;
string sequences[MAX_N];
int n;

bool isCommonSubsequence(const string &subseq) {
    for (int i = 1; i < n; ++i) {
        if (sequences[i].find(subseq) == string::npos) {
            return false;
        }
    }
    return true;
}

int main() {
    fin >> n;
    int min_length = MAX_LENGTH;
    for (int i = 0; i < n; ++i) {
        fin >> sequences[i];
        min_length = min(min_length, (int)sequences[i].length());
    }
    
    int max_len = 0;
    for (int len = 1; len <= min_length; ++len) {
        for (int start = 0; start <= sequences[0].length() - len; ++start) {
            string subseq = sequences[0].substr(start, len);
            if (isCommonSubsequence(subseq)) {
                max_len = len;
                break;
            }
        }
        if(max_len != len) {
            break;
        }
    }

    fout << max_len << '\n';
    
    fin.close();
    fout.close();
    return 0;
}
```

This solution iterates over all possible lengths `len` of subsequences starting from 1 up to the minimum length of the input sequences. For each length, it checks all possible subsequences of that length from the first sequence and verifies if they are common to all sequences using the `isCommonSubsequence` function. Once it finds a common subsequence or finishes checking all possible subsequences of a certain length without finding a common subsequence, it stops searching for longer subsequences. The maximum length found is then written to the output file.
