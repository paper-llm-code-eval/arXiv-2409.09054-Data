{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 0,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/36/2024-05-06T08:13:30.060Z-07826.log",
  "attemptStart": 1714983210.06,
  "attemptEnd": 1714983252.758,
  "attemptDuration": 42.69799995422363,
  "code": "#include <fstream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nifstream fin(\"subsecvente.in\");\nofstream fout(\"subsecvente.out\");\n\nint n;\nvector<string> sequences;\n\nint find_max_common_subsequence_length() {\n    int max_length = 0;\n    for (size_t start = 0; start < sequences[0].length(); ++start) {\n        for (size_t len = 1; start + len <= sequences[0].length(); ++len) {\n            string subseq = sequences[0].substr(start, len);\n            bool found_in_all = true;\n\n            for (int i = 1; i < n; ++i) {\n                if (sequences[i].find(subseq) == string::npos) {\n                    found_in_all = false;\n                    break;\n                }\n            }\n\n            if (found_in_all) {\n                max_length = max(max_length, int(subseq.length()));\n            }\n        }\n    }\n    return max_length;\n}\n\nint main() {\n    fin >> n;\n    sequences.resize(n);\n    \n    fin.ignore(); // To skip the newline after reading n\n    \n    for (int i = 0; i < n; ++i) {\n        getline(fin, sequences[i]);\n    }\n\n    int max_length = find_max_common_subsequence_length();\n    fout << max_length << '\\n';\n\n    fin.close();\n    fout.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 1145,
  "metadata": {
    "id": 36,
    "examples": [
      {
        "in": "4\nabbabaaaaabb\naaaababab\nbbbbaaaab\naaaaaaabaaab",
        "out": "5",
        "explainer": ""
      }
    ],
    "body": "Fie `n` un număr natural și $M=\\{S_1,S_2,…,S_n\\}$ o mulțime de șiruri de caractere nevide. Fie $S_k$ un șir de caractere din `M`. Atunci, orice caracter al lui $S_k$ aparține mulțimii `{ 'a', 'b' }`. Notăm prin $|S_k|$ numărul caracterelor șirului $S_k$ sau, echivalent, lungimea sa. O subsecvență $S_k[i:j]$ a lui $S_k$ este formată din caracterele situate pe pozițiile consecutive `i, i+1, ..., j`. Astfel, dacă $S_k = abbbaababa$, atunci $S_k[3:6] = bbaa$ sau subsecvența evidențiată: ab**bbaa**baba.\n\n# Cerință\nFiind dată o mulțime `M`, se cere să se determine lungimea maximă a unei subsecvențe care se găsește în toate șirurile din `M`.\n\n# Date de intrare\nPe prima linie a fișierului de intrare `subsecvente.in` se găsește un număr natural `n` egal cu cardinalul mulțimii `M`. Pe fiecare din următoarele `n` linii se găsește câte un șir din mulțimea `M`.\n\n# Date de ieșire\nPe prima linie a fișierului de ieșire `subsecvente.out` se va scrie un singur număr natural egal cu lungimea subsecvenței găsite.\n\n# Restricții\n* `1 < n < 5`\n* Dacă $|S| = |S_1| + |S_2| + … + |S_n|$, atunci `|S| < 50 001`\n* Se garantează că va exista întotdeauna soluție\n* Se garantează că rezultatul nu va depăși `60`\n* Pentru `30%` din teste: `|S| < 101`\n* Pentru `55%` din teste: `|S| < 3 501`\n* Pentru `80%` din teste: `|S| < 10 001`",
    "header": {
      "problem_id": 36,
      "problem_name": "subsecvente",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 128,
      "console_input": false,
      "input_filename": "subsecvente.in",
      "output_filename": "subsecvente.out",
      "multiple_solutions": false,
      "original_source": "OJI 2013 XI-XII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "128m",
    "filename": {
      "input": "subsecvente.in",
      "output": "subsecvente.out"
    },
    "consoleInteraction": false
  }
}