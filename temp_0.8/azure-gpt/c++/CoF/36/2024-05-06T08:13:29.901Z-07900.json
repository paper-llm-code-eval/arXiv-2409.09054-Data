{
  "success": true,
  "attempt": 0,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 2,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/36/2024-05-06T08:13:29.901Z-07900.log",
  "attemptStart": 1714983209.901,
  "attemptEnd": 1714983374.066,
  "attemptDuration": 164.16499996185303,
  "code": "#include <fstream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst char* inFileName = \"subsecvente.in\";\nconst char* outFileName = \"subsecvente.out\";\n\nbool is_common_subsequence(const string& subsequence, const vector<string>& sequences) {\n    for (const auto& seq : sequences) {\n        if (seq.find(subsequence) == string::npos) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint find_max_subsequence_length(const vector<string>& sequences) {\n    size_t min_length = sequences[0].size();\n    for (const auto& seq : sequences) {\n        min_length = min(min_length, seq.size());\n    }\n\n    // Iterate from the longest possible subsequence length to the shortest\n    for (size_t len = min_length; len > 0; --len) {\n        for (size_t i = 0; i < sequences.size(); ++i) {\n            const string& seq = sequences[i];\n            for (size_t start = 0; start + len <= seq.size(); ++start) {\n                string subseq = seq.substr(start, len);\n                if (is_common_subsequence(subseq, sequences)) {\n                    return len;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\nint main() {\n    ifstream inFile(inFileName);\n    ofstream outFile(outFileName);\n    vector<string> sequences;\n    int n;\n\n    inFile >> n;\n    sequences.reserve(n);\n    for (int i = 0; i < n; ++i) {\n        string temp;\n        inFile >> temp;\n        sequences.push_back(temp);\n    }\n\n    int max_length = find_max_subsequence_length(sequences);\n    outFile << max_length;\n\n    inFile.close();\n    outFile.close();\n\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2593,
  "metadata": {
    "id": 36,
    "examples": [
      {
        "in": "4\nabbabaaaaabb\naaaababab\nbbbbaaaab\naaaaaaabaaab",
        "out": "5",
        "explainer": ""
      }
    ],
    "body": "Fie `n` un număr natural și $M=\\{S_1,S_2,…,S_n\\}$ o mulțime de șiruri de caractere nevide. Fie $S_k$ un șir de caractere din `M`. Atunci, orice caracter al lui $S_k$ aparține mulțimii `{ 'a', 'b' }`. Notăm prin $|S_k|$ numărul caracterelor șirului $S_k$ sau, echivalent, lungimea sa. O subsecvență $S_k[i:j]$ a lui $S_k$ este formată din caracterele situate pe pozițiile consecutive `i, i+1, ..., j`. Astfel, dacă $S_k = abbbaababa$, atunci $S_k[3:6] = bbaa$ sau subsecvența evidențiată: ab**bbaa**baba.\n\n# Cerință\nFiind dată o mulțime `M`, se cere să se determine lungimea maximă a unei subsecvențe care se găsește în toate șirurile din `M`.\n\n# Date de intrare\nPe prima linie a fișierului de intrare `subsecvente.in` se găsește un număr natural `n` egal cu cardinalul mulțimii `M`. Pe fiecare din următoarele `n` linii se găsește câte un șir din mulțimea `M`.\n\n# Date de ieșire\nPe prima linie a fișierului de ieșire `subsecvente.out` se va scrie un singur număr natural egal cu lungimea subsecvenței găsite.\n\n# Restricții\n* `1 < n < 5`\n* Dacă $|S| = |S_1| + |S_2| + … + |S_n|$, atunci `|S| < 50 001`\n* Se garantează că va exista întotdeauna soluție\n* Se garantează că rezultatul nu va depăși `60`\n* Pentru `30%` din teste: `|S| < 101`\n* Pentru `55%` din teste: `|S| < 3 501`\n* Pentru `80%` din teste: `|S| < 10 001`",
    "header": {
      "problem_id": 36,
      "problem_name": "subsecvente",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.2,
      "memory_limit_mb": 128,
      "console_input": false,
      "input_filename": "subsecvente.in",
      "output_filename": "subsecvente.out",
      "multiple_solutions": false,
      "original_source": "OJI 2013 XI-XII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "128m",
    "filename": {
      "input": "subsecvente.in",
      "output": "subsecvente.out"
    },
    "consoleInteraction": false
  }
}