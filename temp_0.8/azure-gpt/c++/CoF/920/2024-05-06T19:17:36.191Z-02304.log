---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <bitset>
#include <cmath>

using namespace std;

// Utility function to check if a number is prime
bool is_prime(int num) {
    if (num <= 1) return false;
    if (num <= 3) return true;
    if (num % 2 == 0 || num % 3 == 0) return false;
    for (int i = 5; i * i <= num; i += 6)
        if (num % i == 0 || num % (i + 2) == 0)
            return false;
    return true;
}

// Function to find the largest prime in a vector of numbers
int largest_prime(const vector<int> &numbers) {
    int max_prime = 0;
    for (int num : numbers)
        if (is_prime(num) && num > max_prime)
            max_prime = num;
    return max_prime;
}

// Reading input, processing data, and writing output
int main() {
    ifstream fin("tai.in");
    ofstream fout("tai.out");

    int C, N, num;
    fin >> C >> N;
    vector<int> numbers(N), primes;

    for (int i = 0; i < N; ++i) {
        fin >> numbers[i];
    }

    if (C == 1) {
        fout << largest_prime(numbers) << '\n';
    } else if (C == 2) {
        for (int num : numbers) {
            for (size_t pos = 1; pos < to_string(num).length(); ++pos) {
                int first_part = stoi(to_string(num).substr(0, pos));
                int second_part = stoi(to_string(num).substr(pos));
                if (is_prime(first_part)) primes.push_back(first_part);
                if (is_prime(second_part)) primes.push_back(second_part);
            }
        }
        fout << largest_prime(primes) << '\n';
    } else if (C == 3) {
        for (int num : numbers) {
            string num_str = to_string(num);
            for (size_t pos1 = 1; pos1 < num_str.length() - 1; ++pos1) {
                for (size_t pos2 = pos1 + 1; pos2 < num_str.length(); ++pos2) {
                    int first_part = stoi(num_str.substr(0, pos1));
                    int second_part = stoi(num_str.substr(pos1, pos2 - pos1));
                    int third_part = stoi(num_str.substr(pos2));
                    if (is_prime(first_part)) primes.push_back(first_part);
                    if (is_prime(second_part)) primes.push_back(second_part);
                    if (is_prime(third_part)) primes.push_back(third_part);
                }
            }
        }
        fout << largest_prime(primes) << '\n';
    }

    fin.close();
    fout.close();
    return 0;
}
```
This solution meets the criteria of reading from `tai.in`, writing to `tai.out`, and not using `cin`, `cout`, `printf`, or `scanf`. It provides the necessary functions to check for primes and find the largest prime according to the given task conditions. It also handles cases C = 1, C = 2, and C = 3 for the respective task requirements.
