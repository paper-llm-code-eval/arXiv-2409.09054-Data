---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `tai.in` and write to `tai.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un număr este prim dacă are exact doi divizori naturali. Prin tăierea unui număr în $p$ părți înțelegem împărțirea acestuia în $p$ numere, fiecare de cel puțin o cifră, astfel încât prin alipirea numerelor obținute de la stânga la dreapta obținem numărul inițial.

De exemplu, dacă împărțim numărul $12045$ în două părți avem patru variante de tăiere obținându-se numerele: $1$ și $2045$; $12$ și $045$; $120$ și $45$; $1204$ și $5$. Dacă îl împărțim în trei părți avem șase variante de tăiere obținându-se numerele $1$, $2$ și $045$; $1$, $20$ și $45$; $1$, $204$ și $5$; $12$, $0$ și $45$; $12$, $04$ și $5$; $120$, $4$ și $5$.

# Cerință

Se consideră un șir format din $N$ numere naturale.

1. Determinați cel mai mare număr prim din șirul celor $N$ numere.
2. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în două părți a fiecărui număr din șirul celor $N$.
3. Determinați cel mai mare număr prim dintre cele obținute prin tăierea în trei părți a fiecărui număr din șirul celor $N$.

# Date de intrare


Pe prima linie a fișierului `tai.in` se găsește numărul $C$ care poate avea doar valorile $1$, $2$ sau $3$ și reprezintă cerința care urmează a fi rezolvată. Pe a doua linie se găsește $N$, cu semnificația din enunț, iar pe a treia linie se găsește șirul celor $N$ numere naturale despărțite prin câte un spațiu.


# Date de ieșire


În fișierul de ieșire `tai.out` pe prima linie se va afișa un număr natural reprezentând răspunsul la cerința specificată.


# Restricții și precizări

* $1 \leq N \leq 100$;
* $0 \leq$ orice număr din șir $\leq 10^9$;
* Pentru cerințele $2$ și $3$ se garantează că pentru toate numerele din șir se poate efectua tăierea
* Pentru cerința $1$ dacă șirul nu conține numere prime se va afișa $0$
* Pentru cerințele $2$ și $3$ dacă în urma tăierilor nu se obține niciun număr prim, se va afișa $0$
* Pentru rezolvarea fiecărei cerințe se obțin $30$ de puncte.

---

Example:
`tai.in`
```
1
5
2 13 21 17 1
```

`tai.out`
```
17
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>
#include <string>

std::ifstream fin("tai.in");
std::ofstream fout("tai.out");

bool isPrime(int n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i * i <= n; i += 6)
        if (n % i == 0 || n % (i + 2) == 0) return false;
    return true;
}

int main() {
    int C, N;
    fin >> C >> N;

    std::vector<int> numbers(N);
    int maxPrime = 0;

    for (int i = 0; i < N; ++i) {
        fin >> numbers[i];
        if (C == 1 && isPrime(numbers[i]))
            maxPrime = std::max(maxPrime, numbers[i]);
    }

    if (C == 2 || C == 3) {
        for (int number : numbers) {
            std::string strNum = std::to_string(number);
            int len = strNum.length();

            if (C == 2) {
                for (int i = 1; i < len; ++i) {
                    int part1 = std::stoi(strNum.substr(0, i));
                    int part2 = std::stoi(strNum.substr(i));

                    if (isPrime(part1)) maxPrime = std::max(maxPrime, part1);
                    if (isPrime(part2)) maxPrime = std::max(maxPrime, part2);
                }
            } else {
                for (int i = 1; i < len - 1; ++i) {
                    for (int j = i + 1; j < len; ++j) {
                        int part1 = std::stoi(strNum.substr(0, i));
                        int part2 = std::stoi(strNum.substr(i, j - i));
                        int part3 = std::stoi(strNum.substr(j));

                        if (isPrime(part1)) maxPrime = std::max(maxPrime, part1);
                        if (isPrime(part2)) maxPrime = std::max(maxPrime, part2);
                        if (isPrime(part3)) maxPrime = std::max(maxPrime, part3);
                    }
                }
            }
        }
    }

    fout << maxPrime;
    fin.close();
    fout.close();
    return 0;
}
```
This C++ code solves the programming challenge by reading from `tai.in` and writing to `tai.out`. It doesn't use `cin >>`, `cout <<`, `printf()`, or `scanf()` for reading input or writing output. It defines an `isPrime` function to test for primality and uses `ifstream` and `ofstream` for file I/O. The code first handles the case where all numbers are checked for the largest prime (C=1), then moves on to splitting each number into two parts (C=2) and into three parts (C=3) to find the largest prime among the parts.
