---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `primprim.in` and write to `primprim.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Pentru un număr natural `a` definim *costul* ca fiind valoarea absolută (modulul) diferenței dintre `a` și numărul prim cel mai apropiat de `a`. Asupra unui șir de $n$ numere naturale, situate pe poziții numerotate de la $1$ la $n$, se aplică, în ordine, o succesiune de $q$ operații. O operație constă dintr-o înlocuire și o afișare și este descrisă sub forma `i x p`, cu semnificația:
* mai întâi înlocuim cu $x$ elementul din șir de pe poziția $i$;
* apoi afișăm suma minimă totală a costurilor unor elemente convenabil selectate de pe $p$ poziții distincte din șir.

# Cerință

Cunoscând $n$ și cele $n$ elemente ale șirului, scrieți un program care să determine:
1. suma costurilor tuturor elementelor din șirul dat;
2. rezultatele afișate în urma aplicării fiecăreia dintre cele $q$ operații, date în forma precizată.

# Date de intrare

Fișierul de intrare `primprim.in` va conține pe prima linie un număr natural $C$, reprezentând cerința care trebuie să fie rezolvată ($1$ sau $2$), pe a doua linie numărul natural $n$, cu semnificația din enunț, iar pe a treia linie cele $n$ elemente din șir, în ordinea din șir. 
Dacă $C = 2$, pe a patra linie se află numărul natural $q$, reprezentând numărul de operații, iar pe următoarele $q$ linii se află cele $q$ operații, câte o operație pe linie, în forma descrisă în enunț. Numerele scrise pe aceeași linie sunt separate prin câte un spațiu.

# Date de ieșire
Dacă $C = 1$, fișierul de ieșire `primprim.out` va conține o singură linie pe care va fi afișată suma costurilor tuturor elementelor din șir. 
Dacă $C = 2$, fișierul de ieșire `primprim.out` va conține $q$ linii, pe linia $i$ fiind scris rezultatul afișat după executarea celei de a $i$-a operații din fișierul de intrare.

# Restricții și precizări
* $1 \leq q \leq 2 * 10^5$;
* $1 \leq i,p \leq n \leq 10^6$; $1 \leq x \leq 10^6$;
* Elementele șirului sunt numere naturale nenule $\leq 10^6$;
* Pentru $20$ de puncte, $C = 1$, $n = 1$;
* Pentru $22$ de puncte, $C = 1$, $1 \lt n \leq 1 \ 000$;
* Pentru $28$ de puncte, $C = 2$, $n \leq 1 \ 000$, $q \leq 10$;
* Pentru $30$ de puncte, $C = 2$ și nu există restricții suplimentare.

---

Example:
`primprim.in`
```
1
5
8 1 3 5 9
```

`primprim.out`
```
4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

const int MAX_N = 1000000;
vector<int> primes;

void SieveOfEratosthenes() {
    vector<bool> prime(MAX_N + 1, true);
    for (int p = 2; p * p <= MAX_N; p++) {
        if (prime[p]) {
            for (int i = p * p; i <= MAX_N; i += p)
                prime[i] = false;
        }
    }
    for (int p = 2; p <= MAX_N; p++)
        if (prime[p])
            primes.push_back(p);
}

int FindClosestPrime(int n) {
    auto lower = lower_bound(primes.begin(), primes.end(), n);
    int lower_prime = (lower != primes.begin()) ? *prev(lower) : *lower;
    int upper_prime = (lower != primes.end()) ? *lower : lower_prime;
    return (abs(upper_prime - n) < abs(lower_prime - n)) ? upper_prime : lower_prime;
}

int main() {
    SieveOfEratosthenes();
    
    ifstream in("primprim.in");
    ofstream out("primprim.out");
    
    int C, n;
    in >> C >> n;
    
    vector<int> numbers(n), costs(n);
    for (int i = 0; i < n; ++i) {
        in >> numbers[i];
        costs[i] = abs(numbers[i] - FindClosestPrime(numbers[i]));
    }

    if (C == 1) {
        int total_cost = 0;
        for (int cost : costs)
            total_cost += cost;
        out << total_cost << '\n';
    } else if (C == 2) {
        int q, i, x, p;
        in >> q;
        while (q--) {
            in >> i >> x >> p;
            --i; // 0-based indexing
            costs[i] = abs(x - FindClosestPrime(x));
            numbers[i] = x;
            vector<int> sorted_costs = costs;
            nth_element(sorted_costs.begin(), sorted_costs.begin() + p, sorted_costs.end());
            int total_cost = 0;
            for (int j = 0; j < p; ++j)
                total_cost += sorted_costs[j];
            out << total_cost << '\n';
        }
    }

    in.close();
    out.close();

    return 0;
}
```
This code includes efficient prime number generation using Sieve of Eratosthenes and binary search to find the closest prime. For the second part (C = 2), it uses nth_element for an optimized partial sort to find the total cost of the smallest p elements after each update. It avoids using `cin` and `cout`, `printf`, and `scanf` for file I/O, and should be fairly fast for all test cases.
