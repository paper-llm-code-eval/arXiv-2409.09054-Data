---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `secvente.in` and write to `secvente.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Mariei îi plac numerele prime și puterile numerelor prime. Pornind de la un număr prim $p$, ea construiește noi numere, fiecare număr construit fiind un produs de forma $p^y$ ($y \in ℕ$, $y \neq 0$) sau $q \cdot p^m$, $m \in ℕ$ și $q$ un număr prim, numindu-le numere $p$-prime. De exemplu, numerele $2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17 $sunt primele $13$ numere $2$-prime deoarece $2 = 2^1$, $3 = 3 \cdot 2^0$, $4 = 2^2$, $5 = 5 \cdot 2^0$, $6 = 3 \cdot 2^1$, $7 = 7 \cdot 2^0$, $8 = 2^3$, $10 = 5 \cdot 2^1$, $12 = 3 \cdot 2^2$, $13 = 13 \cdot 2^0$, $14 = 7 \cdot 2^1$, $16 = 2^4$, $17 = 17 \cdot 2^0$.

Într-o zi Maria a găsit o foaie de hârtie, pe care era scris un șir format din $n$ numere naturale nenule. Cum pe lângă numerele $p$-prime ea este pasionată și de secvențe, și-a pus următoarea întrebare: câte secvențe sunt pe foaie cu următoarele proprietăți:

* conțin exact $k$ numere $p$-prime;
* încep și se termină cu un număr $p$-prim.

În plus, Maria dorește să știe care este poziția de început și cea de final, pentru fiecare secvență descoperită, relative la șirul scris pe foaia de hârtie.

# Cerință

Scrieți un program care să citească mai multe seturi de date, fiecare set fiind format din numerele $n, p, k$, cu semnificațiile din enunț, și șirul cu $n$ elemente $a_1, a_2, a_3, \dots, a_n$, numerele Mariei. Programul va determina pentru fiecare set de date numărul secvențelor ce conțin exact $k$ numere $p$-prime, precum și pozițiile de început și de final ale acestor secvențe în șirul din set.

# Date de intrare

Pe prima linie a fișierului `secvente.in` se află numărul $D$ reprezentând numărul de seturi de date din fișier. Seturile de date sunt scrise în fișier pe linii succesive. Pentru fiecare set de date, prima linie conține câte trei numere naturale: $n$ (numărul de elemente de pe foaie), $p$ și $k$ (cu semnificația din enunț), separate prin câte un spațiu, iar fiecare dintre următoarele $n$ linii conține câte un număr natural al șirului $a_1, a_2, a_3, \dots, a_n$, numerele din șirul Mariei.

# Date de ieșire

Fișierul `secvente.out` va conține $D$ soluții corespunzătoare celor $D$ seturi de date. Pentru fiecare soluție prima linie va conține un număr $x$ reprezentând numărul de secvențe ce îndeplinesc proprietățile cerute, iar fiecare dintre următoarele $x$ linii vor conține câte $2$ numere naturale, separate printr-un spațiu, reprezentând poziția de început, respectiv de final a fiecărei secvențe, linii ordonate crescător după poziția de început. Dacă în șir nu există o astfel de secvență, prima linie a setului va conține valoarea $0$.

# Restricții și precizări

* $1 \leq D \leq 15$;
* $1 \leq k, n \leq 15 \ 000$;
* $2 \leq p \leq 30 \ 000$; $p$ este un număr natural prim
* $1 \leq a_1, a_2, a_3, \dots, a_n \leq 30 \ 000$; $a_1, a_2, a_3, \dots, a_n \in ℕ$
* Pozițiile din șir sunt numerotate de la 1.
* Numărul $1$ nu este $p$-prim.
* O secvență dintr-un șir este formată din elemente aflate pe poziții consecutive în șirul dat.

---

Example:
`secvente.in`
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```

`secvente.out`
```
2
1 2
2 4
0
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <cmath>

bool is_prime(int n) {
    if (n < 2) return false;
    if (n == 2 || n == 3) return true;
    if (n % 2 == 0 || n % 3 == 0) return false;
    for (int i = 5; i <= std::sqrt(n); i += 6)
        if (n % i == 0 || n % (i + 2) == 0)
            return false;
    return true;
}

bool is_p_prime(int num, int p) {
    if (num == p) return true;
    if (num % p != 0) return is_prime(num);
    while (num % p == 0) num /= p;
    return is_prime(num);
}

int main() {
    std::ifstream fin("secvente.in");
    std::ofstream fout("secvente.out");

    int D, n, p, k, num;
    fin >> D;
    while (D--) {
        fin >> n >> p >> k;
        std::vector<bool> p_prime_map(n, false);

        for (int i = 0; i < n; ++i) {
            fin >> num;
            p_prime_map[i] = is_p_prime(num, p);
        }

        int total_sequences = 0;
        std::vector<std::pair<int, int>> sequences;

        for (int i = 0; i < n; ++i) {
            if (p_prime_map[i]) {
                int count = 1, j = i + 1;
                while (j < n && count < k) {
                    if (p_prime_map[j]) ++count;
                    ++j;
                }
                if (count == k) {
                    while (j < n && !p_prime_map[j]) ++j;
                    if (j < n && p_prime_map[j]) {
                        sequences.push_back(std::make_pair(i + 1, j + 1));
                        total_sequences++;
                    }
                }
                while (i + 1 < n && p_prime_map[i + 1]) ++i;
            }
        }

        fout << total_sequences << '\n';
        for (const auto &seq : sequences) {
            fout << seq.first << ' ' << seq.second << '\n';
        }
    }

    fin.close();
    fout.close();
    return 0;
}
```
---------- user ----------


Program result did not match expected result.
Input data:
```
2
5 3 2
7
27
4
45
1
3 5 7
3
4
5
```
Expected output:
```
2
1 2
2 4
0
```
Found output:
```
0
0
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

After evaluating the problem, I can see that the initial solution did not correctly handle the following points:

1. It failed to count the $p$-prime sequences correctly, because it did not consider sequences that start with a $p$-prime number and end with a $p$-prime number, but have non-$p$-prime numbers in between, as long as the count of $p$-prime numbers in the sequence is exactly $k$.
2. The solution did not continue searching for sequences after finding a $p$-prime number that completes the $k$ count. It should continue to look for the end of the sequence, which is the next $p$-prime number.

Let's fix these issues by modifying the algorithm:

- We will use two pointers to iterate over the sequence: one to mark the beginning of a potential sequence and one to find the end of it.
- We will count the $p$-prime numbers between these two pointers.
- If we find exactly $k$ $p$-prime numbers, we will include this sequence in our results and move the beginning pointer to the next $p$-prime number after the start of the current sequence.

Here is the revised solution:

```cpp
#include <fstream>
#include <vector>
#include <cmath>

bool is_prime(int n) {
    if (n <= 1) return false;
    if (n % 2 == 0) return n == 2;
    for (int i = 3; i * i <= n; i += 2)
        if (n % i == 0)
            return false;
    return true;
}

bool is_p_prime(int num, int p) {
    if (num == 1) return false;
    if (num == p) return true;
    if (num % p != 0) return is_prime(num);
    while (num % p == 0) num /= p;
    return num == 1 ? true : is_prime(num);
}

int main() {
    std::ifstream fin("secvente.in");
    std::ofstream fout("secvente.out");

    int D, n, p, k, num;
    fin >> D;
    while (D--) {
        fin >> n >> p >> k;
        std::vector<int> p_primes;

        for (int i = 0; i < n; ++i) {
            fin >> num;
            if (is_p_prime(num, p)) {
                p_primes.push_back(i + 1); // Store 1-based index of p-primes
            }
        }

        int total_sequences = 0;
        std::vector<std::pair<int, int>> sequences;

        for (size_t i = 0; i + k - 1 < p_primes.size(); ++i) {
            for (size_t j = i + k - 1; j < p_primes.size(); ++j) {
                // Check if this sequence has exactly k p-prime numbers
                if (j - i == k - 1) {
                    sequences.emplace_back(p_primes[i], p_primes[j]);
                    total_sequences++;
                    break; // Move to the next sequence starting point
                }
            }
        }

        fout << total_sequences << '\n';
        for (const auto &seq : sequences) {
            fout << seq.first << ' ' << seq.second << '\n';
        }
    }

    fin.close();
    fout.close();
    return 0;
}
```

This revised solution should now correctly identify the $p$-prime sequences according to the rules given in the challenge. After processing all the $p$-prime numbers and their positions in the input sequence, we use two nested loops to find all possible sequences with exactly $k$ $p$-prime numbers, ensuring that sequences start and end with a $p$-prime number.
