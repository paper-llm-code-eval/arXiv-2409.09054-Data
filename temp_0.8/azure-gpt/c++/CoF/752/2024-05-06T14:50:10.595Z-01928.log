---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Sure, here is a possible solution for the programming challenge in C++:

```cpp
#include <fstream>

using namespace std;

// Function to count the occurrences of a digit in ranges
int countDigitOccurrences(long n, int digit) {
    int count = 0;
    for (long i = 1; i <= n; i *= 10) {
        long divider = i * 10;
        count += (n / divider) * i + min(max(n % divider - digit * i + 1, 0L), i);
        if (digit == 0) count -= i;
    }
    return count;
}

int main() {
    ifstream in("cifre.in");
    ofstream out("cifre.out");

    long n;
    int c;
    in >> n >> c;
    in.close();

    int count = countDigitOccurrences(n, c);
    out << count;
    out.close();

    return 0;
}
```

This C++ code defines a function `countDigitOccurrences` that calculates the number of occurrences of a digit in the range from `1` to `n`. It avoids using slow input/output operations (`cin`, `cout`, `printf`, `scanf`) and instead uses the faster file streams to read and write data.
