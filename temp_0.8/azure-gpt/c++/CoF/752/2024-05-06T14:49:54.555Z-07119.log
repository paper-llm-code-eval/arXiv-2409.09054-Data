---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `cifre.in` and write to `cifre.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Ionel a primit temă de la profesorul său: să scrie pe hârtie numerele de la 1 la n. Cum numărul n era destul de mare el s-a cam plictisit şi a început să se joace numărând de câte ori a apărut o anumită cifră în numerele ce trebuiau scrise. Cum număratul era o activitate destul de lentă, el a găsit o metodă simplă de a calcula de câte ori a apărut o cifră în toate numerele tipărite.

# Cerință

Scrieţi un program care, citind numărul n şi o cifră nenulă c, afişează numărul de apariţii ale cifrei c în reprezentarea tuturor numerelor de la 1 la n.

# Date de intrare

Pe prima linie a fișierului de intrare `cifre.in` se găsesc două numere întregi, $n$ și $c$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `cifre.out` se va găsi un singur număr întreg, numărul de apariţii al cifrei $c$ în reprezentarea tuturor numerelor de la $1$ la $n$.

# Restricții și precizări

* $1 \leq n \leq 10^9$;
* $1 \leq c \leq 9$;

---

Example:
`cifre.in`
```
15 1
```

`cifre.out`
```
8
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>

using namespace std;

// Utility function to count the occurrences of the digit 'c' in numbers from 1 to n.
long long countDigitOccurrences(long long n, int c) {
    long long occurrences = 0;
    long long factor = 1;
    long long lowerNum = 0, currNum = 0, higherNum = 0;

    while (n / factor != 0) {
        lowerNum = n - (n / factor) * factor;
        currNum = (n / factor) % 10;
        higherNum = n / (factor * 10);

        if (currNum < c) {
            occurrences += higherNum * factor;
        } else if (currNum == c) {
            occurrences += higherNum * factor + lowerNum + 1;
        } else {
            occurrences += (higherNum + 1) * factor;
        }

        factor *= 10;
    }

    return occurrences;
}

int main() {
    ifstream inputFile("cifre.in");
    ofstream outputFile("cifre.out");

    long long n;
    int c;
    inputFile >> n >> c;
    long long result = countDigitOccurrences(n, c);
    outputFile << result << '\n';

    inputFile.close();
    outputFile.close();

    return 0;
}
```

Explanation:

1. The function `countDigitOccurrences` takes `n` and `c`, and counts how many times `c` appears in all numbers from 1 to `n`.
2. Inside this function, a while loop iterates as long as `n / factor != 0`.
3. On each iteration, we calculate `lowerNum`, `currNum`, and `higherNum`, which represent parts of the number when divided by the current `factor`.
4. Several conditions check the relation between `currNum` and `c` to correctly count all occurrences of `c`.
5. The `main` function is responsible for file handling and calling `countDigitOccurrences`.
6. The final count is written to `cifre.out`.

This solution avoids using `cin`, `cout`, `printf()`, and `scanf()`, uses file streams for I/O, and should be efficient in terms of execution time.
