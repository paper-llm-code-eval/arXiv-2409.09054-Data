---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `turnuri.in` and write to `turnuri.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Cel mai nou proiect imobiliar din capitală este compus din $N$ blocuri-turn, construite unul lângă altul, de-a lungul unui bulevard central și numerotate de la $1$ la $N$. Pentru fiecare turn se cunoaște numărul etajelor din care este compus acesta și se mai știe că nu există două turnuri cu același număr de etaje. Ultimele norme urbanistice definesc **coeficientul de frumusețe** al turnului cu numărul $T$, ca fiind numărul turnurilor din secvența de turnuri care începe cu turnul $S$, se termină cu turnul $D$ și are următoarele proprietăți:
* $1 \leq S \leq T \leq D \leq N$
* numărul etajelor fiecărui turn din secvență, cu excepţia turnului $T$, este mai mic decât numărul de etaje ale turnului $T$
* Dacă $S ≠ 1$ atunci turnul $S-1$ este cel mai apropiat turn din stânga turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$
* Dacă $D ≠ N$ atunci turnul $D+1$ este cel mai apropiat turn din dreapta turnului $T$, care are un număr de etaje strict mai mare decât turnul $T$

**Coeficientul de frumusețe al întregului ansamblu de turnuri** este suma coeficienților de frumusețe avuţi de turnurile componente. Dezvoltatorul proiectului dorește să renunțe la unul dintre turnuri și să construiască în locul acestuia un restaurant subteran, acesta considerându-se un turn cu **zero** etaje. Dezvoltatorul dorește să calculeze coeficientul de frumusețe al ansamblului de turnuri, pentru fiecare posibilă amplasare a restaurantului.

# Cerință

Cunoscând numărul $N$ de turnuri și numărul etajelor fiecăruia, determinați coeficientul de frumusețe al ansamblului de turnuri pentru toate cele $N$ posibilități de amplasare ale restaurantului, pe pozițiile $1$, $2$, ..., $N$.

# Date de intrare


Datele de intrare se citesc din fişierul `turnuri.in`, care are următoarea structură:

* pe prima linie se află numărul natural $N$, reprezentând numărul de turnuri
* pe a doua linie se află $N$ valori naturale nenule, separate prin câte un spațiu, reprezentând numărul etajelor turnurilor

# Date de ieșire


Datele de ieşire se vor scrie în fişierul `turnuri.out`, pe linii separate, astfel: pe linia $i$ ($1 \leq i \leq N$) se găsește un număr natural reprezentând coeficientul de frumusețe al ansamblului dacă restaurantul s-ar construi în locul turnului $i$.


# Restricții și precizări

* $1 \leq N \leq 100 \ 000$
* Numărul de etaje ale unui turn este un număr natural între $1$ și $1 \ 000 \ 000 \ 000$
* Se acordă $10$ puncte din oficiu.

| Subtask | Punctaj | Restricții          |
| - | ------- | ------------------- |
| 1 | 30      | $N \leq 100$ |
| 2 | 30      | $N \leq 2 \ 000$      |
| 3 | 30      | Fără restricții suplimentare.      |

---

Example:
`turnuri.in`
```
7
10 3 1 7 8 6 5
```

`turnuri.out`
```
19
22
22
22
21
22
22
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:Here is a C++ solution for the given problem using stack data structure and precomputed arrays for left and right limits.

```cpp
#include <fstream>
#include <stack>
#include <vector>

using namespace std;

int main() {
    ifstream fin("turnuri.in");
    ofstream fout("turnuri.out");

    int N;
    fin >> N;

    vector<int> heights(N + 1);
    vector<int> left(N + 1), right(N + 1), sum_left(N + 1), sum_right(N + 1);
    stack<int> s;

    for (int i = 1; i <= N; ++i) {
        fin >> heights[i];
    }
    fin.close();

    // Compute next greater elements to the left
    for (int i = 1; i <= N; ++i) {
        while (!s.empty() && heights[s.top()] < heights[i]) {
            s.pop();
        }
        left[i] = (s.empty()) ? 0 : s.top();
        s.push(i);
    }

    // Clear the stack to compute next greater elements to the right
    while (!s.empty()) s.pop();

    // Compute next greater elements to the right
    for (int i = N; i >= 1; --i) {
        while (!s.empty() && heights[s.top()] < heights[i]) {
            s.pop();
        }
        right[i] = (s.empty()) ? N + 1 : s.top();
        s.push(i);
    }

    // Precompute sums for left and right side beauty
    for (int i = 1; i <= N; ++i) {
        sum_left[i] = sum_left[i - 1] + (i - left[i]);
        sum_right[i] = sum_right[i - 1] + (right[i] - i);
    }

    // Calculate and output beauty coefficient for each position
    for (int i = 1; i <= N; ++i) {
        int beauty = sum_left[N] - sum_left[i] + sum_right[i - 1] - (N - i);
        fout << beauty << "\n";
    }
    fout.close();

    return 0;
}
```

Now, let's briefly explain the strategy used in this code:

- We use a stack to find the closest greater element for every tower to both the left and right.
- By using precomputed sums of distances to left and right greater elements, we can efficiently calculate the beauty coefficient when a tower is removed.
- Using a stack ensures that our solution runs in O(N) time, where N is the number of towers.
- We utilize separate precomputed sum arrays for the left (`sum_left`) and right (`sum_right`) to avoid recomputing when outputting each position's beauty coefficient.
- We read the input from "turnuri.in" and write the output to "turnuri.out" using `ifstream` and `ofstream` respectively, without using `cin`, `cout`, `printf`, or `scanf`.
---------- user ----------


Program result did not match expected result.
Input data:
```
7
10 3 1 7 8 6 5
```
Expected output:
```
19
22
22
22
21
22
22
```
Found output:
```
5
12
14
13
11
14
16
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

It appears that the initial solution has a flaw in the logic used to compute the overall beauty coefficient, especially after removing a tower. We need to re-evaluate the algorithm to ensure that we correctly account for the changes in the beauty coefficient when a tower is replaced by a restaurant (considered as a tower of zero height).

Here's a corrected C++ solution applying the fixes:

```cpp
#include <fstream>
#include <stack>
#include <vector>

using namespace std;

int main() {
    ifstream fin("turnuri.in");
    ofstream fout("turnuri.out");

    int N;
    fin >> N;
    vector<int> heights(N + 2); // Include sentinel values at both ends
    vector<int> left(N + 2), right(N + 2);
    stack<int> s;

    // Read heights and add sentinel values
    for (int i = 1; i <= N; ++i) {
        fin >> heights[i];
    }
    heights[0] = heights[N + 1] = 1000000001; // Sentinel value greater than any tower height

    // Compute the closest taller tower to the left for each tower
    s.push(0); // Push the left sentinel index
    for (int i = 1; i <= N; ++i) {
        while (heights[s.top()] < heights[i]) {
            s.pop();
        }
        left[i] = s.top();
        s.push(i);
    }

    // Clear the stack to reuse it for the right side computation
    while (!s.empty()) s.pop();

    // Compute the closest taller tower to the right for each tower
    s.push(N + 1); // Push the right sentinel index
    for (int i = N; i >= 1; --i) {
        while (heights[s.top()] < heights[i]) {
            s.pop();
        }
        right[i] = s.top();
        s.push(i);
    }

    // Compute the total beauty coefficient
    long long total_beauty = 0;
    for (int i = 1; i <= N; ++i) {
        total_beauty += i - left[i];
        total_beauty += right[i] - i;
    }

    // Calculate and output beauty coefficient for each position
    for (int i = 1; i <= N; ++i) {
        long long beauty = total_beauty;
        // Subtract the beauty contributed by the current tower
        beauty -= (i - left[i] + right[i] - i);
        // Adjust for the removal of the current tower, considering the new neighbors
        beauty += (right[i] - left[i] - 1);
        fout << beauty << '\n';
    }

    fin.close();
    fout.close();

    return 0;
}
```

This solution introduces "sentinel" values at the beginning and end of the height array to simplify logic and avoid special cases for the edges. It calculates the closest taller tower on both the left and right for each tower and uses these to compute the total beauty coefficient.

When outputting the beauty coefficient for each position where a restaurant could be placed, it subtracts the contribution of the current tower and then adjusts for the removal of the tower, considering the new neighbors on the left and right.

By fixing these aspects, the program should now produce the correct output according to the problem statement.
---------- user ----------


Program result did not match expected result.
Input data:
```
7
10 3 1 7 8 6 5
```
Expected output:
```
19
22
22
22
21
22
22
```
Found output:
```
28
28
28
28
28
28
28
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
