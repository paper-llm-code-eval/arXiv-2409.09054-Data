{
  "success": true,
  "attempt": 3,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 5,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/886/2024-05-06T18:49:55.327Z-00339.log",
  "attemptStart": 1715021395.327,
  "attemptEnd": 1715021762.838,
  "attemptDuration": 367.5110001564026,
  "code": "#include <fstream>\n#include <unordered_map>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MOD = 1000003;\n\nint main() {\n    ifstream in(\"triunghiuri.in\");\n    ofstream out(\"triunghiuri.out\");\n\n    int p, N;\n    in >> p >> N;\n\n    unordered_map<int, int> x_count; // Map to count the number of points with the same x-coordinate\n    unordered_map<int, vector<int>> y_to_x; // Map y-coordinates to corresponding x-coordinates\n    int max_x_count = 0; // Variable to hold the maximum number of points with the same x-coordinate\n\n    for (int i = 0; i < N; i++) {\n        int x, y;\n        in >> x >> y;\n        x_count[x]++;\n        max_x_count = max(max_x_count, x_count[x]);\n        y_to_x[y].push_back(x);\n    }\n\n    if (p == 1) {\n        out << max_x_count << '\\n'; // Output the result for task 1\n    } else { // p == 2, calculate and output the result for task 2\n        long long triangle_count = 0;\n\n        // Calculate the number of triangles for task 2\n        for (auto& kv : y_to_x) {\n            vector<int>& x_coords = kv.second;\n            sort(x_coords.begin(), x_coords.end()); // Sort the x-coordinates for the current y-coordinate\n\n            for (size_t i = 0; i < x_coords.size(); i++) {\n                for (size_t j = i + 1; j < x_coords.size(); j++) {\n                    // For each pair of points with the same y-coordinate, count the\n                    // number of distinct x-coordinates in between that are not the same\n                    // as the x-coordinates of the current pair.\n                    for (int x = x_coords[i] + 1; x < x_coords[j]; x++) {\n                        if (x_count.find(x) != x_count.end()) {\n                            triangle_count = (triangle_count + x_count[x]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n\n        out << triangle_count << '\\n'; // Output the result for task 2\n    }\n    \n    in.close();\n    out.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 5132,
  "metadata": {
    "id": 886,
    "examples": [
      {
        "in": "1\n5\n2 1\n1 4\n3 4\n3 2\n6 4",
        "out": "2",
        "explainer": ""
      },
      {
        "in": "2\n5\n2 1\n1 4\n3 4\n3 2\n6 4",
        "out": "4",
        "explainer": ""
      }
    ],
    "body": "Se consideră $N$ puncte din plan, având coordonate numere naturale, relativ la un reper cartezian XOY, oricare două puncte fiind distincte.\n\n~[triunghiuri.png]\n\n# Cerință\n\nCunoscând $N$ și coordonatele celor $N$ puncte, să se determine:\n\n1. Numărul maxim de puncte care au aceeași abscisă.\n2. Numărul triunghiurilor care se pot desena respectând următoarele condiții:\n\t* au toate vârfurile în puncte dintre cele date;\n\t* au o latură paralelă cu OX;\n\t* **nu** au laturi paralele cu OY;\n\n# Date de intrare\n\nDatele de intrare se citesc din fișierul `triunghiuri.in`, care are următoarea structură:\n\nPe prima linie se află numărul $p$, care indică cerința ce trebuie rezolvată ($p$ are valoarea $1$ sau $2$);\nPe a doua linie se află numărul natural $N$, reprezentând numărul punctelor date;\nPe următoarele $N$ linii se găsesc câte două valori naturale $x \\ y$, separate prin câte un spațiu, reprezentând coordonatele punctelor date.\n\n# Date de ieșire\n\nFișierul `triunghiuri.out` va avea următoarea structură:\n\nDacă $p = 1$ se va scrie în fișier, pe prima linie, numărul maxim de puncte care au aceeași abscisă (cerința $1$).\nDacă $p = 2$ se va scrie în fișier, pe prima linie, numărul triunghiurilor care se pot desena respectând condițiile date, modulo $1 \\ 000 \\ 003$, adică restul împărțirii numărului de triunghiuri la $1 \\ 000 \\ 003$ (cerința $2$).\n\n# Restricții și precizări\n\n* $3 \\leq N \\leq 100 \\ 000$;\n* $0 \\leq x, y \\leq 1 000$;\n* Se acordă $25$ de puncte pentru rezolvarea corectă a cerinței $1$ și $65$ de puncte pentru rezolvarea corectă a cerinței $2$.",
    "header": {
      "problem_id": 886,
      "problem_name": "triunghiuri",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.3,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "triunghiuri.in",
      "output_filename": "triunghiuri.out",
      "multiple_solutions": false,
      "original_source": "OJI 2017 VIII: Problema 2"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "triunghiuri.in",
      "output": "triunghiuri.out"
    },
    "consoleInteraction": false
  }
}