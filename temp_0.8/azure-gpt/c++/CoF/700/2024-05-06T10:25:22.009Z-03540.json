{
  "success": true,
  "attempt": 1,
  "modelDesc": {
    "model": "azure-gpt",
    "chainOfThought": true,
    "options": {
      "temperature": 0.8
    }
  },
  "programmingLang": "c++",
  "temperature": 0.8,
  "chainOfThought": true,
  "depth": 1,
  "logfile": "run-oji/ro/temp_0.8/azure-gpt/c++/CoF/700/2024-05-06T10:25:22.009Z-03540.log",
  "attemptStart": 1714991122.009,
  "attemptEnd": 1714991167.735,
  "attemptDuration": 45.72599983215332,
  "code": "#include <fstream>\n#include <vector>\n#include <algorithm>\n\nstd::ifstream fin(\"mouse.in\");\nstd::ofstream fout(\"mouse.out\");\nstd::vector<std::vector<int>> grid;\nstd::vector<std::vector<bool>> visited;\nint m, n, maxFood = 0;\nstd::vector<std::pair<int, int>> maxPath, tempPath;\n\nconst std::vector<std::pair<int, int>> directions = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\n\nbool isValid(int x, int y) {\n    return x >= 0 && x < m && y >= 0 && y < n && !visited[x][y];\n}\n\nvoid backtrack(int x, int y, int currentFood) {\n    if (x == m - 1 && y == n - 1) {\n        if (currentFood > maxFood) {\n            maxFood = currentFood;\n            maxPath = tempPath;\n        }\n        return;\n    }\n\n    for (auto dir : directions) {\n        int newX = x + dir.first;\n        int newY = y + dir.second;\n        if (isValid(newX, newY)) {\n            visited[newX][newY] = true;\n            tempPath.emplace_back(newX, newY);\n            backtrack(newX, newY, currentFood + grid[newX][newY]);\n            tempPath.pop_back();\n            visited[newX][newY] = false;\n        }\n    }\n}\n\nint main() {\n    fin >> m >> n;\n    grid.resize(m, std::vector<int>(n));\n    visited.resize(m, std::vector<bool>(n, false));\n    \n    for (int i = 0; i < m; ++i) {\n        for (int j = 0; j < n; ++j) {\n            fin >> grid[i][j];\n        }\n    }\n\n    tempPath.emplace_back(0, 0);\n    visited[0][0] = true;\n    backtrack(0, 0, grid[0][0]);\n    \n    fout << maxPath.size() << \" \" << maxFood << \"\\n\";\n    for (const auto& p : maxPath) {\n        fout << p.first + 1 << \" \" << p.second + 1 << \"\\n\";\n    }\n\n    fin.close();\n    fout.close();\n    return 0;\n}\n",
  "maxFeedbackRounds": 5,
  "tokenCount": 2273,
  "metadata": {
    "id": 700,
    "examples": [
      {
        "in": "2 4\n1 2 6 3\n3 4 1 2",
        "out": "7 21\n1 1\n2 1\n2 2\n1 2\n1 3\n1 4\n2 4",
        "explainer": ""
      }
    ],
    "body": "Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \\times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. \n\n# Cerință\n\nStabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.\n\n# Date de intrare\nFișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \\cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.\n\n# Date de ieșire\nÎn fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.\n\n# Restricții și precizări\n- Toate valorile din fișier sunt numere naturale între $1$ și $100$.\n- Veți primi 40 de puncte pentru afișarea primelor două numere.",
    "header": {
      "problem_id": 700,
      "problem_name": "mouse",
      "tags": "[Ad hoc, Grid, Implementation]",
      "language": "romanian",
      "interactive": false,
      "time_limit_s": 0.03,
      "memory_limit_mb": 4,
      "console_input": false,
      "input_filename": "mouse.in",
      "output_filename": "mouse.out",
      "multiple_solutions": true,
      "original_source": "OJI 2002 IX: Problema 2 (Modificată)"
    },
    "maxTimeSec": 1,
    "maxMemMB": "6m",
    "filename": {
      "input": "mouse.in",
      "output": "mouse.out"
    },
    "consoleInteraction": false
  }
}