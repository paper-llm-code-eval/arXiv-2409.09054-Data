---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::ifstream fin("mouse.in");
std::ofstream fout("mouse.out");

const int MAX = 105;
int m, n;
int food[MAX][MAX];
std::pair<int, int> dp[MAX][MAX];
std::vector<std::pair<int, int>> path;

std::pair<int, int> getMaxFood(int i, int j) {
    if (i < 1 || j < 1) return {0, 0};
    if (dp[i][j] != std::make_pair(-1, -1)) return dp[i][j];

    auto fromTop = getMaxFood(i - 1, j);
    auto fromLeft = getMaxFood(i, j - 1);

    if (fromTop.second >= fromLeft.second) {
        dp[i][j] = {fromTop.first + 1, fromTop.second + food[i][j]};
    } else {
        dp[i][j] = {fromLeft.first + 1, fromLeft.second + food[i][j]};
    }

    return dp[i][j];
}

void reconstructPath(int i, int j) {
    if (i < 1 || j < 1) return;
    if (i == 1 && j == 1) {
        path.push_back({1, 1});
        return;
    }

    if (i > 1 && dp[i][j].second == dp[i - 1][j].second + food[i][j]) {
        reconstructPath(i - 1, j);
    } else {
        reconstructPath(i, j - 1);
    }
    path.push_back({i, j});
}

int main() {
    // Initialize the dp array with -1 to indicate uncomputed states
    std::fill(&dp[0][0], &dp[0][0] + sizeof(dp) / sizeof(dp[0][0]), std::make_pair(-1, -1));

    fin >> m >> n;
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            fin >> food[i][j];
        }
    }

    dp[1][1] = {1, food[1][1]};  // Base case

    std::pair<int, int> result = getMaxFood(m, n);
    reconstructPath(m, n);

    fout << result.first << " " << result.second << "\n";
    for (const auto& p : path) {
        fout << p.first << " " << p.second << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```
This C++ program uses dynamic programming to calculate the maximum amount of food that can be collected and the path followed to collect it. The `dp` array keeps track of the maximum food that can be collected up to each point, as well as the number of cells visited to get there. The `reconstructPath` function traces back the path from the bottom right corner to the top left corner using the information in the `dp` array. Input is read from "mouse.in" and output is written to "mouse.out".
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The program result did not match the expected result because the original code did not correctly implement the backtracking to reconstruct the optimal path. It just checked the immediate top or left cell without considering the possibility that the optimal path could involve moving in a non-monotonic way (e.g., moving up and then down or left and then right).

To fix the solution, we need to adjust the dynamic programming state to remember the direction from which we came to a certain cell. Also, we have to carefully reconstruct the path starting from the bottom right corner and following the recorded directions in reverse order to get back to the top left corner.

Here is the fixed and rewritten solution:

```cpp
#include <fstream>
#include <vector>
#include <cstring>

std::ifstream fin("mouse.in");
std::ofstream fout("mouse.out");

const int MAX = 105;
int m, n;
int food[MAX][MAX];
int dp[MAX][MAX];
std::pair<int, int> prev[MAX][MAX];
std::vector<std::pair<int, int>> path;

void reconstructPath(int i, int j) {
    if (i == 1 && j == 1) {
        path.push_back({1, 1});
        return;
    }

    reconstructPath(prev[i][j].first, prev[i][j].second);
    path.push_back({i, j});
}

int main() {
    fin >> m >> n;
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            fin >> food[i][j];
        }
    }

    memset(dp, 0, sizeof(dp));

    // Base case initialization
    dp[1][1] = food[1][1];

    // Dynamic programming to find the max food path
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (i == 1 && j == 1) continue; // Skip the starting cell
            int fromTop = (i > 1) ? dp[i - 1][j] : 0;
            int fromLeft = (j > 1) ? dp[i][j - 1] : 0;

            if (fromTop > fromLeft) {
                dp[i][j] = fromTop + food[i][j];
                prev[i][j] = {i - 1, j};
            } else {
                dp[i][j] = fromLeft + food[i][j];
                prev[i][j] = {i, j - 1};
            }
        }
    }

    reconstructPath(m, n);

    fout << path.size() << " " << dp[m][n] << "\n";
    for (const auto& p : path) {
        fout << p.first << " " << p.second << "\n";
    }

    fin.close();
    fout.close();
    return 0;
}
```

In this version, we use a `prev` array to track the previous cell for each cell in the optimal path. When we update `dp[i][j]`, we also update `prev[i][j]` to remember how we arrived at this cell—either from the top or from the left. Then we can use `reconstructPath` to build the path by following these links backwards from the end to the start. This will ensure we get the correct path as demonstrated by the expected output for the provided test case.
---------- user ----------


Program result did not match expected result.
Input data:
```
2 4
1 2 6 3
3 4 1 2
```
Expected output:
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```
Found output:
```
5 14
1 1
1 2
1 3
1 4
2 4
```

Evaluate the differences between the expected and found result.
Write a comprehensive explanation of why the results differ.
If the solution has a bug fix it, else reimplement it using a different algorithm or data structure.

Rewrite the solution.

---

Rewrite the entire solution applying necessary fixes.
---------- assistant ----------

The incorrect output suggests that the dynamic programming (DP) approach used in the previous solution was mistakenly designed as if the mouse could only move right or down. However, the problem statement allows the mouse to move to any adjacent cell (up, down, left, or right) as long as it has not been visited before. This means that the previous solution did not explore all possible paths, leading to an incorrect result.

To correctly solve the problem, we must use a backtracking algorithm that explores all possible paths and chooses the one that collects the maximum amount of food. We need to keep track of visited cells to avoid revisiting them.

Here is the corrected solution using backtracking:

```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::ifstream fin("mouse.in");
std::ofstream fout("mouse.out");

const int MAX = 105;
int m, n;
int food[MAX][MAX];
bool visited[MAX][MAX];
int maxFood = 0;
std::vector<std::pair<int, int>> bestPath;
std::vector<std::pair<int, int>> tempPath;

// Directions: Up, Right, Down, Left
int dx[] = {-1, 0, 1, 0};
int dy[] = {0, 1, 0, -1};

void search(int x, int y, int currentFood) {
    if (x == m && y == n) {
        if (currentFood > maxFood) {
            maxFood = currentFood;
            bestPath = tempPath;
        }
        return;
    }

    for (int dir = 0; dir < 4; ++dir) {
        int nx = x + dx[dir];
        int ny = y + dy[dir];

        if (nx >= 1 && nx <= m && ny >= 1 && ny <= n && !visited[nx][ny]) {
            visited[nx][ny] = true;
            tempPath.emplace_back(nx, ny);

            search(nx, ny, currentFood + food[nx][ny]);

            visited[nx][ny] = false;
            tempPath.pop_back();
        }
    }
}

int main() {
    fin >> m >> n;
    for (int i = 1; i <= m; ++i)
        for (int j = 1; j <= n; ++j)
            fin >> food[i][j];

    visited[1][1] = true;
    tempPath.emplace_back(1, 1);
    search(1, 1, food[1][1]);

    fout << bestPath.size() << " " << maxFood << "\n";
    for (const auto& p : bestPath) {
        fout << p.first << " " << p.second << "\n";
    }

    fin.close();
    fout.close();

    return 0;
}
```

This solution uses backtracking to explore all paths that the mouse can take. It starts from the initial position (1,1) and tries to move in all possible directions. When it reaches the final position (m,n), it checks if the current path has collected more food than the previous best path and updates the best path if necessary. The `visited` array ensures that the mouse does not enter a cell it has already visited. This approach will find the path with the maximum amount of food, as required by the problem statement.
