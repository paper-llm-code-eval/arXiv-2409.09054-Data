---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `mouse.in` and write to `mouse.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Un experiment urmărește comportarea unui șoricel pus într-o cutie dreptunghiulară, împărțită în $m \times n$ cămăruțe egale de formă pătrată. Fiecare cămăruță conține o anumită cantitate de hrană. Șoricelul trebuie să pornească din colțul $(1,1)$ al cutiei și să ajungă în colțul opus, mâncând cât mai multă hrană. El poate trece dintr-o cameră în una alăturată (două camere sunt alăturate dacă au un perete comun), mănâncă toată hrana din cămăruță atunci când intră și nu intră niciodată într-o cameră în care a mai intrat înainte. 

# Cerință

Stabiliți care este cantitatea maximă de hrană pe care o poate mânca și traseul pe care îl poate urma pentru a culege această cantitate maximă.

# Date de intrare
Fișierul de intrare `mouse.in` conține pe prima linie două numere $m$ și $n$ reprezentând numărul de linii respectiv numărul de coloane ale cutiei, iar pe următoarele $m$ linii cele $m \cdot n$ numere reprezentând cantitatea de hrană existentă în fiecare cămăruță, câte $n$ numere pe fiecare linie, separate prin spații.

# Date de ieșire
În fișierul de ieșire `mouse.out` se vor scrie pe prima linie două numere separate printr-un spațiu: numărul de cămăruțe vizitate și cantitatea de hrană maximă culeasă. Pe următoarele linii se va scrie un traseu posibil pentru cantitatea dată, sub formă de perechi de numere, începând cu $(1, 1)$ și terminând cu $(m, n)$.

# Restricții și precizări
- Toate valorile din fișier sunt numere naturale între $1$ și $100$.
- Veți primi 40 de puncte pentru afișarea primelor două numere.

---

Example:
`mouse.in`
```
2 4
1 2 6 3
3 4 1 2
```

`mouse.out`
```
7 21
1 1
2 1
2 2
1 2
1 3
1 4
2 4
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::ifstream in("mouse.in");
std::ofstream out("mouse.out");

const int MAX = 100;
int m, n;
int food[MAX][MAX];
int dp[MAX][MAX];
std::pair<int, int> prev[MAX][MAX];

void solve() {
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            dp[i][j] = food[i][j];
            if (i > 0) dp[i][j] = std::max(dp[i][j], dp[i - 1][j] + food[i][j]);
            if (j > 0) dp[i][j] = std::max(dp[i][j], dp[i][j - 1] + food[i][j]);
            if (i > 0 && dp[i][j] == dp[i - 1][j] + food[i][j]) prev[i][j] = {i - 1, j};
            if (j > 0 && dp[i][j] == dp[i][j - 1] + food[i][j]) prev[i][j] = {i, j - 1};
        }
    }
}

int main() {
    in >> m >> n;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            in >> food[i][j];
        }
    }

    solve();

    std::vector<std::pair<int, int>> path;
    for (int i = m - 1, j = n - 1; i >= 0 && j >= 0; ) {
        path.push_back({i + 1, j + 1});
        std::pair<int, int> p = prev[i][j];
        i = p.first;
        j = p.second;
    }

    std::reverse(path.begin(), path.end());

    out << path.size() << ' ' << dp[m - 1][n - 1] << '\n';
    for (auto &p : path) {
        out << p.first << ' ' << p.second << '\n';
    }

    in.close();
    out.close();
    return 0;
}
```
This code reads from the file `mouse.in`, applies dynamic programming to find the path with the maximum amount of food, and writes the result to `mouse.out`.
---------- user ----------


Program exited with code 137.
stdout:
```

```
stderr:
```

```

Think of what has caused the exit code. Use the standard out and standard error to help you understand the issue.
Implement a solution to fix the program

---

Rewrite the entire solution applying necessary fixes.
