---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `grad.in` and write to `grad.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un șir $x_1, x_2, \dots, x_n$ de $n$ numere naturale distincte, două câte două. Pentru o secvență de $k$ numere ($x_p, x_{p+1}, \dots, x_{p+k-1}$), care începe cu numărul de pe poziția $p$ din șirul dat, definim gradul său ca fiind numărul de numere din secvență, care rămân pe aceleași poziții după ordonarea crescătoare a secvenței. De exemplu, pentru $n=7$ și șirul format din numerele: $1, 5, 7, 4, 6, 2, 9$, secvența formată din numerele $7, 4, 6, 2$ (corespunzătoare lui $p=3$ și $k=4$) are gradul egal cu $2$ deoarece, după ordonarea crescătoare a numerelor din secvență, aceasta devine $2, 4, 6, 7$, numerele $4$ și $6$ rămânând pe aceleași poziții.

# Cerință

Scrieți un program care citește numerele $n$, $k$, $x_1$, $x_2$, $\dots$, $x_n$, cu semnificația din enunț, și apoi determină:

1. gradul întregului șir de numere;
2. poziția primului element din prima secvență de lungime $k$ ce are gradul maxim, precum și gradul acestei secvențe.

# Date de intrare

Fișierul de intrare `grad.in` conține pe prima linie numerele $n$ și $k$, separate printr-un spațiu, iar pe linia următoare $n$ numere naturale distincte $x_1$, $x_2$, $\dots$, $x_n$, corespunzătoare șirului de numere, separate prin câte un spațiu.

# Date de ieșire

Fișierul de ieșire `grad.out` va conține pe prima linie un număr natural reprezentând gradul întregului șir de numere, iar pe următoarea linie două numere naturale, separate printr-un singur spațiu, primul număr reprezentând poziția primului element din prima secvență de lungime $k$ ce are grad maxim și cel de-al doilea număr reprezentând gradul acestei secvențe.

# Restricții și precizări

* $0 < n \leq 10 \ 000$
* $0 < k \leq n$
* Numerele din șir sunt numere naturale strict mai mici decât $32 \ 000$.
* O secvență de numere din șir reprezintă o succesiune de numere din acel șir, aflate pe poziții consecutive.
* Gradul întregului șir de numere este egal cu gradul secvenței de $n$ numere care începe cu numărul de pe poziția $1$ și conține toate cele $n$ numere din șir.
* Pentru rezolvarea corectă a subpunctului 1 se obține $40\%$ din punctaj.
* Pentru determinarea poziției primului element din prima secvență de lungime $k$ ce are grad maxim, se obține $20\%$ din punctaj, iar pentru determinarea gradului maxim de la subpunctul 2 se obține $40\%$ din punctaj.

---

Example:
`grad.in`
```
7 4
1 5 7 4 6 2 9
```

`grad.out`
```
3
3 2
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::pair<int, int> get_degree_and_position(const std::vector<int>& numbers, int n, int k) {
    int max_degree = 0;
    int position = 1;
    
    for (int i = 0; i <= n - k; ++i) {
        int current_degree = 0;
        std::vector<int> sequence(numbers.begin() + i, numbers.begin() + i + k);
        std::vector<int> sorted_sequence(sequence);
        std::sort(sorted_sequence.begin(), sorted_sequence.end());
        
        for (int j = 0; j < k; ++j) {
            if (sequence[j] == sorted_sequence[j]) {
                current_degree++;
            }
        }
        
        if (current_degree > max_degree) {
            max_degree = current_degree;
            position = i + 1; // Positioning is 1-indexed.
        }
    }
    
    return {max_degree, position};
}

int main() {
    std::ifstream fin("grad.in");
    std::ofstream fout("grad.out");

    int n, k;
    fin >> n >> k;
    std::vector<int> numbers(n);
    
    for (int i = 0; i < n; ++i) {
        fin >> numbers[i];
    }
    fin.close();

    // Calculate the degree of the whole sequence.
    int whole_degree = 0;
    std::vector<int> sorted_numbers(numbers);
    std::sort(sorted_numbers.begin(), sorted_numbers.end());
    for (int i = 0; i < n; ++i) {
        if (numbers[i] == sorted_numbers[i]) {
            whole_degree++;
        }
    }
    fout << whole_degree << '\n';

    // Calculate degree and position of the first max degree sub-sequence of length k.
    auto [max_degree, position] = get_degree_and_position(numbers, n, k);
    fout << position << ' ' << max_degree << '\n';

    fout.close();

    return 0;
}
```

Explanation:

1. I'm using `ifstream` and `ofstream` for file I/O operations, as per the requirements.
2. The `get_degree_and_position` function calculates the degree and position of the first sub-sequence with a maximum degree of length `k`.
3. I'm sorting a copy of the sequence to compare the elements and find the degree.
4. The degree of the entire sequence is calculated separately.
5. I'm using `\n` for newline characters in the output to ensure faster execution compared to `std::endl`, which also forces a flush of the output buffer.
