---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `sir.in` and write to `sir.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră următorul şir, construit astfel încât fiecare element al lui, cu excepţia primului, se obţine din cel precedent: $1, 11, 21, 1211, 111221, \dots$
Termenii din şir sunt numerotaţi începând cu $1$.

# Cerință

Dat $n$, un număr natural, să se determine cel de-al $n$-lea termen din şirul dat.

# Date de intrare

Pe prima linie a fișierului de intrare `sir.in` se găseste numarul $n$.

# Date de ieșire

Pe prima linie a fișierului de ieșire `sir.out` se va găsi un singur număr întreg, al $n$-lea termen al sirului.

# Restricții și precizări

* $4 \leq n \leq 35$;
* numărul de cifre ale unui termen nu depăşeşte $17 \ 000$.

---

Example:
`sir.in`
```
4
```

`sir.out`
```
1211
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <string>
#include <vector>

std::string getNextTerm(const std::string &currentTerm) {
    std::string nextTerm;
    int count = 1;
    for (size_t i = 0; i < currentTerm.length(); ++i) {
        if (i + 1 < currentTerm.length() && currentTerm[i] == currentTerm[i + 1]) {
            ++count;
        } else {
            nextTerm += std::to_string(count) + currentTerm[i];
            count = 1;
        }
    }
    return nextTerm;
}

int main() {
    std::ifstream inFile("sir.in");
    std::ofstream outFile("sir.out");
    int n;
    inFile >> n;
    
    std::string term = "1";
    for (int i = 2; i <= n; ++i) {
        term = getNextTerm(term);
    }

    outFile << term;
    inFile.close();
    outFile.close();

    return 0;
}
```

Explanation:
- We have defined a helper function `getNextTerm` which takes the current term as input and generates the next term of the sequence.
- The `main` function is reading the value of `n` from `sir.in`.
- We initialize the first term of the sequence as `"1"`.
- We then use a loop to generate each term up to the `n`th term.
- Finally, we write the `n`th term to `sir.out` and close both files.
