---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `divizor.in` and write to `divizor.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră un număr natural $N$ format din $m$ cifre și toate cele $m - 1$ numere ce se pot forma succesiv pornind de la numărul inițial $N$, prin mutarea celei mai semnificative cifre a combinației curente la sfârșitul acesteia, după cum se poate observa din exemplele de mai jos.

$N = 12035 \rightarrow 20351 \rightarrow 03512 \rightarrow 35120 \rightarrow 51203$ ($4$ combinații). Se taie zeroul de la inceputul lui $03512$ iar numărul a rămas $3512$.
 
$N = 2121 \rightarrow 1212 \rightarrow 2121 \rightarrow 1212$ ($3$ combinații, $3$ numere)
 
# Cerință
 
Scrieți un program care să citească numărul $N$, să construiască cele $m - 1$ numere și să determine:

1. numărul cu cel mai mare număr de divizori, dintre cele $m$ numere; dacă sunt mai multe astfel de numere printre cele $m$, se vor scrie în fișierul de ieșire toate aceste numere.
2. cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere, iar în cazul în care nu există un astfel de divizor (toate cele $m$ numere sunt prime), se va afișa valoarea $0$.

# Date de intrare

Fișierul `divizor.in` conține o singură linie pe care este scris numărul natural $N$.


# Date de ieșire

Fișierul `divizor.out` va conține:

* pe prima linie numărul sau numerele cu număr maxim de divizori, despărțite prin câte un spațiu
* pe a doua linie, un număr natural reprezentând cel mai mare număr care este divizor propriu pentru cel puțin unul din cele $m$ numere sau $0$, în cazul în care toate cele $m$ numere sunt numere prime


# Restricții și precizări

* $1 \leq N < 1 \ 000 \ 000$;
* Conform procedurii de formare a combinațiilor, se poate întâmpla să se obțină de mai multe ori același număr. Se vor considera toate combinațiile posibile, chiar dacă există numere care se repetă.
* Cifra $0$ scrisă în fața unui număr se consideră neglijabilă și nu se cere afișată în rezultatul final.
* La toate cerințele se ia în considerare și numărul inițial.
* Divizorul propriu al unui număr este un divizor diferit de $1$ și de număr.
* Se acordă punctaje parțiale: cerința a) 60% din punctaj, cerința b) 40% din punctaj

---

Example:
`divizor.in`
```
212
```

`divizor.out`
```
212
106
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <vector>
#include <algorithm>

std::vector<int> get_rotations(int n) {
    std::vector<int> rotations;
    int m = 1;
    int temp = n;
    while (temp >= 10) {
        m *= 10;
        temp /= 10;
    }
    rotations.push_back(n);
    int rotated = n;
    do {
        rotated = (rotated % m) * 10 + rotated / m;
        if (rotated != n) {
            rotations.push_back(rotated);
        }
    } while (rotated != n);
    return rotations;
}

int count_divisors(int n) {
    int total = 0;
    for (int i = 1; i <= n; ++i)
        if (n % i == 0) ++total;
    return total;
}

int main() {
    std::ifstream in("divizor.in");
    std::ofstream out("divizor.out");

    int N;
    in >> N;
    in.close();

    auto rotations = get_rotations(N);

    std::vector<int> max_divisors;
    int max_div_count = 0;
    int max_prop_div = 0;
    for (int num : rotations) {
        int div_count = count_divisors(num);
        if (div_count > max_div_count) {
            max_div_count = div_count;
            max_divisors.clear();
            max_divisors.push_back(num);
        } else if (div_count == max_div_count) {
            max_divisors.push_back(num);
        }
        for (int i = 2; i < num; ++i) {
            if (num % i == 0) {
                max_prop_div = std::max(max_prop_div, i);
            }
        }
    }

    std::sort(max_divisors.begin(), max_divisors.end());
    for (int i = 0; i < max_divisors.size(); ++i) {
        if (i > 0) out << " ";
        out << max_divisors[i];
    }
    out << "\n" << max_prop_div << "\n";

    out.close();
    return 0;
}
```
This C++ program reads the number from `divizor.in`, calculates all the rotations, finds the numbers with the maximum number of divisors and the largest proper divisor, then writes the results to `divizor.out`. The program uses file stream `(std::ifstream, std::ofstream)` for file operations, and uses functions and standard algorithms to keep the code organized and efficient.
