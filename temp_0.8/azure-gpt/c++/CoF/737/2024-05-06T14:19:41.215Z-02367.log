---------- user ----------

Here is a programming challenge. Points will be awarded for fastest code execution.
Create the most efficient solution for this challenge in c++. The code must compile and be correct.
The solution must read from `multimi.in` and write to `multimi.out`.
The solution must not use `cin >>` or `cout <<` or `printf()` or `scanf()` to read input data or write output data.

The solution must be written in a markdown code block.

---

Se consideră $n$ mulțimi. Fiecare mulțime conține numai numere naturale consecutive. Pentru a indica o astfel de mulțime este suficient să dăm primul și ultimul element din ea.

# Cerință

Scrieți un program care să determine elementele intersecției celor $n$ mulțimi.

# Date de intrare

De pe prima linie a fișierului de intrare `multimi.in` se citește numărul $n$. Apoi, de pe fiecare din cele $n$ linii următoare, se citesc perechi de numere, câte o pereche pe linie, separate prin câte un spațiu, care reprezintă cel mai mic, respectiv cel mai mare element din fiecare mulțime.


# Date de ieșire

Pe prima linie a fișierului de ieșire `multimi.out` se vor afișa elementele intersecției cu câte un spațiu între ele. În cazul în care intersecția nu are nici un element se va afișa mesajul `multimea vida`.


# Restricții și precizări

* $1 \leq n \leq 30$
* Elementele mulțimilor sunt numere naturale $\leq 30 \ 000$.

---

Example:
`multimi.in`
```
3
5 10
4 11
2 9
```

`multimi.out`
```
5 6 7 8 9
```


---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:
---------- assistant ----------

Before writing my solution in c++, I will think about the challenge step by step, come up with the most optimal solution, then I will verify the logic against the example.
Here are all the necessary steps to solve the challenge:```cpp
#include <fstream>
#include <algorithm>

using namespace std;

int main() {
    ifstream in("multimi.in");
    ofstream out("multimi.out");

    int n, start, end;
    int interStart = 0, interEnd = 30000;

    in >> n;
    for (int i = 0; i < n; ++i) {
        in >> start >> end;
        interStart = max(interStart, start);
        interEnd = min(interEnd, end);
    }
    in.close();

    if (interStart > interEnd) {
        out << "multimea vida";
    } else {
        for (int i = interStart; i <= interEnd; ++i) {
            out << i << ' ';
        }
    }
    out.close();

    return 0;
}
```
This C++ program reads data from `multimi.in`, calculates the intersection of the sets, and outputs the result to `multimi.out`. It uses efficient I/O operations and avoids the slower `cin/cout` methods. It first determines the maximal lower bound and the minimal upper bound of all sets to find the intersection and then outputs the result.
